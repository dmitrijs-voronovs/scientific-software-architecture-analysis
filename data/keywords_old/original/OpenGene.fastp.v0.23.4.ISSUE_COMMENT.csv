id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:2,Availability,down,downloaded,2,"I downloaded the pre-built binary located at http://opengene.org/fastp/fastp. Now that you mention it, running without any parameters, I see the version number output (0.12.2). Thanks for pointing this out. However, the `-?` or `--help` options do not generate the version message:. ```; xxx@xxx[scripts] ./fastp --help ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by ",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:835,Energy Efficiency,adapt,adapter,835,"I downloaded the pre-built binary located at http://opengene.org/fastp/fastp. Now that you mention it, running without any parameters, I see the version number output (0.12.2). Thanks for pointing this out. However, the `-?` or `--help` options do not generate the version message:. ```; xxx@xxx[scripts] ./fastp --help ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by ",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:904,Energy Efficiency,adapt,adapter,904,"I downloaded the pre-built binary located at http://opengene.org/fastp/fastp. Now that you mention it, running without any parameters, I see the version number output (0.12.2). Thanks for pointing this out. However, the `-?` or `--help` options do not generate the version message:. ```; xxx@xxx[scripts] ./fastp --help ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by ",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:961,Energy Efficiency,adapt,adapter,961,"I downloaded the pre-built binary located at http://opengene.org/fastp/fastp. Now that you mention it, running without any parameters, I see the version number output (0.12.2). Thanks for pointing this out. However, the `-?` or `--help` options do not generate the version message:. ```; xxx@xxx[scripts] ./fastp --help ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by ",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:1033,Energy Efficiency,adapt,adapters,1033,"pengene.org/fastp/fastp. Now that you mention it, running without any parameters, I see the version number output (0.12.2). Thanks for pointing this out. However, the `-?` or `--help` options do not generate the version message:. ```; xxx@xxx[scripts] ./fastp --help ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by quality in tail (3'), default is disabled (WARNING: t",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:5379,Energy Efficiency,adapt,adapter,5379,"), disabled by default (int [=0]); -S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; ```; xxx@xxx[scripts] ./fastp ""-?"" ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read c",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:5448,Energy Efficiency,adapt,adapter,5448,"n(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; ```; xxx@xxx[scripts] ./fastp ""-?"" ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE da",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:5505,Energy Efficiency,adapt,adapter,5505,"n(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; ```; xxx@xxx[scripts] ./fastp ""-?"" ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE da",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:5577,Energy Efficiency,adapt,adapters,5577,"d by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; ```; xxx@xxx[scripts] ./fastp ""-?"" ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by quality in tail (3'), default is disabled (WARNING: t",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:273,Integrability,message,message,273,"I downloaded the pre-built binary located at http://opengene.org/fastp/fastp. Now that you mention it, running without any parameters, I see the version number output (0.12.2). Thanks for pointing this out. However, the `-?` or `--help` options do not generate the version message:. ```; xxx@xxx[scripts] ./fastp --help ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by ",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:835,Integrability,adapter,adapter,835,"I downloaded the pre-built binary located at http://opengene.org/fastp/fastp. Now that you mention it, running without any parameters, I see the version number output (0.12.2). Thanks for pointing this out. However, the `-?` or `--help` options do not generate the version message:. ```; xxx@xxx[scripts] ./fastp --help ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by ",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:904,Integrability,adapter,adapter,904,"I downloaded the pre-built binary located at http://opengene.org/fastp/fastp. Now that you mention it, running without any parameters, I see the version number output (0.12.2). Thanks for pointing this out. However, the `-?` or `--help` options do not generate the version message:. ```; xxx@xxx[scripts] ./fastp --help ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by ",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:961,Integrability,adapter,adapter,961,"I downloaded the pre-built binary located at http://opengene.org/fastp/fastp. Now that you mention it, running without any parameters, I see the version number output (0.12.2). Thanks for pointing this out. However, the `-?` or `--help` options do not generate the version message:. ```; xxx@xxx[scripts] ./fastp --help ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by ",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:1033,Integrability,adapter,adapters,1033,"pengene.org/fastp/fastp. Now that you mention it, running without any parameters, I see the version number output (0.12.2). Thanks for pointing this out. However, the `-?` or `--help` options do not generate the version message:. ```; xxx@xxx[scripts] ./fastp --help ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by quality in tail (3'), default is disabled (WARNING: t",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:4815,Integrability,message,message,4815,"l be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20]); -j, --json the json format report file name (string [=fastp.json]); -h, --html the html format report file name (string [=fastp.html]); -R, --report_title should be quoted with ' or "", default is ""fastp report"" (string [=fastp report]); -w, --thread worker thread number, default is 3 (int [=3]); -s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0]); -S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; ```; xxx@xxx[scripts] ./fastp ""-?"" ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:5379,Integrability,adapter,adapter,5379,"), disabled by default (int [=0]); -S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; ```; xxx@xxx[scripts] ./fastp ""-?"" ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read c",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:5448,Integrability,adapter,adapter,5448,"n(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; ```; xxx@xxx[scripts] ./fastp ""-?"" ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE da",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:5505,Integrability,adapter,adapter,5505,"n(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; ```; xxx@xxx[scripts] ./fastp ""-?"" ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE da",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:5577,Integrability,adapter,adapters,5577,"d by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; ```; xxx@xxx[scripts] ./fastp ""-?"" ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by quality in tail (3'), default is disabled (WARNING: t",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:9359,Integrability,message,message,9359,"be discarded, default is 15. (int [=15]); -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; -U, --umi enable unique molecular identifer (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_sampling one in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20]); -j, --json the json format report file name (string [=fastp.json]); -h, --html the html format report file name (string [=fastp.html]); -R, --report_title should be quoted with ' or "", default is ""fastp report"" (string [=fastp report]); -w, --thread worker thread number, default is 3 (int [=3]); -s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0]); -S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; That being said, a dedicated `--version` flag would be greatly appreciated in that it simplifies machine parsing of the program version number for including this information in run logs. Thanks for your consideration of this enhancement.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:835,Modifiability,adapt,adapter,835,"I downloaded the pre-built binary located at http://opengene.org/fastp/fastp. Now that you mention it, running without any parameters, I see the version number output (0.12.2). Thanks for pointing this out. However, the `-?` or `--help` options do not generate the version message:. ```; xxx@xxx[scripts] ./fastp --help ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by ",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:904,Modifiability,adapt,adapter,904,"I downloaded the pre-built binary located at http://opengene.org/fastp/fastp. Now that you mention it, running without any parameters, I see the version number output (0.12.2). Thanks for pointing this out. However, the `-?` or `--help` options do not generate the version message:. ```; xxx@xxx[scripts] ./fastp --help ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by ",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:961,Modifiability,adapt,adapter,961,"I downloaded the pre-built binary located at http://opengene.org/fastp/fastp. Now that you mention it, running without any parameters, I see the version number output (0.12.2). Thanks for pointing this out. However, the `-?` or `--help` options do not generate the version message:. ```; xxx@xxx[scripts] ./fastp --help ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by ",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:1033,Modifiability,adapt,adapters,1033,"pengene.org/fastp/fastp. Now that you mention it, running without any parameters, I see the version number output (0.12.2). Thanks for pointing this out. However, the `-?` or `--help` options do not generate the version message:. ```; xxx@xxx[scripts] ./fastp --help ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by quality in tail (3'), default is disabled (WARNING: t",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:5379,Modifiability,adapt,adapter,5379,"), disabled by default (int [=0]); -S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; ```; xxx@xxx[scripts] ./fastp ""-?"" ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read c",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:5448,Modifiability,adapt,adapter,5448,"n(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; ```; xxx@xxx[scripts] ./fastp ""-?"" ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE da",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:5505,Modifiability,adapt,adapter,5505,"n(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; ```; xxx@xxx[scripts] ./fastp ""-?"" ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE da",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:5577,Modifiability,adapt,adapters,5577,"d by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; ```; xxx@xxx[scripts] ./fastp ""-?"" ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by quality in tail (3'), default is disabled (WARNING: t",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:9598,Modifiability,enhance,enhancement,9598,"be discarded, default is 15. (int [=15]); -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; -U, --umi enable unique molecular identifer (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_sampling one in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20]); -j, --json the json format report file name (string [=fastp.json]); -h, --html the html format report file name (string [=fastp.html]); -R, --report_title should be quoted with ' or "", default is ""fastp report"" (string [=fastp report]); -w, --thread worker thread number, default is 3 (int [=3]); -s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0]); -S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; That being said, a dedicated `--version` flag would be greatly appreciated in that it simplifies machine parsing of the program version number for including this information in run logs. Thanks for your consideration of this enhancement.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:1009,Safety,detect,detection,1009,"I downloaded the pre-built binary located at http://opengene.org/fastp/fastp. Now that you mention it, running without any parameters, I see the version number output (0.12.2). Thanks for pointing this out. However, the `-?` or `--help` options do not generate the version message:. ```; xxx@xxx[scripts] ./fastp --help ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE data); -3, --cut_by_quality3 enable per read cutting by ",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:5553,Safety,detect,detection,5553,"n(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; ```; xxx@xxx[scripts] ./fastp ""-?"" ; usage: ./fastp --in1=string [options] ...; options:; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); -6, --phred64 indicates the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 2. (int [=2]); -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for SE data, default is auto (automatic detection). For PE data adapters can be trimmed without knowing the sequences. (string [=auto]); -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; -5, --cut_by_quality5 enable per read cutting by quality in front (5'), default is disabled (WARNING: this will interfere deduplication for both PE/SE da",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:9554,Testability,log,logs,9554,"be discarded, default is 15. (int [=15]); -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; -U, --umi enable unique molecular identifer (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_sampling one in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20]); -j, --json the json format report file name (string [=fastp.json]); -h, --html the html format report file name (string [=fastp.html]); -R, --report_title should be quoted with ' or "", default is ""fastp report"" (string [=fastp report]); -w, --thread worker thread number, default is 3 (int [=3]); -s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0]); -S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; That being said, a dedicated `--version` flag would be greatly appreciated in that it simplifies machine parsing of the program version number for including this information in run logs. Thanks for your consideration of this enhancement.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159:9459,Usability,simpl,simplifies,9459,"be discarded, default is 15. (int [=15]); -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; -U, --umi enable unique molecular identifer (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_sampling one in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20]); -j, --json the json format report file name (string [=fastp.json]); -h, --html the html format report file name (string [=fastp.html]); -R, --report_title should be quoted with ' or "", default is ""fastp report"" (string [=fastp report]); -w, --thread worker thread number, default is 3 (int [=3]); -s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0]); -S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]); -?, --help print this message; ```; That being said, a dedicated `--version` flag would be greatly appreciated in that it simplifies machine parsing of the program version number for including this information in run logs. Thanks for your consideration of this enhancement.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/21#issuecomment-353421159
https://github.com/OpenGene/fastp/issues/22#issuecomment-353310008:28,Usability,clear,clear,28,"maybe my description is not clear, I can share my perl script to you.; [stat_adapter.pl.txt](https://github.com/OpenGene/fastp/files/1578742/stat_adapter.pl.txt)",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/22#issuecomment-353310008
https://github.com/OpenGene/fastp/issues/23#issuecomment-355291903:191,Usability,simpl,simpler,191,"Shifu;; That is perfect, thanks so much for the clever idea. I was trying to envision all these more complicated approaches to concatenating R1 + R2 and streaming into fastp but this is much simpler. We don't need trimming/filtering so will turn off all those options to get identical outputs. Thanks again for helping think through this, much appreciated.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/23#issuecomment-355291903
https://github.com/OpenGene/fastp/issues/31#issuecomment-370399399:209,Usability,guid,guide,209,"@tseemann . As far as I understand out there are open source tools which already stitch overlapping reads from paired-reads, like for example [BBMerge](https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/bbmerge-guide/) from [BBMAP](https://sourceforge.net/projects/bbmap). Here one would be interested how fastp would compare against BBMerge.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/31#issuecomment-370399399
https://github.com/OpenGene/fastp/issues/31#issuecomment-370399399:223,Usability,guid,guide,223,"@tseemann . As far as I understand out there are open source tools which already stitch overlapping reads from paired-reads, like for example [BBMerge](https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/bbmerge-guide/) from [BBMAP](https://sourceforge.net/projects/bbmap). Here one would be interested how fastp would compare against BBMerge.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/31#issuecomment-370399399
https://github.com/OpenGene/fastp/issues/31#issuecomment-470083034:141,Usability,guid,guide,141,@tseemann ; BBMerge (which is part of BBMAP) is stiching paired reads really well!; https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/bbmerge-guide/. Now even the STAR aligner is stitching together the overlapping reads before mapping them in order to get better alignments.,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/31#issuecomment-470083034
https://github.com/OpenGene/fastp/issues/31#issuecomment-470083034:155,Usability,guid,guide,155,@tseemann ; BBMerge (which is part of BBMAP) is stiching paired reads really well!; https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/bbmerge-guide/. Now even the STAR aligner is stitching together the overlapping reads before mapping them in order to get better alignments.,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/31#issuecomment-470083034
https://github.com/OpenGene/fastp/issues/33#issuecomment-371004862:480,Safety,avoid,avoid,480,"Shifu -- thanks for this. Generally I thought these should fall into the logic of being > poly_x_min_len (which I left at 10) and the logic of 1 allowed mismatch per 8bp with a maximum of 5 mismatches. Are you requiring that the polyX stretch initiate with the 3' most end and implicitly disallowing mismatches there?. MSIs should primarily by in more complex di-nucleotide+ repeats (like the first 4 examples in the remaining trim) and I agree the polyX shouldn't touch those to avoid messing with these. Exploring low complexity filters and the impact of this type of detection would be a useful secondary filter but something more long term. We're hoping to isolate the smaller set of trimming changes which help most with runtimes as a first pass, so clearing out the remaining noisy polyT and other reads would be helpful. Thanks again for the discussion and help.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/33#issuecomment-371004862
https://github.com/OpenGene/fastp/issues/33#issuecomment-371004862:570,Safety,detect,detection,570,"Shifu -- thanks for this. Generally I thought these should fall into the logic of being > poly_x_min_len (which I left at 10) and the logic of 1 allowed mismatch per 8bp with a maximum of 5 mismatches. Are you requiring that the polyX stretch initiate with the 3' most end and implicitly disallowing mismatches there?. MSIs should primarily by in more complex di-nucleotide+ repeats (like the first 4 examples in the remaining trim) and I agree the polyX shouldn't touch those to avoid messing with these. Exploring low complexity filters and the impact of this type of detection would be a useful secondary filter but something more long term. We're hoping to isolate the smaller set of trimming changes which help most with runtimes as a first pass, so clearing out the remaining noisy polyT and other reads would be helpful. Thanks again for the discussion and help.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/33#issuecomment-371004862
https://github.com/OpenGene/fastp/issues/33#issuecomment-371004862:73,Testability,log,logic,73,"Shifu -- thanks for this. Generally I thought these should fall into the logic of being > poly_x_min_len (which I left at 10) and the logic of 1 allowed mismatch per 8bp with a maximum of 5 mismatches. Are you requiring that the polyX stretch initiate with the 3' most end and implicitly disallowing mismatches there?. MSIs should primarily by in more complex di-nucleotide+ repeats (like the first 4 examples in the remaining trim) and I agree the polyX shouldn't touch those to avoid messing with these. Exploring low complexity filters and the impact of this type of detection would be a useful secondary filter but something more long term. We're hoping to isolate the smaller set of trimming changes which help most with runtimes as a first pass, so clearing out the remaining noisy polyT and other reads would be helpful. Thanks again for the discussion and help.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/33#issuecomment-371004862
https://github.com/OpenGene/fastp/issues/33#issuecomment-371004862:134,Testability,log,logic,134,"Shifu -- thanks for this. Generally I thought these should fall into the logic of being > poly_x_min_len (which I left at 10) and the logic of 1 allowed mismatch per 8bp with a maximum of 5 mismatches. Are you requiring that the polyX stretch initiate with the 3' most end and implicitly disallowing mismatches there?. MSIs should primarily by in more complex di-nucleotide+ repeats (like the first 4 examples in the remaining trim) and I agree the polyX shouldn't touch those to avoid messing with these. Exploring low complexity filters and the impact of this type of detection would be a useful secondary filter but something more long term. We're hoping to isolate the smaller set of trimming changes which help most with runtimes as a first pass, so clearing out the remaining noisy polyT and other reads would be helpful. Thanks again for the discussion and help.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/33#issuecomment-371004862
https://github.com/OpenGene/fastp/issues/33#issuecomment-371004862:755,Usability,clear,clearing,755,"Shifu -- thanks for this. Generally I thought these should fall into the logic of being > poly_x_min_len (which I left at 10) and the logic of 1 allowed mismatch per 8bp with a maximum of 5 mismatches. Are you requiring that the polyX stretch initiate with the 3' most end and implicitly disallowing mismatches there?. MSIs should primarily by in more complex di-nucleotide+ repeats (like the first 4 examples in the remaining trim) and I agree the polyX shouldn't touch those to avoid messing with these. Exploring low complexity filters and the impact of this type of detection would be a useful secondary filter but something more long term. We're hoping to isolate the smaller set of trimming changes which help most with runtimes as a first pass, so clearing out the remaining noisy polyT and other reads would be helpful. Thanks again for the discussion and help.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/33#issuecomment-371004862
https://github.com/OpenGene/fastp/issues/33#issuecomment-398879017:702,Availability,down,down,702,"Shifu;; Thanks so much for these improvements, that is really helpful. I'll look at incorporating this into bcbio's use of fastp. For the bioconda package, you don't need to be a collaborator or anything special. If you update the recipe, send a PR and cc me I'd be happy to merge:. https://bioconda.github.io/contributing.html. or you can also ask to become a contributor to the project to merge them yourself:. https://bioconda.github.io/contrib-setup.html#request-to-be-added-to-the-bioconda-team-optional. It's pretty lightweight meant to enable as many contributors as we can. Note that right nowe we're in the middle of a huge transition to a new compiler system and rebuild so things are bogged down on new recipes. Hopefully that backlog will get cleared soon. Thanks again.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/33#issuecomment-398879017
https://github.com/OpenGene/fastp/issues/33#issuecomment-398879017:220,Deployability,update,update,220,"Shifu;; Thanks so much for these improvements, that is really helpful. I'll look at incorporating this into bcbio's use of fastp. For the bioconda package, you don't need to be a collaborator or anything special. If you update the recipe, send a PR and cc me I'd be happy to merge:. https://bioconda.github.io/contributing.html. or you can also ask to become a contributor to the project to merge them yourself:. https://bioconda.github.io/contrib-setup.html#request-to-be-added-to-the-bioconda-team-optional. It's pretty lightweight meant to enable as many contributors as we can. Note that right nowe we're in the middle of a huge transition to a new compiler system and rebuild so things are bogged down on new recipes. Hopefully that backlog will get cleared soon. Thanks again.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/33#issuecomment-398879017
https://github.com/OpenGene/fastp/issues/33#issuecomment-398879017:755,Usability,clear,cleared,755,"Shifu;; Thanks so much for these improvements, that is really helpful. I'll look at incorporating this into bcbio's use of fastp. For the bioconda package, you don't need to be a collaborator or anything special. If you update the recipe, send a PR and cc me I'd be happy to merge:. https://bioconda.github.io/contributing.html. or you can also ask to become a contributor to the project to merge them yourself:. https://bioconda.github.io/contrib-setup.html#request-to-be-added-to-the-bioconda-team-optional. It's pretty lightweight meant to enable as many contributors as we can. Note that right nowe we're in the middle of a huge transition to a new compiler system and rebuild so things are bogged down on new recipes. Hopefully that backlog will get cleared soon. Thanks again.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/33#issuecomment-398879017
https://github.com/OpenGene/fastp/issues/39#issuecomment-372668633:558,Usability,simpl,simply,558,"Our primary concern is to keep metadata specific to Illumina sequencing run such as RTA software version, instrument model, SBS kit version etc. You can add this in the bam header but you can't do that with fastq files. What is more, we can archive the multiplexed bam files and delete Illumina run folders. If we expperience a problem with barcodes, it is much easier to rerun demultiplexing on bam files instead of `.tar.gz` BCL files. bam files might take a bit more space but we don't think it is important considering their added benefit. IMHO, you can simply use HTSlib to read bam files and process them just like the reads that you get from fastq files. You can check this unmapped bam file as an example:; https://drive.google.com/file/d/1j1Yjy1zU1F8dPpf-lQVkoP3FkK--FOqL/view?usp=sharing. I am not sure if there is any information that we lose by using bam files, can you please explain a bit more?. Best,; Bekir",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/39#issuecomment-372668633
https://github.com/OpenGene/fastp/issues/40#issuecomment-405955620:86,Usability,simpl,simple,86,For the archive; to answer my own question:; after 2nd thought the solution was quite simple: before calling `fastp` I only had to add a command to create a new directory:; `mkdir -p $PWD/fastp_out/${fn}`; That was all....,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/40#issuecomment-405955620
https://github.com/OpenGene/fastp/issues/53#issuecomment-383842901:744,Modifiability,variab,variable,744,"Yes, sure.; Here are two examples. The file barcode6.txt contain the simplest case. A barcode and the corresponding sample name on the same line (tab separated). The second file barcodesPool1.txt contains a combinatorial case, a sample corresponding to a combination of barcode and an index. In the case of the second file, often, the files were already demultiplexed with the Illumina software and the index tags are added to the IDs of the sequences (so barcode is inline and index is in the ID name). It can also happen that the Illumina first demultiplexing is not done, in which case the second file is even more important since you will have all combinations of barcodes + indices.; Please note that in some cases, the barcodes can be of variable lengths within the same big file. [barcode6.txt](https://github.com/OpenGene/fastp/files/1941573/barcode6.txt). [barcodesPool1.txt](https://github.com/OpenGene/fastp/files/1941577/barcodesPool1.txt)",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/53#issuecomment-383842901
https://github.com/OpenGene/fastp/issues/53#issuecomment-383842901:69,Usability,simpl,simplest,69,"Yes, sure.; Here are two examples. The file barcode6.txt contain the simplest case. A barcode and the corresponding sample name on the same line (tab separated). The second file barcodesPool1.txt contains a combinatorial case, a sample corresponding to a combination of barcode and an index. In the case of the second file, often, the files were already demultiplexed with the Illumina software and the index tags are added to the IDs of the sequences (so barcode is inline and index is in the ID name). It can also happen that the Illumina first demultiplexing is not done, in which case the second file is even more important since you will have all combinations of barcodes + indices.; Please note that in some cases, the barcodes can be of variable lengths within the same big file. [barcode6.txt](https://github.com/OpenGene/fastp/files/1941573/barcode6.txt). [barcodesPool1.txt](https://github.com/OpenGene/fastp/files/1941577/barcodesPool1.txt)",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/53#issuecomment-383842901
https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594:62,Energy Efficiency,adapt,adapter,62,Just saw this. I think it would be useful to include multiple adapter feature. My colleagues are stick with Trimmomatic simply because of this. . Stephen Turner just added a collection of adapters in [this repo](https://github.com/stephenturner/adapters). May be worth implementing in the new version of fastp.,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594
https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594:188,Energy Efficiency,adapt,adapters,188,Just saw this. I think it would be useful to include multiple adapter feature. My colleagues are stick with Trimmomatic simply because of this. . Stephen Turner just added a collection of adapters in [this repo](https://github.com/stephenturner/adapters). May be worth implementing in the new version of fastp.,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594
https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594:245,Energy Efficiency,adapt,adapters,245,Just saw this. I think it would be useful to include multiple adapter feature. My colleagues are stick with Trimmomatic simply because of this. . Stephen Turner just added a collection of adapters in [this repo](https://github.com/stephenturner/adapters). May be worth implementing in the new version of fastp.,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594
https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594:62,Integrability,adapter,adapter,62,Just saw this. I think it would be useful to include multiple adapter feature. My colleagues are stick with Trimmomatic simply because of this. . Stephen Turner just added a collection of adapters in [this repo](https://github.com/stephenturner/adapters). May be worth implementing in the new version of fastp.,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594
https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594:188,Integrability,adapter,adapters,188,Just saw this. I think it would be useful to include multiple adapter feature. My colleagues are stick with Trimmomatic simply because of this. . Stephen Turner just added a collection of adapters in [this repo](https://github.com/stephenturner/adapters). May be worth implementing in the new version of fastp.,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594
https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594:245,Integrability,adapter,adapters,245,Just saw this. I think it would be useful to include multiple adapter feature. My colleagues are stick with Trimmomatic simply because of this. . Stephen Turner just added a collection of adapters in [this repo](https://github.com/stephenturner/adapters). May be worth implementing in the new version of fastp.,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594
https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594:62,Modifiability,adapt,adapter,62,Just saw this. I think it would be useful to include multiple adapter feature. My colleagues are stick with Trimmomatic simply because of this. . Stephen Turner just added a collection of adapters in [this repo](https://github.com/stephenturner/adapters). May be worth implementing in the new version of fastp.,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594
https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594:188,Modifiability,adapt,adapters,188,Just saw this. I think it would be useful to include multiple adapter feature. My colleagues are stick with Trimmomatic simply because of this. . Stephen Turner just added a collection of adapters in [this repo](https://github.com/stephenturner/adapters). May be worth implementing in the new version of fastp.,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594
https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594:245,Modifiability,adapt,adapters,245,Just saw this. I think it would be useful to include multiple adapter feature. My colleagues are stick with Trimmomatic simply because of this. . Stephen Turner just added a collection of adapters in [this repo](https://github.com/stephenturner/adapters). May be worth implementing in the new version of fastp.,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594
https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594:120,Usability,simpl,simply,120,Just saw this. I think it would be useful to include multiple adapter feature. My colleagues are stick with Trimmomatic simply because of this. . Stephen Turner just added a collection of adapters in [this repo](https://github.com/stephenturner/adapters). May be worth implementing in the new version of fastp.,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/58#issuecomment-459593594
https://github.com/OpenGene/fastp/issues/60#issuecomment-2345412870:66,Usability,simpl,simple,66,"@ChristopherLeach123 ; In case someone ever needs this, here is a simple Python script I used for to run fastp one by one. Simply change the input and output directory path in the script and run the script:. ```import os; import subprocess. # Set input and output dirs; input_dir = ""INPUT/DIRECTORY""; output_dir = ""OUTPUT/DIRECTORY"". os.makedirs(output_dir, exist_ok=True). # Loop over all input files; for filename in os.listdir(input_dir):; if ""_R1_"" in filename and filename.endswith("".fastq""):; in1 = os.path.join(input_dir, filename); out1 = os.path.join(output_dir, filename); in2 = in1.replace(""_R1_"", ""_R2_""); out2 = out1.replace(""_R1_"", ""_R2_""). # Now run fastp command; if os.path.exists(in2):; command = f""fastp --in1 {in1} --out1 {out1} --in2 {in2} --out2 {out2} -w 10""; print(f""Running command: {command}""); subprocess.run(command, shell=True); else:; print(f""Matching _R2_ file not found for {in1}""); else:; print(f""{filename} does not include '_R1_' or is not a fastq file"")```",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/60#issuecomment-2345412870
https://github.com/OpenGene/fastp/issues/76#issuecomment-432196868:216,Usability,simpl,simple,216,@royfrancis 's idea of an prinseq alike approach would be very interesting! Given a normal distribution of read GC contents one could throw away +/- 3 standard deviations below/above the global mean GC. Another very simple approach would be to throw away all reads which have an 'insanely' low/high GC... something like < 15 % or > 85 %. Might be interesting to have a systematic view on let's say all RefSeq genomes to get a proper guideline....,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/76#issuecomment-432196868
https://github.com/OpenGene/fastp/issues/76#issuecomment-432196868:433,Usability,guid,guideline,433,@royfrancis 's idea of an prinseq alike approach would be very interesting! Given a normal distribution of read GC contents one could throw away +/- 3 standard deviations below/above the global mean GC. Another very simple approach would be to throw away all reads which have an 'insanely' low/high GC... something like < 15 % or > 85 %. Might be interesting to have a systematic view on let's say all RefSeq genomes to get a proper guideline....,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/76#issuecomment-432196868
https://github.com/OpenGene/fastp/issues/89#issuecomment-433760523:352,Deployability,pipeline,pipeline,352,"I just encountered this same issue. Ideally, `fastp` should simply adjust the number of threads accordingly, if necessary, and emit a warning documenting what occurred. It is additionally crucial, in cluster/HPC environments that the number of total threads always be at most the number specified, and ideally be exactly that number for as much of the pipeline as possible.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/89#issuecomment-433760523
https://github.com/OpenGene/fastp/issues/89#issuecomment-433760523:60,Usability,simpl,simply,60,"I just encountered this same issue. Ideally, `fastp` should simply adjust the number of threads accordingly, if necessary, and emit a warning documenting what occurred. It is additionally crucial, in cluster/HPC environments that the number of total threads always be at most the number specified, and ideally be exactly that number for as much of the pipeline as possible.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/89#issuecomment-433760523
https://github.com/OpenGene/fastp/issues/92#issuecomment-426653944:63,Usability,feedback,feedback,63,True -- should have realized this on my own :(. Thanks for the feedback.,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/92#issuecomment-426653944
https://github.com/OpenGene/fastp/issues/95#issuecomment-435092479:98,Energy Efficiency,adapt,adapter,98,"It was brought to my attention that some small RNA data may pass that filter that didn't have the adapter on it and this is a request on his behalf. I originally suggested the length limit option to him, but he was adamant it wouldn't work because of that and I'm still unclear as to why, but wouldn't accept it as a reasonable method. It's definitely an edge case, but I thought I'd ask in case it was simple. Definitely not a major issue if it doesn't seem reasonable to add when we have the length limit option and I can try re-explaining it to him. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/95#issuecomment-435092479
https://github.com/OpenGene/fastp/issues/95#issuecomment-435092479:98,Integrability,adapter,adapter,98,"It was brought to my attention that some small RNA data may pass that filter that didn't have the adapter on it and this is a request on his behalf. I originally suggested the length limit option to him, but he was adamant it wouldn't work because of that and I'm still unclear as to why, but wouldn't accept it as a reasonable method. It's definitely an edge case, but I thought I'd ask in case it was simple. Definitely not a major issue if it doesn't seem reasonable to add when we have the length limit option and I can try re-explaining it to him. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/95#issuecomment-435092479
https://github.com/OpenGene/fastp/issues/95#issuecomment-435092479:98,Modifiability,adapt,adapter,98,"It was brought to my attention that some small RNA data may pass that filter that didn't have the adapter on it and this is a request on his behalf. I originally suggested the length limit option to him, but he was adamant it wouldn't work because of that and I'm still unclear as to why, but wouldn't accept it as a reasonable method. It's definitely an edge case, but I thought I'd ask in case it was simple. Definitely not a major issue if it doesn't seem reasonable to add when we have the length limit option and I can try re-explaining it to him. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/95#issuecomment-435092479
https://github.com/OpenGene/fastp/issues/95#issuecomment-435092479:403,Usability,simpl,simple,403,"It was brought to my attention that some small RNA data may pass that filter that didn't have the adapter on it and this is a request on his behalf. I originally suggested the length limit option to him, but he was adamant it wouldn't work because of that and I'm still unclear as to why, but wouldn't accept it as a reasonable method. It's definitely an edge case, but I thought I'd ask in case it was simple. Definitely not a major issue if it doesn't seem reasonable to add when we have the length limit option and I can try re-explaining it to him. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/95#issuecomment-435092479
https://github.com/OpenGene/fastp/issues/103#issuecomment-435231349:73,Deployability,release,release,73,"Good, thanks for your clear explanation, I will make it happen in future release.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/103#issuecomment-435231349
https://github.com/OpenGene/fastp/issues/103#issuecomment-435231349:22,Usability,clear,clear,22,"Good, thanks for your clear explanation, I will make it happen in future release.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/103#issuecomment-435231349
https://github.com/OpenGene/fastp/issues/122#issuecomment-450475843:2,Modifiability,refactor,refactored,2,"I refactored the `cut by quality` features to make it more clear, now the document is:. `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use `cut_tail_window_size` to set the widnow size, and `cut_tail_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `TRAILING` method.; * `-r, --cut_right` move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use `cut_right_window_size` to set the widnow size, and `cut_right_mean_quality` to set the mean quality threshold. This is similar as the Trimmomatic `SLIDINGWINDOW` method. ***WARNING: all these three operations will interfere deduplication for SE data, and `--cut_front` or `--cut_right` may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.***. If `--cut_right` is enabled, then there is no need to enable `--cut_tail`, since the former is more aggressive. If `--cut_right` is enabled together with `--cut_front`, `--cut_front` will be performed first before `--cut_right` to avoid dropping whole reads d",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/122#issuecomment-450475843
https://github.com/OpenGene/fastp/issues/122#issuecomment-450475843:1933,Performance,perform,performed,1933,"e leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use `cut_tail_window_size` to set the widnow size, and `cut_tail_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `TRAILING` method.; * `-r, --cut_right` move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use `cut_right_window_size` to set the widnow size, and `cut_right_mean_quality` to set the mean quality threshold. This is similar as the Trimmomatic `SLIDINGWINDOW` method. ***WARNING: all these three operations will interfere deduplication for SE data, and `--cut_front` or `--cut_right` may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.***. If `--cut_right` is enabled, then there is no need to enable `--cut_tail`, since the former is more aggressive. If `--cut_right` is enabled together with `--cut_front`, `--cut_front` will be performed first before `--cut_right` to avoid dropping whole reads due to the low quality starting bases. Please be noted that `--cut_front` will interfere deduplication for both PE/SE data, and `--cut_tail` will interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs. If you don't set window size and mean quality threshold for these function respectively, `fastp` will use the values from `-W, --cut_window_size` and `-M, --cut_mean_quality `",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/122#issuecomment-450475843
https://github.com/OpenGene/fastp/issues/122#issuecomment-450475843:1973,Safety,avoid,avoid,1973,"e leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use `cut_tail_window_size` to set the widnow size, and `cut_tail_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `TRAILING` method.; * `-r, --cut_right` move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use `cut_right_window_size` to set the widnow size, and `cut_right_mean_quality` to set the mean quality threshold. This is similar as the Trimmomatic `SLIDINGWINDOW` method. ***WARNING: all these three operations will interfere deduplication for SE data, and `--cut_front` or `--cut_right` may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.***. If `--cut_right` is enabled, then there is no need to enable `--cut_tail`, since the former is more aggressive. If `--cut_right` is enabled together with `--cut_front`, `--cut_front` will be performed first before `--cut_right` to avoid dropping whole reads due to the low quality starting bases. Please be noted that `--cut_front` will interfere deduplication for both PE/SE data, and `--cut_tail` will interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs. If you don't set window size and mean quality threshold for these function respectively, `fastp` will use the values from `-W, --cut_window_size` and `-M, --cut_mean_quality `",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/122#issuecomment-450475843
https://github.com/OpenGene/fastp/issues/122#issuecomment-450475843:59,Usability,clear,clear,59,"I refactored the `cut by quality` features to make it more clear, now the document is:. `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use `cut_tail_window_size` to set the widnow size, and `cut_tail_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `TRAILING` method.; * `-r, --cut_right` move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use `cut_right_window_size` to set the widnow size, and `cut_right_mean_quality` to set the mean quality threshold. This is similar as the Trimmomatic `SLIDINGWINDOW` method. ***WARNING: all these three operations will interfere deduplication for SE data, and `--cut_front` or `--cut_right` may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.***. If `--cut_right` is enabled, then there is no need to enable `--cut_tail`, since the former is more aggressive. If `--cut_right` is enabled together with `--cut_front`, `--cut_front` will be performed first before `--cut_right` to avoid dropping whole reads d",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/122#issuecomment-450475843
https://github.com/OpenGene/fastp/issues/127#issuecomment-481485322:113,Deployability,release,released,113,"No, @katosh , this project is not on ice. I am intensively developing to provide new functions. Yesterday I just released v0.19.10. But this GC content filter, seems not commonly wanted, so I decided not to implement it to make fastp simple and easy. If you want to filter polyA, you can use the newly introduced --adapter_fasta to add polyA in a adapter FASTA file. And for GC, I suspect that they are most G, right?. NovaSeq / NextSeq likes to have much more polyG, and you can filter it by polyG filter.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/127#issuecomment-481485322
https://github.com/OpenGene/fastp/issues/127#issuecomment-481485322:347,Energy Efficiency,adapt,adapter,347,"No, @katosh , this project is not on ice. I am intensively developing to provide new functions. Yesterday I just released v0.19.10. But this GC content filter, seems not commonly wanted, so I decided not to implement it to make fastp simple and easy. If you want to filter polyA, you can use the newly introduced --adapter_fasta to add polyA in a adapter FASTA file. And for GC, I suspect that they are most G, right?. NovaSeq / NextSeq likes to have much more polyG, and you can filter it by polyG filter.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/127#issuecomment-481485322
https://github.com/OpenGene/fastp/issues/127#issuecomment-481485322:347,Integrability,adapter,adapter,347,"No, @katosh , this project is not on ice. I am intensively developing to provide new functions. Yesterday I just released v0.19.10. But this GC content filter, seems not commonly wanted, so I decided not to implement it to make fastp simple and easy. If you want to filter polyA, you can use the newly introduced --adapter_fasta to add polyA in a adapter FASTA file. And for GC, I suspect that they are most G, right?. NovaSeq / NextSeq likes to have much more polyG, and you can filter it by polyG filter.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/127#issuecomment-481485322
https://github.com/OpenGene/fastp/issues/127#issuecomment-481485322:347,Modifiability,adapt,adapter,347,"No, @katosh , this project is not on ice. I am intensively developing to provide new functions. Yesterday I just released v0.19.10. But this GC content filter, seems not commonly wanted, so I decided not to implement it to make fastp simple and easy. If you want to filter polyA, you can use the newly introduced --adapter_fasta to add polyA in a adapter FASTA file. And for GC, I suspect that they are most G, right?. NovaSeq / NextSeq likes to have much more polyG, and you can filter it by polyG filter.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/127#issuecomment-481485322
https://github.com/OpenGene/fastp/issues/127#issuecomment-481485322:234,Usability,simpl,simple,234,"No, @katosh , this project is not on ice. I am intensively developing to provide new functions. Yesterday I just released v0.19.10. But this GC content filter, seems not commonly wanted, so I decided not to implement it to make fastp simple and easy. If you want to filter polyA, you can use the newly introduced --adapter_fasta to add polyA in a adapter FASTA file. And for GC, I suspect that they are most G, right?. NovaSeq / NextSeq likes to have much more polyG, and you can filter it by polyG filter.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/127#issuecomment-481485322
https://github.com/OpenGene/fastp/issues/147#issuecomment-477521068:358,Usability,simpl,simply,358,"Hi, ; sry for bothering ;-) that's a solid point and I totally agree with you that tools should not be too complicated! . But i guess there isn't so much of additional complexity involved here... Fastp knows when it deals with PE data due to the `-i <input-1-file>` / `-I <input-2-file>` parameters; - If the user wants the paired unmerged files, this could simply be implicitly specified by `-o <output-1-file>` / `-O <output-2-file>`; - If merged reads are wanted, this is currently specified by `-m`. All you need to add is a related argument, so it would become `-m <merged-output-file>`; - If residual unpaired and unmerged reads are desired, just go for `-s <residual-output-file>`. So everything that needs to be changed would be a new argument to the `-m` parameter... ...and in addition, a new **optional** (and distinct from the merged read functionality) parameter/argument `-s <residual-output-file>` could be added. . I see that at least the second one can't be implemented right away and might take a while. But I would love to see this on the agenda because, by fulfilling these requirements, **fastp** would make a giant leap in terms your **an ultra-fast all-in-one FASTQ preprocessor** credo. Otherwise one had to use several tools or restart fastp with different parameters which is clearly not the way to go...; Best regards!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/147#issuecomment-477521068
https://github.com/OpenGene/fastp/issues/147#issuecomment-477521068:1302,Usability,clear,clearly,1302,"Hi, ; sry for bothering ;-) that's a solid point and I totally agree with you that tools should not be too complicated! . But i guess there isn't so much of additional complexity involved here... Fastp knows when it deals with PE data due to the `-i <input-1-file>` / `-I <input-2-file>` parameters; - If the user wants the paired unmerged files, this could simply be implicitly specified by `-o <output-1-file>` / `-O <output-2-file>`; - If merged reads are wanted, this is currently specified by `-m`. All you need to add is a related argument, so it would become `-m <merged-output-file>`; - If residual unpaired and unmerged reads are desired, just go for `-s <residual-output-file>`. So everything that needs to be changed would be a new argument to the `-m` parameter... ...and in addition, a new **optional** (and distinct from the merged read functionality) parameter/argument `-s <residual-output-file>` could be added. . I see that at least the second one can't be implemented right away and might take a while. But I would love to see this on the agenda because, by fulfilling these requirements, **fastp** would make a giant leap in terms your **an ultra-fast all-in-one FASTQ preprocessor** credo. Otherwise one had to use several tools or restart fastp with different parameters which is clearly not the way to go...; Best regards!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/147#issuecomment-477521068
https://github.com/OpenGene/fastp/issues/147#issuecomment-480410986:453,Usability,simpl,simple,453,"Just to jump in. The issue with the unmated reads being included in the clean fastq is one I just bumped into and I definitely agree with you. So i'm thinking that the unmated reads should go in a separate junk file, essentially **R1 no pass.fastq** and **R2 no pass.fastq**. That can include the reads that don't pass other filters as well i think. Should resolve a lot of pain (at least for me). Also, very nice tool, especially because its clean and simple to use, which is key.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/147#issuecomment-480410986
https://github.com/OpenGene/fastp/issues/152#issuecomment-482034452:50,Usability,clear,clearly,50,That would be very helpful! . Given that fastp is clearly faster than Trimmomatic having similar functionality like the filter by mean quality will help users to finally decide moving to fastp ;-),MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/152#issuecomment-482034452
https://github.com/OpenGene/fastp/issues/159#issuecomment-497727543:327,Availability,error,error,327,"Hi,; I think global trimming is just removing a fixed number of bases from either end of the reads. And for trimming by quality, both Naive and Phred algorithms use quality scores (http://seqanswers.com/forums/showpost.php?p=144154&postcount=17), but naive takes the quality score as an integer without taking into account the error probability it represents unlike the Phred algorithm.; The reason I mentioned adapter trimming is because it outperforms `bbduk.sh` from `BBTools` in that particular task, however `bbduk.sh` uses the PHRED algorithm to trim by quality which makes it better suited for the trimming. At the end, I am looking forward to simplify my pre-processing of the reads ideally using a single program.; By the way, I really like the format of the reports, is a really good idea.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/159#issuecomment-497727543
https://github.com/OpenGene/fastp/issues/159#issuecomment-497727543:411,Energy Efficiency,adapt,adapter,411,"Hi,; I think global trimming is just removing a fixed number of bases from either end of the reads. And for trimming by quality, both Naive and Phred algorithms use quality scores (http://seqanswers.com/forums/showpost.php?p=144154&postcount=17), but naive takes the quality score as an integer without taking into account the error probability it represents unlike the Phred algorithm.; The reason I mentioned adapter trimming is because it outperforms `bbduk.sh` from `BBTools` in that particular task, however `bbduk.sh` uses the PHRED algorithm to trim by quality which makes it better suited for the trimming. At the end, I am looking forward to simplify my pre-processing of the reads ideally using a single program.; By the way, I really like the format of the reports, is a really good idea.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/159#issuecomment-497727543
https://github.com/OpenGene/fastp/issues/159#issuecomment-497727543:411,Integrability,adapter,adapter,411,"Hi,; I think global trimming is just removing a fixed number of bases from either end of the reads. And for trimming by quality, both Naive and Phred algorithms use quality scores (http://seqanswers.com/forums/showpost.php?p=144154&postcount=17), but naive takes the quality score as an integer without taking into account the error probability it represents unlike the Phred algorithm.; The reason I mentioned adapter trimming is because it outperforms `bbduk.sh` from `BBTools` in that particular task, however `bbduk.sh` uses the PHRED algorithm to trim by quality which makes it better suited for the trimming. At the end, I am looking forward to simplify my pre-processing of the reads ideally using a single program.; By the way, I really like the format of the reports, is a really good idea.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/159#issuecomment-497727543
https://github.com/OpenGene/fastp/issues/159#issuecomment-497727543:411,Modifiability,adapt,adapter,411,"Hi,; I think global trimming is just removing a fixed number of bases from either end of the reads. And for trimming by quality, both Naive and Phred algorithms use quality scores (http://seqanswers.com/forums/showpost.php?p=144154&postcount=17), but naive takes the quality score as an integer without taking into account the error probability it represents unlike the Phred algorithm.; The reason I mentioned adapter trimming is because it outperforms `bbduk.sh` from `BBTools` in that particular task, however `bbduk.sh` uses the PHRED algorithm to trim by quality which makes it better suited for the trimming. At the end, I am looking forward to simplify my pre-processing of the reads ideally using a single program.; By the way, I really like the format of the reports, is a really good idea.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/159#issuecomment-497727543
https://github.com/OpenGene/fastp/issues/159#issuecomment-497727543:651,Usability,simpl,simplify,651,"Hi,; I think global trimming is just removing a fixed number of bases from either end of the reads. And for trimming by quality, both Naive and Phred algorithms use quality scores (http://seqanswers.com/forums/showpost.php?p=144154&postcount=17), but naive takes the quality score as an integer without taking into account the error probability it represents unlike the Phred algorithm.; The reason I mentioned adapter trimming is because it outperforms `bbduk.sh` from `BBTools` in that particular task, however `bbduk.sh` uses the PHRED algorithm to trim by quality which makes it better suited for the trimming. At the end, I am looking forward to simplify my pre-processing of the reads ideally using a single program.; By the way, I really like the format of the reports, is a really good idea.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/159#issuecomment-497727543
https://github.com/OpenGene/fastp/issues/168#issuecomment-844668148:221,Usability,guid,guide,221,"I also discovered this strange output today. When I count all of the lines in the hundreds of resulting files, they add up to the number of lines in the input file. This is strange and it should be documented in the user guide so the user knows it is not a bug.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/168#issuecomment-844668148
https://github.com/OpenGene/fastp/issues/185#issuecomment-522298485:34,Testability,log,log,34,"To make it more clear:. From your log, fastp found one read that its sequence length and quality length is different, and then exit at once. Could you please check whether your FASTQ file contain such read?. You can use following command to check:; ```; grep -a 5 CTTTGATTCAGCCAGCTGGGAGCATACACTGGTTTAATATTTATATCGTTCATTACTCCCGCATATGCACCATGAAATAATCTATTTCAATTGTTGTCGGGTCATTTCACTGGA filename.fastq; ```",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/185#issuecomment-522298485
https://github.com/OpenGene/fastp/issues/185#issuecomment-522298485:16,Usability,clear,clear,16,"To make it more clear:. From your log, fastp found one read that its sequence length and quality length is different, and then exit at once. Could you please check whether your FASTQ file contain such read?. You can use following command to check:; ```; grep -a 5 CTTTGATTCAGCCAGCTGGGAGCATACACTGGTTTAATATTTATATCGTTCATTACTCCCGCATATGCACCATGAAATAATCTATTTCAATTGTTGTCGGGTCATTTCACTGGA filename.fastq; ```",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/185#issuecomment-522298485
https://github.com/OpenGene/fastp/issues/204#issuecomment-597373665:135,Energy Efficiency,adapt,adapter,135,> Have a look at the README https://github.com/OpenGene/fastp#global-trimming. Thanks for the link @sklages . It is still not clear if adapter trimming happens first or quality trimming,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/204#issuecomment-597373665
https://github.com/OpenGene/fastp/issues/204#issuecomment-597373665:135,Integrability,adapter,adapter,135,> Have a look at the README https://github.com/OpenGene/fastp#global-trimming. Thanks for the link @sklages . It is still not clear if adapter trimming happens first or quality trimming,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/204#issuecomment-597373665
https://github.com/OpenGene/fastp/issues/204#issuecomment-597373665:135,Modifiability,adapt,adapter,135,> Have a look at the README https://github.com/OpenGene/fastp#global-trimming. Thanks for the link @sklages . It is still not clear if adapter trimming happens first or quality trimming,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/204#issuecomment-597373665
https://github.com/OpenGene/fastp/issues/204#issuecomment-597373665:126,Usability,clear,clear,126,> Have a look at the README https://github.com/OpenGene/fastp#global-trimming. Thanks for the link @sklages . It is still not clear if adapter trimming happens first or quality trimming,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/204#issuecomment-597373665
https://github.com/OpenGene/fastp/issues/209#issuecomment-556784890:8,Usability,simpl,simply,8,You can simply achieve this by scripts. No plan to support yet.,MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/209#issuecomment-556784890
https://github.com/OpenGene/fastp/issues/211#issuecomment-653265456:311,Usability,simpl,simply,311,"same issue. I am using a cluster with client servers that each have 48 cores with hyperthreading up to 192 and want to trim PE fastq files that have ~ 400 million reads. I am reading from a dedicated raid 0 striped server which mitigates the I/O issue, but this tool ends up taking way longer than Trimmomatic, simply due to the time that it is taking to read the files and limiting its use to 16 threads.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/211#issuecomment-653265456
https://github.com/OpenGene/fastp/issues/309#issuecomment-750392964:306,Integrability,depend,dependancies,306,"The program does not fail, but simply aligns under 1% of the reads. Using a different trimming program, the preprocessed reads had over 80% alignment. Only ~400 reads are aligned, from a 1317000 read pool.; I tried to look at the FASTQ format, used two different versions of Fastp and removed all possible dependancies, but nothing seemed to help. ; Perhaps you have an idea why. . [SRR3184285Log.out.txt](https://github.com/OpenGene/fastp/files/5736335/SRR3184285Log.out.txt); [SRR3184285Log.final.out.txt](https://github.com/OpenGene/fastp/files/5736336/SRR3184285Log.final.out.txt)",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/309#issuecomment-750392964
https://github.com/OpenGene/fastp/issues/309#issuecomment-750392964:31,Usability,simpl,simply,31,"The program does not fail, but simply aligns under 1% of the reads. Using a different trimming program, the preprocessed reads had over 80% alignment. Only ~400 reads are aligned, from a 1317000 read pool.; I tried to look at the FASTQ format, used two different versions of Fastp and removed all possible dependancies, but nothing seemed to help. ; Perhaps you have an idea why. . [SRR3184285Log.out.txt](https://github.com/OpenGene/fastp/files/5736335/SRR3184285Log.out.txt); [SRR3184285Log.final.out.txt](https://github.com/OpenGene/fastp/files/5736336/SRR3184285Log.final.out.txt)",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/309#issuecomment-750392964
https://github.com/OpenGene/fastp/issues/365#issuecomment-944848333:233,Integrability,depend,dependencies,233,"My big concern is introducing CMake may break conda auto-build. As far as I know, very few users compile to use fastp, most of them use the bioconda/debian version, or use the prebuilt version. The library libisal relies on a lot of dependencies, like NASM, YASM with specified versions, the users will encounter problems to compile to them even if CMake revoke the make process. So currently, I only link these libraries, and since these libraries already exist in conda, it's simple but working very well.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/365#issuecomment-944848333
https://github.com/OpenGene/fastp/issues/365#issuecomment-944848333:478,Usability,simpl,simple,478,"My big concern is introducing CMake may break conda auto-build. As far as I know, very few users compile to use fastp, most of them use the bioconda/debian version, or use the prebuilt version. The library libisal relies on a lot of dependencies, like NASM, YASM with specified versions, the users will encounter problems to compile to them even if CMake revoke the make process. So currently, I only link these libraries, and since these libraries already exist in conda, it's simple but working very well.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/365#issuecomment-944848333
https://github.com/OpenGene/fastp/pull/366#issuecomment-950333172:45,Usability,guid,guide,45,"I tried to compile following the compilation guide in README, but it doesn't work, at least on Mac.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/pull/366#issuecomment-950333172
https://github.com/OpenGene/fastp/issues/367#issuecomment-1322451237:120,Usability,intuit,intuitively,120,"+1 @sfchen this seems to be a bug. It looks like fastp is reporting the number of merged reads only in this field, when intuitively it should be all reads passing filter. The `total_bases` field has the same issue.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/367#issuecomment-1322451237
https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086:102,Availability,error,error,102,"> Hi @bamorim-bio I have the same warning. Did you figure this out?. Hi! I did. So I figure that this error occurred with samples that had different number of sequences in the different reads. So for example, I had sample A that had 1.7M seqs of reads 1 and 1M of reads 2. I had to find a way to fix this as the error kept persisting with my downstream analysis (even if I found other software like fastp that could run with these unequal lengths, when aligning with BWA I had also had errors). . What ended up working for me was repairing reads with [bbtools](https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/repair-guide/). repair.sh -Xmx14g in1=SampleA_R1.fastq.gz in2=SampleA_R2.fastq.gz out1=SampleA_R1_repaired.fastq.gz out2=SampleA_R2_repaired.fastq.gz outs=/SampleA_single.fastq.gz repair. Afterwards, fastp worked fine!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086
https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086:312,Availability,error,error,312,"> Hi @bamorim-bio I have the same warning. Did you figure this out?. Hi! I did. So I figure that this error occurred with samples that had different number of sequences in the different reads. So for example, I had sample A that had 1.7M seqs of reads 1 and 1M of reads 2. I had to find a way to fix this as the error kept persisting with my downstream analysis (even if I found other software like fastp that could run with these unequal lengths, when aligning with BWA I had also had errors). . What ended up working for me was repairing reads with [bbtools](https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/repair-guide/). repair.sh -Xmx14g in1=SampleA_R1.fastq.gz in2=SampleA_R2.fastq.gz out1=SampleA_R1_repaired.fastq.gz out2=SampleA_R2_repaired.fastq.gz outs=/SampleA_single.fastq.gz repair. Afterwards, fastp worked fine!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086
https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086:342,Availability,down,downstream,342,"> Hi @bamorim-bio I have the same warning. Did you figure this out?. Hi! I did. So I figure that this error occurred with samples that had different number of sequences in the different reads. So for example, I had sample A that had 1.7M seqs of reads 1 and 1M of reads 2. I had to find a way to fix this as the error kept persisting with my downstream analysis (even if I found other software like fastp that could run with these unequal lengths, when aligning with BWA I had also had errors). . What ended up working for me was repairing reads with [bbtools](https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/repair-guide/). repair.sh -Xmx14g in1=SampleA_R1.fastq.gz in2=SampleA_R2.fastq.gz out1=SampleA_R1_repaired.fastq.gz out2=SampleA_R2_repaired.fastq.gz outs=/SampleA_single.fastq.gz repair. Afterwards, fastp worked fine!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086
https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086:486,Availability,error,errors,486,"> Hi @bamorim-bio I have the same warning. Did you figure this out?. Hi! I did. So I figure that this error occurred with samples that had different number of sequences in the different reads. So for example, I had sample A that had 1.7M seqs of reads 1 and 1M of reads 2. I had to find a way to fix this as the error kept persisting with my downstream analysis (even if I found other software like fastp that could run with these unequal lengths, when aligning with BWA I had also had errors). . What ended up working for me was repairing reads with [bbtools](https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/repair-guide/). repair.sh -Xmx14g in1=SampleA_R1.fastq.gz in2=SampleA_R2.fastq.gz out1=SampleA_R1_repaired.fastq.gz out2=SampleA_R2_repaired.fastq.gz outs=/SampleA_single.fastq.gz repair. Afterwards, fastp worked fine!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086
https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086:530,Availability,repair,repairing,530,"> Hi @bamorim-bio I have the same warning. Did you figure this out?. Hi! I did. So I figure that this error occurred with samples that had different number of sequences in the different reads. So for example, I had sample A that had 1.7M seqs of reads 1 and 1M of reads 2. I had to find a way to fix this as the error kept persisting with my downstream analysis (even if I found other software like fastp that could run with these unequal lengths, when aligning with BWA I had also had errors). . What ended up working for me was repairing reads with [bbtools](https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/repair-guide/). repair.sh -Xmx14g in1=SampleA_R1.fastq.gz in2=SampleA_R2.fastq.gz out1=SampleA_R1_repaired.fastq.gz out2=SampleA_R2_repaired.fastq.gz outs=/SampleA_single.fastq.gz repair. Afterwards, fastp worked fine!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086
https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086:624,Availability,repair,repair-guide,624,"> Hi @bamorim-bio I have the same warning. Did you figure this out?. Hi! I did. So I figure that this error occurred with samples that had different number of sequences in the different reads. So for example, I had sample A that had 1.7M seqs of reads 1 and 1M of reads 2. I had to find a way to fix this as the error kept persisting with my downstream analysis (even if I found other software like fastp that could run with these unequal lengths, when aligning with BWA I had also had errors). . What ended up working for me was repairing reads with [bbtools](https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/repair-guide/). repair.sh -Xmx14g in1=SampleA_R1.fastq.gz in2=SampleA_R2.fastq.gz out1=SampleA_R1_repaired.fastq.gz out2=SampleA_R2_repaired.fastq.gz outs=/SampleA_single.fastq.gz repair. Afterwards, fastp worked fine!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086
https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086:640,Availability,repair,repair,640,"> Hi @bamorim-bio I have the same warning. Did you figure this out?. Hi! I did. So I figure that this error occurred with samples that had different number of sequences in the different reads. So for example, I had sample A that had 1.7M seqs of reads 1 and 1M of reads 2. I had to find a way to fix this as the error kept persisting with my downstream analysis (even if I found other software like fastp that could run with these unequal lengths, when aligning with BWA I had also had errors). . What ended up working for me was repairing reads with [bbtools](https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/repair-guide/). repair.sh -Xmx14g in1=SampleA_R1.fastq.gz in2=SampleA_R2.fastq.gz out1=SampleA_R1_repaired.fastq.gz out2=SampleA_R2_repaired.fastq.gz outs=/SampleA_single.fastq.gz repair. Afterwards, fastp worked fine!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086
https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086:804,Availability,repair,repair,804,"> Hi @bamorim-bio I have the same warning. Did you figure this out?. Hi! I did. So I figure that this error occurred with samples that had different number of sequences in the different reads. So for example, I had sample A that had 1.7M seqs of reads 1 and 1M of reads 2. I had to find a way to fix this as the error kept persisting with my downstream analysis (even if I found other software like fastp that could run with these unequal lengths, when aligning with BWA I had also had errors). . What ended up working for me was repairing reads with [bbtools](https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/repair-guide/). repair.sh -Xmx14g in1=SampleA_R1.fastq.gz in2=SampleA_R2.fastq.gz out1=SampleA_R1_repaired.fastq.gz out2=SampleA_R2_repaired.fastq.gz outs=/SampleA_single.fastq.gz repair. Afterwards, fastp worked fine!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086
https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086:618,Usability,guid,guide,618,"> Hi @bamorim-bio I have the same warning. Did you figure this out?. Hi! I did. So I figure that this error occurred with samples that had different number of sequences in the different reads. So for example, I had sample A that had 1.7M seqs of reads 1 and 1M of reads 2. I had to find a way to fix this as the error kept persisting with my downstream analysis (even if I found other software like fastp that could run with these unequal lengths, when aligning with BWA I had also had errors). . What ended up working for me was repairing reads with [bbtools](https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/repair-guide/). repair.sh -Xmx14g in1=SampleA_R1.fastq.gz in2=SampleA_R2.fastq.gz out1=SampleA_R1_repaired.fastq.gz out2=SampleA_R2_repaired.fastq.gz outs=/SampleA_single.fastq.gz repair. Afterwards, fastp worked fine!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086
https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086:631,Usability,guid,guide,631,"> Hi @bamorim-bio I have the same warning. Did you figure this out?. Hi! I did. So I figure that this error occurred with samples that had different number of sequences in the different reads. So for example, I had sample A that had 1.7M seqs of reads 1 and 1M of reads 2. I had to find a way to fix this as the error kept persisting with my downstream analysis (even if I found other software like fastp that could run with these unequal lengths, when aligning with BWA I had also had errors). . What ended up working for me was repairing reads with [bbtools](https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/repair-guide/). repair.sh -Xmx14g in1=SampleA_R1.fastq.gz in2=SampleA_R2.fastq.gz out1=SampleA_R1_repaired.fastq.gz out2=SampleA_R2_repaired.fastq.gz outs=/SampleA_single.fastq.gz repair. Afterwards, fastp worked fine!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/378#issuecomment-991906086
https://github.com/OpenGene/fastp/issues/383#issuecomment-1030082963:44,Deployability,install,install,44,"Hello. Unfortunately, I am also having some install issues. ""conda install -c bioconda fastp"" installs version 0.12.4. ""conda install -c bioconda/label/cf201901 fastp"" installs version 0.19.5. I would like to use these two arguments: --detect_adapter_for_pe and --cut_tail. However, it looks like --detect_adapter_for_pe isn't in 0.12.4 and --cut_tail isn't in 0.19.5. As an example, I get the message ""undefined option: --cut_tail"". I created a new conda environment to ensure there were no conflicts and the problem is still there. I am running conda 4.11.0 on OSX through terminal. Any guidance would be appreciated. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/383#issuecomment-1030082963
https://github.com/OpenGene/fastp/issues/383#issuecomment-1030082963:67,Deployability,install,install,67,"Hello. Unfortunately, I am also having some install issues. ""conda install -c bioconda fastp"" installs version 0.12.4. ""conda install -c bioconda/label/cf201901 fastp"" installs version 0.19.5. I would like to use these two arguments: --detect_adapter_for_pe and --cut_tail. However, it looks like --detect_adapter_for_pe isn't in 0.12.4 and --cut_tail isn't in 0.19.5. As an example, I get the message ""undefined option: --cut_tail"". I created a new conda environment to ensure there were no conflicts and the problem is still there. I am running conda 4.11.0 on OSX through terminal. Any guidance would be appreciated. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/383#issuecomment-1030082963
https://github.com/OpenGene/fastp/issues/383#issuecomment-1030082963:94,Deployability,install,installs,94,"Hello. Unfortunately, I am also having some install issues. ""conda install -c bioconda fastp"" installs version 0.12.4. ""conda install -c bioconda/label/cf201901 fastp"" installs version 0.19.5. I would like to use these two arguments: --detect_adapter_for_pe and --cut_tail. However, it looks like --detect_adapter_for_pe isn't in 0.12.4 and --cut_tail isn't in 0.19.5. As an example, I get the message ""undefined option: --cut_tail"". I created a new conda environment to ensure there were no conflicts and the problem is still there. I am running conda 4.11.0 on OSX through terminal. Any guidance would be appreciated. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/383#issuecomment-1030082963
https://github.com/OpenGene/fastp/issues/383#issuecomment-1030082963:126,Deployability,install,install,126,"Hello. Unfortunately, I am also having some install issues. ""conda install -c bioconda fastp"" installs version 0.12.4. ""conda install -c bioconda/label/cf201901 fastp"" installs version 0.19.5. I would like to use these two arguments: --detect_adapter_for_pe and --cut_tail. However, it looks like --detect_adapter_for_pe isn't in 0.12.4 and --cut_tail isn't in 0.19.5. As an example, I get the message ""undefined option: --cut_tail"". I created a new conda environment to ensure there were no conflicts and the problem is still there. I am running conda 4.11.0 on OSX through terminal. Any guidance would be appreciated. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/383#issuecomment-1030082963
https://github.com/OpenGene/fastp/issues/383#issuecomment-1030082963:168,Deployability,install,installs,168,"Hello. Unfortunately, I am also having some install issues. ""conda install -c bioconda fastp"" installs version 0.12.4. ""conda install -c bioconda/label/cf201901 fastp"" installs version 0.19.5. I would like to use these two arguments: --detect_adapter_for_pe and --cut_tail. However, it looks like --detect_adapter_for_pe isn't in 0.12.4 and --cut_tail isn't in 0.19.5. As an example, I get the message ""undefined option: --cut_tail"". I created a new conda environment to ensure there were no conflicts and the problem is still there. I am running conda 4.11.0 on OSX through terminal. Any guidance would be appreciated. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/383#issuecomment-1030082963
https://github.com/OpenGene/fastp/issues/383#issuecomment-1030082963:394,Integrability,message,message,394,"Hello. Unfortunately, I am also having some install issues. ""conda install -c bioconda fastp"" installs version 0.12.4. ""conda install -c bioconda/label/cf201901 fastp"" installs version 0.19.5. I would like to use these two arguments: --detect_adapter_for_pe and --cut_tail. However, it looks like --detect_adapter_for_pe isn't in 0.12.4 and --cut_tail isn't in 0.19.5. As an example, I get the message ""undefined option: --cut_tail"". I created a new conda environment to ensure there were no conflicts and the problem is still there. I am running conda 4.11.0 on OSX through terminal. Any guidance would be appreciated. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/383#issuecomment-1030082963
https://github.com/OpenGene/fastp/issues/383#issuecomment-1030082963:589,Usability,guid,guidance,589,"Hello. Unfortunately, I am also having some install issues. ""conda install -c bioconda fastp"" installs version 0.12.4. ""conda install -c bioconda/label/cf201901 fastp"" installs version 0.19.5. I would like to use these two arguments: --detect_adapter_for_pe and --cut_tail. However, it looks like --detect_adapter_for_pe isn't in 0.12.4 and --cut_tail isn't in 0.19.5. As an example, I get the message ""undefined option: --cut_tail"". I created a new conda environment to ensure there were no conflicts and the problem is still there. I am running conda 4.11.0 on OSX through terminal. Any guidance would be appreciated. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/383#issuecomment-1030082963
https://github.com/OpenGene/fastp/issues/407#issuecomment-1140534867:240,Deployability,install,installation,240,"I was having the exact same issue and I was able to solve it by setting a `conda` environment with `conda-forge` as the priority channel. These are the steps I followed:. 1. Add `bioconda` and `conda-forge` as the priority channels for the installation of packages. This will allow for the newest version of `fastp` . Run the following commands to add the channels:; ```; conda config --add channels bioconda; conda config --add channels conda-forge; ```. 2. Create a new `conda` environment (I specified `python=3.9`, not sure if it is necessary); ```; conda create -n my_env python=3.9; ```. 3. All packages should be installed from the `conda-forge` channel, but just to make sure activate the environment and run; ```; conda update --all; ```. 4. Install `fastp` and it should give you version `0.23.2` by simply doing; ```; conda install fastp; ```. Hopefully it will also work for you! This solution worked for me on my Mac running macOS Big Sur and on a Linux server.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/407#issuecomment-1140534867
https://github.com/OpenGene/fastp/issues/407#issuecomment-1140534867:620,Deployability,install,installed,620,"I was having the exact same issue and I was able to solve it by setting a `conda` environment with `conda-forge` as the priority channel. These are the steps I followed:. 1. Add `bioconda` and `conda-forge` as the priority channels for the installation of packages. This will allow for the newest version of `fastp` . Run the following commands to add the channels:; ```; conda config --add channels bioconda; conda config --add channels conda-forge; ```. 2. Create a new `conda` environment (I specified `python=3.9`, not sure if it is necessary); ```; conda create -n my_env python=3.9; ```. 3. All packages should be installed from the `conda-forge` channel, but just to make sure activate the environment and run; ```; conda update --all; ```. 4. Install `fastp` and it should give you version `0.23.2` by simply doing; ```; conda install fastp; ```. Hopefully it will also work for you! This solution worked for me on my Mac running macOS Big Sur and on a Linux server.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/407#issuecomment-1140534867
https://github.com/OpenGene/fastp/issues/407#issuecomment-1140534867:729,Deployability,update,update,729,"I was having the exact same issue and I was able to solve it by setting a `conda` environment with `conda-forge` as the priority channel. These are the steps I followed:. 1. Add `bioconda` and `conda-forge` as the priority channels for the installation of packages. This will allow for the newest version of `fastp` . Run the following commands to add the channels:; ```; conda config --add channels bioconda; conda config --add channels conda-forge; ```. 2. Create a new `conda` environment (I specified `python=3.9`, not sure if it is necessary); ```; conda create -n my_env python=3.9; ```. 3. All packages should be installed from the `conda-forge` channel, but just to make sure activate the environment and run; ```; conda update --all; ```. 4. Install `fastp` and it should give you version `0.23.2` by simply doing; ```; conda install fastp; ```. Hopefully it will also work for you! This solution worked for me on my Mac running macOS Big Sur and on a Linux server.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/407#issuecomment-1140534867
https://github.com/OpenGene/fastp/issues/407#issuecomment-1140534867:835,Deployability,install,install,835,"I was having the exact same issue and I was able to solve it by setting a `conda` environment with `conda-forge` as the priority channel. These are the steps I followed:. 1. Add `bioconda` and `conda-forge` as the priority channels for the installation of packages. This will allow for the newest version of `fastp` . Run the following commands to add the channels:; ```; conda config --add channels bioconda; conda config --add channels conda-forge; ```. 2. Create a new `conda` environment (I specified `python=3.9`, not sure if it is necessary); ```; conda create -n my_env python=3.9; ```. 3. All packages should be installed from the `conda-forge` channel, but just to make sure activate the environment and run; ```; conda update --all; ```. 4. Install `fastp` and it should give you version `0.23.2` by simply doing; ```; conda install fastp; ```. Hopefully it will also work for you! This solution worked for me on my Mac running macOS Big Sur and on a Linux server.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/407#issuecomment-1140534867
https://github.com/OpenGene/fastp/issues/407#issuecomment-1140534867:378,Modifiability,config,config,378,"I was having the exact same issue and I was able to solve it by setting a `conda` environment with `conda-forge` as the priority channel. These are the steps I followed:. 1. Add `bioconda` and `conda-forge` as the priority channels for the installation of packages. This will allow for the newest version of `fastp` . Run the following commands to add the channels:; ```; conda config --add channels bioconda; conda config --add channels conda-forge; ```. 2. Create a new `conda` environment (I specified `python=3.9`, not sure if it is necessary); ```; conda create -n my_env python=3.9; ```. 3. All packages should be installed from the `conda-forge` channel, but just to make sure activate the environment and run; ```; conda update --all; ```. 4. Install `fastp` and it should give you version `0.23.2` by simply doing; ```; conda install fastp; ```. Hopefully it will also work for you! This solution worked for me on my Mac running macOS Big Sur and on a Linux server.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/407#issuecomment-1140534867
https://github.com/OpenGene/fastp/issues/407#issuecomment-1140534867:416,Modifiability,config,config,416,"I was having the exact same issue and I was able to solve it by setting a `conda` environment with `conda-forge` as the priority channel. These are the steps I followed:. 1. Add `bioconda` and `conda-forge` as the priority channels for the installation of packages. This will allow for the newest version of `fastp` . Run the following commands to add the channels:; ```; conda config --add channels bioconda; conda config --add channels conda-forge; ```. 2. Create a new `conda` environment (I specified `python=3.9`, not sure if it is necessary); ```; conda create -n my_env python=3.9; ```. 3. All packages should be installed from the `conda-forge` channel, but just to make sure activate the environment and run; ```; conda update --all; ```. 4. Install `fastp` and it should give you version `0.23.2` by simply doing; ```; conda install fastp; ```. Hopefully it will also work for you! This solution worked for me on my Mac running macOS Big Sur and on a Linux server.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/407#issuecomment-1140534867
https://github.com/OpenGene/fastp/issues/407#issuecomment-1140534867:810,Usability,simpl,simply,810,"I was having the exact same issue and I was able to solve it by setting a `conda` environment with `conda-forge` as the priority channel. These are the steps I followed:. 1. Add `bioconda` and `conda-forge` as the priority channels for the installation of packages. This will allow for the newest version of `fastp` . Run the following commands to add the channels:; ```; conda config --add channels bioconda; conda config --add channels conda-forge; ```. 2. Create a new `conda` environment (I specified `python=3.9`, not sure if it is necessary); ```; conda create -n my_env python=3.9; ```. 3. All packages should be installed from the `conda-forge` channel, but just to make sure activate the environment and run; ```; conda update --all; ```. 4. Install `fastp` and it should give you version `0.23.2` by simply doing; ```; conda install fastp; ```. Hopefully it will also work for you! This solution worked for me on my Mac running macOS Big Sur and on a Linux server.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/407#issuecomment-1140534867
https://github.com/OpenGene/fastp/issues/420#issuecomment-1437046200:48,Deployability,install,install,48,"Right, I think @adamsbp was asking for a native install, I guess both you and he could be clearer. In any case, emulation on M1 is the way to go......",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/420#issuecomment-1437046200
https://github.com/OpenGene/fastp/issues/420#issuecomment-1437046200:90,Usability,clear,clearer,90,"Right, I think @adamsbp was asking for a native install, I guess both you and he could be clearer. In any case, emulation on M1 is the way to go......",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/420#issuecomment-1437046200
https://github.com/OpenGene/fastp/issues/420#issuecomment-1437113493:50,Deployability,install,install,50,"> Right, I think @adamsbp was asking for a native install, I guess both you and he could be clearer. In any case, emulation on M1 is the way to go...... He did not even mention if he tried to install `fastp`. He was not asking for native install. I did it via simple `conda` ... so what should have been clearer?. The github install instructions are very linux-flavored ..",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/420#issuecomment-1437113493
https://github.com/OpenGene/fastp/issues/420#issuecomment-1437113493:192,Deployability,install,install,192,"> Right, I think @adamsbp was asking for a native install, I guess both you and he could be clearer. In any case, emulation on M1 is the way to go...... He did not even mention if he tried to install `fastp`. He was not asking for native install. I did it via simple `conda` ... so what should have been clearer?. The github install instructions are very linux-flavored ..",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/420#issuecomment-1437113493
https://github.com/OpenGene/fastp/issues/420#issuecomment-1437113493:238,Deployability,install,install,238,"> Right, I think @adamsbp was asking for a native install, I guess both you and he could be clearer. In any case, emulation on M1 is the way to go...... He did not even mention if he tried to install `fastp`. He was not asking for native install. I did it via simple `conda` ... so what should have been clearer?. The github install instructions are very linux-flavored ..",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/420#issuecomment-1437113493
https://github.com/OpenGene/fastp/issues/420#issuecomment-1437113493:325,Deployability,install,install,325,"> Right, I think @adamsbp was asking for a native install, I guess both you and he could be clearer. In any case, emulation on M1 is the way to go...... He did not even mention if he tried to install `fastp`. He was not asking for native install. I did it via simple `conda` ... so what should have been clearer?. The github install instructions are very linux-flavored ..",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/420#issuecomment-1437113493
https://github.com/OpenGene/fastp/issues/420#issuecomment-1437113493:92,Usability,clear,clearer,92,"> Right, I think @adamsbp was asking for a native install, I guess both you and he could be clearer. In any case, emulation on M1 is the way to go...... He did not even mention if he tried to install `fastp`. He was not asking for native install. I did it via simple `conda` ... so what should have been clearer?. The github install instructions are very linux-flavored ..",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/420#issuecomment-1437113493
https://github.com/OpenGene/fastp/issues/420#issuecomment-1437113493:260,Usability,simpl,simple,260,"> Right, I think @adamsbp was asking for a native install, I guess both you and he could be clearer. In any case, emulation on M1 is the way to go...... He did not even mention if he tried to install `fastp`. He was not asking for native install. I did it via simple `conda` ... so what should have been clearer?. The github install instructions are very linux-flavored ..",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/420#issuecomment-1437113493
https://github.com/OpenGene/fastp/issues/420#issuecomment-1437113493:304,Usability,clear,clearer,304,"> Right, I think @adamsbp was asking for a native install, I guess both you and he could be clearer. In any case, emulation on M1 is the way to go...... He did not even mention if he tried to install `fastp`. He was not asking for native install. I did it via simple `conda` ... so what should have been clearer?. The github install instructions are very linux-flavored ..",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/420#issuecomment-1437113493
https://github.com/OpenGene/fastp/issues/420#issuecomment-1437124748:144,Deployability,install,install,144,"Well again I want to chalk it up to the inefficiencies of asynchronous text communication, but I myself assumed that he was asking for a native install given that he specified the hardware (and you yourself note the instructions are linux-heavy). Also it's slightly disingenuous to claim you could install using ""simple conda"" when it's actually running under x86 emulation. 🤷‍♂️ I was slightly confused when I tried your solution, until I checked the bioconda repos.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/420#issuecomment-1437124748
https://github.com/OpenGene/fastp/issues/420#issuecomment-1437124748:298,Deployability,install,install,298,"Well again I want to chalk it up to the inefficiencies of asynchronous text communication, but I myself assumed that he was asking for a native install given that he specified the hardware (and you yourself note the instructions are linux-heavy). Also it's slightly disingenuous to claim you could install using ""simple conda"" when it's actually running under x86 emulation. 🤷‍♂️ I was slightly confused when I tried your solution, until I checked the bioconda repos.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/420#issuecomment-1437124748
https://github.com/OpenGene/fastp/issues/420#issuecomment-1437124748:313,Usability,simpl,simple,313,"Well again I want to chalk it up to the inefficiencies of asynchronous text communication, but I myself assumed that he was asking for a native install given that he specified the hardware (and you yourself note the instructions are linux-heavy). Also it's slightly disingenuous to claim you could install using ""simple conda"" when it's actually running under x86 emulation. 🤷‍♂️ I was slightly confused when I tried your solution, until I checked the bioconda repos.",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/420#issuecomment-1437124748
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:172,Energy Efficiency,adapt,adapter,172,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:258,Energy Efficiency,adapt,adapter,258,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:343,Energy Efficiency,adapt,adapter,343,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:407,Energy Efficiency,adapt,adapter,407,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:444,Energy Efficiency,adapt,adapter,444,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:572,Energy Efficiency,adapt,adapter,572,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:634,Energy Efficiency,adapt,adapter,634,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:804,Energy Efficiency,adapt,adapter,804,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:889,Energy Efficiency,adapt,adapters,889,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:995,Energy Efficiency,adapt,adapters,995,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:1117,Energy Efficiency,adapt,adapter,1117,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:1215,Energy Efficiency,adapt,adapter,1215,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:172,Integrability,adapter,adapter,172,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:258,Integrability,adapter,adapter,258,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:343,Integrability,adapter,adapter,343,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:407,Integrability,adapter,adapter,407,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:444,Integrability,adapter,adapter,444,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:572,Integrability,adapter,adapter,572,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:634,Integrability,adapter,adapter,634,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:804,Integrability,adapter,adapter,804,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:889,Integrability,adapter,adapters,889,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:995,Integrability,adapter,adapters,995,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:1117,Integrability,adapter,adapter,1117,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:1215,Integrability,adapter,adapter,1215,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:172,Modifiability,adapt,adapter,172,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:258,Modifiability,adapt,adapter,258,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:343,Modifiability,adapt,adapter,343,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:407,Modifiability,adapt,adapter,407,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:444,Modifiability,adapt,adapter,444,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:572,Modifiability,adapt,adapter,572,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:634,Modifiability,adapt,adapter,634,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:804,Modifiability,adapt,adapter,804,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:889,Modifiability,adapt,adapters,889,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:995,Modifiability,adapt,adapters,995,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:1117,Modifiability,adapt,adapter,1117,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:1215,Modifiability,adapt,adapter,1215,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:193,Safety,detect,detects,193,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:281,Safety,detect,detected,281,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:864,Safety,detect,detect,864,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:970,Safety,detect,detect,970,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:1137,Usability,simpl,simply,1137,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679:1301,Usability,clear,clear,1301,"Hi, there~I met a similar problem and I figured out an explanation myself which at least works for mine. . The possible reason that Fastp does not recoginze and remove the adapter while FastQC detects is that R1 reads are shorter than 150bp, which means the adapter in R1.fastq.gz detected by FastQC is actually the reversed and complementary adapter of R2. So, in this situation, if you want to remove the adapter in R1 via Fastp, specify the adapter sequence in Fastp command with ""-a reversed_and_complementary_adapter_sequence_of_Read2"". And if you want to remove the adapter in R2, use the sequence of reversed and complementary adapter of R1. When you have a library shorter than 150bp, Sequencer will keep reading bases after finishing your inserts and continue to read the bases according to the adapter of the opposite strand. My guess is that FastQC can detect those widely-used adapters both reversed or not while Fastp can't, which means Fastp can only auto-detect those widely-used adapters literally based on the sequences given. I would suggest to play with Fastp with the sequence of the other strand adapter. Or you can simply extract some reads sequence and analyze it manually, to find where the adapter is and what actual it is. Please feel free to let me know if I didn't make it clear or if it works for you. Thanks!",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/558#issuecomment-2357871679
https://github.com/OpenGene/fastp/issues/562#issuecomment-2206523601:882,Availability,down,download,882,"My test dataset is too large to share, but here is the exact fastp call I used; `fastp -i SRR13921546_sub_1.fastq.gz -I SRR13921546_sub_2.fastq.gz -o SRR13921546_filter_1.fastq.gz -O SRR13921546_filter_2.fastq.gz -j SRR13921546_filter.json -w 1 --dedup`. I'm running in a modified version of this docker container which is based on ubuntu ""mambaorg/micromamba:1.5.8-jammy"". fastp installed with micromamba; `RUN micromamba create -q -y -c conda-forge -c bioconda -n fastp fastp=0.23.4 && micromamba clean --all -y`. I used `diff` to compare the .json file from multiple runs. Much of it is identical, but not entirely. I think I tried removing the dedup and that did not solve it. Only setting to 1 thread fixed it. . Honestly, fastp is so fast that 1 thread is still usable. Love the program and thanks for following up!. EDIT:; If you really want to recreate my test set, you can download the sequencing from SRR13921546 and then take the first million reads",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/562#issuecomment-2206523601
https://github.com/OpenGene/fastp/issues/562#issuecomment-2206523601:380,Deployability,install,installed,380,"My test dataset is too large to share, but here is the exact fastp call I used; `fastp -i SRR13921546_sub_1.fastq.gz -I SRR13921546_sub_2.fastq.gz -o SRR13921546_filter_1.fastq.gz -O SRR13921546_filter_2.fastq.gz -j SRR13921546_filter.json -w 1 --dedup`. I'm running in a modified version of this docker container which is based on ubuntu ""mambaorg/micromamba:1.5.8-jammy"". fastp installed with micromamba; `RUN micromamba create -q -y -c conda-forge -c bioconda -n fastp fastp=0.23.4 && micromamba clean --all -y`. I used `diff` to compare the .json file from multiple runs. Much of it is identical, but not entirely. I think I tried removing the dedup and that did not solve it. Only setting to 1 thread fixed it. . Honestly, fastp is so fast that 1 thread is still usable. Love the program and thanks for following up!. EDIT:; If you really want to recreate my test set, you can download the sequencing from SRR13921546 and then take the first million reads",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/562#issuecomment-2206523601
https://github.com/OpenGene/fastp/issues/562#issuecomment-2206523601:3,Testability,test,test,3,"My test dataset is too large to share, but here is the exact fastp call I used; `fastp -i SRR13921546_sub_1.fastq.gz -I SRR13921546_sub_2.fastq.gz -o SRR13921546_filter_1.fastq.gz -O SRR13921546_filter_2.fastq.gz -j SRR13921546_filter.json -w 1 --dedup`. I'm running in a modified version of this docker container which is based on ubuntu ""mambaorg/micromamba:1.5.8-jammy"". fastp installed with micromamba; `RUN micromamba create -q -y -c conda-forge -c bioconda -n fastp fastp=0.23.4 && micromamba clean --all -y`. I used `diff` to compare the .json file from multiple runs. Much of it is identical, but not entirely. I think I tried removing the dedup and that did not solve it. Only setting to 1 thread fixed it. . Honestly, fastp is so fast that 1 thread is still usable. Love the program and thanks for following up!. EDIT:; If you really want to recreate my test set, you can download the sequencing from SRR13921546 and then take the first million reads",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/562#issuecomment-2206523601
https://github.com/OpenGene/fastp/issues/562#issuecomment-2206523601:864,Testability,test,test,864,"My test dataset is too large to share, but here is the exact fastp call I used; `fastp -i SRR13921546_sub_1.fastq.gz -I SRR13921546_sub_2.fastq.gz -o SRR13921546_filter_1.fastq.gz -O SRR13921546_filter_2.fastq.gz -j SRR13921546_filter.json -w 1 --dedup`. I'm running in a modified version of this docker container which is based on ubuntu ""mambaorg/micromamba:1.5.8-jammy"". fastp installed with micromamba; `RUN micromamba create -q -y -c conda-forge -c bioconda -n fastp fastp=0.23.4 && micromamba clean --all -y`. I used `diff` to compare the .json file from multiple runs. Much of it is identical, but not entirely. I think I tried removing the dedup and that did not solve it. Only setting to 1 thread fixed it. . Honestly, fastp is so fast that 1 thread is still usable. Love the program and thanks for following up!. EDIT:; If you really want to recreate my test set, you can download the sequencing from SRR13921546 and then take the first million reads",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/562#issuecomment-2206523601
https://github.com/OpenGene/fastp/issues/562#issuecomment-2206523601:768,Usability,usab,usable,768,"My test dataset is too large to share, but here is the exact fastp call I used; `fastp -i SRR13921546_sub_1.fastq.gz -I SRR13921546_sub_2.fastq.gz -o SRR13921546_filter_1.fastq.gz -O SRR13921546_filter_2.fastq.gz -j SRR13921546_filter.json -w 1 --dedup`. I'm running in a modified version of this docker container which is based on ubuntu ""mambaorg/micromamba:1.5.8-jammy"". fastp installed with micromamba; `RUN micromamba create -q -y -c conda-forge -c bioconda -n fastp fastp=0.23.4 && micromamba clean --all -y`. I used `diff` to compare the .json file from multiple runs. Much of it is identical, but not entirely. I think I tried removing the dedup and that did not solve it. Only setting to 1 thread fixed it. . Honestly, fastp is so fast that 1 thread is still usable. Love the program and thanks for following up!. EDIT:; If you really want to recreate my test set, you can download the sequencing from SRR13921546 and then take the first million reads",MatchSource.ISSUE_COMMENT,OpenGene,fastp,v0.23.4,,https://github.com/OpenGene/fastp/issues/562#issuecomment-2206523601
