id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:301,Testability,test,test,301,"/* If we are forced to suspend, we must undo the assignments to any newly; * nonzero coefficients in the block, because otherwise we'd get confused; * next time about which coefficients were already nonzero.; * But we need not undo addition of bits to already-nonzero coefficients;; * instead, we can test the current bit to see if we already did it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:40,Usability,undo,undo,40,"/* If we are forced to suspend, we must undo the assignments to any newly; * nonzero coefficients in the block, because otherwise we'd get confused; * next time about which coefficients were already nonzero.; * But we need not undo addition of bits to already-nonzero coefficients;; * instead, we can test the current bit to see if we already did it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:227,Usability,undo,undo,227,"/* If we are forced to suspend, we must undo the assignments to any newly; * nonzero coefficients in the block, because otherwise we'd get confused; * next time about which coefficients were already nonzero.; * But we need not undo addition of bits to already-nonzero coefficients;; * instead, we can test the current bit to see if we already did it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:35,Testability,log,logic,35,/* rest of block is handled by EOB logic */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:21,Deployability,update,update,21,"/* Completed MCU, so update state */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:3,Performance,Load,Load,3,/* Load up working state */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:42,Deployability,update,update,42,"/* Convert DC difference to actual value, update last_dc_val */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:100,Usability,clear,cleared,100,"/* Section F.2.2.2: decode the AC coefficients */; /* Since zeroes are skipped, output area must be cleared beforehand */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:21,Deployability,update,update,21,"/* Completed MCU, so update state */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:3,Performance,Load,Load,3,/* Load up working state */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:42,Deployability,update,update,42,"/* Convert DC difference to actual value, update last_dc_val */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:100,Usability,clear,cleared,100,"/* Section F.2.2.2: decode the AC coefficients */; /* Since zeroes are skipped, output area must be cleared beforehand */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:21,Deployability,update,update,21,"/* Completed MCU, so update state */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:3,Security,Validat,Validate,3,/* Validate progressive scan parameters */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:144,Availability,error,errors,144,"/* Update progression status, and verify that scan order is legal.; * Note that inter-scan inconsistencies are treated as warnings; * not fatal errors ... not clear if this is right way to behave.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:3,Deployability,Update,Update,3,"/* Update progression status, and verify that scan order is legal.; * Note that inter-scan inconsistencies are treated as warnings; * not fatal errors ... not clear if this is right way to behave.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:159,Usability,clear,clear,159,"/* Update progression status, and verify that scan order is legal.; * Note that inter-scan inconsistencies are treated as warnings; * not fatal errors ... not clear if this is right way to behave.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:23,Integrability,rout,routine,23,/* Select MCU decoding routine */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:17,Safety,predict,predictions,17,/* Initialize DC predictions to 0 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:28,Modifiability,variab,variables,28,/* Initialize private state variables */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:99,Availability,error,error,99,"/* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.; * This ought to be an error condition, but we make it a warning because; * there are some baseline files out there with all zeroes in these bytes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:23,Integrability,rout,routine,23,"/* Select MCU decoding routine */; /* We retain the hard-coded case for full-size blocks.; * This is not necessary, but it appears that this version is slightly; * more performant in the given implementation.; * With an improved implementation we would prefer a single optimized; * function.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:169,Performance,perform,performant,169,"/* Select MCU decoding routine */; /* We retain the hard-coded case for full-size blocks.; * This is not necessary, but it appears that this version is slightly; * more performant in the given implementation.; * With an improved implementation we would prefer a single optimized; * function.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:269,Performance,optimiz,optimized,269,"/* Select MCU decoding routine */; /* We retain the hard-coded case for full-size blocks.; * This is not necessary, but it appears that this version is slightly; * more performant in the given implementation.; * With an improved implementation we would prefer a single optimized; * function.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:17,Safety,predict,predictions,17,/* Initialize DC predictions to 0 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:28,Modifiability,variab,variables,28,/* Initialize bitread state variables */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:28,Integrability,rout,routine,28,/*; * Module initialization routine for Huffman entropy decoding.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h:269,Integrability,rout,routines,269,"/*; * jdhuff.h; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains declarations for Huffman entropy decoding routines; * that are shared between the sequential decoder (jdhuff.c) and the; * progressive decoder (jdphuff.c). No other modules need to see these.; */; /* Short forms of external names for systems with brain-damaged linkers. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h:659,Energy Efficiency,reduce,reduces,659,"/*; * Fetching the next N bits from the input stream is a time-critical operation; * for the Huffman decoders. We implement it with a combination of inline; * macros and out-of-line subroutines. Note that N (the number of bits; * demanded at one time) never exceeds 15 for JPEG use.; *; * We read source bytes into get_buffer and dole out bits as needed.; * If get_buffer already contains enough bits, they are fetched in-line; * by the macros CHECK_BIT_BUFFER and GET_BITS. When there aren't enough; * bits, jpeg_fill_bit_buffer is called; it will attempt to fill get_buffer; * as full as possible (not just to the number of bits needed; this; * prefetching reduces the overhead cost of calling jpeg_fill_bit_buffer).; * Note that jpeg_fill_bit_buffer may return FALSE to indicate suspension.; * On TRUE return, jpeg_fill_bit_buffer guarantees that get_buffer contains; * at least the requested number of bits --- dummy zeroes are inserted if; * necessary.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h:54,Availability,mask,masking,54,"/* If long is > 32 bits on your machine, and shifting/masking longs is; * reasonably fast, making bit_buf_type be long and setting BIT_BUF_SIZE; * appropriately should be a win. Unfortunately we can't define the size; * with something like #define BIT_BUF_SIZE (sizeof(bit_buf_type)*8); * because not all machines measure sizeof in 8-bit bytes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h:108,Modifiability,variab,variables,108,"/* # of bytes remaining in source buffer */; /* Bit input buffer --- note these values are kept in register variables,; * not in this struct, inside the inner loops.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h:49,Modifiability,variab,variables,49,/* Macros to declare and load/save bitread local variables. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h:25,Performance,load,load,25,/* Macros to declare and load/save bitread local variables. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h:187,Modifiability,variab,variables,187,"/*; * These macros provide the in-line portion of bit fetching.; * Use CHECK_BIT_BUFFER to ensure there are N bits in get_buffer; * before using GET_BITS, PEEK_BITS, or DROP_BITS.; * The variables get_buffer and bits_left are assumed to be locals,; * but the state struct might not be (jpeg_huff_decode needs this).; *	CHECK_BIT_BUFFER(state,n,action);; *		Ensure there are N bits in get_buffer; if suspend, take action.; * val = GET_BITS(n);; *		Fetch next N bits.; * val = PEEK_BITS(n);; *		Fetch next N bits without removing them from the buffer.; *	DROP_BITS(n);; *		Discard next N bits.; * The value N should be a simple variable, not an expression, because it; * is evaluated multiple times.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h:626,Modifiability,variab,variable,626,"/*; * These macros provide the in-line portion of bit fetching.; * Use CHECK_BIT_BUFFER to ensure there are N bits in get_buffer; * before using GET_BITS, PEEK_BITS, or DROP_BITS.; * The variables get_buffer and bits_left are assumed to be locals,; * but the state struct might not be (jpeg_huff_decode needs this).; *	CHECK_BIT_BUFFER(state,n,action);; *		Ensure there are N bits in get_buffer; if suspend, take action.; * val = GET_BITS(n);; *		Fetch next N bits.; * val = PEEK_BITS(n);; *		Fetch next N bits without removing them from the buffer.; *	DROP_BITS(n);; *		Discard next N bits.; * The value N should be a simple variable, not an expression, because it; * is evaluated multiple times.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h:619,Usability,simpl,simple,619,"/*; * These macros provide the in-line portion of bit fetching.; * Use CHECK_BIT_BUFFER to ensure there are N bits in get_buffer; * before using GET_BITS, PEEK_BITS, or DROP_BITS.; * The variables get_buffer and bits_left are assumed to be locals,; * but the state struct might not be (jpeg_huff_decode needs this).; *	CHECK_BIT_BUFFER(state,n,action);; *		Ensure there are N bits in get_buffer; if suspend, take action.; * val = GET_BITS(n);; *		Fetch next N bits.; * val = PEEK_BITS(n);; *		Fetch next N bits without removing them from the buffer.; *	DROP_BITS(n);; *		Discard next N bits.; * The value N should be a simple variable, not an expression, because it; * is evaluated multiple times.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h:3,Performance,Load,Load,3,/* Load up the bit buffer to a depth of at least nbits */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c:327,Integrability,rout,routines,327,"/*; * jdinput.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains input control logic for the JPEG decompressor.; * These routines are concerned with controlling the decompressor's input; * processing (marker reading and coefficient decoding). The actual input; * reading is done in jdmarker.c, jdhuff.c, and jdarith.c.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c:285,Testability,log,logic,285,"/*; * jdinput.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains input control logic for the JPEG decompressor.; * These routines are concerned with controlling the decompressor's input; * processing (marker reading and coefficient decoding). The actual input; * reading is done in jdmarker.c, jdhuff.c, and jdarith.c.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c:88,Usability,Guid,Guido,88,"/*; * jdinput.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains input control logic for the JPEG decompressor.; * These routines are concerned with controlling the decompressor's input; * processing (marker reading and coefficient decoding). The actual input; * reading is done in jdmarker.c, jdhuff.c, and jdarith.c.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c:6,Integrability,Rout,Routines,6,/*; * Routines to calculate various quantities related to the size of the image.; */; /*; * Compute output image dimensions and related values.; * NOTE: this is exported for possible use by application.; * Hence it mustn't do anything that can't be done twice.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c:887,Usability,simpl,simply,887,"/*; * Save away a copy of the Q-table referenced by each component present; * in the current scan, unless already saved during a prior scan.; *; * In a multiple-scan JPEG file, the encoder could assign different components; * the same Q-table slot number, but change table definitions between scans; * so that each component uses a different Q-table. (The IJG encoder is not; * currently capable of doing this, but other encoders might.) Since we want; * to be able to dequantize all the components at the end of the file, this; * means that we have to save away the table actually used for each component.; * We do this by copying the table at the start of the first scan containing; * the component.; * The JPEG spec prohibits the encoder from changing the contents of a Q-table; * slot between scans of a component using that slot. If the encoder does so; * anyway, this decoder will simply use the Q-table values that were current; * at the start of the first scan for the component.; *; * The decompressor output side looks only at the saved quant tables,; * not at the current Q-table slots.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c:313,Integrability,rout,routine,313,"/*; * Read JPEG markers before, between, or after compressed-data scans.; * Change state as necessary when a new scan is reached.; * Return value is JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.; *; * The consume_input method pointer points either here or to the; * coefficient controller's consume_data routine, depending on whether; * we are reading a compressed data segment or inter-segment markers.; *; * Note: This function should NOT return a pseudo SOS marker (with zero; * component number) to the caller. A pseudo marker received by; * read_markers is processed and then skipped for other markers.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c:322,Integrability,depend,depending,322,"/*; * Read JPEG markers before, between, or after compressed-data scans.; * Change state as necessary when a new scan is reached.; * Return value is JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.; *; * The consume_input method pointer points either here or to the; * coefficient controller's consume_data routine, depending on whether; * we are reading a compressed data segment or inter-segment markers.; *; * Note: This function should NOT return a pseudo SOS marker (with zero; * component number) to the caller. A pseudo marker received by; * read_markers is processed and then skipped for other markers.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c:56,Integrability,rout,routine,56,/* Prevent infinite loop in coef ctlr's decompress_data routine; 	 * if user set output_scan_number larger than number of scans.; 	 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:372,Availability,down,downsampled,372,"/*; * jdmainct.c; *; * Copyright (C) 1994-1996, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the main buffer controller for decompression.; * The main buffer lies between the JPEG decompressor proper and the; * post-processor; it holds downsampled data in the JPEG colorspace.; *; * Note that this code is bypassed in raw-data mode, since the application; * supplies the equivalent of the main buffer in that case.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:2834,Availability,down,downsizing,2834,"*; * When need_context_rows is TRUE, this controller guarantees that the buffer; * passed to postprocessing contains at least one row group's worth of samples; * above and below the row group(s) being processed. Note that the context; * rows ""above"" the first passed row group appear at negative row offsets in; * the passed buffer. At the top and bottom of the image, the required; * context rows are manufactured by duplicating the first or last real sample; * row; this avoids having special cases in the upsampling inner loops.; *; * The amount of context is fixed at one row group just because that's a; * convenient number for this controller to work with. The existing; * upsamplers really only need one sample row of context. An upsampler; * supporting arbitrary output rescaling might wish for more than one row; * group of context when shrinking the image; tough, we don't handle that.; * (This is justified by the assumption that downsizing will be handled mostly; * by adjusting the DCT_scaled_size values, so that the actual scale factor at; * the upsample step needn't be much less than one.); *; * To provide the desired context, we have to retain the last two row groups; * of one iMCU row while reading in the next iMCU row. (The last row group; * can't be processed until we have another row group for its below-context,; * and so we have to save the next-to-last group too for its above-context.); * We could do this most simply by copying data around in our buffer, but; * that'd be very slow. We can avoid copying any data by creating a rather; * strange pointer structure. Here's how it works. We allocate a workspace; * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number; * of row groups per iMCU row). We create two sets of redundant pointers to; * the workspace. Labeling the physical row groups 0 to M+1, the synthesized; * pointer lists look like this:; * M+1 M-1; * master pointer --> 0 master pointer --> 0; * 1 1; * ... ...; * M-3 M-3; * M-2 M; * ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:3664,Availability,redundant,redundant,3664,"escaling might wish for more than one row; * group of context when shrinking the image; tough, we don't handle that.; * (This is justified by the assumption that downsizing will be handled mostly; * by adjusting the DCT_scaled_size values, so that the actual scale factor at; * the upsample step needn't be much less than one.); *; * To provide the desired context, we have to retain the last two row groups; * of one iMCU row while reading in the next iMCU row. (The last row group; * can't be processed until we have another row group for its below-context,; * and so we have to save the next-to-last group too for its above-context.); * We could do this most simply by copying data around in our buffer, but; * that'd be very slow. We can avoid copying any data by creating a rather; * strange pointer structure. Here's how it works. We allocate a workspace; * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number; * of row groups per iMCU row). We create two sets of redundant pointers to; * the workspace. Labeling the physical row groups 0 to M+1, the synthesized; * pointer lists look like this:; * M+1 M-1; * master pointer --> 0 master pointer --> 0; * 1 1; * ... ...; * M-3 M-3; * M-2 M; * M-1 M+1; * M M-2; * M+1 M-1; * 0 0; * We read alternate iMCU rows using each master pointer; thus the last two; * row groups of the previous iMCU row remain un-overwritten in the workspace.; * The pointer lists are set up so that the required context rows appear to; * be adjacent to the proper places when we pass the pointer lists to the; * upsampler.; *; * The above pictures describe the normal state of the pointer lists.; * At top and bottom of the image, we diddle the pointer lists to duplicate; * the first or last sample row as necessary (this is cheaper than copying; * sample rows around).; *; * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1. In that; * situation each iMCU row provides only one row group so the buffering logic; * must be different ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:4520,Availability,down,down,4520,"o row groups; * of one iMCU row while reading in the next iMCU row. (The last row group; * can't be processed until we have another row group for its below-context,; * and so we have to save the next-to-last group too for its above-context.); * We could do this most simply by copying data around in our buffer, but; * that'd be very slow. We can avoid copying any data by creating a rather; * strange pointer structure. Here's how it works. We allocate a workspace; * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number; * of row groups per iMCU row). We create two sets of redundant pointers to; * the workspace. Labeling the physical row groups 0 to M+1, the synthesized; * pointer lists look like this:; * M+1 M-1; * master pointer --> 0 master pointer --> 0; * 1 1; * ... ...; * M-3 M-3; * M-2 M; * M-1 M+1; * M M-2; * M+1 M-1; * 0 0; * We read alternate iMCU rows using each master pointer; thus the last two; * row groups of the previous iMCU row remain un-overwritten in the workspace.; * The pointer lists are set up so that the required context rows appear to; * be adjacent to the proper places when we pass the pointer lists to the; * upsampler.; *; * The above pictures describe the normal state of the pointer lists.; * At top and bottom of the image, we diddle the pointer lists to duplicate; * the first or last sample row as necessary (this is cheaper than copying; * sample rows around).; *; * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1. In that; * situation each iMCU row provides only one row group so the buffering logic; * must be different (eg, we must read two iMCU rows before we can emit the; * first row group). For now, we simply do not support providing context; * rows when min_DCT_scaled_size is 1. That combination seems unlikely to; * be worth providing --- if someone wants a 1/8th-size preview, they probably; * want it quick and dirty, so a context-free upsampler is sufficient.; */; /* Private buffer controller object */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:334,Energy Efficiency,efficient,efficient,334,"/*; * In the current system design, the main buffer need never be a full-image; * buffer; any full-height buffers will be found inside the coefficient or; * postprocessing controllers. Nonetheless, the main controller is not; * trivial. Its responsibility is to provide context rows for upsampling/; * rescaling, and doing this in an efficient fashion is a bit tricky.; *; * Postprocessor input data is counted in ""row groups"". A row group; * is defined to be (v_samp_factor * DCT_scaled_size / min_DCT_scaled_size); * sample rows of each component. (We require DCT_scaled_size values to be; * chosen such that these numbers are integers. In practice DCT_scaled_size; * values will likely be powers of two, so we actually have the stronger; * condition that DCT_scaled_size / min_DCT_scaled_size is an integer.); * Upsampling will typically produce max_v_samp_factor pixel rows from each; * row group (times any additional scale factor that the upsampler is; * applying).; *; * The coefficient controller will deliver data to us one iMCU row at a time;; * each iMCU row contains v_samp_factor * DCT_scaled_size sample rows, or; * exactly min_DCT_scaled_size row groups. (This amount of data corresponds; * to one row of MCUs when the image is fully interleaved.) Note that the; * number of sample rows varies across components, but the number of row; * groups does not. Some garbage sample rows may be included in the last iMCU; * row at the bottom of the image.; *; * Depending on the vertical scaling algorithm used, the upsampler may need; * access to the sample row(s) above and below its current input row group.; * The upsampler is required to set need_context_rows TRUE at global selection; * time if so. When need_context_rows is FALSE, this controller can simply; * obtain one iMCU row at a time from the coefficient controller and dole it; * out as row groups to the postprocessor.; *; * When need_context_rows is TRUE, this controller guarantees that the buffer; * passed to postprocessing ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:692,Energy Efficiency,power,powers,692,"/*; * In the current system design, the main buffer need never be a full-image; * buffer; any full-height buffers will be found inside the coefficient or; * postprocessing controllers. Nonetheless, the main controller is not; * trivial. Its responsibility is to provide context rows for upsampling/; * rescaling, and doing this in an efficient fashion is a bit tricky.; *; * Postprocessor input data is counted in ""row groups"". A row group; * is defined to be (v_samp_factor * DCT_scaled_size / min_DCT_scaled_size); * sample rows of each component. (We require DCT_scaled_size values to be; * chosen such that these numbers are integers. In practice DCT_scaled_size; * values will likely be powers of two, so we actually have the stronger; * condition that DCT_scaled_size / min_DCT_scaled_size is an integer.); * Upsampling will typically produce max_v_samp_factor pixel rows from each; * row group (times any additional scale factor that the upsampler is; * applying).; *; * The coefficient controller will deliver data to us one iMCU row at a time;; * each iMCU row contains v_samp_factor * DCT_scaled_size sample rows, or; * exactly min_DCT_scaled_size row groups. (This amount of data corresponds; * to one row of MCUs when the image is fully interleaved.) Note that the; * number of sample rows varies across components, but the number of row; * groups does not. Some garbage sample rows may be included in the last iMCU; * row at the bottom of the image.; *; * Depending on the vertical scaling algorithm used, the upsampler may need; * access to the sample row(s) above and below its current input row group.; * The upsampler is required to set need_context_rows TRUE at global selection; * time if so. When need_context_rows is FALSE, this controller can simply; * obtain one iMCU row at a time from the coefficient controller and dole it; * out as row groups to the postprocessor.; *; * When need_context_rows is TRUE, this controller guarantees that the buffer; * passed to postprocessing ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:3512,Energy Efficiency,allocate,allocate,3512,"samplers really only need one sample row of context. An upsampler; * supporting arbitrary output rescaling might wish for more than one row; * group of context when shrinking the image; tough, we don't handle that.; * (This is justified by the assumption that downsizing will be handled mostly; * by adjusting the DCT_scaled_size values, so that the actual scale factor at; * the upsample step needn't be much less than one.); *; * To provide the desired context, we have to retain the last two row groups; * of one iMCU row while reading in the next iMCU row. (The last row group; * can't be processed until we have another row group for its below-context,; * and so we have to save the next-to-last group too for its above-context.); * We could do this most simply by copying data around in our buffer, but; * that'd be very slow. We can avoid copying any data by creating a rather; * strange pointer structure. Here's how it works. We allocate a workspace; * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number; * of row groups per iMCU row). We create two sets of redundant pointers to; * the workspace. Labeling the physical row groups 0 to M+1, the synthesized; * pointer lists look like this:; * M+1 M-1; * master pointer --> 0 master pointer --> 0; * 1 1; * ... ...; * M-3 M-3; * M-2 M; * M-1 M+1; * M M-2; * M+1 M-1; * 0 0; * We read alternate iMCU rows using each master pointer; thus the last two; * row groups of the previous iMCU row remain un-overwritten in the workspace.; * The pointer lists are set up so that the required context rows appear to; * be adjacent to the proper places when we pass the pointer lists to the; * upsampler.; *; * The above pictures describe the normal state of the pointer lists.; * At top and bottom of the image, we diddle the pointer lists to duplicate; * the first or last sample row as necessary (this is cheaper than copying; * sample rows around).; *; * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1. In that; *",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:1469,Integrability,Depend,Depending,1469,"component. (We require DCT_scaled_size values to be; * chosen such that these numbers are integers. In practice DCT_scaled_size; * values will likely be powers of two, so we actually have the stronger; * condition that DCT_scaled_size / min_DCT_scaled_size is an integer.); * Upsampling will typically produce max_v_samp_factor pixel rows from each; * row group (times any additional scale factor that the upsampler is; * applying).; *; * The coefficient controller will deliver data to us one iMCU row at a time;; * each iMCU row contains v_samp_factor * DCT_scaled_size sample rows, or; * exactly min_DCT_scaled_size row groups. (This amount of data corresponds; * to one row of MCUs when the image is fully interleaved.) Note that the; * number of sample rows varies across components, but the number of row; * groups does not. Some garbage sample rows may be included in the last iMCU; * row at the bottom of the image.; *; * Depending on the vertical scaling algorithm used, the upsampler may need; * access to the sample row(s) above and below its current input row group.; * The upsampler is required to set need_context_rows TRUE at global selection; * time if so. When need_context_rows is FALSE, this controller can simply; * obtain one iMCU row at a time from the coefficient controller and dole it; * out as row groups to the postprocessor.; *; * When need_context_rows is TRUE, this controller guarantees that the buffer; * passed to postprocessing contains at least one row group's worth of samples; * above and below the row group(s) being processed. Note that the context; * rows ""above"" the first passed row group appear at negative row offsets in; * the passed buffer. At the top and bottom of the image, the required; * context rows are manufactured by duplicating the first or last real sample; * row; this avoids having special cases in the upsampling inner loops.; *; * The amount of context is fixed at one row group just because that's a; * convenient number for this controlle",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:2366,Safety,avoid,avoids,2366,"ts, but the number of row; * groups does not. Some garbage sample rows may be included in the last iMCU; * row at the bottom of the image.; *; * Depending on the vertical scaling algorithm used, the upsampler may need; * access to the sample row(s) above and below its current input row group.; * The upsampler is required to set need_context_rows TRUE at global selection; * time if so. When need_context_rows is FALSE, this controller can simply; * obtain one iMCU row at a time from the coefficient controller and dole it; * out as row groups to the postprocessor.; *; * When need_context_rows is TRUE, this controller guarantees that the buffer; * passed to postprocessing contains at least one row group's worth of samples; * above and below the row group(s) being processed. Note that the context; * rows ""above"" the first passed row group appear at negative row offsets in; * the passed buffer. At the top and bottom of the image, the required; * context rows are manufactured by duplicating the first or last real sample; * row; this avoids having special cases in the upsampling inner loops.; *; * The amount of context is fixed at one row group just because that's a; * convenient number for this controller to work with. The existing; * upsamplers really only need one sample row of context. An upsampler; * supporting arbitrary output rescaling might wish for more than one row; * group of context when shrinking the image; tough, we don't handle that.; * (This is justified by the assumption that downsizing will be handled mostly; * by adjusting the DCT_scaled_size values, so that the actual scale factor at; * the upsample step needn't be much less than one.); *; * To provide the desired context, we have to retain the last two row groups; * of one iMCU row while reading in the next iMCU row. (The last row group; * can't be processed until we have another row group for its below-context,; * and so we have to save the next-to-last group too for its above-context.); * We could do t",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:3414,Safety,avoid,avoid,3414,"ontext is fixed at one row group just because that's a; * convenient number for this controller to work with. The existing; * upsamplers really only need one sample row of context. An upsampler; * supporting arbitrary output rescaling might wish for more than one row; * group of context when shrinking the image; tough, we don't handle that.; * (This is justified by the assumption that downsizing will be handled mostly; * by adjusting the DCT_scaled_size values, so that the actual scale factor at; * the upsample step needn't be much less than one.); *; * To provide the desired context, we have to retain the last two row groups; * of one iMCU row while reading in the next iMCU row. (The last row group; * can't be processed until we have another row group for its below-context,; * and so we have to save the next-to-last group too for its above-context.); * We could do this most simply by copying data around in our buffer, but; * that'd be very slow. We can avoid copying any data by creating a rather; * strange pointer structure. Here's how it works. We allocate a workspace; * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number; * of row groups per iMCU row). We create two sets of redundant pointers to; * the workspace. Labeling the physical row groups 0 to M+1, the synthesized; * pointer lists look like this:; * M+1 M-1; * master pointer --> 0 master pointer --> 0; * 1 1; * ... ...; * M-3 M-3; * M-2 M; * M-1 M+1; * M M-2; * M+1 M-1; * 0 0; * We read alternate iMCU rows using each master pointer; thus the last two; * row groups of the previous iMCU row remain un-overwritten in the workspace.; * The pointer lists are set up so that the required context rows appear to; * be adjacent to the proper places when we pass the pointer lists to the; * upsampler.; *; * The above pictures describe the normal state of the pointer lists.; * At top and bottom of the image, we diddle the pointer lists to duplicate; * the first or last sample row as necessary (this ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:3664,Safety,redund,redundant,3664,"escaling might wish for more than one row; * group of context when shrinking the image; tough, we don't handle that.; * (This is justified by the assumption that downsizing will be handled mostly; * by adjusting the DCT_scaled_size values, so that the actual scale factor at; * the upsample step needn't be much less than one.); *; * To provide the desired context, we have to retain the last two row groups; * of one iMCU row while reading in the next iMCU row. (The last row group; * can't be processed until we have another row group for its below-context,; * and so we have to save the next-to-last group too for its above-context.); * We could do this most simply by copying data around in our buffer, but; * that'd be very slow. We can avoid copying any data by creating a rather; * strange pointer structure. Here's how it works. We allocate a workspace; * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number; * of row groups per iMCU row). We create two sets of redundant pointers to; * the workspace. Labeling the physical row groups 0 to M+1, the synthesized; * pointer lists look like this:; * M+1 M-1; * master pointer --> 0 master pointer --> 0; * 1 1; * ... ...; * M-3 M-3; * M-2 M; * M-1 M+1; * M M-2; * M+1 M-1; * 0 0; * We read alternate iMCU rows using each master pointer; thus the last two; * row groups of the previous iMCU row remain un-overwritten in the workspace.; * The pointer lists are set up so that the required context rows appear to; * be adjacent to the proper places when we pass the pointer lists to the; * upsampler.; *; * The above pictures describe the normal state of the pointer lists.; * At top and bottom of the image, we diddle the pointer lists to duplicate; * the first or last sample row as necessary (this is cheaper than copying; * sample rows around).; *; * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1. In that; * situation each iMCU row provides only one row group so the buffering logic; * must be different ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:1545,Security,access,access,1545,"component. (We require DCT_scaled_size values to be; * chosen such that these numbers are integers. In practice DCT_scaled_size; * values will likely be powers of two, so we actually have the stronger; * condition that DCT_scaled_size / min_DCT_scaled_size is an integer.); * Upsampling will typically produce max_v_samp_factor pixel rows from each; * row group (times any additional scale factor that the upsampler is; * applying).; *; * The coefficient controller will deliver data to us one iMCU row at a time;; * each iMCU row contains v_samp_factor * DCT_scaled_size sample rows, or; * exactly min_DCT_scaled_size row groups. (This amount of data corresponds; * to one row of MCUs when the image is fully interleaved.) Note that the; * number of sample rows varies across components, but the number of row; * groups does not. Some garbage sample rows may be included in the last iMCU; * row at the bottom of the image.; *; * Depending on the vertical scaling algorithm used, the upsampler may need; * access to the sample row(s) above and below its current input row group.; * The upsampler is required to set need_context_rows TRUE at global selection; * time if so. When need_context_rows is FALSE, this controller can simply; * obtain one iMCU row at a time from the coefficient controller and dole it; * out as row groups to the postprocessor.; *; * When need_context_rows is TRUE, this controller guarantees that the buffer; * passed to postprocessing contains at least one row group's worth of samples; * above and below the row group(s) being processed. Note that the context; * rows ""above"" the first passed row group appear at negative row offsets in; * the passed buffer. At the top and bottom of the image, the required; * context rows are manufactured by duplicating the first or last real sample; * row; this avoids having special cases in the upsampling inner loops.; *; * The amount of context is fixed at one row group just because that's a; * convenient number for this controlle",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:4645,Testability,log,logic,4645,"o row groups; * of one iMCU row while reading in the next iMCU row. (The last row group; * can't be processed until we have another row group for its below-context,; * and so we have to save the next-to-last group too for its above-context.); * We could do this most simply by copying data around in our buffer, but; * that'd be very slow. We can avoid copying any data by creating a rather; * strange pointer structure. Here's how it works. We allocate a workspace; * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number; * of row groups per iMCU row). We create two sets of redundant pointers to; * the workspace. Labeling the physical row groups 0 to M+1, the synthesized; * pointer lists look like this:; * M+1 M-1; * master pointer --> 0 master pointer --> 0; * 1 1; * ... ...; * M-3 M-3; * M-2 M; * M-1 M+1; * M M-2; * M+1 M-1; * 0 0; * We read alternate iMCU rows using each master pointer; thus the last two; * row groups of the previous iMCU row remain un-overwritten in the workspace.; * The pointer lists are set up so that the required context rows appear to; * be adjacent to the proper places when we pass the pointer lists to the; * upsampler.; *; * The above pictures describe the normal state of the pointer lists.; * At top and bottom of the image, we diddle the pointer lists to duplicate; * the first or last sample row as necessary (this is cheaper than copying; * sample rows around).; *; * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1. In that; * situation each iMCU row provides only one row group so the buffering logic; * must be different (eg, we must read two iMCU rows before we can emit the; * first row group). For now, we simply do not support providing context; * rows when min_DCT_scaled_size is 1. That combination seems unlikely to; * be worth providing --- if someone wants a 1/8th-size preview, they probably; * want it quick and dirty, so a context-free upsampler is sufficient.; */; /* Private buffer controller object */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:1765,Usability,simpl,simply,1765," integer.); * Upsampling will typically produce max_v_samp_factor pixel rows from each; * row group (times any additional scale factor that the upsampler is; * applying).; *; * The coefficient controller will deliver data to us one iMCU row at a time;; * each iMCU row contains v_samp_factor * DCT_scaled_size sample rows, or; * exactly min_DCT_scaled_size row groups. (This amount of data corresponds; * to one row of MCUs when the image is fully interleaved.) Note that the; * number of sample rows varies across components, but the number of row; * groups does not. Some garbage sample rows may be included in the last iMCU; * row at the bottom of the image.; *; * Depending on the vertical scaling algorithm used, the upsampler may need; * access to the sample row(s) above and below its current input row group.; * The upsampler is required to set need_context_rows TRUE at global selection; * time if so. When need_context_rows is FALSE, this controller can simply; * obtain one iMCU row at a time from the coefficient controller and dole it; * out as row groups to the postprocessor.; *; * When need_context_rows is TRUE, this controller guarantees that the buffer; * passed to postprocessing contains at least one row group's worth of samples; * above and below the row group(s) being processed. Note that the context; * rows ""above"" the first passed row group appear at negative row offsets in; * the passed buffer. At the top and bottom of the image, the required; * context rows are manufactured by duplicating the first or last real sample; * row; this avoids having special cases in the upsampling inner loops.; *; * The amount of context is fixed at one row group just because that's a; * convenient number for this controller to work with. The existing; * upsamplers really only need one sample row of context. An upsampler; * supporting arbitrary output rescaling might wish for more than one row; * group of context when shrinking the image; tough, we don't handle that.; * (This is ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:3334,Usability,simpl,simply,3334,"row; this avoids having special cases in the upsampling inner loops.; *; * The amount of context is fixed at one row group just because that's a; * convenient number for this controller to work with. The existing; * upsamplers really only need one sample row of context. An upsampler; * supporting arbitrary output rescaling might wish for more than one row; * group of context when shrinking the image; tough, we don't handle that.; * (This is justified by the assumption that downsizing will be handled mostly; * by adjusting the DCT_scaled_size values, so that the actual scale factor at; * the upsample step needn't be much less than one.); *; * To provide the desired context, we have to retain the last two row groups; * of one iMCU row while reading in the next iMCU row. (The last row group; * can't be processed until we have another row group for its below-context,; * and so we have to save the next-to-last group too for its above-context.); * We could do this most simply by copying data around in our buffer, but; * that'd be very slow. We can avoid copying any data by creating a rather; * strange pointer structure. Here's how it works. We allocate a workspace; * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number; * of row groups per iMCU row). We create two sets of redundant pointers to; * the workspace. Labeling the physical row groups 0 to M+1, the synthesized; * pointer lists look like this:; * M+1 M-1; * master pointer --> 0 master pointer --> 0; * 1 1; * ... ...; * M-3 M-3; * M-2 M; * M-1 M+1; * M M-2; * M+1 M-1; * 0 0; * We read alternate iMCU rows using each master pointer; thus the last two; * row groups of the previous iMCU row remain un-overwritten in the workspace.; * The pointer lists are set up so that the required context rows appear to; * be adjacent to the proper places when we pass the pointer lists to the; * upsampler.; *; * The above pictures describe the normal state of the pointer lists.; * At top and bottom of the image, we",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:4760,Usability,simpl,simply,4760,"o row groups; * of one iMCU row while reading in the next iMCU row. (The last row group; * can't be processed until we have another row group for its below-context,; * and so we have to save the next-to-last group too for its above-context.); * We could do this most simply by copying data around in our buffer, but; * that'd be very slow. We can avoid copying any data by creating a rather; * strange pointer structure. Here's how it works. We allocate a workspace; * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number; * of row groups per iMCU row). We create two sets of redundant pointers to; * the workspace. Labeling the physical row groups 0 to M+1, the synthesized; * pointer lists look like this:; * M+1 M-1; * master pointer --> 0 master pointer --> 0; * 1 1; * ... ...; * M-3 M-3; * M-2 M; * M-1 M+1; * M M-2; * M+1 M-1; * 0 0; * We read alternate iMCU rows using each master pointer; thus the last two; * row groups of the previous iMCU row remain un-overwritten in the workspace.; * The pointer lists are set up so that the required context rows appear to; * be adjacent to the proper places when we pass the pointer lists to the; * upsampler.; *; * The above pictures describe the normal state of the pointer lists.; * At top and bottom of the image, we diddle the pointer lists to duplicate; * the first or last sample row as necessary (this is cheaper than copying; * sample rows around).; *; * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1. In that; * situation each iMCU row provides only one row group so the buffering logic; * must be different (eg, we must read two iMCU rows before we can emit the; * first row group). For now, we simply do not support providing context; * rows when min_DCT_scaled_size is 1. That combination seems unlikely to; * be worth providing --- if someone wants a 1/8th-size preview, they probably; * want it quick and dirty, so a context-free upsampler is sufficient.; */; /* Private buffer controller object */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:35,Energy Efficiency,allocate,allocated,35,/* public fields */; /* Pointer to allocated workspace (M or M+2 row groups). */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:14,Availability,avail,available,14,/* row groups available to postprocessor */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:23,Safety,detect,detect,23,/* counts iMCU rows to detect image top/bot */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:3,Energy Efficiency,Allocate,Allocate,3,"/* Allocate space for the funny pointer lists.; * This is done only once, not once per pass.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:102,Energy Efficiency,allocate,allocated,102,"/* Create the funny pointer lists discussed in the comments above.; * The actual workspace is already allocated (in mainptr->buffer),; * and the space for the pointer lists is allocated too.; * This routine just fills in the curiously ordered lists.; * This will be repeated at the beginning of each pass.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:176,Energy Efficiency,allocate,allocated,176,"/* Create the funny pointer lists discussed in the comments above.; * The actual workspace is already allocated (in mainptr->buffer),; * and the space for the pointer lists is allocated too.; * This routine just fills in the curiously ordered lists.; * This will be repeated at the beginning of each pass.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:199,Integrability,rout,routine,199,"/* Create the funny pointer lists discussed in the comments above.; * The actual workspace is already allocated (in mainptr->buffer),; * and the space for the pointer lists is allocated too.; * This routine just fills in the curiously ordered lists.; * This will be repeated at the beginning of each pass.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:7,Integrability,wrap,wraparound,7,"/* The wraparound pointers at top and bottom will be filled later; * (see set_wraparound_pointers, below). Initially we want the ""above""; * pointers to duplicate the first actual data line. This only needs; * to happen in xbuffer[0].; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:15,Integrability,wrap,wraparound,15,"/* Set up the ""wraparound"" pointers at top and bottom of the pointer lists.; * This changes the pointer list state from top-of-image to the normal state.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:3,Usability,Simpl,Simple,3,/* Simple case with no context needed */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:45,Usability,simpl,simple,45,/*; * Process some data.; * This handles the simple case where no context is required.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:55,Integrability,wrap,wraparound,55,"/* Need to suspend */; /* After the first iMCU, change wraparound pointers to normal state */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:14,Performance,load,load,14,/* Prepare to load new iMCU row using other xbuffer list */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate the workspace.; * ngroups is the number of row groups we need.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:431,Availability,avail,available,431,"/*; * jdmarker.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * Modified 2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains routines to decode JPEG datastream markers.; * Most of the complexity arises from our desire to support input; * suspension: if not all of the data for a marker is available,; * we must exit back to the application. On resumption, we reprocess; * the marker.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:267,Integrability,rout,routines,267,"/*; * jdmarker.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * Modified 2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains routines to decode JPEG datastream markers.; * Most of the complexity arises from our desire to support input; * suspension: if not all of the data for a marker is available,; * we must exit back to the application. On resumption, we reprocess; * the marker.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:84,Usability,Guid,Guido,84,"/*; * jdmarker.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * Modified 2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains routines to decode JPEG datastream markers.; * Most of the complexity arises from our desire to support input; * suspension: if not all of the data for a marker is available,; * we must exit back to the application. On resumption, we reprocess; * the marker.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:171,Deployability,update,update,171,"/*; * Macros for fetching data from the data source module.; *; * At all times, cinfo->src->next_input_byte and ->bytes_in_buffer reflect; * the current restart point; we update them only when we have reached a; * suitable place to restart if a suspension occurs.; */; /* Declare and initialize local copies of input pointer/count */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:63,Availability,avail,available,63,"/* Internal macro for INPUT_BYTE and INPUT_2BYTES: make a byte available.; * Note we do *not* do INPUT_SYNC before calling fill_input_buffer,; * but we must reload the local copies after a successful fill.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:20,Modifiability,variab,variable,20,"/* Read a byte into variable V.; * If must suspend, take the specified action (typically ""return FALSE"").; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:269,Deployability,update,updated,269,"/*; * Routines to process JPEG markers.; *; * Entry condition: JPEG marker itself has been read and its code saved; * in cinfo->unread_marker; input restart point is just after the marker.; *; * Exit: if return TRUE, have read and processed any parameters, and have; * updated the restart point to point after the parameters.; * If return FALSE, was forced to suspend before reaching end of; * marker parameters; restart point has not been moved. Same routine; * will be called again after application supplies more input data.; *; * This approach to suspension assumes that all of a marker's parameters; * can fit into a single input bufferload. This should hold for ""normal""; * markers. Some COM/APPn markers might have large parameter segments; * that might not fit. If we are simply dropping such a marker, we use; * skip_input_data to get past it, and thereby put the problem on the; * source manager's shoulders. If we are saving the marker's contents; * into memory, we use a slightly different convention: when forced to; * suspend, the marker processor updates the restart point to the end of; * what it's consumed (ie, the end of the buffer) before returning FALSE.; * On resumption, cinfo->unread_marker still contains the marker code,; * but the data source will point to the next chunk of marker data.; * The marker processor must retain internal state to deal with this.; *; * Note that we don't bother to avoid duplicate trace messages if a; * suspension occurs within marker parameters. Other side effects; * require more care.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:1062,Deployability,update,updates,1062,"/*; * Routines to process JPEG markers.; *; * Entry condition: JPEG marker itself has been read and its code saved; * in cinfo->unread_marker; input restart point is just after the marker.; *; * Exit: if return TRUE, have read and processed any parameters, and have; * updated the restart point to point after the parameters.; * If return FALSE, was forced to suspend before reaching end of; * marker parameters; restart point has not been moved. Same routine; * will be called again after application supplies more input data.; *; * This approach to suspension assumes that all of a marker's parameters; * can fit into a single input bufferload. This should hold for ""normal""; * markers. Some COM/APPn markers might have large parameter segments; * that might not fit. If we are simply dropping such a marker, we use; * skip_input_data to get past it, and thereby put the problem on the; * source manager's shoulders. If we are saving the marker's contents; * into memory, we use a slightly different convention: when forced to; * suspend, the marker processor updates the restart point to the end of; * what it's consumed (ie, the end of the buffer) before returning FALSE.; * On resumption, cinfo->unread_marker still contains the marker code,; * but the data source will point to the next chunk of marker data.; * The marker processor must retain internal state to deal with this.; *; * Note that we don't bother to avoid duplicate trace messages if a; * suspension occurs within marker parameters. Other side effects; * require more care.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:6,Integrability,Rout,Routines,6,"/*; * Routines to process JPEG markers.; *; * Entry condition: JPEG marker itself has been read and its code saved; * in cinfo->unread_marker; input restart point is just after the marker.; *; * Exit: if return TRUE, have read and processed any parameters, and have; * updated the restart point to point after the parameters.; * If return FALSE, was forced to suspend before reaching end of; * marker parameters; restart point has not been moved. Same routine; * will be called again after application supplies more input data.; *; * This approach to suspension assumes that all of a marker's parameters; * can fit into a single input bufferload. This should hold for ""normal""; * markers. Some COM/APPn markers might have large parameter segments; * that might not fit. If we are simply dropping such a marker, we use; * skip_input_data to get past it, and thereby put the problem on the; * source manager's shoulders. If we are saving the marker's contents; * into memory, we use a slightly different convention: when forced to; * suspend, the marker processor updates the restart point to the end of; * what it's consumed (ie, the end of the buffer) before returning FALSE.; * On resumption, cinfo->unread_marker still contains the marker code,; * but the data source will point to the next chunk of marker data.; * The marker processor must retain internal state to deal with this.; *; * Note that we don't bother to avoid duplicate trace messages if a; * suspension occurs within marker parameters. Other side effects; * require more care.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:452,Integrability,rout,routine,452,"/*; * Routines to process JPEG markers.; *; * Entry condition: JPEG marker itself has been read and its code saved; * in cinfo->unread_marker; input restart point is just after the marker.; *; * Exit: if return TRUE, have read and processed any parameters, and have; * updated the restart point to point after the parameters.; * If return FALSE, was forced to suspend before reaching end of; * marker parameters; restart point has not been moved. Same routine; * will be called again after application supplies more input data.; *; * This approach to suspension assumes that all of a marker's parameters; * can fit into a single input bufferload. This should hold for ""normal""; * markers. Some COM/APPn markers might have large parameter segments; * that might not fit. If we are simply dropping such a marker, we use; * skip_input_data to get past it, and thereby put the problem on the; * source manager's shoulders. If we are saving the marker's contents; * into memory, we use a slightly different convention: when forced to; * suspend, the marker processor updates the restart point to the end of; * what it's consumed (ie, the end of the buffer) before returning FALSE.; * On resumption, cinfo->unread_marker still contains the marker code,; * but the data source will point to the next chunk of marker data.; * The marker processor must retain internal state to deal with this.; *; * Note that we don't bother to avoid duplicate trace messages if a; * suspension occurs within marker parameters. Other side effects; * require more care.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:1442,Integrability,message,messages,1442,"/*; * Routines to process JPEG markers.; *; * Entry condition: JPEG marker itself has been read and its code saved; * in cinfo->unread_marker; input restart point is just after the marker.; *; * Exit: if return TRUE, have read and processed any parameters, and have; * updated the restart point to point after the parameters.; * If return FALSE, was forced to suspend before reaching end of; * marker parameters; restart point has not been moved. Same routine; * will be called again after application supplies more input data.; *; * This approach to suspension assumes that all of a marker's parameters; * can fit into a single input bufferload. This should hold for ""normal""; * markers. Some COM/APPn markers might have large parameter segments; * that might not fit. If we are simply dropping such a marker, we use; * skip_input_data to get past it, and thereby put the problem on the; * source manager's shoulders. If we are saving the marker's contents; * into memory, we use a slightly different convention: when forced to; * suspend, the marker processor updates the restart point to the end of; * what it's consumed (ie, the end of the buffer) before returning FALSE.; * On resumption, cinfo->unread_marker still contains the marker code,; * but the data source will point to the next chunk of marker data.; * The marker processor must retain internal state to deal with this.; *; * Note that we don't bother to avoid duplicate trace messages if a; * suspension occurs within marker parameters. Other side effects; * require more care.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:1420,Safety,avoid,avoid,1420,"/*; * Routines to process JPEG markers.; *; * Entry condition: JPEG marker itself has been read and its code saved; * in cinfo->unread_marker; input restart point is just after the marker.; *; * Exit: if return TRUE, have read and processed any parameters, and have; * updated the restart point to point after the parameters.; * If return FALSE, was forced to suspend before reaching end of; * marker parameters; restart point has not been moved. Same routine; * will be called again after application supplies more input data.; *; * This approach to suspension assumes that all of a marker's parameters; * can fit into a single input bufferload. This should hold for ""normal""; * markers. Some COM/APPn markers might have large parameter segments; * that might not fit. If we are simply dropping such a marker, we use; * skip_input_data to get past it, and thereby put the problem on the; * source manager's shoulders. If we are saving the marker's contents; * into memory, we use a slightly different convention: when forced to; * suspend, the marker processor updates the restart point to the end of; * what it's consumed (ie, the end of the buffer) before returning FALSE.; * On resumption, cinfo->unread_marker still contains the marker code,; * but the data source will point to the next chunk of marker data.; * The marker processor must retain internal state to deal with this.; *; * Note that we don't bother to avoid duplicate trace messages if a; * suspension occurs within marker parameters. Other side effects; * require more care.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:780,Usability,simpl,simply,780,"/*; * Routines to process JPEG markers.; *; * Entry condition: JPEG marker itself has been read and its code saved; * in cinfo->unread_marker; input restart point is just after the marker.; *; * Exit: if return TRUE, have read and processed any parameters, and have; * updated the restart point to point after the parameters.; * If return FALSE, was forced to suspend before reaching end of; * marker parameters; restart point has not been moved. Same routine; * will be called again after application supplies more input data.; *; * This approach to suspension assumes that all of a marker's parameters; * can fit into a single input bufferload. This should hold for ""normal""; * markers. Some COM/APPn markers might have large parameter segments; * that might not fit. If we are simply dropping such a marker, we use; * skip_input_data to get past it, and thereby put the problem on the; * source manager's shoulders. If we are saving the marker's contents; * into memory, we use a slightly different convention: when forced to; * suspend, the marker processor updates the restart point to the end of; * what it's consumed (ie, the end of the buffer) before returning FALSE.; * On resumption, cinfo->unread_marker still contains the marker code,; * but the data source will point to the next chunk of marker data.; * The marker processor must retain internal state to deal with this.; *; * Note that we don't bother to avoid duplicate trace messages if a; * suspension occurs within marker parameters. Other side effects; * require more care.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:188,Safety,sanity check,sanity check,188,"/* We don't support files in which the image height is initially specified */; /* as 0 and is later redefined by DNL. As long as we have to check that, */; /* might as well have a general sanity check. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:55,Safety,avoid,avoid,55,/* Here we just do minimal validation of the counts to avoid walking; * off the end of our table space. jdhuff.c will check more carefully.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:27,Security,validat,validation,27,/* Here we just do minimal validation of the counts to avoid walking; * off the end of our table space. jdhuff.c will check more carefully.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:29,Safety,safe,safety,29,/* Initialize full table for safety. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:29,Safety,safe,safety,29,/* Initialize full table for safety. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:6,Integrability,Rout,Routines,6,"/*; * Routines for processing APPn and COM markers.; * These are either saved in memory or discarded, per application request.; * APP0 and APP14 are specially checked to see if they are; * JFIF and Adobe markers, respectively.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:124,Availability,error,error,124,"/* Check version.; * Major version must be 1, anything else signals an incompatible change.; * (We used to treat this as an error, but now it's a nonfatal warning,; * because some bozo at Hijaak couldn't read the spec.); * Minor version should be 0..2, but process anyway if newer.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:18,Integrability,message,messages,18,/* Generate trace messages */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:55,Integrability,message,messages,55,/* Validate thumbnail dimensions and issue appropriate messages */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:3,Security,Validat,Validate,3,/* Validate thumbnail dimensions and issue appropriate messages */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:144,Integrability,message,message,144,"/* Found JFIF ""JFXX"" extension APP0 marker */; /* The library doesn't actually do anything with these,; * but we try to produce a helpful trace message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:3,Energy Efficiency,allocate,allocate,3,/* allocate and initialize the marker item */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:3,Usability,resume,resume,3,/* resume reading a marker */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:41,Modifiability,variab,variable-length,41,/* Skip over an unknown or uninteresting variable-length marker */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:3,Modifiability,Extend,Extended,3,"/* Extended sequential, Huffman */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:3,Modifiability,Extend,Extended,3,"/* Extended sequential, arithmetic */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:90,Availability,error,errors,90,"/* must be DHP, EXP, JPGn, or RESn */; /* For now, we treat the reserved markers as fatal errors since they are; * likely to be used to signal incompatible JPEG Part 3 extensions.; * Once the JPEG 3 version-number marker is well defined, this code; * ought to change!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:49,Modifiability,variab,variable,49,"/* Successfully processed marker, so reset state variable */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:129,Availability,recover,recovery,129,"/*; * Read a restart marker, which is expected to appear next in the datastream;; * if the marker is not there, take appropriate recovery action.; * Returns FALSE if suspension is required.; *; * This is called by the entropy decoder after it has read an appropriate; * number of MCUs. cinfo->unread_marker may be nonzero if the entropy decoder; * has already read a marker from the data source. Under normal conditions; * cinfo->unread_marker will be reset to 0 before returning; if not reset,; * it holds a marker which the decoder will be unable to read past.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:129,Safety,recover,recovery,129,"/*; * Read a restart marker, which is expected to appear next in the datastream;; * if the marker is not there, take appropriate recovery action.; * Returns FALSE if suspension is required.; *; * This is called by the entropy decoder after it has read an appropriate; * number of MCUs. cinfo->unread_marker may be nonzero if the entropy decoder; * has already read a marker from the data source. Under normal conditions; * cinfo->unread_marker will be reset to 0 before returning; if not reset,; * it holds a marker which the decoder will be unable to read past.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:3,Deployability,Update,Update,3,/* Update next-restart state */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:263,Availability,recover,recovery,263,"/*; * This is the default resync_to_restart method for data source managers; * to use if they don't have any better approach. Some data source managers; * may be able to back up, or may have additional knowledge about the data; * which permits a more intelligent recovery strategy; such managers would; * presumably supply their own resync method.; *; * read_restart_marker calls resync_to_restart if it finds a marker other than; * the restart marker it was expecting. (This code is *not* used unless; * a nonzero restart interval has been declared.) cinfo->unread_marker is; * the marker code actually found (might be anything, except 0 or FF).; * The desired restart marker number (0..7) is passed as a parameter.; * This routine is supposed to apply whatever error recovery strategy seems; * appropriate in order to position the input stream to the next data segment.; * Note that cinfo->unread_marker is treated as a marker appearing before; * the current data-source input point; usually it should be reset to zero; * before returning.; * Returns FALSE if suspension is required.; *; * This implementation is substantially constrained by wanting to treat the; * input as a data stream; this means we can't back up. Therefore, we have; * only the following actions to work with:; * 1. Simply discard the marker and let the entropy decoder resume at next; * byte of file.; * 2. Read forward until we find another marker, discarding intervening; * data. (In theory we could look ahead within the current bufferload,; * without having to discard data if we don't find the desired marker.; * This idea is not implemented here, in part because it makes behavior; * dependent on buffer size and chance buffer-boundary positions.); * 3. Leave the marker unread (by failing to zero cinfo->unread_marker).; * This will cause the entropy decoder to process an empty data segment,; * inserting dummy zeroes, and then we will reprocess the marker.; *; * #2 is appropriate if we think the desired marker lies ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:763,Availability,error,error,763,"/*; * This is the default resync_to_restart method for data source managers; * to use if they don't have any better approach. Some data source managers; * may be able to back up, or may have additional knowledge about the data; * which permits a more intelligent recovery strategy; such managers would; * presumably supply their own resync method.; *; * read_restart_marker calls resync_to_restart if it finds a marker other than; * the restart marker it was expecting. (This code is *not* used unless; * a nonzero restart interval has been declared.) cinfo->unread_marker is; * the marker code actually found (might be anything, except 0 or FF).; * The desired restart marker number (0..7) is passed as a parameter.; * This routine is supposed to apply whatever error recovery strategy seems; * appropriate in order to position the input stream to the next data segment.; * Note that cinfo->unread_marker is treated as a marker appearing before; * the current data-source input point; usually it should be reset to zero; * before returning.; * Returns FALSE if suspension is required.; *; * This implementation is substantially constrained by wanting to treat the; * input as a data stream; this means we can't back up. Therefore, we have; * only the following actions to work with:; * 1. Simply discard the marker and let the entropy decoder resume at next; * byte of file.; * 2. Read forward until we find another marker, discarding intervening; * data. (In theory we could look ahead within the current bufferload,; * without having to discard data if we don't find the desired marker.; * This idea is not implemented here, in part because it makes behavior; * dependent on buffer size and chance buffer-boundary positions.); * 3. Leave the marker unread (by failing to zero cinfo->unread_marker).; * This will cause the entropy decoder to process an empty data segment,; * inserting dummy zeroes, and then we will reprocess the marker.; *; * #2 is appropriate if we think the desired marker lies ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:769,Availability,recover,recovery,769,"/*; * This is the default resync_to_restart method for data source managers; * to use if they don't have any better approach. Some data source managers; * may be able to back up, or may have additional knowledge about the data; * which permits a more intelligent recovery strategy; such managers would; * presumably supply their own resync method.; *; * read_restart_marker calls resync_to_restart if it finds a marker other than; * the restart marker it was expecting. (This code is *not* used unless; * a nonzero restart interval has been declared.) cinfo->unread_marker is; * the marker code actually found (might be anything, except 0 or FF).; * The desired restart marker number (0..7) is passed as a parameter.; * This routine is supposed to apply whatever error recovery strategy seems; * appropriate in order to position the input stream to the next data segment.; * Note that cinfo->unread_marker is treated as a marker appearing before; * the current data-source input point; usually it should be reset to zero; * before returning.; * Returns FALSE if suspension is required.; *; * This implementation is substantially constrained by wanting to treat the; * input as a data stream; this means we can't back up. Therefore, we have; * only the following actions to work with:; * 1. Simply discard the marker and let the entropy decoder resume at next; * byte of file.; * 2. Read forward until we find another marker, discarding intervening; * data. (In theory we could look ahead within the current bufferload,; * without having to discard data if we don't find the desired marker.; * This idea is not implemented here, in part because it makes behavior; * dependent on buffer size and chance buffer-boundary positions.); * 3. Leave the marker unread (by failing to zero cinfo->unread_marker).; * This will cause the entropy decoder to process an empty data segment,; * inserting dummy zeroes, and then we will reprocess the marker.; *; * #2 is appropriate if we think the desired marker lies ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:725,Integrability,rout,routine,725,"/*; * This is the default resync_to_restart method for data source managers; * to use if they don't have any better approach. Some data source managers; * may be able to back up, or may have additional knowledge about the data; * which permits a more intelligent recovery strategy; such managers would; * presumably supply their own resync method.; *; * read_restart_marker calls resync_to_restart if it finds a marker other than; * the restart marker it was expecting. (This code is *not* used unless; * a nonzero restart interval has been declared.) cinfo->unread_marker is; * the marker code actually found (might be anything, except 0 or FF).; * The desired restart marker number (0..7) is passed as a parameter.; * This routine is supposed to apply whatever error recovery strategy seems; * appropriate in order to position the input stream to the next data segment.; * Note that cinfo->unread_marker is treated as a marker appearing before; * the current data-source input point; usually it should be reset to zero; * before returning.; * Returns FALSE if suspension is required.; *; * This implementation is substantially constrained by wanting to treat the; * input as a data stream; this means we can't back up. Therefore, we have; * only the following actions to work with:; * 1. Simply discard the marker and let the entropy decoder resume at next; * byte of file.; * 2. Read forward until we find another marker, discarding intervening; * data. (In theory we could look ahead within the current bufferload,; * without having to discard data if we don't find the desired marker.; * This idea is not implemented here, in part because it makes behavior; * dependent on buffer size and chance buffer-boundary positions.); * 3. Leave the marker unread (by failing to zero cinfo->unread_marker).; * This will cause the entropy decoder to process an empty data segment,; * inserting dummy zeroes, and then we will reprocess the marker.; *; * #2 is appropriate if we think the desired marker lies ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:1665,Integrability,depend,dependent,1665,"red restart marker number (0..7) is passed as a parameter.; * This routine is supposed to apply whatever error recovery strategy seems; * appropriate in order to position the input stream to the next data segment.; * Note that cinfo->unread_marker is treated as a marker appearing before; * the current data-source input point; usually it should be reset to zero; * before returning.; * Returns FALSE if suspension is required.; *; * This implementation is substantially constrained by wanting to treat the; * input as a data stream; this means we can't back up. Therefore, we have; * only the following actions to work with:; * 1. Simply discard the marker and let the entropy decoder resume at next; * byte of file.; * 2. Read forward until we find another marker, discarding intervening; * data. (In theory we could look ahead within the current bufferload,; * without having to discard data if we don't find the desired marker.; * This idea is not implemented here, in part because it makes behavior; * dependent on buffer size and chance buffer-boundary positions.); * 3. Leave the marker unread (by failing to zero cinfo->unread_marker).; * This will cause the entropy decoder to process an empty data segment,; * inserting dummy zeroes, and then we will reprocess the marker.; *; * #2 is appropriate if we think the desired marker lies ahead, while #3 is; * appropriate if the found marker is a future restart marker (indicating; * that we have missed the desired restart marker, probably because it got; * corrupted).; * We apply #2 or #3 if the found marker is a restart marker no more than; * two counts behind or ahead of the expected one. We also apply #2 if the; * found marker is not a legal JPEG marker code (it's certainly bogus data).; * If the found marker is a restart marker more than 2 counts away, we do #1; * (too much risk that the marker is erroneous; with luck we will be able to; * resync at some future point).; * For any valid non-restart JPEG marker, we apply #3. This k",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:263,Safety,recover,recovery,263,"/*; * This is the default resync_to_restart method for data source managers; * to use if they don't have any better approach. Some data source managers; * may be able to back up, or may have additional knowledge about the data; * which permits a more intelligent recovery strategy; such managers would; * presumably supply their own resync method.; *; * read_restart_marker calls resync_to_restart if it finds a marker other than; * the restart marker it was expecting. (This code is *not* used unless; * a nonzero restart interval has been declared.) cinfo->unread_marker is; * the marker code actually found (might be anything, except 0 or FF).; * The desired restart marker number (0..7) is passed as a parameter.; * This routine is supposed to apply whatever error recovery strategy seems; * appropriate in order to position the input stream to the next data segment.; * Note that cinfo->unread_marker is treated as a marker appearing before; * the current data-source input point; usually it should be reset to zero; * before returning.; * Returns FALSE if suspension is required.; *; * This implementation is substantially constrained by wanting to treat the; * input as a data stream; this means we can't back up. Therefore, we have; * only the following actions to work with:; * 1. Simply discard the marker and let the entropy decoder resume at next; * byte of file.; * 2. Read forward until we find another marker, discarding intervening; * data. (In theory we could look ahead within the current bufferload,; * without having to discard data if we don't find the desired marker.; * This idea is not implemented here, in part because it makes behavior; * dependent on buffer size and chance buffer-boundary positions.); * 3. Leave the marker unread (by failing to zero cinfo->unread_marker).; * This will cause the entropy decoder to process an empty data segment,; * inserting dummy zeroes, and then we will reprocess the marker.; *; * #2 is appropriate if we think the desired marker lies ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:769,Safety,recover,recovery,769,"/*; * This is the default resync_to_restart method for data source managers; * to use if they don't have any better approach. Some data source managers; * may be able to back up, or may have additional knowledge about the data; * which permits a more intelligent recovery strategy; such managers would; * presumably supply their own resync method.; *; * read_restart_marker calls resync_to_restart if it finds a marker other than; * the restart marker it was expecting. (This code is *not* used unless; * a nonzero restart interval has been declared.) cinfo->unread_marker is; * the marker code actually found (might be anything, except 0 or FF).; * The desired restart marker number (0..7) is passed as a parameter.; * This routine is supposed to apply whatever error recovery strategy seems; * appropriate in order to position the input stream to the next data segment.; * Note that cinfo->unread_marker is treated as a marker appearing before; * the current data-source input point; usually it should be reset to zero; * before returning.; * Returns FALSE if suspension is required.; *; * This implementation is substantially constrained by wanting to treat the; * input as a data stream; this means we can't back up. Therefore, we have; * only the following actions to work with:; * 1. Simply discard the marker and let the entropy decoder resume at next; * byte of file.; * 2. Read forward until we find another marker, discarding intervening; * data. (In theory we could look ahead within the current bufferload,; * without having to discard data if we don't find the desired marker.; * This idea is not implemented here, in part because it makes behavior; * dependent on buffer size and chance buffer-boundary positions.); * 3. Leave the marker unread (by failing to zero cinfo->unread_marker).; * This will cause the entropy decoder to process an empty data segment,; * inserting dummy zeroes, and then we will reprocess the marker.; *; * #2 is appropriate if we think the desired marker lies ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:2500,Safety,risk,risk,2500,"nfo->unread_marker is treated as a marker appearing before; * the current data-source input point; usually it should be reset to zero; * before returning.; * Returns FALSE if suspension is required.; *; * This implementation is substantially constrained by wanting to treat the; * input as a data stream; this means we can't back up. Therefore, we have; * only the following actions to work with:; * 1. Simply discard the marker and let the entropy decoder resume at next; * byte of file.; * 2. Read forward until we find another marker, discarding intervening; * data. (In theory we could look ahead within the current bufferload,; * without having to discard data if we don't find the desired marker.; * This idea is not implemented here, in part because it makes behavior; * dependent on buffer size and chance buffer-boundary positions.); * 3. Leave the marker unread (by failing to zero cinfo->unread_marker).; * This will cause the entropy decoder to process an empty data segment,; * inserting dummy zeroes, and then we will reprocess the marker.; *; * #2 is appropriate if we think the desired marker lies ahead, while #3 is; * appropriate if the found marker is a future restart marker (indicating; * that we have missed the desired restart marker, probably because it got; * corrupted).; * We apply #2 or #3 if the found marker is a restart marker no more than; * two counts behind or ahead of the expected one. We also apply #2 if the; * found marker is not a legal JPEG marker code (it's certainly bogus data).; * If the found marker is a restart marker more than 2 counts away, we do #1; * (too much risk that the marker is erroneous; with luck we will be able to; * resync at some future point).; * For any valid non-restart JPEG marker, we apply #3. This keeps us from; * overrunning the end of a scan. An implementation limited to single-scan; * files might find it better to apply #2 for markers other than EOI, since; * any other marker would have to be bogus data in that case.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:1290,Usability,Simpl,Simply,1290," resync method.; *; * read_restart_marker calls resync_to_restart if it finds a marker other than; * the restart marker it was expecting. (This code is *not* used unless; * a nonzero restart interval has been declared.) cinfo->unread_marker is; * the marker code actually found (might be anything, except 0 or FF).; * The desired restart marker number (0..7) is passed as a parameter.; * This routine is supposed to apply whatever error recovery strategy seems; * appropriate in order to position the input stream to the next data segment.; * Note that cinfo->unread_marker is treated as a marker appearing before; * the current data-source input point; usually it should be reset to zero; * before returning.; * Returns FALSE if suspension is required.; *; * This implementation is substantially constrained by wanting to treat the; * input as a data stream; this means we can't back up. Therefore, we have; * only the following actions to work with:; * 1. Simply discard the marker and let the entropy decoder resume at next; * byte of file.; * 2. Read forward until we find another marker, discarding intervening; * data. (In theory we could look ahead within the current bufferload,; * without having to discard data if we don't find the desired marker.; * This idea is not implemented here, in part because it makes behavior; * dependent on buffer size and chance buffer-boundary positions.); * 3. Leave the marker unread (by failing to zero cinfo->unread_marker).; * This will cause the entropy decoder to process an empty data segment,; * inserting dummy zeroes, and then we will reprocess the marker.; *; * #2 is appropriate if we think the desired marker lies ahead, while #3 is; * appropriate if the found marker is a future restart marker (indicating; * that we have missed the desired restart marker, probably because it got; * corrupted).; * We apply #2 or #3 if the found marker is a restart marker no more than; * two counts behind or ahead of the expected one. We also apply #2 if the",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:1344,Usability,resume,resume,1344," resync method.; *; * read_restart_marker calls resync_to_restart if it finds a marker other than; * the restart marker it was expecting. (This code is *not* used unless; * a nonzero restart interval has been declared.) cinfo->unread_marker is; * the marker code actually found (might be anything, except 0 or FF).; * The desired restart marker number (0..7) is passed as a parameter.; * This routine is supposed to apply whatever error recovery strategy seems; * appropriate in order to position the input stream to the next data segment.; * Note that cinfo->unread_marker is treated as a marker appearing before; * the current data-source input point; usually it should be reset to zero; * before returning.; * Returns FALSE if suspension is required.; *; * This implementation is substantially constrained by wanting to treat the; * input as a data stream; this means we can't back up. Therefore, we have; * only the following actions to work with:; * 1. Simply discard the marker and let the entropy decoder resume at next; * byte of file.; * 2. Read forward until we find another marker, discarding intervening; * data. (In theory we could look ahead within the current bufferload,; * without having to discard data if we don't find the desired marker.; * This idea is not implemented here, in part because it makes behavior; * dependent on buffer size and chance buffer-boundary positions.); * 3. Leave the marker unread (by failing to zero cinfo->unread_marker).; * This will cause the entropy decoder to process an empty data segment,; * inserting dummy zeroes, and then we will reprocess the marker.; *; * #2 is appropriate if we think the desired marker lies ahead, while #3 is; * appropriate if the found marker is a future restart marker (indicating; * that we have missed the desired restart marker, probably because it got; * corrupted).; * We apply #2 or #3 if the found marker is a restart marker no more than; * two counts behind or ahead of the expected one. We also apply #2 if the",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:42,Usability,resume,resume,42,/* Discard marker and let entropy decoder resume processing. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:9,Energy Efficiency,allocate,allocated,9,/* until allocated by get_sof */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:101,Usability,simpl,simply,101,"/* Initialize COM/APPn processing.; * By default, we examine and then discard APP0 and APP14,; * but simply discard COM and all other APPn.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:51,Energy Efficiency,allocate,allocate,51,/* Length limit mustn't be larger than what we can allocate; * (should only be a concern in a 16-bit environment).; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:20,Integrability,rout,routine,20,/* Choose processor routine to use.; * APP0/APP14 have special requirements.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:36,Deployability,Install,Install,36,/* SAVE_MARKERS_SUPPORTED */; /*; * Install a special processing method for COM or APPn markers.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:329,Integrability,rout,routines,329,"/*; * jdmaster.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains master control logic for the JPEG decompressor.; * These routines are concerned with selecting the modules to be executed; * and with determining the number of passes and the work to be done in each; * pass.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:287,Testability,log,logic,287,"/*; * jdmaster.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains master control logic for the JPEG decompressor.; * These routines are concerned with selecting the modules to be executed; * and with determining the number of passes and the work to be done in each; * pass.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:89,Usability,Guid,Guido,89,"/*; * jdmaster.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains master control logic for the JPEG decompressor.; * These routines are concerned with selecting the modules to be executed; * and with determining the number of passes and the work to be done in each; * pass.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:20,Testability,test,test,20,"/* ??? also need to test for upsample-time rescaling, when & if supported */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:223,Energy Efficiency,adapt,adapts,223,"/* In selecting the actual DCT scaling for each component, we try to; * scale up the chroma components via IDCT scaling rather than upsampling.; * This saves time if the upsampler gets to use 1:1 scaling.; * Note this code adapts subsampling ratios which are powers of 2.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:259,Energy Efficiency,power,powers,259,"/* In selecting the actual DCT scaling for each component, we try to; * scale up the chroma components via IDCT scaling rather than upsampling.; * This saves time if the upsampler gets to use 1:1 scaling.; * Note this code adapts subsampling ratios which are powers of 2.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:223,Modifiability,adapt,adapts,223,"/* In selecting the actual DCT scaling for each component, we try to; * scale up the chroma components via IDCT scaling rather than upsampling.; * This saves time if the upsampler gets to use 1:1 scaling.; * Note this code adapts subsampling ratios which are powers of 2.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:13,Availability,down,downsampled,13,/* Recompute downsampled dimensions of components;; * application needs to know these if using raw downsampled data.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:99,Availability,down,downsampled,99,/* Recompute downsampled dimensions of components;; * application needs to know these if using raw downsampled data.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:202,Availability,error,error,202,"/*; * Several decompression processes need to range-limit values to the range; * 0..MAXJSAMPLE; the input value may fall somewhat outside this range; * due to noise introduced by quantization, roundoff error, etc. These; * processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:1104,Availability,MASK,MASK,1104,"range; * 0..MAXJSAMPLE; the input value may fall somewhat outside this range; * due to noise introduced by quantization, roundoff error, etc. These; * processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler range limiting table. The post-IDCT table begins at; * sample_range_lim",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:1120,Availability,MASK,MASK,1120,"range; * 0..MAXJSAMPLE; the input value may fall somewhat outside this range; * due to noise introduced by quantization, roundoff error, etc. These; * processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler range limiting table. The post-IDCT table begins at; * sample_range_lim",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:1325,Availability,mask,mask,1325,"* processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler range limiting table. The post-IDCT table begins at; * sample_range_limit + CENTERJSAMPLE.; *; * Note that the table is allocated in near data space on PCs; it's small; * enough and used often enough to justify this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:1895,Availability,mask,masking,1895,"* processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler range limiting table. The post-IDCT table begins at; * sample_range_limit + CENTERJSAMPLE.; *; * Note that the table is allocated in near data space on PCs; it's small; * enough and used often enough to justify this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:329,Deployability,pipeline,pipelines,329,"/*; * Several decompression processes need to range-limit values to the range; * 0..MAXJSAMPLE; the input value may fall somewhat outside this range; * due to noise introduced by quantization, roundoff error, etc. These; * processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:2121,Energy Efficiency,allocate,allocated,2121,"* processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler range limiting table. The post-IDCT table begins at; * sample_range_limit + CENTERJSAMPLE.; *; * Note that the table is allocated in near data space on PCs; it's small; * enough and used often enough to justify this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:596,Integrability,rout,routine,596,"/*; * Several decompression processes need to range-limit values to the range; * 0..MAXJSAMPLE; the input value may fall somewhat outside this range; * due to noise introduced by quantization, roundoff error, etc. These; * processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:1344,Integrability,wrap,wraparound,1344,"* processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler range limiting table. The post-IDCT table begins at; * sample_range_limit + CENTERJSAMPLE.; *; * Note that the table is allocated in near data space on PCs; it's small; * enough and used often enough to justify this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:1040,Performance,perform,perform,1040,"range; * 0..MAXJSAMPLE; the input value may fall somewhat outside this range; * due to noise introduced by quantization, roundoff error, etc. These; * processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler range limiting table. The post-IDCT table begins at; * sample_range_lim",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:951,Safety,avoid,avoid,951,"range; * 0..MAXJSAMPLE; the input value may fall somewhat outside this range; * due to noise introduced by quantization, roundoff error, etc. These; * processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler range limiting table. The post-IDCT table begins at; * sample_range_lim",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:1368,Safety,safe,safely,1368,"* processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler range limiting table. The post-IDCT table begins at; * sample_range_limit + CENTERJSAMPLE.; *; * Note that the table is allocated in near data space on PCs; it's small; * enough and used often enough to justify this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:465,Testability,test,tests,465,"/*; * Several decompression processes need to range-limit values to the range; * 0..MAXJSAMPLE; the input value may fall somewhat outside this range; * due to noise introduced by quantization, roundoff error, etc. These; * processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:1993,Usability,simpl,simpler,1993,"* processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler range limiting table. The post-IDCT table begins at; * sample_range_limit + CENTERJSAMPLE.; *; * Note that the table is allocated in near data space on PCs; it's small; * enough and used often enough to justify this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate and fill in the sample_range_limit table */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:32,Usability,simpl,simple,32,/* allow negative subscripts of simple table */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:21,Usability,simpl,simple,21,"/* First segment of ""simple"" table: limit[x] = 0 for x < 0 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:17,Usability,simpl,simple,17,"/* Main part of ""simple"" table: limit[x] = x */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:55,Usability,simpl,simple,55,"/* Point to where post-IDCT table starts */; /* End of simple table, rest of first half of post-IDCT table */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:41,Energy Efficiency,allocate,allocate,41,/* We can now tell the memory manager to allocate virtual arrays. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:77,Energy Efficiency,monitor,monitoring,77,"/* If jpeg_start_decompress will read the whole file, initialize; * progress monitoring appropriately. The input step is counted; * as one pass.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:19,Energy Efficiency,monitor,monitor,19,/* Set up progress monitor's pass info if present */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:119,Performance,perform,performed,119,/* D_MULTISCAN_FILES_SUPPORTED */; /*; * Initialize master decompression control and select active modules.; * This is performed at the start of jpeg_start_decompress.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c:452,Usability,simpl,simple,452,"/*; * jdmerge.c; *; * Copyright (C) 1994-1996, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains code for merged upsampling/color conversion.; *; * This file combines functions from jdsample.c and jdcolor.c;; * read those files first to understand what's going on.; *; * When the chroma components are to be upsampled by simple replication; * (ie, box filtering), we can save some work in color conversion by; * calculating all the output pixels corresponding to a pair of chroma; * samples at one time. In the conversion equations; *	R = Y + K1 * Cr; *	G = Y + K2 * Cb + K3 * Cr; *	B = Y + K4 * Cb; * only the Y term varies among the group of pixels corresponding to a pair; * of chroma samples, so the rest of the terms can be calculated just once.; * At typical sampling ratios, this eliminates half or three-quarters of the; * multiplications needed for color conversion.; *; * This file currently provides implementations for the following cases:; *	YCbCr => RGB color conversion only.; *	Sampling ratios of 2h1v or 2h2v.; *	No scaling needed at upsample time.; *	Corner-aligned (non-CCIR601) sampling alignment.; * Other special cases could be added, but in most applications these are; * the only common cases. (For uncommon cases we fall back on the more; * general code in jdsample.c and jdcolor.c.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c:35,Integrability,rout,routine,35,/* public fields */; /* Pointer to routine to do actual upsampling/conversion of one row group */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c:39,Safety,detect,detecting,39,/* Initialize total-height counter for detecting bottom of image */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c:14,Integrability,rout,routine,14,/*; * Control routine to do upsampling (and color conversion).; *; * The control routine just handles the row buffering considerations.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c:81,Integrability,rout,routine,81,/*; * Control routine to do upsampling (and color conversion).; *; * The control routine just handles the row buffering considerations.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c:20,Integrability,rout,routines,20,"/*; * These are the routines invoked by the control routines to do; * the actual upsampling/conversion. One row group is processed per call.; *; * Note: since we may be writing directly into application-supplied buffers,; * we have to be honest about the output width; we can't assume the buffer; * has been rounded up to an even width.; */; /*; * Upsample and color convert for the case of 2:1 horizontal and 1:1 vertical.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c:52,Integrability,rout,routines,52,"/*; * These are the routines invoked by the control routines to do; * the actual upsampling/conversion. One row group is processed per call.; *; * Note: since we may be writing directly into application-supplied buffers,; * we have to be honest about the output width; we can't assume the buffer; * has been rounded up to an even width.; */; /*; * Upsample and color convert for the case of 2:1 horizontal and 1:1 vertical.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c:28,Integrability,rout,routine,28,/*; * Module initialization routine for merged upsampling/color conversion.; *; * NB: this is called under the conditions determined by use_merged_upsample(); * in jdmaster.c. That routine MUST correspond to the actual capabilities; * of this module; no safety checks are made here.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c:181,Integrability,rout,routine,181,/*; * Module initialization routine for merged upsampling/color conversion.; *; * NB: this is called under the conditions determined by use_merged_upsample(); * in jdmaster.c. That routine MUST correspond to the actual capabilities; * of this module; no safety checks are made here.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c:254,Safety,safe,safety,254,/*; * Module initialization routine for merged upsampling/color conversion.; *; * NB: this is called under the conditions determined by use_merged_upsample(); * in jdmaster.c. That routine MUST correspond to the actual capabilities; * of this module; no safety checks are made here.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate a spare row buffer */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmerge.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c:649,Deployability,integrat,integrated,649,"/*; * jdpostct.c; *; * Copyright (C) 1994-1996, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the decompression postprocessing controller.; * This controller manages the upsampling, color conversion, and color; * quantization/reduction steps; specifically, it controls the buffering; * between upsample/color conversion and color quantization/reduction.; *; * If no color quantization/reduction is required, then this module has no; * work to do, and it just hands off to the upsample/color conversion code.; * An integrated upsample/convert/quantize process would replace this module; * entirely.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c:649,Integrability,integrat,integrated,649,"/*; * jdpostct.c; *; * Copyright (C) 1994-1996, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the decompression postprocessing controller.; * This controller manages the upsampling, color conversion, and color; * quantization/reduction steps; specifically, it controls the buffering; * between upsample/color conversion and color quantization/reduction.; *; * If no color quantization/reduction is required, then this module has no; * work to do, and it just hands off to the upsample/color conversion code.; * An integrated upsample/convert/quantize process would replace this module; * entirely.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c:140,Energy Efficiency,allocate,allocate,140,"/* We could be doing buffered-image output before starting a 2-pass; * color quantization; in that case, jinit_d_post_controller did not; * allocate a strip buffer. Use the virtual-array buffer as workspace.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c:110,Safety,detect,detect,110,"/* Fill the buffer, but not more than what we can dump out in one go. */; /* Note we rely on the upsampler to detect bottom of image. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c:3,Availability,avail,available,3,/* available in strip */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c:3,Availability,avail,available,3,/* available in output area */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c:48,Integrability,depend,depend,48,"/* We have to check bottom of image here, can't depend on upsampler. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c:74,Energy Efficiency,efficient,efficient,74,"/* The buffer strip height is max_v_samp_factor, which is typically; * an efficient number of rows for upsampling to return.; * (In the presence of output rescaling, we might want to be smarter?); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdpostct.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:283,Integrability,rout,routines,283,"/*; * jdsample.c; *; * Copyright (C) 1991-1996, Thomas G. Lane.; * Modified 2002-2008 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains upsampling routines.; *; * Upsampling input data is counted in ""row groups"". A row group; * is defined to be (v_samp_factor * DCT_v_scaled_size / min_DCT_v_scaled_size); * sample rows of each component. Upsampling will normally produce; * max_v_samp_factor pixel rows from each row group (but this could vary; * if the upsampler is applying a scale factor of its own).; *; * An excellent reference for image resampling is; * Digital Image Warping, George Wolberg, 1990.; * Pub. by IEEE Computer Society Press, Los Alamitos, CA. ISBN 0-8186-8944-7.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:89,Usability,Guid,Guido,89,"/*; * jdsample.c; *; * Copyright (C) 1991-1996, Thomas G. Lane.; * Modified 2002-2008 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains upsampling routines.; *; * Upsampling input data is counted in ""row groups"". A row group; * is defined to be (v_samp_factor * DCT_v_scaled_size / min_DCT_v_scaled_size); * sample rows of each component. Upsampling will normally produce; * max_v_samp_factor pixel rows from each row group (but this could vary; * if the upsampler is applying a scale factor of its own).; *; * An excellent reference for image resampling is; * Digital Image Warping, George Wolberg, 1990.; * Pub. by IEEE Computer Society Press, Los Alamitos, CA. ISBN 0-8186-8944-7.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:14,Integrability,rout,routine,14,/* Pointer to routine to upsample a single component */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:221,Energy Efficiency,allocate,allocate,221,"/* public fields */; /* Color conversion buffer. When using separate upsampling and color; * conversion steps, this buffer holds one upsampled row group until it; * has been color converted and output.; * Note: we do not allocate any storage for component(s) which are full-size,; * ie do not need rescaling. The corresponding entry of color_buf[] is; * simply set to point to the input data array, thereby avoiding copying.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:407,Safety,avoid,avoiding,407,"/* public fields */; /* Color conversion buffer. When using separate upsampling and color; * conversion steps, this buffer holds one upsampled row group until it; * has been color converted and output.; * Note: we do not allocate any storage for component(s) which are full-size,; * ie do not need rescaling. The corresponding entry of color_buf[] is; * simply set to point to the input data array, thereby avoiding copying.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:354,Usability,simpl,simply,354,"/* public fields */; /* Color conversion buffer. When using separate upsampling and color; * conversion steps, this buffer holds one upsampled row group until it; * has been color converted and output.; * Note: we do not allocate any storage for component(s) which are full-size,; * ie do not need rescaling. The corresponding entry of color_buf[] is; * simply set to point to the input data array, thereby avoiding copying.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:39,Safety,detect,detecting,39,/* Initialize total-height counter for detecting bottom of image */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:14,Integrability,rout,routine,14,"/*; * Control routine to do upsampling (and color conversion).; *; * In this version we upsample each component independently.; * We upsample one row group into the conversion buffer, then apply; * color conversion a row at a time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:65,Testability,test,test,65,/* Not more than the distance to the end of the image. Need this test; * in case the image height is not a multiple of max_v_samp_factor:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:20,Integrability,rout,routines,20,"/*; * These are the routines invoked by sep_upsample to upsample pixel values; * of a single component. One row group is processed per call.; */; /*; * For full-size components, we just make color_buf[ci] point at the; * input buffer, and thus avoid copying any data. Note that this is; * safe only because sep_upsample doesn't declare the input row group; * ""consumed"" until we are done color converting and emitting it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:244,Safety,avoid,avoid,244,"/*; * These are the routines invoked by sep_upsample to upsample pixel values; * of a single component. One row group is processed per call.; */; /*; * For full-size components, we just make color_buf[ci] point at the; * input buffer, and thus avoid copying any data. Note that this is; * safe only because sep_upsample doesn't declare the input row group; * ""consumed"" until we are done color converting and emitting it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:289,Safety,safe,safe,289,"/*; * These are the routines invoked by sep_upsample to upsample pixel values; * of a single component. One row group is processed per call.; */; /*; * For full-size components, we just make color_buf[ci] point at the; * input buffer, and thus avoid copying any data. Note that this is; * safe only because sep_upsample doesn't declare the input row group; * ""consumed"" until we are done color converting and emitting it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:3,Safety,safe,safety,3,/* safety check */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:199,Usability,simpl,simple,199,"/*; * This version handles any integral sampling ratios.; * This is not used for typical JPEG files, so it need not be fast.; * Nor, for that matter, is it particularly accurate: the algorithm is; * simple replication of the input pixel onto the corresponding output; * pixels. The hi-falutin sampling literature refers to this as a; * ""box filter"". A box filter tends to introduce visible artifacts,; * so if you are actually going to use 3:1 or 4:1 sampling ratios; * you would be well advised to improve this code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:28,Integrability,rout,routine,28,/*; * Module initialization routine for upsampling.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c:279,Integrability,rout,routines,279,"/*; * jdtrans.c; *; * Copyright (C) 1995-1997, Thomas G. Lane.; * Modified 2000-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains library routines for transcoding decompression,; * that is, reading raw DCT coefficient arrays from an input JPEG file.; * The routines in jdapimin.c will also be needed by a transcoder.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c:398,Integrability,rout,routines,398,"/*; * jdtrans.c; *; * Copyright (C) 1995-1997, Thomas G. Lane.; * Modified 2000-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains library routines for transcoding decompression,; * that is, reading raw DCT coefficient arrays from an input JPEG file.; * The routines in jdapimin.c will also be needed by a transcoder.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c:88,Usability,Guid,Guido,88,"/*; * jdtrans.c; *; * Copyright (C) 1995-1997, Thomas G. Lane.; * Modified 2000-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains library routines for transcoding decompression,; * that is, reading raw DCT coefficient arrays from an input JPEG file.; * The routines in jdapimin.c will also be needed by a transcoder.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c:404,Deployability,release,release,404,"/*; * Read the coefficient arrays from a JPEG file.; * jpeg_read_header must be completed before calling this.; *; * The entire image is read into a set of virtual coefficient-block arrays,; * one per component. The return value is a pointer to the array of; * virtual-array descriptors. These can be manipulated directly via the; * JPEG memory manager, or handed off to jpeg_write_coefficients().; * To release the memory occupied by the virtual arrays, call; * jpeg_finish_decompress() when done with the data.; *; * An alternative usage is to simply obtain access to the coefficient arrays; * during a buffered-image-mode decompression operation. This is allowed; * after any jpeg_finish_output() call. The arrays can be accessed until; * jpeg_finish_decompress() is called. (Note that any call to the library; * may reposition the arrays, so don't rely on access_virt_barray() results; * to stay valid across library calls.); *; * Returns NULL if suspended. This case need be checked only if; * a suspending data source is used.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c:560,Security,access,access,560,"/*; * Read the coefficient arrays from a JPEG file.; * jpeg_read_header must be completed before calling this.; *; * The entire image is read into a set of virtual coefficient-block arrays,; * one per component. The return value is a pointer to the array of; * virtual-array descriptors. These can be manipulated directly via the; * JPEG memory manager, or handed off to jpeg_write_coefficients().; * To release the memory occupied by the virtual arrays, call; * jpeg_finish_decompress() when done with the data.; *; * An alternative usage is to simply obtain access to the coefficient arrays; * during a buffered-image-mode decompression operation. This is allowed; * after any jpeg_finish_output() call. The arrays can be accessed until; * jpeg_finish_decompress() is called. (Note that any call to the library; * may reposition the arrays, so don't rely on access_virt_barray() results; * to stay valid across library calls.); *; * Returns NULL if suspended. This case need be checked only if; * a suspending data source is used.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c:724,Security,access,accessed,724,"/*; * Read the coefficient arrays from a JPEG file.; * jpeg_read_header must be completed before calling this.; *; * The entire image is read into a set of virtual coefficient-block arrays,; * one per component. The return value is a pointer to the array of; * virtual-array descriptors. These can be manipulated directly via the; * JPEG memory manager, or handed off to jpeg_write_coefficients().; * To release the memory occupied by the virtual arrays, call; * jpeg_finish_decompress() when done with the data.; *; * An alternative usage is to simply obtain access to the coefficient arrays; * during a buffered-image-mode decompression operation. This is allowed; * after any jpeg_finish_output() call. The arrays can be accessed until; * jpeg_finish_decompress() is called. (Note that any call to the library; * may reposition the arrays, so don't rely on access_virt_barray() results; * to stay valid across library calls.); *; * Returns NULL if suspended. This case need be checked only if; * a suspending data source is used.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c:546,Usability,simpl,simply,546,"/*; * Read the coefficient arrays from a JPEG file.; * jpeg_read_header must be completed before calling this.; *; * The entire image is read into a set of virtual coefficient-block arrays,; * one per component. The return value is a pointer to the array of; * virtual-array descriptors. These can be manipulated directly via the; * JPEG memory manager, or handed off to jpeg_write_coefficients().; * To release the memory occupied by the virtual arrays, call; * jpeg_finish_decompress() when done with the data.; *; * An alternative usage is to simply obtain access to the coefficient arrays; * during a buffered-image-mode decompression operation. This is allowed; * after any jpeg_finish_output() call. The arrays can be accessed until; * jpeg_finish_decompress() is called. (Note that any call to the library; * may reposition the arrays, so don't rely on access_virt_barray() results; * to stay valid across library calls.); *; * Returns NULL if suspended. This case need be checked only if; * a suspending data source is used.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c:17,Energy Efficiency,monitor,monitor,17,/* Call progress monitor hook if present */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c:136,Security,access,access,136,"/* At this point we should be in state DSTATE_STOPPING if being used; * standalone, or in state DSTATE_BUFIMAGE if being invoked to get access; * to the coefficients during a full buffered-image-mode decompression.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c:41,Energy Efficiency,allocate,allocate,41,/* We can now tell the memory manager to allocate virtual arrays. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c:23,Energy Efficiency,monitor,monitoring,23,/* Initialize progress monitoring. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:234,Availability,error,error-reporting,234,"/*; * jerror.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains simple error-reporting and trace-message routines.; * These are suitable for Unix-like systems and others where writing to; * stderr is the right thing to do. Many applications will want to replace; * some or all of these routines.; *; * If you define USE_WINDOWS_MESSAGEBOX in jconfig.h or in the makefile,; * you get a Windows-specific hack to display error messages in a dialog box.; * It ain't much, but it beats dropping error messages into the bit bucket,; * which is what happens to output to stderr under most Windows C compilers.; *; * These routines are used by both the compression and decompression code.; */; /* this is not a core library module, so it doesn't define JPEG_INTERNALS */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:581,Availability,error,error,581,"/*; * jerror.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains simple error-reporting and trace-message routines.; * These are suitable for Unix-like systems and others where writing to; * stderr is the right thing to do. Many applications will want to replace; * some or all of these routines.; *; * If you define USE_WINDOWS_MESSAGEBOX in jconfig.h or in the makefile,; * you get a Windows-specific hack to display error messages in a dialog box.; * It ain't much, but it beats dropping error messages into the bit bucket,; * which is what happens to output to stderr under most Windows C compilers.; *; * These routines are used by both the compression and decompression code.; */; /* this is not a core library module, so it doesn't define JPEG_INTERNALS */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:653,Availability,error,error,653,"/*; * jerror.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains simple error-reporting and trace-message routines.; * These are suitable for Unix-like systems and others where writing to; * stderr is the right thing to do. Many applications will want to replace; * some or all of these routines.; *; * If you define USE_WINDOWS_MESSAGEBOX in jconfig.h or in the makefile,; * you get a Windows-specific hack to display error messages in a dialog box.; * It ain't much, but it beats dropping error messages into the bit bucket,; * which is what happens to output to stderr under most Windows C compilers.; *; * These routines are used by both the compression and decompression code.; */; /* this is not a core library module, so it doesn't define JPEG_INTERNALS */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:260,Integrability,message,message,260,"/*; * jerror.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains simple error-reporting and trace-message routines.; * These are suitable for Unix-like systems and others where writing to; * stderr is the right thing to do. Many applications will want to replace; * some or all of these routines.; *; * If you define USE_WINDOWS_MESSAGEBOX in jconfig.h or in the makefile,; * you get a Windows-specific hack to display error messages in a dialog box.; * It ain't much, but it beats dropping error messages into the bit bucket,; * which is what happens to output to stderr under most Windows C compilers.; *; * These routines are used by both the compression and decompression code.; */; /* this is not a core library module, so it doesn't define JPEG_INTERNALS */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:268,Integrability,rout,routines,268,"/*; * jerror.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains simple error-reporting and trace-message routines.; * These are suitable for Unix-like systems and others where writing to; * stderr is the right thing to do. Many applications will want to replace; * some or all of these routines.; *; * If you define USE_WINDOWS_MESSAGEBOX in jconfig.h or in the makefile,; * you get a Windows-specific hack to display error messages in a dialog box.; * It ain't much, but it beats dropping error messages into the bit bucket,; * which is what happens to output to stderr under most Windows C compilers.; *; * These routines are used by both the compression and decompression code.; */; /* this is not a core library module, so it doesn't define JPEG_INTERNALS */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:449,Integrability,rout,routines,449,"/*; * jerror.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains simple error-reporting and trace-message routines.; * These are suitable for Unix-like systems and others where writing to; * stderr is the right thing to do. Many applications will want to replace; * some or all of these routines.; *; * If you define USE_WINDOWS_MESSAGEBOX in jconfig.h or in the makefile,; * you get a Windows-specific hack to display error messages in a dialog box.; * It ain't much, but it beats dropping error messages into the bit bucket,; * which is what happens to output to stderr under most Windows C compilers.; *; * These routines are used by both the compression and decompression code.; */; /* this is not a core library module, so it doesn't define JPEG_INTERNALS */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:587,Integrability,message,messages,587,"/*; * jerror.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains simple error-reporting and trace-message routines.; * These are suitable for Unix-like systems and others where writing to; * stderr is the right thing to do. Many applications will want to replace; * some or all of these routines.; *; * If you define USE_WINDOWS_MESSAGEBOX in jconfig.h or in the makefile,; * you get a Windows-specific hack to display error messages in a dialog box.; * It ain't much, but it beats dropping error messages into the bit bucket,; * which is what happens to output to stderr under most Windows C compilers.; *; * These routines are used by both the compression and decompression code.; */; /* this is not a core library module, so it doesn't define JPEG_INTERNALS */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:659,Integrability,message,messages,659,"/*; * jerror.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains simple error-reporting and trace-message routines.; * These are suitable for Unix-like systems and others where writing to; * stderr is the right thing to do. Many applications will want to replace; * some or all of these routines.; *; * If you define USE_WINDOWS_MESSAGEBOX in jconfig.h or in the makefile,; * you get a Windows-specific hack to display error messages in a dialog box.; * It ain't much, but it beats dropping error messages into the bit bucket,; * which is what happens to output to stderr under most Windows C compilers.; *; * These routines are used by both the compression and decompression code.; */; /* this is not a core library module, so it doesn't define JPEG_INTERNALS */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:778,Integrability,rout,routines,778,"/*; * jerror.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains simple error-reporting and trace-message routines.; * These are suitable for Unix-like systems and others where writing to; * stderr is the right thing to do. Many applications will want to replace; * some or all of these routines.; *; * If you define USE_WINDOWS_MESSAGEBOX in jconfig.h or in the makefile,; * you get a Windows-specific hack to display error messages in a dialog box.; * It ain't much, but it beats dropping error messages into the bit bucket,; * which is what happens to output to stderr under most Windows C compilers.; *; * These routines are used by both the compression and decompression code.; */; /* this is not a core library module, so it doesn't define JPEG_INTERNALS */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:227,Usability,simpl,simple,227,"/*; * jerror.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains simple error-reporting and trace-message routines.; * These are suitable for Unix-like systems and others where writing to; * stderr is the right thing to do. Many applications will want to replace; * some or all of these routines.; *; * If you define USE_WINDOWS_MESSAGEBOX in jconfig.h or in the makefile,; * you get a Windows-specific hack to display error messages in a dialog box.; * It ain't much, but it beats dropping error messages into the bit bucket,; * which is what happens to output to stderr under most Windows C compilers.; *; * These routines are used by both the compression and decompression code.; */; /* this is not a core library module, so it doesn't define JPEG_INTERNALS */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:17,Integrability,message,message,17,/*; * Create the message string table.; * We do this from the master message list in jerror.h by re-reading; * jerror.h with a suitable definition for macro JMESSAGE.; * The message table is made an external symbol just in case any applications; * want to refer to it directly.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:69,Integrability,message,message,69,/*; * Create the message string table.; * We do this from the master message list in jerror.h by re-reading; * jerror.h with a suitable definition for macro JMESSAGE.; * The message table is made an external symbol just in case any applications; * want to refer to it directly.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:174,Integrability,message,message,174,/*; * Create the message string table.; * We do this from the master message list in jerror.h by re-reading; * jerror.h with a suitable definition for macro JMESSAGE.; * The message table is made an external symbol just in case any applications; * want to refer to it directly.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:6,Availability,Error,Error,6,"/*; * Error exit handler: must not return to caller.; *; * Applications may override this if they want to get control back after; * an error. Typically one would longjmp somewhere instead of exiting.; * The setjmp buffer can be made a private field within an expanded error; * handler object. Note that the info needed to generate an error message; * is stored in the error object, so you can generate the message now or; * later, at your convenience.; * You should make sure that the JPEG object is cleaned up (with jpeg_abort; * or jpeg_destroy) at some point.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:135,Availability,error,error,135,"/*; * Error exit handler: must not return to caller.; *; * Applications may override this if they want to get control back after; * an error. Typically one would longjmp somewhere instead of exiting.; * The setjmp buffer can be made a private field within an expanded error; * handler object. Note that the info needed to generate an error message; * is stored in the error object, so you can generate the message now or; * later, at your convenience.; * You should make sure that the JPEG object is cleaned up (with jpeg_abort; * or jpeg_destroy) at some point.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:268,Availability,error,error,268,"/*; * Error exit handler: must not return to caller.; *; * Applications may override this if they want to get control back after; * an error. Typically one would longjmp somewhere instead of exiting.; * The setjmp buffer can be made a private field within an expanded error; * handler object. Note that the info needed to generate an error message; * is stored in the error object, so you can generate the message now or; * later, at your convenience.; * You should make sure that the JPEG object is cleaned up (with jpeg_abort; * or jpeg_destroy) at some point.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:334,Availability,error,error,334,"/*; * Error exit handler: must not return to caller.; *; * Applications may override this if they want to get control back after; * an error. Typically one would longjmp somewhere instead of exiting.; * The setjmp buffer can be made a private field within an expanded error; * handler object. Note that the info needed to generate an error message; * is stored in the error object, so you can generate the message now or; * later, at your convenience.; * You should make sure that the JPEG object is cleaned up (with jpeg_abort; * or jpeg_destroy) at some point.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:368,Availability,error,error,368,"/*; * Error exit handler: must not return to caller.; *; * Applications may override this if they want to get control back after; * an error. Typically one would longjmp somewhere instead of exiting.; * The setjmp buffer can be made a private field within an expanded error; * handler object. Note that the info needed to generate an error message; * is stored in the error object, so you can generate the message now or; * later, at your convenience.; * You should make sure that the JPEG object is cleaned up (with jpeg_abort; * or jpeg_destroy) at some point.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:340,Integrability,message,message,340,"/*; * Error exit handler: must not return to caller.; *; * Applications may override this if they want to get control back after; * an error. Typically one would longjmp somewhere instead of exiting.; * The setjmp buffer can be made a private field within an expanded error; * handler object. Note that the info needed to generate an error message; * is stored in the error object, so you can generate the message now or; * later, at your convenience.; * You should make sure that the JPEG object is cleaned up (with jpeg_abort; * or jpeg_destroy) at some point.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:406,Integrability,message,message,406,"/*; * Error exit handler: must not return to caller.; *; * Applications may override this if they want to get control back after; * an error. Typically one would longjmp somewhere instead of exiting.; * The setjmp buffer can be made a private field within an expanded error; * handler object. Note that the info needed to generate an error message; * is stored in the error object, so you can generate the message now or; * later, at your convenience.; * You should make sure that the JPEG object is cleaned up (with jpeg_abort; * or jpeg_destroy) at some point.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:22,Integrability,message,message,22,/* Always display the message */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:26,Availability,error,error,26,"/*; * Actual output of an error or trace message.; * Applications may override this method to send JPEG messages somewhere; * other than stderr.; *; * On Windows, printing to stderr is generally completely useless,; * so we provide optional code to produce an error-dialog popup.; * Most Windows applications will still prefer to override this routine,; * but if they don't, it'll do something at least marginally useful.; *; * NOTE: to use the library in an environment that doesn't support the; * C stdio library, you may have to delete the call to fprintf() entirely,; * not just not use this routine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:260,Availability,error,error-dialog,260,"/*; * Actual output of an error or trace message.; * Applications may override this method to send JPEG messages somewhere; * other than stderr.; *; * On Windows, printing to stderr is generally completely useless,; * so we provide optional code to produce an error-dialog popup.; * Most Windows applications will still prefer to override this routine,; * but if they don't, it'll do something at least marginally useful.; *; * NOTE: to use the library in an environment that doesn't support the; * C stdio library, you may have to delete the call to fprintf() entirely,; * not just not use this routine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:41,Integrability,message,message,41,"/*; * Actual output of an error or trace message.; * Applications may override this method to send JPEG messages somewhere; * other than stderr.; *; * On Windows, printing to stderr is generally completely useless,; * so we provide optional code to produce an error-dialog popup.; * Most Windows applications will still prefer to override this routine,; * but if they don't, it'll do something at least marginally useful.; *; * NOTE: to use the library in an environment that doesn't support the; * C stdio library, you may have to delete the call to fprintf() entirely,; * not just not use this routine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:104,Integrability,message,messages,104,"/*; * Actual output of an error or trace message.; * Applications may override this method to send JPEG messages somewhere; * other than stderr.; *; * On Windows, printing to stderr is generally completely useless,; * so we provide optional code to produce an error-dialog popup.; * Most Windows applications will still prefer to override this routine,; * but if they don't, it'll do something at least marginally useful.; *; * NOTE: to use the library in an environment that doesn't support the; * C stdio library, you may have to delete the call to fprintf() entirely,; * not just not use this routine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:344,Integrability,rout,routine,344,"/*; * Actual output of an error or trace message.; * Applications may override this method to send JPEG messages somewhere; * other than stderr.; *; * On Windows, printing to stderr is generally completely useless,; * so we provide optional code to produce an error-dialog popup.; * Most Windows applications will still prefer to override this routine,; * but if they don't, it'll do something at least marginally useful.; *; * NOTE: to use the library in an environment that doesn't support the; * C stdio library, you may have to delete the call to fprintf() entirely,; * not just not use this routine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:596,Integrability,rout,routine,596,"/*; * Actual output of an error or trace message.; * Applications may override this method to send JPEG messages somewhere; * other than stderr.; *; * On Windows, printing to stderr is generally completely useless,; * so we provide optional code to produce an error-dialog popup.; * Most Windows applications will still prefer to override this routine,; * but if they don't, it'll do something at least marginally useful.; *; * NOTE: to use the library in an environment that doesn't support the; * C stdio library, you may have to delete the call to fprintf() entirely,; * not just not use this routine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:14,Integrability,message,message,14,/* Create the message */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:19,Integrability,message,message,19,/* Display it in a message dialog box */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:88,Availability,recover,recoverable,88,"/*; * Decide whether to emit a trace or warning message.; * msg_level is one of:; * -1: recoverable corrupt-data warning, may want to abort.; * 0: important advisory messages (always display to user).; * 1: first level of tracing detail.; * 2,3,...: successively more detailed tracing messages.; * An application might override this method if it wanted to abort on warnings; * or change the policy about which messages to display.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:48,Integrability,message,message,48,"/*; * Decide whether to emit a trace or warning message.; * msg_level is one of:; * -1: recoverable corrupt-data warning, may want to abort.; * 0: important advisory messages (always display to user).; * 1: first level of tracing detail.; * 2,3,...: successively more detailed tracing messages.; * An application might override this method if it wanted to abort on warnings; * or change the policy about which messages to display.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:166,Integrability,message,messages,166,"/*; * Decide whether to emit a trace or warning message.; * msg_level is one of:; * -1: recoverable corrupt-data warning, may want to abort.; * 0: important advisory messages (always display to user).; * 1: first level of tracing detail.; * 2,3,...: successively more detailed tracing messages.; * An application might override this method if it wanted to abort on warnings; * or change the policy about which messages to display.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:285,Integrability,message,messages,285,"/*; * Decide whether to emit a trace or warning message.; * msg_level is one of:; * -1: recoverable corrupt-data warning, may want to abort.; * 0: important advisory messages (always display to user).; * 1: first level of tracing detail.; * 2,3,...: successively more detailed tracing messages.; * An application might override this method if it wanted to abort on warnings; * or change the policy about which messages to display.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:410,Integrability,message,messages,410,"/*; * Decide whether to emit a trace or warning message.; * msg_level is one of:; * -1: recoverable corrupt-data warning, may want to abort.; * 0: important advisory messages (always display to user).; * 1: first level of tracing detail.; * 2,3,...: successively more detailed tracing messages.; * An application might override this method if it wanted to abort on warnings; * or change the policy about which messages to display.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:88,Safety,recover,recoverable,88,"/*; * Decide whether to emit a trace or warning message.; * msg_level is one of:; * -1: recoverable corrupt-data warning, may want to abort.; * 0: important advisory messages (always display to user).; * 1: first level of tracing detail.; * 2,3,...: successively more detailed tracing messages.; * An application might override this method if it wanted to abort on warnings; * or change the policy about which messages to display.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:134,Safety,abort,abort,134,"/*; * Decide whether to emit a trace or warning message.; * msg_level is one of:; * -1: recoverable corrupt-data warning, may want to abort.; * 0: important advisory messages (always display to user).; * 1: first level of tracing detail.; * 2,3,...: successively more detailed tracing messages.; * An application might override this method if it wanted to abort on warnings; * or change the policy about which messages to display.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:356,Safety,abort,abort,356,"/*; * Decide whether to emit a trace or warning message.; * msg_level is one of:; * -1: recoverable corrupt-data warning, may want to abort.; * 0: important advisory messages (always display to user).; * 1: first level of tracing detail.; * 2,3,...: successively more detailed tracing messages.; * An application might override this method if it wanted to abort on warnings; * or change the policy about which messages to display.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:18,Integrability,message,message,18,"/* It's a warning message. Since corrupt files may generate many warnings,; * the policy implemented here is to show only the first warning,; * unless trace_level >= 3.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:16,Integrability,message,message,16,/* It's a trace message. Show it if trace_level >= msg_level. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:55,Availability,error,error,55,"/*; * Format a message string for the most recent JPEG error or message.; * The message is stored into buffer, which should be at least JMSG_LENGTH_MAX; * characters. Note that no '\n' character is added to the string.; * Few applications should need to override this method.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:15,Integrability,message,message,15,"/*; * Format a message string for the most recent JPEG error or message.; * The message is stored into buffer, which should be at least JMSG_LENGTH_MAX; * characters. Note that no '\n' character is added to the string.; * Few applications should need to override this method.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:64,Integrability,message,message,64,"/*; * Format a message string for the most recent JPEG error or message.; * The message is stored into buffer, which should be at least JMSG_LENGTH_MAX; * characters. Note that no '\n' character is added to the string.; * Few applications should need to override this method.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:80,Integrability,message,message,80,"/*; * Format a message string for the most recent JPEG error or message.; * The message is stored into buffer, which should be at least JMSG_LENGTH_MAX; * characters. Note that no '\n' character is added to the string.; * Few applications should need to override this method.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:11,Integrability,message,message,11,/* Look up message string in proper table */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:24,Integrability,message,message,24,/* Defend against bogus message number */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:57,Integrability,message,message,57,"/* Check for string parameter, as indicated by %s in the message text */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:14,Integrability,message,message,14,/* Format the message into the passed buffer */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:12,Availability,error,error,12,"/*; * Reset error state variables at start of a new image.; * This is called during compression startup to reset trace/error; * processing to default state, without losing any application-specific; * method pointers. An application might possibly want to override; * this method if it has additional error processing state.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:119,Availability,error,error,119,"/*; * Reset error state variables at start of a new image.; * This is called during compression startup to reset trace/error; * processing to default state, without losing any application-specific; * method pointers. An application might possibly want to override; * this method if it has additional error processing state.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:300,Availability,error,error,300,"/*; * Reset error state variables at start of a new image.; * This is called during compression startup to reset trace/error; * processing to default state, without losing any application-specific; * method pointers. An application might possibly want to override; * this method if it has additional error processing state.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:24,Modifiability,variab,variables,24,"/*; * Reset error state variables at start of a new image.; * This is called during compression startup to reset trace/error; * processing to default state, without losing any application-specific; * method pointers. An application might possibly want to override; * this method if it has additional error processing state.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:35,Availability,error,error,35,"/* may be useful as a flag for ""no error"" */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:27,Availability,error,error-handling,27,/*; * Fill in the standard error-handling methods in a jpeg_error_mgr object.; * Typical call is:; *	struct jpeg_compress_struct cinfo;; *	struct jpeg_error_mgr err;; *; *	cinfo.err = jpeg_std_error(&err);; * after which the application may override some of the methods.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:35,Availability,error,error,35,"/* may be useful as a flag for ""no error"" */; /* Initialize message table pointers */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:60,Integrability,message,message,60,"/* may be useful as a flag for ""no error"" */; /* Initialize message table pointers */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c:7,Safety,safe,safety,7,/* for safety */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h:273,Availability,error,error,273,"/*; * jerror.h; *; * Copyright (C) 1994-1997, Thomas G. Lane.; * Modified 1997-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file defines the error and message codes for the JPEG library.; * Edit this file to add new codes, or to translate the message strings to; * some other language.; * A set of error-reporting macros are defined too. Some applications using; * the JPEG library may wish to include this file to get the error codes; * and/or the macros.; */; /*; * To define the enum list of message codes, include this file without; * defining macro JMESSAGE. To create a message string table, include it; * again with a suitable JMESSAGE definition (see jerror.c for an example).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h:430,Availability,error,error-reporting,430,"/*; * jerror.h; *; * Copyright (C) 1994-1997, Thomas G. Lane.; * Modified 1997-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file defines the error and message codes for the JPEG library.; * Edit this file to add new codes, or to translate the message strings to; * some other language.; * A set of error-reporting macros are defined too. Some applications using; * the JPEG library may wish to include this file to get the error codes; * and/or the macros.; */; /*; * To define the enum list of message codes, include this file without; * defining macro JMESSAGE. To create a message string table, include it; * again with a suitable JMESSAGE definition (see jerror.c for an example).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h:555,Availability,error,error,555,"/*; * jerror.h; *; * Copyright (C) 1994-1997, Thomas G. Lane.; * Modified 1997-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file defines the error and message codes for the JPEG library.; * Edit this file to add new codes, or to translate the message strings to; * some other language.; * A set of error-reporting macros are defined too. Some applications using; * the JPEG library may wish to include this file to get the error codes; * and/or the macros.; */; /*; * To define the enum list of message codes, include this file without; * defining macro JMESSAGE. To create a message string table, include it; * again with a suitable JMESSAGE definition (see jerror.c for an example).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h:283,Integrability,message,message,283,"/*; * jerror.h; *; * Copyright (C) 1994-1997, Thomas G. Lane.; * Modified 1997-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file defines the error and message codes for the JPEG library.; * Edit this file to add new codes, or to translate the message strings to; * some other language.; * A set of error-reporting macros are defined too. Some applications using; * the JPEG library may wish to include this file to get the error codes; * and/or the macros.; */; /*; * To define the enum list of message codes, include this file without; * defining macro JMESSAGE. To create a message string table, include it; * again with a suitable JMESSAGE definition (see jerror.c for an example).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h:375,Integrability,message,message,375,"/*; * jerror.h; *; * Copyright (C) 1994-1997, Thomas G. Lane.; * Modified 1997-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file defines the error and message codes for the JPEG library.; * Edit this file to add new codes, or to translate the message strings to; * some other language.; * A set of error-reporting macros are defined too. Some applications using; * the JPEG library may wish to include this file to get the error codes; * and/or the macros.; */; /*; * To define the enum list of message codes, include this file without; * defining macro JMESSAGE. To create a message string table, include it; * again with a suitable JMESSAGE definition (see jerror.c for an example).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h:627,Integrability,message,message,627,"/*; * jerror.h; *; * Copyright (C) 1994-1997, Thomas G. Lane.; * Modified 1997-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file defines the error and message codes for the JPEG library.; * Edit this file to add new codes, or to translate the message strings to; * some other language.; * A set of error-reporting macros are defined too. Some applications using; * the JPEG library may wish to include this file to get the error codes; * and/or the macros.; */; /*; * To define the enum list of message codes, include this file without; * defining macro JMESSAGE. To create a message string table, include it; * again with a suitable JMESSAGE definition (see jerror.c for an example).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h:708,Integrability,message,message,708,"/*; * jerror.h; *; * Copyright (C) 1994-1997, Thomas G. Lane.; * Modified 1997-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file defines the error and message codes for the JPEG library.; * Edit this file to add new codes, or to translate the message strings to; * some other language.; * A set of error-reporting macros are defined too. Some applications using; * the JPEG library may wish to include this file to get the error codes; * and/or the macros.; */; /*; * To define the enum list of message codes, include this file without; * defining macro JMESSAGE. To create a message string table, include it; * again with a suitable JMESSAGE definition (see jerror.c for an example).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h:87,Usability,Guid,Guido,87,"/*; * jerror.h; *; * Copyright (C) 1994-1997, Thomas G. Lane.; * Modified 1997-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file defines the error and message codes for the JPEG library.; * Edit this file to add new codes, or to translate the message strings to; * some other language.; * A set of error-reporting macros are defined too. Some applications using; * the JPEG library may wish to include this file to get the error codes; * and/or the macros.; */; /*; * To define the enum list of message codes, include this file without; * defining macro JMESSAGE. To create a message string table, include it; * again with a suitable JMESSAGE definition (see jerror.c for an example).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h:32,Availability,error,error,32,/* Macros to simplify using the error and trace message stuff */; /* The first parameter is either type of cinfo pointer */; /* Fatal errors (print message and exit) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h:134,Availability,error,errors,134,/* Macros to simplify using the error and trace message stuff */; /* The first parameter is either type of cinfo pointer */; /* Fatal errors (print message and exit) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h:48,Integrability,message,message,48,/* Macros to simplify using the error and trace message stuff */; /* The first parameter is either type of cinfo pointer */; /* Fatal errors (print message and exit) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h:148,Integrability,message,message,148,/* Macros to simplify using the error and trace message stuff */; /* The first parameter is either type of cinfo pointer */; /* Fatal errors (print message and exit) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h:13,Usability,simpl,simplify,13,/* Macros to simplify using the error and trace message stuff */; /* The first parameter is either type of cinfo pointer */; /* Fatal errors (print message and exit) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h:12,Availability,error,errors,12,"/* Nonfatal errors (we can keep going, but the data is probably corrupt) */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h:27,Integrability,message,messages,27,/* Informational/debugging messages */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jerror.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jerror.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c:743,Availability,avail,available,743,"/*; * jfdctflt.c; *; * Copyright (C) 1994-1996, Thomas G. Lane.; * Modified 2003-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a floating-point implementation of the; * forward DCT (Discrete Cosine Transform).; *; * This implementation should be more accurate than either of the integer; * DCT implementations. However, it may not give the same results on all; * machines because of differences in roundoff behavior. Speed will depend; * on the hardware's floating point capacity.; *; * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT; * on each column. Direct algorithms are also available, but they are; * much more complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with a fixed-point; * implementation, accuracy is lost due to imprecise representation of the; * scaled quantization values. However, that problem does not arise if; * we use floating point arithmetic.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c:823,Energy Efficiency,reduce,reduced,823,"/*; * jfdctflt.c; *; * Copyright (C) 1994-1996, Thomas G. Lane.; * Modified 2003-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a floating-point implementation of the; * forward DCT (Discrete Cosine Transform).; *; * This implementation should be more accurate than either of the integer; * DCT implementations. However, it may not give the same results on all; * machines because of differences in roundoff behavior. Speed will depend; * on the hardware's floating point capacity.; *; * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT; * on each column. Direct algorithms are also available, but they are; * much more complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with a fixed-point; * implementation, accuracy is lost due to imprecise representation of the; * scaled quantization values. However, that problem does not arise if; * we use floating point arithmetic.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c:573,Integrability,depend,depend,573,"/*; * jfdctflt.c; *; * Copyright (C) 1994-1996, Thomas G. Lane.; * Modified 2003-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a floating-point implementation of the; * forward DCT (Discrete Cosine Transform).; *; * This implementation should be more accurate than either of the integer; * DCT implementations. However, it may not give the same results on all; * machines because of differences in roundoff behavior. Speed will depend; * on the hardware's floating point capacity.; *; * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT; * on each column. Direct algorithms are also available, but they are; * much more complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with a fixed-point; * implementation, accuracy is lost due to imprecise representation of the; * scaled quantization values. However, that problem does not arise if; * we use floating point arithmetic.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c:89,Usability,Guid,Guido,89,"/*; * jfdctflt.c; *; * Copyright (C) 1994-1996, Thomas G. Lane.; * Modified 2003-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a floating-point implementation of the; * forward DCT (Discrete Cosine Transform).; *; * This implementation should be more accurate than either of the integer; * DCT implementations. However, it may not give the same results on all; * machines because of differences in roundoff behavior. Speed will depend; * on the hardware's floating point capacity.; *; * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT; * on each column. Direct algorithms are also available, but they are; * much more complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with a fixed-point; * implementation, accuracy is lost due to imprecise representation of the; * scaled quantization values. However, that problem does not arise if; * we use floating point arithmetic.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c:1333,Usability,simpl,simple,1333,"/*; * jfdctflt.c; *; * Copyright (C) 1994-1996, Thomas G. Lane.; * Modified 2003-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a floating-point implementation of the; * forward DCT (Discrete Cosine Transform).; *; * This implementation should be more accurate than either of the integer; * DCT implementations. However, it may not give the same results on all; * machines because of differences in roundoff behavior. Speed will depend; * on the hardware's floating point capacity.; *; * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT; * on each column. Direct algorithms are also available, but they are; * much more complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with a fixed-point; * implementation, accuracy is lost due to imprecise representation of the; * scaled quantization values. However, that problem does not arise if; * we use floating point arithmetic.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on one block of samples.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c:3,Performance,Load,Load,3,/* Load data into workspace */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c:43,Safety,avoid,avoid,43,/* The rotator is modified from fig 4-8 to avoid extra negations. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c:43,Safety,avoid,avoid,43,/* The rotator is modified from fig 4-8 to avoid extra negations. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c:487,Availability,avail,available,487,"/*; * jfdctfst.c; *; * Copyright (C) 1994-1996, Thomas G. Lane.; * Modified 2003-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a fast, not so accurate integer implementation of the; * forward DCT (Discrete Cosine Transform).; *; * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT; * on each column. Direct algorithms are also available, but they are; * much more complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with fixed-point math,; * accuracy is lost due to imprecise representation of the scaled; * quantization values. The smaller the quantization table entry, the less; * precise the scaled value, so this implementation does worse with high-; * quality-setting files than with low-quality ones.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c:567,Energy Efficiency,reduce,reduced,567,"/*; * jfdctfst.c; *; * Copyright (C) 1994-1996, Thomas G. Lane.; * Modified 2003-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a fast, not so accurate integer implementation of the; * forward DCT (Discrete Cosine Transform).; *; * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT; * on each column. Direct algorithms are also available, but they are; * much more complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with fixed-point math,; * accuracy is lost due to imprecise representation of the scaled; * quantization values. The smaller the quantization table entry, the less; * precise the scaled value, so this implementation does worse with high-; * quality-setting files than with low-quality ones.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c:89,Usability,Guid,Guido,89,"/*; * jfdctfst.c; *; * Copyright (C) 1994-1996, Thomas G. Lane.; * Modified 2003-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a fast, not so accurate integer implementation of the; * forward DCT (Discrete Cosine Transform).; *; * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT; * on each column. Direct algorithms are also available, but they are; * much more complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with fixed-point math,; * accuracy is lost due to imprecise representation of the scaled; * quantization values. The smaller the quantization table entry, the less; * precise the scaled value, so this implementation does worse with high-; * quality-setting files than with low-quality ones.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c:1077,Usability,simpl,simple,1077,"/*; * jfdctfst.c; *; * Copyright (C) 1994-1996, Thomas G. Lane.; * Modified 2003-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a fast, not so accurate integer implementation of the; * forward DCT (Discrete Cosine Transform).; *; * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT; * on each column. Direct algorithms are also available, but they are; * much more complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with fixed-point math,; * accuracy is lost due to imprecise representation of the scaled; * quantization values. The smaller the quantization table entry, the less; * precise the scaled value, so this implementation does worse with high-; * quality-setting files than with low-quality ones.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c:876,Energy Efficiency,reduce,reduce,876,"/* Scaling decisions are generally the same as in the LL&M algorithm;; * see jfdctint.c for more details. However, we choose to descale; * (right shift) multiplication products as soon as they are formed,; * rather than carrying additional fractional bits into subsequent additions.; * This compromises accuracy slightly, but it lets us save a few shifts.; * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples); * everywhere except in the multiplications proper; this saves a good deal; * of work on 16-bit-int machines.; *; * Again to save a few shifts, the intermediate results between pass 1 and; * pass 2 are not upscaled, but are represented only to integral precision.; *; * A final compromise is to represent the multiplicative constants to only; * 8 fractional bits, rather than 13. This saves some shifting work on some; * machines, and may also reduce the cost of multiplication (since there; * are fewer one-bits in the constants).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c:28,Energy Efficiency,reduce,reduce,28,"/* Some C compilers fail to reduce ""FIX(constant)"" at compile time, thus; * causing a lot of useless floating-point operations at run time.; * To get around this we use the following pre-calculated constants.; * If you change CONST_BITS you may want to add appropriate values.; * (With a reasonable C compiler, you can just rely on the FIX() macro...); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c:22,Modifiability,variab,variable,22,"/* Multiply a DCTELEM variable by an INT32 constant, and immediately; * descale to yield a DCTELEM result.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on one block of samples.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c:3,Performance,Load,Load,3,/* Load data into workspace */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c:43,Safety,avoid,avoid,43,/* The rotator is modified from fig 4-8 to avoid extra negations. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c:43,Safety,avoid,avoid,43,/* The rotator is modified from fig 4-8 to avoid extra negations. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:497,Availability,avail,available,497,"/*; * jfdctint.c; *; * Copyright (C) 1991-1996, Thomas G. Lane.; * Modification developed 2003-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a slow-but-accurate integer implementation of the; * forward DCT (Discrete Cosine Transform).; *; * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT; * on each column. Direct algorithms are also available, but they are; * much more complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide FDCT routines with various input sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 output DCT block.; *; * For N<8 we fill the remaining block coefficients with zero.; * For N>8 we apply a partial N-point FDCT on the input samples, computing; * just the lower 8 frequency coefficients and discarding the rest.; *; * We must scale the output coefficients of the N-point FDCT appropriately; * to the standard 8-point FDCT level by 8/N per 1-D pass. This scaling; * is folded into the constant multipliers (pass 2) and/or final/initial; * shifting.; *; * CAUTION: We rely on t",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:577,Energy Efficiency,reduce,reduced,577,"/*; * jfdctint.c; *; * Copyright (C) 1991-1996, Thomas G. Lane.; * Modification developed 2003-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a slow-but-accurate integer implementation of the; * forward DCT (Discrete Cosine Transform).; *; * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT; * on each column. Direct algorithms are also available, but they are; * much more complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide FDCT routines with various input sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 output DCT block.; *; * For N<8 we fill the remaining block coefficients with zero.; * For N>8 we apply a partial N-point FDCT on the input samples, computing; * just the lower 8 frequency coefficients and discarding the rest.; *; * We must scale the output coefficients of the N-point FDCT appropriately; * to the standard 8-point FDCT level by 8/N per 1-D pass. This scaling; * is folded into the constant multipliers (pass 2) and/or final/initial; * shifting.; *; * CAUTION: We rely on t",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:1251,Integrability,rout,routines,1251,"* This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a slow-but-accurate integer implementation of the; * forward DCT (Discrete Cosine Transform).; *; * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT; * on each column. Direct algorithms are also available, but they are; * much more complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide FDCT routines with various input sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 output DCT block.; *; * For N<8 we fill the remaining block coefficients with zero.; * For N>8 we apply a partial N-point FDCT on the input samples, computing; * just the lower 8 frequency coefficients and discarding the rest.; *; * We must scale the output coefficients of the N-point FDCT appropriately; * to the standard 8-point FDCT level by 8/N per 1-D pass. This scaling; * is folded into the constant multipliers (pass 2) and/or final/initial; * shifting.; *; * CAUTION: We rely on the FIX() macro except for the N=1,2,4,8 cases; * since there would be too many additional constants to pre-calculate.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:103,Usability,Guid,Guido,103,"/*; * jfdctint.c; *; * Copyright (C) 1991-1996, Thomas G. Lane.; * Modification developed 2003-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a slow-but-accurate integer implementation of the; * forward DCT (Discrete Cosine Transform).; *; * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT; * on each column. Direct algorithms are also available, but they are; * much more complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide FDCT routines with various input sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 output DCT block.; *; * For N<8 we fill the remaining block coefficients with zero.; * For N>8 we apply a partial N-point FDCT on the input samples, computing; * just the lower 8 frequency coefficients and discarding the rest.; *; * We must scale the output coefficients of the N-point FDCT appropriately; * to the standard 8-point FDCT level by 8/N per 1-D pass. This scaling; * is folded into the constant multipliers (pass 2) and/or final/initial; * shifting.; *; * CAUTION: We rely on t",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:1119,Usability,simpl,simple,1119,"beding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a slow-but-accurate integer implementation of the; * forward DCT (Discrete Cosine Transform).; *; * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT; * on each column. Direct algorithms are also available, but they are; * much more complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide FDCT routines with various input sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 output DCT block.; *; * For N<8 we fill the remaining block coefficients with zero.; * For N>8 we apply a partial N-point FDCT on the input samples, computing; * just the lower 8 frequency coefficients and discarding the rest.; *; * We must scale the output coefficients of the N-point FDCT appropriately; * to the standard 8-point FDCT level by 8/N per 1-D pass. This scaling; * is folded into the constant multipliers (pass 2) and/or final/initial; * shifting.; *; * CAUTION: We rely on the FIX() macro except for the N=1,2,4,8 cases; * since there would be too many additional constants to pre-calcul",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:1712,Availability,Error,Error,1712,"/*; * The poop on this scaling stuff is as follows:; *; * Each 1-D DCT step produces outputs which are a factor of sqrt(N); * larger than the true DCT outputs. The final outputs are therefore; * a factor of N larger than desired; since N=8 this can be cured by; * a simple right shift at the end of the algorithm. The advantage of; * this arrangement is that we save two multiplications per 1-D DCT,; * because the y0 and y4 outputs need not be divided by sqrt(N).; * In the IJG code, this factor of 8 is removed by the quantization step; * (in jcdctmgr.c), NOT in this module.; *; * We have to do addition and subtraction of the integer inputs, which; * is no problem, and multiplication by fractional constants, which is; * a problem to do in integer arithmetic. We multiply all the constants; * by CONST_SCALE and convert them to integer constants (thus retaining; * CONST_BITS bits of precision in the constants). After doing a; * multiplication we have to divide the product by CONST_SCALE, with proper; * rounding, to produce the correct output. This division can be done; * cheaply as a right shift of CONST_BITS bits. We postpone shifting; * as long as possible so that partial sums can be added together with; * full fractional precision.; *; * The outputs of the first pass are scaled up by PASS1_BITS bits so that; * they are represented to better-than-integral precision. These outputs; * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word; * with the recommended scaling. (For 12-bit sample data, the intermediate; * array is INT32 anyway.); *; * To avoid overflow of the 32-bit intermediate results in pass 2, we must; * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26. Error analysis; * shows that the values given below are the most effective.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:1586,Safety,avoid,avoid,1586,"/*; * The poop on this scaling stuff is as follows:; *; * Each 1-D DCT step produces outputs which are a factor of sqrt(N); * larger than the true DCT outputs. The final outputs are therefore; * a factor of N larger than desired; since N=8 this can be cured by; * a simple right shift at the end of the algorithm. The advantage of; * this arrangement is that we save two multiplications per 1-D DCT,; * because the y0 and y4 outputs need not be divided by sqrt(N).; * In the IJG code, this factor of 8 is removed by the quantization step; * (in jcdctmgr.c), NOT in this module.; *; * We have to do addition and subtraction of the integer inputs, which; * is no problem, and multiplication by fractional constants, which is; * a problem to do in integer arithmetic. We multiply all the constants; * by CONST_SCALE and convert them to integer constants (thus retaining; * CONST_BITS bits of precision in the constants). After doing a; * multiplication we have to divide the product by CONST_SCALE, with proper; * rounding, to produce the correct output. This division can be done; * cheaply as a right shift of CONST_BITS bits. We postpone shifting; * as long as possible so that partial sums can be added together with; * full fractional precision.; *; * The outputs of the first pass are scaled up by PASS1_BITS bits so that; * they are represented to better-than-integral precision. These outputs; * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word; * with the recommended scaling. (For 12-bit sample data, the intermediate; * array is INT32 anyway.); *; * To avoid overflow of the 32-bit intermediate results in pass 2, we must; * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26. Error analysis; * shows that the values given below are the most effective.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:266,Usability,simpl,simple,266,"/*; * The poop on this scaling stuff is as follows:; *; * Each 1-D DCT step produces outputs which are a factor of sqrt(N); * larger than the true DCT outputs. The final outputs are therefore; * a factor of N larger than desired; since N=8 this can be cured by; * a simple right shift at the end of the algorithm. The advantage of; * this arrangement is that we save two multiplications per 1-D DCT,; * because the y0 and y4 outputs need not be divided by sqrt(N).; * In the IJG code, this factor of 8 is removed by the quantization step; * (in jcdctmgr.c), NOT in this module.; *; * We have to do addition and subtraction of the integer inputs, which; * is no problem, and multiplication by fractional constants, which is; * a problem to do in integer arithmetic. We multiply all the constants; * by CONST_SCALE and convert them to integer constants (thus retaining; * CONST_BITS bits of precision in the constants). After doing a; * multiplication we have to divide the product by CONST_SCALE, with proper; * rounding, to produce the correct output. This division can be done; * cheaply as a right shift of CONST_BITS bits. We postpone shifting; * as long as possible so that partial sums can be added together with; * full fractional precision.; *; * The outputs of the first pass are scaled up by PASS1_BITS bits so that; * they are represented to better-than-integral precision. These outputs; * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word; * with the recommended scaling. (For 12-bit sample data, the intermediate; * array is INT32 anyway.); *; * To avoid overflow of the 32-bit intermediate results in pass 2, we must; * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26. Error analysis; * shows that the values given below are the most effective.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:30,Safety,avoid,avoid,30,/* lose a little precision to avoid overflow */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:28,Energy Efficiency,reduce,reduce,28,"/* Some C compilers fail to reduce ""FIX(constant)"" at compile time, thus; * causing a lot of useless floating-point operations at run time.; * To get around this we use the following pre-calculated constants.; * If you change CONST_BITS you may want to add appropriate values.; * (With a reasonable C compiler, you can just rely on the FIX() macro...); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:21,Modifiability,variab,variable,21,"/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.; * For 8-bit samples with the recommended scaling, all the variable; * and constant values involved are no more than 16 bits wide, so a; * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.; * For 12-bit samples, a full 32-bit multiplication will be needed.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:136,Modifiability,variab,variable,136,"/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.; * For 8-bit samples with the recommended scaling, all the variable; * and constant values involved are no more than 16 bits wide, so a; * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.; * For 12-bit samples, a full 32-bit multiplication will be needed.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on one block of samples.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:65,Availability,fault,faulty,65,"/* Even part per LL&M figure 1 --- note that published figure is faulty;; * rotator ""sqrt(2)*c1"" should be ""sqrt(2)*c6"".; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:65,Availability,fault,faulty,65,"/* Even part per LL&M figure 1 --- note that published figure is faulty;; * rotator ""sqrt(2)*c1"" should be ""sqrt(2)*c6"".; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on a 7x7 sample block.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on a 6x6 sample block.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on a 5x5 sample block.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:212,Energy Efficiency,adapt,adaption,212,"/* Pass 1: process rows. */; /* Note results are scaled up by sqrt(8) compared to a true DCT; */; /* furthermore, we scale the results by 2**PASS1_BITS. */; /* We scale the results further by 2 as part of output adaption */; /* scaling for different DCT size. */; /* cK represents sqrt(2) * cos(K*pi/10). */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:212,Modifiability,adapt,adaption,212,"/* Pass 1: process rows. */; /* Note results are scaled up by sqrt(8) compared to a true DCT; */; /* furthermore, we scale the results by 2**PASS1_BITS. */; /* We scale the results further by 2 as part of output adaption */; /* scaling for different DCT size. */; /* cK represents sqrt(2) * cos(K*pi/10). */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on a 4x4 sample block.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on a 3x3 sample block.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:215,Energy Efficiency,adapt,adaption,215,"/* Pass 1: process rows. */; /* Note results are scaled up by sqrt(8) compared to a true DCT; */; /* furthermore, we scale the results by 2**PASS1_BITS. */; /* We scale the results further by 2**2 as part of output adaption */; /* scaling for different DCT size. */; /* cK represents sqrt(2) * cos(K*pi/6). */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:215,Modifiability,adapt,adaption,215,"/* Pass 1: process rows. */; /* Note results are scaled up by sqrt(8) compared to a true DCT; */; /* furthermore, we scale the results by 2**PASS1_BITS. */; /* We scale the results further by 2**2 as part of output adaption */; /* scaling for different DCT size. */; /* cK represents sqrt(2) * cos(K*pi/6). */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on a 2x2 sample block.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on a 1x1 sample block.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on a 9x9 sample block.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:153,Energy Efficiency,adapt,adaption,153,/* Pass 1: process rows. */; /* Note results are scaled up by sqrt(8) compared to a true DCT; */; /* we scale the results further by 2 as part of output adaption */; /* scaling for different DCT size. */; /* cK represents sqrt(2) * cos(K*pi/18). */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:153,Modifiability,adapt,adaption,153,/* Pass 1: process rows. */; /* Note results are scaled up by sqrt(8) compared to a true DCT; */; /* we scale the results further by 2 as part of output adaption */; /* scaling for different DCT size. */; /* cK represents sqrt(2) * cos(K*pi/18). */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:21,Modifiability,extend,extended,21,/* switch pointer to extended workspace */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on a 10x10 sample block.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:153,Energy Efficiency,adapt,adaption,153,/* Pass 1: process rows. */; /* Note results are scaled up by sqrt(8) compared to a true DCT; */; /* we scale the results further by 2 as part of output adaption */; /* scaling for different DCT size. */; /* cK represents sqrt(2) * cos(K*pi/20). */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:153,Modifiability,adapt,adaption,153,/* Pass 1: process rows. */; /* Note results are scaled up by sqrt(8) compared to a true DCT; */; /* we scale the results further by 2 as part of output adaption */; /* scaling for different DCT size. */; /* cK represents sqrt(2) * cos(K*pi/20). */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:21,Modifiability,extend,extended,21,/* switch pointer to extended workspace */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on an 11x11 sample block.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:153,Energy Efficiency,adapt,adaption,153,/* Pass 1: process rows. */; /* Note results are scaled up by sqrt(8) compared to a true DCT; */; /* we scale the results further by 2 as part of output adaption */; /* scaling for different DCT size. */; /* cK represents sqrt(2) * cos(K*pi/22). */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:153,Modifiability,adapt,adaption,153,/* Pass 1: process rows. */; /* Note results are scaled up by sqrt(8) compared to a true DCT; */; /* we scale the results further by 2 as part of output adaption */; /* scaling for different DCT size. */; /* cK represents sqrt(2) * cos(K*pi/22). */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:21,Modifiability,extend,extended,21,/* switch pointer to extended workspace */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on a 12x12 sample block.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:21,Modifiability,extend,extended,21,/* switch pointer to extended workspace */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on a 13x13 sample block.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:21,Modifiability,extend,extended,21,/* switch pointer to extended workspace */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on a 14x14 sample block.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:21,Modifiability,extend,extended,21,/* switch pointer to extended workspace */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on a 15x15 sample block.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:21,Modifiability,extend,extended,21,/* switch pointer to extended workspace */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,/*; * Perform the forward DCT on a 16x16 sample block.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:21,Modifiability,extend,extended,21,/* switch pointer to extended workspace */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on a 16x8 sample block.; *; * 16-point FDCT in pass 1 (rows), 8-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:65,Availability,fault,faulty,65,"/* Even part per LL&M figure 1 --- note that published figure is faulty;; * rotator ""sqrt(2)*c1"" should be ""sqrt(2)*c6"".; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on a 14x7 sample block.; *; * 14-point FDCT in pass 1 (rows), 7-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on a 12x6 sample block.; *; * 12-point FDCT in pass 1 (rows), 6-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on a 10x5 sample block.; *; * 10-point FDCT in pass 1 (rows), 5-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on an 8x4 sample block.; *; * 8-point FDCT in pass 1 (rows), 4-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:65,Availability,fault,faulty,65,"/* Even part per LL&M figure 1 --- note that published figure is faulty;; * rotator ""sqrt(2)*c1"" should be ""sqrt(2)*c6"".; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on a 6x3 sample block.; *; * 6-point FDCT in pass 1 (rows), 3-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:212,Energy Efficiency,adapt,adaption,212,"/* Pass 1: process rows. */; /* Note results are scaled up by sqrt(8) compared to a true DCT; */; /* furthermore, we scale the results by 2**PASS1_BITS. */; /* We scale the results further by 2 as part of output adaption */; /* scaling for different DCT size. */; /* 6-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/12). */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:212,Modifiability,adapt,adaption,212,"/* Pass 1: process rows. */; /* Note results are scaled up by sqrt(8) compared to a true DCT; */; /* furthermore, we scale the results by 2**PASS1_BITS. */; /* We scale the results further by 2 as part of output adaption */; /* scaling for different DCT size. */; /* 6-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/12). */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on a 4x2 sample block.; *; * 4-point FDCT in pass 1 (rows), 2-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on a 2x1 sample block.; *; * 2-point FDCT in pass 1 (rows), 1-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on an 8x16 sample block.; *; * 8-point FDCT in pass 1 (rows), 16-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:65,Availability,fault,faulty,65,"/* Even part per LL&M figure 1 --- note that published figure is faulty;; * rotator ""sqrt(2)*c1"" should be ""sqrt(2)*c6"".; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:21,Modifiability,extend,extended,21,/* switch pointer to extended workspace */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on a 7x14 sample block.; *; * 7-point FDCT in pass 1 (rows), 14-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:21,Modifiability,extend,extended,21,/* switch pointer to extended workspace */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on a 6x12 sample block.; *; * 6-point FDCT in pass 1 (rows), 12-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:21,Modifiability,extend,extended,21,/* switch pointer to extended workspace */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on a 5x10 sample block.; *; * 5-point FDCT in pass 1 (rows), 10-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:21,Modifiability,extend,extended,21,/* switch pointer to extended workspace */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on a 4x8 sample block.; *; * 4-point FDCT in pass 1 (rows), 8-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:65,Availability,fault,faulty,65,"/* Even part per LL&M figure 1 --- note that published figure is faulty;; * rotator ""sqrt(2)*c1"" should be ""sqrt(2)*c6"".; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on a 3x6 sample block.; *; * 3-point FDCT in pass 1 (rows), 6-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:212,Energy Efficiency,adapt,adaption,212,"/* Pass 1: process rows. */; /* Note results are scaled up by sqrt(8) compared to a true DCT; */; /* furthermore, we scale the results by 2**PASS1_BITS. */; /* We scale the results further by 2 as part of output adaption */; /* scaling for different DCT size. */; /* 3-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/6). */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:212,Modifiability,adapt,adaption,212,"/* Pass 1: process rows. */; /* Note results are scaled up by sqrt(8) compared to a true DCT; */; /* furthermore, we scale the results by 2**PASS1_BITS. */; /* We scale the results further by 2 as part of output adaption */; /* scaling for different DCT size. */; /* 3-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/6). */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on a 2x4 sample block.; *; * 2-point FDCT in pass 1 (rows), 4-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:6,Performance,Perform,Perform,6,"/*; * Perform the forward DCT on a 1x2 sample block.; *; * 1-point FDCT in pass 1 (rows), 2-point in pass 2 (columns).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c:904,Availability,avail,available,904,"/*; * jidctflt.c; *; * Copyright (C) 1994-1998, Thomas G. Lane.; * Modified 2010 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a floating-point implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * This implementation should be more accurate than either of the integer; * IDCT implementations. However, it may not give the same results on all; * machines because of differences in roundoff behavior. Speed will depend; * on the hardware's floating point capacity.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with a fixed-point; * implementation, accuracy is lost due to imprecise representation of the; * scaled quantization values. However, that problem does not arise if; * we use floating point arithmetic.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c:984,Energy Efficiency,reduce,reduced,984,"/*; * jidctflt.c; *; * Copyright (C) 1994-1998, Thomas G. Lane.; * Modified 2010 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a floating-point implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * This implementation should be more accurate than either of the integer; * IDCT implementations. However, it may not give the same results on all; * machines because of differences in roundoff behavior. Speed will depend; * on the hardware's floating point capacity.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with a fixed-point; * implementation, accuracy is lost due to imprecise representation of the; * scaled quantization values. However, that problem does not arise if; * we use floating point arithmetic.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c:372,Integrability,rout,routine,372,"/*; * jidctflt.c; *; * Copyright (C) 1994-1998, Thomas G. Lane.; * Modified 2010 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a floating-point implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * This implementation should be more accurate than either of the integer; * IDCT implementations. However, it may not give the same results on all; * machines because of differences in roundoff behavior. Speed will depend; * on the hardware's floating point capacity.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with a fixed-point; * implementation, accuracy is lost due to imprecise representation of the; * scaled quantization values. However, that problem does not arise if; * we use floating point arithmetic.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c:662,Integrability,depend,depend,662,"/*; * jidctflt.c; *; * Copyright (C) 1994-1998, Thomas G. Lane.; * Modified 2010 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a floating-point implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * This implementation should be more accurate than either of the integer; * IDCT implementations. However, it may not give the same results on all; * machines because of differences in roundoff behavior. Speed will depend; * on the hardware's floating point capacity.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with a fixed-point; * implementation, accuracy is lost due to imprecise representation of the; * scaled quantization values. However, that problem does not arise if; * we use floating point arithmetic.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c:393,Performance,perform,perform,393,"/*; * jidctflt.c; *; * Copyright (C) 1994-1998, Thomas G. Lane.; * Modified 2010 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a floating-point implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * This implementation should be more accurate than either of the integer; * IDCT implementations. However, it may not give the same results on all; * machines because of differences in roundoff behavior. Speed will depend; * on the hardware's floating point capacity.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with a fixed-point; * implementation, accuracy is lost due to imprecise representation of the; * scaled quantization values. However, that problem does not arise if; * we use floating point arithmetic.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c:84,Usability,Guid,Guido,84,"/*; * jidctflt.c; *; * Copyright (C) 1994-1998, Thomas G. Lane.; * Modified 2010 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a floating-point implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * This implementation should be more accurate than either of the integer; * IDCT implementations. However, it may not give the same results on all; * machines because of differences in roundoff behavior. Speed will depend; * on the hardware's floating point capacity.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with a fixed-point; * implementation, accuracy is lost due to imprecise representation of the; * scaled quantization values. However, that problem does not arise if; * we use floating point arithmetic.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c:1494,Usability,simpl,simple,1494,"/*; * jidctflt.c; *; * Copyright (C) 1994-1998, Thomas G. Lane.; * Modified 2010 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a floating-point implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * This implementation should be more accurate than either of the integer; * IDCT implementations. However, it may not give the same results on all; * machines because of differences in roundoff behavior. Speed will depend; * on the hardware's floating point capacity.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with a fixed-point; * implementation, accuracy is lost due to imprecise representation of the; * scaled quantization values. However, that problem does not arise if; * we use floating point arithmetic.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c:6,Performance,Perform,Perform,6,/*; * Perform dequantization and inverse DCT on one block of coefficients.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c:429,Usability,simpl,simplified,429,"/* Due to quantization, we will usually find that many of the input; * coefficients are zero, especially the AC terms. We can exploit this; * by short-circuiting the IDCT calculation for any column in which all; * the AC terms are zero. In that case each output is equal to the; * DC coefficient (with scale factor as needed).; * With typical images and quantization tables, half or more of the; * column DCT calculations can be simplified this way.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c:231,Testability,test,testing,231,"/* Rows of zeroes can be exploited in the same way as we did with columns.; * However, the column calculation has created many nonzero AC terms, so; * the simplification applies less often (typically 5% to 10% of the time).; * And testing floats for zero is relatively expensive, so we don't bother.; */; /* Even part */; /* Apply signed->unsigned and prepare float->int conversion */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c:155,Usability,simpl,simplification,155,"/* Rows of zeroes can be exploited in the same way as we did with columns.; * However, the column calculation has created many nonzero AC terms, so; * the simplification applies less often (typically 5% to 10% of the time).; * And testing floats for zero is relatively expensive, so we don't bother.; */; /* Even part */; /* Apply signed->unsigned and prepare float->int conversion */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:609,Availability,avail,available,609,"/*; * jidctfst.c; *; * Copyright (C) 1994-1998, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a fast, not so accurate integer implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with fixed-point math,; * accuracy is lost due to imprecise representation of the scaled; * quantization values. The smaller the quantization table entry, the less; * precise the scaled value, so this implementation does worse with high-; * quality-setting files than with low-quality ones.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:689,Energy Efficiency,reduce,reduced,689,"/*; * jidctfst.c; *; * Copyright (C) 1994-1998, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a fast, not so accurate integer implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with fixed-point math,; * accuracy is lost due to imprecise representation of the scaled; * quantization values. The smaller the quantization table entry, the less; * precise the scaled value, so this implementation does worse with high-; * quality-setting files than with low-quality ones.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:349,Integrability,rout,routine,349,"/*; * jidctfst.c; *; * Copyright (C) 1994-1998, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a fast, not so accurate integer implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with fixed-point math,; * accuracy is lost due to imprecise representation of the scaled; * quantization values. The smaller the quantization table entry, the less; * precise the scaled value, so this implementation does worse with high-; * quality-setting files than with low-quality ones.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:370,Performance,perform,perform,370,"/*; * jidctfst.c; *; * Copyright (C) 1994-1998, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a fast, not so accurate integer implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with fixed-point math,; * accuracy is lost due to imprecise representation of the scaled; * quantization values. The smaller the quantization table entry, the less; * precise the scaled value, so this implementation does worse with high-; * quality-setting files than with low-quality ones.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:1199,Usability,simpl,simple,1199,"/*; * jidctfst.c; *; * Copyright (C) 1994-1998, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a fast, not so accurate integer implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on Arai, Agui, and Nakajima's algorithm for; * scaled DCT. Their original paper (Trans. IEICE E-71(11):1095) is in; * Japanese, but the algorithm is described in the Pennebaker & Mitchell; * JPEG textbook (see REFERENCES section in file README). The following code; * is based directly on figure 4-8 in P&M.; * While an 8-point DCT cannot be done in less than 11 multiplies, it is; * possible to arrange the computation so that many of the multiplies are; * simple scalings of the final outputs. These multiplies can then be; * folded into the multiplications or divisions by the JPEG quantization; * table entries. The AA&N method leaves only 5 multiplies and 29 adds; * to be done in the DCT itself.; * The primary disadvantage of this method is that with fixed-point math,; * accuracy is lost due to imprecise representation of the scaled; * quantization values. The smaller the quantization table entry, the less; * precise the scaled value, so this implementation does worse with high-; * quality-setting files than with low-quality ones.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:1304,Energy Efficiency,reduce,reduce,1304,"/* Scaling decisions are generally the same as in the LL&M algorithm;; * see jidctint.c for more details. However, we choose to descale; * (right shift) multiplication products as soon as they are formed,; * rather than carrying additional fractional bits into subsequent additions.; * This compromises accuracy slightly, but it lets us save a few shifts.; * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples); * everywhere except in the multiplications proper; this saves a good deal; * of work on 16-bit-int machines.; *; * The dequantized coefficients are not integers because the AA&N scaling; * factors have been incorporated. We represent them scaled up by PASS1_BITS,; * so that the first and second IDCT rounds have the same input scaling.; * For 8-bit JSAMPLEs, we choose IFAST_SCALE_BITS = PASS1_BITS so as to; * avoid a descaling shift; this compromises accuracy rather drastically; * for small quantization table entries, but it saves a lot of shifts.; * For 12-bit JSAMPLEs, there's no hope of using 16x16 multiplies anyway,; * so we use a much larger scaling factor to preserve accuracy.; *; * A final compromise is to represent the multiplicative constants to only; * 8 fractional bits, rather than 13. This saves some shifting work on some; * machines, and may also reduce the cost of multiplication (since there; * are fewer one-bits in the constants).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:845,Safety,avoid,avoid,845,"/* Scaling decisions are generally the same as in the LL&M algorithm;; * see jidctint.c for more details. However, we choose to descale; * (right shift) multiplication products as soon as they are formed,; * rather than carrying additional fractional bits into subsequent additions.; * This compromises accuracy slightly, but it lets us save a few shifts.; * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples); * everywhere except in the multiplications proper; this saves a good deal; * of work on 16-bit-int machines.; *; * The dequantized coefficients are not integers because the AA&N scaling; * factors have been incorporated. We represent them scaled up by PASS1_BITS,; * so that the first and second IDCT rounds have the same input scaling.; * For 8-bit JSAMPLEs, we choose IFAST_SCALE_BITS = PASS1_BITS so as to; * avoid a descaling shift; this compromises accuracy rather drastically; * for small quantization table entries, but it saves a lot of shifts.; * For 12-bit JSAMPLEs, there's no hope of using 16x16 multiplies anyway,; * so we use a much larger scaling factor to preserve accuracy.; *; * A final compromise is to represent the multiplicative constants to only; * 8 fractional bits, rather than 13. This saves some shifting work on some; * machines, and may also reduce the cost of multiplication (since there; * are fewer one-bits in the constants).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:30,Safety,avoid,avoid,30,/* lose a little precision to avoid overflow */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:28,Energy Efficiency,reduce,reduce,28,"/* Some C compilers fail to reduce ""FIX(constant)"" at compile time, thus; * causing a lot of useless floating-point operations at run time.; * To get around this we use the following pre-calculated constants.; * If you change CONST_BITS you may want to add appropriate values.; * (With a reasonable C compiler, you can just rely on the FIX() macro...); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:22,Modifiability,variab,variable,22,"/* Multiply a DCTELEM variable by an INT32 constant, and immediately; * descale to yield a DCTELEM result.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:6,Performance,Perform,Perform,6,/*; * Perform dequantization and inverse DCT on one block of coefficients.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:429,Usability,simpl,simplified,429,"/* Due to quantization, we will usually find that many of the input; * coefficients are zero, especially the AC terms. We can exploit this; * by short-circuiting the IDCT calculation for any column in which all; * the AC terms are zero. In that case each output is equal to the; * DC coefficient (with scale factor as needed).; * With typical images and quantization tables, half or more of the; * column DCT calculations can be simplified this way.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:153,Usability,undo,undo,153,"/* Pass 2: process rows from work array, store into output array. */; /* Note that we must descale the results by a factor of 8 == 2**3, */; /* and also undo the PASS1_BITS scaling. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:296,Testability,test,test,296,"/* Rows of zeroes can be exploited in the same way as we did with columns.; * However, the column calculation has created many nonzero AC terms, so; * the simplification applies less often (typically 5% to 10% of the time).; * On machines with very fast multiplication, it's possible that the; * test takes more time than it's worth. In that case this section; * may be commented out.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:155,Usability,simpl,simplification,155,"/* Rows of zeroes can be exploited in the same way as we did with columns.; * However, the column calculation has created many nonzero AC terms, so; * the simplification applies less often (typically 5% to 10% of the time).; * On machines with very fast multiplication, it's possible that the; * test takes more time than it's worth. In that case this section; * may be commented out.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:29,Availability,down,down,29,/* Final output stage: scale down by a factor of 8 and range-limit */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:662,Availability,avail,available,662,"/*; * jidctint.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * Modification developed 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a slow-but-accurate integer implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide IDCT routines with various output sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 input DCT block.; *; * For N<8 we simply take the corresponding low-frequency coefficients of; * the 8x8 input DCT block and apply an NxN point IDCT on the sub-block; * to yield the downscaled outputs.; * This can be seen as direct low-pass downsampling from the DCT domain; * point of view rather than the usual spatial dom",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:1859,Availability,down,downscaled,1859," a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide IDCT routines with various output sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 input DCT block.; *; * For N<8 we simply take the corresponding low-frequency coefficients of; * the 8x8 input DCT block and apply an NxN point IDCT on the sub-block; * to yield the downscaled outputs.; * This can be seen as direct low-pass downsampling from the DCT domain; * point of view rather than the usual spatial domain point of view,; * yielding significant computational savings and results at least; * as good as common bilinear (averaging) spatial downsampling.; *; * For N>8 we apply a partial NxN IDCT on the 8 input coefficients as; * lower frequencies and higher frequencies assumed to be zero.; * It turns out that the computational effort is similar to the 8x8 IDCT; * regarding the output size.; * Furthermore, the scaling and descaling is the same for all IDCT sizes.; *; * CAUTION: We rely on the FIX() macro except for the N=1,2,4,8 cases; * since there would be too many additional constants to pre-calculate.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:1918,Availability,down,downsampling,1918," a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide IDCT routines with various output sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 input DCT block.; *; * For N<8 we simply take the corresponding low-frequency coefficients of; * the 8x8 input DCT block and apply an NxN point IDCT on the sub-block; * to yield the downscaled outputs.; * This can be seen as direct low-pass downsampling from the DCT domain; * point of view rather than the usual spatial domain point of view,; * yielding significant computational savings and results at least; * as good as common bilinear (averaging) spatial downsampling.; *; * For N>8 we apply a partial NxN IDCT on the 8 input coefficients as; * lower frequencies and higher frequencies assumed to be zero.; * It turns out that the computational effort is similar to the 8x8 IDCT; * regarding the output size.; * Furthermore, the scaling and descaling is the same for all IDCT sizes.; *; * CAUTION: We rely on the FIX() macro except for the N=1,2,4,8 cases; * since there would be too many additional constants to pre-calculate.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:2137,Availability,down,downsampling,2137," a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide IDCT routines with various output sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 input DCT block.; *; * For N<8 we simply take the corresponding low-frequency coefficients of; * the 8x8 input DCT block and apply an NxN point IDCT on the sub-block; * to yield the downscaled outputs.; * This can be seen as direct low-pass downsampling from the DCT domain; * point of view rather than the usual spatial domain point of view,; * yielding significant computational savings and results at least; * as good as common bilinear (averaging) spatial downsampling.; *; * For N>8 we apply a partial NxN IDCT on the 8 input coefficients as; * lower frequencies and higher frequencies assumed to be zero.; * It turns out that the computational effort is similar to the 8x8 IDCT; * regarding the output size.; * Furthermore, the scaling and descaling is the same for all IDCT sizes.; *; * CAUTION: We rely on the FIX() macro except for the N=1,2,4,8 cases; * since there would be too many additional constants to pre-calculate.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:742,Energy Efficiency,reduce,reduced,742,"/*; * jidctint.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * Modification developed 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a slow-but-accurate integer implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide IDCT routines with various output sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 input DCT block.; *; * For N<8 we simply take the corresponding low-frequency coefficients of; * the 8x8 input DCT block and apply an NxN point IDCT on the sub-block; * to yield the downscaled outputs.; * This can be seen as direct low-pass downsampling from the DCT domain; * point of view rather than the usual spatial dom",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:402,Integrability,rout,routine,402,"/*; * jidctint.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * Modification developed 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a slow-but-accurate integer implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide IDCT routines with various output sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 input DCT block.; *; * For N<8 we simply take the corresponding low-frequency coefficients of; * the 8x8 input DCT block and apply an NxN point IDCT on the sub-block; * to yield the downscaled outputs.; * This can be seen as direct low-pass downsampling from the DCT domain; * point of view rather than the usual spatial dom",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:1416,Integrability,rout,routines,1416,"D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide IDCT routines with various output sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 input DCT block.; *; * For N<8 we simply take the corresponding low-frequency coefficients of; * the 8x8 input DCT block and apply an NxN point IDCT on the sub-block; * to yield the downscaled outputs.; * This can be seen as direct low-pass downsampling from the DCT domain; * point of view rather than the usual spatial domain point of view,; * yielding significant computational savings and results at least; * as good as common bilinear (averaging) spatial downsampling.; *; * For N>8 we apply a partial NxN IDCT on the 8 input coefficients as; * lower frequencies and higher frequencies assumed to be zero.; * It turns out that the computational effort is similar to the 8x8 IDCT; * regarding the output size.; * Furthermore, the scaling and descaling is the same for all IDCT sizes.; *; * CAUTION: We rely on the FIX() macro ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:423,Performance,perform,perform,423,"/*; * jidctint.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * Modification developed 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a slow-but-accurate integer implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide IDCT routines with various output sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 input DCT block.; *; * For N<8 we simply take the corresponding low-frequency coefficients of; * the 8x8 input DCT block and apply an NxN point IDCT on the sub-block; * to yield the downscaled outputs.; * This can be seen as direct low-pass downsampling from the DCT domain; * point of view rather than the usual spatial dom",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:103,Usability,Guid,Guido,103,"/*; * jidctint.c; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * Modification developed 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a slow-but-accurate integer implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide IDCT routines with various output sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 input DCT block.; *; * For N<8 we simply take the corresponding low-frequency coefficients of; * the 8x8 input DCT block and apply an NxN point IDCT on the sub-block; * to yield the downscaled outputs.; * This can be seen as direct low-pass downsampling from the DCT domain; * point of view rather than the usual spatial dom",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:1284,Usability,simpl,simple,1284,"ontains a slow-but-accurate integer implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide IDCT routines with various output sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 input DCT block.; *; * For N<8 we simply take the corresponding low-frequency coefficients of; * the 8x8 input DCT block and apply an NxN point IDCT on the sub-block; * to yield the downscaled outputs.; * This can be seen as direct low-pass downsampling from the DCT domain; * point of view rather than the usual spatial domain point of view,; * yielding significant computational savings and results at least; * as good as common bilinear (averaging) spatial downsampling.; *; * For N>8 we apply a partial NxN IDCT on the 8 input coefficients as; * lower frequencies and higher frequencies assumed to ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:1711,Usability,simpl,simply,1711," a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide IDCT routines with various output sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 input DCT block.; *; * For N<8 we simply take the corresponding low-frequency coefficients of; * the 8x8 input DCT block and apply an NxN point IDCT on the sub-block; * to yield the downscaled outputs.; * This can be seen as direct low-pass downsampling from the DCT domain; * point of view rather than the usual spatial domain point of view,; * yielding significant computational savings and results at least; * as good as common bilinear (averaging) spatial downsampling.; *; * For N>8 we apply a partial NxN IDCT on the 8 input coefficients as; * lower frequencies and higher frequencies assumed to be zero.; * It turns out that the computational effort is similar to the 8x8 IDCT; * regarding the output size.; * Furthermore, the scaling and descaling is the same for all IDCT sizes.; *; * CAUTION: We rely on the FIX() macro except for the N=1,2,4,8 cases; * since there would be too many additional constants to pre-calculate.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:1622,Availability,Error,Error,1622,"/*; * The poop on this scaling stuff is as follows:; *; * Each 1-D IDCT step produces outputs which are a factor of sqrt(N); * larger than the true IDCT outputs. The final outputs are therefore; * a factor of N larger than desired; since N=8 this can be cured by; * a simple right shift at the end of the algorithm. The advantage of; * this arrangement is that we save two multiplications per 1-D IDCT,; * because the y0 and y4 inputs need not be divided by sqrt(N).; *; * We have to do addition and subtraction of the integer inputs, which; * is no problem, and multiplication by fractional constants, which is; * a problem to do in integer arithmetic. We multiply all the constants; * by CONST_SCALE and convert them to integer constants (thus retaining; * CONST_BITS bits of precision in the constants). After doing a; * multiplication we have to divide the product by CONST_SCALE, with proper; * rounding, to produce the correct output. This division can be done; * cheaply as a right shift of CONST_BITS bits. We postpone shifting; * as long as possible so that partial sums can be added together with; * full fractional precision.; *; * The outputs of the first pass are scaled up by PASS1_BITS bits so that; * they are represented to better-than-integral precision. These outputs; * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word; * with the recommended scaling. (To scale up 12-bit sample data further, an; * intermediate INT32 array would be needed.); *; * To avoid overflow of the 32-bit intermediate results in pass 2, we must; * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26. Error analysis; * shows that the values given below are the most effective.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:1496,Safety,avoid,avoid,1496,"/*; * The poop on this scaling stuff is as follows:; *; * Each 1-D IDCT step produces outputs which are a factor of sqrt(N); * larger than the true IDCT outputs. The final outputs are therefore; * a factor of N larger than desired; since N=8 this can be cured by; * a simple right shift at the end of the algorithm. The advantage of; * this arrangement is that we save two multiplications per 1-D IDCT,; * because the y0 and y4 inputs need not be divided by sqrt(N).; *; * We have to do addition and subtraction of the integer inputs, which; * is no problem, and multiplication by fractional constants, which is; * a problem to do in integer arithmetic. We multiply all the constants; * by CONST_SCALE and convert them to integer constants (thus retaining; * CONST_BITS bits of precision in the constants). After doing a; * multiplication we have to divide the product by CONST_SCALE, with proper; * rounding, to produce the correct output. This division can be done; * cheaply as a right shift of CONST_BITS bits. We postpone shifting; * as long as possible so that partial sums can be added together with; * full fractional precision.; *; * The outputs of the first pass are scaled up by PASS1_BITS bits so that; * they are represented to better-than-integral precision. These outputs; * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word; * with the recommended scaling. (To scale up 12-bit sample data further, an; * intermediate INT32 array would be needed.); *; * To avoid overflow of the 32-bit intermediate results in pass 2, we must; * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26. Error analysis; * shows that the values given below are the most effective.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:268,Usability,simpl,simple,268,"/*; * The poop on this scaling stuff is as follows:; *; * Each 1-D IDCT step produces outputs which are a factor of sqrt(N); * larger than the true IDCT outputs. The final outputs are therefore; * a factor of N larger than desired; since N=8 this can be cured by; * a simple right shift at the end of the algorithm. The advantage of; * this arrangement is that we save two multiplications per 1-D IDCT,; * because the y0 and y4 inputs need not be divided by sqrt(N).; *; * We have to do addition and subtraction of the integer inputs, which; * is no problem, and multiplication by fractional constants, which is; * a problem to do in integer arithmetic. We multiply all the constants; * by CONST_SCALE and convert them to integer constants (thus retaining; * CONST_BITS bits of precision in the constants). After doing a; * multiplication we have to divide the product by CONST_SCALE, with proper; * rounding, to produce the correct output. This division can be done; * cheaply as a right shift of CONST_BITS bits. We postpone shifting; * as long as possible so that partial sums can be added together with; * full fractional precision.; *; * The outputs of the first pass are scaled up by PASS1_BITS bits so that; * they are represented to better-than-integral precision. These outputs; * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word; * with the recommended scaling. (To scale up 12-bit sample data further, an; * intermediate INT32 array would be needed.); *; * To avoid overflow of the 32-bit intermediate results in pass 2, we must; * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26. Error analysis; * shows that the values given below are the most effective.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:30,Safety,avoid,avoid,30,/* lose a little precision to avoid overflow */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:28,Energy Efficiency,reduce,reduce,28,"/* Some C compilers fail to reduce ""FIX(constant)"" at compile time, thus; * causing a lot of useless floating-point operations at run time.; * To get around this we use the following pre-calculated constants.; * If you change CONST_BITS you may want to add appropriate values.; * (With a reasonable C compiler, you can just rely on the FIX() macro...); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:21,Modifiability,variab,variable,21,"/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.; * For 8-bit samples with the recommended scaling, all the variable; * and constant values involved are no more than 16 bits wide, so a; * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.; * For 12-bit samples, a full 32-bit multiplication will be needed.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:136,Modifiability,variab,variable,136,"/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.; * For 8-bit samples with the recommended scaling, all the variable; * and constant values involved are no more than 16 bits wide, so a; * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.; * For 12-bit samples, a full 32-bit multiplication will be needed.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,/*; * Perform dequantization and inverse DCT on one block of coefficients.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:429,Usability,simpl,simplified,429,"/* Due to quantization, we will usually find that many of the input; * coefficients are zero, especially the AC terms. We can exploit this; * by short-circuiting the IDCT calculation for any column in which all; * the AC terms are zero. In that case each output is equal to the; * DC coefficient (with scale factor as needed).; * With typical images and quantization tables, half or more of the; * column DCT calculations can be simplified this way.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:153,Usability,undo,undo,153,"/* Pass 2: process rows from work array, store into output array. */; /* Note that we must descale the results by a factor of 8 == 2**3, */; /* and also undo the PASS1_BITS scaling. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:296,Testability,test,test,296,"/* Rows of zeroes can be exploited in the same way as we did with columns.; * However, the column calculation has created many nonzero AC terms, so; * the simplification applies less often (typically 5% to 10% of the time).; * On machines with very fast multiplication, it's possible that the; * test takes more time than it's worth. In that case this section; * may be commented out.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:155,Usability,simpl,simplification,155,"/* Rows of zeroes can be exploited in the same way as we did with columns.; * However, the column calculation has created many nonzero AC terms, so; * the simplification applies less often (typically 5% to 10% of the time).; * On machines with very fast multiplication, it's possible that the; * test takes more time than it's worth. In that case this section; * may be commented out.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 7x7 output block.; *; * Optimized algorithm with 12 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/14).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:114,Performance,Optimiz,Optimized,114,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 7x7 output block.; *; * Optimized algorithm with 12 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/14).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:90,Energy Efficiency,reduce,reduced-size,90,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 6x6 output block.; *; * Optimized algorithm with 3 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/12).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 6x6 output block.; *; * Optimized algorithm with 3 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/12).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:127,Performance,Optimiz,Optimized,127,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 6x6 output block.; *; * Optimized algorithm with 3 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/12).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:90,Energy Efficiency,reduce,reduced-size,90,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 5x5 output block.; *; * Optimized algorithm with 5 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/10).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 5x5 output block.; *; * Optimized algorithm with 5 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/10).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:127,Performance,Optimiz,Optimized,127,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 5x5 output block.; *; * Optimized algorithm with 5 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/10).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:90,Energy Efficiency,reduce,reduced-size,90,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 4x4 output block.; *; * Optimized algorithm with 3 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 4x4 output block.; *; * Optimized algorithm with 3 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:127,Performance,Optimiz,Optimized,127,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 4x4 output block.; *; * Optimized algorithm with 3 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:90,Energy Efficiency,reduce,reduced-size,90,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 3x3 output block.; *; * Optimized algorithm with 2 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/6).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 3x3 output block.; *; * Optimized algorithm with 2 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/6).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:127,Performance,Optimiz,Optimized,127,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 3x3 output block.; *; * Optimized algorithm with 2 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/6).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:90,Energy Efficiency,reduce,reduced-size,90,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 2x2 output block.; *; * Multiplication-less algorithm.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 2x2 output block.; *; * Multiplication-less algorithm.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:90,Energy Efficiency,reduce,reduced-size,90,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 1x1 output block.; *; * We hardly need an inverse DCT routine for this: just take the; * average pixel value, which is one-eighth of the DC coefficient.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:157,Integrability,rout,routine,157,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 1x1 output block.; *; * We hardly need an inverse DCT routine for this: just take the; * average pixel value, which is one-eighth of the DC coefficient.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 1x1 output block.; *; * We hardly need an inverse DCT routine for this: just take the; * average pixel value, which is one-eighth of the DC coefficient.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 9x9 output block.; *; * Optimized algorithm with 10 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/18).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:114,Performance,Optimiz,Optimized,114,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 9x9 output block.; *; * Optimized algorithm with 10 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/18).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 10x10 output block.; *; * Optimized algorithm with 12 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/20).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:116,Performance,Optimiz,Optimized,116,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 10x10 output block.; *; * Optimized algorithm with 12 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/20).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 11x11 output block.; *; * Optimized algorithm with 24 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/22).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:116,Performance,Optimiz,Optimized,116,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 11x11 output block.; *; * Optimized algorithm with 24 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/22).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 12x12 output block.; *; * Optimized algorithm with 15 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/24).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:116,Performance,Optimiz,Optimized,116,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 12x12 output block.; *; * Optimized algorithm with 15 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/24).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 13x13 output block.; *; * Optimized algorithm with 29 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/26).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:116,Performance,Optimiz,Optimized,116,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 13x13 output block.; *; * Optimized algorithm with 29 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/26).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 14x14 output block.; *; * Optimized algorithm with 20 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/28).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:116,Performance,Optimiz,Optimized,116,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 14x14 output block.; *; * Optimized algorithm with 20 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/28).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 15x15 output block.; *; * Optimized algorithm with 22 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/30).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:116,Performance,Optimiz,Optimized,116,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 15x15 output block.; *; * Optimized algorithm with 22 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/30).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 16x16 output block.; *; * Optimized algorithm with 28 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/32).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:116,Performance,Optimiz,Optimized,116,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 16x16 output block.; *; * Optimized algorithm with 28 multiplications in the 1-D kernel.; * cK represents sqrt(2) * cos(K*pi/32).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 16x8 output block.; *; * 8-point IDCT in pass 1 (columns), 16-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:429,Usability,simpl,simplified,429,"/* Due to quantization, we will usually find that many of the input; * coefficients are zero, especially the AC terms. We can exploit this; * by short-circuiting the IDCT calculation for any column in which all; * the AC terms are zero. In that case each output is equal to the; * DC coefficient (with scale factor as needed).; * With typical images and quantization tables, half or more of the; * column DCT calculations can be simplified this way.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 14x7 output block.; *; * 7-point IDCT in pass 1 (columns), 14-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 12x6 output block.; *; * 6-point IDCT in pass 1 (columns), 12-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 10x5 output block.; *; * 5-point IDCT in pass 1 (columns), 10-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 8x4 output block.; *; * 4-point IDCT in pass 1 (columns), 8-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:153,Usability,undo,undo,153,"/* Pass 2: process rows from work array, store into output array. */; /* Note that we must descale the results by a factor of 8 == 2**3, */; /* and also undo the PASS1_BITS scaling. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:90,Energy Efficiency,reduce,reduced-size,90,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 6x3 output block.; *; * 3-point IDCT in pass 1 (columns), 6-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 6x3 output block.; *; * 3-point IDCT in pass 1 (columns), 6-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 4x2 output block.; *; * 2-point IDCT in pass 1 (columns), 4-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 2x1 output block.; *; * 1-point IDCT in pass 1 (columns), 2-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 8x16 output block.; *; * 16-point IDCT in pass 1 (columns), 8-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:153,Usability,undo,undo,153,"/* Pass 2: process rows from work array, store into output array. */; /* Note that we must descale the results by a factor of 8 == 2**3, */; /* and also undo the PASS1_BITS scaling. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 7x14 output block.; *; * 14-point IDCT in pass 1 (columns), 7-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 6x12 output block.; *; * 12-point IDCT in pass 1 (columns), 6-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 5x10 output block.; *; * 10-point IDCT in pass 1 (columns), 5-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 4x8 output block.; *; * 8-point IDCT in pass 1 (columns), 4-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:429,Usability,simpl,simplified,429,"/* Due to quantization, we will usually find that many of the input; * coefficients are zero, especially the AC terms. We can exploit this; * by short-circuiting the IDCT calculation for any column in which all; * the AC terms are zero. In that case each output is equal to the; * DC coefficient (with scale factor as needed).; * With typical images and quantization tables, half or more of the; * column DCT calculations can be simplified this way.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:90,Energy Efficiency,reduce,reduced-size,90,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 3x6 output block.; *; * 6-point IDCT in pass 1 (columns), 3-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a reduced-size 3x6 output block.; *; * 6-point IDCT in pass 1 (columns), 3-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 2x4 output block.; *; * 4-point IDCT in pass 1 (columns), 2-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:6,Performance,Perform,Perform,6,"/*; * Perform dequantization and inverse DCT on one block of coefficients,; * producing a 1x2 output block.; *; * 2-point IDCT in pass 1 (columns), 1-point in pass 2 (rows).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jinclude.h:622,Modifiability,config,config,622,"/*; * jinclude.h; *; * Copyright (C) 1991-1994, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file exists to provide a single place to fix any problems with; * including the wrong system include files. (Common problems are taken; * care of by the standard jconfig symbols, but on really weird systems; * you may have to edit this file.); *; * NOTE: this file is NOT intended to be included by applications using the; * JPEG library. Most applications need only include jpeglib.h.; */; /* Include auto-config file to find out which system include files we need. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jinclude.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jinclude.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jinclude.h:8,Deployability,configurat,configuration,8,/* auto configuration options */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jinclude.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jinclude.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jinclude.h:8,Modifiability,config,configuration,8,/* auto configuration options */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jinclude.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jinclude.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jinclude.h:309,Availability,error,error,309,"/*; * We need the NULL macro and size_t typedef.; * On an ANSI-conforming system it is sufficient to include <stddef.h>.; * Otherwise, we get them from <stdlib.h> or <stdio.h>; we may have to; * pull in <sys/types.h> as well.; * Note that the core JPEG library does not require <stdio.h>;; * only the default error handler and data source/destination modules do.; * But we must pull it in because of the references to FILE in jpeglib.h.; * You can remove those references if you want to compile without <stdio.h>.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jinclude.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jinclude.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:550,Availability,avail,available,550,"/*; * jmemmgr.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the JPEG system-independent memory management; * routines. This code is usable across a wide variety of machines; most; * of the system dependencies have been isolated in a separate file.; * The major functions provided here are:; * * pool-based allocation and freeing of memory;; * * policy decisions about how to divide available memory among the; * virtual arrays;; * * control logic for swapping virtual arrays between main memory and; * backing storage.; * The separate system-dependent file provides the actual backing-storage; * access code, and it contains the policy decision about how much total; * main memory to use.; * This file is system-dependent in the sense that some of its functions; * are unnecessary in some systems. For example, if there is enough virtual; * memory so that backing storage will never be used, much of the virtual; * array control logic could be removed. (Of course, if you have that much; * memory then you shouldn't care about a little bit of unused code...); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:277,Integrability,rout,routines,277,"/*; * jmemmgr.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the JPEG system-independent memory management; * routines. This code is usable across a wide variety of machines; most; * of the system dependencies have been isolated in a separate file.; * The major functions provided here are:; * * pool-based allocation and freeing of memory;; * * policy decisions about how to divide available memory among the; * virtual arrays;; * * control logic for swapping virtual arrays between main memory and; * backing storage.; * The separate system-dependent file provides the actual backing-storage; * access code, and it contains the policy decision about how much total; * main memory to use.; * This file is system-dependent in the sense that some of its functions; * are unnecessary in some systems. For example, if there is enough virtual; * memory so that backing storage will never be used, much of the virtual; * array control logic could be removed. (Of course, if you have that much; * memory then you shouldn't care about a little bit of unused code...); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:364,Integrability,depend,dependencies,364,"/*; * jmemmgr.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the JPEG system-independent memory management; * routines. This code is usable across a wide variety of machines; most; * of the system dependencies have been isolated in a separate file.; * The major functions provided here are:; * * pool-based allocation and freeing of memory;; * * policy decisions about how to divide available memory among the; * virtual arrays;; * * control logic for swapping virtual arrays between main memory and; * backing storage.; * The separate system-dependent file provides the actual backing-storage; * access code, and it contains the policy decision about how much total; * main memory to use.; * This file is system-dependent in the sense that some of its functions; * are unnecessary in some systems. For example, if there is enough virtual; * memory so that backing storage will never be used, much of the virtual; * array control logic could be removed. (Of course, if you have that much; * memory then you shouldn't care about a little bit of unused code...); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:710,Integrability,depend,dependent,710,"/*; * jmemmgr.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the JPEG system-independent memory management; * routines. This code is usable across a wide variety of machines; most; * of the system dependencies have been isolated in a separate file.; * The major functions provided here are:; * * pool-based allocation and freeing of memory;; * * policy decisions about how to divide available memory among the; * virtual arrays;; * * control logic for swapping virtual arrays between main memory and; * backing storage.; * The separate system-dependent file provides the actual backing-storage; * access code, and it contains the policy decision about how much total; * main memory to use.; * This file is system-dependent in the sense that some of its functions; * are unnecessary in some systems. For example, if there is enough virtual; * memory so that backing storage will never be used, much of the virtual; * array control logic could be removed. (Of course, if you have that much; * memory then you shouldn't care about a little bit of unused code...); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:880,Integrability,depend,dependent,880,"/*; * jmemmgr.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the JPEG system-independent memory management; * routines. This code is usable across a wide variety of machines; most; * of the system dependencies have been isolated in a separate file.; * The major functions provided here are:; * * pool-based allocation and freeing of memory;; * * policy decisions about how to divide available memory among the; * virtual arrays;; * * control logic for swapping virtual arrays between main memory and; * backing storage.; * The separate system-dependent file provides the actual backing-storage; * access code, and it contains the policy decision about how much total; * main memory to use.; * This file is system-dependent in the sense that some of its functions; * are unnecessary in some systems. For example, if there is enough virtual; * memory so that backing storage will never be used, much of the virtual; * array control logic could be removed. (Of course, if you have that much; * memory then you shouldn't care about a little bit of unused code...); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:764,Security,access,access,764,"/*; * jmemmgr.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the JPEG system-independent memory management; * routines. This code is usable across a wide variety of machines; most; * of the system dependencies have been isolated in a separate file.; * The major functions provided here are:; * * pool-based allocation and freeing of memory;; * * policy decisions about how to divide available memory among the; * virtual arrays;; * * control logic for swapping virtual arrays between main memory and; * backing storage.; * The separate system-dependent file provides the actual backing-storage; * access code, and it contains the policy decision about how much total; * main memory to use.; * This file is system-dependent in the sense that some of its functions; * are unnecessary in some systems. For example, if there is enough virtual; * memory so that backing storage will never be used, much of the virtual; * array control logic could be removed. (Of course, if you have that much; * memory then you shouldn't care about a little bit of unused code...); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:609,Testability,log,logic,609,"/*; * jmemmgr.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the JPEG system-independent memory management; * routines. This code is usable across a wide variety of machines; most; * of the system dependencies have been isolated in a separate file.; * The major functions provided here are:; * * pool-based allocation and freeing of memory;; * * policy decisions about how to divide available memory among the; * virtual arrays;; * * control logic for swapping virtual arrays between main memory and; * backing storage.; * The separate system-dependent file provides the actual backing-storage; * access code, and it contains the policy decision about how much total; * main memory to use.; * This file is system-dependent in the sense that some of its functions; * are unnecessary in some systems. For example, if there is enough virtual; * memory so that backing storage will never be used, much of the virtual; * array control logic could be removed. (Of course, if you have that much; * memory then you shouldn't care about a little bit of unused code...); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1097,Testability,log,logic,1097,"/*; * jmemmgr.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the JPEG system-independent memory management; * routines. This code is usable across a wide variety of machines; most; * of the system dependencies have been isolated in a separate file.; * The major functions provided here are:; * * pool-based allocation and freeing of memory;; * * policy decisions about how to divide available memory among the; * virtual arrays;; * * control logic for swapping virtual arrays between main memory and; * backing storage.; * The separate system-dependent file provides the actual backing-storage; * access code, and it contains the policy decision about how much total; * main memory to use.; * This file is system-dependent in the sense that some of its functions; * are unnecessary in some systems. For example, if there is enough virtual; * memory so that backing storage will never be used, much of the virtual; * array control logic could be removed. (Of course, if you have that much; * memory then you shouldn't care about a little bit of unused code...); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:300,Usability,usab,usable,300,"/*; * jmemmgr.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the JPEG system-independent memory management; * routines. This code is usable across a wide variety of machines; most; * of the system dependencies have been isolated in a separate file.; * The major functions provided here are:; * * pool-based allocation and freeing of memory;; * * policy decisions about how to divide available memory among the; * virtual arrays;; * * control logic for swapping virtual arrays between main memory and; * backing storage.; * The separate system-dependent file provides the actual backing-storage; * access code, and it contains the policy decision about how much total; * main memory to use.; * This file is system-dependent in the sense that some of its functions; * are unnecessary in some systems. For example, if there is enough virtual; * memory so that backing storage will never be used, much of the virtual; * array control logic could be removed. (Of course, if you have that much; * memory then you shouldn't care about a little bit of unused code...); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:21,Integrability,depend,dependent,21,/* import the system-dependent declarations */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:46,Integrability,rout,routines,46,"/*; * Some important notes:; * The allocation routines provided here must never return NULL.; * They should exit to error_exit if unsuccessful.; *; * It's not a good idea to try to merge the sarray and barray routines,; * even though they are textually almost the same, because samples are; * usually stored as bytes while coefficients are shorts or ints. Thus,; * in machines where byte pointers have a different representation from; * word pointers, the resulting machine code could not be the same.; */; /*; * Many machines require storage alignment: longs must start on 4-byte; * boundaries, doubles on 8-byte boundaries, etc. On such machines, malloc(); * always returns pointers that are multiples of the worst-case alignment; * requirement, and we had better do so too.; * There isn't any really portable way to determine the worst-case alignment; * requirement. This module assumes that the alignment requirement is; * multiples of sizeof(ALIGN_TYPE).; * By default, we define ALIGN_TYPE as double. This is necessary on some; * workstations (where doubles really do need 8-byte alignment) and will work; * fine on nearly everything. If your machine has lesser alignment needs,; * you can save a few bytes by making ALIGN_TYPE smaller.; * The only place I know of where this will NOT work is certain Macintosh; * 680x0 compilers that define double as a 10-byte IEEE extended float.; * Doing 10-byte alignment is counterproductive because longwords won't be; * aligned well. Put ""#define ALIGN_TYPE long"" in jconfig.h if you have; * such a compiler.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:209,Integrability,rout,routines,209,"/*; * Some important notes:; * The allocation routines provided here must never return NULL.; * They should exit to error_exit if unsuccessful.; *; * It's not a good idea to try to merge the sarray and barray routines,; * even though they are textually almost the same, because samples are; * usually stored as bytes while coefficients are shorts or ints. Thus,; * in machines where byte pointers have a different representation from; * word pointers, the resulting machine code could not be the same.; */; /*; * Many machines require storage alignment: longs must start on 4-byte; * boundaries, doubles on 8-byte boundaries, etc. On such machines, malloc(); * always returns pointers that are multiples of the worst-case alignment; * requirement, and we had better do so too.; * There isn't any really portable way to determine the worst-case alignment; * requirement. This module assumes that the alignment requirement is; * multiples of sizeof(ALIGN_TYPE).; * By default, we define ALIGN_TYPE as double. This is necessary on some; * workstations (where doubles really do need 8-byte alignment) and will work; * fine on nearly everything. If your machine has lesser alignment needs,; * you can save a few bytes by making ALIGN_TYPE smaller.; * The only place I know of where this will NOT work is certain Macintosh; * 680x0 compilers that define double as a 10-byte IEEE extended float.; * Doing 10-byte alignment is counterproductive because longwords won't be; * aligned well. Put ""#define ALIGN_TYPE long"" in jconfig.h if you have; * such a compiler.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:803,Modifiability,portab,portable,803,"/*; * Some important notes:; * The allocation routines provided here must never return NULL.; * They should exit to error_exit if unsuccessful.; *; * It's not a good idea to try to merge the sarray and barray routines,; * even though they are textually almost the same, because samples are; * usually stored as bytes while coefficients are shorts or ints. Thus,; * in machines where byte pointers have a different representation from; * word pointers, the resulting machine code could not be the same.; */; /*; * Many machines require storage alignment: longs must start on 4-byte; * boundaries, doubles on 8-byte boundaries, etc. On such machines, malloc(); * always returns pointers that are multiples of the worst-case alignment; * requirement, and we had better do so too.; * There isn't any really portable way to determine the worst-case alignment; * requirement. This module assumes that the alignment requirement is; * multiples of sizeof(ALIGN_TYPE).; * By default, we define ALIGN_TYPE as double. This is necessary on some; * workstations (where doubles really do need 8-byte alignment) and will work; * fine on nearly everything. If your machine has lesser alignment needs,; * you can save a few bytes by making ALIGN_TYPE smaller.; * The only place I know of where this will NOT work is certain Macintosh; * 680x0 compilers that define double as a 10-byte IEEE extended float.; * Doing 10-byte alignment is counterproductive because longwords won't be; * aligned well. Put ""#define ALIGN_TYPE long"" in jconfig.h if you have; * such a compiler.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1373,Modifiability,extend,extended,1373,"/*; * Some important notes:; * The allocation routines provided here must never return NULL.; * They should exit to error_exit if unsuccessful.; *; * It's not a good idea to try to merge the sarray and barray routines,; * even though they are textually almost the same, because samples are; * usually stored as bytes while coefficients are shorts or ints. Thus,; * in machines where byte pointers have a different representation from; * word pointers, the resulting machine code could not be the same.; */; /*; * Many machines require storage alignment: longs must start on 4-byte; * boundaries, doubles on 8-byte boundaries, etc. On such machines, malloc(); * always returns pointers that are multiples of the worst-case alignment; * requirement, and we had better do so too.; * There isn't any really portable way to determine the worst-case alignment; * requirement. This module assumes that the alignment requirement is; * multiples of sizeof(ALIGN_TYPE).; * By default, we define ALIGN_TYPE as double. This is necessary on some; * workstations (where doubles really do need 8-byte alignment) and will work; * fine on nearly everything. If your machine has lesser alignment needs,; * you can save a few bytes by making ALIGN_TYPE smaller.; * The only place I know of where this will NOT work is certain Macintosh; * 680x0 compilers that define double as a 10-byte IEEE extended float.; * Doing 10-byte alignment is counterproductive because longwords won't be; * aligned well. Put ""#define ALIGN_TYPE long"" in jconfig.h if you have; * such a compiler.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:9,Energy Efficiency,allocate,allocate,9,"/*; * We allocate objects from ""pools"", where each pool is gotten with a single; * request to jpeg_get_small() or jpeg_get_large(). There is no per-object; * overhead within a pool, except for alignment padding. Each pool has a; * header with a link to the next pool of the same class.; * Small and large pool headers are identical except that the latter's; * link pointer must be FAR on 80x86 machines.; * Notice that the ""real"" header fields are union'ed with a dummy ALIGN_TYPE; * field. This forces the compiler to make SIZEOF(small_pool_hdr) a multiple; * of the alignment requirement of ALIGN_TYPE.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:15,Availability,avail,available,15,/* bytes still available in this pool */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:15,Availability,avail,available,15,/* bytes still available in this pool */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:76,Integrability,rout,routines,76,/* alloc_sarray and alloc_barray set this value for use by virtual; * array routines.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:75,Energy Efficiency,allocate,allocated,75,"/*; * The control blocks for virtual arrays.; * Note that these blocks are allocated in the ""small"" pool area.; * System-dependent info for the associated backing store (if any) is hidden; * inside the backing_store_info struct.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:121,Integrability,depend,dependent,121,"/*; * The control blocks for virtual arrays.; * Note that these blocks are allocated in the ""small"" pool area.; * System-dependent info for the associated backing store (if any) is hidden; * inside the backing_store_info struct.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:12,Security,access,accessed,12,/* max rows accessed by access_virt_sarray */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:9,Testability,log,logical,9,/* first logical row # in the buffer */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:10,Integrability,depend,dependent,10,/* System-dependent control info */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:12,Security,access,accessed,12,/* max rows accessed by access_virt_barray */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:9,Testability,log,logical,9,/* first logical row # in the buffer */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:10,Integrability,depend,dependent,10,/* System-dependent control info */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:127,Integrability,message,message,127,"/* Since this is only a debugging stub, we can cheat a little by using; * fprintf directly rather than going through the trace message code.; * This is helpful because message parm array can't handle longs.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:168,Integrability,message,message,168,"/* Since this is only a debugging stub, we can cheat a little by using; * fprintf directly rather than going through the trace message code.; * This is helpful because message parm array can't handle longs.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:34,Testability,stub,stub,34,"/* Since this is only a debugging stub, we can cheat a little by using; * fprintf directly rather than going through the trace message code.; * This is helpful because message parm array can't handle longs.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:27,Availability,error,error,27,"/* Report an out-of-memory error and stop execution */; /* If we compiled MEM_STATS support, report alloc requests before dying */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:21,Safety,avoid,avoid,21,/* greater than 0 to avoid futile looping */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Energy Efficiency,Allocate,Allocate,3,"/* Allocate a ""small"" object */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:19,Availability,avail,available,19,/* See if space is available in any existing pool */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Safety,safe,safety,3,/* safety check */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:29,Energy Efficiency,reduce,reduce,29,"/* Try to get space, if fail reduce slop and try again */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:7,Energy Efficiency,allocate,allocate,7,"/* OK, allocate the object from the current pool */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:512,Integrability,rout,routines,512,"/*; * Allocation of ""large"" objects.; *; * The external semantics of these are the same as ""small"" objects,; * except that FAR pointers are used on 80x86. However the pool; * management heuristics are quite different. We assume that each; * request is large enough that it may as well be passed directly to; * jpeg_get_large; the pool management just links everything together; * so that we can free it all on demand.; * Note: the major use of ""large"" objects is in JSAMPARRAY and JBLOCKARRAY; * structures. The routines that create these structures (see below); * deliberately bunch rows together to ensure a large request size.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Energy Efficiency,Allocate,Allocate,3,"/* Allocate a ""large"" object */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Safety,safe,safety,3,/* safety check */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:196,Energy Efficiency,allocate,allocate,196,"/*; * Creation of 2-D sample arrays.; * The pointers are in near heap, the samples themselves in FAR heap.; *; * To minimize allocation overhead and to allow I/O of large contiguous; * blocks, we allocate the sample rows in groups of as many rows as possible; * without exceeding MAX_ALLOC_CHUNK total bytes per allocation request.; * NB: the virtual array control routines, later in this file, know about; * this chunking of rows. The rowsperchunk value is left in the mem manager; * object so that it can be saved away if this sarray is the workspace for; * a virtual array.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:365,Integrability,rout,routines,365,"/*; * Creation of 2-D sample arrays.; * The pointers are in near heap, the samples themselves in FAR heap.; *; * To minimize allocation overhead and to allow I/O of large contiguous; * blocks, we allocate the sample rows in groups of as many rows as possible; * without exceeding MAX_ALLOC_CHUNK total bytes per allocation request.; * NB: the virtual array control routines, later in this file, know about; * this chunking of rows. The rowsperchunk value is left in the mem manager; * object so that it can be saved away if this sarray is the workspace for; * a virtual array.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate a 2-D sample array */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate a 2-D coefficient-block array */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:95,Energy Efficiency,allocate,allocate,95,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1969,Energy Efficiency,efficient,efficiently,1969,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:69,Integrability,rout,routines,69,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:573,Integrability,rout,routines,573,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:776,Integrability,rout,routines,776,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1051,Integrability,rout,routines,1051,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1206,Integrability,rout,routines,1206,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1365,Integrability,rout,routines,1365,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1329,Modifiability,rewrite,rewrite,1329,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1670,Performance,perform,performance,1670,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:251,Security,access,accessed,251,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:347,Security,access,accesses,347,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:666,Security,access,accessed,666,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1112,Security,access,accessible,1112,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1199,Security,access,access,1199,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1268,Security,access,accessed,1268,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1358,Security,access,access,1358,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1424,Security,access,accessed,1424,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1497,Security,access,access,1497,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1575,Security,access,access,1575,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1778,Security,access,access,1778,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1818,Security,access,accesses,1818,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1902,Security,access,access,1902,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1716,Testability,log,logic,1716,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1687,Usability,simpl,simple,1687,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Safety,safe,safety,3,/* safety check */; /* get control block */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Safety,safe,safety,3,/* safety check */; /* get control block */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate the in-memory buffers for any unrealized virtual arrays */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:173,Integrability,depend,dependent,173,/* Compute the minimum space needed (maxaccess rows in each buffer); * and the maximum space needed (full image height in each buffer).; * These may be of use to the system-dependent jpeg_mem_available routine.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:202,Integrability,rout,routine,202,/* Compute the minimum space needed (maxaccess rows in each buffer); * and the maximum space needed (full image height in each buffer).; * These may be of use to the system-dependent jpeg_mem_available routine.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:99,Integrability,depend,dependent,99,"/* no unrealized arrays, no work */; /* Determine amount of memory to actually use; this is system-dependent. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:34,Availability,avail,available,34,"/* If the maximum space needed is available, make all the buffers full; * height; otherwise parcel it out with the same number of minheights; * in each buffer.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:94,Testability,stub,stub,94,"/* If there doesn't seem to be enough space, try to get the minimum; * anyway. This allows a ""stub"" implementation of jpeg_mem_available().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate the in-memory buffers and initialize backing store as needed. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:78,Modifiability,extend,extending,78,/* Access the part of a virtual sample array starting at start_row */; /* and extending for num_rows rows. writable is true if */; /* caller intends to modify the accessed area. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Security,Access,Access,3,/* Access the part of a virtual sample array starting at start_row */; /* and extending for num_rows rows. writable is true if */; /* caller intends to modify the accessed area. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:163,Security,access,accessed,163,/* Access the part of a virtual sample array starting at start_row */; /* and extending for num_rows rows. writable is true if */; /* caller intends to modify the accessed area. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:46,Security,access,accessible,46,/* Make the desired part of the virtual array accessible */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:122,Performance,load,load,122,"/* Decide what part of virtual array to access.; * Algorithm: if target address > current window, assume forward scan,; * load starting at target address. If target address < current window,; * assume backward scan, load so that target area is top of window.; * Note that when switching from forward write to forward read, will have; * start_row = 0, so the limiting case applies and we load from 0 anyway.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:216,Performance,load,load,216,"/* Decide what part of virtual array to access.; * Algorithm: if target address > current window, assume forward scan,; * load starting at target address. If target address < current window,; * assume backward scan, load so that target area is top of window.; * Note that when switching from forward write to forward read, will have; * start_row = 0, so the limiting case applies and we load from 0 anyway.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:387,Performance,load,load,387,"/* Decide what part of virtual array to access.; * Algorithm: if target address > current window, assume forward scan,; * load starting at target address. If target address < current window,; * assume backward scan, load so that target area is top of window.; * Note that when switching from forward write to forward read, will have; * start_row = 0, so the limiting case applies and we load from 0 anyway.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:40,Security,access,access,40,"/* Decide what part of virtual array to access.; * Algorithm: if target address > current window, assume forward scan,; * load starting at target address. If target address < current window,; * assume backward scan, load so that target area is top of window.; * Note that when switching from forward write to forward read, will have; * start_row = 0, so the limiting case applies and we load from 0 anyway.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:31,Safety,avoid,avoid,31,/* use long arithmetic here to avoid overflow & unsigned problems */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:14,Security,access,accessed,14,"/* Ensure the accessed part of the array is defined; prezero if needed.; * To improve locality of access, we only prezero the part of the array; * that the caller is about to access, not the entire in-memory array.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:98,Security,access,access,98,"/* Ensure the accessed part of the array is defined; prezero if needed.; * To improve locality of access, we only prezero the part of the array; * that the caller is about to access, not the entire in-memory array.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:175,Security,access,access,175,"/* Ensure the accessed part of the array is defined; prezero if needed.; * To improve locality of access, we only prezero the part of the array; * that the caller is about to access, not the entire in-memory array.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:77,Modifiability,extend,extending,77,/* Access the part of a virtual block array starting at start_row */; /* and extending for num_rows rows. writable is true if */; /* caller intends to modify the accessed area. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Security,Access,Access,3,/* Access the part of a virtual block array starting at start_row */; /* and extending for num_rows rows. writable is true if */; /* caller intends to modify the accessed area. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:162,Security,access,accessed,162,/* Access the part of a virtual block array starting at start_row */; /* and extending for num_rows rows. writable is true if */; /* caller intends to modify the accessed area. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:46,Security,access,accessible,46,/* Make the desired part of the virtual array accessible */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:122,Performance,load,load,122,"/* Decide what part of virtual array to access.; * Algorithm: if target address > current window, assume forward scan,; * load starting at target address. If target address < current window,; * assume backward scan, load so that target area is top of window.; * Note that when switching from forward write to forward read, will have; * start_row = 0, so the limiting case applies and we load from 0 anyway.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:216,Performance,load,load,216,"/* Decide what part of virtual array to access.; * Algorithm: if target address > current window, assume forward scan,; * load starting at target address. If target address < current window,; * assume backward scan, load so that target area is top of window.; * Note that when switching from forward write to forward read, will have; * start_row = 0, so the limiting case applies and we load from 0 anyway.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:387,Performance,load,load,387,"/* Decide what part of virtual array to access.; * Algorithm: if target address > current window, assume forward scan,; * load starting at target address. If target address < current window,; * assume backward scan, load so that target area is top of window.; * Note that when switching from forward write to forward read, will have; * start_row = 0, so the limiting case applies and we load from 0 anyway.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:40,Security,access,access,40,"/* Decide what part of virtual array to access.; * Algorithm: if target address > current window, assume forward scan,; * load starting at target address. If target address < current window,; * assume backward scan, load so that target area is top of window.; * Note that when switching from forward write to forward read, will have; * start_row = 0, so the limiting case applies and we load from 0 anyway.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:31,Safety,avoid,avoid,31,/* use long arithmetic here to avoid overflow & unsigned problems */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:14,Security,access,accessed,14,"/* Ensure the accessed part of the array is defined; prezero if needed.; * To improve locality of access, we only prezero the part of the array; * that the caller is about to access, not the entire in-memory array.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:98,Security,access,access,98,"/* Ensure the accessed part of the array is defined; prezero if needed.; * To improve locality of access, we only prezero the part of the array; * that the caller is about to access, not the entire in-memory array.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:175,Security,access,access,175,"/* Ensure the accessed part of the array is defined; prezero if needed.; * To improve locality of access, we only prezero the part of the array; * that the caller is about to access, not the entire in-memory array.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:6,Deployability,Release,Release,6,/*; * Release all objects belonging to a specified pool.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Safety,safe,safety,3,/* safety check */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:30,Availability,error,error,30,/* prevent recursive close if error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:30,Availability,error,error,30,/* prevent recursive close if error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Deployability,Release,Release,3,/* Release large objects */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Deployability,Release,Release,3,/* Release small objects */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:28,Deployability,release,release,28,"/* Close all backing store, release all memory.; * Releasing pools in reverse order might help avoid fragmentation; * with some (brain-damaged) malloc libraries.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:95,Safety,avoid,avoid,95,"/* Close all backing store, release all memory.; * Releasing pools in reverse order might help avoid fragmentation; * with some (brain-damaged) malloc libraries.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Deployability,Release,Release,3,/* Release the memory manager control block too. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:10,Integrability,depend,dependent,10,/* system-dependent cleanup */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:70,Availability,error,error,70,"/*; * Memory manager initialization.; * When this is called, only the error manager pointer is valid in cinfo!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:59,Availability,error,errors,59,"/* for safety if init fails */; /* Check for configuration errors.; * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably; * doesn't reflect any real hardware alignment requirement.; * The test is a little tricky: for X>0, X and X-1 have no one-bits; * in common if and only if X is a power of 2, ie has only one one-bit.; * Some compilers may give an ""unreachable code"" warning here; ignore it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:45,Deployability,configurat,configuration,45,"/* for safety if init fails */; /* Check for configuration errors.; * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably; * doesn't reflect any real hardware alignment requirement.; * The test is a little tricky: for X>0, X and X-1 have no one-bits; * in common if and only if X is a power of 2, ie has only one one-bit.; * Some compilers may give an ""unreachable code"" warning here; ignore it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:101,Energy Efficiency,power,power,101,"/* for safety if init fails */; /* Check for configuration errors.; * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably; * doesn't reflect any real hardware alignment requirement.; * The test is a little tricky: for X>0, X and X-1 have no one-bits; * in common if and only if X is a power of 2, ie has only one one-bit.; * Some compilers may give an ""unreachable code"" warning here; ignore it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:299,Energy Efficiency,power,power,299,"/* for safety if init fails */; /* Check for configuration errors.; * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably; * doesn't reflect any real hardware alignment requirement.; * The test is a little tricky: for X>0, X and X-1 have no one-bits; * in common if and only if X is a power of 2, ie has only one one-bit.; * Some compilers may give an ""unreachable code"" warning here; ignore it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:45,Modifiability,config,configuration,45,"/* for safety if init fails */; /* Check for configuration errors.; * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably; * doesn't reflect any real hardware alignment requirement.; * The test is a little tricky: for X>0, X and X-1 have no one-bits; * in common if and only if X is a power of 2, ie has only one one-bit.; * Some compilers may give an ""unreachable code"" warning here; ignore it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:7,Safety,safe,safety,7,"/* for safety if init fails */; /* Check for configuration errors.; * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably; * doesn't reflect any real hardware alignment requirement.; * The test is a little tricky: for X>0, X and X-1 have no one-bits; * in common if and only if X is a power of 2, ie has only one one-bit.; * Some compilers may give an ""unreachable code"" warning here; ignore it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:203,Testability,test,test,203,"/* for safety if init fails */; /* Check for configuration errors.; * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably; * doesn't reflect any real hardware alignment requirement.; * The test is a little tricky: for X>0, X and X-1 have no one-bits; * in common if and only if X is a power of 2, ie has only one one-bit.; * Some compilers may give an ""unreachable code"" warning here; ignore it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:53,Energy Efficiency,allocate,allocate,53,/* system-dependent initialization */; /* Attempt to allocate memory manager's control block */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:10,Integrability,depend,dependent,10,/* system-dependent initialization */; /* Attempt to allocate memory manager's control block */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:10,Integrability,depend,dependent,10,/* system-dependent cleanup */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:24,Security,access,accessible,24,/* Make MAX_ALLOC_CHUNK accessible to other modules */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:28,Modifiability,variab,variable,28,"/* Check for an environment variable JPEGMEM; if found, override the; * default max_memory setting from jpeg_mem_init. Note that the; * surrounding application may again override this value.; * If your system doesn't support getenv(), define NO_GETENV to disable; * this feature.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c:278,Integrability,depend,dependent,278,"/*; * jmemnobs.c; *; * Copyright (C) 1992-1996, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file provides a really simple implementation of the system-; * dependent portion of the JPEG memory manager. This implementation; * assumes that no backing-store files are needed: all required space; * can be obtained from malloc().; * This is very portable in the sense that it'll compile on almost anything,; * but you'd better have lots of main memory (or virtual memory) if you want; * to process big images.; * Note that the max_memory_to_use option is ignored by this implementation.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c:464,Modifiability,portab,portable,464,"/*; * jmemnobs.c; *; * Copyright (C) 1992-1996, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file provides a really simple implementation of the system-; * dependent portion of the JPEG memory manager. This implementation; * assumes that no backing-store files are needed: all required space; * can be obtained from malloc().; * This is very portable in the sense that it'll compile on almost anything,; * but you'd better have lots of main memory (or virtual memory) if you want; * to process big images.; * Note that the max_memory_to_use option is ignored by this implementation.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c:238,Usability,simpl,simple,238,"/*; * jmemnobs.c; *; * Copyright (C) 1992-1996, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file provides a really simple implementation of the system-; * dependent portion of the JPEG memory manager. This implementation; * assumes that no backing-store files are needed: all required space; * can be obtained from malloc().; * This is very portable in the sense that it'll compile on almost anything,; * but you'd better have lots of main memory (or virtual memory) if you want; * to process big images.; * Note that the max_memory_to_use option is ignored by this implementation.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c:21,Integrability,depend,dependent,21,/* import the system-dependent declarations */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c:77,Integrability,rout,routines,77,/*; * Memory allocation and freeing are controlled by the regular library; * routines malloc() and free().; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c:107,Integrability,rout,routine,107,"/*; * ""Large"" objects are treated the same as ""small"" ones.; * NB: although we include FAR keywords in the routine declarations,; * this file won't actually work in 80x86 small/medium model; at least,; * you probably won't be able to process useful-size images in only 64KB.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c:51,Availability,avail,available,51,"/*; * This routine computes the total memory space available for allocation.; * Here we always say, ""we got all you want bud!""; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c:11,Integrability,rout,routine,11,"/*; * This routine computes the total memory space available for allocation.; * Here we always say, ""we got all you want bud!""; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c:150,Availability,error,error,150,"/*; * Backing store (temporary file) management.; * Since jpeg_mem_available always promised the moon,; * this should never be called and we can just error out.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c:12,Integrability,rout,routines,12,"/*; * These routines take care of any system-dependent initialization and; * cleanup required. Here, there isn't any.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c:45,Integrability,depend,dependent,45,"/*; * These routines take care of any system-dependent initialization and; * cleanup required. Here, there isn't any.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemnobs.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:772,Deployability,configurat,configuration,772,"/*; * jmemsys.h; *; * Copyright (C) 1992-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This include file defines the interface between the system-independent; * and system-dependent portions of the JPEG memory manager. No other; * modules need include it. (The system-independent portion is jmemmgr.c;; * there are several different versions of the system-dependent portion.); *; * This file works as-is for the system-dependent memory managers supplied; * in the IJG distribution. You may need to modify it if you write a; * custom memory manager. If system-dependent changes are needed in; * this file, the best method is to #ifdef them based on a configuration; * symbol supplied in jconfig.h, as we have done with USE_MSDOS_MEMMGR; * and USE_MAC_MEMMGR.; */; /* Short forms of external names for systems with brain-damaged linkers. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:239,Integrability,interface,interface,239,"/*; * jmemsys.h; *; * Copyright (C) 1992-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This include file defines the interface between the system-independent; * and system-dependent portions of the JPEG memory manager. No other; * modules need include it. (The system-independent portion is jmemmgr.c;; * there are several different versions of the system-dependent portion.); *; * This file works as-is for the system-dependent memory managers supplied; * in the IJG distribution. You may need to modify it if you write a; * custom memory manager. If system-dependent changes are needed in; * this file, the best method is to #ifdef them based on a configuration; * symbol supplied in jconfig.h, as we have done with USE_MSDOS_MEMMGR; * and USE_MAC_MEMMGR.; */; /* Short forms of external names for systems with brain-damaged linkers. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:294,Integrability,depend,dependent,294,"/*; * jmemsys.h; *; * Copyright (C) 1992-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This include file defines the interface between the system-independent; * and system-dependent portions of the JPEG memory manager. No other; * modules need include it. (The system-independent portion is jmemmgr.c;; * there are several different versions of the system-dependent portion.); *; * This file works as-is for the system-dependent memory managers supplied; * in the IJG distribution. You may need to modify it if you write a; * custom memory manager. If system-dependent changes are needed in; * this file, the best method is to #ifdef them based on a configuration; * symbol supplied in jconfig.h, as we have done with USE_MSDOS_MEMMGR; * and USE_MAC_MEMMGR.; */; /* Short forms of external names for systems with brain-damaged linkers. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:478,Integrability,depend,dependent,478,"/*; * jmemsys.h; *; * Copyright (C) 1992-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This include file defines the interface between the system-independent; * and system-dependent portions of the JPEG memory manager. No other; * modules need include it. (The system-independent portion is jmemmgr.c;; * there are several different versions of the system-dependent portion.); *; * This file works as-is for the system-dependent memory managers supplied; * in the IJG distribution. You may need to modify it if you write a; * custom memory manager. If system-dependent changes are needed in; * this file, the best method is to #ifdef them based on a configuration; * symbol supplied in jconfig.h, as we have done with USE_MSDOS_MEMMGR; * and USE_MAC_MEMMGR.; */; /* Short forms of external names for systems with brain-damaged linkers. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:541,Integrability,depend,dependent,541,"/*; * jmemsys.h; *; * Copyright (C) 1992-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This include file defines the interface between the system-independent; * and system-dependent portions of the JPEG memory manager. No other; * modules need include it. (The system-independent portion is jmemmgr.c;; * there are several different versions of the system-dependent portion.); *; * This file works as-is for the system-dependent memory managers supplied; * in the IJG distribution. You may need to modify it if you write a; * custom memory manager. If system-dependent changes are needed in; * this file, the best method is to #ifdef them based on a configuration; * symbol supplied in jconfig.h, as we have done with USE_MSDOS_MEMMGR; * and USE_MAC_MEMMGR.; */; /* Short forms of external names for systems with brain-damaged linkers. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:681,Integrability,depend,dependent,681,"/*; * jmemsys.h; *; * Copyright (C) 1992-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This include file defines the interface between the system-independent; * and system-dependent portions of the JPEG memory manager. No other; * modules need include it. (The system-independent portion is jmemmgr.c;; * there are several different versions of the system-dependent portion.); *; * This file works as-is for the system-dependent memory managers supplied; * in the IJG distribution. You may need to modify it if you write a; * custom memory manager. If system-dependent changes are needed in; * this file, the best method is to #ifdef them based on a configuration; * symbol supplied in jconfig.h, as we have done with USE_MSDOS_MEMMGR; * and USE_MAC_MEMMGR.; */; /* Short forms of external names for systems with brain-damaged linkers. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:772,Modifiability,config,configuration,772,"/*; * jmemsys.h; *; * Copyright (C) 1992-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This include file defines the interface between the system-independent; * and system-dependent portions of the JPEG memory manager. No other; * modules need include it. (The system-independent portion is jmemmgr.c;; * there are several different versions of the system-dependent portion.); *; * This file works as-is for the system-dependent memory managers supplied; * in the IJG distribution. You may need to modify it if you write a; * custom memory manager. If system-dependent changes are needed in; * this file, the best method is to #ifdef them based on a configuration; * symbol supplied in jconfig.h, as we have done with USE_MSDOS_MEMMGR; * and USE_MAC_MEMMGR.; */; /* Short forms of external names for systems with brain-damaged linkers. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:400,Availability,failure,failure,400,"/* NEED_SHORT_EXTERNAL_NAMES */; /*; * These two functions are used to allocate and release small chunks of; * memory. (Typically the total amount requested through jpeg_get_small is; * no more than 20K or so; this will be requested in chunks of a few K each.); * Behavior should be the same as for the standard library functions malloc; * and free; in particular, jpeg_get_small must return NULL on failure.; * On most systems, these ARE malloc and free. jpeg_free_small is passed the; * size of the object being freed, just in case it's needed.; * On an 80x86 machine using small-data memory model, these manage near heap.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:84,Deployability,release,release,84,"/* NEED_SHORT_EXTERNAL_NAMES */; /*; * These two functions are used to allocate and release small chunks of; * memory. (Typically the total amount requested through jpeg_get_small is; * no more than 20K or so; this will be requested in chunks of a few K each.); * Behavior should be the same as for the standard library functions malloc; * and free; in particular, jpeg_get_small must return NULL on failure.; * On most systems, these ARE malloc and free. jpeg_free_small is passed the; * size of the object being freed, just in case it's needed.; * On an 80x86 machine using small-data memory model, these manage near heap.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:71,Energy Efficiency,allocate,allocate,71,"/* NEED_SHORT_EXTERNAL_NAMES */; /*; * These two functions are used to allocate and release small chunks of; * memory. (Typically the total amount requested through jpeg_get_small is; * no more than 20K or so; this will be requested in chunks of a few K each.); * Behavior should be the same as for the standard library functions malloc; * and free; in particular, jpeg_get_small must return NULL on failure.; * On most systems, these ARE malloc and free. jpeg_free_small is passed the; * size of the object being freed, just in case it's needed.; * On an 80x86 machine using small-data memory model, these manage near heap.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:51,Deployability,release,release,51,"/*; * These two functions are used to allocate and release large chunks of; * memory (up to the total free space designated by jpeg_mem_available).; * The interface is the same as above, except that on an 80x86 machine,; * far pointers are used. On most other machines these are identical to; * the jpeg_get/free_small routines; but we keep them separate anyway,; * in case a different allocation strategy is desirable for large chunks.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:38,Energy Efficiency,allocate,allocate,38,"/*; * These two functions are used to allocate and release large chunks of; * memory (up to the total free space designated by jpeg_mem_available).; * The interface is the same as above, except that on an 80x86 machine,; * far pointers are used. On most other machines these are identical to; * the jpeg_get/free_small routines; but we keep them separate anyway,; * in case a different allocation strategy is desirable for large chunks.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:155,Integrability,interface,interface,155,"/*; * These two functions are used to allocate and release large chunks of; * memory (up to the total free space designated by jpeg_mem_available).; * The interface is the same as above, except that on an 80x86 machine,; * far pointers are used. On most other machines these are identical to; * the jpeg_get/free_small routines; but we keep them separate anyway,; * in case a different allocation strategy is desirable for large chunks.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:319,Integrability,rout,routines,319,"/*; * These two functions are used to allocate and release large chunks of; * memory (up to the total free space designated by jpeg_mem_available).; * The interface is the same as above, except that on an 80x86 machine,; * far pointers are used. On most other machines these are identical to; * the jpeg_get/free_small routines; but we keep them separate anyway,; * in case a different allocation strategy is desirable for large chunks.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:50,Availability,avail,available,50,"/*; * This routine computes the total space still available for allocation by; * jpeg_get_large. If more space than this is needed, backing store will be; * used. NOTE: any memory already allocated must not be counted.; *; * There is a minimum space requirement, corresponding to the minimum; * feasible buffer sizes; jmemmgr.c will request that much space even if; * jpeg_mem_available returns zero. The maximum space needed, enough to hold; * all working storage in memory, is also passed in case it is useful.; * Finally, the total space already allocated is passed. If no better; * method is available, cinfo->mem->max_memory_to_use - already_allocated; * is often a suitable calculation.; *; * It is OK for jpeg_mem_available to underestimate the space available; * (that'll just lead to more backing-store access than is really necessary).; * However, an overestimate will lead to failure. Hence it's wise to subtract; * a slop factor from the true available space. 5% should be enough.; *; * On machines with lots of virtual memory, any large constant may be returned.; * Conversely, zero may be returned to always use the minimum amount of memory.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:596,Availability,avail,available,596,"/*; * This routine computes the total space still available for allocation by; * jpeg_get_large. If more space than this is needed, backing store will be; * used. NOTE: any memory already allocated must not be counted.; *; * There is a minimum space requirement, corresponding to the minimum; * feasible buffer sizes; jmemmgr.c will request that much space even if; * jpeg_mem_available returns zero. The maximum space needed, enough to hold; * all working storage in memory, is also passed in case it is useful.; * Finally, the total space already allocated is passed. If no better; * method is available, cinfo->mem->max_memory_to_use - already_allocated; * is often a suitable calculation.; *; * It is OK for jpeg_mem_available to underestimate the space available; * (that'll just lead to more backing-store access than is really necessary).; * However, an overestimate will lead to failure. Hence it's wise to subtract; * a slop factor from the true available space. 5% should be enough.; *; * On machines with lots of virtual memory, any large constant may be returned.; * Conversely, zero may be returned to always use the minimum amount of memory.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:758,Availability,avail,available,758,"/*; * This routine computes the total space still available for allocation by; * jpeg_get_large. If more space than this is needed, backing store will be; * used. NOTE: any memory already allocated must not be counted.; *; * There is a minimum space requirement, corresponding to the minimum; * feasible buffer sizes; jmemmgr.c will request that much space even if; * jpeg_mem_available returns zero. The maximum space needed, enough to hold; * all working storage in memory, is also passed in case it is useful.; * Finally, the total space already allocated is passed. If no better; * method is available, cinfo->mem->max_memory_to_use - already_allocated; * is often a suitable calculation.; *; * It is OK for jpeg_mem_available to underestimate the space available; * (that'll just lead to more backing-store access than is really necessary).; * However, an overestimate will lead to failure. Hence it's wise to subtract; * a slop factor from the true available space. 5% should be enough.; *; * On machines with lots of virtual memory, any large constant may be returned.; * Conversely, zero may be returned to always use the minimum amount of memory.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:887,Availability,failure,failure,887,"/*; * This routine computes the total space still available for allocation by; * jpeg_get_large. If more space than this is needed, backing store will be; * used. NOTE: any memory already allocated must not be counted.; *; * There is a minimum space requirement, corresponding to the minimum; * feasible buffer sizes; jmemmgr.c will request that much space even if; * jpeg_mem_available returns zero. The maximum space needed, enough to hold; * all working storage in memory, is also passed in case it is useful.; * Finally, the total space already allocated is passed. If no better; * method is available, cinfo->mem->max_memory_to_use - already_allocated; * is often a suitable calculation.; *; * It is OK for jpeg_mem_available to underestimate the space available; * (that'll just lead to more backing-store access than is really necessary).; * However, an overestimate will lead to failure. Hence it's wise to subtract; * a slop factor from the true available space. 5% should be enough.; *; * On machines with lots of virtual memory, any large constant may be returned.; * Conversely, zero may be returned to always use the minimum amount of memory.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:955,Availability,avail,available,955,"/*; * This routine computes the total space still available for allocation by; * jpeg_get_large. If more space than this is needed, backing store will be; * used. NOTE: any memory already allocated must not be counted.; *; * There is a minimum space requirement, corresponding to the minimum; * feasible buffer sizes; jmemmgr.c will request that much space even if; * jpeg_mem_available returns zero. The maximum space needed, enough to hold; * all working storage in memory, is also passed in case it is useful.; * Finally, the total space already allocated is passed. If no better; * method is available, cinfo->mem->max_memory_to_use - already_allocated; * is often a suitable calculation.; *; * It is OK for jpeg_mem_available to underestimate the space available; * (that'll just lead to more backing-store access than is really necessary).; * However, an overestimate will lead to failure. Hence it's wise to subtract; * a slop factor from the true available space. 5% should be enough.; *; * On machines with lots of virtual memory, any large constant may be returned.; * Conversely, zero may be returned to always use the minimum amount of memory.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:188,Energy Efficiency,allocate,allocated,188,"/*; * This routine computes the total space still available for allocation by; * jpeg_get_large. If more space than this is needed, backing store will be; * used. NOTE: any memory already allocated must not be counted.; *; * There is a minimum space requirement, corresponding to the minimum; * feasible buffer sizes; jmemmgr.c will request that much space even if; * jpeg_mem_available returns zero. The maximum space needed, enough to hold; * all working storage in memory, is also passed in case it is useful.; * Finally, the total space already allocated is passed. If no better; * method is available, cinfo->mem->max_memory_to_use - already_allocated; * is often a suitable calculation.; *; * It is OK for jpeg_mem_available to underestimate the space available; * (that'll just lead to more backing-store access than is really necessary).; * However, an overestimate will lead to failure. Hence it's wise to subtract; * a slop factor from the true available space. 5% should be enough.; *; * On machines with lots of virtual memory, any large constant may be returned.; * Conversely, zero may be returned to always use the minimum amount of memory.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:549,Energy Efficiency,allocate,allocated,549,"/*; * This routine computes the total space still available for allocation by; * jpeg_get_large. If more space than this is needed, backing store will be; * used. NOTE: any memory already allocated must not be counted.; *; * There is a minimum space requirement, corresponding to the minimum; * feasible buffer sizes; jmemmgr.c will request that much space even if; * jpeg_mem_available returns zero. The maximum space needed, enough to hold; * all working storage in memory, is also passed in case it is useful.; * Finally, the total space already allocated is passed. If no better; * method is available, cinfo->mem->max_memory_to_use - already_allocated; * is often a suitable calculation.; *; * It is OK for jpeg_mem_available to underestimate the space available; * (that'll just lead to more backing-store access than is really necessary).; * However, an overestimate will lead to failure. Hence it's wise to subtract; * a slop factor from the true available space. 5% should be enough.; *; * On machines with lots of virtual memory, any large constant may be returned.; * Conversely, zero may be returned to always use the minimum amount of memory.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:11,Integrability,rout,routine,11,"/*; * This routine computes the total space still available for allocation by; * jpeg_get_large. If more space than this is needed, backing store will be; * used. NOTE: any memory already allocated must not be counted.; *; * There is a minimum space requirement, corresponding to the minimum; * feasible buffer sizes; jmemmgr.c will request that much space even if; * jpeg_mem_available returns zero. The maximum space needed, enough to hold; * all working storage in memory, is also passed in case it is useful.; * Finally, the total space already allocated is passed. If no better; * method is available, cinfo->mem->max_memory_to_use - already_allocated; * is often a suitable calculation.; *; * It is OK for jpeg_mem_available to underestimate the space available; * (that'll just lead to more backing-store access than is really necessary).; * However, an overestimate will lead to failure. Hence it's wise to subtract; * a slop factor from the true available space. 5% should be enough.; *; * On machines with lots of virtual memory, any large constant may be returned.; * Conversely, zero may be returned to always use the minimum amount of memory.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:812,Security,access,access,812,"/*; * This routine computes the total space still available for allocation by; * jpeg_get_large. If more space than this is needed, backing store will be; * used. NOTE: any memory already allocated must not be counted.; *; * There is a minimum space requirement, corresponding to the minimum; * feasible buffer sizes; jmemmgr.c will request that much space even if; * jpeg_mem_available returns zero. The maximum space needed, enough to hold; * all working storage in memory, is also passed in case it is useful.; * Finally, the total space already allocated is passed. If no better; * method is available, cinfo->mem->max_memory_to_use - already_allocated; * is often a suitable calculation.; *; * It is OK for jpeg_mem_available to underestimate the space available; * (that'll just lead to more backing-store access than is really necessary).; * However, an overestimate will lead to failure. Hence it's wise to subtract; * a slop factor from the true available space. 5% should be enough.; *; * On machines with lots of virtual memory, any large constant may be returned.; * Conversely, zero may be returned to always use the minimum amount of memory.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:246,Integrability,depend,dependent,246,/*; * This structure holds whatever state is needed to access a single; * backing-store object. The read/write/close method pointers are called; * by jmemmgr.c to manipulate the backing-store object; all other fields; * are private to the system-dependent backing store routines.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:270,Integrability,rout,routines,270,/*; * This structure holds whatever state is needed to access a single; * backing-store object. The read/write/close method pointers are called; * by jmemmgr.c to manipulate the backing-store object; all other fields; * are private to the system-dependent backing store routines.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:55,Security,access,access,55,/*; * This structure holds whatever state is needed to access a single; * backing-store object. The read/write/close method pointers are called; * by jmemmgr.c to manipulate the backing-store object; all other fields; * are private to the system-dependent backing store routines.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:11,Modifiability,extend,extended-memory,11,/* type of extended-memory handles */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:29,Integrability,depend,dependent,29,/* Private fields for system-dependent backing-store management */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:154,Availability,error,error,154,"/*; * Initial opening of a backing-store object. This must fill in the; * read/write/close pointers in the object. The read/write routines; * may take an error exit if the specified maximum file size is exceeded.; * (If jpeg_mem_available always returns a large value, this routine can; * just take an error exit.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:302,Availability,error,error,302,"/*; * Initial opening of a backing-store object. This must fill in the; * read/write/close pointers in the object. The read/write routines; * may take an error exit if the specified maximum file size is exceeded.; * (If jpeg_mem_available always returns a large value, this routine can; * just take an error exit.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:130,Integrability,rout,routines,130,"/*; * Initial opening of a backing-store object. This must fill in the; * read/write/close pointers in the object. The read/write routines; * may take an error exit if the specified maximum file size is exceeded.; * (If jpeg_mem_available always returns a large value, this routine can; * just take an error exit.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:274,Integrability,rout,routine,274,"/*; * Initial opening of a backing-store object. This must fill in the; * read/write/close pointers in the object. The read/write routines; * may take an error exit if the specified maximum file size is exceeded.; * (If jpeg_mem_available always returns a large value, this routine can; * just take an error exit.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:211,Availability,error,error,211,"/*; * These routines take care of any system-dependent initialization and; * cleanup required. jpeg_mem_init will be called before anything is; * allocated (and, therefore, nothing in cinfo is of use except the error; * manager pointer). It should return a suitable default value for; * max_memory_to_use; this may subsequently be overridden by the surrounding; * application. (Note that max_memory_to_use is only important if; * jpeg_mem_available chooses to consult it ... no one else will.); * jpeg_mem_term may assume that all requested memory has been freed and that; * all opened backing-store objects have been closed.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:146,Energy Efficiency,allocate,allocated,146,"/*; * These routines take care of any system-dependent initialization and; * cleanup required. jpeg_mem_init will be called before anything is; * allocated (and, therefore, nothing in cinfo is of use except the error; * manager pointer). It should return a suitable default value for; * max_memory_to_use; this may subsequently be overridden by the surrounding; * application. (Note that max_memory_to_use is only important if; * jpeg_mem_available chooses to consult it ... no one else will.); * jpeg_mem_term may assume that all requested memory has been freed and that; * all opened backing-store objects have been closed.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:12,Integrability,rout,routines,12,"/*; * These routines take care of any system-dependent initialization and; * cleanup required. jpeg_mem_init will be called before anything is; * allocated (and, therefore, nothing in cinfo is of use except the error; * manager pointer). It should return a suitable default value for; * max_memory_to_use; this may subsequently be overridden by the surrounding; * application. (Note that max_memory_to_use is only important if; * jpeg_mem_available chooses to consult it ... no one else will.); * jpeg_mem_term may assume that all requested memory has been freed and that; * all opened backing-store objects have been closed.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:45,Integrability,depend,dependent,45,"/*; * These routines take care of any system-dependent initialization and; * cleanup required. jpeg_mem_init will be called before anything is; * allocated (and, therefore, nothing in cinfo is of use except the error; * manager pointer). It should return a suitable default value for; * max_memory_to_use; this may subsequently be overridden by the surrounding; * application. (Note that max_memory_to_use is only important if; * jpeg_mem_available chooses to consult it ... no one else will.); * jpeg_mem_term may assume that all requested memory has been freed and that; * all opened backing-store objects have been closed.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:283,Deployability,configurat,configuration,283,"/*; * jmorecfg.h; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 1997-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains additional configuration options that customize the; * JPEG software for special applications or support machine-dependent; * optimizations. Most users will not need to touch this file.; */; /*; * Define BITS_IN_JSAMPLE as either; * 8 for 8-bit sample values (the usual setting); * 12 for 12-bit sample values; * Only 8 and 12 are legal data precisions for lossy JPEG according to the; * JPEG standard, and the IJG code does not support anything else!; * We do not support run-time selection of data precision, sorry.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:385,Integrability,depend,dependent,385,"/*; * jmorecfg.h; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 1997-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains additional configuration options that customize the; * JPEG software for special applications or support machine-dependent; * optimizations. Most users will not need to touch this file.; */; /*; * Define BITS_IN_JSAMPLE as either; * 8 for 8-bit sample values (the usual setting); * 12 for 12-bit sample values; * Only 8 and 12 are legal data precisions for lossy JPEG according to the; * JPEG standard, and the IJG code does not support anything else!; * We do not support run-time selection of data precision, sorry.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:283,Modifiability,config,configuration,283,"/*; * jmorecfg.h; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 1997-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains additional configuration options that customize the; * JPEG software for special applications or support machine-dependent; * optimizations. Most users will not need to touch this file.; */; /*; * Define BITS_IN_JSAMPLE as either; * 8 for 8-bit sample values (the usual setting); * 12 for 12-bit sample values; * Only 8 and 12 are legal data precisions for lossy JPEG according to the; * JPEG standard, and the IJG code does not support anything else!; * We do not support run-time selection of data precision, sorry.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:398,Performance,optimiz,optimizations,398,"/*; * jmorecfg.h; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 1997-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains additional configuration options that customize the; * JPEG software for special applications or support machine-dependent; * optimizations. Most users will not need to touch this file.; */; /*; * Define BITS_IN_JSAMPLE as either; * 8 for 8-bit sample values (the usual setting); * 12 for 12-bit sample values; * Only 8 and 12 are legal data precisions for lossy JPEG according to the; * JPEG standard, and the IJG code does not support anything else!; * We do not support run-time selection of data precision, sorry.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:89,Usability,Guid,Guido,89,"/*; * jmorecfg.h; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 1997-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains additional configuration options that customize the; * JPEG software for special applications or support machine-dependent; * optimizations. Most users will not need to touch this file.; */; /*; * Define BITS_IN_JSAMPLE as either; * 8 for 8-bit sample values (the usual setting); * 12 for 12-bit sample values; * Only 8 and 12 are legal data precisions for lossy JPEG according to the; * JPEG standard, and the IJG code does not support anything else!; * We do not support run-time selection of data precision, sorry.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:221,Availability,mask,mask,221,"/*; * Maximum number of components (color channels) allowed in JPEG image.; * To meet the letter of the JPEG spec, set this to 255. However, darn; * few applications need more than 4 channels (maybe 5 for CMYK + alpha; * mask). We recommend 10 as a reasonable compromise; use 4 if you are; * really short on memory. (Each allowed component costs a hundred or so; * bytes of storage, whether actually used in an image or not.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:355,Energy Efficiency,allocate,allocate,355,"/*; * Basic data types.; * You may need to change these if you have a machine with unusual data; * type sizes; for example, ""char"" not 8 bits, ""short"" not 16 bits,; * or ""long"" not 32 bits. We don't care whether ""int"" is 16 or 32 bits,; * but it had better be at least 16.; */; /* Representation of a single sample (pixel element value).; * We frequently allocate large arrays of these, so it's important to keep; * them small. But if you have memory to burn and access to char or short; * arrays is very slow on your hardware, you might want to change these.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:463,Security,access,access,463,"/*; * Basic data types.; * You may need to change these if you have a machine with unusual data; * type sizes; for example, ""char"" not 8 bits, ""short"" not 16 bits,; * or ""long"" not 32 bits. We don't care whether ""int"" is 16 or 32 bits,; * but it had better be at least 16.; */; /* Representation of a single sample (pixel element value).; * We frequently allocate large arrays of these, so it's important to keep; * them small. But if you have memory to burn and access to char or short; * arrays is very slow on your hardware, you might want to change these.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:123,Availability,mask,mask,123,/* JSAMPLE should be the smallest type that will hold the values 0..255.; * You can use a signed char by having GETJSAMPLE mask it with 0xFF.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:169,Energy Efficiency,allocate,allocate,169,"/* BITS_IN_JSAMPLE == 12 */; /* Representation of a DCT frequency coefficient.; * This should be a signed value of at least 16 bits; ""short"" is usually OK.; * Again, we allocate large arrays of these, but you can change to int; * if you have memory to burn and ""short"" is really slow.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:3,Performance,Optimiz,Optimization,3,/* Optimization of entropy coding parms? */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:202,Performance,optimiz,optimization,202,"/* Note: if you selected 12-bit data precision, it is dangerous to turn off; * ENTROPY_OPT_SUPPORTED. The standard Huffman tables are only good for 8-bit; * precision, so jchuff.c normally uses entropy optimization to compute; * usable tables for higher precision. If you don't want to do optimization,; * you'll have to supply different default Huffman tables.; * The exact same statements apply for progressive JPEG: the default tables; * don't work for progressive mode. (This may get fixed, however.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:289,Performance,optimiz,optimization,289,"/* Note: if you selected 12-bit data precision, it is dangerous to turn off; * ENTROPY_OPT_SUPPORTED. The standard Huffman tables are only good for 8-bit; * precision, so jchuff.c normally uses entropy optimization to compute; * usable tables for higher precision. If you don't want to do optimization,; * you'll have to supply different default Huffman tables.; * The exact same statements apply for progressive JPEG: the default tables; * don't work for progressive mode. (This may get fixed, however.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:229,Usability,usab,usable,229,"/* Note: if you selected 12-bit data precision, it is dangerous to turn off; * ENTROPY_OPT_SUPPORTED. The standard Huffman tables are only good for 8-bit; * precision, so jchuff.c normally uses entropy optimization to compute; * usable tables for higher precision. If you don't want to do optimization,; * you'll have to supply different default Huffman tables.; * The exact same statements apply for progressive JPEG: the default tables; * don't work for progressive mode. (This may get fixed, however.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:13,Energy Efficiency,Green,Green,13,/* Offset of Green */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:33,Performance,optimiz,optimizations,33,"/* Definitions for speed-related optimizations. */; /* If your compiler supports inline functions, define INLINE; * as the inline keyword; otherwise define it as empty.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:157,Integrability,rout,routines,157,"/* FAST_FLOAT should be either float or double, whichever is done faster; * by your compiler. (Note that this type is only used in the floating point; * DCT routines, so it only matters if you've defined DCT_FLOAT_SUPPORTED.); * Typically, float is faster in ANSI C compilers, while double is faster in; * pre-ANSI compilers (because they insist on converting to double anyway).; * The code below therefore chooses float if we have ANSI-style prototypes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:88,Usability,Guid,Guido,88,"/*; * jpegint.h; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 1997-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file provides common declarations for the various JPEG modules.; * These declarations are considered internal to the JPEG library; most; * applications using the library shouldn't need to include this file.; */; /* Declarations for both compression & decompression */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:50,Integrability,depend,dependencies,50,/* Values of global_state field (jdapi.c has some dependencies on ordering!) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:3,Performance,perform,performing,3,/* performing dummy pass for 2-pass quant */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:9,Modifiability,variab,variables,9,/* State variables made visible to other modules */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:24,Availability,down,downsampled-data,24,/* Main buffer control (downsampled-data buffer) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:30,Availability,down,downsampling,30,/* Compression preprocessing (downsampling input buffer control) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:3,Availability,Down,Downsampling,3,/* Downsampling */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:9,Integrability,rout,routines,9,/* These routines are exported to allow insertion of extra markers */; /* Probably only COM and APPn markers should be written this way */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:9,Modifiability,variab,variables,9,/* State variables made visible to other modules */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:9,Modifiability,variab,variables,9,/* State variables made visible to other modules */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:24,Availability,down,downsampled-data,24,/* Main buffer control (downsampled-data buffer) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:21,Performance,perform,performs,21,/* Inverse DCT (also performs dequantization) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:512,Integrability,rout,routine,512,"/* We assume that right shift corresponds to signed division by 2 with; * rounding towards minus infinity. This is correct for typical ""arithmetic; * shift"" instructions that shift in copies of the sign bit. But some; * C compilers implement >> with an unsigned shift. For these machines you; * must define RIGHT_SHIFT_IS_UNSIGNED.; * RIGHT_SHIFT provides a proper signed right shift of an INT32 quantity.; * It is only applied with constant shift counts. SHIFT_TEMPS must be; * included in the variables of any routine using RIGHT_SHIFT.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:495,Modifiability,variab,variables,495,"/* We assume that right shift corresponds to signed division by 2 with; * rounding towards minus infinity. This is correct for typical ""arithmetic; * shift"" instructions that shift in copies of the sign bit. But some; * C compilers implement >> with an unsigned shift. For these machines you; * must define RIGHT_SHIFT_IS_UNSIGNED.; * RIGHT_SHIFT provides a proper signed right shift of an INT32 quantity.; * It is only applied with constant shift counts. SHIFT_TEMPS must be; * included in the variables of any routine using RIGHT_SHIFT.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:70,Integrability,rout,routines,70,/* NEED_SHORT_EXTERNAL_NAMES */; /* Compression module initialization routines */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:39,Integrability,rout,routines,39,/* Decompression module initialization routines */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h:11,Integrability,rout,routines,11,/* Utility routines in jutils.c */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpegint.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:441,Availability,error,error,441,"/*; * jpeglib.h; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * Modified 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file defines the application interface for the JPEG library.; * Most applications using the library need only include this file,; * and perhaps jerror.h if they want to know the exact error codes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:286,Integrability,interface,interface,286,"/*; * jpeglib.h; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * Modified 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file defines the application interface for the JPEG library.; * Most applications using the library need only include this file,; * and perhaps jerror.h if they want to know the exact error codes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:88,Usability,Guid,Guido,88,"/*; * jpeglib.h; *; * Copyright (C) 1991-1998, Thomas G. Lane.; * Modified 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file defines the application interface for the JPEG library.; * Most applications using the library need only include this file,; * and perhaps jerror.h if they want to know the exact error codes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:15,Deployability,configurat,configuration,15,/* widely used configuration options */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:15,Modifiability,config,configuration,15,/* widely used configuration options */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:263,Modifiability,variab,variables,263,"/* quantization table selector (0..3) */; /* These values may vary between scans. */; /* For compression, they must be supplied by parameter setup; */; /* for decompression, they are read from the SOS marker. */; /* The decompressor output side may not use these variables. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:318,Integrability,depend,depend,318,/* AC entropy table selector (0..3) */; /* Remaining fields should be treated as private by applications. */; /* These values are computed during compression or decompression startup: */; /* Component's size in DCT blocks.; * Any dummy blocks added to complete an MCU are not counted; therefore; * these values do not depend on whether a scan is interleaved or not.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:7,Availability,down,downsampled,7,"/* The downsampled dimensions are the component's actual, unpadded number; * of samples at the main buffer (preprocessing/compression interface);; * DCT scaling is included, so; * downsampled_width = ceil(image_width * Hi/Hmax * DCT_h_scaled_size/DCTSIZE); * and similarly for height.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:134,Integrability,interface,interface,134,"/* The downsampled dimensions are the component's actual, unpadded number; * of samples at the main buffer (preprocessing/compression interface);; * DCT scaling is included, so; * downsampled_width = ceil(image_width * Hi/Hmax * DCT_h_scaled_size/DCTSIZE); * and similarly for height.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:171,Modifiability,variab,variables,171,/* do we need the value of this component? */; /* These values are computed before starting a scan of the component. */; /* The decompressor output side may not use these variables. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:25,Availability,down,down,25,/* # of non-dummy blocks down in last MCU */; /* Saved quantization table for component; NULL if none yet saved.; * See jdinput.c comments about the need for this information.; * This field is currently used only for decompression.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:3,Availability,error,error,3,/* error/unspecified */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:7,Energy Efficiency,green,green,7,/* red/green/blue */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:3,Usability,simpl,simple,3,/* simple ordered dither */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:19,Availability,error,error,19,/* Floyd-Steinberg error diffusion dither */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:3,Availability,Error,Error,3,/* Error handler module */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:46,Integrability,Rout,Routines,46,"/* For checking call sequence validity */; /* Routines that are to be used by both halves of the library are declared; * to receive a pointer to this structure. There are no actual instances of; * jpeg_common_struct, only of jpeg_compress_struct and jpeg_decompress_struct.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:401,Integrability,rout,routines,401,"/* image gamma of input image */; /* Compression parameters --- these fields must be set before calling; * jpeg_start_compress(). We recommend calling jpeg_set_defaults() to; * initialize everything to reasonable defaults, then changing anything; * the application specifically wants to change. That way you won't get; * burnt when new parameters are added. Also note that there are several; * helper routines to simplify changing parameters.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:413,Usability,simpl,simplify,413,"/* image gamma of input image */; /* Compression parameters --- these fields must be set before calling; * jpeg_start_compress(). We recommend calling jpeg_set_defaults() to; * initialize everything to reasonable defaults, then changing anything; * the application specifically wants to change. That way you won't get; * burnt when new parameters are added. Also note that there are several; * helper routines to simplify changing parameters.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:24,Availability,down,downsampled,24,/* TRUE=caller supplies downsampled data */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:8,Performance,optimiz,optimize,8,/* TRUE=optimize entropy encoding parms */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:20,Availability,down,downsampling,20,/* TRUE=apply fancy downsampling */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:51,Modifiability,variab,variable,51,"/* should an Adobe marker be written? */; /* State variable: index of next scanline to be written to; * jpeg_write_scanlines(). Application may use this to control its; * processing loop, e.g., ""while (next_scanline < image_height)"".; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:88,Modifiability,variab,variables,88,"/* min( Se, DCTSIZE2-1 ) */; /*; * Links to compression subobjects (methods and private variables of modules); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:8,Availability,down,downsampled,8,/* TRUE=downsampled data wanted */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:51,Modifiability,variab,variables,51,"/* The color map as a 2-D pixel array */; /* State variables: these variables indicate the progress of decompression.; * The application may examine these but must not modify them.; */; /* Row index of next scanline to be read from jpeg_read_scanlines().; * Application may use this to control its processing loop, e.g.,; * ""while (output_scanline < output_height)"".; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:68,Modifiability,variab,variables,68,"/* The color map as a 2-D pixel array */; /* State variables: these variables indicate the progress of decompression.; * The application may examine these but must not modify them.; */; /* Row index of next scanline to be read from jpeg_read_scanlines().; * Application may use this to control its processing loop, e.g.,; * ""while (output_scanline < output_height)"".; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:58,Modifiability,variab,variables,58,"/*; * Links to decompression subobjects (methods, private variables of modules); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:3,Availability,Error,Error,3,/* Error exit handler: does not return to caller */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:41,Integrability,message,message,41,/* Conditionally emit a trace or warning message */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:44,Availability,error,error,44,/* Routine that actually outputs a trace or error message */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:3,Integrability,Rout,Routine,3,/* Routine that actually outputs a trace or error message */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:50,Integrability,message,message,50,/* Routine that actually outputs a trace or error message */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:52,Availability,error,error,52,/* Format a message string for the most recent JPEG error or message */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:12,Integrability,message,message,12,/* Format a message string for the most recent JPEG error or message */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:61,Integrability,message,message,61,/* Format a message string for the most recent JPEG error or message */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:9,Availability,error,error,9,/* Reset error state variables at start of a new image */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:21,Modifiability,variab,variables,21,/* Reset error state variables at start of a new image */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:7,Integrability,message,message,7,/* The message ID code and any parameters are saved here.; * A message can have one string parameter or up to 8 int parameters.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:63,Integrability,message,message,63,/* The message ID code and any parameters are saved here.; * A message can have one string parameter or up to 8 int parameters.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:32,Availability,error,error,32,/* Standard state variables for error facility */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:18,Modifiability,variab,variables,18,/* Standard state variables for error facility */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:51,Availability,recover,recoverable,51,"/* max msg_level that will be displayed */; /* For recoverable corrupt-data errors, we emit a warning message,; * but keep going unless emit_message chooses to abort. emit_message; * should count warnings in num_warnings. The surrounding application; * can check for bad data by seeing if num_warnings is nonzero at the; * end of processing.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:76,Availability,error,errors,76,"/* max msg_level that will be displayed */; /* For recoverable corrupt-data errors, we emit a warning message,; * but keep going unless emit_message chooses to abort. emit_message; * should count warnings in num_warnings. The surrounding application; * can check for bad data by seeing if num_warnings is nonzero at the; * end of processing.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:102,Integrability,message,message,102,"/* max msg_level that will be displayed */; /* For recoverable corrupt-data errors, we emit a warning message,; * but keep going unless emit_message chooses to abort. emit_message; * should count warnings in num_warnings. The surrounding application; * can check for bad data by seeing if num_warnings is nonzero at the; * end of processing.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:51,Safety,recover,recoverable,51,"/* max msg_level that will be displayed */; /* For recoverable corrupt-data errors, we emit a warning message,; * but keep going unless emit_message chooses to abort. emit_message; * should count warnings in num_warnings. The surrounding application; * can check for bad data by seeing if num_warnings is nonzero at the; * end of processing.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:160,Safety,abort,abort,160,"/* max msg_level that will be displayed */; /* For recoverable corrupt-data errors, we emit a warning message,; * but keep going unless emit_message chooses to abort. emit_message; * should count warnings in num_warnings. The surrounding application; * can check for bad data by seeing if num_warnings is nonzero at the; * end of processing.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:80,Availability,error,error,80,"/* number of corrupt-data warnings */; /* These fields point to the table(s) of error message strings.; * An application can change the table pointer to switch to a different; * message list (typically, to change the language in which errors are; * reported). Some applications may wish to add additional error codes; * that will be handled by the JPEG library error mechanism; the second; * table pointer is used for this purpose.; *; * First table includes all errors generated by JPEG library itself.; * Error code 0 is reserved for a ""no such error string"" message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:235,Availability,error,errors,235,"/* number of corrupt-data warnings */; /* These fields point to the table(s) of error message strings.; * An application can change the table pointer to switch to a different; * message list (typically, to change the language in which errors are; * reported). Some applications may wish to add additional error codes; * that will be handled by the JPEG library error mechanism; the second; * table pointer is used for this purpose.; *; * First table includes all errors generated by JPEG library itself.; * Error code 0 is reserved for a ""no such error string"" message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:305,Availability,error,error,305,"/* number of corrupt-data warnings */; /* These fields point to the table(s) of error message strings.; * An application can change the table pointer to switch to a different; * message list (typically, to change the language in which errors are; * reported). Some applications may wish to add additional error codes; * that will be handled by the JPEG library error mechanism; the second; * table pointer is used for this purpose.; *; * First table includes all errors generated by JPEG library itself.; * Error code 0 is reserved for a ""no such error string"" message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:361,Availability,error,error,361,"/* number of corrupt-data warnings */; /* These fields point to the table(s) of error message strings.; * An application can change the table pointer to switch to a different; * message list (typically, to change the language in which errors are; * reported). Some applications may wish to add additional error codes; * that will be handled by the JPEG library error mechanism; the second; * table pointer is used for this purpose.; *; * First table includes all errors generated by JPEG library itself.; * Error code 0 is reserved for a ""no such error string"" message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:463,Availability,error,errors,463,"/* number of corrupt-data warnings */; /* These fields point to the table(s) of error message strings.; * An application can change the table pointer to switch to a different; * message list (typically, to change the language in which errors are; * reported). Some applications may wish to add additional error codes; * that will be handled by the JPEG library error mechanism; the second; * table pointer is used for this purpose.; *; * First table includes all errors generated by JPEG library itself.; * Error code 0 is reserved for a ""no such error string"" message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:507,Availability,Error,Error,507,"/* number of corrupt-data warnings */; /* These fields point to the table(s) of error message strings.; * An application can change the table pointer to switch to a different; * message list (typically, to change the language in which errors are; * reported). Some applications may wish to add additional error codes; * that will be handled by the JPEG library error mechanism; the second; * table pointer is used for this purpose.; *; * First table includes all errors generated by JPEG library itself.; * Error code 0 is reserved for a ""no such error string"" message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:547,Availability,error,error,547,"/* number of corrupt-data warnings */; /* These fields point to the table(s) of error message strings.; * An application can change the table pointer to switch to a different; * message list (typically, to change the language in which errors are; * reported). Some applications may wish to add additional error codes; * that will be handled by the JPEG library error mechanism; the second; * table pointer is used for this purpose.; *; * First table includes all errors generated by JPEG library itself.; * Error code 0 is reserved for a ""no such error string"" message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:86,Integrability,message,message,86,"/* number of corrupt-data warnings */; /* These fields point to the table(s) of error message strings.; * An application can change the table pointer to switch to a different; * message list (typically, to change the language in which errors are; * reported). Some applications may wish to add additional error codes; * that will be handled by the JPEG library error mechanism; the second; * table pointer is used for this purpose.; *; * First table includes all errors generated by JPEG library itself.; * Error code 0 is reserved for a ""no such error string"" message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:178,Integrability,message,message,178,"/* number of corrupt-data warnings */; /* These fields point to the table(s) of error message strings.; * An application can change the table pointer to switch to a different; * message list (typically, to change the language in which errors are; * reported). Some applications may wish to add additional error codes; * that will be handled by the JPEG library error mechanism; the second; * table pointer is used for this purpose.; *; * First table includes all errors generated by JPEG library itself.; * Error code 0 is reserved for a ""no such error string"" message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:561,Integrability,message,message,561,"/* number of corrupt-data warnings */; /* These fields point to the table(s) of error message strings.; * An application can change the table pointer to switch to a different; * message list (typically, to change the language in which errors are; * reported). Some applications may wish to add additional error codes; * that will be handled by the JPEG library error mechanism; the second; * table pointer is used for this purpose.; *; * First table includes all errors generated by JPEG library itself.; * Error code 0 is reserved for a ""no such error string"" message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:11,Availability,error,errors,11,/* Library errors */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:15,Availability,error,errors,15,/* Non-library errors */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h:9,Availability,error,error,9,/* fetch error codes too */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jpeglib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:422,Availability,avail,available,422,"/*; * jquant1.c; *; * Copyright (C) 1991-1996, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains 1-pass color quantization (color mapping) routines.; * These routines provide mapping to a fixed color map using equally spaced; * color values. Optional Floyd-Steinberg or ordered dithering is available.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:270,Integrability,rout,routines,270,"/*; * jquant1.c; *; * Copyright (C) 1991-1996, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains 1-pass color quantization (color mapping) routines.; * These routines provide mapping to a fixed color map using equally spaced; * color values. Optional Floyd-Steinberg or ordered dithering is available.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:289,Integrability,rout,routines,289,"/*; * jquant1.c; *; * Copyright (C) 1991-1996, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains 1-pass color quantization (color mapping) routines.; * These routines provide mapping to a fixed color map using equally spaced; * color values. Optional Floyd-Steinberg or ordered dithering is available.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:1495,Modifiability,variab,variable,1495," it off if you really want to.; *; * In 1-pass quantization the colormap must be chosen in advance of seeing the; * image. We use a map consisting of all combinations of Ncolors[i] color; * values for the i'th component. The Ncolors[] values are chosen so that; * their product, the total number of colors, is no more than that requested.; * (In most cases, the product will be somewhat less.); *; * Since the colormap is orthogonal, the representative value for each color; * component can be determined without considering the other components;; * then these indexes can be combined into a colormap index by a standard; * N-dimensional-array-subscript calculation. Most of the arithmetic involved; * can be precalculated and stored in the lookup table colorindex[].; * colorindex[i][j] maps pixel value j in component i to the nearest; * representative value (grid plane) for that component; this index is; * multiplied by the array stride for component i, so that the; * index of the colormap entry closest to a given pixel value is just; * sum( colorindex[component-number][pixel-component-value] ); * Aside from being fast, this scheme allows for variable spacing between; * representative values with no additional lookup cost.; *; * If gamma correction has been applied in color conversion, it might be wise; * to adjust the color grid spacing so that the representative colors are; * equidistant in linear space. At this writing, gamma correction is not; * implemented by jdcolor, so nothing is done here.; */; /* Declarations for ordered dithering.; *; * We use a standard 16x16 ordered dither array. The basic concept of ordered; * dithering is described in many references, for instance Dale Schumacher's; * chapter II.2 of Graphics Gems II (James Arvo, ed. Academic Press, 1991).; * In place of Schumacher's comparisons against a ""threshold"" value, we add a; * ""dither"" value to the input pixel and then round the result to the nearest; * output value. The dither value is equivalent to (",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:2800,Modifiability,extend,extending,2800,"onsidering the other components;; * then these indexes can be combined into a colormap index by a standard; * N-dimensional-array-subscript calculation. Most of the arithmetic involved; * can be precalculated and stored in the lookup table colorindex[].; * colorindex[i][j] maps pixel value j in component i to the nearest; * representative value (grid plane) for that component; this index is; * multiplied by the array stride for component i, so that the; * index of the colormap entry closest to a given pixel value is just; * sum( colorindex[component-number][pixel-component-value] ); * Aside from being fast, this scheme allows for variable spacing between; * representative values with no additional lookup cost.; *; * If gamma correction has been applied in color conversion, it might be wise; * to adjust the color grid spacing so that the representative colors are; * equidistant in linear space. At this writing, gamma correction is not; * implemented by jdcolor, so nothing is done here.; */; /* Declarations for ordered dithering.; *; * We use a standard 16x16 ordered dither array. The basic concept of ordered; * dithering is described in many references, for instance Dale Schumacher's; * chapter II.2 of Graphics Gems II (James Arvo, ed. Academic Press, 1991).; * In place of Schumacher's comparisons against a ""threshold"" value, we add a; * ""dither"" value to the input pixel and then round the result to the nearest; * output value. The dither value is equivalent to (0.5 - threshold) times; * the distance between output values. For ordered dithering, we assume that; * the output colors are equally spaced; if not, results will probably be; * worse, since the dither may be too much or too little at a given point.; *; * The normal calculation would be to form pixel value + dither, range-limit; * this to 0..MAXJSAMPLE, and then index into the colorindex table as usual.; * We can skip the separate range-limiting step by extending the colorindex; * table in both directions.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:32,Energy Efficiency,power,power,32,"/* NB: if ODITHER_SIZE is not a power of 2, ODITHER_MASK uses will break */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:3,Availability,mask,mask,3,/* mask for wrapping around counters */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:12,Integrability,wrap,wrapping,12,/* mask for wrapping around counters */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:53,Availability,Error,Errors,53,"/* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array is indexed [component#][position].; * We provide (#columns + 2) entries per component; the extra entry at each; * end saves us from special-casing the first and last pixels.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:154,Availability,error,error,154,"/* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array is indexed [component#][position].; * We provide (#columns + 2) entries per component; the extra entry at each; * end saves us from special-casing the first and last pixels.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:438,Availability,error,errors,438,"/* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array is indexed [component#][position].; * We provide (#columns + 2) entries per component; the extra entry at each; * end saves us from special-casing the first and last pixels.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:488,Availability,error,errors,488,"/* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array is indexed [component#][position].; * We provide (#columns + 2) entries per component; the extra entry at each; * end saves us from special-casing the first and last pixels.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:553,Availability,error,errors,553,"/* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array is indexed [component#][position].; * We provide (#columns + 2) entries per component; the extra entry at each; * end saves us from special-casing the first and last pixels.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:640,Availability,error,errors,640,"/* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array is indexed [component#][position].; * We provide (#columns + 2) entries per component; the extra entry at each; * end saves us from special-casing the first and last pixels.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:1125,Availability,error,error,1125,"/* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array is indexed [component#][position].; * We provide (#columns + 2) entries per component; the extra entry at each; * end saves us from special-casing the first and last pixels.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:1147,Energy Efficiency,allocate,allocated,1147,"/* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array is indexed [component#][position].; * We provide (#columns + 2) entries per component; the extra entry at each; * end saves us from special-casing the first and last pixels.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:618,Modifiability,variab,variables,618,"/* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array is indexed [component#][position].; * We provide (#columns + 2) entries per component; the extra entry at each; * end saves us from special-casing the first and last pixels.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:713,Modifiability,variab,variables,713,"/* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array is indexed [component#][position].; * We provide (#columns + 2) entries per component; the extra entry at each; * end saves us from special-casing the first and last pixels.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:789,Security,access,access,789,"/* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array is indexed [component#][position].; * We provide (#columns + 2) entries per component; the extra entry at each; * end saves us from special-casing the first and last pixels.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:14,Availability,error,error,14,/* pointer to error array (in FAR storage!) */; /* Private subobject */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:34,Energy Efficiency,allocate,allocated,34,/* public fields */; /* Initially allocated colormap is saved here */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:48,Modifiability,Variab,Variables,48,/* # of values alloced to each component */; /* Variables for ordered dithering */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:41,Modifiability,Variab,Variables,41,/* one dither array per component */; /* Variables for Floyd-Steinberg dithering */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:15,Availability,error,errors,15,/* accumulated errors */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:251,Availability,avail,available,251,"/*; * Policy-making subroutines for create_colormap and create_colorindex.; * These routines determine the colormap to be used. The rest of the module; * only assumes that the colormap is orthogonal.; *; * * select_ncolors decides how to divvy up the available colors; * among the components.; * * output_value defines the set of representative values for a component.; * * largest_input_value defines the mapping from input values to; * representative values for a component.; * Note that the latter two routines may impose different policies for; * different components, though this is not currently done.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:84,Integrability,rout,routines,84,"/*; * Policy-making subroutines for create_colormap and create_colorindex.; * These routines determine the colormap to be used. The rest of the module; * only assumes that the colormap is orthogonal.; *; * * select_ncolors decides how to divvy up the available colors; * among the components.; * * output_value defines the set of representative values for a component.; * * largest_input_value defines the mapping from input values to; * representative values for a component.; * Note that the latter two routines may impose different policies for; * different components, though this is not currently done.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:505,Integrability,rout,routines,505,"/*; * Policy-making subroutines for create_colormap and create_colorindex.; * These routines determine the colormap to be used. The rest of the module; * only assumes that the colormap is orthogonal.; *; * * select_ncolors decides how to divvy up the available colors; * among the components.; * * output_value defines the set of representative values for a component.; * * largest_input_value defines the mapping from input values to; * representative values for a component.; * Note that the latter two routines may impose different policies for; * different components, though this is not currently done.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:10,Energy Efficiency,allocate,allocate,10,/* We can allocate at least the nc'th root of max_colors per component. */; /* Compute floor(nc'th root of max_colors). */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:25,Safety,avoid,avoid,25,/* done in long arith to avoid oflo */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:3,Energy Efficiency,Allocate,Allocate,3,"/* Allocate and fill in the colormap. */; /* The colors are ordered in the map in standard row-major order, */; /* i.e. rightmost (highest-indexed) color changes most rapidly. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:240,Safety,avoid,avoid,240,"/* The inter-value distance for this color is MAXJSAMPLE/(ncolors-1).; * Hence the dither value for the matrix cell with fill order f; * (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).; * On 16-bit-int machine, be careful to avoid overflow.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:190,Modifiability,extend,extended,190,"/* Form pixel value + dither, range-limit to 0..MAXJSAMPLE,; 	 * select output value, accumulate into output code for this pixel.; 	 * Range-limiting need not be done explicitly, as we have extended; 	 * the colorindex table to produce the right answers for out-of-range; 	 * inputs. The maximum dither is +- MAXJSAMPLE; this sets the; 	 * required amount of padding.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:11,Availability,error,error,11,/* current error or pixel value */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:3,Availability,error,error,3,/* error for pixel below cur */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:3,Availability,error,error,3,/* error for below/prev col */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:3,Availability,error,error,3,/* error for below/next col */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:10,Availability,error,error,10,/* Preset error values: no error propagated to first pixel from left */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:27,Availability,error,error,27,/* Preset error values: no error propagated to first pixel from left */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:10,Availability,error,error,10,/* and no error propagated to row below yet */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:17,Availability,error,error,17,"/* cur holds the error propagated from the previous pixel on the; 	 * current line. Add the error propagated from the previous line; 	 * to form the complete error correction term for this pixel, and; 	 * round the error term (which is expressed * 16) to an integer.; 	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct; 	 * for either sign of the error value.; 	 * Note: errorptr points to *previous* column's array entry.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:92,Availability,error,error,92,"/* cur holds the error propagated from the previous pixel on the; 	 * current line. Add the error propagated from the previous line; 	 * to form the complete error correction term for this pixel, and; 	 * round the error term (which is expressed * 16) to an integer.; 	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct; 	 * for either sign of the error value.; 	 * Note: errorptr points to *previous* column's array entry.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:158,Availability,error,error,158,"/* cur holds the error propagated from the previous pixel on the; 	 * current line. Add the error propagated from the previous line; 	 * to form the complete error correction term for this pixel, and; 	 * round the error term (which is expressed * 16) to an integer.; 	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct; 	 * for either sign of the error value.; 	 * Note: errorptr points to *previous* column's array entry.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:215,Availability,error,error,215,"/* cur holds the error propagated from the previous pixel on the; 	 * current line. Add the error propagated from the previous line; 	 * to form the complete error correction term for this pixel, and; 	 * round the error term (which is expressed * 16) to an integer.; 	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct; 	 * for either sign of the error value.; 	 * Note: errorptr points to *previous* column's array entry.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:366,Availability,error,error,366,"/* cur holds the error propagated from the previous pixel on the; 	 * current line. Add the error propagated from the previous line; 	 * to form the complete error correction term for this pixel, and; 	 * round the error term (which is expressed * 16) to an integer.; 	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct; 	 * for either sign of the error value.; 	 * Note: errorptr points to *previous* column's array entry.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:390,Availability,error,errorptr,390,"/* cur holds the error propagated from the previous pixel on the; 	 * current line. Add the error propagated from the previous line; 	 * to form the complete error correction term for this pixel, and; 	 * round the error term (which is expressed * 16) to an integer.; 	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct; 	 * for either sign of the error value.; 	 * Note: errorptr points to *previous* column's array entry.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:22,Availability,error,error,22,"/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.; 	 * The maximum error is +- MAXJSAMPLE; this sets the required size; 	 * of the range_limit array.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:80,Availability,error,error,80,"/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.; 	 * The maximum error is +- MAXJSAMPLE; this sets the required size; 	 * of the range_limit array.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:33,Availability,error,error,33,"/* Compute actual representation error at this pixel */; /* Note: we can do this even though we don't have the final */; /* pixel code, because the colormap is orthogonal. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:11,Availability,error,error,11,"/* Compute error fractions to be propagated to adjacent pixels.; 	 * Add these into the running sums, and simultaneously shift the; 	 * next-line error sums left by 1 column.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:146,Availability,error,error,146,"/* Compute error fractions to be propagated to adjacent pixels.; 	 * Add these into the running sums, and simultaneously shift the; 	 * next-line error sums left by 1 column.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:8,Availability,error,error,8,/* form error * 3 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:8,Availability,error,error,8,/* form error * 5 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:8,Availability,error,error,8,"/* form error * 7 */; /* At this point cur contains the 7/16 error value to be propagated; 	 * to the next pixel on the current line, and all the errors for the; 	 * next line have been shifted over. We are therefore ready to move on.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:61,Availability,error,error,61,"/* form error * 7 */; /* At this point cur contains the 7/16 error value to be propagated; 	 * to the next pixel on the current line, and all the errors for the; 	 * next line have been shifted over. We are therefore ready to move on.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:146,Availability,error,errors,146,"/* form error * 7 */; /* At this point cur contains the 7/16 error value to be propagated; 	 * to the next pixel on the current line, and all the errors for the; 	 * next line have been shifted over. We are therefore ready to move on.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:11,Availability,error,errorptr,11,/* advance errorptr to current column */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:47,Availability,error,error,47,/* Post-loop cleanup: we must unload the final error value into the; * final fserrors[] entry. Note we need not unload belowerr because; * it is for the dummy column before or after the actual array.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:45,Availability,error,errors,45,/*; * Allocate workspace for Floyd-Steinberg errors.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:6,Energy Efficiency,Allocate,Allocate,6,/*; * Allocate workspace for Floyd-Steinberg errors.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:3,Deployability,Install,Install,3,/* Install my colormap. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:42,Energy Efficiency,Allocate,Allocate,42,/* initialize state for F-S dither */; /* Allocate Floyd-Steinberg workspace if didn't already. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:29,Availability,error,errors,29,/* Initialize the propagated errors to zero. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:28,Integrability,rout,routine,28,/*; * Module initialization routine for 1-pass color quantization.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:25,Energy Efficiency,allocate,allocated,25,/* Flag FS workspace not allocated */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:32,Energy Efficiency,allocate,allocated,32,/* Also flag odither arrays not allocated */; /* Make sure my internal arrays won't overflow */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:3,Energy Efficiency,Allocate,Allocate,3,"/* Allocate Floyd-Steinberg workspace now if requested.; * We do this now since it is FAR storage and may affect the memory; * manager's space calculations. If the user changes to FS dither; * mode in a later pass, we will allocate the space then, and will; * possibly overrun the max_memory_to_use setting.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:223,Energy Efficiency,allocate,allocate,223,"/* Allocate Floyd-Steinberg workspace now if requested.; * We do this now since it is FAR storage and may affect the memory; * manager's space calculations. If the user changes to FS dither; * mode in a later pass, we will allocate the space then, and will; * possibly overrun the max_memory_to_use setting.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:270,Integrability,rout,routines,270,"/*; * jquant2.c; *; * Copyright (C) 1991-1996, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains 2-pass color quantization (color mapping) routines.; * These routines provide selection of a custom color map for an image,; * followed by mapping of the image to that color map, with optional; * Floyd-Steinberg dithering.; * It is also possible to use just the second pass to map to an arbitrary; * externally-given color map.; *; * Note: ordered dithering is not supported, since there isn't any fast; * way to compute intercolor distances; it's unclear that ordered dither's; * fundamental assumptions even hold with an irregularly spaced color map.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:289,Integrability,rout,routines,289,"/*; * jquant2.c; *; * Copyright (C) 1991-1996, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains 2-pass color quantization (color mapping) routines.; * These routines provide selection of a custom color map for an image,; * followed by mapping of the image to that color map, with optional; * Floyd-Steinberg dithering.; * It is also possible to use just the second pass to map to an arbitrary; * externally-given color map.; *; * Note: ordered dithering is not supported, since there isn't any fast; * way to compute intercolor distances; it's unclear that ordered dither's; * fundamental assumptions even hold with an irregularly spaced color map.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:480,Energy Efficiency,reduce,reduce,480,"/*; * This module implements the well-known Heckbert paradigm for color; * quantization. Most of the ideas used here can be traced back to; * Heckbert's seminal paper; * Heckbert, Paul. ""Color Image Quantization for Frame Buffer Display"",; * Proc. SIGGRAPH '82, Computer Graphics v.16 #3 (July 1982), pp 297-304.; *; * In the first pass over the image, we accumulate a histogram showing the; * usage count of each possible color. To keep the histogram to a reasonable; * size, we reduce the precision of the input; typical practice is to retain; * 5 or 6 bits per color, so that 8 or 4 different input values are counted; * in the same histogram cell.; *; * Next, the color-selection step begins with a box representing the whole; * color space, and repeatedly splits the ""largest"" remaining box until we; * have as many boxes as desired colors. Then the mean color in each; * remaining box becomes one of the possible output colors.; * ; * The second pass over the image maps each input pixel to the closest output; * color (optionally after applying a Floyd-Steinberg dithering correction).; * This mapping is logically trivial, but making it go fast enough requires; * considerable care.; *; * Heckbert-style quantizers vary a good deal in their policies for choosing; * the ""largest"" box and deciding where to cut it. The particular policies; * used here have proved out well in experimental comparisons, but better ones; * may yet be found.; *; * In earlier versions of the IJG code, this module quantized in YCbCr color; * space, processing the raw upsampled data without a color conversion step.; * This allowed the color conversion math to be done only once per colormap; * entry, not once per pixel. However, that optimization precluded other; * useful optimizations (such as merging color conversion with upsampling); * and it also interfered with desired capabilities such as quantizing to an; * externally-supplied colormap. We have therefore abandoned that approach.; * The present code w",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:1723,Performance,optimiz,optimization,1723,"in; * 5 or 6 bits per color, so that 8 or 4 different input values are counted; * in the same histogram cell.; *; * Next, the color-selection step begins with a box representing the whole; * color space, and repeatedly splits the ""largest"" remaining box until we; * have as many boxes as desired colors. Then the mean color in each; * remaining box becomes one of the possible output colors.; * ; * The second pass over the image maps each input pixel to the closest output; * color (optionally after applying a Floyd-Steinberg dithering correction).; * This mapping is logically trivial, but making it go fast enough requires; * considerable care.; *; * Heckbert-style quantizers vary a good deal in their policies for choosing; * the ""largest"" box and deciding where to cut it. The particular policies; * used here have proved out well in experimental comparisons, but better ones; * may yet be found.; *; * In earlier versions of the IJG code, this module quantized in YCbCr color; * space, processing the raw upsampled data without a color conversion step.; * This allowed the color conversion math to be done only once per colormap; * entry, not once per pixel. However, that optimization precluded other; * useful optimizations (such as merging color conversion with upsampling); * and it also interfered with desired capabilities such as quantizing to an; * externally-supplied colormap. We have therefore abandoned that approach.; * The present code works in the post-conversion color space, typically RGB.; *; * To improve the visual quality of the results, we actually work in scaled; * RGB space, giving G distances more weight than R, and R in turn more than; * B. To do everything in integer math, we must use integer scale factors.; * The 2/3/1 scale factors used here correspond loosely to the relative; * weights of the colors in the NTSC grayscale equation.; * If you want to use this code to quantize a non-RGB color space, you'll; * probably need to change these scale factors.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:1762,Performance,optimiz,optimizations,1762,"in; * 5 or 6 bits per color, so that 8 or 4 different input values are counted; * in the same histogram cell.; *; * Next, the color-selection step begins with a box representing the whole; * color space, and repeatedly splits the ""largest"" remaining box until we; * have as many boxes as desired colors. Then the mean color in each; * remaining box becomes one of the possible output colors.; * ; * The second pass over the image maps each input pixel to the closest output; * color (optionally after applying a Floyd-Steinberg dithering correction).; * This mapping is logically trivial, but making it go fast enough requires; * considerable care.; *; * Heckbert-style quantizers vary a good deal in their policies for choosing; * the ""largest"" box and deciding where to cut it. The particular policies; * used here have proved out well in experimental comparisons, but better ones; * may yet be found.; *; * In earlier versions of the IJG code, this module quantized in YCbCr color; * space, processing the raw upsampled data without a color conversion step.; * This allowed the color conversion math to be done only once per colormap; * entry, not once per pixel. However, that optimization precluded other; * useful optimizations (such as merging color conversion with upsampling); * and it also interfered with desired capabilities such as quantizing to an; * externally-supplied colormap. We have therefore abandoned that approach.; * The present code works in the post-conversion color space, typically RGB.; *; * To improve the visual quality of the results, we actually work in scaled; * RGB space, giving G distances more weight than R, and R in turn more than; * B. To do everything in integer math, we must use integer scale factors.; * The 2/3/1 scale factors used here correspond loosely to the relative; * weights of the colors in the NTSC grayscale equation.; * If you want to use this code to quantize a non-RGB color space, you'll; * probably need to change these scale factors.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:1112,Testability,log,logically,1112," Heckbert's seminal paper; * Heckbert, Paul. ""Color Image Quantization for Frame Buffer Display"",; * Proc. SIGGRAPH '82, Computer Graphics v.16 #3 (July 1982), pp 297-304.; *; * In the first pass over the image, we accumulate a histogram showing the; * usage count of each possible color. To keep the histogram to a reasonable; * size, we reduce the precision of the input; typical practice is to retain; * 5 or 6 bits per color, so that 8 or 4 different input values are counted; * in the same histogram cell.; *; * Next, the color-selection step begins with a box representing the whole; * color space, and repeatedly splits the ""largest"" remaining box until we; * have as many boxes as desired colors. Then the mean color in each; * remaining box becomes one of the possible output colors.; * ; * The second pass over the image maps each input pixel to the closest output; * color (optionally after applying a Floyd-Steinberg dithering correction).; * This mapping is logically trivial, but making it go fast enough requires; * considerable care.; *; * Heckbert-style quantizers vary a good deal in their policies for choosing; * the ""largest"" box and deciding where to cut it. The particular policies; * used here have proved out well in experimental comparisons, but better ones; * may yet be found.; *; * In earlier versions of the IJG code, this module quantized in YCbCr color; * space, processing the raw upsampled data without a color conversion step.; * This allowed the color conversion math to be done only once per colormap; * entry, not once per pixel. However, that optimization precluded other; * useful optimizations (such as merging color conversion with upsampling); * and it also interfered with desired capabilities such as quantizing to an; * externally-supplied colormap. We have therefore abandoned that approach.; * The present code works in the post-conversion color space, typically RGB.; *; * To improve the visual quality of the results, we actually work in scaled; * RG",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:244,Availability,error,errors,244,"/* Relabel R/G/B as components 0/1/2, respecting the RGB ordering defined; * in jmorecfg.h. As the code stands, it will do the right thing for R,G,B; * and B,G,R orders. If you define some other weird order in jmorecfg.h,; * you'll get compile errors until you extend this logic. In that case; * you'll probably want to tweak the histogram sizes too.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:261,Modifiability,extend,extend,261,"/* Relabel R/G/B as components 0/1/2, respecting the RGB ordering defined; * in jmorecfg.h. As the code stands, it will do the right thing for R,G,B; * and B,G,R orders. If you define some other weird order in jmorecfg.h,; * you'll get compile errors until you extend this logic. In that case; * you'll probably want to tweak the histogram sizes too.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:273,Testability,log,logic,273,"/* Relabel R/G/B as components 0/1/2, respecting the RGB ordering defined; * in jmorecfg.h. As the code stands, it will do the right thing for R,G,B; * and B,G,R orders. If you define some other weird order in jmorecfg.h,; * you'll get compile errors until you extend this logic. In that case; * you'll probably want to tweak the histogram sizes too.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:470,Energy Efficiency,allocate,allocate,470,"/*; * First we have the histogram data structure and routines for creating it.; *; * The number of bits of precision can be adjusted by changing these symbols.; * We recommend keeping 6 bits for G and 5 each for R and B.; * If you have plenty of memory and cycles, 6 bits all around gives marginally; * better results; if you are short of memory, 5 bits all around will save; * some space but degrade the results.; * To maintain a fully accurate histogram, we'd need to allocate a ""long""; * (preferably unsigned long) for each cell. In practice this is overkill;; * we can get by with 16 bits per cell. Few of the cell counts will overflow,; * and clamping those that do overflow to the maximum value will give close-; * enough results. This reduces the recommended histogram size from 256Kb; * to 128Kb, which is a useful savings on PC-class machines.; * (In the second pass the histogram space is re-used for pixel mapping data;; * in that capacity, each cell must be able to store zero to the number of; * desired colors. 16 bits/cell is plenty for that too.); * Since the JPEG code is intended to run in small memory model on 80x86; * machines, we can't just allocate the histogram in one chunk. Instead; * of a true 3-D array, we use a row of pointers to 2-D arrays. Each; * pointer corresponds to a C0 value (typically 2^5 = 32 pointers) and; * each 2-D array has 2^6*2^5 = 2048 or 2^6*2^6 = 4096 entries. Note that; * on 80x86 machines, the pointer row is in near memory but the actual; * arrays are in far memory (same arrangement as we use for image arrays).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:742,Energy Efficiency,reduce,reduces,742,"/*; * First we have the histogram data structure and routines for creating it.; *; * The number of bits of precision can be adjusted by changing these symbols.; * We recommend keeping 6 bits for G and 5 each for R and B.; * If you have plenty of memory and cycles, 6 bits all around gives marginally; * better results; if you are short of memory, 5 bits all around will save; * some space but degrade the results.; * To maintain a fully accurate histogram, we'd need to allocate a ""long""; * (preferably unsigned long) for each cell. In practice this is overkill;; * we can get by with 16 bits per cell. Few of the cell counts will overflow,; * and clamping those that do overflow to the maximum value will give close-; * enough results. This reduces the recommended histogram size from 256Kb; * to 128Kb, which is a useful savings on PC-class machines.; * (In the second pass the histogram space is re-used for pixel mapping data;; * in that capacity, each cell must be able to store zero to the number of; * desired colors. 16 bits/cell is plenty for that too.); * Since the JPEG code is intended to run in small memory model on 80x86; * machines, we can't just allocate the histogram in one chunk. Instead; * of a true 3-D array, we use a row of pointers to 2-D arrays. Each; * pointer corresponds to a C0 value (typically 2^5 = 32 pointers) and; * each 2-D array has 2^6*2^5 = 2048 or 2^6*2^6 = 4096 entries. Note that; * on 80x86 machines, the pointer row is in near memory but the actual; * arrays are in far memory (same arrangement as we use for image arrays).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:1163,Energy Efficiency,allocate,allocate,1163,"/*; * First we have the histogram data structure and routines for creating it.; *; * The number of bits of precision can be adjusted by changing these symbols.; * We recommend keeping 6 bits for G and 5 each for R and B.; * If you have plenty of memory and cycles, 6 bits all around gives marginally; * better results; if you are short of memory, 5 bits all around will save; * some space but degrade the results.; * To maintain a fully accurate histogram, we'd need to allocate a ""long""; * (preferably unsigned long) for each cell. In practice this is overkill;; * we can get by with 16 bits per cell. Few of the cell counts will overflow,; * and clamping those that do overflow to the maximum value will give close-; * enough results. This reduces the recommended histogram size from 256Kb; * to 128Kb, which is a useful savings on PC-class machines.; * (In the second pass the histogram space is re-used for pixel mapping data;; * in that capacity, each cell must be able to store zero to the number of; * desired colors. 16 bits/cell is plenty for that too.); * Since the JPEG code is intended to run in small memory model on 80x86; * machines, we can't just allocate the histogram in one chunk. Instead; * of a true 3-D array, we use a row of pointers to 2-D arrays. Each; * pointer corresponds to a C0 value (typically 2^5 = 32 pointers) and; * each 2-D array has 2^6*2^5 = 2048 or 2^6*2^6 = 4096 entries. Note that; * on 80x86 machines, the pointer row is in near memory but the actual; * arrays are in far memory (same arrangement as we use for image arrays).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:53,Integrability,rout,routines,53,"/*; * First we have the histogram data structure and routines for creating it.; *; * The number of bits of precision can be adjusted by changing these symbols.; * We recommend keeping 6 bits for G and 5 each for R and B.; * If you have plenty of memory and cycles, 6 bits all around gives marginally; * better results; if you are short of memory, 5 bits all around will save; * some space but degrade the results.; * To maintain a fully accurate histogram, we'd need to allocate a ""long""; * (preferably unsigned long) for each cell. In practice this is overkill;; * we can get by with 16 bits per cell. Few of the cell counts will overflow,; * and clamping those that do overflow to the maximum value will give close-; * enough results. This reduces the recommended histogram size from 256Kb; * to 128Kb, which is a useful savings on PC-class machines.; * (In the second pass the histogram space is re-used for pixel mapping data;; * in that capacity, each cell must be able to store zero to the number of; * desired colors. 16 bits/cell is plenty for that too.); * Since the JPEG code is intended to run in small memory model on 80x86; * machines, we can't just allocate the histogram in one chunk. Instead; * of a true 3-D array, we use a row of pointers to 2-D arrays. Each; * pointer corresponds to a C0 value (typically 2^5 = 32 pointers) and; * each 2-D array has 2^6*2^5 = 2048 or 2^6*2^6 = 4096 entries. Note that; * on 80x86 machines, the pointer row is in near memory but the actual; * arrays are in far memory (same arrangement as we use for image arrays).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:87,Availability,Error,Errors,87,"/* type for top-level pointer */; /* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array has (#columns + 2) entries; the extra entry at; * each end saves us from special-casing the first and last pixels.; * Each entry is three values long, one value for each color component.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:188,Availability,error,error,188,"/* type for top-level pointer */; /* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array has (#columns + 2) entries; the extra entry at; * each end saves us from special-casing the first and last pixels.; * Each entry is three values long, one value for each color component.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:472,Availability,error,errors,472,"/* type for top-level pointer */; /* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array has (#columns + 2) entries; the extra entry at; * each end saves us from special-casing the first and last pixels.; * Each entry is three values long, one value for each color component.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:522,Availability,error,errors,522,"/* type for top-level pointer */; /* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array has (#columns + 2) entries; the extra entry at; * each end saves us from special-casing the first and last pixels.; * Each entry is three values long, one value for each color component.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:587,Availability,error,errors,587,"/* type for top-level pointer */; /* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array has (#columns + 2) entries; the extra entry at; * each end saves us from special-casing the first and last pixels.; * Each entry is three values long, one value for each color component.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:674,Availability,error,errors,674,"/* type for top-level pointer */; /* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array has (#columns + 2) entries; the extra entry at; * each end saves us from special-casing the first and last pixels.; * Each entry is three values long, one value for each color component.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:1172,Availability,error,error,1172,"/* type for top-level pointer */; /* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array has (#columns + 2) entries; the extra entry at; * each end saves us from special-casing the first and last pixels.; * Each entry is three values long, one value for each color component.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:1194,Energy Efficiency,allocate,allocated,1194,"/* type for top-level pointer */; /* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array has (#columns + 2) entries; the extra entry at; * each end saves us from special-casing the first and last pixels.; * Each entry is three values long, one value for each color component.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:652,Modifiability,variab,variables,652,"/* type for top-level pointer */; /* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array has (#columns + 2) entries; the extra entry at; * each end saves us from special-casing the first and last pixels.; * Each entry is three values long, one value for each color component.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:747,Modifiability,variab,variables,747,"/* type for top-level pointer */; /* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array has (#columns + 2) entries; the extra entry at; * each end saves us from special-casing the first and last pixels.; * Each entry is three values long, one value for each color component.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:823,Security,access,access,823,"/* type for top-level pointer */; /* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array has (#columns + 2) entries; the extra entry at; * each end saves us from special-casing the first and last pixels.; * Each entry is three values long, one value for each color component.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:14,Availability,error,error,14,/* pointer to error array (in FAR storage!) */; /* Private subobject */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:12,Energy Efficiency,allocate,allocated,12,/* colormap allocated at init time */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:49,Modifiability,Variab,Variables,49,/* desired # of colors = size of colormap */; /* Variables for accumulating image statistics */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:48,Modifiability,Variab,Variables,48,/* TRUE if next pass must zero histogram */; /* Variables for Floyd-Steinberg dithering */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:15,Availability,error,errors,15,/* accumulated errors */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:34,Availability,error,error,34,/* table for clamping the applied error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:72,Deployability,update,updates,72,"/*; * Prescan some rows of pixels.; * In this module the prescan simply updates the histogram, which has been; * initialized to zeroes by start_pass.; * An output_buf parameter is required by the method signature, but no data; * is actually output (in fact the buffer controller is probably passing a; * NULL pointer).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:65,Usability,simpl,simply,65,"/*; * Prescan some rows of pixels.; * In this module the prescan simply updates the histogram, which has been; * initialized to zeroes by start_pass.; * An output_buf parameter is required by the method signature, but no data; * is actually output (in fact the buffer controller is probably passing a; * NULL pointer).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:37,Usability,undo,undo,37,"/* increment, check for overflow and undo increment if so. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:42,Integrability,rout,routines,42,"/*; * Next we have the really interesting routines: selection of a colormap; * given the completed histogram.; * These routines work with a list of ""boxes"", each representing a rectangular; * subset of the input color space (to histogram precision).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:119,Integrability,rout,routines,119,"/*; * Next we have the really interesting routines: selection of a colormap; * given the completed histogram.; * These routines work with a list of ""boxes"", each representing a rectangular; * subset of the input color space (to histogram precision).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:3,Deployability,Update,Update,3,"/* Update box volume.; * We use 2-norm rather than real volume here; this biases the method; * against making long narrow boxes, and it has the side benefit that; * a box is splittable iff norm > 0.; * Since the differences are expressed in histogram-cell units,; * we have to shift back to JSAMPLE units to get consistent distances;; * after which, we scale according to the selected distance scale factors.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:41,Energy Efficiency,green,green,41,"/* We want to break any ties in favor of green, then red, blue last.; * This code does the right thing for R,G,B or B,G,R color orders only.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:47,Deployability,update,update,47,"/* Choose split point along selected axis, and update box bounds.; * Current algorithm: split at halfway point.; * (Since the box has been shrunk to minimum volume,; * any split will produce two nonempty subboxes.); * Note that lb value is max for lower box, so must be < old max.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:3,Deployability,Update,Update,3,/* Update stats for boxes */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:10,Integrability,rout,routine,10,/* Master routine for color selection */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate workspace for box list */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:3,Performance,Perform,Perform,3,/* Perform median-cut to produce final box list */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:3478,Deployability,update,update,3478,"every histogram cell. Unfortunately,; * it needs a work array to hold the best-distance-so-far for each histogram; * cell (because the inner loop has to be over cells, not colormap entries).; * The work array elements have to be INT32s, so the work array would need; * 256Kb at our recommended precision. This is not feasible in DOS machines.; *; * To get around these problems, we apply Thomas' method to compute the; * nearest colors for only the cells within a small subbox of the histogram.; * The work array need be only as big as the subbox, so the memory usage; * problem is solved. Furthermore, we need not fill subboxes that are never; * referenced in pass2; many images use only part of the color gamut, so a; * fair amount of work is saved. An additional advantage of this; * approach is that we can apply Heckbert's locality criterion to quickly; * eliminate colormap entries that are far away from the subbox; typically; * three-fourths of the colormap entries are rejected by Heckbert's criterion,; * and we need not compute their distances to individual cells in the subbox.; * The speed of this approach is heavily influenced by the subbox size: too; * small means too much overhead, too big loses because Heckbert's criterion; * can't eliminate as many colormap entries. Empirically the best subbox; * size seems to be about 1/512th of the histogram (1/8th in each direction).; *; * Thomas' article also describes a refined method which is asymptotically; * faster than the brute-force method, but it is also far more complex and; * cannot efficiently be applied to small subboxes. It is therefore not; * useful for programs intended to be portable to DOS machines. On machines; * with plenty of memory, filling the whole histogram in one shot with Thomas'; * refined method might be faster than the present code --- but then again,; * it might not be any faster, and it's certainly more complicated.; */; /* log2(histogram cells in update box) for each axis; this can be adjusted */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:891,Energy Efficiency,efficient,efficiently,891,"/*; * These routines are concerned with the time-critical task of mapping input; * colors to the nearest color in the selected colormap.; *; * We re-use the histogram space as an ""inverse color map"", essentially a; * cache for the results of nearest-color searches. All colors within a; * histogram cell will be mapped to the same colormap entry, namely the one; * closest to the cell's center. This may not be quite the closest entry to; * the actual input color, but it's almost as good. A zero in the cache; * indicates we haven't found the nearest color for that cell yet; the array; * is cleared to zeroes before starting the mapping pass. When we find the; * nearest color for a cell, its colormap index plus one is recorded in the; * cache for future use. The pass2 scanning routines call fill_inverse_cmap; * when they need to use an unfilled entry in the cache.; *; * Our method of efficiently finding nearest colors is based on the ""locally; * sorted search"" idea described by Heckbert and on the incremental distance; * calculation described by Spencer W. Thomas in chapter III.1 of Graphics; * Gems II (James Arvo, ed. Academic Press, 1991). Thomas points out that; * the distances from a given colormap entry to each cell of the histogram can; * be computed quickly using an incremental method: the differences between; * distances to adjacent cells themselves differ by a constant. This allows a; * fairly fast implementation of the ""brute force"" approach of computing the; * distance from every colormap entry to every histogram cell. Unfortunately,; * it needs a work array to hold the best-distance-so-far for each histogram; * cell (because the inner loop has to be over cells, not colormap entries).; * The work array elements have to be INT32s, so the work array would need; * 256Kb at our recommended precision. This is not feasible in DOS machines.; *; * To get around these problems, we apply Thomas' method to compute the; * nearest colors for only the cells within a small sub",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:3085,Energy Efficiency,efficient,efficiently,3085,"every histogram cell. Unfortunately,; * it needs a work array to hold the best-distance-so-far for each histogram; * cell (because the inner loop has to be over cells, not colormap entries).; * The work array elements have to be INT32s, so the work array would need; * 256Kb at our recommended precision. This is not feasible in DOS machines.; *; * To get around these problems, we apply Thomas' method to compute the; * nearest colors for only the cells within a small subbox of the histogram.; * The work array need be only as big as the subbox, so the memory usage; * problem is solved. Furthermore, we need not fill subboxes that are never; * referenced in pass2; many images use only part of the color gamut, so a; * fair amount of work is saved. An additional advantage of this; * approach is that we can apply Heckbert's locality criterion to quickly; * eliminate colormap entries that are far away from the subbox; typically; * three-fourths of the colormap entries are rejected by Heckbert's criterion,; * and we need not compute their distances to individual cells in the subbox.; * The speed of this approach is heavily influenced by the subbox size: too; * small means too much overhead, too big loses because Heckbert's criterion; * can't eliminate as many colormap entries. Empirically the best subbox; * size seems to be about 1/512th of the histogram (1/8th in each direction).; *; * Thomas' article also describes a refined method which is asymptotically; * faster than the brute-force method, but it is also far more complex and; * cannot efficiently be applied to small subboxes. It is therefore not; * useful for programs intended to be portable to DOS machines. On machines; * with plenty of memory, filling the whole histogram in one shot with Thomas'; * refined method might be faster than the present code --- but then again,; * it might not be any faster, and it's certainly more complicated.; */; /* log2(histogram cells in update box) for each axis; this can be adjusted */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:12,Integrability,rout,routines,12,"/*; * These routines are concerned with the time-critical task of mapping input; * colors to the nearest color in the selected colormap.; *; * We re-use the histogram space as an ""inverse color map"", essentially a; * cache for the results of nearest-color searches. All colors within a; * histogram cell will be mapped to the same colormap entry, namely the one; * closest to the cell's center. This may not be quite the closest entry to; * the actual input color, but it's almost as good. A zero in the cache; * indicates we haven't found the nearest color for that cell yet; the array; * is cleared to zeroes before starting the mapping pass. When we find the; * nearest color for a cell, its colormap index plus one is recorded in the; * cache for future use. The pass2 scanning routines call fill_inverse_cmap; * when they need to use an unfilled entry in the cache.; *; * Our method of efficiently finding nearest colors is based on the ""locally; * sorted search"" idea described by Heckbert and on the incremental distance; * calculation described by Spencer W. Thomas in chapter III.1 of Graphics; * Gems II (James Arvo, ed. Academic Press, 1991). Thomas points out that; * the distances from a given colormap entry to each cell of the histogram can; * be computed quickly using an incremental method: the differences between; * distances to adjacent cells themselves differ by a constant. This allows a; * fairly fast implementation of the ""brute force"" approach of computing the; * distance from every colormap entry to every histogram cell. Unfortunately,; * it needs a work array to hold the best-distance-so-far for each histogram; * cell (because the inner loop has to be over cells, not colormap entries).; * The work array elements have to be INT32s, so the work array would need; * 256Kb at our recommended precision. This is not feasible in DOS machines.; *; * To get around these problems, we apply Thomas' method to compute the; * nearest colors for only the cells within a small sub",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:782,Integrability,rout,routines,782,"/*; * These routines are concerned with the time-critical task of mapping input; * colors to the nearest color in the selected colormap.; *; * We re-use the histogram space as an ""inverse color map"", essentially a; * cache for the results of nearest-color searches. All colors within a; * histogram cell will be mapped to the same colormap entry, namely the one; * closest to the cell's center. This may not be quite the closest entry to; * the actual input color, but it's almost as good. A zero in the cache; * indicates we haven't found the nearest color for that cell yet; the array; * is cleared to zeroes before starting the mapping pass. When we find the; * nearest color for a cell, its colormap index plus one is recorded in the; * cache for future use. The pass2 scanning routines call fill_inverse_cmap; * when they need to use an unfilled entry in the cache.; *; * Our method of efficiently finding nearest colors is based on the ""locally; * sorted search"" idea described by Heckbert and on the incremental distance; * calculation described by Spencer W. Thomas in chapter III.1 of Graphics; * Gems II (James Arvo, ed. Academic Press, 1991). Thomas points out that; * the distances from a given colormap entry to each cell of the histogram can; * be computed quickly using an incremental method: the differences between; * distances to adjacent cells themselves differ by a constant. This allows a; * fairly fast implementation of the ""brute force"" approach of computing the; * distance from every colormap entry to every histogram cell. Unfortunately,; * it needs a work array to hold the best-distance-so-far for each histogram; * cell (because the inner loop has to be over cells, not colormap entries).; * The work array elements have to be INT32s, so the work array would need; * 256Kb at our recommended precision. This is not feasible in DOS machines.; *; * To get around these problems, we apply Thomas' method to compute the; * nearest colors for only the cells within a small sub",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:3185,Modifiability,portab,portable,3185,"every histogram cell. Unfortunately,; * it needs a work array to hold the best-distance-so-far for each histogram; * cell (because the inner loop has to be over cells, not colormap entries).; * The work array elements have to be INT32s, so the work array would need; * 256Kb at our recommended precision. This is not feasible in DOS machines.; *; * To get around these problems, we apply Thomas' method to compute the; * nearest colors for only the cells within a small subbox of the histogram.; * The work array need be only as big as the subbox, so the memory usage; * problem is solved. Furthermore, we need not fill subboxes that are never; * referenced in pass2; many images use only part of the color gamut, so a; * fair amount of work is saved. An additional advantage of this; * approach is that we can apply Heckbert's locality criterion to quickly; * eliminate colormap entries that are far away from the subbox; typically; * three-fourths of the colormap entries are rejected by Heckbert's criterion,; * and we need not compute their distances to individual cells in the subbox.; * The speed of this approach is heavily influenced by the subbox size: too; * small means too much overhead, too big loses because Heckbert's criterion; * can't eliminate as many colormap entries. Empirically the best subbox; * size seems to be about 1/512th of the histogram (1/8th in each direction).; *; * Thomas' article also describes a refined method which is asymptotically; * faster than the brute-force method, but it is also far more complex and; * cannot efficiently be applied to small subboxes. It is therefore not; * useful for programs intended to be portable to DOS machines. On machines; * with plenty of memory, filling the whole histogram in one shot with Thomas'; * refined method might be faster than the present code --- but then again,; * it might not be any faster, and it's certainly more complicated.; */; /* log2(histogram cells in update box) for each axis; this can be adjusted */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:217,Performance,cache,cache,217,"/*; * These routines are concerned with the time-critical task of mapping input; * colors to the nearest color in the selected colormap.; *; * We re-use the histogram space as an ""inverse color map"", essentially a; * cache for the results of nearest-color searches. All colors within a; * histogram cell will be mapped to the same colormap entry, namely the one; * closest to the cell's center. This may not be quite the closest entry to; * the actual input color, but it's almost as good. A zero in the cache; * indicates we haven't found the nearest color for that cell yet; the array; * is cleared to zeroes before starting the mapping pass. When we find the; * nearest color for a cell, its colormap index plus one is recorded in the; * cache for future use. The pass2 scanning routines call fill_inverse_cmap; * when they need to use an unfilled entry in the cache.; *; * Our method of efficiently finding nearest colors is based on the ""locally; * sorted search"" idea described by Heckbert and on the incremental distance; * calculation described by Spencer W. Thomas in chapter III.1 of Graphics; * Gems II (James Arvo, ed. Academic Press, 1991). Thomas points out that; * the distances from a given colormap entry to each cell of the histogram can; * be computed quickly using an incremental method: the differences between; * distances to adjacent cells themselves differ by a constant. This allows a; * fairly fast implementation of the ""brute force"" approach of computing the; * distance from every colormap entry to every histogram cell. Unfortunately,; * it needs a work array to hold the best-distance-so-far for each histogram; * cell (because the inner loop has to be over cells, not colormap entries).; * The work array elements have to be INT32s, so the work array would need; * 256Kb at our recommended precision. This is not feasible in DOS machines.; *; * To get around these problems, we apply Thomas' method to compute the; * nearest colors for only the cells within a small sub",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:504,Performance,cache,cache,504,"/*; * These routines are concerned with the time-critical task of mapping input; * colors to the nearest color in the selected colormap.; *; * We re-use the histogram space as an ""inverse color map"", essentially a; * cache for the results of nearest-color searches. All colors within a; * histogram cell will be mapped to the same colormap entry, namely the one; * closest to the cell's center. This may not be quite the closest entry to; * the actual input color, but it's almost as good. A zero in the cache; * indicates we haven't found the nearest color for that cell yet; the array; * is cleared to zeroes before starting the mapping pass. When we find the; * nearest color for a cell, its colormap index plus one is recorded in the; * cache for future use. The pass2 scanning routines call fill_inverse_cmap; * when they need to use an unfilled entry in the cache.; *; * Our method of efficiently finding nearest colors is based on the ""locally; * sorted search"" idea described by Heckbert and on the incremental distance; * calculation described by Spencer W. Thomas in chapter III.1 of Graphics; * Gems II (James Arvo, ed. Academic Press, 1991). Thomas points out that; * the distances from a given colormap entry to each cell of the histogram can; * be computed quickly using an incremental method: the differences between; * distances to adjacent cells themselves differ by a constant. This allows a; * fairly fast implementation of the ""brute force"" approach of computing the; * distance from every colormap entry to every histogram cell. Unfortunately,; * it needs a work array to hold the best-distance-so-far for each histogram; * cell (because the inner loop has to be over cells, not colormap entries).; * The work array elements have to be INT32s, so the work array would need; * 256Kb at our recommended precision. This is not feasible in DOS machines.; *; * To get around these problems, we apply Thomas' method to compute the; * nearest colors for only the cells within a small sub",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:741,Performance,cache,cache,741,"/*; * These routines are concerned with the time-critical task of mapping input; * colors to the nearest color in the selected colormap.; *; * We re-use the histogram space as an ""inverse color map"", essentially a; * cache for the results of nearest-color searches. All colors within a; * histogram cell will be mapped to the same colormap entry, namely the one; * closest to the cell's center. This may not be quite the closest entry to; * the actual input color, but it's almost as good. A zero in the cache; * indicates we haven't found the nearest color for that cell yet; the array; * is cleared to zeroes before starting the mapping pass. When we find the; * nearest color for a cell, its colormap index plus one is recorded in the; * cache for future use. The pass2 scanning routines call fill_inverse_cmap; * when they need to use an unfilled entry in the cache.; *; * Our method of efficiently finding nearest colors is based on the ""locally; * sorted search"" idea described by Heckbert and on the incremental distance; * calculation described by Spencer W. Thomas in chapter III.1 of Graphics; * Gems II (James Arvo, ed. Academic Press, 1991). Thomas points out that; * the distances from a given colormap entry to each cell of the histogram can; * be computed quickly using an incremental method: the differences between; * distances to adjacent cells themselves differ by a constant. This allows a; * fairly fast implementation of the ""brute force"" approach of computing the; * distance from every colormap entry to every histogram cell. Unfortunately,; * it needs a work array to hold the best-distance-so-far for each histogram; * cell (because the inner loop has to be over cells, not colormap entries).; * The work array elements have to be INT32s, so the work array would need; * 256Kb at our recommended precision. This is not feasible in DOS machines.; *; * To get around these problems, we apply Thomas' method to compute the; * nearest colors for only the cells within a small sub",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:864,Performance,cache,cache,864,"/*; * These routines are concerned with the time-critical task of mapping input; * colors to the nearest color in the selected colormap.; *; * We re-use the histogram space as an ""inverse color map"", essentially a; * cache for the results of nearest-color searches. All colors within a; * histogram cell will be mapped to the same colormap entry, namely the one; * closest to the cell's center. This may not be quite the closest entry to; * the actual input color, but it's almost as good. A zero in the cache; * indicates we haven't found the nearest color for that cell yet; the array; * is cleared to zeroes before starting the mapping pass. When we find the; * nearest color for a cell, its colormap index plus one is recorded in the; * cache for future use. The pass2 scanning routines call fill_inverse_cmap; * when they need to use an unfilled entry in the cache.; *; * Our method of efficiently finding nearest colors is based on the ""locally; * sorted search"" idea described by Heckbert and on the incremental distance; * calculation described by Spencer W. Thomas in chapter III.1 of Graphics; * Gems II (James Arvo, ed. Academic Press, 1991). Thomas points out that; * the distances from a given colormap entry to each cell of the histogram can; * be computed quickly using an incremental method: the differences between; * distances to adjacent cells themselves differ by a constant. This allows a; * fairly fast implementation of the ""brute force"" approach of computing the; * distance from every colormap entry to every histogram cell. Unfortunately,; * it needs a work array to hold the best-distance-so-far for each histogram; * cell (because the inner loop has to be over cells, not colormap entries).; * The work array elements have to be INT32s, so the work array would need; * 256Kb at our recommended precision. This is not feasible in DOS machines.; *; * To get around these problems, we apply Thomas' method to compute the; * nearest colors for only the cells within a small sub",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:593,Usability,clear,cleared,593,"/*; * These routines are concerned with the time-critical task of mapping input; * colors to the nearest color in the selected colormap.; *; * We re-use the histogram space as an ""inverse color map"", essentially a; * cache for the results of nearest-color searches. All colors within a; * histogram cell will be mapped to the same colormap entry, namely the one; * closest to the cell's center. This may not be quite the closest entry to; * the actual input color, but it's almost as good. A zero in the cache; * indicates we haven't found the nearest color for that cell yet; the array; * is cleared to zeroes before starting the mapping pass. When we find the; * nearest color for a cell, its colormap index plus one is recorded in the; * cache for future use. The pass2 scanning routines call fill_inverse_cmap; * when they need to use an unfilled entry in the cache.; *; * Our method of efficiently finding nearest colors is based on the ""locally; * sorted search"" idea described by Heckbert and on the incremental distance; * calculation described by Spencer W. Thomas in chapter III.1 of Graphics; * Gems II (James Arvo, ed. Academic Press, 1991). Thomas points out that; * the distances from a given colormap entry to each cell of the histogram can; * be computed quickly using an incremental method: the differences between; * distances to adjacent cells themselves differ by a constant. This allows a; * fairly fast implementation of the ""brute force"" approach of computing the; * distance from every colormap entry to every histogram cell. Unfortunately,; * it needs a work array to hold the best-distance-so-far for each histogram; * cell (because the inner loop has to be over cells, not colormap entries).; * The work array elements have to be INT32s, so the work array would need; * 256Kb at our recommended precision. This is not feasible in DOS machines.; *; * To get around these problems, we apply Thomas' method to compute the; * nearest colors for only the cells within a small sub",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:22,Deployability,update,update,22,/* # of hist cells in update box */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:21,Integrability,rout,routines,21,"/*; * The next three routines implement inverse colormap filling. They could; * all be folded into one big routine, but splitting them up this way saves; * some stack space (the mindist[] and bestdist[] arrays need not coexist); * and may allow some compilers to produce better code by registerizing more; * inner-loop variables.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:107,Integrability,rout,routine,107,"/*; * The next three routines implement inverse colormap filling. They could; * all be folded into one big routine, but splitting them up this way saves; * some stack space (the mindist[] and bestdist[] arrays need not coexist); * and may allow some compilers to produce better code by registerizing more; * inner-loop variables.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:319,Modifiability,variab,variables,319,"/*; * The next three routines implement inverse colormap filling. They could; * all be folded into one big routine, but splitting them up this way saves; * some stack space (the mindist[] and bestdist[] arrays need not coexist); * and may allow some compilers to produce better code by registerizing more; * inner-loop variables.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:50,Deployability,update,update,50,"/* Locate the colormap entries close enough to an update box to be candidates; * for the nearest entry to some cell(s) in the update box. The update box; * is specified by the center coordinates of its first cell. The number of; * candidate colormap entries is returned, and their colormap indexes are; * placed in colorlist[].; * This routine uses Heckbert's ""locally sorted search"" criterion to select; * the colors that need further consideration.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:126,Deployability,update,update,126,"/* Locate the colormap entries close enough to an update box to be candidates; * for the nearest entry to some cell(s) in the update box. The update box; * is specified by the center coordinates of its first cell. The number of; * candidate colormap entries is returned, and their colormap indexes are; * placed in colorlist[].; * This routine uses Heckbert's ""locally sorted search"" criterion to select; * the colors that need further consideration.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:142,Deployability,update,update,142,"/* Locate the colormap entries close enough to an update box to be candidates; * for the nearest entry to some cell(s) in the update box. The update box; * is specified by the center coordinates of its first cell. The number of; * candidate colormap entries is returned, and their colormap indexes are; * placed in colorlist[].; * This routine uses Heckbert's ""locally sorted search"" criterion to select; * the colors that need further consideration.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:336,Integrability,rout,routine,336,"/* Locate the colormap entries close enough to an update box to be candidates; * for the nearest entry to some cell(s) in the update box. The update box; * is specified by the center coordinates of its first cell. The number of; * candidate colormap entries is returned, and their colormap indexes are; * placed in colorlist[].; * This routine uses Heckbert's ""locally sorted search"" criterion to select; * the colors that need further consideration.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:288,Availability,down,down,288,"/* min distance to colormap entry i */; /* Compute true coordinates of update box's upper corner and center.; * Actually we compute the coordinates of the center of the upper-corner; * histogram cell, which are the upper bounds of the volume we care about.; * Note that since "">>"" rounds down, the ""center"" values may be closer to; * min than to max; hence comparisons to them must be ""<="", not ""<"".; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:71,Deployability,update,update,71,"/* min distance to colormap entry i */; /* Compute true coordinates of update box's upper corner and center.; * Actually we compute the coordinates of the center of the upper-corner; * histogram cell, which are the upper bounds of the volume we care about.; * Note that since "">>"" rounds down, the ""center"" values may be closer to; * min than to max; hence comparisons to them must be ""<="", not ""<"".; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:92,Deployability,update,update,92,"/* For each color in colormap, find:; * 1. its minimum squared-distance to any point in the update box; * (zero if color is within update box);; * 2. its maximum squared-distance to any point in the update box.; * Both of these can be found by considering only the corners of the box.; * We save the minimum distance for each color in mindist[];; * only the smallest maximum distance is of interest.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:131,Deployability,update,update,131,"/* For each color in colormap, find:; * 1. its minimum squared-distance to any point in the update box; * (zero if color is within update box);; * 2. its maximum squared-distance to any point in the update box.; * Both of these can be found by considering only the corners of the box.; * We save the minimum distance for each color in mindist[];; * only the smallest maximum distance is of interest.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:199,Deployability,update,update,199,"/* For each color in colormap, find:; * 1. its minimum squared-distance to any point in the update box; * (zero if color is within update box);; * 2. its maximum squared-distance to any point in the update box.; * Both of these can be found by considering only the corners of the box.; * We save the minimum distance for each color in mindist[];; * only the smallest maximum distance is of interest.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:35,Deployability,update,update,35,"/* Now we know that no cell in the update box is more than minmaxdist; * away from some colormap entry. Therefore, only colors that are; * within minmaxdist of some part of the box need be considered.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:56,Deployability,update,update,56,"/* Find the closest colormap entry for each cell in the update box,; * given the list of candidate colors prepared by find_nearby_colors.; * Return the indexes of the closest entries in the bestcolor[] array.; * This routine uses Thomas' incremental distance calculation method to; * find the distance from a colormap entry to successive cells in the box.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:217,Integrability,rout,routine,217,"/* Find the closest colormap entry for each cell in the update box,; * given the list of candidate colors prepared by find_nearby_colors.; * Return the indexes of the closest entries in the bestcolor[] array.; * This routine uses Thomas' incremental distance calculation method to; * find the distance from a colormap entry to successive cells in the box.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:49,Deployability,update,update,49,/* Initialize best-distance for each cell of the update box */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:149,Deployability,update,update,149,"/* For each color selected by find_nearby_colors,; * compute its distance to the center of each cell in the box.; * If that's less than best-so-far, update best distance and color number.; */; /* Nominal steps between cell centers (""x"" in Thomas article) */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:44,Deployability,update,update,44,"/* Fill the inverse-colormap entries in the update box that contains */; /* histogram cell c0/c1/c2. (Only that one cell MUST be filled, but */; /* we can fill as many others as we wish.) */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:24,Deployability,update,update,24,/* lower left corner of update box */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:21,Performance,cache,cache,21,/* pointer into main cache array */; /* This array lists the candidate colormap indexes. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:31,Deployability,update,update,31,/* Convert cell coordinates to update box ID */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:31,Deployability,update,update,31,"/* Compute true coordinates of update box's origin corner.; * Actually we compute the coordinates of the center of the corner; * histogram cell, which are the lower bounds of the volume we care about.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:115,Deployability,update,update,115,/* Determine which colormap entries are close enough to be candidates; * for the nearest entry to some cell in the update box.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:52,Performance,cache,cache,52,/* Save the best color numbers (plus 1) in the main cache array */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:16,Performance,perform,performs,16,/* This version performs no dithering */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:38,Performance,cache,cache,38,/* get pixel value and index into the cache */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:81,Deployability,update,update,81,"/* If we have not seen this color before, find nearest colormap entry */; /* and update the cache */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:92,Performance,cache,cache,92,"/* If we have not seen this color before, find nearest colormap entry */; /* and update the cache */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:16,Performance,perform,performs,16,/* This version performs Floyd-Steinberg dithering */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:11,Availability,error,error,11,/* current error or pixel value */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:3,Availability,error,error,3,/* error for pixel below cur */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:3,Availability,error,error,3,/* error for below/prev col */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:12,Integrability,depend,depending,12,/* +1 or -1 depending on direction */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:32,Availability,error,errorptr,32,"/* 3*dir, for advancing inptr & errorptr */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:10,Availability,error,error,10,/* Preset error values: no error propagated to first pixel from left */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:27,Availability,error,error,27,/* Preset error values: no error propagated to first pixel from left */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:10,Availability,error,error,10,/* and no error propagated to row below yet */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:18,Availability,error,error,18,"/* curN holds the error propagated from the previous pixel on the; * current line. Add the error propagated from the previous line; * to form the complete error correction term for this pixel, and; * round the error term (which is expressed * 16) to an integer.; * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct; * for either sign of the error value.; * Note: errorptr points to *previous* column's array entry.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:91,Availability,error,error,91,"/* curN holds the error propagated from the previous pixel on the; * current line. Add the error propagated from the previous line; * to form the complete error correction term for this pixel, and; * round the error term (which is expressed * 16) to an integer.; * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct; * for either sign of the error value.; * Note: errorptr points to *previous* column's array entry.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:155,Availability,error,error,155,"/* curN holds the error propagated from the previous pixel on the; * current line. Add the error propagated from the previous line; * to form the complete error correction term for this pixel, and; * round the error term (which is expressed * 16) to an integer.; * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct; * for either sign of the error value.; * Note: errorptr points to *previous* column's array entry.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:210,Availability,error,error,210,"/* curN holds the error propagated from the previous pixel on the; * current line. Add the error propagated from the previous line; * to form the complete error correction term for this pixel, and; * round the error term (which is expressed * 16) to an integer.; * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct; * for either sign of the error value.; * Note: errorptr points to *previous* column's array entry.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:357,Availability,error,error,357,"/* curN holds the error propagated from the previous pixel on the; * current line. Add the error propagated from the previous line; * to form the complete error correction term for this pixel, and; * round the error term (which is expressed * 16) to an integer.; * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct; * for either sign of the error value.; * Note: errorptr points to *previous* column's array entry.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:379,Availability,error,errorptr,379,"/* curN holds the error propagated from the previous pixel on the; * current line. Add the error propagated from the previous line; * to form the complete error correction term for this pixel, and; * round the error term (which is expressed * 16) to an integer.; * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct; * for either sign of the error value.; * Note: errorptr points to *previous* column's array entry.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:13,Availability,error,error,13,/* Limit the error using transfer function set by init_error_limit.; * See comments with init_error_limit for rationale.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:22,Availability,error,error,22,"/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.; * The maximum error is +- MAXJSAMPLE (or less with error limiting);; * this sets the required size of the range_limit array.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:78,Availability,error,error,78,"/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.; * The maximum error is +- MAXJSAMPLE (or less with error limiting);; * this sets the required size of the range_limit array.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:115,Availability,error,error,115,"/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.; * The maximum error is +- MAXJSAMPLE (or less with error limiting);; * this sets the required size of the range_limit array.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:18,Performance,cache,cache,18,/* Index into the cache with adjusted pixel value */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:81,Deployability,update,update,81,"/* If we have not seen this color before, find nearest colormap */; /* entry and update the cache */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:92,Performance,cache,cache,92,"/* If we have not seen this color before, find nearest colormap */; /* entry and update the cache */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:26,Availability,error,error,26,/* Compute representation error for this pixel */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:11,Availability,error,error,11,"/* Compute error fractions to be propagated to adjacent pixels.; * Add these into the running sums, and simultaneously shift the; * next-line error sums left by 1 column.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:142,Availability,error,error,142,"/* Compute error fractions to be propagated to adjacent pixels.; * Add these into the running sums, and simultaneously shift the; * next-line error sums left by 1 column.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:8,Availability,error,error,8,/* form error * 3 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:8,Availability,error,error,8,/* form error * 5 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:8,Availability,error,error,8,/* form error * 7 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:8,Availability,error,error,8,/* form error * 3 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:8,Availability,error,error,8,/* form error * 5 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:8,Availability,error,error,8,/* form error * 7 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:8,Availability,error,error,8,/* form error * 3 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:8,Availability,error,error,8,/* form error * 5 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:8,Availability,error,error,8,/* form error * 7 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:40,Availability,error,error,40,"/* At this point curN contains the 7/16 error value to be propagated; * to the next pixel on the current line, and all the errors for the; * next line have been shifted over. We are therefore ready to move on.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:123,Availability,error,errors,123,"/* At this point curN contains the 7/16 error value to be propagated; * to the next pixel on the current line, and all the errors for the; * next line have been shifted over. We are therefore ready to move on.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:11,Availability,error,errorptr,11,/* advance errorptr to current column */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:47,Availability,error,error,47,/* Post-loop cleanup: we must unload the final error values into the; * final fserrors[] entry. Note we need not unload belowerrN because; * it is for the dummy column before or after the actual array.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:21,Availability,error,error-limiting,21,"/*; * Initialize the error-limiting transfer function (lookup table).; * The raw F-S error computation can potentially compute error values of up to; * +- MAXJSAMPLE. But we want the maximum correction applied to a pixel to be; * much less, otherwise obviously wrong pixels will be created. (Typical; * effects include weird fringes at color-area boundaries, isolated bright; * pixels in a dark area, etc.) The standard advice for avoiding this problem; * is to ensure that the ""corners"" of the color cube are allocated as output; * colors; then repeated errors in the same direction cannot cause cascading; * error buildup. However, that only prevents the error from getting; * completely out of hand; Aaron Giles reports that error limiting improves; * the results even with corner colors allocated.; * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty; * well, but the smoother transfer function used below is even better. Thanks; * to Aaron Giles for this idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:85,Availability,error,error,85,"/*; * Initialize the error-limiting transfer function (lookup table).; * The raw F-S error computation can potentially compute error values of up to; * +- MAXJSAMPLE. But we want the maximum correction applied to a pixel to be; * much less, otherwise obviously wrong pixels will be created. (Typical; * effects include weird fringes at color-area boundaries, isolated bright; * pixels in a dark area, etc.) The standard advice for avoiding this problem; * is to ensure that the ""corners"" of the color cube are allocated as output; * colors; then repeated errors in the same direction cannot cause cascading; * error buildup. However, that only prevents the error from getting; * completely out of hand; Aaron Giles reports that error limiting improves; * the results even with corner colors allocated.; * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty; * well, but the smoother transfer function used below is even better. Thanks; * to Aaron Giles for this idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:127,Availability,error,error,127,"/*; * Initialize the error-limiting transfer function (lookup table).; * The raw F-S error computation can potentially compute error values of up to; * +- MAXJSAMPLE. But we want the maximum correction applied to a pixel to be; * much less, otherwise obviously wrong pixels will be created. (Typical; * effects include weird fringes at color-area boundaries, isolated bright; * pixels in a dark area, etc.) The standard advice for avoiding this problem; * is to ensure that the ""corners"" of the color cube are allocated as output; * colors; then repeated errors in the same direction cannot cause cascading; * error buildup. However, that only prevents the error from getting; * completely out of hand; Aaron Giles reports that error limiting improves; * the results even with corner colors allocated.; * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty; * well, but the smoother transfer function used below is even better. Thanks; * to Aaron Giles for this idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:555,Availability,error,errors,555,"/*; * Initialize the error-limiting transfer function (lookup table).; * The raw F-S error computation can potentially compute error values of up to; * +- MAXJSAMPLE. But we want the maximum correction applied to a pixel to be; * much less, otherwise obviously wrong pixels will be created. (Typical; * effects include weird fringes at color-area boundaries, isolated bright; * pixels in a dark area, etc.) The standard advice for avoiding this problem; * is to ensure that the ""corners"" of the color cube are allocated as output; * colors; then repeated errors in the same direction cannot cause cascading; * error buildup. However, that only prevents the error from getting; * completely out of hand; Aaron Giles reports that error limiting improves; * the results even with corner colors allocated.; * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty; * well, but the smoother transfer function used below is even better. Thanks; * to Aaron Giles for this idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:610,Availability,error,error,610,"/*; * Initialize the error-limiting transfer function (lookup table).; * The raw F-S error computation can potentially compute error values of up to; * +- MAXJSAMPLE. But we want the maximum correction applied to a pixel to be; * much less, otherwise obviously wrong pixels will be created. (Typical; * effects include weird fringes at color-area boundaries, isolated bright; * pixels in a dark area, etc.) The standard advice for avoiding this problem; * is to ensure that the ""corners"" of the color cube are allocated as output; * colors; then repeated errors in the same direction cannot cause cascading; * error buildup. However, that only prevents the error from getting; * completely out of hand; Aaron Giles reports that error limiting improves; * the results even with corner colors allocated.; * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty; * well, but the smoother transfer function used below is even better. Thanks; * to Aaron Giles for this idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:657,Availability,error,error,657,"/*; * Initialize the error-limiting transfer function (lookup table).; * The raw F-S error computation can potentially compute error values of up to; * +- MAXJSAMPLE. But we want the maximum correction applied to a pixel to be; * much less, otherwise obviously wrong pixels will be created. (Typical; * effects include weird fringes at color-area boundaries, isolated bright; * pixels in a dark area, etc.) The standard advice for avoiding this problem; * is to ensure that the ""corners"" of the color cube are allocated as output; * colors; then repeated errors in the same direction cannot cause cascading; * error buildup. However, that only prevents the error from getting; * completely out of hand; Aaron Giles reports that error limiting improves; * the results even with corner colors allocated.; * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty; * well, but the smoother transfer function used below is even better. Thanks; * to Aaron Giles for this idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:728,Availability,error,error,728,"/*; * Initialize the error-limiting transfer function (lookup table).; * The raw F-S error computation can potentially compute error values of up to; * +- MAXJSAMPLE. But we want the maximum correction applied to a pixel to be; * much less, otherwise obviously wrong pixels will be created. (Typical; * effects include weird fringes at color-area boundaries, isolated bright; * pixels in a dark area, etc.) The standard advice for avoiding this problem; * is to ensure that the ""corners"" of the color cube are allocated as output; * colors; then repeated errors in the same direction cannot cause cascading; * error buildup. However, that only prevents the error from getting; * completely out of hand; Aaron Giles reports that error limiting improves; * the results even with corner colors allocated.; * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty; * well, but the smoother transfer function used below is even better. Thanks; * to Aaron Giles for this idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:830,Availability,error,error,830,"/*; * Initialize the error-limiting transfer function (lookup table).; * The raw F-S error computation can potentially compute error values of up to; * +- MAXJSAMPLE. But we want the maximum correction applied to a pixel to be; * much less, otherwise obviously wrong pixels will be created. (Typical; * effects include weird fringes at color-area boundaries, isolated bright; * pixels in a dark area, etc.) The standard advice for avoiding this problem; * is to ensure that the ""corners"" of the color cube are allocated as output; * colors; then repeated errors in the same direction cannot cause cascading; * error buildup. However, that only prevents the error from getting; * completely out of hand; Aaron Giles reports that error limiting improves; * the results even with corner colors allocated.; * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty; * well, but the smoother transfer function used below is even better. Thanks; * to Aaron Giles for this idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:510,Energy Efficiency,allocate,allocated,510,"/*; * Initialize the error-limiting transfer function (lookup table).; * The raw F-S error computation can potentially compute error values of up to; * +- MAXJSAMPLE. But we want the maximum correction applied to a pixel to be; * much less, otherwise obviously wrong pixels will be created. (Typical; * effects include weird fringes at color-area boundaries, isolated bright; * pixels in a dark area, etc.) The standard advice for avoiding this problem; * is to ensure that the ""corners"" of the color cube are allocated as output; * colors; then repeated errors in the same direction cannot cause cascading; * error buildup. However, that only prevents the error from getting; * completely out of hand; Aaron Giles reports that error limiting improves; * the results even with corner colors allocated.; * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty; * well, but the smoother transfer function used below is even better. Thanks; * to Aaron Giles for this idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:791,Energy Efficiency,allocate,allocated,791,"/*; * Initialize the error-limiting transfer function (lookup table).; * The raw F-S error computation can potentially compute error values of up to; * +- MAXJSAMPLE. But we want the maximum correction applied to a pixel to be; * much less, otherwise obviously wrong pixels will be created. (Typical; * effects include weird fringes at color-area boundaries, isolated bright; * pixels in a dark area, etc.) The standard advice for avoiding this problem; * is to ensure that the ""corners"" of the color cube are allocated as output; * colors; then repeated errors in the same direction cannot cause cascading; * error buildup. However, that only prevents the error from getting; * completely out of hand; Aaron Giles reports that error limiting improves; * the results even with corner colors allocated.; * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty; * well, but the smoother transfer function used below is even better. Thanks; * to Aaron Giles for this idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:431,Safety,avoid,avoiding,431,"/*; * Initialize the error-limiting transfer function (lookup table).; * The raw F-S error computation can potentially compute error values of up to; * +- MAXJSAMPLE. But we want the maximum correction applied to a pixel to be; * much less, otherwise obviously wrong pixels will be created. (Typical; * effects include weird fringes at color-area boundaries, isolated bright; * pixels in a dark area, etc.) The standard advice for avoiding this problem; * is to ensure that the ""corners"" of the color cube are allocated as output; * colors; then repeated errors in the same direction cannot cause cascading; * error buildup. However, that only prevents the error from getting; * completely out of hand; Aaron Giles reports that error limiting improves; * the results even with corner colors allocated.; * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty; * well, but the smoother transfer function used below is even better. Thanks; * to Aaron Giles for this idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:807,Usability,simpl,simple,807,"/*; * Initialize the error-limiting transfer function (lookup table).; * The raw F-S error computation can potentially compute error values of up to; * +- MAXJSAMPLE. But we want the maximum correction applied to a pixel to be; * much less, otherwise obviously wrong pixels will be created. (Typical; * effects include weird fringes at color-area boundaries, isolated bright; * pixels in a dark area, etc.) The standard advice for avoiding this problem; * is to ensure that the ""corners"" of the color cube are allocated as output; * colors; then repeated errors in the same direction cannot cause cascading; * error buildup. However, that only prevents the error from getting; * completely out of hand; Aaron Giles reports that error limiting improves; * the results even with corner colors allocated.; * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty; * well, but the smoother transfer function used below is even better. Thanks; * to Aaron Giles for this idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate and fill in the error_limiter table */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:7,Availability,error,errors,7,/* Map errors 1:1 up to +- MAXJSAMPLE/16 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:7,Availability,error,errors,7,/* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate Floyd-Steinberg workspace if we didn't already. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:29,Availability,error,errors,29,/* Initialize the propagated errors to zero. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:12,Availability,error,error-limit,12,/* Make the error-limit table if we didn't already. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:28,Integrability,rout,routine,28,/*; * Module initialization routine for 2-pass color quantization.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:28,Energy Efficiency,allocate,allocated,28,/* flag optional arrays not allocated */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate the histogram/inverse colormap storage */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:35,Energy Efficiency,Allocate,Allocate,35,"/* histogram is garbage now */; /* Allocate storage for the completed colormap, if required.; * We do this now since it is FAR storage and may affect; * the memory manager's space calculations.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:3,Energy Efficiency,Allocate,Allocate,3,"/* Allocate Floyd-Steinberg workspace if necessary.; * This isn't really needed until pass 2, but again it is FAR storage.; * Although we will cope with a later change in dither_mode,; * we do not promise to honor max_memory_to_use if dither_mode changes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:28,Availability,error,error-limiting,28,/* Might as well create the error-limiting table too. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:298,Integrability,rout,routines,298,"/*; * jutils.c; *; * Copyright (C) 1991-1996, Thomas G. Lane.; * Modified 2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains tables and miscellaneous utility routines needed; * for both compression and decompression.; * Note we prefix all global names with ""j"" to minimize conflicts with; * a surrounding application.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:82,Usability,Guid,Guido,82,"/*; * jutils.c; *; * Copyright (C) 1991-1996, Thomas G. Lane.; * Modified 2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains tables and miscellaneous utility routines needed; * for both compression and decompression.; * Note we prefix all global names with ""j"" to minimize conflicts with; * a surrounding application.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:348,Testability,test,test,348,"/*; * jpeg_natural_order[i] is the natural-order position of the i'th element; * of zigzag order.; *; * When reading corrupted data, the Huffman decoders could attempt; * to reference an entry beyond the end of this array (if the decoded; * zero run length reaches past the end of the block). To prevent; * wild stores without adding an inner-loop test, we put some extra; * ""63""s after the real entries. This will cause the extra coefficient; * to be stored in location 63 of the block, not somewhere random.; * The worst case would be a run-length of 15, which means we need 16; * fake entries.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:21,Safety,safe,safety,21,/* extra entries for safety in decoder */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:21,Safety,safe,safety,21,/* extra entries for safety in decoder */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:21,Safety,safe,safety,21,/* extra entries for safety in decoder */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:21,Safety,safe,safety,21,/* extra entries for safety in decoder */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:21,Safety,safe,safety,21,/* extra entries for safety in decoder */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:21,Safety,safe,safety,21,/* extra entries for safety in decoder */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:21,Safety,safe,safety,21,/* extra entries for safety in decoder */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:11,Deployability,a/b,a/b,11,"/* Compute a/b rounded up to next integer, ie, ceil(a/b) */; /* Assumes a >= 0, b > 0 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:52,Deployability,a/b,a/b,52,"/* Compute a/b rounded up to next integer, ie, ceil(a/b) */; /* Assumes a >= 0, b > 0 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:56,Deployability,a/b,a/b,56,"/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */; /* Assumes a >= 0, b > 0 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:397,Integrability,rout,routines,397,"/* On normal machines we can apply MEMCOPY() and MEMZERO() to sample arrays; * and coefficient-block arrays. This won't work on 80x86 because the arrays; * are FAR and we're assuming a small-pointer memory model. However, some; * DOS compilers provide far-pointer versions of memcpy() and memset() even; * in the small-model libraries. These will be used if USE_FMEM is defined.; * Otherwise, the routines below do it the hard way. (The performance cost; * is not all that great, because these routines aren't very heavily used.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:494,Integrability,rout,routines,494,"/* On normal machines we can apply MEMCOPY() and MEMZERO() to sample arrays; * and coefficient-block arrays. This won't work on 80x86 because the arrays; * are FAR and we're assuming a small-pointer memory model. However, some; * DOS compilers provide far-pointer versions of memcpy() and memset() even; * in the small-model libraries. These will be used if USE_FMEM is defined.; * Otherwise, the routines below do it the hard way. (The performance cost; * is not all that great, because these routines aren't very heavily used.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:437,Performance,perform,performance,437,"/* On normal machines we can apply MEMCOPY() and MEMZERO() to sample arrays; * and coefficient-block arrays. This won't work on 80x86 because the arrays; * are FAR and we're assuming a small-pointer memory model. However, some; * DOS compilers provide far-pointer versions of memcpy() and memset() even; * in the small-model libraries. These will be used if USE_FMEM is defined.; * Otherwise, the routines below do it the hard way. (The performance cost; * is not all that great, because these routines aren't very heavily used.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jversion.h:64,Usability,Guid,Guido,64,"/*; * jversion.h; *; * Copyright (C) 1991-2010, Thomas G. Lane, Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains software version identification.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/jversion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jversion.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:268,Integrability,rout,routines,268,"/*; * transupp.c; *; * Copyright (C) 1997-2009, Thomas G. Lane, Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains image transformation routines and other utility code; * used by the jpegtran sample application. These are NOT part of the core; * JPEG library. But we keep these routines separate from jpegtran.c to; * ease the task of maintaining jpegtran-like programs that have other user; * interfaces.; */; /* Although this file really shouldn't have access to the library internals,; * it's helpful to let it call jround_up() and jcopy_block_row().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:410,Integrability,rout,routines,410,"/*; * transupp.c; *; * Copyright (C) 1997-2009, Thomas G. Lane, Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains image transformation routines and other utility code; * used by the jpegtran sample application. These are NOT part of the core; * JPEG library. But we keep these routines separate from jpegtran.c to; * ease the task of maintaining jpegtran-like programs that have other user; * interfaces.; */; /* Although this file really shouldn't have access to the library internals,; * it's helpful to let it call jround_up() and jcopy_block_row().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:526,Integrability,interface,interfaces,526,"/*; * transupp.c; *; * Copyright (C) 1997-2009, Thomas G. Lane, Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains image transformation routines and other utility code; * used by the jpegtran sample application. These are NOT part of the core; * JPEG library. But we keep these routines separate from jpegtran.c to; * ease the task of maintaining jpegtran-like programs that have other user; * interfaces.; */; /* Although this file really shouldn't have access to the library internals,; * it's helpful to let it call jround_up() and jcopy_block_row().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:587,Security,access,access,587,"/*; * transupp.c; *; * Copyright (C) 1997-2009, Thomas G. Lane, Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains image transformation routines and other utility code; * used by the jpegtran sample application. These are NOT part of the core; * JPEG library. But we keep these routines separate from jpegtran.c to; * ease the task of maintaining jpegtran-like programs that have other user; * interfaces.; */; /* Although this file really shouldn't have access to the library internals,; * it's helpful to let it call jround_up() and jcopy_block_row().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:64,Usability,Guid,Guido,64,"/*; * transupp.c; *; * Copyright (C) 1997-2009, Thomas G. Lane, Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains image transformation routines and other utility code; * used by the jpegtran sample application. These are NOT part of the core; * JPEG library. But we keep these routines separate from jpegtran.c to; * ease the task of maintaining jpegtran-like programs that have other user; * interfaces.; */; /* Although this file really shouldn't have access to the library internals,; * it's helpful to let it call jround_up() and jcopy_block_row().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:19,Integrability,interface,interface,19,/* My own external interface */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:1583,Energy Efficiency,allocate,allocated,1583,"as jpegtran normally does. The destination; * arrays are always written in normal scan order (top to bottom) because; * the virtual array manager expects this. The source arrays will be scanned; * in the corresponding order, which means multiple passes through the source; * arrays for most of the transforms. That could result in much thrashing; * if the image is larger than main memory.; *; * If cropping or trimming is involved, the destination arrays may be smaller; * than the source arrays. Note it is not possible to do horizontal flip; * in-place when a nonzero Y crop offset is specified, since we'd have to move; * data from one block row to another but the virtual array manager doesn't; * guarantee we can touch more than one row at a time. So in that case,; * we have to use a separate destination array.; *; * Some notes about the operating environment of the individual transform; * routines:; * 1. Both the source and destination virtual arrays are allocated from the; * source JPEG object, and therefore should be manipulated by calling the; * source's memory manager.; * 2. The destination's component count should be used. It may be smaller; * than the source's when forcing to grayscale.; * 3. Likewise the destination's sampling factors should be used. When; * forcing to grayscale the destination's sampling factors will be all 1,; * and we may as well take that as the effective iMCU size.; * 4. When ""trim"" is in effect, the destination's dimensions will be the; * trimmed values but the source's will be untrimmed.; * 5. When ""crop"" is in effect, the destination's dimensions will be the; * cropped values but the source's will be uncropped. Each transform; * routine is responsible for picking up source data starting at the; * correct X and Y offset for the crop region. (The X and Y offsets; * passed to the transform routines are measured in iMCU blocks of the; * destination.); * 6. All the routines assume that the source and destination buffers are; * padded out to a",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:36,Integrability,rout,routines,36,"/*; * Lossless image transformation routines. These routines work on DCT; * coefficient arrays and thus do not require any lossy decompression; * or recompression of the image.; * Thanks to Guido Vollbeding for the initial design and code of this feature,; * and to Ben Jackson for introducing the cropping feature.; *; * Horizontal flipping is done in-place, using a single top-to-bottom; * pass through the virtual source array. It will thus be much the; * fastest option for images larger than main memory.; *; * The other routines require a set of destination virtual arrays, so they; * need twice as much memory as jpegtran normally does. The destination; * arrays are always written in normal scan order (top to bottom) because; * the virtual array manager expects this. The source arrays will be scanned; * in the corresponding order, which means multiple passes through the source; * arrays for most of the transforms. That could result in much thrashing; * if the image is larger than main memory.; *; * If cropping or trimming is involved, the destination arrays may be smaller; * than the source arrays. Note it is not possible to do horizontal flip; * in-place when a nonzero Y crop offset is specified, since we'd have to move; * data from one block row to another but the virtual array manager doesn't; * guarantee we can touch more than one row at a time. So in that case,; * we have to use a separate destination array.; *; * Some notes about the operating environment of the individual transform; * routines:; * 1. Both the source and destination virtual arrays are allocated from the; * source JPEG object, and therefore should be manipulated by calling the; * source's memory manager.; * 2. The destination's component count should be used. It may be smaller; * than the source's when forcing to grayscale.; * 3. Likewise the destination's sampling factors should be used. When; * forcing to grayscale the destination's sampling factors will be all 1,; * and we may as well take tha",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:52,Integrability,rout,routines,52,"/*; * Lossless image transformation routines. These routines work on DCT; * coefficient arrays and thus do not require any lossy decompression; * or recompression of the image.; * Thanks to Guido Vollbeding for the initial design and code of this feature,; * and to Ben Jackson for introducing the cropping feature.; *; * Horizontal flipping is done in-place, using a single top-to-bottom; * pass through the virtual source array. It will thus be much the; * fastest option for images larger than main memory.; *; * The other routines require a set of destination virtual arrays, so they; * need twice as much memory as jpegtran normally does. The destination; * arrays are always written in normal scan order (top to bottom) because; * the virtual array manager expects this. The source arrays will be scanned; * in the corresponding order, which means multiple passes through the source; * arrays for most of the transforms. That could result in much thrashing; * if the image is larger than main memory.; *; * If cropping or trimming is involved, the destination arrays may be smaller; * than the source arrays. Note it is not possible to do horizontal flip; * in-place when a nonzero Y crop offset is specified, since we'd have to move; * data from one block row to another but the virtual array manager doesn't; * guarantee we can touch more than one row at a time. So in that case,; * we have to use a separate destination array.; *; * Some notes about the operating environment of the individual transform; * routines:; * 1. Both the source and destination virtual arrays are allocated from the; * source JPEG object, and therefore should be manipulated by calling the; * source's memory manager.; * 2. The destination's component count should be used. It may be smaller; * than the source's when forcing to grayscale.; * 3. Likewise the destination's sampling factors should be used. When; * forcing to grayscale the destination's sampling factors will be all 1,; * and we may as well take tha",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:526,Integrability,rout,routines,526,"/*; * Lossless image transformation routines. These routines work on DCT; * coefficient arrays and thus do not require any lossy decompression; * or recompression of the image.; * Thanks to Guido Vollbeding for the initial design and code of this feature,; * and to Ben Jackson for introducing the cropping feature.; *; * Horizontal flipping is done in-place, using a single top-to-bottom; * pass through the virtual source array. It will thus be much the; * fastest option for images larger than main memory.; *; * The other routines require a set of destination virtual arrays, so they; * need twice as much memory as jpegtran normally does. The destination; * arrays are always written in normal scan order (top to bottom) because; * the virtual array manager expects this. The source arrays will be scanned; * in the corresponding order, which means multiple passes through the source; * arrays for most of the transforms. That could result in much thrashing; * if the image is larger than main memory.; *; * If cropping or trimming is involved, the destination arrays may be smaller; * than the source arrays. Note it is not possible to do horizontal flip; * in-place when a nonzero Y crop offset is specified, since we'd have to move; * data from one block row to another but the virtual array manager doesn't; * guarantee we can touch more than one row at a time. So in that case,; * we have to use a separate destination array.; *; * Some notes about the operating environment of the individual transform; * routines:; * 1. Both the source and destination virtual arrays are allocated from the; * source JPEG object, and therefore should be manipulated by calling the; * source's memory manager.; * 2. The destination's component count should be used. It may be smaller; * than the source's when forcing to grayscale.; * 3. Likewise the destination's sampling factors should be used. When; * forcing to grayscale the destination's sampling factors will be all 1,; * and we may as well take tha",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:1516,Integrability,rout,routines,1516,"s larger than main memory.; *; * The other routines require a set of destination virtual arrays, so they; * need twice as much memory as jpegtran normally does. The destination; * arrays are always written in normal scan order (top to bottom) because; * the virtual array manager expects this. The source arrays will be scanned; * in the corresponding order, which means multiple passes through the source; * arrays for most of the transforms. That could result in much thrashing; * if the image is larger than main memory.; *; * If cropping or trimming is involved, the destination arrays may be smaller; * than the source arrays. Note it is not possible to do horizontal flip; * in-place when a nonzero Y crop offset is specified, since we'd have to move; * data from one block row to another but the virtual array manager doesn't; * guarantee we can touch more than one row at a time. So in that case,; * we have to use a separate destination array.; *; * Some notes about the operating environment of the individual transform; * routines:; * 1. Both the source and destination virtual arrays are allocated from the; * source JPEG object, and therefore should be manipulated by calling the; * source's memory manager.; * 2. The destination's component count should be used. It may be smaller; * than the source's when forcing to grayscale.; * 3. Likewise the destination's sampling factors should be used. When; * forcing to grayscale the destination's sampling factors will be all 1,; * and we may as well take that as the effective iMCU size.; * 4. When ""trim"" is in effect, the destination's dimensions will be the; * trimmed values but the source's will be untrimmed.; * 5. When ""crop"" is in effect, the destination's dimensions will be the; * cropped values but the source's will be uncropped. Each transform; * routine is responsible for picking up source data starting at the; * correct X and Y offset for the crop region. (The X and Y offsets; * passed to the transform routines are measur",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:2303,Integrability,rout,routine,2303,"* the virtual array manager expects this. The source arrays will be scanned; * in the corresponding order, which means multiple passes through the source; * arrays for most of the transforms. That could result in much thrashing; * if the image is larger than main memory.; *; * If cropping or trimming is involved, the destination arrays may be smaller; * than the source arrays. Note it is not possible to do horizontal flip; * in-place when a nonzero Y crop offset is specified, since we'd have to move; * data from one block row to another but the virtual array manager doesn't; * guarantee we can touch more than one row at a time. So in that case,; * we have to use a separate destination array.; *; * Some notes about the operating environment of the individual transform; * routines:; * 1. Both the source and destination virtual arrays are allocated from the; * source JPEG object, and therefore should be manipulated by calling the; * source's memory manager.; * 2. The destination's component count should be used. It may be smaller; * than the source's when forcing to grayscale.; * 3. Likewise the destination's sampling factors should be used. When; * forcing to grayscale the destination's sampling factors will be all 1,; * and we may as well take that as the effective iMCU size.; * 4. When ""trim"" is in effect, the destination's dimensions will be the; * trimmed values but the source's will be untrimmed.; * 5. When ""crop"" is in effect, the destination's dimensions will be the; * cropped values but the source's will be uncropped. Each transform; * routine is responsible for picking up source data starting at the; * correct X and Y offset for the crop region. (The X and Y offsets; * passed to the transform routines are measured in iMCU blocks of the; * destination.); * 6. All the routines assume that the source and destination buffers are; * padded out to a full iMCU boundary. This is true, although for the; * source buffer it is an undocumented property of jdcoefct.c.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:2464,Integrability,rout,routines,2464,"* the virtual array manager expects this. The source arrays will be scanned; * in the corresponding order, which means multiple passes through the source; * arrays for most of the transforms. That could result in much thrashing; * if the image is larger than main memory.; *; * If cropping or trimming is involved, the destination arrays may be smaller; * than the source arrays. Note it is not possible to do horizontal flip; * in-place when a nonzero Y crop offset is specified, since we'd have to move; * data from one block row to another but the virtual array manager doesn't; * guarantee we can touch more than one row at a time. So in that case,; * we have to use a separate destination array.; *; * Some notes about the operating environment of the individual transform; * routines:; * 1. Both the source and destination virtual arrays are allocated from the; * source JPEG object, and therefore should be manipulated by calling the; * source's memory manager.; * 2. The destination's component count should be used. It may be smaller; * than the source's when forcing to grayscale.; * 3. Likewise the destination's sampling factors should be used. When; * forcing to grayscale the destination's sampling factors will be all 1,; * and we may as well take that as the effective iMCU size.; * 4. When ""trim"" is in effect, the destination's dimensions will be the; * trimmed values but the source's will be untrimmed.; * 5. When ""crop"" is in effect, the destination's dimensions will be the; * cropped values but the source's will be uncropped. Each transform; * routine is responsible for picking up source data starting at the; * correct X and Y offset for the crop region. (The X and Y offsets; * passed to the transform routines are measured in iMCU blocks of the; * destination.); * 6. All the routines assume that the source and destination buffers are; * padded out to a full iMCU boundary. This is true, although for the; * source buffer it is an undocumented property of jdcoefct.c.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:2539,Integrability,rout,routines,2539,"* the virtual array manager expects this. The source arrays will be scanned; * in the corresponding order, which means multiple passes through the source; * arrays for most of the transforms. That could result in much thrashing; * if the image is larger than main memory.; *; * If cropping or trimming is involved, the destination arrays may be smaller; * than the source arrays. Note it is not possible to do horizontal flip; * in-place when a nonzero Y crop offset is specified, since we'd have to move; * data from one block row to another but the virtual array manager doesn't; * guarantee we can touch more than one row at a time. So in that case,; * we have to use a separate destination array.; *; * Some notes about the operating environment of the individual transform; * routines:; * 1. Both the source and destination virtual arrays are allocated from the; * source JPEG object, and therefore should be manipulated by calling the; * source's memory manager.; * 2. The destination's component count should be used. It may be smaller; * than the source's when forcing to grayscale.; * 3. Likewise the destination's sampling factors should be used. When; * forcing to grayscale the destination's sampling factors will be all 1,; * and we may as well take that as the effective iMCU size.; * 4. When ""trim"" is in effect, the destination's dimensions will be the; * trimmed values but the source's will be untrimmed.; * 5. When ""crop"" is in effect, the destination's dimensions will be the; * cropped values but the source's will be uncropped. Each transform; * routine is responsible for picking up source data starting at the; * correct X and Y offset for the crop region. (The X and Y offsets; * passed to the transform routines are measured in iMCU blocks of the; * destination.); * 6. All the routines assume that the source and destination buffers are; * padded out to a full iMCU boundary. This is true, although for the; * source buffer it is an undocumented property of jdcoefct.c.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:190,Usability,Guid,Guido,190,"/*; * Lossless image transformation routines. These routines work on DCT; * coefficient arrays and thus do not require any lossy decompression; * or recompression of the image.; * Thanks to Guido Vollbeding for the initial design and code of this feature,; * and to Ben Jackson for introducing the cropping feature.; *; * Horizontal flipping is done in-place, using a single top-to-bottom; * pass through the virtual source array. It will thus be much the; * fastest option for images larger than main memory.; *; * The other routines require a set of destination virtual arrays, so they; * need twice as much memory as jpegtran normally does. The destination; * arrays are always written in normal scan order (top to bottom) because; * the virtual array manager expects this. The source arrays will be scanned; * in the corresponding order, which means multiple passes through the source; * arrays for most of the transforms. That could result in much thrashing; * if the image is larger than main memory.; *; * If cropping or trimming is involved, the destination arrays may be smaller; * than the source arrays. Note it is not possible to do horizontal flip; * in-place when a nonzero Y crop offset is specified, since we'd have to move; * data from one block row to another but the virtual array manager doesn't; * guarantee we can touch more than one row at a time. So in that case,; * we have to use a separate destination array.; *; * Some notes about the operating environment of the individual transform; * routines:; * 1. Both the source and destination virtual arrays are allocated from the; * source JPEG object, and therefore should be manipulated by calling the; * source's memory manager.; * 2. The destination's component count should be used. It may be smaller; * than the source's when forcing to grayscale.; * 3. Likewise the destination's sampling factors should be used. When; * forcing to grayscale the destination's sampling factors will be all 1,; * and we may as well take tha",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:2695,Usability,undo,undocumented,2695,"* the virtual array manager expects this. The source arrays will be scanned; * in the corresponding order, which means multiple passes through the source; * arrays for most of the transforms. That could result in much thrashing; * if the image is larger than main memory.; *; * If cropping or trimming is involved, the destination arrays may be smaller; * than the source arrays. Note it is not possible to do horizontal flip; * in-place when a nonzero Y crop offset is specified, since we'd have to move; * data from one block row to another but the virtual array manager doesn't; * guarantee we can touch more than one row at a time. So in that case,; * we have to use a separate destination array.; *; * Some notes about the operating environment of the individual transform; * routines:; * 1. Both the source and destination virtual arrays are allocated from the; * source JPEG object, and therefore should be manipulated by calling the; * source's memory manager.; * 2. The destination's component count should be used. It may be smaller; * than the source's when forcing to grayscale.; * 3. Likewise the destination's sampling factors should be used. When; * forcing to grayscale the destination's sampling factors will be all 1,; * and we may as well take that as the effective iMCU size.; * 4. When ""trim"" is in effect, the destination's dimensions will be the; * trimmed values but the source's will be untrimmed.; * 5. When ""crop"" is in effect, the destination's dimensions will be the; * cropped values but the source's will be uncropped. Each transform; * routine is responsible for picking up source data starting at the; * correct X and Y offset for the crop region. (The X and Y offsets; * passed to the transform routines are measured in iMCU blocks of the; * destination.); * 6. All the routines assume that the source and destination buffers are; * padded out to a full iMCU boundary. This is true, although for the; * source buffer it is an undocumented property of jdcoefct.c.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:6,Usability,simpl,simply,6,/* We simply have to copy the right amount of data (the destination's; * image size) starting at the given X and Y offsets in the source.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:118,Performance,perform,perform,118,"/* Horizontal mirroring of DCT blocks is accomplished by swapping; * pairs of blocks in-place. Within a DCT block, we perform horizontal; * mirroring by changing the signs of odd-numbered columns.; * Partial iMCUs at the right edge are left untouched.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:119,Integrability,rout,routine,119,"/* Now left-justify the portion of the data to be kept.; 	 * We can't use a single jcopy_block_row() call because that routine; 	 * depends on memcpy(), whose behavior is unspecified for overlapping; 	 * source and destination areas. Sigh.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:132,Integrability,depend,depends,132,"/* Now left-justify the portion of the data to be kept.; 	 * We can't use a single jcopy_block_row() call because that routine; 	 * depends on memcpy(), whose behavior is unspecified for overlapping; 	 * source and destination areas. Sigh.; 	 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:178,Integrability,rout,routine,178,"/* Here we must output into a separate array because we can't touch; * different rows of a single virtual array simultaneously. Otherwise,; * this is essentially the same as the routine above.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:177,Availability,avail,available,177,/* Transposing pixels within a block just requires transposing the; * DCT coefficients.; * Partial iMCUs at the edges require no special treatment; we simply; * process all the available DCT blocks for every component.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:151,Usability,simpl,simply,151,/* Transposing pixels within a block just requires transposing the; * DCT coefficients.; * Partial iMCUs at the edges require no special treatment; we simply; * process all the available DCT blocks for every component.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:151,Integrability,rout,routine,151,/* 90 degree rotation is equivalent to; * 1. Transposing the image;; * 2. Horizontal mirroring.; * These two steps are merged into a single processing routine.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:152,Integrability,rout,routine,152,/* 270 degree rotation is equivalent to; * 1. Horizontal mirroring;; * 2. Transposing the image.; * These two steps are merged into a single processing routine.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:149,Integrability,rout,routine,149,/* 180 degree rotation is equivalent to; * 1. Vertical mirroring;; * 2. Horizontal mirroring.; * These two steps are merged into a single processing routine.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:223,Integrability,rout,routine,223,/* Transverse transpose is equivalent to; * 1. 180 degree rotation;; * 2. Transposition;; * or; * 1. Horizontal mirroring;; * 2. Transposition;; * 3. Horizontal mirroring.; * These steps are merged into a single processing routine.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:70,Integrability,rout,routine,70,"/* Parse a crop specification (written in X11 geometry style).; * The routine returns TRUE if the spec string is valid, FALSE if not.; *; * The crop spec string should have the format; *	<width>x<height>{+-}<xoffset>{+-}<yoffset>; * where width, height, xoffset, and yoffset are unsigned integers.; * Each of the elements can be omitted to indicate a default value.; * (A weakness of this style is that it is not possible to omit xoffset; * while specifying yoffset, since they look alike.); *; * This code is loosely based on XParseGeometry from the X11 distribution.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:203,Energy Efficiency,allocate,allocate,203,"/* Request any required workspace.; *; * This routine figures out the size that the output image will be; * (which implies that all the transform parameters must be set before; * it is called).; *; * We allocate the workspace virtual arrays from the source decompression; * object, so that all the arrays (both the original data and the workspace); * will be taken into account while making memory management decisions.; * Hence, this routine must be called after jpeg_read_header (which reads; * the image dimensions) and before jpeg_read_coefficients (which realizes; * the source's virtual arrays).; *; * This function returns FALSE right away if -perfect is given; * and transformation is not perfect. Otherwise returns TRUE.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:46,Integrability,rout,routine,46,"/* Request any required workspace.; *; * This routine figures out the size that the output image will be; * (which implies that all the transform parameters must be set before; * it is called).; *; * We allocate the workspace virtual arrays from the source decompression; * object, so that all the arrays (both the original data and the workspace); * will be taken into account while making memory management decisions.; * Hence, this routine must be called after jpeg_read_header (which reads; * the image dimensions) and before jpeg_read_coefficients (which realizes; * the source's virtual arrays).; *; * This function returns FALSE right away if -perfect is given; * and transformation is not perfect. Otherwise returns TRUE.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:435,Integrability,rout,routine,435,"/* Request any required workspace.; *; * This routine figures out the size that the output image will be; * (which implies that all the transform parameters must be set before; * it is called).; *; * We allocate the workspace virtual arrays from the source decompression; * object, so that all the arrays (both the original data and the workspace); * will be taken into account while making memory management decisions.; * Hence, this routine must be called after jpeg_read_header (which reads; * the image dimensions) and before jpeg_read_coefficients (which realizes; * the source's virtual arrays).; *; * This function returns FALSE right away if -perfect is given; * and transformation is not perfect. Otherwise returns TRUE.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:3,Energy Efficiency,Allocate,Allocate,3,"/* Allocate workspace if needed.; * Note that we allocate arrays padded out to the next iMCU boundary,; * so that transform routines need not worry about missing edge blocks.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:49,Energy Efficiency,allocate,allocate,49,"/* Allocate workspace if needed.; * Note that we allocate arrays padded out to the next iMCU boundary,; * so that transform routines need not worry about missing edge blocks.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:124,Integrability,rout,routines,124,"/* Allocate workspace if needed.; * Note that we allocate arrays padded out to the next iMCU boundary,; * so that transform routines need not worry about missing edge blocks.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:248,Energy Efficiency,allocate,allocated,248,"/* Adjust output image parameters as needed.; *; * This must be called after jpeg_copy_critical_parameters(); * and before jpeg_write_coefficients().; *; * The return value is the set of virtual coefficient arrays to be written; * (either the ones allocated by jtransform_request_workspace, or the; * original source data arrays). The caller will need to pass this value; * to jpeg_write_coefficients().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:259,Safety,avoid,avoid,259,"/* First, ensure we have YCbCr or grayscale data, and that the source's; * Y channel is full resolution. (No reasonable person would make Y; * be less than full resolution, so actually coping with that case; * isn't worth extra code space. But we check it to avoid crashing.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:116,Integrability,depend,depends,116,"/* Execute the actual transformation, if any.; *; * This must be called *after* jpeg_write_coefficients, because it depends; * on jpeg_write_coefficients to have computed subsidiary values such as; * the per-component width and height fields in the destination object.; *; * Note that some transformations will modify the source data arrays!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:20,Testability,test,tested,20,/* Note: conditions tested here should match those in switch statement; * in jtransform_request_workspace(); */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:186,Integrability,rout,routines,186,"/* Copy markers saved in the given source object to the destination object.; * This should be called just after jpeg_start_compress() or; * jpeg_write_coefficients().; * Note that those routines will have written the SOI, and also the; * JFIF APP0 or Adobe APP14 markers if selected.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:143,Safety,avoid,avoid,143,"/* In the current implementation, we don't actually need to examine the; * option flag here; we just copy everything that got saved.; * But to avoid confusion, we do not output JFIF and Adobe APP14 markers; * if the encoder library already wrote one.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h:285,Integrability,rout,routines,285,"/*; * transupp.h; *; * Copyright (C) 1997-2009, Thomas G. Lane, Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains declarations for image transformation routines and; * other utility code used by the jpegtran sample application. These are; * NOT part of the core JPEG library. But we keep these routines separate; * from jpegtran.c to ease the task of maintaining jpegtran-like programs; * that have other user interfaces.; *; * NOTE: all the routines declared here have very specific requirements; * about when they are to be executed during the reading and writing of the; * source and destination files. See the comments in transupp.c, or see; * jpegtran.c for an example of correct usage.; */; /* If you happen not to want the image transform support, disable it here */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h:427,Integrability,rout,routines,427,"/*; * transupp.h; *; * Copyright (C) 1997-2009, Thomas G. Lane, Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains declarations for image transformation routines and; * other utility code used by the jpegtran sample application. These are; * NOT part of the core JPEG library. But we keep these routines separate; * from jpegtran.c to ease the task of maintaining jpegtran-like programs; * that have other user interfaces.; *; * NOTE: all the routines declared here have very specific requirements; * about when they are to be executed during the reading and writing of the; * source and destination files. See the comments in transupp.c, or see; * jpegtran.c for an example of correct usage.; */; /* If you happen not to want the image transform support, disable it here */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h:543,Integrability,interface,interfaces,543,"/*; * transupp.h; *; * Copyright (C) 1997-2009, Thomas G. Lane, Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains declarations for image transformation routines and; * other utility code used by the jpegtran sample application. These are; * NOT part of the core JPEG library. But we keep these routines separate; * from jpegtran.c to ease the task of maintaining jpegtran-like programs; * that have other user interfaces.; *; * NOTE: all the routines declared here have very specific requirements; * about when they are to be executed during the reading and writing of the; * source and destination files. See the comments in transupp.c, or see; * jpegtran.c for an example of correct usage.; */; /* If you happen not to want the image transform support, disable it here */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h:575,Integrability,rout,routines,575,"/*; * transupp.h; *; * Copyright (C) 1997-2009, Thomas G. Lane, Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains declarations for image transformation routines and; * other utility code used by the jpegtran sample application. These are; * NOT part of the core JPEG library. But we keep these routines separate; * from jpegtran.c to ease the task of maintaining jpegtran-like programs; * that have other user interfaces.; *; * NOTE: all the routines declared here have very specific requirements; * about when they are to be executed during the reading and writing of the; * source and destination files. See the comments in transupp.c, or see; * jpegtran.c for an example of correct usage.; */; /* If you happen not to want the image transform support, disable it here */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h:64,Usability,Guid,Guido,64,"/*; * transupp.h; *; * Copyright (C) 1997-2009, Thomas G. Lane, Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains declarations for image transformation routines and; * other utility code used by the jpegtran sample application. These are; * NOT part of the core JPEG library. But we keep these routines separate; * from jpegtran.c to ease the task of maintaining jpegtran-like programs; * that have other user interfaces.; *; * NOTE: all the routines declared here have very specific requirements; * about when they are to be executed during the reading and writing of the; * source and destination files. See the comments in transupp.c, or see; * jpegtran.c for an example of correct usage.; */; /* If you happen not to want the image transform support, disable it here */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h:3101,Integrability,rout,routines,3101,"formable partial iMCUs to be dropped;; * this is not strictly lossless, but it usually gives the best-looking; * result for odd-size images. Note that when this option is active,; * the expected mathematical equivalences between the transforms may not hold.; * (For example, -rot 270 -trim trims only the bottom edge, but -rot 90 -trim; * followed by -rot 180 -trim trims both edges.); *; * We also offer a lossless-crop option, which discards data outside a given; * image region but losslessly preserves what is inside. Like the rotate and; * flip transforms, lossless crop is restricted by the JPEG format: the upper; * left corner of the selected region must fall on an iMCU boundary. If this; * does not hold for the given crop parameters, we silently move the upper left; * corner up and/or left to make it so, simultaneously increasing the region; * dimensions to keep the lower right crop corner unchanged. (Thus, the; * output image covers at least the requested region, but may cover more.); *; * We also provide a lossless-resize option, which is kind of a lossless-crop; * operation in the DCT coefficient block domain - it discards higher-order; * coefficients and losslessly preserves lower-order coefficients of a; * sub-block.; *; * Rotate/flip transform, resize, and crop can be requested together in a; * single invocation. The crop is applied last --- that is, the crop region; * is specified in terms of the destination image after transform/resize.; *; * We also offer a ""force to grayscale"" option, which simply discards the; * chrominance channels of a YCbCr image. This is lossless in the sense that; * the luminance channel is preserved exactly. It's not the same kind of; * thing as the rotate/flip transformations, but it's convenient to handle it; * as part of this package, mainly because the transformation routines have to; * be aware of the option to know how many components to work on.; */; /* Short forms of external names for systems with brain-damaged linkers. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h:2791,Usability,simpl,simply,2791,"formable partial iMCUs to be dropped;; * this is not strictly lossless, but it usually gives the best-looking; * result for odd-size images. Note that when this option is active,; * the expected mathematical equivalences between the transforms may not hold.; * (For example, -rot 270 -trim trims only the bottom edge, but -rot 90 -trim; * followed by -rot 180 -trim trims both edges.); *; * We also offer a lossless-crop option, which discards data outside a given; * image region but losslessly preserves what is inside. Like the rotate and; * flip transforms, lossless crop is restricted by the JPEG format: the upper; * left corner of the selected region must fall on an iMCU boundary. If this; * does not hold for the given crop parameters, we silently move the upper left; * corner up and/or left to make it so, simultaneously increasing the region; * dimensions to keep the lower right crop corner unchanged. (Thus, the; * output image covers at least the requested region, but may cover more.); *; * We also provide a lossless-resize option, which is kind of a lossless-crop; * operation in the DCT coefficient block domain - it discards higher-order; * coefficients and losslessly preserves lower-order coefficients of a; * sub-block.; *; * Rotate/flip transform, resize, and crop can be requested together in a; * single invocation. The crop is applied last --- that is, the crop region; * is specified in terms of the destination image after transform/resize.; *; * We also offer a ""force to grayscale"" option, which simply discards the; * chrominance channels of a YCbCr image. This is lossless in the sense that; * the luminance channel is preserved exactly. It's not the same kind of; * thing as the rotate/flip transformations, but it's convenient to handle it; * as part of this package, mainly because the transformation routines have to; * be aware of the option to know how many components to work on.; */; /* Short forms of external names for systems with brain-damaged linkers. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h:125,Integrability,rout,routine,125,"/* jtransform_execute_transform used to be called; * jtransform_execute_transformation, but some compilers complain about; * routine names that long. This macro is here to avoid breaking any; * old source code that uses the original name...; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h:172,Safety,avoid,avoid,172,"/* jtransform_execute_transform used to be called; * jtransform_execute_transformation, but some compilers complain about; * routine names that long. This macro is here to avoid breaking any; * old source code that uses the original name...; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libjpeg/transupp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:286,Deployability,release,released,286,"/* png.c - location for general purpose libpng functions; *; * Copyright (c) 2018-2023 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:23,Availability,error,error,23,/* Generate a compiler error if there is an old png.h in the search path. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:142,Deployability,release,release,142,"/* The version tests may need to be added to, but the problem warning has; * consistently been fixed in GCC versions which obtain wide-spread release.; * The problem is that many versions of GCC rearrange comparison expressions in; * the optimizer in such a way that the results of the comparison will change; * if signed integer overflow occurs. Such comparisons are not permitted in; * ANSI C90, however GCC isn't clever enough to work out that that do not occur; * below in png_ascii_from_fp and png_muldiv, so it produces a warning with; * -Wextra. Unfortunately this is highly dependent on the optimizer and the; * machine architecture so the warning comes and goes unpredictably and is; * impossible to ""fix"", even were that a good idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:582,Integrability,depend,dependent,582,"/* The version tests may need to be added to, but the problem warning has; * consistently been fixed in GCC versions which obtain wide-spread release.; * The problem is that many versions of GCC rearrange comparison expressions in; * the optimizer in such a way that the results of the comparison will change; * if signed integer overflow occurs. Such comparisons are not permitted in; * ANSI C90, however GCC isn't clever enough to work out that that do not occur; * below in png_ascii_from_fp and png_muldiv, so it produces a warning with; * -Wextra. Unfortunately this is highly dependent on the optimizer and the; * machine architecture so the warning comes and goes unpredictably and is; * impossible to ""fix"", even were that a good idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:238,Performance,optimiz,optimizer,238,"/* The version tests may need to be added to, but the problem warning has; * consistently been fixed in GCC versions which obtain wide-spread release.; * The problem is that many versions of GCC rearrange comparison expressions in; * the optimizer in such a way that the results of the comparison will change; * if signed integer overflow occurs. Such comparisons are not permitted in; * ANSI C90, however GCC isn't clever enough to work out that that do not occur; * below in png_ascii_from_fp and png_muldiv, so it produces a warning with; * -Wextra. Unfortunately this is highly dependent on the optimizer and the; * machine architecture so the warning comes and goes unpredictably and is; * impossible to ""fix"", even were that a good idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:599,Performance,optimiz,optimizer,599,"/* The version tests may need to be added to, but the problem warning has; * consistently been fixed in GCC versions which obtain wide-spread release.; * The problem is that many versions of GCC rearrange comparison expressions in; * the optimizer in such a way that the results of the comparison will change; * if signed integer overflow occurs. Such comparisons are not permitted in; * ANSI C90, however GCC isn't clever enough to work out that that do not occur; * below in png_ascii_from_fp and png_muldiv, so it produces a warning with; * -Wextra. Unfortunately this is highly dependent on the optimizer and the; * machine architecture so the warning comes and goes unpredictably and is; * impossible to ""fix"", even were that a good idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:15,Testability,test,tests,15,"/* The version tests may need to be added to, but the problem warning has; * consistently been fixed in GCC versions which obtain wide-spread release.; * The problem is that many versions of GCC rearrange comparison expressions in; * the optimizer in such a way that the results of the comparison will change; * if signed integer overflow occurs. Such comparisons are not permitted in; * ANSI C90, however GCC isn't clever enough to work out that that do not occur; * below in png_ascii_from_fp and png_muldiv, so it produces a warning with; * -Wextra. Unfortunately this is highly dependent on the optimizer and the; * machine architecture so the warning comes and goes unpredictably and is; * impossible to ""fix"", even were that a good idea.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:223,Usability,simpl,simply,223,"/* Checks whether the supplied bytes match the PNG signature. We allow; * checking less than the full 8-byte signature so that those apps that; * already read the first few bytes of a file to determine the file type; * can simply check the remaining bytes for extra assurance. Returns; * an integer less than, equal to, or greater than zero if sig is found,; * respectively, to be less than, to match, or be greater than the correct; * PNG signature (this is the same behavior as strcmp, memcmp, etc).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:15,Energy Efficiency,allocate,allocate,15,/* Function to allocate memory for zlib */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:17,Modifiability,variab,variable,17,/* Reset the CRC variable to 32 bits of 1's. Care must be taken; * in case CRC is > 32 bits to leave the top bits 0.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:15,Safety,safe,safe,15,/* The cast is safe because the crc is a 32-bit value. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:86,Integrability,rout,routine,86,/* Calculate the CRC over a section of data. We can only pass as; * much data to this routine as the largest single buffer size. We; * also check that this data will actually be used before going to the; * trouble of calculating it.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:234,Performance,perform,perform,234,"/* 'uLong' is defined in zlib.h as unsigned long; this means that on some; * systems it is a 64-bit value. crc32, however, returns 32 bits so the; * following cast is safe. 'uInt' may be no more than 16 bits, so it is; * necessary to perform a loop here.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:167,Safety,safe,safe,167,"/* 'uLong' is defined in zlib.h as unsigned long; this means that on some; * systems it is a 64-bit value. crc32, however, returns 32 bits so the; * following cast is safe. 'uInt' may be no more than 16 bits, so it is; * necessary to perform a loop here.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:13,Safety,safe,safe,13,"/* evil, but safe */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:31,Safety,safe,safe,31,/* And the following is always safe because the crc is only 32 bits. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:24,Energy Efficiency,allocate,allocated,24,/* This temporary stack-allocated structure is used to provide a place to; * build enough context to allow the user provided memory allocator (if any); * to be called.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:108,Availability,error,error,108,"/* The following two API calls simply set fields in png_struct, so it is safe; * to do them now even though error handling is not yet set up.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:73,Safety,safe,safe,73,"/* The following two API calls simply set fields in png_struct, so it is safe; * to do them now even though error handling is not yet set up.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:31,Usability,simpl,simply,31,"/* The following two API calls simply set fields in png_struct, so it is safe; * to do them now even though error handling is not yet set up.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:173,Safety,safe,safe,173,"/* Temporarily fake out the longjmp information until we have; * successfully completed this function. This only works if we have; * setjmp() support compiled in, but it is safe - this stuff should; * never happen.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:23,Availability,error,error,23,/* Eliminate the local error handling: */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:82,Availability,failure,failure,82,/* A longjmp because of a bug in the application storage allocator or a; * simple failure to allocate the png_struct.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:93,Energy Efficiency,allocate,allocate,93,/* A longjmp because of a bug in the application storage allocator or a; * simple failure to allocate the png_struct.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:75,Usability,simpl,simple,75,/* A longjmp because of a bug in the application storage allocator or a; * simple failure to allocate the png_struct.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate the memory for an info_struct for the application. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:63,Availability,error,error,63,"/* Use the internal API that does not (or at least should not) error out, so; * that this call always returns ok. The application typically sets up the; * error handling *after* creating the info_struct because this is the way it; * has always been done in 'example.c'.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:155,Availability,error,error,155,"/* Use the internal API that does not (or at least should not) error out, so; * that this call always returns ok. The application typically sets up the; * error handling *after* creating the info_struct because this is the way it; * has always been done in 'example.c'.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:323,Deployability,release,release,323,"/* This function frees the memory associated with a single info struct.; * Normally, one would use either png_destroy_read_struct() or; * png_destroy_write_struct() to free an info struct, but this may be; * useful for some applications. From libpng 1.6.0 this function is also used; * internally to implement the png_info release part of the 'struct' destroy; * APIs. This ensures that all possible approaches free the same data (all of; * it).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:31,Availability,error,error,31,"/* Do this first in case of an error below; if the app implements its own; * memory management this can lead to png_free calling png_error, which; * will abort this routine and return control to the app error handler.; * An infinite loop may result if it then tries to free the same info; * ptr.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:203,Availability,error,error,203,"/* Do this first in case of an error below; if the app implements its own; * memory management this can lead to png_free calling png_error, which; * will abort this routine and return control to the app error handler.; * An infinite loop may result if it then tries to free the same info; * ptr.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:165,Integrability,rout,routine,165,"/* Do this first in case of an error below; if the app implements its own; * memory management this can lead to png_free calling png_error, which; * will abort this routine and return control to the app error handler.; * An infinite loop may result if it then tries to free the same info; * ptr.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:154,Safety,abort,abort,154,"/* Do this first in case of an error below; if the app implements its own; * memory management this can lead to png_free calling png_error, which; * will abort this routine and return control to the app error handler.; * An infinite loop may result if it then tries to free the same info; * ptr.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:368,Availability,error,error,368,"/* Initialize the info structure. This is now an internal function (0.89); * and applications using it are urged to use png_create_info_struct(); * instead. Use deprecated in 1.6.0, internal use removed (used internally it; * is just a memset).; *; * NOTE: it is almost inconceivable that this API is used because it bypasses; * the user-memory mechanism and the user error handling/warning mechanisms in; * those cases where it does anything other than a memset.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:43,Energy Efficiency,allocate,allocated,43,/* Free any PLTE entry that was internally allocated */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:356,Availability,avail,available,356,"/* Initialize the default input/output functions for the PNG file. If you; * use your own read or write routines, you can call either png_set_read_fn(); * or png_set_write_fn() instead of png_init_io(). If you have defined; * PNG_NO_STDIO or otherwise disabled PNG_STDIO_SUPPORTED, you must use a; * function of your own because ""FILE *"" isn't necessarily available.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:104,Integrability,rout,routines,104,"/* Initialize the default input/output functions for the PNG file. If you; * use your own read or write routines, you can call either png_set_read_fn(); * or png_set_write_fn() instead of png_init_io(). If you have defined; * PNG_NO_STDIO or otherwise disabled PNG_STDIO_SUPPORTED, you must use a; * function of your own because ""FILE *"" isn't necessarily available.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:8,Availability,reliab,reliably,8,/* This reliably terminates the buffer */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:12,Availability,failure,failure,12,/* The only failure above if png_ptr != NULL is from an invalid ptime */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:14,Integrability,rout,routine,14,/* NOTE: this routine is not used internally! */; /* Build a grayscale palette. Palette is assumed to be 1 << bit_depth; * large of png_color. This lets grayscale images be treated as; * paletted. Most useful for gamma correction and simplification; * of code. This API is not used internally.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:234,Usability,simpl,simplification,234,/* NOTE: this routine is not used internally! */; /* Build a grayscale palette. Palette is assumed to be 1 << bit_depth; * large of png_color. This lets grayscale images be treated as; * paletted. Most useful for gamma correction and simplification; * of code. This API is not used internally.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:198,Integrability,rout,routine,198,"/* beyond end */; /* The code is the fifth byte after each four byte string. Historically this; * code was always searched from the end of the list, this is no longer; * necessary because the 'set' routine handles duplicate entries correctly.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:39,Availability,error,error,39,"/* Translate 'ret' into an appropriate error string, priority is given to the; * one in zstream if set. This always returns a string, even in cases like; * Z_OK or Z_STREAM_END where the error code is a success code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:187,Availability,error,error,187,"/* Translate 'ret' into an appropriate error string, priority is given to the; * one in zstream if set. This always returns a string, even in cases like; * Z_OK or Z_STREAM_END where the error code is a success code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:19,Availability,error,error,19,/* internal libpng error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:11,Availability,error,errors,11,"/* Compile errors here mean that zlib now uses the value co-opted in; * pngpriv.h for PNG_UNEXPECTED_ZLIB_RETURN; update the switch above; * and change pngpriv.h. Note that this message is ""... return"",; * whereas the default/Z_OK one is ""... return code"".; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:114,Deployability,update,update,114,"/* Compile errors here mean that zlib now uses the value co-opted in; * pngpriv.h for PNG_UNEXPECTED_ZLIB_RETURN; update the switch above; * and change pngpriv.h. Note that this message is ""... return"",; * whereas the default/Z_OK one is ""... return code"".; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:178,Integrability,message,message,178,"/* Compile errors here mean that zlib now uses the value co-opted in; * pngpriv.h for PNG_UNEXPECTED_ZLIB_RETURN; update the switch above; * and change pngpriv.h. Note that this message is ""... return"",; * whereas the default/Z_OK one is ""... return code"".; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:77,Integrability,rout,routine,77,/* This is called to check a new gamma value against an existing one. The; * routine returns false if the new gamma value should not be written.; *; * 'from' says where the new gamma value comes from:; *; * 0: the new gamma value is the libpng estimate for an ICC profile; * 1: the new gamma value comes from a gAMA chunk; * 2: the new gamma value comes from an sRGB chunk; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:277,Availability,error,error,277,"/* Either this is an sRGB image, in which case the calculated gamma; * approximation should match, or this is an image with a profile and the; * value libpng calculates for the gamma of the profile does not match the; * value recorded in the file. The former, sRGB, case is an error, the; * latter is just a warning.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:290,Safety,safe,safety,290,"/* Changed in libpng-1.5.4 to limit the values to ensure overflow can't; * occur. Since the fixed point representation is asymmetrical it is; * possible for 1/gamma to overflow the limit of 21474 and this means the; * gamma value must be at least 5/100000 and hence at most 20000.0. For; * safety the limits here are a little narrower. The values are 0.00016 to; * 6250.0, which are truly ridiculous gamma values (and will produce; * displays that are all black or all white.); *; * In 1.6.0 this test replaces the ones in pngrutil.c, in the gAMA chunk; * handling code, which only required the value to be >0.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:497,Testability,test,test,497,"/* Changed in libpng-1.5.4 to limit the values to ensure overflow can't; * occur. Since the fixed point representation is asymmetrical it is; * possible for 1/gamma to overflow the limit of 21474 and this means the; * gamma value must be at least 5/100000 and hence at most 20000.0. For; * safety the limits here are a little narrower. The values are 0.00016 to; * 6250.0, which are truly ridiculous gamma values (and will produce; * displays that are all black or all white.); *; * In 1.6.0 this test replaces the ones in pngrutil.c, in the gAMA chunk; * handling code, which only required the value to be >0.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:233,Availability,error,error,233,/* At present if the check_gamma test fails the gamma of the colorspace is; * not updated however the colorspace is not invalidated. This; * corresponds to the case where the existing gamma comes from an sRGB; * chunk or profile. An error message has already been output.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:82,Deployability,update,updated,82,/* At present if the check_gamma test fails the gamma of the colorspace is; * not updated however the colorspace is not invalidated. This; * corresponds to the case where the existing gamma comes from an sRGB; * chunk or profile. An error message has already been output.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:239,Integrability,message,message,239,/* At present if the check_gamma test fails the gamma of the colorspace is; * not updated however the colorspace is not invalidated. This; * corresponds to the case where the existing gamma comes from an sRGB; * chunk or profile. An error message has already been output.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:33,Testability,test,test,33,/* At present if the check_gamma test fails the gamma of the colorspace is; * not updated however the colorspace is not invalidated. This; * corresponds to the case where the existing gamma comes from an sRGB; * chunk or profile. An error message has already been output.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3,Availability,Error,Error,3,/* Error exit - errmsg has been set. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3,Energy Efficiency,reduce,reduce,3,/* reduce code size; check here not in the caller */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:176,Availability,error,error,176,"/* Added at libpng-1.5.5 to support read and write of true CIEXYZ values for; * cHRM, as opposed to using chromaticities. These internal APIs return; * non-zero on a parameter error. The X, Y and Z values are required to be; * positive and less than 1.0.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:26,Usability,simpl,simply,26,"/* The reference white is simply the sum of the end-point (X,Y,Z) vectors,; * thus:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:251,Safety,avoid,avoid,251,"/* Check xy and, implicitly, z. Note that wide gamut color spaces typically; * have end points with 0 tristimulus values (these are impossible end; * points, but they are used to cover the possible colors). We check; * xy->whitey against 5, not 0, to avoid a possible integer overflow.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:7537,Availability,error,error,7537,"- blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 decimal digits, less than 10.; *; * The approach used here is to preserve the maximum precision within the; * signed representation. Because the red-scale calculation above uses the; * difference between two products of values that must be in the range -1..+1; * it is sufficient to divide the product by 7; ceil(100,000/32767*2). The; * factor is irrelevant in the calculation because it is applied to both; * numerator and denominator.; *; * Note that the values of the differences of the products of the; * chromaticities in the above equations tend to be small, for example for; * the sRGB chromaticities they are:; *; * red numerator: -0.04751; * green numerator: -0.08788; * denominator: -0.2241 (without white-y multiplication); *; * The resultant Y coefficients from the chromaticities of some widely used; * color space definitions are (to 15 decimal places):; *; * sRGB; * 0.212639005871510 0.715168678767756 0.072192315360734; * Kodak ProPhoto; * 0.288071128229293 0.711843217810102 0.000085653960605; * Adobe RGB; * 0.297344975250536 0.627363566255466 0.075291458493998; * Adobe Wide Gamut RGB; * 0.258728243040113 0.724682314948566 0.016589442011321; */; /* By the argument, above overflow should be impossible here. The return; * value of 2 indicates an internal error to the caller.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:117,Energy Efficiency,green,green,117,"/* The reverse calculation is more difficult because the original tristimulus; * value had 9 independent values (red,green,blue)x(X,Y,Z) however only 8; * derived values were recorded in the cHRM chunk;; * (red,green,blue,white)x(x,y). This loses one degree of freedom and; * therefore an arbitrary ninth value has to be introduced to undo the; * original transformations.; *; * Think of the original end-points as points in (X,Y,Z) space. The; * chromaticity values (c) have the property:; *; * C; * c = ---------; * X + Y + Z; *; * For each c (x,y,z) from the corresponding original C (X,Y,Z). Thus the; * three chromaticity values (x,y,z) for each end-point obey the; * relationship:; *; * x + y + z = 1; *; * This describes the plane in (X,Y,Z) space that intersects each axis at the; * value 1.0; call this the chromaticity plane. Thus the chromaticity; * calculation has scaled each end-point so that it is on the x+y+z=1 plane; * and chromaticity is the intersection of the vector from the origin to the; * (X,Y,Z) value with the chromaticity plane.; *; * To fully invert the chromaticity calculation we would need the three; * end-point scale factors, (red-scale, green-scale, blue-scale), but these; * were not recorded. Instead we calculated the reference white (X,Y,Z) and; * recorded the chromaticity of this. The reference white (X,Y,Z) would have; * given all three of the scale factors since:; *; * color-C = color-c * color-scale; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * But cHRM records only white-x and white-y, so we have lost the white scale; * factor:; *; * white-C = white-c*white-scale; *; * To handle this the inverse transformation makes an arbitrary assumption; * about white-scale:; *; * Assume: white-Y = 1.0; * Hence: white-scale = 1/white-y; * Or: red-Y + green-Y + blue-Y = 1.0; *; * Notice the last statement of the assumption gives an equation in three of; * the nine values we want to calculate. 8 mor",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:211,Energy Efficiency,green,green,211,"/* The reverse calculation is more difficult because the original tristimulus; * value had 9 independent values (red,green,blue)x(X,Y,Z) however only 8; * derived values were recorded in the cHRM chunk;; * (red,green,blue,white)x(x,y). This loses one degree of freedom and; * therefore an arbitrary ninth value has to be introduced to undo the; * original transformations.; *; * Think of the original end-points as points in (X,Y,Z) space. The; * chromaticity values (c) have the property:; *; * C; * c = ---------; * X + Y + Z; *; * For each c (x,y,z) from the corresponding original C (X,Y,Z). Thus the; * three chromaticity values (x,y,z) for each end-point obey the; * relationship:; *; * x + y + z = 1; *; * This describes the plane in (X,Y,Z) space that intersects each axis at the; * value 1.0; call this the chromaticity plane. Thus the chromaticity; * calculation has scaled each end-point so that it is on the x+y+z=1 plane; * and chromaticity is the intersection of the vector from the origin to the; * (X,Y,Z) value with the chromaticity plane.; *; * To fully invert the chromaticity calculation we would need the three; * end-point scale factors, (red-scale, green-scale, blue-scale), but these; * were not recorded. Instead we calculated the reference white (X,Y,Z) and; * recorded the chromaticity of this. The reference white (X,Y,Z) would have; * given all three of the scale factors since:; *; * color-C = color-c * color-scale; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * But cHRM records only white-x and white-y, so we have lost the white scale; * factor:; *; * white-C = white-c*white-scale; *; * To handle this the inverse transformation makes an arbitrary assumption; * about white-scale:; *; * Assume: white-Y = 1.0; * Hence: white-scale = 1/white-y; * Or: red-Y + green-Y + blue-Y = 1.0; *; * Notice the last statement of the assumption gives an equation in three of; * the nine values we want to calculate. 8 mor",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:1172,Energy Efficiency,green,green-scale,1172,"er only 8; * derived values were recorded in the cHRM chunk;; * (red,green,blue,white)x(x,y). This loses one degree of freedom and; * therefore an arbitrary ninth value has to be introduced to undo the; * original transformations.; *; * Think of the original end-points as points in (X,Y,Z) space. The; * chromaticity values (c) have the property:; *; * C; * c = ---------; * X + Y + Z; *; * For each c (x,y,z) from the corresponding original C (X,Y,Z). Thus the; * three chromaticity values (x,y,z) for each end-point obey the; * relationship:; *; * x + y + z = 1; *; * This describes the plane in (X,Y,Z) space that intersects each axis at the; * value 1.0; call this the chromaticity plane. Thus the chromaticity; * calculation has scaled each end-point so that it is on the x+y+z=1 plane; * and chromaticity is the intersection of the vector from the origin to the; * (X,Y,Z) value with the chromaticity plane.; *; * To fully invert the chromaticity calculation we would need the three; * end-point scale factors, (red-scale, green-scale, blue-scale), but these; * were not recorded. Instead we calculated the reference white (X,Y,Z) and; * recorded the chromaticity of this. The reference white (X,Y,Z) would have; * given all three of the scale factors since:; *; * color-C = color-c * color-scale; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * But cHRM records only white-x and white-y, so we have lost the white scale; * factor:; *; * white-C = white-c*white-scale; *; * To handle this the inverse transformation makes an arbitrary assumption; * about white-scale:; *; * Assume: white-Y = 1.0; * Hence: white-scale = 1/white-y; * Or: red-Y + green-Y + blue-Y = 1.0; *; * Notice the last statement of the assumption gives an equation in three of; * the nine values we want to calculate. 8 more equations come from the; * above routine as summarised at the top above (the chromaticity; * calculation):; *; * Given: color-x = color-X / ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:1467,Energy Efficiency,green,green-C,1467," corresponding original C (X,Y,Z). Thus the; * three chromaticity values (x,y,z) for each end-point obey the; * relationship:; *; * x + y + z = 1; *; * This describes the plane in (X,Y,Z) space that intersects each axis at the; * value 1.0; call this the chromaticity plane. Thus the chromaticity; * calculation has scaled each end-point so that it is on the x+y+z=1 plane; * and chromaticity is the intersection of the vector from the origin to the; * (X,Y,Z) value with the chromaticity plane.; *; * To fully invert the chromaticity calculation we would need the three; * end-point scale factors, (red-scale, green-scale, blue-scale), but these; * were not recorded. Instead we calculated the reference white (X,Y,Z) and; * recorded the chromaticity of this. The reference white (X,Y,Z) would have; * given all three of the scale factors since:; *; * color-C = color-c * color-scale; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * But cHRM records only white-x and white-y, so we have lost the white scale; * factor:; *; * white-C = white-c*white-scale; *; * To handle this the inverse transformation makes an arbitrary assumption; * about white-scale:; *; * Assume: white-Y = 1.0; * Hence: white-scale = 1/white-y; * Or: red-Y + green-Y + blue-Y = 1.0; *; * Notice the last statement of the assumption gives an equation in three of; * the nine values we want to calculate. 8 more equations come from the; * above routine as summarised at the top above (the chromaticity; * calculation):; *; * Given: color-x = color-X / (color-X + color-Y + color-Z); * Hence: (color-x - 1)*color-X + color.x*color-Y + color.x*color-Z = 0; *; * This is 9 simultaneous equations in the 9 variables ""color-C"" and can be; * solved by Cramer's rule. Cramer's rule requires calculating 10 9x9 matrix; * determinants, however this is not as bad as it seems because only 28 of; * the total of 90 terms in the various matrices are non-zero. Nevertheless; * Cramer",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:1507,Energy Efficiency,green,green-c,1507," corresponding original C (X,Y,Z). Thus the; * three chromaticity values (x,y,z) for each end-point obey the; * relationship:; *; * x + y + z = 1; *; * This describes the plane in (X,Y,Z) space that intersects each axis at the; * value 1.0; call this the chromaticity plane. Thus the chromaticity; * calculation has scaled each end-point so that it is on the x+y+z=1 plane; * and chromaticity is the intersection of the vector from the origin to the; * (X,Y,Z) value with the chromaticity plane.; *; * To fully invert the chromaticity calculation we would need the three; * end-point scale factors, (red-scale, green-scale, blue-scale), but these; * were not recorded. Instead we calculated the reference white (X,Y,Z) and; * recorded the chromaticity of this. The reference white (X,Y,Z) would have; * given all three of the scale factors since:; *; * color-C = color-c * color-scale; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * But cHRM records only white-x and white-y, so we have lost the white scale; * factor:; *; * white-C = white-c*white-scale; *; * To handle this the inverse transformation makes an arbitrary assumption; * about white-scale:; *; * Assume: white-Y = 1.0; * Hence: white-scale = 1/white-y; * Or: red-Y + green-Y + blue-Y = 1.0; *; * Notice the last statement of the assumption gives an equation in three of; * the nine values we want to calculate. 8 more equations come from the; * above routine as summarised at the top above (the chromaticity; * calculation):; *; * Given: color-x = color-X / (color-X + color-Y + color-Z); * Hence: (color-x - 1)*color-X + color.x*color-Y + color.x*color-Z = 0; *; * This is 9 simultaneous equations in the 9 variables ""color-C"" and can be; * solved by Cramer's rule. Cramer's rule requires calculating 10 9x9 matrix; * determinants, however this is not as bad as it seems because only 28 of; * the total of 90 terms in the various matrices are non-zero. Nevertheless; * Cramer",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:1515,Energy Efficiency,green,green-scale,1515," corresponding original C (X,Y,Z). Thus the; * three chromaticity values (x,y,z) for each end-point obey the; * relationship:; *; * x + y + z = 1; *; * This describes the plane in (X,Y,Z) space that intersects each axis at the; * value 1.0; call this the chromaticity plane. Thus the chromaticity; * calculation has scaled each end-point so that it is on the x+y+z=1 plane; * and chromaticity is the intersection of the vector from the origin to the; * (X,Y,Z) value with the chromaticity plane.; *; * To fully invert the chromaticity calculation we would need the three; * end-point scale factors, (red-scale, green-scale, blue-scale), but these; * were not recorded. Instead we calculated the reference white (X,Y,Z) and; * recorded the chromaticity of this. The reference white (X,Y,Z) would have; * given all three of the scale factors since:; *; * color-C = color-c * color-scale; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * But cHRM records only white-x and white-y, so we have lost the white scale; * factor:; *; * white-C = white-c*white-scale; *; * To handle this the inverse transformation makes an arbitrary assumption; * about white-scale:; *; * Assume: white-Y = 1.0; * Hence: white-scale = 1/white-y; * Or: red-Y + green-Y + blue-Y = 1.0; *; * Notice the last statement of the assumption gives an equation in three of; * the nine values we want to calculate. 8 more equations come from the; * above routine as summarised at the top above (the chromaticity; * calculation):; *; * Given: color-x = color-X / (color-X + color-Y + color-Z); * Hence: (color-x - 1)*color-X + color.x*color-Y + color.x*color-Z = 0; *; * This is 9 simultaneous equations in the 9 variables ""color-C"" and can be; * solved by Cramer's rule. Cramer's rule requires calculating 10 9x9 matrix; * determinants, however this is not as bad as it seems because only 28 of; * the total of 90 terms in the various matrices are non-zero. Nevertheless; * Cramer",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:1852,Energy Efficiency,green,green-Y,1852,"hus the chromaticity; * calculation has scaled each end-point so that it is on the x+y+z=1 plane; * and chromaticity is the intersection of the vector from the origin to the; * (X,Y,Z) value with the chromaticity plane.; *; * To fully invert the chromaticity calculation we would need the three; * end-point scale factors, (red-scale, green-scale, blue-scale), but these; * were not recorded. Instead we calculated the reference white (X,Y,Z) and; * recorded the chromaticity of this. The reference white (X,Y,Z) would have; * given all three of the scale factors since:; *; * color-C = color-c * color-scale; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * But cHRM records only white-x and white-y, so we have lost the white scale; * factor:; *; * white-C = white-c*white-scale; *; * To handle this the inverse transformation makes an arbitrary assumption; * about white-scale:; *; * Assume: white-Y = 1.0; * Hence: white-scale = 1/white-y; * Or: red-Y + green-Y + blue-Y = 1.0; *; * Notice the last statement of the assumption gives an equation in three of; * the nine values we want to calculate. 8 more equations come from the; * above routine as summarised at the top above (the chromaticity; * calculation):; *; * Given: color-x = color-X / (color-X + color-Y + color-Z); * Hence: (color-x - 1)*color-X + color.x*color-Y + color.x*color-Z = 0; *; * This is 9 simultaneous equations in the 9 variables ""color-C"" and can be; * solved by Cramer's rule. Cramer's rule requires calculating 10 9x9 matrix; * determinants, however this is not as bad as it seems because only 28 of; * the total of 90 terms in the various matrices are non-zero. Nevertheless; * Cramer's rule is notoriously numerically unstable because the determinant; * calculation involves the difference of large, but similar, numbers. It is; * difficult to be sure that the calculation is stable for real world values; * and it is certain that it becomes unstable where th",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3515,Energy Efficiency,green,green-C,3515,"ose; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), so we can immediately see that as white-y approaches 0 the; * accuracy inherent in the cHRM chunk drops off substantially.; *; * libpng arithmetic: a simple inversion of the above equations; * ------------------------------------------------------------; *; * white_scale = 1/white-y; * white-X = white-x * white-scale; * white-Y = 1.0; * white-Z = (1 - white-x - white-y) * white_scale; *; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * This gives us three equations in (red-scale,green-scale,blue-scale) where; * all the coefficients are now known:; *; * red-x*red-scale + green-x*green-scale + blue-x*blue-scale; * = white-x/white-y; * red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1; * red-z*red-scale + green-z*green-scale + blue-z*blue-scale; * = (1 - white-x - white-y)/white-y; *; * In the last equation color-z is (1 - color-x - color-y) so we can add all; * three equations together to get an alternative third:; *; * red-scale + green-scale + blue-scale = 1/white-y = white-scale; *; * So now we have a Cramer's rule solution where the determinants are just; * 3x3 - far more tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3555,Energy Efficiency,green,green-c,3555,"ose; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), so we can immediately see that as white-y approaches 0 the; * accuracy inherent in the cHRM chunk drops off substantially.; *; * libpng arithmetic: a simple inversion of the above equations; * ------------------------------------------------------------; *; * white_scale = 1/white-y; * white-X = white-x * white-scale; * white-Y = 1.0; * white-Z = (1 - white-x - white-y) * white_scale; *; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * This gives us three equations in (red-scale,green-scale,blue-scale) where; * all the coefficients are now known:; *; * red-x*red-scale + green-x*green-scale + blue-x*blue-scale; * = white-x/white-y; * red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1; * red-z*red-scale + green-z*green-scale + blue-z*blue-scale; * = (1 - white-x - white-y)/white-y; *; * In the last equation color-z is (1 - color-x - color-y) so we can add all; * three equations together to get an alternative third:; *; * red-scale + green-scale + blue-scale = 1/white-y = white-scale; *; * So now we have a Cramer's rule solution where the determinants are just; * 3x3 - far more tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3563,Energy Efficiency,green,green-scale,3563,"ose; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), so we can immediately see that as white-y approaches 0 the; * accuracy inherent in the cHRM chunk drops off substantially.; *; * libpng arithmetic: a simple inversion of the above equations; * ------------------------------------------------------------; *; * white_scale = 1/white-y; * white-X = white-x * white-scale; * white-Y = 1.0; * white-Z = (1 - white-x - white-y) * white_scale; *; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * This gives us three equations in (red-scale,green-scale,blue-scale) where; * all the coefficients are now known:; *; * red-x*red-scale + green-x*green-scale + blue-x*blue-scale; * = white-x/white-y; * red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1; * red-z*red-scale + green-z*green-scale + blue-z*blue-scale; * = (1 - white-x - white-y)/white-y; *; * In the last equation color-z is (1 - color-x - color-y) so we can add all; * three equations together to get an alternative third:; *; * red-scale + green-scale + blue-scale = 1/white-y = white-scale; *; * So now we have a Cramer's rule solution where the determinants are just; * 3x3 - far more tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3645,Energy Efficiency,green,green-scale,3645,"ose; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), so we can immediately see that as white-y approaches 0 the; * accuracy inherent in the cHRM chunk drops off substantially.; *; * libpng arithmetic: a simple inversion of the above equations; * ------------------------------------------------------------; *; * white_scale = 1/white-y; * white-X = white-x * white-scale; * white-Y = 1.0; * white-Z = (1 - white-x - white-y) * white_scale; *; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * This gives us three equations in (red-scale,green-scale,blue-scale) where; * all the coefficients are now known:; *; * red-x*red-scale + green-x*green-scale + blue-x*blue-scale; * = white-x/white-y; * red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1; * red-z*red-scale + green-z*green-scale + blue-z*blue-scale; * = (1 - white-x - white-y)/white-y; *; * In the last equation color-z is (1 - color-x - color-y) so we can add all; * three equations together to get an alternative third:; *; * red-scale + green-scale + blue-scale = 1/white-y = white-scale; *; * So now we have a Cramer's rule solution where the determinants are just; * 3x3 - far more tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3738,Energy Efficiency,green,green-x,3738,"ose; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), so we can immediately see that as white-y approaches 0 the; * accuracy inherent in the cHRM chunk drops off substantially.; *; * libpng arithmetic: a simple inversion of the above equations; * ------------------------------------------------------------; *; * white_scale = 1/white-y; * white-X = white-x * white-scale; * white-Y = 1.0; * white-Z = (1 - white-x - white-y) * white_scale; *; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * This gives us three equations in (red-scale,green-scale,blue-scale) where; * all the coefficients are now known:; *; * red-x*red-scale + green-x*green-scale + blue-x*blue-scale; * = white-x/white-y; * red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1; * red-z*red-scale + green-z*green-scale + blue-z*blue-scale; * = (1 - white-x - white-y)/white-y; *; * In the last equation color-z is (1 - color-x - color-y) so we can add all; * three equations together to get an alternative third:; *; * red-scale + green-scale + blue-scale = 1/white-y = white-scale; *; * So now we have a Cramer's rule solution where the determinants are just; * 3x3 - far more tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3746,Energy Efficiency,green,green-scale,3746,"ose; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), so we can immediately see that as white-y approaches 0 the; * accuracy inherent in the cHRM chunk drops off substantially.; *; * libpng arithmetic: a simple inversion of the above equations; * ------------------------------------------------------------; *; * white_scale = 1/white-y; * white-X = white-x * white-scale; * white-Y = 1.0; * white-Z = (1 - white-x - white-y) * white_scale; *; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * This gives us three equations in (red-scale,green-scale,blue-scale) where; * all the coefficients are now known:; *; * red-x*red-scale + green-x*green-scale + blue-x*blue-scale; * = white-x/white-y; * red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1; * red-z*red-scale + green-z*green-scale + blue-z*blue-scale; * = (1 - white-x - white-y)/white-y; *; * In the last equation color-z is (1 - color-x - color-y) so we can add all; * three equations together to get an alternative third:; *; * red-scale + green-scale + blue-scale = 1/white-y = white-scale; *; * So now we have a Cramer's rule solution where the determinants are just; * 3x3 - far more tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3820,Energy Efficiency,green,green-y,3820,"ose; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), so we can immediately see that as white-y approaches 0 the; * accuracy inherent in the cHRM chunk drops off substantially.; *; * libpng arithmetic: a simple inversion of the above equations; * ------------------------------------------------------------; *; * white_scale = 1/white-y; * white-X = white-x * white-scale; * white-Y = 1.0; * white-Z = (1 - white-x - white-y) * white_scale; *; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * This gives us three equations in (red-scale,green-scale,blue-scale) where; * all the coefficients are now known:; *; * red-x*red-scale + green-x*green-scale + blue-x*blue-scale; * = white-x/white-y; * red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1; * red-z*red-scale + green-z*green-scale + blue-z*blue-scale; * = (1 - white-x - white-y)/white-y; *; * In the last equation color-z is (1 - color-x - color-y) so we can add all; * three equations together to get an alternative third:; *; * red-scale + green-scale + blue-scale = 1/white-y = white-scale; *; * So now we have a Cramer's rule solution where the determinants are just; * 3x3 - far more tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3828,Energy Efficiency,green,green-scale,3828,"ose; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), so we can immediately see that as white-y approaches 0 the; * accuracy inherent in the cHRM chunk drops off substantially.; *; * libpng arithmetic: a simple inversion of the above equations; * ------------------------------------------------------------; *; * white_scale = 1/white-y; * white-X = white-x * white-scale; * white-Y = 1.0; * white-Z = (1 - white-x - white-y) * white_scale; *; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * This gives us three equations in (red-scale,green-scale,blue-scale) where; * all the coefficients are now known:; *; * red-x*red-scale + green-x*green-scale + blue-x*blue-scale; * = white-x/white-y; * red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1; * red-z*red-scale + green-z*green-scale + blue-z*blue-scale; * = (1 - white-x - white-y)/white-y; *; * In the last equation color-z is (1 - color-x - color-y) so we can add all; * three equations together to get an alternative third:; *; * red-scale + green-scale + blue-scale = 1/white-y = white-scale; *; * So now we have a Cramer's rule solution where the determinants are just; * 3x3 - far more tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3885,Energy Efficiency,green,green-z,3885,"ose; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), so we can immediately see that as white-y approaches 0 the; * accuracy inherent in the cHRM chunk drops off substantially.; *; * libpng arithmetic: a simple inversion of the above equations; * ------------------------------------------------------------; *; * white_scale = 1/white-y; * white-X = white-x * white-scale; * white-Y = 1.0; * white-Z = (1 - white-x - white-y) * white_scale; *; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * This gives us three equations in (red-scale,green-scale,blue-scale) where; * all the coefficients are now known:; *; * red-x*red-scale + green-x*green-scale + blue-x*blue-scale; * = white-x/white-y; * red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1; * red-z*red-scale + green-z*green-scale + blue-z*blue-scale; * = (1 - white-x - white-y)/white-y; *; * In the last equation color-z is (1 - color-x - color-y) so we can add all; * three equations together to get an alternative third:; *; * red-scale + green-scale + blue-scale = 1/white-y = white-scale; *; * So now we have a Cramer's rule solution where the determinants are just; * 3x3 - far more tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3893,Energy Efficiency,green,green-scale,3893,"ose; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), so we can immediately see that as white-y approaches 0 the; * accuracy inherent in the cHRM chunk drops off substantially.; *; * libpng arithmetic: a simple inversion of the above equations; * ------------------------------------------------------------; *; * white_scale = 1/white-y; * white-X = white-x * white-scale; * white-Y = 1.0; * white-Z = (1 - white-x - white-y) * white_scale; *; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * This gives us three equations in (red-scale,green-scale,blue-scale) where; * all the coefficients are now known:; *; * red-x*red-scale + green-x*green-scale + blue-x*blue-scale; * = white-x/white-y; * red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1; * red-z*red-scale + green-z*green-scale + blue-z*blue-scale; * = (1 - white-x - white-y)/white-y; *; * In the last equation color-z is (1 - color-x - color-y) so we can add all; * three equations together to get an alternative third:; *; * red-scale + green-scale + blue-scale = 1/white-y = white-scale; *; * So now we have a Cramer's rule solution where the determinants are just; * 3x3 - far more tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:4117,Energy Efficiency,green,green-scale,4117,"ose; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), so we can immediately see that as white-y approaches 0 the; * accuracy inherent in the cHRM chunk drops off substantially.; *; * libpng arithmetic: a simple inversion of the above equations; * ------------------------------------------------------------; *; * white_scale = 1/white-y; * white-X = white-x * white-scale; * white-Y = 1.0; * white-Z = (1 - white-x - white-y) * white_scale; *; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * This gives us three equations in (red-scale,green-scale,blue-scale) where; * all the coefficients are now known:; *; * red-x*red-scale + green-x*green-scale + blue-x*blue-scale; * = white-x/white-y; * red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1; * red-z*red-scale + green-z*green-scale + blue-z*blue-scale; * = (1 - white-x - white-y)/white-y; *; * In the last equation color-z is (1 - color-x - color-y) so we can add all; * three equations together to get an alternative third:; *; * red-scale + green-scale + blue-scale = 1/white-y = white-scale; *; * So now we have a Cramer's rule solution where the determinants are just; * 3x3 - far more tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:4728,Energy Efficiency,green,green-scale,4728,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:4789,Energy Efficiency,green,green-x,4789,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:4807,Energy Efficiency,green,green-scale,4807,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:4891,Energy Efficiency,green,green-y,4891,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:4909,Energy Efficiency,green,green-scale,4909,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:5001,Energy Efficiency,green,green-scale,5001,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:5021,Energy Efficiency,green,green-scale,5021,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:5164,Energy Efficiency,green,green-x,5164,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:5228,Energy Efficiency,green,green-y,5228,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:5248,Energy Efficiency,green,green-scale,5248,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:5376,Energy Efficiency,green,green-x,5376,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:5421,Energy Efficiency,green,green-y,5421,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:5553,Energy Efficiency,green,green-x,5553,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:5589,Energy Efficiency,green,green-y,5589,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:5630,Energy Efficiency,green,green-scale,5630,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:5823,Energy Efficiency,green,green-x,5823,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:5859,Energy Efficiency,green,green-y,5859,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:6912,Energy Efficiency,green,green,6912,"- blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 decimal digits, less than 10.; *; * The approach used here is to preserve the maximum precision within the; * signed representation. Because the red-scale calculation above uses the; * difference between two products of values that must be in the range -1..+1; * it is sufficient to divide the product by 7; ceil(100,000/32767*2). The; * factor is irrelevant in the calculation because it is applied to both; * numerator and denominator.; *; * Note that the values of the differences of the products of the; * chromaticities in the above equations tend to be small, for example for; * the sRGB chromaticities they are:; *; * red numerator: -0.04751; * green numerator: -0.08788; * denominator: -0.2241 (without white-y multiplication); *; * The resultant Y coefficients from the chromaticities of some widely used; * color space definitions are (to 15 decimal places):; *; * sRGB; * 0.212639005871510 0.715168678767756 0.072192315360734; * Kodak ProPhoto; * 0.288071128229293 0.711843217810102 0.000085653960605; * Adobe RGB; * 0.297344975250536 0.627363566255466 0.075291458493998; * Adobe Wide Gamut RGB; * 0.258728243040113 0.724682314948566 0.016589442011321; */; /* By the argument, above overflow should be impossible here. The return; * value of 2 indicates an internal error to the caller.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:2036,Integrability,rout,routine,2036,"ion we would need the three; * end-point scale factors, (red-scale, green-scale, blue-scale), but these; * were not recorded. Instead we calculated the reference white (X,Y,Z) and; * recorded the chromaticity of this. The reference white (X,Y,Z) would have; * given all three of the scale factors since:; *; * color-C = color-c * color-scale; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * But cHRM records only white-x and white-y, so we have lost the white scale; * factor:; *; * white-C = white-c*white-scale; *; * To handle this the inverse transformation makes an arbitrary assumption; * about white-scale:; *; * Assume: white-Y = 1.0; * Hence: white-scale = 1/white-y; * Or: red-Y + green-Y + blue-Y = 1.0; *; * Notice the last statement of the assumption gives an equation in three of; * the nine values we want to calculate. 8 more equations come from the; * above routine as summarised at the top above (the chromaticity; * calculation):; *; * Given: color-x = color-X / (color-X + color-Y + color-Z); * Hence: (color-x - 1)*color-X + color.x*color-Y + color.x*color-Z = 0; *; * This is 9 simultaneous equations in the 9 variables ""color-C"" and can be; * solved by Cramer's rule. Cramer's rule requires calculating 10 9x9 matrix; * determinants, however this is not as bad as it seems because only 28 of; * the total of 90 terms in the various matrices are non-zero. Nevertheless; * Cramer's rule is notoriously numerically unstable because the determinant; * calculation involves the difference of large, but similar, numbers. It is; * difficult to be sure that the calculation is stable for real world values; * and it is certain that it becomes unstable where the end points are close; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3036,Integrability,depend,depends,3036,"n: color-x = color-X / (color-X + color-Y + color-Z); * Hence: (color-x - 1)*color-X + color.x*color-Y + color.x*color-Z = 0; *; * This is 9 simultaneous equations in the 9 variables ""color-C"" and can be; * solved by Cramer's rule. Cramer's rule requires calculating 10 9x9 matrix; * determinants, however this is not as bad as it seems because only 28 of; * the total of 90 terms in the various matrices are non-zero. Nevertheless; * Cramer's rule is notoriously numerically unstable because the determinant; * calculation involves the difference of large, but similar, numbers. It is; * difficult to be sure that the calculation is stable for real world values; * and it is certain that it becomes unstable where the end points are close; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), so we can immediately see that as white-y approaches 0 the; * accuracy inherent in the cHRM chunk drops off substantially.; *; * libpng arithmetic: a simple inversion of the above equations; * ------------------------------------------------------------; *; * white_scale = 1/white-y; * white-X = white-x * white-scale; * white-Y = 1.0; * white-Z = (1 - white-x - white-y) * white_scale; *; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * This gives us three equations in (red-scale,green-scale,blue-scale) where; * all the coefficients are now known:; *; * red-x*red-scale + green-x*green-scale + blue-x*blue-scale; * = white-x/white-y; * red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1; * red-z*red-scale + green-z*green-scale + blue-z*blue-scale; * = (1 - white-x - white-y)/white-y; *; * In the last equation color-z is (1 - color-x - color-y) so we can add all; * three equations together to get an alternative third:; *; * red-scale + gre",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:2293,Modifiability,variab,variables,2293,"rded the chromaticity of this. The reference white (X,Y,Z) would have; * given all three of the scale factors since:; *; * color-C = color-c * color-scale; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * But cHRM records only white-x and white-y, so we have lost the white scale; * factor:; *; * white-C = white-c*white-scale; *; * To handle this the inverse transformation makes an arbitrary assumption; * about white-scale:; *; * Assume: white-Y = 1.0; * Hence: white-scale = 1/white-y; * Or: red-Y + green-Y + blue-Y = 1.0; *; * Notice the last statement of the assumption gives an equation in three of; * the nine values we want to calculate. 8 more equations come from the; * above routine as summarised at the top above (the chromaticity; * calculation):; *; * Given: color-x = color-X / (color-X + color-Y + color-Z); * Hence: (color-x - 1)*color-X + color.x*color-Y + color.x*color-Z = 0; *; * This is 9 simultaneous equations in the 9 variables ""color-C"" and can be; * solved by Cramer's rule. Cramer's rule requires calculating 10 9x9 matrix; * determinants, however this is not as bad as it seems because only 28 of; * the total of 90 terms in the various matrices are non-zero. Nevertheless; * Cramer's rule is notoriously numerically unstable because the determinant; * calculation involves the difference of large, but similar, numbers. It is; * difficult to be sure that the calculation is stable for real world values; * and it is certain that it becomes unstable where the end points are close; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), so we can immediately see that as white-y approaches 0 the; * accuracy inherent in the cHRM chunk drops off substantially.; *; * libpng arithmetic: a simple inversion of the above equatio",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:4385,Safety,avoid,avoid,4385,"*; * white_scale = 1/white-y; * white-X = white-x * white-scale; * white-Y = 1.0; * white-Z = (1 - white-x - white-y) * white_scale; *; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * This gives us three equations in (red-scale,green-scale,blue-scale) where; * all the coefficients are now known:; *; * red-x*red-scale + green-x*green-scale + blue-x*blue-scale; * = white-x/white-y; * red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1; * red-z*red-scale + green-z*green-scale + blue-z*blue-scale; * = (1 - white-x - white-y)/white-y; *; * In the last equation color-z is (1 - color-x - color-y) so we can add all; * three equations together to get an alternative third:; *; * red-scale + green-scale + blue-scale = 1/white-y = white-scale; *; * So now we have a Cramer's rule solution where the determinants are just; * 3x3 - far more tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * r",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:6135,Safety,avoid,avoid,6135,"ite-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 decimal digits, less than 10.; *; * The approach used here is to preserve the maximum precision within the; * signed representation. Because the red-scale calculation above uses the; * difference between two products of values that must be in the range -1..+1; * it is sufficient to divide the product by 7; ceil(100,000/32767*2). The; * factor is irrelevant in the calculation because it is applied to both; * numerator and denominator.; *; * Note that the values of the differences of the products of the; * chromaticities in the above equations tend to be small, for example for; * the sRGB chromaticities they are:; *; * red numerator: -0.04751; * green numerator: -0.08788; * denominator: -0.2241 (without white-y multiplication); *; * The resultant Y coefficients from the chromaticities of so",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:335,Usability,undo,undo,335,"/* The reverse calculation is more difficult because the original tristimulus; * value had 9 independent values (red,green,blue)x(X,Y,Z) however only 8; * derived values were recorded in the cHRM chunk;; * (red,green,blue,white)x(x,y). This loses one degree of freedom and; * therefore an arbitrary ninth value has to be introduced to undo the; * original transformations.; *; * Think of the original end-points as points in (X,Y,Z) space. The; * chromaticity values (c) have the property:; *; * C; * c = ---------; * X + Y + Z; *; * For each c (x,y,z) from the corresponding original C (X,Y,Z). Thus the; * three chromaticity values (x,y,z) for each end-point obey the; * relationship:; *; * x + y + z = 1; *; * This describes the plane in (X,Y,Z) space that intersects each axis at the; * value 1.0; call this the chromaticity plane. Thus the chromaticity; * calculation has scaled each end-point so that it is on the x+y+z=1 plane; * and chromaticity is the intersection of the vector from the origin to the; * (X,Y,Z) value with the chromaticity plane.; *; * To fully invert the chromaticity calculation we would need the three; * end-point scale factors, (red-scale, green-scale, blue-scale), but these; * were not recorded. Instead we calculated the reference white (X,Y,Z) and; * recorded the chromaticity of this. The reference white (X,Y,Z) would have; * given all three of the scale factors since:; *; * color-C = color-c * color-scale; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * But cHRM records only white-x and white-y, so we have lost the white scale; * factor:; *; * white-C = white-c*white-scale; *; * To handle this the inverse transformation makes an arbitrary assumption; * about white-scale:; *; * Assume: white-Y = 1.0; * Hence: white-scale = 1/white-y; * Or: red-Y + green-Y + blue-Y = 1.0; *; * Notice the last statement of the assumption gives an equation in three of; * the nine values we want to calculate. 8 mor",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3254,Usability,simpl,simple,3254,"d by Cramer's rule. Cramer's rule requires calculating 10 9x9 matrix; * determinants, however this is not as bad as it seems because only 28 of; * the total of 90 terms in the various matrices are non-zero. Nevertheless; * Cramer's rule is notoriously numerically unstable because the determinant; * calculation involves the difference of large, but similar, numbers. It is; * difficult to be sure that the calculation is stable for real world values; * and it is certain that it becomes unstable where the end points are close; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), so we can immediately see that as white-y approaches 0 the; * accuracy inherent in the cHRM chunk drops off substantially.; *; * libpng arithmetic: a simple inversion of the above equations; * ------------------------------------------------------------; *; * white_scale = 1/white-y; * white-X = white-x * white-scale; * white-Y = 1.0; * white-Z = (1 - white-x - white-y) * white_scale; *; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * This gives us three equations in (red-scale,green-scale,blue-scale) where; * all the coefficients are now known:; *; * red-x*red-scale + green-x*green-scale + blue-x*blue-scale; * = white-x/white-y; * red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1; * red-z*red-scale + green-z*green-scale + blue-z*blue-scale; * = (1 - white-x - white-y)/white-y; *; * In the last equation color-z is (1 - color-x - color-y) so we can add all; * three equations together to get an alternative third:; *; * red-scale + green-scale + blue-scale = 1/white-y = white-scale; *; * So now we have a Cramer's rule solution where the determinants are just; * 3x3 - far more tractible. Unfortunately 3x3 determinants still involve; * multiplic",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:4580,Usability,simpl,simplify,4580,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:6018,Usability,simpl,simple,6018,"ite-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 decimal digits, less than 10.; *; * The approach used here is to preserve the maximum precision within the; * signed representation. Because the red-scale calculation above uses the; * difference between two products of values that must be in the range -1..+1; * it is sufficient to divide the product by 7; ceil(100,000/32767*2). The; * factor is irrelevant in the calculation because it is applied to both; * numerator and denominator.; *; * Note that the values of the differences of the products of the; * chromaticities in the above equations tend to be small, for example for; * the sRGB chromaticities they are:; *; * red numerator: -0.04751; * green numerator: -0.08788; * denominator: -0.2241 (without white-y multiplication); *; * The resultant Y coefficients from the chromaticities of so",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:233,Safety,safe,safe,233,"/* Normalize by scaling so the sum of the end-point Y values is PNG_FP_1.; * IMPLEMENTATION NOTE: ANSI requires signed overflow not to occur, therefore; * relying on addition of two positive values producing a negative one is not; * safe.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:12,Availability,error,error,12,/* Allow an error of +/-0.01 (absolute value) on each chromaticity */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:517,Performance,perform,performed,517,"/* Added in libpng-1.6.0, a different check for the validity of a set of cHRM; * chunk chromaticities. Earlier checks used to simply look for the overflow; * condition (where the determinant of the matrix to solve for XYZ ends up zero; * because the chromaticity values are not all distinct.) Despite this it is; * theoretically possible to produce chromaticities that are apparently valid; * but that rapidly degrade to invalid, potentially crashing, sets because of; * arithmetic inaccuracies when calculations are performed on them. The new; * check is to round-trip xy -> XYZ -> xy and then check that the result is; * within a small percentage of the original.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:126,Usability,simpl,simply,126,"/* Added in libpng-1.6.0, a different check for the validity of a set of cHRM; * chunk chromaticities. Earlier checks used to simply look for the overflow; * condition (where the determinant of the matrix to solve for XYZ ends up zero; * because the chromaticity values are not all distinct.) Despite this it is; * theoretically possible to produce chromaticities that are apparently valid; * but that rapidly degrade to invalid, potentially crashing, sets because of; * arithmetic inaccuracies when calculations are performed on them. The new; * check is to round-trip xy -> XYZ -> xy and then check that the result is; * within a small percentage of the original.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:25,Integrability,rout,routine,25,/* As a side-effect this routine also returns the XYZ endpoints. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3,Energy Efficiency,green,green,3,/* green */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:28,Performance,perform,performed,28,/* The consistency check is performed on the chromaticities; this factors out; * variations because of the normalization (or not) of the end point Y; * values.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:94,Availability,error,error,94,/* The end points must be reasonably close to any we already have. The; * following allows an error of up to +/-.001; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:89,Testability,test,test,89,"/* The end points are normally quoted to two decimal digits, so allow +/-0.01; * on this test.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:187,Availability,fault,fault,187,"/* We must check the end points to ensure they are reasonable - in the past; * color management systems have crashed as a result of getting bogus; * colorant values, while this isn't the fault of libpng it is the; * responsibility of libpng because PNG carries the bomb and libpng is in a; * position to protect against it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:75,Availability,error,error,75,/* libpng is broken; this should be a warning but if it happens we; * want error reports so for the moment it is an error.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:116,Availability,error,error,116,/* libpng is broken; this should be a warning but if it happens we; * want error reports so for the moment it is an error.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3,Availability,Error,Error,3,/* Error message generation */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:9,Integrability,message,message,9,/* Error message generation */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:59,Safety,safe,safe,59,/* So 'value' is at most 4 bytes and the following cast is safe */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:32,Integrability,message,message,32,"/* The 'reason' is an arbitrary message, allow +79 maximum 195 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:11,Availability,recover,recoverable,11,"/* This is recoverable, but make it unconditionally an app_error on write to; * avoid writing invalid ICC profiles into PNG files (i.e., we handle them; * on read, with a warning, but on write unless the app turns off; * application errors the PNG won't be written.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:233,Availability,error,errors,233,"/* This is recoverable, but make it unconditionally an app_error on write to; * avoid writing invalid ICC profiles into PNG files (i.e., we handle them; * on read, with a warning, but on write unless the app turns off; * application errors the PNG won't be written.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:11,Safety,recover,recoverable,11,"/* This is recoverable, but make it unconditionally an app_error on write to; * avoid writing invalid ICC profiles into PNG files (i.e., we handle them; * on read, with a warning, but on write unless the app turns off; * application errors the PNG won't be written.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:80,Safety,avoid,avoid,80,"/* This is recoverable, but make it unconditionally an app_error on write to; * avoid writing invalid ICC profiles into PNG files (i.e., we handle them; * on read, with a warning, but on write unless the app turns off; * application errors the PNG won't be written.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:182,Energy Efficiency,adapt,adapted,182,"/* sRGB sets known gamma, end points and (from the chunk) intent. */; /* IMPORTANT: these are not necessarily the values found in an ICC profile; * because ICC profiles store values adapted to a D50 environment; it is; * expected that the ICC profile mediaWhitePointTag will be D50; see the; * checks and code elsewhere to understand this better.; *; * These XYZ values, which are accurate to 5dp, produce rgb to gray; * coefficients of (6968,23435,2366), which are reduced (because they add up; * to 32769 not 32768) to (6968,23434,2366). These are the values that; * libpng has traditionally used (and are the best values given the 15bit; * algorithm used by the rgb to gray code.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:466,Energy Efficiency,reduce,reduced,466,"/* sRGB sets known gamma, end points and (from the chunk) intent. */; /* IMPORTANT: these are not necessarily the values found in an ICC profile; * because ICC profiles store values adapted to a D50 environment; it is; * expected that the ICC profile mediaWhitePointTag will be D50; see the; * checks and code elsewhere to understand this better.; *; * These XYZ values, which are accurate to 5dp, produce rgb to gray; * coefficients of (6968,23435,2366), which are reduced (because they add up; * to 32769 not 32768) to (6968,23434,2366). These are the values that; * libpng has traditionally used (and are the best values given the 15bit; * algorithm used by the rgb to gray code.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:182,Modifiability,adapt,adapted,182,"/* sRGB sets known gamma, end points and (from the chunk) intent. */; /* IMPORTANT: these are not necessarily the values found in an ICC profile; * because ICC profiles store values adapted to a D50 environment; it is; * expected that the ICC profile mediaWhitePointTag will be D50; see the; * checks and code elsewhere to understand this better.; *; * These XYZ values, which are accurate to 5dp, produce rgb to gray; * coefficients of (6968,23435,2366), which are reduced (because they add up; * to 32769 not 32768) to (6968,23434,2366). These are the values that; * libpng has traditionally used (and are the best values given the 15bit; * algorithm used by the rgb to gray code.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:26,Energy Efficiency,adapt,adapted,26,/* D65 XYZ (*not* the D50 adapted values!) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:26,Modifiability,adapt,adapted,26,/* D65 XYZ (*not* the D50 adapted values!) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3,Energy Efficiency,green,green,3,/* green */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:505,Availability,error,error,505,"/* Check the intent, then check for existing settings. It is valid for the; * PNG file to have cHRM or gAMA chunks along with sRGB, but the values must; * be consistent with the correct values. If, however, this function is; * called below because an iCCP chunk matches sRGB then it is quite; * conceivable that an older app recorded incorrect gAMA and cHRM because of; * an incorrect calculation based on the values in the profile - this does; * *not* invalidate the profile (though it still produces an error, which can; * be ignored.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:35,Availability,error,error,35,/* This check is just done for the error reporting - the routine always; * returns true when the 'from' argument corresponds to sRGB (2).; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:57,Integrability,rout,routine,57,/* This check is just done for the error reporting - the routine always; * returns true when the 'from' argument corresponds to sRGB (2).; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:255,Energy Efficiency,allocate,allocate,255,"/* This needs to be here because the 'normal' check is in; * png_decompress_chunk, yet this happens after the attempt to; * png_malloc_base the required data. We only need this on read; on write; * the caller supplies the profile buffer so libpng doesn't allocate it. See; * the call to icc_check_length below (the write case).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:86,Performance,load,loaded,86,"/* At this point the tag table can't be checked because it hasn't necessarily; * been loaded; however, various header fields can be checked. These checks; * are for values permitted by the PNG spec in an ICC profile; the PNG spec; * restricts the profiles that can be passed in an iCCP chunk (they must be; * appropriate to processing PNG data!); */; /* Data checks (could be skipped). These checks must be independent of the; * version number; however, the version number doesn't accommodate changes in; * the header fields (just the known tags and the interpretation of the; * data.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:997,Availability,error,error,997,"/* The PNG spec requires this:; * ""If the iCCP chunk is present, the image samples conform to the colour; * space represented by the embedded ICC profile as defined by the; * International Color Consortium [ICC]. The colour space of the ICC profile; * shall be an RGB colour space for colour images (PNG colour types 2, 3, and; * 6), or a greyscale colour space for greyscale images (PNG colour types 0; * and 4).""; *; * This checking code ensures the embedded profile (on either read or write); * conforms to the specification requirements. Notice that an ICC 'gray'; * color-space profile contains the information to transform the monochrome; * data to XYZ or L*a*b (according to which PCS the profile uses) and this; * should be used in preference to the standard libpng K channel replication; * into R, G and B channels.; *; * Previously it was suggested that an RGB profile on grayscale data could be; * handled. However it it is clear that using an RGB profile in this context; * must be an error - there is no specification of what it means. Thus it is; * almost certainly more correct to ignore the profile.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:935,Usability,clear,clear,935,"/* The PNG spec requires this:; * ""If the iCCP chunk is present, the image samples conform to the colour; * space represented by the embedded ICC profile as defined by the; * International Color Consortium [ICC]. The colour space of the ICC profile; * shall be an RGB colour space for colour images (PNG colour types 2, 3, and; * 6), or a greyscale colour space for greyscale images (PNG colour types 0; * and 4).""; *; * This checking code ensures the embedded profile (on either read or write); * conforms to the specification requirements. Notice that an ICC 'gray'; * color-space profile contains the information to transform the monochrome; * data to XYZ or L*a*b (according to which PCS the profile uses) and this; * should be used in preference to the standard libpng K channel replication; * into R, G and B channels.; *; * Previously it was suggested that an RGB profile on grayscale data could be; * handled. However it it is clear that using an RGB profile in this context; * must be an error - there is no specification of what it means. Thus it is; * almost certainly more correct to ignore the profile.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:320,Availability,error,error,320,"/* It is up to the application to check that the profile class matches the; * application requirements; the spec provides no guidance, but it's pretty; * weird if the profile is not scanner ('scnr'), monitor ('mntr'), printer; * ('prtr') or 'spac' (for generic color spaces). Issue a warning in these; * cases. Issue an error for device link or abstract profiles - these don't; * contain the records necessary to transform the color-space to anything; * other than the target device (and not even that for an abstract profile).; * Profiles of these classes may not be embedded in images.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:200,Energy Efficiency,monitor,monitor,200,"/* It is up to the application to check that the profile class matches the; * application requirements; the spec provides no guidance, but it's pretty; * weird if the profile is not scanner ('scnr'), monitor ('mntr'), printer; * ('prtr') or 'spac' (for generic color spaces). Issue a warning in these; * cases. Issue an error for device link or abstract profiles - these don't; * contain the records necessary to transform the color-space to anything; * other than the target device (and not even that for an abstract profile).; * Profiles of these classes may not be embedded in images.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:125,Usability,guid,guidance,125,"/* It is up to the application to check that the profile class matches the; * application requirements; the spec provides no guidance, but it's pretty; * weird if the profile is not scanner ('scnr'), monitor ('mntr'), printer; * ('prtr') or 'spac' (for generic color spaces). Issue a warning in these; * cases. Issue an error for device link or abstract profiles - these don't; * contain the records necessary to transform the color-space to anything; * other than the target device (and not even that for an abstract profile).; * Profiles of these classes may not be embedded in images.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:178,Testability,test,tests,178,"/* 'nmcl' */; /* A NamedColor profile is also device specific, however it doesn't; * contain an AToB0 tag that is open to misinterpretation. Almost; * certainly it will fail the tests below.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:23,Modifiability,enhance,enhancements,23,"/* To allow for future enhancements to the profile accept unrecognized; * profile classes with a warning, these then hit the test below on the; * tag content to ensure they are backward compatible with one of the; * understood profiles.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:125,Testability,test,test,125,"/* To allow for future enhancements to the profile accept unrecognized; * profile classes with a warning, these then hit the test below on the; * tag content to ensure they are backward compatible with one of the; * understood profiles.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:365,Availability,error,error,365,"/* not padded */; /* The ICC specification does not exclude zero length tags, therefore the; * start might actually be anywhere if there is no data, but this would be; * a clear abuse of the intent of the standard so the start is checked for; * being in range. All defined tag types have an 8 byte header - a 4 byte; * type signature then 0.; */; /* This is a hard error; potentially it can cause read outside the; * profile.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:172,Usability,clear,clear,172,"/* not padded */; /* The ICC specification does not exclude zero length tags, therefore the; * start might actually be anywhere if there is no data, but this would be; * a clear abuse of the intent of the standard so the start is checked for; * being in range. All defined tag types have an 8 byte header - a 4 byte; * type signature then 0.; */; /* This is a hard error; potentially it can cause read outside the; * profile.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:58,Availability,down,downloads,58,"/* This data comes from contrib/tools/checksum-icc run on downloads of; * all four ICC sRGB profiles from www.color.org.; */; /* adler32, crc32, MD5[4], intent, date, length, file-name */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:38,Security,checksum,checksum-icc,38,"/* This data comes from contrib/tools/checksum-icc run on downloads of; * all four ICC sRGB profiles from www.color.org.; */; /* adler32, crc32, MD5[4], intent, date, length, file-name */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:44,Security,checksum,checksum,44,/* The following profiles have no known MD5 checksum. If there is a match; * on the (empty) MD5 the other fields are used to attempt a match and; * a warning is produced. The first two of these profiles have a 'cprt' tag; * which suggests that they were also made by Hewlett Packard.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:364,Availability,error,error,364,"/* This is a 'mntr' (display) profile with a mediaWhitePointTag that does not; * match the D50 PCS illuminant in the header (it is in fact the D65 values,; * so the white point is recorded as the un-adapted value.) The profiles; * below only differ in one byte - the intent - and are basically the same as; * the previous profile except for the mediaWhitePointTag error and a missing; * chromaticAdaptationTag.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:199,Energy Efficiency,adapt,adapted,199,"/* This is a 'mntr' (display) profile with a mediaWhitePointTag that does not; * match the D50 PCS illuminant in the header (it is in fact the D65 values,; * so the white point is recorded as the un-adapted value.) The profiles; * below only differ in one byte - the intent - and are basically the same as; * the previous profile except for the mediaWhitePointTag error and a missing; * chromaticAdaptationTag.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:199,Modifiability,adapt,adapted,199,"/* This is a 'mntr' (display) profile with a mediaWhitePointTag that does not; * match the D50 PCS illuminant in the header (it is in fact the D65 values,; * so the white point is recorded as the un-adapted value.) The profiles; * below only differ in one byte - the intent - and are basically the same as; * the previous profile except for the mediaWhitePointTag error and a missing; * chromaticAdaptationTag.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:163,Safety,safe,safe,163,"/* The quick check is to verify just the MD5 signature and trust the; * rest of the data. Because the profile has already been verified for; * correctness this is safe. png_colorspace_set_sRGB will check the 'intent'; * field too, so if the profile has been edited with an intent not defined; * by sRGB (but maybe defined by a later ICC specification) the read of; * the profile will fail at that point.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:48,Modifiability,config,configured,48,/* Profile is unsigned or more checks have been configured in. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:108,Performance,perform,perform,108,"/* These basic checks suggest that the data has not been; * modified, but if the check level is more than 1 perform; * our own crc32 checksum on the data.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:133,Security,checksum,checksum,133,"/* These basic checks suggest that the data has not been; * modified, but if the check level is more than 1 perform; * our own crc32 checksum on the data.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:207,Availability,error,error,207,"/* These profiles are known to have bad data that may cause; * problems if they are used, therefore attempt to; * discourage their use, skip the 'have_md5' warning below,; * which is made irrelevant by this error.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:49,Availability,error,error,49,"/* Warn that this being done; this isn't even an error since; * the profile is perfectly valid, but it would be nice if; * people used the up-to-date ones.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:106,Availability,error,error,106,"/* The signature matched, but the profile had been changed in some; * way. This probably indicates a data error or uninformed hacking.; * Fall through to ""no match"".; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3,Availability,Failure,Failure,3,/* Failure case */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:25,Availability,error,error,25,/* Check for an internal error. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:100,Performance,perform,perform,100,"/* The size of the row must be within the limits of this architecture.; * Because the read code can perform arbitrary transformations the; * maximum size is checked here. Because the code in png_read_start_row; * adds extra space ""for safety's sake"" in several places a conservative; * limit is used here.; *; * NOTE: it would be far better to check the size that is actually used,; * but the effect in the real world is minor and the changes are more; * extensive, therefore much more dangerous and much more difficult to; * write in a way that avoids compiler warnings.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:235,Safety,safe,safety,235,"/* The size of the row must be within the limits of this architecture.; * Because the read code can perform arbitrary transformations the; * maximum size is checked here. Because the code in png_read_start_row; * adds extra space ""for safety's sake"" in several places a conservative; * limit is used here.; *; * NOTE: it would be far better to check the size that is actually used,; * but the effect in the real world is minor and the changes are more; * extensive, therefore much more dangerous and much more difficult to; * write in a way that avoids compiler warnings.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:546,Safety,avoid,avoids,546,"/* The size of the row must be within the limits of this architecture.; * Because the read code can perform arbitrary transformations the; * maximum size is checked here. Because the code in png_read_start_row; * adds extra space ""for safety's sake"" in several places a conservative; * limit is used here.; *; * NOTE: it would be far better to check the size that is actually used,; * but the effect in the real world is minor and the changes are more; * extensive, therefore much more dangerous and much more difficult to; * write in a way that avoids compiler warnings.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:322,Availability,mask,mask,322,/* Accept filter_method 64 (intrapixel differencing) only if; * 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and; * 2. Libpng did not read a PNG signature (this filter_method is only; * used in PNG datastreams that are embedded in MNG datastreams) and; * 3. The application called png_permit_mng_features with a mask that; * included PNG_FLAG_MNG_FILTER_64 and; * 4. The filter_method is 64 and; * 5. The color_type is RGB or RGBA; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:20,Deployability,update,update,20,"/* Here at the end, update the state and return the correct; * return code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:42,Energy Efficiency,power,power,42,/* Utility used below - a simple accurate power of ten from an integral; * exponent.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:26,Usability,simpl,simple,26,/* Utility used below - a simple accurate power of ten from an integral; * exponent.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:13,Energy Efficiency,power,power,13,/* Decompose power bitwise. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:8,Energy Efficiency,power,power,8,/* else power is 0 and d is 1 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:174,Testability,test,tests,174,"/* We use standard functions from math.h, but not printf because; * that would require stdio. The caller must supply a buffer of; * sufficient size or we will png_error. The tests on size and; * the space in ascii[] consumed are indicated below.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:9,Safety,sanity check,sanity checks,9,/* Basic sanity checks */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:101,Availability,down,down,101,"/* 10^exp_b10 */; /* First extract a base 10 exponent of the number,; * the calculation below rounds down when converting; * from base 2 to base 10 (multiply by log10(2) -; * 0.3010, but 77/256 is 0.3008, so exp_b10 needs to; * be increased. Note that the arithmetic shift; * performs a floor() unlike C arithmetic - using a; * C multiply would break the following for negative; * exponents.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:276,Performance,perform,performs,276,"/* 10^exp_b10 */; /* First extract a base 10 exponent of the number,; * the calculation below rounds down when converting; * from base 2 to base 10 (multiply by log10(2) -; * 0.3010, but 77/256 is 0.3008, so exp_b10 needs to; * be increased. Note that the arithmetic shift; * performs a floor() unlike C arithmetic - using a; * C multiply would break the following for negative; * exponents.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:33,Safety,Avoid,Avoid,33,/* <= exponent to base 10 */; /* Avoid underflow here. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:298,Testability,test,test,298,"/* Normalize fp and correct exp_b10, after this fp is in the; * range [.1,1) and exp_b10 is both the exponent and the digit; * *before* which the decimal point should be inserted; * (starting with 0 for the first digit). Note that this; * works even if 10^exp_b10 is out of range because of the; * test on DBL_MAX above.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:182,Performance,optimiz,optimization,182,/* 'E': PLUS 1 TOTAL 2+precision */; /* The following use of an unsigned temporary avoids ambiguities in; * the signed arithmetic on exp_b10 and permits GCC at least to do; * better optimization.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:83,Safety,avoid,avoids,83,/* 'E': PLUS 1 TOTAL 2+precision */; /* The following use of an unsigned temporary avoids ambiguities in; * the signed arithmetic on exp_b10 and permits GCC at least to do; * better optimization.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3,Safety,Avoid,Avoid,3,/* Avoid overflow here on the minimum integer. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:49,Performance,optimiz,optimized,49,"/* It is not obvious which comparison below gets optimized in such a way that; * signed overflow would change the result; looking through the code does not; * reveal any tests which have the form GCC complains about, so presumably the; * optimizer is moving an add or subtract into the 'if' somewhere.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:238,Performance,optimiz,optimizer,238,"/* It is not obvious which comparison below gets optimized in such a way that; * signed overflow would change the result; looking through the code does not; * reveal any tests which have the form GCC complains about, so presumably the; * optimizer is moving an add or subtract into the 'if' somewhere.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:170,Testability,test,tests,170,"/* It is not obvious which comparison below gets optimized in such a way that; * signed overflow would change the result; looking through the code does not; * reveal any tests which have the form GCC complains about, so presumably the; * optimizer is moving an add or subtract into the 'if' somewhere.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3,Availability,error,error,3,/* error/overflow */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:22,Testability,test,test,22,/* This is the shared test on whether a gamma value is 'significant' - whether; * it is worth doing gamma correction.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:23,Integrability,rout,routine,23,/* A local convenience routine. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:185,Testability,log,log,185,"/* Fixed point gamma.; *; * The code to calculate the tables used below can be found in the shell script; * contrib/tools/intgamma.sh; *; * To calculate gamma this code implements fast log() and exp() calls using only; * fixed point arithmetic. This code has sufficient precision for either 8-bit; * or 16-bit sample values.; *; * The tables used here were calculated using simple 'bc' programs, but C double; * precision floating point arithmetic would work fine.; *; * 8-bit log table; * This is a table of -log(value/255)/log(2) for 'value' in the range 128 to; * 255, so it's the base 2 logarithm of a normalized 8-bit floating point; * mantissa. The numbers are 32-bit fractions.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:477,Testability,log,log,477,"/* Fixed point gamma.; *; * The code to calculate the tables used below can be found in the shell script; * contrib/tools/intgamma.sh; *; * To calculate gamma this code implements fast log() and exp() calls using only; * fixed point arithmetic. This code has sufficient precision for either 8-bit; * or 16-bit sample values.; *; * The tables used here were calculated using simple 'bc' programs, but C double; * precision floating point arithmetic would work fine.; *; * 8-bit log table; * This is a table of -log(value/255)/log(2) for 'value' in the range 128 to; * 255, so it's the base 2 logarithm of a normalized 8-bit floating point; * mantissa. The numbers are 32-bit fractions.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:510,Testability,log,log,510,"/* Fixed point gamma.; *; * The code to calculate the tables used below can be found in the shell script; * contrib/tools/intgamma.sh; *; * To calculate gamma this code implements fast log() and exp() calls using only; * fixed point arithmetic. This code has sufficient precision for either 8-bit; * or 16-bit sample values.; *; * The tables used here were calculated using simple 'bc' programs, but C double; * precision floating point arithmetic would work fine.; *; * 8-bit log table; * This is a table of -log(value/255)/log(2) for 'value' in the range 128 to; * 255, so it's the base 2 logarithm of a normalized 8-bit floating point; * mantissa. The numbers are 32-bit fractions.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:525,Testability,log,log,525,"/* Fixed point gamma.; *; * The code to calculate the tables used below can be found in the shell script; * contrib/tools/intgamma.sh; *; * To calculate gamma this code implements fast log() and exp() calls using only; * fixed point arithmetic. This code has sufficient precision for either 8-bit; * or 16-bit sample values.; *; * The tables used here were calculated using simple 'bc' programs, but C double; * precision floating point arithmetic would work fine.; *; * 8-bit log table; * This is a table of -log(value/255)/log(2) for 'value' in the range 128 to; * 255, so it's the base 2 logarithm of a normalized 8-bit floating point; * mantissa. The numbers are 32-bit fractions.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:591,Testability,log,logarithm,591,"/* Fixed point gamma.; *; * The code to calculate the tables used below can be found in the shell script; * contrib/tools/intgamma.sh; *; * To calculate gamma this code implements fast log() and exp() calls using only; * fixed point arithmetic. This code has sufficient precision for either 8-bit; * or 16-bit sample values.; *; * The tables used here were calculated using simple 'bc' programs, but C double; * precision floating point arithmetic would work fine.; *; * 8-bit log table; * This is a table of -log(value/255)/log(2) for 'value' in the range 128 to; * 255, so it's the base 2 logarithm of a normalized 8-bit floating point; * mantissa. The numbers are 32-bit fractions.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:374,Usability,simpl,simple,374,"/* Fixed point gamma.; *; * The code to calculate the tables used below can be found in the shell script; * contrib/tools/intgamma.sh; *; * To calculate gamma this code implements fast log() and exp() calls using only; * fixed point arithmetic. This code has sufficient precision for either 8-bit; * or 16-bit sample values.; *; * The tables used here were calculated using simple 'bc' programs, but C double; * precision floating point arithmetic would work fine.; *; * 8-bit log table; * This is a table of -log(value/255)/log(2) for 'value' in the range 128 to; * 255, so it's the base 2 logarithm of a normalized 8-bit floating point; * mantissa. The numbers are 32-bit fractions.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:130,Availability,error,errors,130,/* The following are the values for 16-bit tables - these work fine for the; * 8-bit conversions but produce very slightly larger errors in the 16-bit; * log (about 1.2 as opposed to 0.7 absolute error in the final value). To; * use these all the shifts below must be adjusted appropriately.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:196,Availability,error,error,196,/* The following are the values for 16-bit tables - these work fine for the; * 8-bit conversions but produce very slightly larger errors in the 16-bit; * log (about 1.2 as opposed to 0.7 absolute error in the final value). To; * use these all the shifts below must be adjusted appropriately.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:154,Testability,log,log,154,/* The following are the values for 16-bit tables - these work fine for the; * 8-bit conversions but produce very slightly larger errors in the 16-bit; * log (about 1.2 as opposed to 0.7 absolute error in the final value). To; * use these all the shifts below must be adjusted appropriately.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:72,Testability,log,log,72,"/* Each time 'x' is multiplied by 2, 1 must be subtracted off the final log,; * because the log is actually negate that means adding 1. The final; * returned value thus has the range 0 (for 255 input) to 7.994 (for 1; * input), return -1 for the overflow (log 0) case, - so the result is; * always at most 19 bits.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:92,Testability,log,log,92,"/* Each time 'x' is multiplied by 2, 1 must be subtracted off the final log,; * because the log is actually negate that means adding 1. The final; * returned value thus has the range 0 (for 255 input) to 7.994 (for 1; * input), return -1 for the overflow (log 0) case, - so the result is; * always at most 19 bits.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:256,Testability,log,log,256,"/* Each time 'x' is multiplied by 2, 1 must be subtracted off the final log,; * because the log is actually negate that means adding 1. The final; * returned value thus has the range 0 (for 255 input) to 7.994 (for 1; * input), return -1 for the overflow (log 0) case, - so the result is; * always at most 19 bits.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:46,Safety,safe,safe,46,"/* result is at most 19 bits, so this cast is safe: */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:972,Usability,simpl,simple,972,"/* The above gives exact (to 16 binary places) log2 values for 8-bit images,; * for 16-bit images we use the most significant 8 bits of the 16-bit value to; * get an approximation then multiply the approximation by a correction factor; * determined by the remaining up to 8 bits. This requires an additional step; * in the 16-bit case.; *; * We want log2(value/65535), we have log2(v'/255), where:; *; * value = v' * 256 + v''; * = v' * f; *; * So f is value/v', which is equal to (256+v''/v') since v' is in the range 128; * to 255 and v'' is in the range 0 to 255 f will be in the range 256 to less; * than 258. The final factor also needs to correct for the fact that our 8-bit; * value is scaled by 255, whereas the 16-bit values must be scaled by 65535.; *; * This gives a final formula using a calculated value 'x' which is value/v' and; * scaling by 65536 to match the above table:; *; * log2(x/257) * 65536; *; * Since these numbers are so close to '1' we can use simple linear; * interpolation between the two end values 256/257 (result -368.61) and 258/257; * (result 367.179). The values used below are scaled by a further 64 to give; * 16-bit precision in the interpolation:; *; * Start (256): -23591; * Zero (257): 0; * End (258): 23499; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:22,Testability,log,logarithm,22,/* Calculate the base logarithm from the top 8 bits as a 28-bit fractional; * value.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3,Safety,Safe,Safe,3,"/* Safe, because the result can't have more than 20 bits: */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:87,Testability,log,logarithmic,87,"/* 16BIT */; /* The 'exp()' case must invert the above, taking a 20-bit fixed point; * logarithmic value and returning a 16 or 8-bit number as appropriate. In; * each case only the low 16 bits are relevant - the fraction - since the; * integer bits (the top 4) simply determine a shift.; *; * The worst case is the 16-bit distinction between 65535 and 65534. This; * requires perhaps spurious accuracy in the decoding of the logarithm to; * distinguish log2(65535/65534.5) - 10^-5 or 17 bits. There is little chance; * of getting this accuracy in practice.; *; * To deal with this the following exp() function works out the exponent of the; * fractional part of the logarithm by using an accurate 32-bit value from the; * top four fractional bits then multiplying in the remaining bits.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:425,Testability,log,logarithm,425,"/* 16BIT */; /* The 'exp()' case must invert the above, taking a 20-bit fixed point; * logarithmic value and returning a 16 or 8-bit number as appropriate. In; * each case only the low 16 bits are relevant - the fraction - since the; * integer bits (the top 4) simply determine a shift.; *; * The worst case is the 16-bit distinction between 65535 and 65534. This; * requires perhaps spurious accuracy in the decoding of the logarithm to; * distinguish log2(65535/65534.5) - 10^-5 or 17 bits. There is little chance; * of getting this accuracy in practice.; *; * To deal with this the following exp() function works out the exponent of the; * fractional part of the logarithm by using an accurate 32-bit value from the; * top four fractional bits then multiplying in the remaining bits.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:666,Testability,log,logarithm,666,"/* 16BIT */; /* The 'exp()' case must invert the above, taking a 20-bit fixed point; * logarithmic value and returning a 16 or 8-bit number as appropriate. In; * each case only the low 16 bits are relevant - the fraction - since the; * integer bits (the top 4) simply determine a shift.; *; * The worst case is the 16-bit distinction between 65535 and 65534. This; * requires perhaps spurious accuracy in the decoding of the logarithm to; * distinguish log2(65535/65534.5) - 10^-5 or 17 bits. There is little chance; * of getting this accuracy in practice.; *; * To deal with this the following exp() function works out the exponent of the; * fractional part of the logarithm by using an accurate 32-bit value from the; * top four fractional bits then multiplying in the remaining bits.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:261,Usability,simpl,simply,261,"/* 16BIT */; /* The 'exp()' case must invert the above, taking a 20-bit fixed point; * logarithmic value and returning a 16 or 8-bit number as appropriate. In; * each case only the low 16 bits are relevant - the fraction - since the; * integer bits (the top 4) simply determine a shift.; *; * The worst case is the 16-bit distinction between 65535 and 65534. This; * requires perhaps spurious accuracy in the decoding of the logarithm to; * distinguish log2(65535/65534.5) - 10^-5 or 17 bits. There is little chance; * of getting this accuracy in practice.; *; * To deal with this the following exp() function works out the exponent of the; * fractional part of the logarithm by using an accurate 32-bit value from the; * top four fractional bits then multiplying in the remaining bits.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:959,Integrability,rout,routine,959,"/* 'value' is unsigned, ANSI-C90 requires the compiler to correctly; * convert this to a floating point value. This includes values that; * would overflow if 'value' were to be converted to 'int'.; *; * Apparently GCC, however, does an intermediate conversion to (int); * on some (ARM) but not all (x86) platforms, possibly because of; * hardware FP limitations. (E.g. if the hardware conversion always; * assumes the integer register contains a signed value.) This results; * in ANSI-C undefined behavior for large values.; *; * Other implementations on the same machine might actually be ANSI-C90; * conformant and therefore compile spurious extra code for the large; * values.; *; * We can be reasonably sure that an unsigned to float conversion; * won't be faster than an int to float one. Therefore this code; * assumes responsibility for the undefined behavior, which it knows; * can't happen because of the check above.; *; * Note the argument to this routine is an (unsigned int) because, on; * 16-bit platforms, it is assigned a value which might be out of; * range for an (int); that would result in undefined behavior in the; * caller if the *argument* ('value') were to be declared (int).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:2,Safety,SAFE,SAFE,2,/*SAFE*/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:19,Testability,test,test,19,/* The 'threshold' test is repeated here because it can arise for one of; * the 16-bit tables even if the others don't hit it.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:138,Availability,error,error,138,"/* The old code would overflow at the end and this would cause the; * 'pow' function to return a result >1, resulting in an; * arithmetic error. This code follows the spec exactly; ig is; * the recovered input sample, it always has 8-16 bits.; *; * We want input * 65535/max, rounded, the arithmetic fits in 32; * bits (unsigned) so long as max <= 32767.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:194,Availability,recover,recovered,194,"/* The old code would overflow at the end and this would cause the; * 'pow' function to return a result >1, resulting in an; * arithmetic error. This code follows the spec exactly; ig is; * the recovered input sample, it always has 8-16 bits.; *; * We want input * 65535/max, rounded, the arithmetic fits in 32; * bits (unsigned) so long as max <= 32767.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:194,Safety,recover,recovered,194,"/* The old code would overflow at the end and this would cause the; * 'pow' function to return a result >1, resulting in an; * arithmetic error. This code follows the spec exactly; ig is; * the recovered input sample, it always has 8-16 bits.; *; * We want input * 65535/max, rounded, the arithmetic fits in 32; * bits (unsigned) so long as max <= 32767.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:77,Usability,simpl,simpler,77,/* 16BIT */; /* Build a single 8-bit table: same as the 16-bit case but much simpler (and; * typically much faster). Note that libpng currently does no sBIT processing; * (apparently contrary to the spec) so a 256-entry table is always generated.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:43,Deployability,release,release,43,/* Used from png_read_destroy and below to release the memory used by the gamma; * tables.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:229,Energy Efficiency,allocate,allocate,229,"/* We build the 8- or 16-bit gamma tables here. Note that for 16-bit; * tables, we don't make a full table if we are reducing to 8-bit in; * the future. Note also how the gamma_16 tables are segmented so that; * we don't need to allocate > 64K chunks for a full 16-bit table.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:161,Performance,perform,performance,161,/* Remove any existing table; this copes with multiple calls to; * png_read_update_info. The warning is because building the gamma tables; * multiple times is a performance hit - it's harmless but the ability to; * call png_read_update_info() multiple times is new in 1.5.6 so it seems; * sensible to warn if the app introduces such a hit.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:214,Energy Efficiency,reduce,reduced,214,/* NOTE: prior to 1.5.4 this test used to include PNG_BACKGROUND (now; * PNG_COMPOSE). This effectively smashed the background calculation for; * 16-bit output because the 8-bit table assumes the result will be; * reduced to 8 bits.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:29,Testability,test,test,29,/* NOTE: prior to 1.5.4 this test used to include PNG_BACKGROUND (now; * PNG_COMPOSE). This effectively smashed the background calculation for; * 16-bit output because the 8-bit table assumes the result will be; * reduced to 8 bits.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:491,Availability,error,error,491,"/* sRGB conversion tables; these are machine generated with the code in; * contrib/tools/makesRGB.c. The actual sRGB transfer curve defined in the; * specification (see the article at https://en.wikipedia.org/wiki/SRGB); * is used, not the gamma=1/2.2 approximation use elsewhere in libpng.; * The sRGB to linear table is exact (to the nearest 16-bit linear fraction).; * The inverse (linear to sRGB) table has accuracies as follows:; *; * For all possible (255*65535+1) input values:; *; * error: -0.515566 - 0.625971, 79441 (0.475369%) of readings inexact; *; * For the input values corresponding to the 65536 16-bit values:; *; * error: -0.513727 - 0.607759, 308 (0.469978%) of readings inexact; *; * In all cases the inexact readings are only off by one.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:633,Availability,error,error,633,"/* sRGB conversion tables; these are machine generated with the code in; * contrib/tools/makesRGB.c. The actual sRGB transfer curve defined in the; * specification (see the article at https://en.wikipedia.org/wiki/SRGB); * is used, not the gamma=1/2.2 approximation use elsewhere in libpng.; * The sRGB to linear table is exact (to the nearest 16-bit linear fraction).; * The inverse (linear to sRGB) table has accuracies as follows:; *; * For all possible (255*65535+1) input values:; *; * error: -0.515566 - 0.625971, 79441 (0.475369%) of readings inexact; *; * For the input values corresponding to the 65536 16-bit values:; *; * error: -0.513727 - 0.607759, 308 (0.469978%) of readings inexact; *; * In all cases the inexact readings are only off by one.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:112,Usability,simpl,simplified,112,/* SIMPLIFIED_READ */; /* The base/delta tables are required for both read and write (but currently; * only the simplified versions.); */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3,Usability,SIMPL,SIMPLIFIED,3,/* SIMPLIFIED READ/WRITE sRGB support */; /* SIMPLIFIED READ/WRITE SUPPORT */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:45,Usability,SIMPL,SIMPLIFIED,45,/* SIMPLIFIED READ/WRITE sRGB support */; /* SIMPLIFIED READ/WRITE SUPPORT */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:10,Availability,error,errors,10,/* Ignore errors here. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:52,Energy Efficiency,allocate,allocated,52,"/* Copy the control structure so that the original, allocated, version can be; * safely freed. Notice that a png_error here stops the remainder of the; * cleanup, but this is probably fine because that would indicate bad memory; * problems anyway.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:81,Safety,safe,safely,81,"/* Copy the control structure so that the original, allocated, version can be; * safely freed. Notice that a png_error here stops the remainder of the; * cleanup, but this is probably fine because that would indicate bad memory; * problems anyway.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:98,Availability,error,error,98,"/* Safely call the real function, but only if doing so is safe at this point; * (if not inside an error handling context). Otherwise assume; * png_safe_execute will call this API after the return.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3,Safety,Safe,Safely,3,"/* Safely call the real function, but only if doing so is safe at this point; * (if not inside an error handling context). Otherwise assume; * png_safe_execute will call this API after the return.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:58,Safety,safe,safe,58,"/* Safely call the real function, but only if doing so is safe at this point; * (if not inside an error handling context). Otherwise assume; * png_safe_execute will call this API after the return.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:21,Availability,error,error,21,/* Utility to log an error. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:14,Testability,log,log,14,/* Utility to log an error. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3,Usability,SIMPL,SIMPLIFIED,3,/* SIMPLIFIED READ/WRITE */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3461,Availability,fault,faults,3461,"eference Library License version 1 (for libpng 0.5 through 1.6.35); * -----------------------------------------------------------------------; *; * libpng versions 1.0.7, July 1, 2000, through 1.6.35, July 15, 2018 are; * Copyright (c) 2000-2002, 2004, 2006-2018 Glenn Randers-Pehrson, are; * derived from libpng-1.0.6, and are distributed according to the same; * disclaimer and license as libpng-1.0.6 with the following individuals; * added to the list of Contributing Authors:; *; * Simon-Pierre Cadieux; * Eric S. Raymond; * Mans Rullgard; * Cosmin Truta; * Gilles Vollant; * James Yu; * Mandar Sahastrabuddhe; * Google Inc.; * Vadim Barkov; *; * and with the following additions to the disclaimer:; *; * There is no warranty against interference with your enjoyment of; * the library or against infringement. There is no warranty that our; * efforts or the library will fulfill any of your particular purposes; * or needs. This library is provided with all faults, and the entire; * risk of satisfactory quality, performance, accuracy, and effort is; * with the user.; *; * Some files in the ""contrib"" directory and some configure-generated; * files that are distributed with libpng have other copyright owners, and; * are released under other open source licenses.; *; * libpng versions 0.97, January 1998, through 1.0.6, March 20, 2000, are; * Copyright (c) 1998-2000 Glenn Randers-Pehrson, are derived from; * libpng-0.96, and are distributed according to the same disclaimer and; * license as libpng-0.96, with the following individuals added to the; * list of Contributing Authors:; *; * Tom Lane; * Glenn Randers-Pehrson; * Willem van Schaik; *; * libpng versions 0.89, June 1996, through 0.96, May 1997, are; * Copyright (c) 1996-1997 Andreas Dilger, are derived from libpng-0.88,; * and are distributed according to the same disclaimer and license as; * libpng-0.88, with the following individuals added to the list of; * Contributing Authors:; *; * John Bowler; * Kevin Bracey; * Sam Bu",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:6798,Availability,avail,available,6798,"ted as being the original source.; *; * 3. This Copyright notice may not be removed or altered from any; * source or altered source distribution.; *; * The Contributing Authors and Group 42, Inc. specifically permit,; * without fee, and encourage the use of this source code as a component; * to supporting the PNG file format in commercial products. If you use; * this source code in a product, acknowledgment is not required but would; * be appreciated.; *; * END OF COPYRIGHT NOTICE, DISCLAIMER, and LICENSE.; *; * TRADEMARK; * =========; *; * The name ""libpng"" has not been registered by the Copyright owners; * as a trademark in any jurisdiction. However, because libpng has; * been distributed and maintained world-wide, continually since 1995,; * the Copyright owners claim ""common-law trademark protection"" in any; * jurisdiction where common-law trademark is recognized.; */; /*; * A ""png_get_copyright"" function is available, for convenient use in ""about""; * boxes and the like:; *; * printf(""%s"", png_get_copyright(NULL));; *; * Also, the PNG logo (in PNG format, of course) is supplied in the; * files ""pngbar.png"" and ""pngbar.jpg (88x31) and ""pngnow.png"" (98x31).; */; /*; * The contributing authors would like to thank all those who helped; * with testing, bug fixes, and patience. This wouldn't have been; * possible without all of you.; *; * Thanks to Frank J. T. Wojcik for helping with the documentation.; */; /* Note about libpng version numbers:; *; * Due to various miscommunications, unforeseen code incompatibilities; * and occasional factors outside the authors' control, version numbering; * on the library has not always been consistent and straightforward.; * The following table summarizes matters since version 0.89c, which was; * the first widely used release:; *; * source png.h png.h shared-lib; * version string int version; * ------- ------ ----- ----------; * 0.89c ""1.0 beta 3"" 0.89 89 1.0.89; * 0.90 ""1.0 beta 4"" 0.90 90 0.90 [should have been 2.0.90]; * 0.95 ""1.0",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:9613,Availability,avail,available,9613,".0.4 10004; * 1.0.4a-f 10005; * 1.0.5 (+ 2 patches) 10005; * 1.0.5a-d 10006; * 1.0.5e-r 10100 (not source compatible); * 1.0.5s-v 10006 (not binary compatible); * 1.0.6 (+ 3 patches) 10006 (still binary incompatible); * 1.0.6d-f 10007 (still binary incompatible); * 1.0.6g 10007; * 1.0.6h 10007 10.6h (testing xy.z so-numbering); * 1.0.6i 10007 10.6i; * 1.0.6j 10007 2.1.0.6j (incompatible with 1.0.0); * 1.0.7beta11-14 DLLNUM 10007 2.1.0.7beta11-14 (binary compatible); * 1.0.7beta15-18 1 10007 2.1.0.7beta15-18 (binary compatible); * 1.0.7rc1-2 1 10007 2.1.0.7rc1-2 (binary compatible); * 1.0.7 1 10007 (still compatible); * ...; * 1.0.69 10 10069 10.so.0.69[.0]; * ...; * 1.2.59 13 10259 12.so.0.59[.0]; * ...; * 1.4.20 14 10420 14.so.0.20[.0]; * ...; * 1.5.30 15 10530 15.so.15.30[.0]; * ...; * 1.6.40 16 10640 16.so.16.40[.0]; *; * Henceforth the source version will match the shared-library major and; * minor numbers; the shared-library major version number will be used for; * changes in backward compatibility, as it is intended.; * The PNG_LIBPNG_VER macro, which is not used within libpng but is; * available for applications, is an unsigned integer of the form XYYZZ; * corresponding to the source version X.Y.Z (leading zeros in Y and Z).; * Beta versions were given the previous public release number plus a; * letter, until version 1.0.6j; from then on they were given the upcoming; * public release number plus ""betaNN"" or ""rcNN"".; *; * Binary incompatibility exists only when applications make direct access; * to the info_ptr or png_ptr members through png.h, and the compiled; * application is loaded with a different version of the library.; *; * DLLNUM will change each time there are forward or backward changes; * in binary compatibility (e.g., when a new feature is added).; *; * See libpng.txt or libpng.3 for more information. The PNG specification; * is available as a W3C Recommendation and as an ISO/IEC Standard; see; * <https://www.w3.org/TR/2003/REC-PNG-20031110/>; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:10384,Availability,avail,available,10384,".0.4 10004; * 1.0.4a-f 10005; * 1.0.5 (+ 2 patches) 10005; * 1.0.5a-d 10006; * 1.0.5e-r 10100 (not source compatible); * 1.0.5s-v 10006 (not binary compatible); * 1.0.6 (+ 3 patches) 10006 (still binary incompatible); * 1.0.6d-f 10007 (still binary incompatible); * 1.0.6g 10007; * 1.0.6h 10007 10.6h (testing xy.z so-numbering); * 1.0.6i 10007 10.6i; * 1.0.6j 10007 2.1.0.6j (incompatible with 1.0.0); * 1.0.7beta11-14 DLLNUM 10007 2.1.0.7beta11-14 (binary compatible); * 1.0.7beta15-18 1 10007 2.1.0.7beta15-18 (binary compatible); * 1.0.7rc1-2 1 10007 2.1.0.7rc1-2 (binary compatible); * 1.0.7 1 10007 (still compatible); * ...; * 1.0.69 10 10069 10.so.0.69[.0]; * ...; * 1.2.59 13 10259 12.so.0.59[.0]; * ...; * 1.4.20 14 10420 14.so.0.20[.0]; * ...; * 1.5.30 15 10530 15.so.15.30[.0]; * ...; * 1.6.40 16 10640 16.so.16.40[.0]; *; * Henceforth the source version will match the shared-library major and; * minor numbers; the shared-library major version number will be used for; * changes in backward compatibility, as it is intended.; * The PNG_LIBPNG_VER macro, which is not used within libpng but is; * available for applications, is an unsigned integer of the form XYYZZ; * corresponding to the source version X.Y.Z (leading zeros in Y and Z).; * Beta versions were given the previous public release number plus a; * letter, until version 1.0.6j; from then on they were given the upcoming; * public release number plus ""betaNN"" or ""rcNN"".; *; * Binary incompatibility exists only when applications make direct access; * to the info_ptr or png_ptr members through png.h, and the compiled; * application is loaded with a different version of the library.; *; * DLLNUM will change each time there are forward or backward changes; * in binary compatibility (e.g., when a new feature is added).; *; * See libpng.txt or libpng.3 for more information. The PNG specification; * is available as a W3C Recommendation and as an ISO/IEC Standard; see; * <https://www.w3.org/TR/2003/REC-PNG-20031110/>; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:306,Deployability,release,released,306,"/* png.h - header file for PNG reference library; *; * libpng version 1.6.40; *; * Copyright (c) 2018-2023 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license. (See LICENSE, below.); *; * Authors and maintainers:; * libpng versions 0.71, May 1995, through 0.88, January 1996: Guy Schalnat; * libpng versions 0.89, June 1996, through 0.96, May 1997: Andreas Dilger; * libpng versions 0.97, January 1998, through 1.6.35, July 2018:; * Glenn Randers-Pehrson; * libpng versions 1.6.36, December 2018, through 1.6.40, June 2023:; * Cosmin Truta; * See also ""Contributing Authors"", below.; */; /*; * COPYRIGHT NOTICE, DISCLAIMER, and LICENSE; * =========================================; *; * PNG Reference Library License version 2; * ---------------------------------------; *; * * Copyright (c) 1995-2023 The PNG Reference Library Authors.; * * Copyright (c) 2018-2023 Cosmin Truta.; * * Copyright (c) 2000-2002, 2004, 2006-2018 Glenn Randers-Pehrson.; * * Copyright (c) 1996-1997 Andreas Dilger.; * * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * The software is supplied ""as is"", without warranty of any kind,; * express or implied, including, without limitation, the warranties; * of merchantability, fitness for a particular purpose, title, and; * non-infringement. In no event shall the Copyright owners, or; * anyone distributing the software, be liable for any damages or; * other liability, whether in contract, tort or otherwise, arising; * from, out of, or in connection with the software, or the use or; * other dealings in the software, even if advised of the possibility; * of such damage.; *; * Permission is hereby granted to use, copy, modify, and distribute; * this software, or portions hereof, for any purpose, without fee,; * subject to the following restrictions:; *; * 1. The origin ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3727,Deployability,release,released,3727,"uly 1, 2000, through 1.6.35, July 15, 2018 are; * Copyright (c) 2000-2002, 2004, 2006-2018 Glenn Randers-Pehrson, are; * derived from libpng-1.0.6, and are distributed according to the same; * disclaimer and license as libpng-1.0.6 with the following individuals; * added to the list of Contributing Authors:; *; * Simon-Pierre Cadieux; * Eric S. Raymond; * Mans Rullgard; * Cosmin Truta; * Gilles Vollant; * James Yu; * Mandar Sahastrabuddhe; * Google Inc.; * Vadim Barkov; *; * and with the following additions to the disclaimer:; *; * There is no warranty against interference with your enjoyment of; * the library or against infringement. There is no warranty that our; * efforts or the library will fulfill any of your particular purposes; * or needs. This library is provided with all faults, and the entire; * risk of satisfactory quality, performance, accuracy, and effort is; * with the user.; *; * Some files in the ""contrib"" directory and some configure-generated; * files that are distributed with libpng have other copyright owners, and; * are released under other open source licenses.; *; * libpng versions 0.97, January 1998, through 1.0.6, March 20, 2000, are; * Copyright (c) 1998-2000 Glenn Randers-Pehrson, are derived from; * libpng-0.96, and are distributed according to the same disclaimer and; * license as libpng-0.96, with the following individuals added to the; * list of Contributing Authors:; *; * Tom Lane; * Glenn Randers-Pehrson; * Willem van Schaik; *; * libpng versions 0.89, June 1996, through 0.96, May 1997, are; * Copyright (c) 1996-1997 Andreas Dilger, are derived from libpng-0.88,; * and are distributed according to the same disclaimer and license as; * libpng-0.88, with the following individuals added to the list of; * Contributing Authors:; *; * John Bowler; * Kevin Bracey; * Sam Bushell; * Magnus Holmgren; * Greg Roelofs; * Tom Tanner; *; * Some files in the ""scripts"" directory have other copyright owners,; * but are released under this license.; *;",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:4638,Deployability,release,released,4638,"formance, accuracy, and effort is; * with the user.; *; * Some files in the ""contrib"" directory and some configure-generated; * files that are distributed with libpng have other copyright owners, and; * are released under other open source licenses.; *; * libpng versions 0.97, January 1998, through 1.0.6, March 20, 2000, are; * Copyright (c) 1998-2000 Glenn Randers-Pehrson, are derived from; * libpng-0.96, and are distributed according to the same disclaimer and; * license as libpng-0.96, with the following individuals added to the; * list of Contributing Authors:; *; * Tom Lane; * Glenn Randers-Pehrson; * Willem van Schaik; *; * libpng versions 0.89, June 1996, through 0.96, May 1997, are; * Copyright (c) 1996-1997 Andreas Dilger, are derived from libpng-0.88,; * and are distributed according to the same disclaimer and license as; * libpng-0.88, with the following individuals added to the list of; * Contributing Authors:; *; * John Bowler; * Kevin Bracey; * Sam Bushell; * Magnus Holmgren; * Greg Roelofs; * Tom Tanner; *; * Some files in the ""scripts"" directory have other copyright owners,; * but are released under this license.; *; * libpng versions 0.5, May 1995, through 0.88, January 1996, are; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * For the purposes of this copyright and license, ""Contributing Authors""; * is defined as the following set of individuals:; *; * Andreas Dilger; * Dave Martindale; * Guy Eric Schalnat; * Paul Schmidt; * Tim Wegner; *; * The PNG Reference Library is supplied ""AS IS"". The Contributing; * Authors and Group 42, Inc. disclaim all warranties, expressed or; * implied, including, without limitation, the warranties of; * merchantability and of fitness for any purpose. The Contributing; * Authors and Group 42, Inc. assume no liability for direct, indirect,; * incidental, special, exemplary, or consequential damages, which may; * result from the use of the PNG Reference Library, even if advised of; * the possibility of s",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:7655,Deployability,release,release,7655,"claim ""common-law trademark protection"" in any; * jurisdiction where common-law trademark is recognized.; */; /*; * A ""png_get_copyright"" function is available, for convenient use in ""about""; * boxes and the like:; *; * printf(""%s"", png_get_copyright(NULL));; *; * Also, the PNG logo (in PNG format, of course) is supplied in the; * files ""pngbar.png"" and ""pngbar.jpg (88x31) and ""pngnow.png"" (98x31).; */; /*; * The contributing authors would like to thank all those who helped; * with testing, bug fixes, and patience. This wouldn't have been; * possible without all of you.; *; * Thanks to Frank J. T. Wojcik for helping with the documentation.; */; /* Note about libpng version numbers:; *; * Due to various miscommunications, unforeseen code incompatibilities; * and occasional factors outside the authors' control, version numbering; * on the library has not always been consistent and straightforward.; * The following table summarizes matters since version 0.89c, which was; * the first widely used release:; *; * source png.h png.h shared-lib; * version string int version; * ------- ------ ----- ----------; * 0.89c ""1.0 beta 3"" 0.89 89 1.0.89; * 0.90 ""1.0 beta 4"" 0.90 90 0.90 [should have been 2.0.90]; * 0.95 ""1.0 beta 5"" 0.95 95 0.95 [should have been 2.0.95]; * 0.96 ""1.0 beta 6"" 0.96 96 0.96 [should have been 2.0.96]; * 0.97b ""1.00.97 beta 7"" 1.00.97 97 1.0.1 [should have been 2.0.97]; * 0.97c 0.97 97 2.0.97; * 0.98 0.98 98 2.0.98; * 0.99 0.99 98 2.0.99; * 0.99a-m 0.99 99 2.0.99; * 1.00 1.00 100 2.1.0 [100 should be 10000]; * 1.0.0 (from here on, the 100 2.1.0 [100 should be 10000]; * 1.0.1 png.h string is 10001 2.1.0; * 1.0.1a-e identical to the 10002 from here on, the shared library; * 1.0.2 source version) 10002 is 2.V where V is the source code; * 1.0.2a-b 10003 version, except as noted.; * 1.0.3 10003; * 1.0.3a-d 10004; * 1.0.4 10004; * 1.0.4a-f 10005; * 1.0.5 (+ 2 patches) 10005; * 1.0.5a-d 10006; * 1.0.5e-r 10100 (not source compatible); * 1.0.5s-v 10006 (not bina",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:8546,Deployability,patch,patches,8546,"ard.; * The following table summarizes matters since version 0.89c, which was; * the first widely used release:; *; * source png.h png.h shared-lib; * version string int version; * ------- ------ ----- ----------; * 0.89c ""1.0 beta 3"" 0.89 89 1.0.89; * 0.90 ""1.0 beta 4"" 0.90 90 0.90 [should have been 2.0.90]; * 0.95 ""1.0 beta 5"" 0.95 95 0.95 [should have been 2.0.95]; * 0.96 ""1.0 beta 6"" 0.96 96 0.96 [should have been 2.0.96]; * 0.97b ""1.00.97 beta 7"" 1.00.97 97 1.0.1 [should have been 2.0.97]; * 0.97c 0.97 97 2.0.97; * 0.98 0.98 98 2.0.98; * 0.99 0.99 98 2.0.99; * 0.99a-m 0.99 99 2.0.99; * 1.00 1.00 100 2.1.0 [100 should be 10000]; * 1.0.0 (from here on, the 100 2.1.0 [100 should be 10000]; * 1.0.1 png.h string is 10001 2.1.0; * 1.0.1a-e identical to the 10002 from here on, the shared library; * 1.0.2 source version) 10002 is 2.V where V is the source code; * 1.0.2a-b 10003 version, except as noted.; * 1.0.3 10003; * 1.0.3a-d 10004; * 1.0.4 10004; * 1.0.4a-f 10005; * 1.0.5 (+ 2 patches) 10005; * 1.0.5a-d 10006; * 1.0.5e-r 10100 (not source compatible); * 1.0.5s-v 10006 (not binary compatible); * 1.0.6 (+ 3 patches) 10006 (still binary incompatible); * 1.0.6d-f 10007 (still binary incompatible); * 1.0.6g 10007; * 1.0.6h 10007 10.6h (testing xy.z so-numbering); * 1.0.6i 10007 10.6i; * 1.0.6j 10007 2.1.0.6j (incompatible with 1.0.0); * 1.0.7beta11-14 DLLNUM 10007 2.1.0.7beta11-14 (binary compatible); * 1.0.7beta15-18 1 10007 2.1.0.7beta15-18 (binary compatible); * 1.0.7rc1-2 1 10007 2.1.0.7rc1-2 (binary compatible); * 1.0.7 1 10007 (still compatible); * ...; * 1.0.69 10 10069 10.so.0.69[.0]; * ...; * 1.2.59 13 10259 12.so.0.59[.0]; * ...; * 1.4.20 14 10420 14.so.0.20[.0]; * ...; * 1.5.30 15 10530 15.so.15.30[.0]; * ...; * 1.6.40 16 10640 16.so.16.40[.0]; *; * Henceforth the source version will match the shared-library major and; * minor numbers; the shared-library major version number will be used for; * changes in backward compatibility, as it is intended.; * The PNG_",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:8677,Deployability,patch,patches,8677,"ib; * version string int version; * ------- ------ ----- ----------; * 0.89c ""1.0 beta 3"" 0.89 89 1.0.89; * 0.90 ""1.0 beta 4"" 0.90 90 0.90 [should have been 2.0.90]; * 0.95 ""1.0 beta 5"" 0.95 95 0.95 [should have been 2.0.95]; * 0.96 ""1.0 beta 6"" 0.96 96 0.96 [should have been 2.0.96]; * 0.97b ""1.00.97 beta 7"" 1.00.97 97 1.0.1 [should have been 2.0.97]; * 0.97c 0.97 97 2.0.97; * 0.98 0.98 98 2.0.98; * 0.99 0.99 98 2.0.99; * 0.99a-m 0.99 99 2.0.99; * 1.00 1.00 100 2.1.0 [100 should be 10000]; * 1.0.0 (from here on, the 100 2.1.0 [100 should be 10000]; * 1.0.1 png.h string is 10001 2.1.0; * 1.0.1a-e identical to the 10002 from here on, the shared library; * 1.0.2 source version) 10002 is 2.V where V is the source code; * 1.0.2a-b 10003 version, except as noted.; * 1.0.3 10003; * 1.0.3a-d 10004; * 1.0.4 10004; * 1.0.4a-f 10005; * 1.0.5 (+ 2 patches) 10005; * 1.0.5a-d 10006; * 1.0.5e-r 10100 (not source compatible); * 1.0.5s-v 10006 (not binary compatible); * 1.0.6 (+ 3 patches) 10006 (still binary incompatible); * 1.0.6d-f 10007 (still binary incompatible); * 1.0.6g 10007; * 1.0.6h 10007 10.6h (testing xy.z so-numbering); * 1.0.6i 10007 10.6i; * 1.0.6j 10007 2.1.0.6j (incompatible with 1.0.0); * 1.0.7beta11-14 DLLNUM 10007 2.1.0.7beta11-14 (binary compatible); * 1.0.7beta15-18 1 10007 2.1.0.7beta15-18 (binary compatible); * 1.0.7rc1-2 1 10007 2.1.0.7rc1-2 (binary compatible); * 1.0.7 1 10007 (still compatible); * ...; * 1.0.69 10 10069 10.so.0.69[.0]; * ...; * 1.2.59 13 10259 12.so.0.59[.0]; * ...; * 1.4.20 14 10420 14.so.0.20[.0]; * ...; * 1.5.30 15 10530 15.so.15.30[.0]; * ...; * 1.6.40 16 10640 16.so.16.40[.0]; *; * Henceforth the source version will match the shared-library major and; * minor numbers; the shared-library major version number will be used for; * changes in backward compatibility, as it is intended.; * The PNG_LIBPNG_VER macro, which is not used within libpng but is; * available for applications, is an unsigned integer of the form XYYZZ; * corresponding",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:9803,Deployability,release,release,9803,".0.4 10004; * 1.0.4a-f 10005; * 1.0.5 (+ 2 patches) 10005; * 1.0.5a-d 10006; * 1.0.5e-r 10100 (not source compatible); * 1.0.5s-v 10006 (not binary compatible); * 1.0.6 (+ 3 patches) 10006 (still binary incompatible); * 1.0.6d-f 10007 (still binary incompatible); * 1.0.6g 10007; * 1.0.6h 10007 10.6h (testing xy.z so-numbering); * 1.0.6i 10007 10.6i; * 1.0.6j 10007 2.1.0.6j (incompatible with 1.0.0); * 1.0.7beta11-14 DLLNUM 10007 2.1.0.7beta11-14 (binary compatible); * 1.0.7beta15-18 1 10007 2.1.0.7beta15-18 (binary compatible); * 1.0.7rc1-2 1 10007 2.1.0.7rc1-2 (binary compatible); * 1.0.7 1 10007 (still compatible); * ...; * 1.0.69 10 10069 10.so.0.69[.0]; * ...; * 1.2.59 13 10259 12.so.0.59[.0]; * ...; * 1.4.20 14 10420 14.so.0.20[.0]; * ...; * 1.5.30 15 10530 15.so.15.30[.0]; * ...; * 1.6.40 16 10640 16.so.16.40[.0]; *; * Henceforth the source version will match the shared-library major and; * minor numbers; the shared-library major version number will be used for; * changes in backward compatibility, as it is intended.; * The PNG_LIBPNG_VER macro, which is not used within libpng but is; * available for applications, is an unsigned integer of the form XYYZZ; * corresponding to the source version X.Y.Z (leading zeros in Y and Z).; * Beta versions were given the previous public release number plus a; * letter, until version 1.0.6j; from then on they were given the upcoming; * public release number plus ""betaNN"" or ""rcNN"".; *; * Binary incompatibility exists only when applications make direct access; * to the info_ptr or png_ptr members through png.h, and the compiled; * application is loaded with a different version of the library.; *; * DLLNUM will change each time there are forward or backward changes; * in binary compatibility (e.g., when a new feature is added).; *; * See libpng.txt or libpng.3 for more information. The PNG specification; * is available as a W3C Recommendation and as an ISO/IEC Standard; see; * <https://www.w3.org/TR/2003/REC-PNG-20031110/>; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:9910,Deployability,release,release,9910,".0.4 10004; * 1.0.4a-f 10005; * 1.0.5 (+ 2 patches) 10005; * 1.0.5a-d 10006; * 1.0.5e-r 10100 (not source compatible); * 1.0.5s-v 10006 (not binary compatible); * 1.0.6 (+ 3 patches) 10006 (still binary incompatible); * 1.0.6d-f 10007 (still binary incompatible); * 1.0.6g 10007; * 1.0.6h 10007 10.6h (testing xy.z so-numbering); * 1.0.6i 10007 10.6i; * 1.0.6j 10007 2.1.0.6j (incompatible with 1.0.0); * 1.0.7beta11-14 DLLNUM 10007 2.1.0.7beta11-14 (binary compatible); * 1.0.7beta15-18 1 10007 2.1.0.7beta15-18 (binary compatible); * 1.0.7rc1-2 1 10007 2.1.0.7rc1-2 (binary compatible); * 1.0.7 1 10007 (still compatible); * ...; * 1.0.69 10 10069 10.so.0.69[.0]; * ...; * 1.2.59 13 10259 12.so.0.59[.0]; * ...; * 1.4.20 14 10420 14.so.0.20[.0]; * ...; * 1.5.30 15 10530 15.so.15.30[.0]; * ...; * 1.6.40 16 10640 16.so.16.40[.0]; *; * Henceforth the source version will match the shared-library major and; * minor numbers; the shared-library major version number will be used for; * changes in backward compatibility, as it is intended.; * The PNG_LIBPNG_VER macro, which is not used within libpng but is; * available for applications, is an unsigned integer of the form XYYZZ; * corresponding to the source version X.Y.Z (leading zeros in Y and Z).; * Beta versions were given the previous public release number plus a; * letter, until version 1.0.6j; from then on they were given the upcoming; * public release number plus ""betaNN"" or ""rcNN"".; *; * Binary incompatibility exists only when applications make direct access; * to the info_ptr or png_ptr members through png.h, and the compiled; * application is loaded with a different version of the library.; *; * DLLNUM will change each time there are forward or backward changes; * in binary compatibility (e.g., when a new feature is added).; *; * See libpng.txt or libpng.3 for more information. The PNG specification; * is available as a W3C Recommendation and as an ISO/IEC Standard; see; * <https://www.w3.org/TR/2003/REC-PNG-20031110/>; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1606,Integrability,contract,contract,1606,"rson; * libpng versions 1.6.36, December 2018, through 1.6.40, June 2023:; * Cosmin Truta; * See also ""Contributing Authors"", below.; */; /*; * COPYRIGHT NOTICE, DISCLAIMER, and LICENSE; * =========================================; *; * PNG Reference Library License version 2; * ---------------------------------------; *; * * Copyright (c) 1995-2023 The PNG Reference Library Authors.; * * Copyright (c) 2018-2023 Cosmin Truta.; * * Copyright (c) 2000-2002, 2004, 2006-2018 Glenn Randers-Pehrson.; * * Copyright (c) 1996-1997 Andreas Dilger.; * * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * The software is supplied ""as is"", without warranty of any kind,; * express or implied, including, without limitation, the warranties; * of merchantability, fitness for a particular purpose, title, and; * non-infringement. In no event shall the Copyright owners, or; * anyone distributing the software, be liable for any damages or; * other liability, whether in contract, tort or otherwise, arising; * from, out of, or in connection with the software, or the use or; * other dealings in the software, even if advised of the possibility; * of such damage.; *; * Permission is hereby granted to use, copy, modify, and distribute; * this software, or portions hereof, for any purpose, without fee,; * subject to the following restrictions:; *; * 1. The origin of this software must not be misrepresented; you; * must not claim that you wrote the original software. If you; * use this software in a product, an acknowledgment in the product; * documentation would be appreciated, but is not required.; *; * 2. Altered source versions must be plainly marked as such, and must; * not be misrepresented as being the original software.; *; * 3. This Copyright notice may not be removed or altered from any; * source or altered source distribution.; *; *; * PNG Reference Library License version 1 (for libpng 0.5 through 1.6.35); * ----------------------------------------------------------------",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3625,Modifiability,config,configure-generated,3625,"uly 1, 2000, through 1.6.35, July 15, 2018 are; * Copyright (c) 2000-2002, 2004, 2006-2018 Glenn Randers-Pehrson, are; * derived from libpng-1.0.6, and are distributed according to the same; * disclaimer and license as libpng-1.0.6 with the following individuals; * added to the list of Contributing Authors:; *; * Simon-Pierre Cadieux; * Eric S. Raymond; * Mans Rullgard; * Cosmin Truta; * Gilles Vollant; * James Yu; * Mandar Sahastrabuddhe; * Google Inc.; * Vadim Barkov; *; * and with the following additions to the disclaimer:; *; * There is no warranty against interference with your enjoyment of; * the library or against infringement. There is no warranty that our; * efforts or the library will fulfill any of your particular purposes; * or needs. This library is provided with all faults, and the entire; * risk of satisfactory quality, performance, accuracy, and effort is; * with the user.; *; * Some files in the ""contrib"" directory and some configure-generated; * files that are distributed with libpng have other copyright owners, and; * are released under other open source licenses.; *; * libpng versions 0.97, January 1998, through 1.0.6, March 20, 2000, are; * Copyright (c) 1998-2000 Glenn Randers-Pehrson, are derived from; * libpng-0.96, and are distributed according to the same disclaimer and; * license as libpng-0.96, with the following individuals added to the; * list of Contributing Authors:; *; * Tom Lane; * Glenn Randers-Pehrson; * Willem van Schaik; *; * libpng versions 0.89, June 1996, through 0.96, May 1997, are; * Copyright (c) 1996-1997 Andreas Dilger, are derived from libpng-0.88,; * and are distributed according to the same disclaimer and license as; * libpng-0.88, with the following individuals added to the list of; * Contributing Authors:; *; * John Bowler; * Kevin Bracey; * Sam Bushell; * Magnus Holmgren; * Greg Roelofs; * Tom Tanner; *; * Some files in the ""scripts"" directory have other copyright owners,; * but are released under this license.; *;",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3517,Performance,perform,performance,3517,"eference Library License version 1 (for libpng 0.5 through 1.6.35); * -----------------------------------------------------------------------; *; * libpng versions 1.0.7, July 1, 2000, through 1.6.35, July 15, 2018 are; * Copyright (c) 2000-2002, 2004, 2006-2018 Glenn Randers-Pehrson, are; * derived from libpng-1.0.6, and are distributed according to the same; * disclaimer and license as libpng-1.0.6 with the following individuals; * added to the list of Contributing Authors:; *; * Simon-Pierre Cadieux; * Eric S. Raymond; * Mans Rullgard; * Cosmin Truta; * Gilles Vollant; * James Yu; * Mandar Sahastrabuddhe; * Google Inc.; * Vadim Barkov; *; * and with the following additions to the disclaimer:; *; * There is no warranty against interference with your enjoyment of; * the library or against infringement. There is no warranty that our; * efforts or the library will fulfill any of your particular purposes; * or needs. This library is provided with all faults, and the entire; * risk of satisfactory quality, performance, accuracy, and effort is; * with the user.; *; * Some files in the ""contrib"" directory and some configure-generated; * files that are distributed with libpng have other copyright owners, and; * are released under other open source licenses.; *; * libpng versions 0.97, January 1998, through 1.0.6, March 20, 2000, are; * Copyright (c) 1998-2000 Glenn Randers-Pehrson, are derived from; * libpng-0.96, and are distributed according to the same disclaimer and; * license as libpng-0.96, with the following individuals added to the; * list of Contributing Authors:; *; * Tom Lane; * Glenn Randers-Pehrson; * Willem van Schaik; *; * libpng versions 0.89, June 1996, through 0.96, May 1997, are; * Copyright (c) 1996-1997 Andreas Dilger, are derived from libpng-0.88,; * and are distributed according to the same disclaimer and license as; * libpng-0.88, with the following individuals added to the list of; * Contributing Authors:; *; * John Bowler; * Kevin Bracey; * Sam Bu",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:10116,Performance,load,loaded,10116,".0.4 10004; * 1.0.4a-f 10005; * 1.0.5 (+ 2 patches) 10005; * 1.0.5a-d 10006; * 1.0.5e-r 10100 (not source compatible); * 1.0.5s-v 10006 (not binary compatible); * 1.0.6 (+ 3 patches) 10006 (still binary incompatible); * 1.0.6d-f 10007 (still binary incompatible); * 1.0.6g 10007; * 1.0.6h 10007 10.6h (testing xy.z so-numbering); * 1.0.6i 10007 10.6i; * 1.0.6j 10007 2.1.0.6j (incompatible with 1.0.0); * 1.0.7beta11-14 DLLNUM 10007 2.1.0.7beta11-14 (binary compatible); * 1.0.7beta15-18 1 10007 2.1.0.7beta15-18 (binary compatible); * 1.0.7rc1-2 1 10007 2.1.0.7rc1-2 (binary compatible); * 1.0.7 1 10007 (still compatible); * ...; * 1.0.69 10 10069 10.so.0.69[.0]; * ...; * 1.2.59 13 10259 12.so.0.59[.0]; * ...; * 1.4.20 14 10420 14.so.0.20[.0]; * ...; * 1.5.30 15 10530 15.so.15.30[.0]; * ...; * 1.6.40 16 10640 16.so.16.40[.0]; *; * Henceforth the source version will match the shared-library major and; * minor numbers; the shared-library major version number will be used for; * changes in backward compatibility, as it is intended.; * The PNG_LIBPNG_VER macro, which is not used within libpng but is; * available for applications, is an unsigned integer of the form XYYZZ; * corresponding to the source version X.Y.Z (leading zeros in Y and Z).; * Beta versions were given the previous public release number plus a; * letter, until version 1.0.6j; from then on they were given the upcoming; * public release number plus ""betaNN"" or ""rcNN"".; *; * Binary incompatibility exists only when applications make direct access; * to the info_ptr or png_ptr members through png.h, and the compiled; * application is loaded with a different version of the library.; *; * DLLNUM will change each time there are forward or backward changes; * in binary compatibility (e.g., when a new feature is added).; *; * See libpng.txt or libpng.3 for more information. The PNG specification; * is available as a W3C Recommendation and as an ISO/IEC Standard; see; * <https://www.w3.org/TR/2003/REC-PNG-20031110/>; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3487,Safety,risk,risk,3487,"eference Library License version 1 (for libpng 0.5 through 1.6.35); * -----------------------------------------------------------------------; *; * libpng versions 1.0.7, July 1, 2000, through 1.6.35, July 15, 2018 are; * Copyright (c) 2000-2002, 2004, 2006-2018 Glenn Randers-Pehrson, are; * derived from libpng-1.0.6, and are distributed according to the same; * disclaimer and license as libpng-1.0.6 with the following individuals; * added to the list of Contributing Authors:; *; * Simon-Pierre Cadieux; * Eric S. Raymond; * Mans Rullgard; * Cosmin Truta; * Gilles Vollant; * James Yu; * Mandar Sahastrabuddhe; * Google Inc.; * Vadim Barkov; *; * and with the following additions to the disclaimer:; *; * There is no warranty against interference with your enjoyment of; * the library or against infringement. There is no warranty that our; * efforts or the library will fulfill any of your particular purposes; * or needs. This library is provided with all faults, and the entire; * risk of satisfactory quality, performance, accuracy, and effort is; * with the user.; *; * Some files in the ""contrib"" directory and some configure-generated; * files that are distributed with libpng have other copyright owners, and; * are released under other open source licenses.; *; * libpng versions 0.97, January 1998, through 1.0.6, March 20, 2000, are; * Copyright (c) 1998-2000 Glenn Randers-Pehrson, are derived from; * libpng-0.96, and are distributed according to the same disclaimer and; * license as libpng-0.96, with the following individuals added to the; * list of Contributing Authors:; *; * Tom Lane; * Glenn Randers-Pehrson; * Willem van Schaik; *; * libpng versions 0.89, June 1996, through 0.96, May 1997, are; * Copyright (c) 1996-1997 Andreas Dilger, are derived from libpng-0.88,; * and are distributed according to the same disclaimer and license as; * libpng-0.88, with the following individuals added to the list of; * Contributing Authors:; *; * John Bowler; * Kevin Bracey; * Sam Bu",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:10021,Security,access,access,10021,".0.4 10004; * 1.0.4a-f 10005; * 1.0.5 (+ 2 patches) 10005; * 1.0.5a-d 10006; * 1.0.5e-r 10100 (not source compatible); * 1.0.5s-v 10006 (not binary compatible); * 1.0.6 (+ 3 patches) 10006 (still binary incompatible); * 1.0.6d-f 10007 (still binary incompatible); * 1.0.6g 10007; * 1.0.6h 10007 10.6h (testing xy.z so-numbering); * 1.0.6i 10007 10.6i; * 1.0.6j 10007 2.1.0.6j (incompatible with 1.0.0); * 1.0.7beta11-14 DLLNUM 10007 2.1.0.7beta11-14 (binary compatible); * 1.0.7beta15-18 1 10007 2.1.0.7beta15-18 (binary compatible); * 1.0.7rc1-2 1 10007 2.1.0.7rc1-2 (binary compatible); * 1.0.7 1 10007 (still compatible); * ...; * 1.0.69 10 10069 10.so.0.69[.0]; * ...; * 1.2.59 13 10259 12.so.0.59[.0]; * ...; * 1.4.20 14 10420 14.so.0.20[.0]; * ...; * 1.5.30 15 10530 15.so.15.30[.0]; * ...; * 1.6.40 16 10640 16.so.16.40[.0]; *; * Henceforth the source version will match the shared-library major and; * minor numbers; the shared-library major version number will be used for; * changes in backward compatibility, as it is intended.; * The PNG_LIBPNG_VER macro, which is not used within libpng but is; * available for applications, is an unsigned integer of the form XYYZZ; * corresponding to the source version X.Y.Z (leading zeros in Y and Z).; * Beta versions were given the previous public release number plus a; * letter, until version 1.0.6j; from then on they were given the upcoming; * public release number plus ""betaNN"" or ""rcNN"".; *; * Binary incompatibility exists only when applications make direct access; * to the info_ptr or png_ptr members through png.h, and the compiled; * application is loaded with a different version of the library.; *; * DLLNUM will change each time there are forward or backward changes; * in binary compatibility (e.g., when a new feature is added).; *; * See libpng.txt or libpng.3 for more information. The PNG specification; * is available as a W3C Recommendation and as an ISO/IEC Standard; see; * <https://www.w3.org/TR/2003/REC-PNG-20031110/>; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:6927,Testability,log,logo,6927,"ted as being the original source.; *; * 3. This Copyright notice may not be removed or altered from any; * source or altered source distribution.; *; * The Contributing Authors and Group 42, Inc. specifically permit,; * without fee, and encourage the use of this source code as a component; * to supporting the PNG file format in commercial products. If you use; * this source code in a product, acknowledgment is not required but would; * be appreciated.; *; * END OF COPYRIGHT NOTICE, DISCLAIMER, and LICENSE.; *; * TRADEMARK; * =========; *; * The name ""libpng"" has not been registered by the Copyright owners; * as a trademark in any jurisdiction. However, because libpng has; * been distributed and maintained world-wide, continually since 1995,; * the Copyright owners claim ""common-law trademark protection"" in any; * jurisdiction where common-law trademark is recognized.; */; /*; * A ""png_get_copyright"" function is available, for convenient use in ""about""; * boxes and the like:; *; * printf(""%s"", png_get_copyright(NULL));; *; * Also, the PNG logo (in PNG format, of course) is supplied in the; * files ""pngbar.png"" and ""pngbar.jpg (88x31) and ""pngnow.png"" (98x31).; */; /*; * The contributing authors would like to thank all those who helped; * with testing, bug fixes, and patience. This wouldn't have been; * possible without all of you.; *; * Thanks to Frank J. T. Wojcik for helping with the documentation.; */; /* Note about libpng version numbers:; *; * Due to various miscommunications, unforeseen code incompatibilities; * and occasional factors outside the authors' control, version numbering; * on the library has not always been consistent and straightforward.; * The following table summarizes matters since version 0.89c, which was; * the first widely used release:; *; * source png.h png.h shared-lib; * version string int version; * ------- ------ ----- ----------; * 0.89c ""1.0 beta 3"" 0.89 89 1.0.89; * 0.90 ""1.0 beta 4"" 0.90 90 0.90 [should have been 2.0.90]; * 0.95 ""1.0",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:7135,Testability,test,testing,7135,"d encourage the use of this source code as a component; * to supporting the PNG file format in commercial products. If you use; * this source code in a product, acknowledgment is not required but would; * be appreciated.; *; * END OF COPYRIGHT NOTICE, DISCLAIMER, and LICENSE.; *; * TRADEMARK; * =========; *; * The name ""libpng"" has not been registered by the Copyright owners; * as a trademark in any jurisdiction. However, because libpng has; * been distributed and maintained world-wide, continually since 1995,; * the Copyright owners claim ""common-law trademark protection"" in any; * jurisdiction where common-law trademark is recognized.; */; /*; * A ""png_get_copyright"" function is available, for convenient use in ""about""; * boxes and the like:; *; * printf(""%s"", png_get_copyright(NULL));; *; * Also, the PNG logo (in PNG format, of course) is supplied in the; * files ""pngbar.png"" and ""pngbar.jpg (88x31) and ""pngnow.png"" (98x31).; */; /*; * The contributing authors would like to thank all those who helped; * with testing, bug fixes, and patience. This wouldn't have been; * possible without all of you.; *; * Thanks to Frank J. T. Wojcik for helping with the documentation.; */; /* Note about libpng version numbers:; *; * Due to various miscommunications, unforeseen code incompatibilities; * and occasional factors outside the authors' control, version numbering; * on the library has not always been consistent and straightforward.; * The following table summarizes matters since version 0.89c, which was; * the first widely used release:; *; * source png.h png.h shared-lib; * version string int version; * ------- ------ ----- ----------; * 0.89c ""1.0 beta 3"" 0.89 89 1.0.89; * 0.90 ""1.0 beta 4"" 0.90 90 0.90 [should have been 2.0.90]; * 0.95 ""1.0 beta 5"" 0.95 95 0.95 [should have been 2.0.95]; * 0.96 ""1.0 beta 6"" 0.96 96 0.96 [should have been 2.0.96]; * 0.97b ""1.00.97 beta 7"" 1.00.97 97 1.0.1 [should have been 2.0.97]; * 0.97c 0.97 97 2.0.97; * 0.98 0.98 98 2.0.98; * 0.99 0.9",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:8805,Testability,test,testing,8805,"0 ""1.0 beta 4"" 0.90 90 0.90 [should have been 2.0.90]; * 0.95 ""1.0 beta 5"" 0.95 95 0.95 [should have been 2.0.95]; * 0.96 ""1.0 beta 6"" 0.96 96 0.96 [should have been 2.0.96]; * 0.97b ""1.00.97 beta 7"" 1.00.97 97 1.0.1 [should have been 2.0.97]; * 0.97c 0.97 97 2.0.97; * 0.98 0.98 98 2.0.98; * 0.99 0.99 98 2.0.99; * 0.99a-m 0.99 99 2.0.99; * 1.00 1.00 100 2.1.0 [100 should be 10000]; * 1.0.0 (from here on, the 100 2.1.0 [100 should be 10000]; * 1.0.1 png.h string is 10001 2.1.0; * 1.0.1a-e identical to the 10002 from here on, the shared library; * 1.0.2 source version) 10002 is 2.V where V is the source code; * 1.0.2a-b 10003 version, except as noted.; * 1.0.3 10003; * 1.0.3a-d 10004; * 1.0.4 10004; * 1.0.4a-f 10005; * 1.0.5 (+ 2 patches) 10005; * 1.0.5a-d 10006; * 1.0.5e-r 10100 (not source compatible); * 1.0.5s-v 10006 (not binary compatible); * 1.0.6 (+ 3 patches) 10006 (still binary incompatible); * 1.0.6d-f 10007 (still binary incompatible); * 1.0.6g 10007; * 1.0.6h 10007 10.6h (testing xy.z so-numbering); * 1.0.6i 10007 10.6i; * 1.0.6j 10007 2.1.0.6j (incompatible with 1.0.0); * 1.0.7beta11-14 DLLNUM 10007 2.1.0.7beta11-14 (binary compatible); * 1.0.7beta15-18 1 10007 2.1.0.7beta15-18 (binary compatible); * 1.0.7rc1-2 1 10007 2.1.0.7rc1-2 (binary compatible); * 1.0.7 1 10007 (still compatible); * ...; * 1.0.69 10 10069 10.so.0.69[.0]; * ...; * 1.2.59 13 10259 12.so.0.59[.0]; * ...; * 1.4.20 14 10420 14.so.0.20[.0]; * ...; * 1.5.30 15 10530 15.so.15.30[.0]; * ...; * 1.6.40 16 10640 16.so.16.40[.0]; *; * Henceforth the source version will match the shared-library major and; * minor numbers; the shared-library major version number will be used for; * changes in backward compatibility, as it is intended.; * The PNG_LIBPNG_VER macro, which is not used within libpng but is; * available for applications, is an unsigned integer of the form XYYZZ; * corresponding to the source version X.Y.Z (leading zeros in Y and Z).; * Beta versions were given the previous public releas",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:28,Usability,learn,learn,28,"/* This is not the place to learn how to use libpng. The file libpng-manual.txt; * describes how to use libpng, and the file example.c summarizes it; * with some code on which to build. This file is useful for looking; * at the actual function definitions and structure components. If that; * file has been stripped from your copy of libpng, you can find it at; * <http://www.libpng.org/pub/png/libpng-manual.txt>; *; * If you just need to read a PNG file and don't want to read the documentation; * skip to the end of this file and read the section entitled 'simplified API'.; */; /* Version information for png.h - this should match the version in png.c */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:560,Usability,simpl,simplified,560,"/* This is not the place to learn how to use libpng. The file libpng-manual.txt; * describes how to use libpng, and the file example.c summarizes it; * with some code on which to build. This file is useful for looking; * at the actual function definitions and structure components. If that; * file has been stripped from your copy of libpng, you can find it at; * <http://www.libpng.org/pub/png/libpng-manual.txt>; *; * If you just need to read a PNG file and don't want to read the documentation; * skip to the end of this file and read the section entitled 'simplified API'.; */; /* Version information for png.h - this should match the version in png.c */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:36,Deployability,release,release,36,"/* This should be zero for a public release, or non-zero for a; * development version. [Deprecated]; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3,Deployability,Release,Release,3,/* Release Status */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3,Deployability,Release,Release-Specific,3,/* Release-Specific Flags */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:310,Deployability,release,release,310,"/* Careful here. At one time, Guy wanted to use 082, but that; * would be octal. We must not include leading zeros.; * Versions 0.7 through 1.0.0 were in the range 0 to 100 here; * (only version 1.0.0 was mis-numbered 100 instead of 10000).; * From version 1.0.1 it is:; * XXYYZZ, where XX=major, YY=minor, ZZ=release; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:11,Deployability,configurat,configuration,11,/* Library configuration: these options cannot be changed after; * the library has been built.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:11,Modifiability,config,configuration,11,/* Library configuration: these options cannot be changed after; * the library has been built.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:20,Deployability,configurat,configuration,20,/* Machine specific configuration. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:20,Modifiability,config,configuration,20,/* Machine specific configuration. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:135,Deployability,release,release,135,"/*; * Added at libpng-1.2.8; *; * Ref MSDN: Private as priority over Special; * VS_FF_PRIVATEBUILD File *was not* built using standard release; * procedures. If this value is given, the StringFileInfo block must; * contain a PrivateBuild string.; *; * VS_FF_SPECIALBUILD File *was* built by the original company using; * standard release procedures but is a variation of the standard; * file of the same version number. If this value is given, the; * StringFileInfo block must contain a SpecialBuild string.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:330,Deployability,release,release,330,"/*; * Added at libpng-1.2.8; *; * Ref MSDN: Private as priority over Special; * VS_FF_PRIVATEBUILD File *was not* built using standard release; * procedures. If this value is given, the StringFileInfo block must; * contain a PrivateBuild string.; *; * VS_FF_SPECIALBUILD File *was* built by the original company using; * standard release procedures but is a variation of the standard; * file of the same version number. If this value is given, the; * StringFileInfo block must contain a SpecialBuild string.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1594,Availability,error,errors,1594,"ral sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agree upon the version number.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1693,Availability,error,error,1693,"ral sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agree upon the version number.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1953,Availability,error,error,1953,"ral sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agree upon the version number.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:75,Deployability,configurat,configuration,75,"/* This file is arranged in several sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agr",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:180,Deployability,configurat,configuration,180,"/* This file is arranged in several sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agr",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:477,Deployability,configurat,configuration,477,"/* This file is arranged in several sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agr",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:563,Deployability,configurat,configuration,563,"/* This file is arranged in several sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agr",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:612,Deployability,configurat,configuration,612,"/* This file is arranged in several sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agr",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:641,Deployability,configurat,configuration,641,"/* This file is arranged in several sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agr",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:75,Modifiability,config,configuration,75,"/* This file is arranged in several sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agr",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:180,Modifiability,config,configuration,180,"/* This file is arranged in several sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agr",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:477,Modifiability,config,configuration,477,"/* This file is arranged in several sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agr",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:563,Modifiability,config,configuration,563,"/* This file is arranged in several sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agr",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:612,Modifiability,config,configuration,612,"/* This file is arranged in several sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agr",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:641,Modifiability,config,configuration,641,"/* This file is arranged in several sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agr",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:819,Safety,safe,safe,819,"/* This file is arranged in several sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agr",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:342,Usability,Simpl,Simplified,342,"/* This file is arranged in several sections:; *; * 1. [omitted]; * 2. Any configuration options that can be specified by for the application; * code when it is built. (Build time configuration is in pnglibconf.h); * 3. Type definitions (base types are defined in pngconf.h), structure; * definitions.; * 4. Exported library functions.; * 5. Simplified API.; * 6. Implementation options.; *; * The library source code has additional files (principally pngpriv.h) that; * allow configuration of the library.; */; /* Section 1: [omitted] */; /* Section 2: run time configuration; * See pnglibconf.h for build time configuration; *; * Run time configuration allows the application to choose between; * implementations of certain arithmetic APIs. The default is set; * at build time and recorded in pnglibconf.h, but it is safe to; * override these (and only these) settings. Note that this won't; * change what the library does, only application code, and the; * settings can (and probably should) be made on a per-file basis; * by setting the #defines before including png.h; *; * Use macros to read integers from PNG data or use the exported; * functions?; * PNG_USE_READ_MACROS: use the macros (see below) Note that; * the macros evaluate their argument multiple times.; * PNG_NO_USE_READ_MACROS: call the relevant library function.; *; * Use the alternative algorithm for compositing alpha samples that; * does not use division?; * PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'; * algorithm.; * PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.; *; * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is; * false?; * PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error; * APIs to png_warning.; * Otherwise the calls are mapped to png_error.; */; /* Section 3: type definitions, including structures and compile time; * constants.; * See pngconf.h for base types that vary by machine/system; */; /* This triggers a compiler error in png.c, if png.c and png.h; * do not agr",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:103,Performance,cache,cache,103,"/* Basic control structions. Read libpng-manual.txt or libpng.3 for more info.; *; * png_struct is the cache of information used while reading or writing a single; * PNG file. One of these is always required, although the simplified API; * (below) hides the creation and destruction of it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:222,Usability,simpl,simplified,222,"/* Basic control structions. Read libpng-manual.txt or libpng.3 for more info.; *; * png_struct is the cache of information used while reading or writing a single; * PNG file. One of these is always required, although the simplified API; * (below) hides the creation and destruction of it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:458,Security,access,accessible,458,"/* png_info contains information read from or to be written to a PNG file. One; * or more of these must exist while reading or creating a PNG file. The; * information is not used by libpng during read but is used to control what; * gets written when a PNG file is created. ""png_get_"" function calls read; * information during read and ""png_set_"" functions calls write information; * when creating a PNG.; * been moved into a separate header file that is not accessible to; * applications. Read libpng-manual.txt or libpng.3 for more info.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:641,Modifiability,portab,portable,641,"/* Types with names ending 'p' are pointer types. The corresponding types with; * names ending 'rp' are identical pointer types except that the pointer is; * marked 'restrict', which means that it is the only pointer to the object; * passed to the function. Applications should not use the 'restrict' types;; * it is always valid to pass 'p' to a pointer with a function argument of the; * corresponding 'rp' type. Different compilers have different rules with; * regard to type matching in the presence of 'restrict'. For backward; * compatibility libpng callbacks never have 'restrict' in their parameters and,; * consequentially, writing portable application code is extremely difficult if; * an attempt is made to use 'restrict'.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:50,Energy Efficiency,green,green,50,"/* Three color definitions. The order of the red, green, and blue, (and the; * exact size) is not important, although the size of the fields need to; * be png_byte or png_uint_16 (as defined below).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:18,Energy Efficiency,green,green,18,/* for use in red green blue files */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:18,Energy Efficiency,green,green,18,/* for use in red green blue files */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:459,Safety,safe,safely,459,"/* png_text holds the contents of a text/ztxt/itxt chunk in a PNG file,; * and whether that contents is compressed or not. The ""key"" field; * points to a regular zero-terminated C string. The ""text"" fields can be a; * regular C string, an empty string, or a NULL pointer.; * However, the structure returned by png_get_text() will always contain; * the ""text"" field as a regular zero-terminated C string (possibly; * empty), never a NULL pointer, so it can be safely used in printf() and; * other string-handling functions. Note that the ""itxt_length"", ""lang"", and; * ""lang_key"" members of the structure only exist when the library is built; * with iTXt chunk support. Prior to libpng-1.4.0 the library was built by; * default without iTXt support. Also note that when iTXt *is* supported,; * the ""lang"" and ""lang_key"" fields contain NULL pointers when the; * ""compression"" field contains * PNG_TEXT_COMPRESSION_NONE or; * PNG_TEXT_COMPRESSION_zTXt. Note that the ""compression value"" is not the; * same as what appears in the PNG tEXt/zTXt/iTXt chunk's ""compression flag""; * which is always 0 or 1, or its ""compression method"" which is always 0.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:149,Modifiability,portab,portable,149,"/* png_time is a way to hold the time in an machine independent way.; * Two conversions are provided, both from time_t and struct tm. There; * is no portable way to convert to either of these structures, as far; * as I know. If you know of a portable way, send it to me. As a side; * note - PNG has always been Year 2000 compliant!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:242,Modifiability,portab,portable,242,"/* png_time is a way to hold the time in an machine independent way.; * Two conversions are provided, both from time_t and struct tm. There; * is no portable way to convert to either of these structures, as far; * as I know. If you know of a portable way, send it to me. As a side; * note - PNG has always been Year 2000 compliant!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:44,Performance,queue,queued,44,/* png_unknown_chunk is a structure to hold queued chunks for which there is; * no specific support. The idea is that we can use this to queue; * up private chunks for output even though the library doesn't actually; * know about their semantics.; *; * The data in the structure is set by libpng on read and used on write.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:137,Performance,queue,queue,137,/* png_unknown_chunk is a structure to hold queued chunks for which there is; * no specific support. The idea is that we can use this to queue; * up private chunks for output even though the library doesn't actually; * know about their semantics.; *; * The data in the structure is set by libpng on read and used on write.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:70,Availability,mask,masks,70,/* These describe the color_type field in png_info. */; /* color type masks */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:33,Energy Efficiency,meter,meter,33,/* Offset in micrometers (1/10^6 meter) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3,Energy Efficiency,meter,meters,3,/* meters per pixel */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:10,Energy Efficiency,meter,meter,10,/* pixels/meter */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:39,Integrability,rout,routines,39,"/* This is used for the transformation routines, as some of them; * change these values for the row. It also should enable using; * the routines for other purposes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:136,Integrability,rout,routines,136,"/* This is used for the transformation routines, as some of them; * change these values for the row. It also should enable using; * the routines for other purposes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:234,Availability,error,error,234,"/* These are the function types for the I/O functions and for the functions; * that allow the user to override the default I/O functions with his or her; * own. The png_error_ptr type should match that of user-supplied warning; * and error functions, while the png_rw_ptr type should match that of the; * user read/write data functions. Note that the 'write' function must not; * modify the buffer it is passed. The 'read' function, on the other hand, is; * expected to return the read data in the buffer.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:287,Safety,abort,abort,287,"/* This must match the function definition in <setjmp.h>, and the application; * must include this before png.h to obtain the definition of jmp_buf. The; * function is required to be PNG_NORETURN, but this is not checked. If the; * function does return the application will crash via an abort() or similar; * system level call.; *; * If you get a warning here while building the library you may need to make; * changes to ensure that pnglibconf.h records the calling convention used by; * your compiler. This may be very difficult - try using a different compiler; * to build the library!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:13,Availability,mask,masks,13,/* Transform masks for the high-level interface */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:38,Integrability,interface,interface,38,/* Transform masks for the high-level interface */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:252,Usability,simpl,simple,252,"/* Section 4: exported functions; * Here are the function definitions most commonly used. This is not; * the place to find out how to use libpng. See libpng-manual.txt for the; * full explanation, see example.c for the summary. This just provides; * a simple one line description of the use of each function.; *; * The PNG_EXPORT() and PNG_EXPORTA() macros used below are defined in; * pngconf.h and in the *.dfn files in the scripts directory.; *; * PNG_EXPORT(ordinal, type, name, (args));; *; * ordinal: ordinal that is used while building; * *.def files. The ordinal value is only; * relevant when preprocessing png.h with; * the *.dfn files for building symbol table; * entries, and are removed by pngconf.h.; * type: return type of the function; * name: function name; * args: function arguments, with types; *; * When we wish to append attributes to a function prototype we use; * the PNG_EXPORTA() macro instead.; *; * PNG_EXPORTA(ordinal, type, name, (args), attributes);; *; * ordinal, type, name, and args: same as in PNG_EXPORT().; * attributes: function attributes; */; /* Returns the version number of the library */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:138,Availability,error,error,138,/* Tell lib we have already handled the first <num_bytes> magic bytes.; * Handling more than 8 bytes from the beginning of the file is an error.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3,Usability,Simpl,Simple,3,"/* Simple signature checking function. This is the same as calling; * png_check_sig(sig, n) := !png_sig_cmp(sig, 0, n).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3,Energy Efficiency,Allocate,Allocate,3,"/* Allocate and initialize png_ptr struct for reading, and any other memory. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3,Energy Efficiency,Allocate,Allocate,3,"/* Allocate and initialize png_ptr struct for writing, and any other memory */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:166,Availability,error,error,166,/* This function returns the jmp_buf built in to *png_ptr. It must be; * supplied with an appropriate 'longjmp' function to use on that jmp_buf; * unless the default error function is overridden in which case NULL is; * acceptable. The size of the jmp_buf is checked against the actual size; * allocated by the library - the call will return NULL on a mismatch; * indicating an ABI mismatch.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:294,Energy Efficiency,allocate,allocated,294,/* This function returns the jmp_buf built in to *png_ptr. It must be; * supplied with an appropriate 'longjmp' function to use on that jmp_buf; * unless the default error function is overridden in which case NULL is; * acceptable. The size of the jmp_buf is checked against the actual size; * allocated by the library - the call will return NULL on a mismatch; * indicating an ABI mismatch.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate and initialize the info structure */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:78,Integrability,rout,routine,78,"/* Convert to a US string format: there is no localization support in this; * routine. The original implementation used a 29 character buffer in; * png_struct, this will be removed in future versions.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:64,Availability,avail,available,64,"/* Expand data to 24-bit RGB, or 8-bit grayscale, with alpha if available. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:13,Energy Efficiency,green,green,13,"/* Use blue, green, red order for pixels. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3,Energy Efficiency,Reduce,Reduce,3,/* Reduce RGB to grayscale. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:10,Energy Efficiency,green,green,10,/*for red/green coefficients*/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1554,Availability,error,errors,1554,"/* How the alpha channel is interpreted - this affects how the color channels; * of a PNG file are returned to the calling application when an alpha channel,; * or a tRNS chunk in a palette file, is present.; *; * This has no effect on the way pixels are written into a PNG output; * datastream. The color samples in a PNG datastream are never premultiplied; * with the alpha samples.; *; * The default is to return data according to the PNG specification: the alpha; * channel is a linear measure of the contribution of the pixel to the; * corresponding composited pixel, and the color channels are unassociated; * (not premultiplied). The gamma encoded color channels must be scaled; * according to the contribution and to do this it is necessary to undo; * the encoding, scale the color values, perform the composition and re-encode; * the values. This is the 'PNG' mode.; *; * The alternative is to 'associate' the alpha with the color information by; * storing color channel values that have been scaled by the alpha.; * image. These are the 'STANDARD', 'ASSOCIATED' or 'PREMULTIPLIED' modes; * (the latter being the two common names for associated alpha color channels).; *; * For the 'OPTIMIZED' mode, a pixel is treated as opaque only if the alpha; * value is equal to the maximum value.; *; * The final choice is to gamma encode the alpha channel as well. This is; * broken because, in practice, no implementation that uses this choice; * correctly undoes the encoding before handling alpha composition. Use this; * choice only if other serious errors in the software or hardware you use; * mandate it; the typical serious error is for dark halos to appear around; * opaque areas of the composited PNG image because of arithmetic overflow.; *; * The API function png_set_alpha_mode specifies which of these choices to use; * with an enumerated 'mode' value and the gamma of the required output:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1632,Availability,error,error,1632,"/* How the alpha channel is interpreted - this affects how the color channels; * of a PNG file are returned to the calling application when an alpha channel,; * or a tRNS chunk in a palette file, is present.; *; * This has no effect on the way pixels are written into a PNG output; * datastream. The color samples in a PNG datastream are never premultiplied; * with the alpha samples.; *; * The default is to return data according to the PNG specification: the alpha; * channel is a linear measure of the contribution of the pixel to the; * corresponding composited pixel, and the color channels are unassociated; * (not premultiplied). The gamma encoded color channels must be scaled; * according to the contribution and to do this it is necessary to undo; * the encoding, scale the color values, perform the composition and re-encode; * the values. This is the 'PNG' mode.; *; * The alternative is to 'associate' the alpha with the color information by; * storing color channel values that have been scaled by the alpha.; * image. These are the 'STANDARD', 'ASSOCIATED' or 'PREMULTIPLIED' modes; * (the latter being the two common names for associated alpha color channels).; *; * For the 'OPTIMIZED' mode, a pixel is treated as opaque only if the alpha; * value is equal to the maximum value.; *; * The final choice is to gamma encode the alpha channel as well. This is; * broken because, in practice, no implementation that uses this choice; * correctly undoes the encoding before handling alpha composition. Use this; * choice only if other serious errors in the software or hardware you use; * mandate it; the typical serious error is for dark halos to appear around; * opaque areas of the composited PNG image because of arithmetic overflow.; *; * The API function png_set_alpha_mode specifies which of these choices to use; * with an enumerated 'mode' value and the gamma of the required output:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:798,Performance,perform,perform,798,"/* How the alpha channel is interpreted - this affects how the color channels; * of a PNG file are returned to the calling application when an alpha channel,; * or a tRNS chunk in a palette file, is present.; *; * This has no effect on the way pixels are written into a PNG output; * datastream. The color samples in a PNG datastream are never premultiplied; * with the alpha samples.; *; * The default is to return data according to the PNG specification: the alpha; * channel is a linear measure of the contribution of the pixel to the; * corresponding composited pixel, and the color channels are unassociated; * (not premultiplied). The gamma encoded color channels must be scaled; * according to the contribution and to do this it is necessary to undo; * the encoding, scale the color values, perform the composition and re-encode; * the values. This is the 'PNG' mode.; *; * The alternative is to 'associate' the alpha with the color information by; * storing color channel values that have been scaled by the alpha.; * image. These are the 'STANDARD', 'ASSOCIATED' or 'PREMULTIPLIED' modes; * (the latter being the two common names for associated alpha color channels).; *; * For the 'OPTIMIZED' mode, a pixel is treated as opaque only if the alpha; * value is equal to the maximum value.; *; * The final choice is to gamma encode the alpha channel as well. This is; * broken because, in practice, no implementation that uses this choice; * correctly undoes the encoding before handling alpha composition. Use this; * choice only if other serious errors in the software or hardware you use; * mandate it; the typical serious error is for dark halos to appear around; * opaque areas of the composited PNG image because of arithmetic overflow.; *; * The API function png_set_alpha_mode specifies which of these choices to use; * with an enumerated 'mode' value and the gamma of the required output:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1192,Performance,OPTIMIZ,OPTIMIZED,1192,"/* How the alpha channel is interpreted - this affects how the color channels; * of a PNG file are returned to the calling application when an alpha channel,; * or a tRNS chunk in a palette file, is present.; *; * This has no effect on the way pixels are written into a PNG output; * datastream. The color samples in a PNG datastream are never premultiplied; * with the alpha samples.; *; * The default is to return data according to the PNG specification: the alpha; * channel is a linear measure of the contribution of the pixel to the; * corresponding composited pixel, and the color channels are unassociated; * (not premultiplied). The gamma encoded color channels must be scaled; * according to the contribution and to do this it is necessary to undo; * the encoding, scale the color values, perform the composition and re-encode; * the values. This is the 'PNG' mode.; *; * The alternative is to 'associate' the alpha with the color information by; * storing color channel values that have been scaled by the alpha.; * image. These are the 'STANDARD', 'ASSOCIATED' or 'PREMULTIPLIED' modes; * (the latter being the two common names for associated alpha color channels).; *; * For the 'OPTIMIZED' mode, a pixel is treated as opaque only if the alpha; * value is equal to the maximum value.; *; * The final choice is to gamma encode the alpha channel as well. This is; * broken because, in practice, no implementation that uses this choice; * correctly undoes the encoding before handling alpha composition. Use this; * choice only if other serious errors in the software or hardware you use; * mandate it; the typical serious error is for dark halos to appear around; * opaque areas of the composited PNG image because of arithmetic overflow.; *; * The API function png_set_alpha_mode specifies which of these choices to use; * with an enumerated 'mode' value and the gamma of the required output:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:752,Usability,undo,undo,752,"/* How the alpha channel is interpreted - this affects how the color channels; * of a PNG file are returned to the calling application when an alpha channel,; * or a tRNS chunk in a palette file, is present.; *; * This has no effect on the way pixels are written into a PNG output; * datastream. The color samples in a PNG datastream are never premultiplied; * with the alpha samples.; *; * The default is to return data according to the PNG specification: the alpha; * channel is a linear measure of the contribution of the pixel to the; * corresponding composited pixel, and the color channels are unassociated; * (not premultiplied). The gamma encoded color channels must be scaled; * according to the contribution and to do this it is necessary to undo; * the encoding, scale the color values, perform the composition and re-encode; * the values. This is the 'PNG' mode.; *; * The alternative is to 'associate' the alpha with the color information by; * storing color channel values that have been scaled by the alpha.; * image. These are the 'STANDARD', 'ASSOCIATED' or 'PREMULTIPLIED' modes; * (the latter being the two common names for associated alpha color channels).; *; * For the 'OPTIMIZED' mode, a pixel is treated as opaque only if the alpha; * value is equal to the maximum value.; *; * The final choice is to gamma encode the alpha channel as well. This is; * broken because, in practice, no implementation that uses this choice; * correctly undoes the encoding before handling alpha composition. Use this; * choice only if other serious errors in the software or hardware you use; * mandate it; the typical serious error is for dark halos to appear around; * opaque areas of the composited PNG image because of arithmetic overflow.; *; * The API function png_set_alpha_mode specifies which of these choices to use; * with an enumerated 'mode' value and the gamma of the required output:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1458,Usability,undo,undoes,1458,"/* How the alpha channel is interpreted - this affects how the color channels; * of a PNG file are returned to the calling application when an alpha channel,; * or a tRNS chunk in a palette file, is present.; *; * This has no effect on the way pixels are written into a PNG output; * datastream. The color samples in a PNG datastream are never premultiplied; * with the alpha samples.; *; * The default is to return data according to the PNG specification: the alpha; * channel is a linear measure of the contribution of the pixel to the; * corresponding composited pixel, and the color channels are unassociated; * (not premultiplied). The gamma encoded color channels must be scaled; * according to the contribution and to do this it is necessary to undo; * the encoding, scale the color values, perform the composition and re-encode; * the values. This is the 'PNG' mode.; *; * The alternative is to 'associate' the alpha with the color information by; * storing color channel values that have been scaled by the alpha.; * image. These are the 'STANDARD', 'ASSOCIATED' or 'PREMULTIPLIED' modes; * (the latter being the two common names for associated alpha color channels).; *; * For the 'OPTIMIZED' mode, a pixel is treated as opaque only if the alpha; * value is equal to the maximum value.; *; * The final choice is to gamma encode the alpha channel as well. This is; * broken because, in practice, no implementation that uses this choice; * correctly undoes the encoding before handling alpha composition. Use this; * choice only if other serious errors in the software or hardware you use; * mandate it; the typical serious error is for dark halos to appear around; * opaque areas of the composited PNG image because of arithmetic overflow.; *; * The API function png_set_alpha_mode specifies which of these choices to use; * with an enumerated 'mode' value and the gamma of the required output:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:662,Energy Efficiency,power,power-law,662,"/* The following are examples of calls to png_set_alpha_mode to achieve the; * required overall gamma correction and, where necessary, alpha; * premultiplication.; *; * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_DEFAULT_sRGB);; * This is the default libpng handling of the alpha channel - it is not; * pre-multiplied into the color components. In addition the call states; * that the output is for a sRGB system and causes all PNG files without gAMA; * chunks to be assumed to be encoded using sRGB.; *; * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_GAMMA_MAC);; * In this case the output is assumed to be something like an sRGB conformant; * display preceded by a power-law lookup table of power 1.45. This is how; * early Mac systems behaved.; *; * png_set_alpha_mode(pp, PNG_ALPHA_STANDARD, PNG_GAMMA_LINEAR);; * This is the classic Jim Blinn approach and will work in academic; * environments where everything is done by the book. It has the shortcoming; * of assuming that input PNG data with no gamma information is linear - this; * is unlikely to be correct unless the PNG files where generated locally.; * Most of the time the output precision will be so low as to show; * significant banding in dark areas of the image.; *; * png_set_expand_16(pp);; * png_set_alpha_mode(pp, PNG_ALPHA_STANDARD, PNG_DEFAULT_sRGB);; * This is a somewhat more realistic Jim Blinn inspired approach. PNG files; * are assumed to have the sRGB encoding if not marked with a gamma value and; * the output is always 16 bits per component. This permits accurate scaling; * and processing of the data. If you know that your input PNG files were; * generated locally you might need to replace PNG_DEFAULT_sRGB with the; * correct value for your system.; *; * png_set_alpha_mode(pp, PNG_ALPHA_OPTIMIZED, PNG_DEFAULT_sRGB);; * If you just need to composite the PNG image onto an existing background; * and if you control the code that does this you can use the optimization; * setting. In this case you just copy completely ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:688,Energy Efficiency,power,power,688,"/* The following are examples of calls to png_set_alpha_mode to achieve the; * required overall gamma correction and, where necessary, alpha; * premultiplication.; *; * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_DEFAULT_sRGB);; * This is the default libpng handling of the alpha channel - it is not; * pre-multiplied into the color components. In addition the call states; * that the output is for a sRGB system and causes all PNG files without gAMA; * chunks to be assumed to be encoded using sRGB.; *; * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_GAMMA_MAC);; * In this case the output is assumed to be something like an sRGB conformant; * display preceded by a power-law lookup table of power 1.45. This is how; * early Mac systems behaved.; *; * png_set_alpha_mode(pp, PNG_ALPHA_STANDARD, PNG_GAMMA_LINEAR);; * This is the classic Jim Blinn approach and will work in academic; * environments where everything is done by the book. It has the shortcoming; * of assuming that input PNG data with no gamma information is linear - this; * is unlikely to be correct unless the PNG files where generated locally.; * Most of the time the output precision will be so low as to show; * significant banding in dark areas of the image.; *; * png_set_expand_16(pp);; * png_set_alpha_mode(pp, PNG_ALPHA_STANDARD, PNG_DEFAULT_sRGB);; * This is a somewhat more realistic Jim Blinn inspired approach. PNG files; * are assumed to have the sRGB encoding if not marked with a gamma value and; * the output is always 16 bits per component. This permits accurate scaling; * and processing of the data. If you know that your input PNG files were; * generated locally you might need to replace PNG_DEFAULT_sRGB with the; * correct value for your system.; *; * png_set_alpha_mode(pp, PNG_ALPHA_OPTIMIZED, PNG_DEFAULT_sRGB);; * If you just need to composite the PNG image onto an existing background; * and if you control the code that does this you can use the optimization; * setting. In this case you just copy completely ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:2676,Energy Efficiency,reduce,reduce,2676,"ou might need to replace PNG_DEFAULT_sRGB with the; * correct value for your system.; *; * png_set_alpha_mode(pp, PNG_ALPHA_OPTIMIZED, PNG_DEFAULT_sRGB);; * If you just need to composite the PNG image onto an existing background; * and if you control the code that does this you can use the optimization; * setting. In this case you just copy completely opaque pixels to the; * output. For pixels that are not completely transparent (you just skip; * those) you do the composition math using png_composite or png_composite_16; * below then encode the resultant 8-bit or 16-bit values to match the output; * encoding.; *; * Other cases; * If neither the PNG nor the standard linear encoding work for you because; * of the software or hardware you use then you have a big problem. The PNG; * case will probably result in halos around the image. The linear encoding; * will probably result in a washed out, too bright, image (it's actually too; * contrasty.) Try the ALPHA_OPTIMIZED mode above - this will probably; * substantially reduce the halos. Alternatively try:; *; * png_set_alpha_mode(pp, PNG_ALPHA_BROKEN, PNG_DEFAULT_sRGB);; * This option will also reduce the halos, but there will be slight dark; * halos round the opaque parts of the image where the background is light.; * In the OPTIMIZED mode the halos will be light halos where the background; * is dark. Take your pick - the halos are unavoidable unless you can get; * your hardware/software fixed! (The OPTIMIZED approach is slightly; * faster.); *; * When the default gamma of PNG files doesn't match the output gamma.; * If you have PNG files with no gamma information png_set_alpha_mode allows; * you to provide a default gamma, but it also sets the output gamma to the; * matching value. If you know your PNG files have a gamma that doesn't; * match the output you can take advantage of the fact that; * png_set_alpha_mode always sets the output gamma but only sets the PNG; * default if it is not already set:; *; * png_set_alpha",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:2804,Energy Efficiency,reduce,reduce,2804," just need to composite the PNG image onto an existing background; * and if you control the code that does this you can use the optimization; * setting. In this case you just copy completely opaque pixels to the; * output. For pixels that are not completely transparent (you just skip; * those) you do the composition math using png_composite or png_composite_16; * below then encode the resultant 8-bit or 16-bit values to match the output; * encoding.; *; * Other cases; * If neither the PNG nor the standard linear encoding work for you because; * of the software or hardware you use then you have a big problem. The PNG; * case will probably result in halos around the image. The linear encoding; * will probably result in a washed out, too bright, image (it's actually too; * contrasty.) Try the ALPHA_OPTIMIZED mode above - this will probably; * substantially reduce the halos. Alternatively try:; *; * png_set_alpha_mode(pp, PNG_ALPHA_BROKEN, PNG_DEFAULT_sRGB);; * This option will also reduce the halos, but there will be slight dark; * halos round the opaque parts of the image where the background is light.; * In the OPTIMIZED mode the halos will be light halos where the background; * is dark. Take your pick - the halos are unavoidable unless you can get; * your hardware/software fixed! (The OPTIMIZED approach is slightly; * faster.); *; * When the default gamma of PNG files doesn't match the output gamma.; * If you have PNG files with no gamma information png_set_alpha_mode allows; * you to provide a default gamma, but it also sets the output gamma to the; * matching value. If you know your PNG files have a gamma that doesn't; * match the output you can take advantage of the fact that; * png_set_alpha_mode always sets the output gamma but only sets the PNG; * default if it is not already set:; *; * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_DEFAULT_sRGB);; * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_GAMMA_MAC);; * The first call sets both the default and the output gamma v",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1938,Performance,optimiz,optimization,1938,"roach and will work in academic; * environments where everything is done by the book. It has the shortcoming; * of assuming that input PNG data with no gamma information is linear - this; * is unlikely to be correct unless the PNG files where generated locally.; * Most of the time the output precision will be so low as to show; * significant banding in dark areas of the image.; *; * png_set_expand_16(pp);; * png_set_alpha_mode(pp, PNG_ALPHA_STANDARD, PNG_DEFAULT_sRGB);; * This is a somewhat more realistic Jim Blinn inspired approach. PNG files; * are assumed to have the sRGB encoding if not marked with a gamma value and; * the output is always 16 bits per component. This permits accurate scaling; * and processing of the data. If you know that your input PNG files were; * generated locally you might need to replace PNG_DEFAULT_sRGB with the; * correct value for your system.; *; * png_set_alpha_mode(pp, PNG_ALPHA_OPTIMIZED, PNG_DEFAULT_sRGB);; * If you just need to composite the PNG image onto an existing background; * and if you control the code that does this you can use the optimization; * setting. In this case you just copy completely opaque pixels to the; * output. For pixels that are not completely transparent (you just skip; * those) you do the composition math using png_composite or png_composite_16; * below then encode the resultant 8-bit or 16-bit values to match the output; * encoding.; *; * Other cases; * If neither the PNG nor the standard linear encoding work for you because; * of the software or hardware you use then you have a big problem. The PNG; * case will probably result in halos around the image. The linear encoding; * will probably result in a washed out, too bright, image (it's actually too; * contrasty.) Try the ALPHA_OPTIMIZED mode above - this will probably; * substantially reduce the halos. Alternatively try:; *; * png_set_alpha_mode(pp, PNG_ALPHA_BROKEN, PNG_DEFAULT_sRGB);; * This option will also reduce the halos, but there will be slight ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:2938,Performance,OPTIMIZ,OPTIMIZED,2938,"case you just copy completely opaque pixels to the; * output. For pixels that are not completely transparent (you just skip; * those) you do the composition math using png_composite or png_composite_16; * below then encode the resultant 8-bit or 16-bit values to match the output; * encoding.; *; * Other cases; * If neither the PNG nor the standard linear encoding work for you because; * of the software or hardware you use then you have a big problem. The PNG; * case will probably result in halos around the image. The linear encoding; * will probably result in a washed out, too bright, image (it's actually too; * contrasty.) Try the ALPHA_OPTIMIZED mode above - this will probably; * substantially reduce the halos. Alternatively try:; *; * png_set_alpha_mode(pp, PNG_ALPHA_BROKEN, PNG_DEFAULT_sRGB);; * This option will also reduce the halos, but there will be slight dark; * halos round the opaque parts of the image where the background is light.; * In the OPTIMIZED mode the halos will be light halos where the background; * is dark. Take your pick - the halos are unavoidable unless you can get; * your hardware/software fixed! (The OPTIMIZED approach is slightly; * faster.); *; * When the default gamma of PNG files doesn't match the output gamma.; * If you have PNG files with no gamma information png_set_alpha_mode allows; * you to provide a default gamma, but it also sets the output gamma to the; * matching value. If you know your PNG files have a gamma that doesn't; * match the output you can take advantage of the fact that; * png_set_alpha_mode always sets the output gamma but only sets the PNG; * default if it is not already set:; *; * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_DEFAULT_sRGB);; * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_GAMMA_MAC);; * The first call sets both the default and the output gamma values, the; * second call overrides the output gamma without changing the default. This; * is easier than achieving the same effect with png_set_gamma. You must ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3116,Performance,OPTIMIZ,OPTIMIZED,3116,"ust skip; * those) you do the composition math using png_composite or png_composite_16; * below then encode the resultant 8-bit or 16-bit values to match the output; * encoding.; *; * Other cases; * If neither the PNG nor the standard linear encoding work for you because; * of the software or hardware you use then you have a big problem. The PNG; * case will probably result in halos around the image. The linear encoding; * will probably result in a washed out, too bright, image (it's actually too; * contrasty.) Try the ALPHA_OPTIMIZED mode above - this will probably; * substantially reduce the halos. Alternatively try:; *; * png_set_alpha_mode(pp, PNG_ALPHA_BROKEN, PNG_DEFAULT_sRGB);; * This option will also reduce the halos, but there will be slight dark; * halos round the opaque parts of the image where the background is light.; * In the OPTIMIZED mode the halos will be light halos where the background; * is dark. Take your pick - the halos are unavoidable unless you can get; * your hardware/software fixed! (The OPTIMIZED approach is slightly; * faster.); *; * When the default gamma of PNG files doesn't match the output gamma.; * If you have PNG files with no gamma information png_set_alpha_mode allows; * you to provide a default gamma, but it also sets the output gamma to the; * matching value. If you know your PNG files have a gamma that doesn't; * match the output you can take advantage of the fact that; * png_set_alpha_mode always sets the output gamma but only sets the PNG; * default if it is not already set:; *; * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_DEFAULT_sRGB);; * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_GAMMA_MAC);; * The first call sets both the default and the output gamma values, the; * second call overrides the output gamma without changing the default. This; * is easier than achieving the same effect with png_set_gamma. You must use; * PNG_ALPHA_PNG for the first call - internal checking in png_set_alpha will; * fire if more than one call to ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:233,Availability,error,errors,233,/* Handle alpha and tRNS by replacing with a background color. Prior to; * libpng-1.5.4 this API must not be called before the PNG file header has been; * read. Doing so will result in unexpected behavior and possible warnings or; * errors if the PNG file contains a bKGD chunk.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:29,Availability,down,down,29,"/* Scale a 16-bit depth file down to 8-bit, accurately. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:73,Availability,avail,available,73,"/* Turn on quantizing, and reduce the palette to the number of colors; * available.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:27,Energy Efficiency,reduce,reduce,27,"/* Turn on quantizing, and reduce the palette to the number of colors; * available.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:40,Modifiability,config,configurable,40,/* The threshold on gamma processing is configurable but hard-wired into the; * library. The following is the floating point variant.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:328,Integrability,rout,routines,328,"/* Handle gamma correction. Screen_gamma=(display_exponent).; * NOTE: this API simply sets the screen and file gamma values. It will; * therefore override the value for gamma in a PNG file if it is called after; * the file header has been read - use with care - call before reading the PNG; * file for best results!; *; * These routines accept the same gamma values as png_set_alpha_mode (described; * above). The PNG_GAMMA_ defines and PNG_DEFAULT_sRGB can be passed to either; * API (floating point or fixed.) Notice, however, that the 'file_gamma' value; * is the inverse of a 'screen gamma' value.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:79,Usability,simpl,simply,79,"/* Handle gamma correction. Screen_gamma=(display_exponent).; * NOTE: this API simply sets the screen and file gamma values. It will; * therefore override the value for gamma in a PNG file if it is called after; * the file header has been read - use with care - call before reading the PNG; * file for best results!; *; * These routines accept the same gamma values as png_set_alpha_mode (described; * above). The PNG_GAMMA_ defines and PNG_DEFAULT_sRGB can be passed to either; * API (floating point or fixed.) Notice, however, that the 'file_gamma' value; * is the inverse of a 'screen gamma' value.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:12,Deployability,update,update,12,/* Optional update palette with requested transformations */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:20,Deployability,update,update,20,/* Optional call to update the users info structure */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:47,Availability,error,errors,47,/* Set the libpng method of handling chunk CRC errors */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:57,Availability,error,errors,57,"/* Values for png_set_crc_action() say how to handle CRC errors in; * ancillary and critical chunks, and whether to use the data contained; * therein. Note that it is impossible to ""discard"" data in a critical; * chunk. For versions prior to 0.90, the action was always error/quit,; * whereas in version 0.90 and later, the action for CRC errors in ancillary; * chunks is warn/discard. These values should NOT be changed.; *; * value action:critical action:ancillary; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:270,Availability,error,error,270,"/* Values for png_set_crc_action() say how to handle CRC errors in; * ancillary and critical chunks, and whether to use the data contained; * therein. Note that it is impossible to ""discard"" data in a critical; * chunk. For versions prior to 0.90, the action was always error/quit,; * whereas in version 0.90 and later, the action for CRC errors in ancillary; * chunks is warn/discard. These values should NOT be changed.; *; * value action:critical action:ancillary; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:339,Availability,error,errors,339,"/* Values for png_set_crc_action() say how to handle CRC errors in; * ancillary and critical chunks, and whether to use the data contained; * therein. Note that it is impossible to ""discard"" data in a critical; * chunk. For versions prior to 0.90, the action was always error/quit,; * whereas in version 0.90 and later, the action for CRC errors in ancillary; * chunks is warn/discard. These values should NOT be changed.; *; * value action:critical action:ancillary; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3,Availability,error,error,3,/* error/quit warn/discard data */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3,Availability,error,error,3,/* error/quit error/quit */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:14,Availability,error,error,14,/* error/quit error/quit */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:274,Performance,perform,performance,274,"/* These functions give the user control over the scan-line filtering in; * libpng and the compression methods used by zlib. These functions are; * mainly useful for testing, as the defaults should work with most users.; * Those users who are tight on memory or want faster performance at the; * expense of compression can modify them. See the compression library; * header file (zlib.h) for an explanation of the compression functions.; */; /* Set the filtering method(s) used by libpng. Currently, the only valid; * value for ""method"" is 0.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:166,Testability,test,testing,166,"/* These functions give the user control over the scan-line filtering in; * libpng and the compression methods used by zlib. These functions are; * mainly useful for testing, as the defaults should work with most users.; * Those users who are tight on memory or want faster performance at the; * expense of compression can modify them. See the compression library; * header file (zlib.h) for an explanation of the compression functions.; */; /* Set the filtering method(s) used by libpng. Currently, the only valid; * value for ""method"" is 0.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:266,Performance,perform,perform,266,"/* Set the library compression level. Currently, valid values range from; * 0 - 9, corresponding directly to the zlib compression levels 0 - 9; * (0 - no compression, 9 - ""maximal"" compression). Note that tests have; * shown that zlib compression levels 3-6 usually perform as well as level 9; * for PNG images, and do considerably fewer calculations. In the future,; * these values may not correspond directly to the zlib compression levels.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:205,Testability,test,tests,205,"/* Set the library compression level. Currently, valid values range from; * 0 - 9, corresponding directly to the zlib compression levels 0 - 9; * (0 - no compression, 9 - ""maximal"" compression). Note that tests have; * shown that zlib compression levels 3-6 usually perform as well as level 9; * for PNG images, and do considerably fewer calculations. In the future,; * these values may not correspond directly to the zlib compression levels.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:117,Safety,safe,safely,117,"/* If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is defined, libpng will use a; * smaller value of window_bits if it can do so safely.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:117,Safety,safe,safely,117,"/* If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is defined, libpng will use a; * smaller value of window_bits if it can do so safely.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:78,Availability,error,error,78,"/* WRITE */; /* These next functions are called for input/output, memory, and error; * handling. They are in the file pngrio.c, pngwio.c, and pngerror.c,; * and call standard C I/O routines such as fread(), fwrite(), and; * fprintf(). These functions can be made to use other I/O routines; * at run time for those applications that need to handle I/O in a; * different manner by calling png_set_???_fn(). See libpng-manual.txt for; * more information.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:181,Integrability,rout,routines,181,"/* WRITE */; /* These next functions are called for input/output, memory, and error; * handling. They are in the file pngrio.c, pngwio.c, and pngerror.c,; * and call standard C I/O routines such as fread(), fwrite(), and; * fprintf(). These functions can be made to use other I/O routines; * at run time for those applications that need to handle I/O in a; * different manner by calling png_set_???_fn(). See libpng-manual.txt for; * more information.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:280,Integrability,rout,routines,280,"/* WRITE */; /* These next functions are called for input/output, memory, and error; * handling. They are in the file pngrio.c, pngwio.c, and pngerror.c,; * and call standard C I/O routines such as fread(), fwrite(), and; * fprintf(). These functions can be made to use other I/O routines; * at run time for those applications that need to handle I/O in a; * different manner by calling png_set_???_fn(). See libpng-manual.txt for; * more information.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:16,Availability,error,error,16,"/* Replace the (error and abort), and warning functions with user; * supplied functions. If no messages are to be printed you must still; * write and use replacement functions. The replacement error_fn should; * still do a longjmp to the last setjmp location if you are using this; * method of error handling. If error_fn or warning_fn is NULL, the; * default function will be used.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:294,Availability,error,error,294,"/* Replace the (error and abort), and warning functions with user; * supplied functions. If no messages are to be printed you must still; * write and use replacement functions. The replacement error_fn should; * still do a longjmp to the last setjmp location if you are using this; * method of error handling. If error_fn or warning_fn is NULL, the; * default function will be used.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:95,Integrability,message,messages,95,"/* Replace the (error and abort), and warning functions with user; * supplied functions. If no messages are to be printed you must still; * write and use replacement functions. The replacement error_fn should; * still do a longjmp to the last setjmp location if you are using this; * method of error handling. If error_fn or warning_fn is NULL, the; * default function will be used.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:26,Safety,abort,abort,26,"/* Replace the (error and abort), and warning functions with user; * supplied functions. If no messages are to be printed you must still; * write and use replacement functions. The replacement error_fn should; * still do a longjmp to the last setjmp location if you are using this; * method of error handling. If error_fn or warning_fn is NULL, the; * default function will be used.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:47,Availability,error,error,47,/* Return the user pointer associated with the error functions */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:529,Availability,error,error,529,"/* This callback is called only for *unknown* chunks. If; * PNG_HANDLE_AS_UNKNOWN_SUPPORTED is set then it is possible to set known; * chunks to be treated as unknown, however in this case the callback must do; * any processing required by the chunk (e.g. by calling the appropriate; * png_set_ APIs.); *; * There is no write support - on write, by default, all the chunks in the; * 'unknown' list are written in the specified position.; *; * The integer return from the callback function is interpreted thus:; *; * negative: An error occurred; png_chunk_error will be called.; * zero: The chunk was not handled, the chunk will be saved. A critical; * chunk will cause an error at this point unless it is to be saved.; * positive: The chunk was handled, libpng will ignore/discard it.; *; * See ""INTERACTION WITH USER CHUNK CALLBACKS"" below for important notes about; * how this behavior will change in libpng 1.7; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:672,Availability,error,error,672,"/* This callback is called only for *unknown* chunks. If; * PNG_HANDLE_AS_UNKNOWN_SUPPORTED is set then it is possible to set known; * chunks to be treated as unknown, however in this case the callback must do; * any processing required by the chunk (e.g. by calling the appropriate; * png_set_ APIs.); *; * There is no write support - on write, by default, all the chunks in the; * 'unknown' list are written in the specified position.; *; * The integer return from the callback function is interpreted thus:; *; * negative: An error occurred; png_chunk_error will be called.; * zero: The chunk was not handled, the chunk will be saved. A critical; * chunk will cause an error at this point unless it is to be saved.; * positive: The chunk was handled, libpng will ignore/discard it.; *; * See ""INTERACTION WITH USER CHUNK CALLBACKS"" below for important notes about; * how this behavior will change in libpng 1.7; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:97,Availability,avail,available,97,"/* Sets the function callbacks for the push reader, and a pointer to a; * user-defined structure available to the callback functions.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:43,Availability,avail,available,43,/* Function to be called when data becomes available */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:330,Integrability,rout,routine,330,"/* A function which may be called *only* within png_process_data to stop the; * processing of any more data. The function returns the number of bytes; * remaining, excluding any that libpng has cached internally. A subsequent; * call to png_process_data must supply these bytes again. If the argument; * 'save' is set to true the routine will first save all the pending data and; * will always return 0.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:194,Performance,cache,cached,194,"/* A function which may be called *only* within png_process_data to stop the; * processing of any more data. The function returns the number of bytes; * remaining, excluding any that libpng has cached internally. A subsequent; * call to png_process_data must supply these bytes again. If the argument; * 'save' is set to true the routine will first save all the pending data and; * will always return 0.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:19,Energy Efficiency,allocate,allocated,19,/* Frees a pointer allocated by png_malloc() */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:22,Energy Efficiency,allocate,allocated,22,/* Free data that was allocated internally */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:62,Energy Efficiency,allocate,allocated,62,"/* Reassign responsibility for freeing existing data, whether allocated; * by libpng or by the application; this works on the png_info structure passed; * in, it does not change the state for other png_info structures.; *; * It is unlikely that this function works correctly as of 1.6.0 and using it; * may result either in memory leaks or double free of allocated data.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:355,Energy Efficiency,allocate,allocated,355,"/* Reassign responsibility for freeing existing data, whether allocated; * by libpng or by the application; this works on the png_info structure passed; * in, it does not change the state for other png_info structures.; *; * It is unlikely that this function works correctly as of 1.6.0 and using it; * may result either in memory leaks or double free of allocated data.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:9,Availability,error,error,9,/* Fatal error in PNG image of libpng - can't continue */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:52,Availability,error,error,52,"/* The same, but the chunk name is prepended to the error string. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:9,Availability,error,error,9,/* Fatal error in PNG image of libpng - can't continue */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:13,Availability,error,error,13,"/* Non-fatal error in libpng. Can continue, but may have a problem. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:13,Availability,error,error,13,"/* Non-fatal error in libpng, chunk name is prepended to message. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:57,Integrability,message,message,57,"/* Non-fatal error in libpng, chunk name is prepended to message. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:10,Availability,error,error,10,"/* Benign error in libpng. Can continue, but may have a problem.; * User can choose whether to handle as a fatal error or as a warning. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:113,Availability,error,error,113,"/* Benign error in libpng. Can continue, but may have a problem.; * User can choose whether to handle as a fatal error or as a warning. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:36,Integrability,message,message,36,"/* Same, chunk name is prepended to message (only during read) */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:375,Availability,avail,available,375,"/* The png_set_<chunk> functions are for storing values in the png_info_struct.; * Similarly, the png_get_<chunk> calls are used to read values from the; * png_info_struct, either storing the parameters in the passed variables, or; * setting pointers into the png_info_struct where the data is stored. The; * png_get_<chunk> functions return a non-zero value if the data was available; * in info_ptr, or return zero and do not change any of the parameters if the; * data was not available.; *; * These functions should be used instead of directly accessing png_info; * to avoid problems with future changes in the size and internal layout of; * png_info_struct.; */; /* Returns ""flag"" if chunk data is valid in info_ptr. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:479,Availability,avail,available,479,"/* The png_set_<chunk> functions are for storing values in the png_info_struct.; * Similarly, the png_get_<chunk> calls are used to read values from the; * png_info_struct, either storing the parameters in the passed variables, or; * setting pointers into the png_info_struct where the data is stored. The; * png_get_<chunk> functions return a non-zero value if the data was available; * in info_ptr, or return zero and do not change any of the parameters if the; * data was not available.; *; * These functions should be used instead of directly accessing png_info; * to avoid problems with future changes in the size and internal layout of; * png_info_struct.; */; /* Returns ""flag"" if chunk data is valid in info_ptr. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:217,Modifiability,variab,variables,217,"/* The png_set_<chunk> functions are for storing values in the png_info_struct.; * Similarly, the png_get_<chunk> calls are used to read values from the; * png_info_struct, either storing the parameters in the passed variables, or; * setting pointers into the png_info_struct where the data is stored. The; * png_get_<chunk> functions return a non-zero value if the data was available; * in info_ptr, or return zero and do not change any of the parameters if the; * data was not available.; *; * These functions should be used instead of directly accessing png_info; * to avoid problems with future changes in the size and internal layout of; * png_info_struct.; */; /* Returns ""flag"" if chunk data is valid in info_ptr. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:572,Safety,avoid,avoid,572,"/* The png_set_<chunk> functions are for storing values in the png_info_struct.; * Similarly, the png_get_<chunk> calls are used to read values from the; * png_info_struct, either storing the parameters in the passed variables, or; * setting pointers into the png_info_struct where the data is stored. The; * png_get_<chunk> functions return a non-zero value if the data was available; * in info_ptr, or return zero and do not change any of the parameters if the; * data was not available.; *; * These functions should be used instead of directly accessing png_info; * to avoid problems with future changes in the size and internal layout of; * png_info_struct.; */; /* Returns ""flag"" if chunk data is valid in info_ptr. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:547,Security,access,accessing,547,"/* The png_set_<chunk> functions are for storing values in the png_info_struct.; * Similarly, the png_get_<chunk> calls are used to read values from the; * png_info_struct, either storing the parameters in the passed variables, or; * setting pointers into the png_info_struct where the data is stored. The; * png_get_<chunk> functions return a non-zero value if the data was available; * in info_ptr, or return zero and do not change any of the parameters if the; * data was not available.; *; * These functions should be used instead of directly accessing png_info; * to avoid problems with future changes in the size and internal layout of; * png_info_struct.; */; /* Returns ""flag"" if chunk data is valid in info_ptr. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:42,Energy Efficiency,meter,meter,42,"/* Returns image resolution in pixels per meter, from pHYs chunk data. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1037,Availability,error,error,1037,"/* Provide the default handling for all unknown chunks or, optionally, for; * specific unknown chunks.; *; * NOTE: prior to 1.6.0 the handling specified for particular chunks on read was; * ignored and the default was used, the per-chunk setting only had an effect on; * write. If you wish to have chunk-specific handling on read in code that must; * work on earlier versions you must use a user chunk callback to specify the; * desired handling (keep or discard.); *; * The 'keep' parameter is a PNG_HANDLE_CHUNK_ value as listed below. The; * parameter is interpreted as follows:; *; * READ:; * PNG_HANDLE_CHUNK_AS_DEFAULT:; * Known chunks: do normal libpng processing, do not keep the chunk (but; * see the comments below about PNG_HANDLE_AS_UNKNOWN_SUPPORTED); * Unknown chunks: for a specific chunk use the global default, when used; * as the default discard the chunk data.; * PNG_HANDLE_CHUNK_NEVER:; * Discard the chunk data.; * PNG_HANDLE_CHUNK_IF_SAFE:; * Keep the chunk data if the chunk is not critical else raise a chunk; * error.; * PNG_HANDLE_CHUNK_ALWAYS:; * Keep the chunk data.; *; * If the chunk data is saved it can be retrieved using png_get_unknown_chunks,; * below. Notice that specifying ""AS_DEFAULT"" as a global default is equivalent; * to specifying ""NEVER"", however when ""AS_DEFAULT"" is used for specific chunks; * it simply resets the behavior to the libpng default.; *; * INTERACTION WITH USER CHUNK CALLBACKS:; * The per-chunk handling is always used when there is a png_user_chunk_ptr; * callback and the callback returns 0; the chunk is then always stored *unless*; * it is critical and the per-chunk setting is other than ALWAYS. Notice that; * the global default is *not* used in this case. (In effect the per-chunk; * value is incremented to at least IF_SAFE.); *; * IMPORTANT NOTE: this behavior will change in libpng 1.7 - the global and; * per-chunk defaults will be honored. If you want to preserve the current; * behavior when your callback returns 0 you must s",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:4041,Availability,error,error,4041,"HDR and IEND chunks must not be listed. Because this turns off the; * default handling for chunks that would otherwise be recognized the; * behavior of libpng transformations may well become incorrect!; *; * WRITE:; * When writing chunks the options only apply to the chunks specified by; * png_set_unknown_chunks (below), libpng will *always* write known chunks; * required by png_set_ calls and will always write the core critical chunks; * (as required for PLTE).; *; * Each chunk in the png_set_unknown_chunks list is looked up in the; * png_set_keep_unknown_chunks list to find the keep setting, this is then; * interpreted as follows:; *; * PNG_HANDLE_CHUNK_AS_DEFAULT:; * Write safe-to-copy chunks and write other chunks if the global; * default is set to _ALWAYS, otherwise don't write this chunk.; * PNG_HANDLE_CHUNK_NEVER:; * Do not write the chunk.; * PNG_HANDLE_CHUNK_IF_SAFE:; * Write the chunk if it is safe-to-copy, otherwise do not write it.; * PNG_HANDLE_CHUNK_ALWAYS:; * Write the chunk.; *; * Note that the default behavior is effectively the opposite of the read case -; * in read unknown chunks are not stored by default, in write they are written; * by default. Also the behavior of PNG_HANDLE_CHUNK_IF_SAFE is very different; * - on write the safe-to-copy bit is checked, on read the critical bit is; * checked and on read if the chunk is critical an error will be raised.; *; * num_chunks:; * ===========; * If num_chunks is positive, then the ""keep"" parameter specifies the manner; * for handling only those chunks appearing in the chunk_list array,; * otherwise the chunk list array is ignored.; *; * If num_chunks is 0 the ""keep"" parameter specifies the default behavior for; * unknown chunks, as described above.; *; * If num_chunks is negative, then the ""keep"" parameter specifies the manner; * for handling all unknown chunks plus all chunks recognized by libpng; * except for the IHDR, PLTE, tRNS, IDAT, and IEND chunks (which continue to; * be processed by libpng.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3352,Safety,safe,safe-to-copy,3352,"lways be handled by libpng and; * will never be stored in the unknown chunk list. Known chunks listed to; * png_set_keep_unknown_chunks will have no effect. If it is set then known; * chunks listed with a keep other than AS_DEFAULT will *never* be processed; * by libpng, in addition critical chunks must either be processed by the; * callback or saved.; *; * The IHDR and IEND chunks must not be listed. Because this turns off the; * default handling for chunks that would otherwise be recognized the; * behavior of libpng transformations may well become incorrect!; *; * WRITE:; * When writing chunks the options only apply to the chunks specified by; * png_set_unknown_chunks (below), libpng will *always* write known chunks; * required by png_set_ calls and will always write the core critical chunks; * (as required for PLTE).; *; * Each chunk in the png_set_unknown_chunks list is looked up in the; * png_set_keep_unknown_chunks list to find the keep setting, this is then; * interpreted as follows:; *; * PNG_HANDLE_CHUNK_AS_DEFAULT:; * Write safe-to-copy chunks and write other chunks if the global; * default is set to _ALWAYS, otherwise don't write this chunk.; * PNG_HANDLE_CHUNK_NEVER:; * Do not write the chunk.; * PNG_HANDLE_CHUNK_IF_SAFE:; * Write the chunk if it is safe-to-copy, otherwise do not write it.; * PNG_HANDLE_CHUNK_ALWAYS:; * Write the chunk.; *; * Note that the default behavior is effectively the opposite of the read case -; * in read unknown chunks are not stored by default, in write they are written; * by default. Also the behavior of PNG_HANDLE_CHUNK_IF_SAFE is very different; * - on write the safe-to-copy bit is checked, on read the critical bit is; * checked and on read if the chunk is critical an error will be raised.; *; * num_chunks:; * ===========; * If num_chunks is positive, then the ""keep"" parameter specifies the manner; * for handling only those chunks appearing in the chunk_list array,; * otherwise the chunk list array is ignored.; *; * If num_ch",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3584,Safety,safe,safe-to-copy,3584,"n addition critical chunks must either be processed by the; * callback or saved.; *; * The IHDR and IEND chunks must not be listed. Because this turns off the; * default handling for chunks that would otherwise be recognized the; * behavior of libpng transformations may well become incorrect!; *; * WRITE:; * When writing chunks the options only apply to the chunks specified by; * png_set_unknown_chunks (below), libpng will *always* write known chunks; * required by png_set_ calls and will always write the core critical chunks; * (as required for PLTE).; *; * Each chunk in the png_set_unknown_chunks list is looked up in the; * png_set_keep_unknown_chunks list to find the keep setting, this is then; * interpreted as follows:; *; * PNG_HANDLE_CHUNK_AS_DEFAULT:; * Write safe-to-copy chunks and write other chunks if the global; * default is set to _ALWAYS, otherwise don't write this chunk.; * PNG_HANDLE_CHUNK_NEVER:; * Do not write the chunk.; * PNG_HANDLE_CHUNK_IF_SAFE:; * Write the chunk if it is safe-to-copy, otherwise do not write it.; * PNG_HANDLE_CHUNK_ALWAYS:; * Write the chunk.; *; * Note that the default behavior is effectively the opposite of the read case -; * in read unknown chunks are not stored by default, in write they are written; * by default. Also the behavior of PNG_HANDLE_CHUNK_IF_SAFE is very different; * - on write the safe-to-copy bit is checked, on read the critical bit is; * checked and on read if the chunk is critical an error will be raised.; *; * num_chunks:; * ===========; * If num_chunks is positive, then the ""keep"" parameter specifies the manner; * for handling only those chunks appearing in the chunk_list array,; * otherwise the chunk list array is ignored.; *; * If num_chunks is 0 the ""keep"" parameter specifies the default behavior for; * unknown chunks, as described above.; *; * If num_chunks is negative, then the ""keep"" parameter specifies the manner; * for handling all unknown chunks plus all chunks recognized by libpng; * except for t",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3933,Safety,safe,safe-to-copy,3933,"HDR and IEND chunks must not be listed. Because this turns off the; * default handling for chunks that would otherwise be recognized the; * behavior of libpng transformations may well become incorrect!; *; * WRITE:; * When writing chunks the options only apply to the chunks specified by; * png_set_unknown_chunks (below), libpng will *always* write known chunks; * required by png_set_ calls and will always write the core critical chunks; * (as required for PLTE).; *; * Each chunk in the png_set_unknown_chunks list is looked up in the; * png_set_keep_unknown_chunks list to find the keep setting, this is then; * interpreted as follows:; *; * PNG_HANDLE_CHUNK_AS_DEFAULT:; * Write safe-to-copy chunks and write other chunks if the global; * default is set to _ALWAYS, otherwise don't write this chunk.; * PNG_HANDLE_CHUNK_NEVER:; * Do not write the chunk.; * PNG_HANDLE_CHUNK_IF_SAFE:; * Write the chunk if it is safe-to-copy, otherwise do not write it.; * PNG_HANDLE_CHUNK_ALWAYS:; * Write the chunk.; *; * Note that the default behavior is effectively the opposite of the read case -; * in read unknown chunks are not stored by default, in write they are written; * by default. Also the behavior of PNG_HANDLE_CHUNK_IF_SAFE is very different; * - on write the safe-to-copy bit is checked, on read the critical bit is; * checked and on read if the chunk is critical an error will be raised.; *; * num_chunks:; * ===========; * If num_chunks is positive, then the ""keep"" parameter specifies the manner; * for handling only those chunks appearing in the chunk_list array,; * otherwise the chunk list array is ignored.; *; * If num_chunks is 0 the ""keep"" parameter specifies the default behavior for; * unknown chunks, as described above.; *; * If num_chunks is negative, then the ""keep"" parameter specifies the manner; * for handling all unknown chunks plus all chunks recognized by libpng; * except for the IHDR, PLTE, tRNS, IDAT, and IEND chunks (which continue to; * be processed by libpng.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1345,Usability,simpl,simply,1345,"o have chunk-specific handling on read in code that must; * work on earlier versions you must use a user chunk callback to specify the; * desired handling (keep or discard.); *; * The 'keep' parameter is a PNG_HANDLE_CHUNK_ value as listed below. The; * parameter is interpreted as follows:; *; * READ:; * PNG_HANDLE_CHUNK_AS_DEFAULT:; * Known chunks: do normal libpng processing, do not keep the chunk (but; * see the comments below about PNG_HANDLE_AS_UNKNOWN_SUPPORTED); * Unknown chunks: for a specific chunk use the global default, when used; * as the default discard the chunk data.; * PNG_HANDLE_CHUNK_NEVER:; * Discard the chunk data.; * PNG_HANDLE_CHUNK_IF_SAFE:; * Keep the chunk data if the chunk is not critical else raise a chunk; * error.; * PNG_HANDLE_CHUNK_ALWAYS:; * Keep the chunk data.; *; * If the chunk data is saved it can be retrieved using png_get_unknown_chunks,; * below. Notice that specifying ""AS_DEFAULT"" as a global default is equivalent; * to specifying ""NEVER"", however when ""AS_DEFAULT"" is used for specific chunks; * it simply resets the behavior to the libpng default.; *; * INTERACTION WITH USER CHUNK CALLBACKS:; * The per-chunk handling is always used when there is a png_user_chunk_ptr; * callback and the callback returns 0; the chunk is then always stored *unless*; * it is critical and the per-chunk setting is other than ALWAYS. Notice that; * the global default is *not* used in this case. (In effect the per-chunk; * value is incremented to at least IF_SAFE.); *; * IMPORTANT NOTE: this behavior will change in libpng 1.7 - the global and; * per-chunk defaults will be honored. If you want to preserve the current; * behavior when your callback returns 0 you must set PNG_HANDLE_CHUNK_IF_SAFE; * as the default - if you don't do this libpng 1.6 will issue a warning.; *; * If you want unhandled unknown chunks to be discarded in libpng 1.6 and; * earlier simply return '1' (handled).; *; * PNG_HANDLE_AS_UNKNOWN_SUPPORTED:; * If this is *not* set known ch",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:2191,Usability,simpl,simply,2191,"that specifying ""AS_DEFAULT"" as a global default is equivalent; * to specifying ""NEVER"", however when ""AS_DEFAULT"" is used for specific chunks; * it simply resets the behavior to the libpng default.; *; * INTERACTION WITH USER CHUNK CALLBACKS:; * The per-chunk handling is always used when there is a png_user_chunk_ptr; * callback and the callback returns 0; the chunk is then always stored *unless*; * it is critical and the per-chunk setting is other than ALWAYS. Notice that; * the global default is *not* used in this case. (In effect the per-chunk; * value is incremented to at least IF_SAFE.); *; * IMPORTANT NOTE: this behavior will change in libpng 1.7 - the global and; * per-chunk defaults will be honored. If you want to preserve the current; * behavior when your callback returns 0 you must set PNG_HANDLE_CHUNK_IF_SAFE; * as the default - if you don't do this libpng 1.6 will issue a warning.; *; * If you want unhandled unknown chunks to be discarded in libpng 1.6 and; * earlier simply return '1' (handled).; *; * PNG_HANDLE_AS_UNKNOWN_SUPPORTED:; * If this is *not* set known chunks will always be handled by libpng and; * will never be stored in the unknown chunk list. Known chunks listed to; * png_set_keep_unknown_chunks will have no effect. If it is set then known; * chunks listed with a keep other than AS_DEFAULT will *never* be processed; * by libpng, in addition critical chunks must either be processed by the; * callback or saved.; *; * The IHDR and IEND chunks must not be listed. Because this turns off the; * default handling for chunks that would otherwise be recognized the; * behavior of libpng transformations may well become incorrect!; *; * WRITE:; * When writing chunks the options only apply to the chunks specified by; * png_set_unknown_chunks (below), libpng will *always* write known chunks; * required by png_set_ calls and will always write the core critical chunks; * (as required for PLTE).; *; * Each chunk in the png_set_unknown_chunks list is looked u",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:29,Integrability,rout,routine,29,"/* NOTE: prior to 1.6.0 this routine set the 'location' field of the added; * unknowns to the location currently stored in the png_struct. This is; * invariably the wrong value on write. To fix this call the following API; * for each chunk in the list with the correct location. If you know your; * code won't be compiled on earlier versions you can rely on; * png_set_unknown_chunks(write-ptr, png_get_unknown_chunks(read-ptr)) doing; * the correct thing.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:23,Availability,error,error,23,"/* Strip the prepended error numbers (""#nnn "") from error and warning; * messages before passing them to the error or warning handler.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:52,Availability,error,error,52,"/* Strip the prepended error numbers (""#nnn "") from error and warning; * messages before passing them to the error or warning handler.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:109,Availability,error,error,109,"/* Strip the prepended error numbers (""#nnn "") from error and warning; * messages before passing them to the error or warning handler.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:73,Integrability,message,messages,73,"/* Strip the prepended error numbers (""#nnn "") from error and warning; * messages before passing them to the error or warning handler.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:164,Availability,mask,mask,164,/* Two macros which return a boolean (0 or 1) saying whether the given row; * or column is in a particular pass. These use a common utility macro that; * returns a mask for a given pass - the offset 'off' selects the row or; * column version. The mask has the appropriate bit set for each column in; * the tile.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:247,Availability,mask,mask,247,/* Two macros which return a boolean (0 or 1) saying whether the given row; * or column is in a particular pass. These use a common utility macro that; * returns a mask for a given pass - the offset 'off' selects the row or; * column version. The mask has the appropriate bit set for each column in; * the tile.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:14,Integrability,rout,routines,14,"/* With these routines we avoid an integer divide, which will be slower on; * most machines. However, it does take more operations than the corresponding; * divide method, so it may be slower on a few RISC systems. There are two; * shifts (by 8 or 16 bits) and an addition, versus a single integer divide.; *; * Note that the rounding factors are NOT supposed to be the same! 128 and; * 32768 are correct for the NODIV code; 127 and 32767 are correct for the; * standard method.; *; * [Optimized code by Greg Roelofs and Mark Adler...blame us for bugs. :-) ]; */; /* fg and bg should be in `gamma 1.0' space; alpha is the opacity */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:486,Performance,Optimiz,Optimized,486,"/* With these routines we avoid an integer divide, which will be slower on; * most machines. However, it does take more operations than the corresponding; * divide method, so it may be slower on a few RISC systems. There are two; * shifts (by 8 or 16 bits) and an addition, versus a single integer divide.; *; * Note that the rounding factors are NOT supposed to be the same! 128 and; * 32768 are correct for the NODIV code; 127 and 32767 are correct for the; * standard method.; *; * [Optimized code by Greg Roelofs and Mark Adler...blame us for bugs. :-) ]; */; /* fg and bg should be in `gamma 1.0' space; alpha is the opacity */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:26,Safety,avoid,avoid,26,"/* With these routines we avoid an integer divide, which will be slower on; * most machines. However, it does take more operations than the corresponding; * divide method, so it may be slower on a few RISC systems. There are two; * shifts (by 8 or 16 bits) and an addition, versus a single integer divide.; *; * Note that the rounding factors are NOT supposed to be the same! 128 and; * 32768 are correct for the NODIV code; 127 and 32767 are correct for the; * standard method.; *; * [Optimized code by Greg Roelofs and Mark Adler...blame us for bugs. :-) ]; */; /* fg and bg should be in `gamma 1.0' space; alpha is the opacity */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:129,Safety,avoid,avoid,129,"/* Place a 16-bit number into a buffer in PNG byte order.; * The parameter is declared unsigned int, not png_uint_16,; * just to avoid potential problems on pre-ANSI C compilers.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:92,Integrability,rout,routine,92,"/* Inline macros to do direct reads of bytes from the input buffer.; * The png_get_int_32() routine assumes we are using two's complement; * format for negative values, which is almost certainly true.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1291,Energy Efficiency,Allocate,Allocate,1291,"ou don't understand what follows.; *; * The simplified API hides the details of both libpng and the PNG file format; * itself. It allows PNG files to be read into a very limited number of; * in-memory bitmap formats or to be written from the same formats. If these; * formats do not accommodate your needs then you can, and should, use the more; * sophisticated APIs above - these support a wide variety of in-memory formats; * and a wide variety of sophisticated transformations to those formats as well; * as a wide variety of APIs to manipulate ancillary information.; *; * To read a PNG file using the simplified API:; *; * 1) Declare a 'png_image' structure (see below) on the stack, set the; * version field to PNG_IMAGE_VERSION and the 'opaque' pointer to NULL; * (this is REQUIRED, your program may crash if you don't do it.); * 2) Call the appropriate png_image_begin_read... function.; * 3) Set the png_image 'format' member to the required sample format.; * 4) Allocate a buffer for the image and, if required, the color-map.; * 5) Call png_image_finish_read to read the image and, if required, the; * color-map into your buffers.; *; * There are no restrictions on the format of the PNG input itself; all valid; * color types, bit depths, and interlace methods are acceptable, and the; * input image is transformed as necessary to the requested in-memory format; * during the png_image_finish_read() step. The only caveat is that if you; * request a color-mapped image from a PNG that is full-color or makes; * complex use of an alpha channel the transformation is extremely lossy and the; * result may look terrible.; *; * To write a PNG file using the simplified API:; *; * 1) Declare a 'png_image' structure on the stack and memset() it to all zero.; * 2) Initialize the members of the structure that describe the image, setting; * the 'format' member to the format of the image samples.; * 3) Call the appropriate png_image_write... function with a pointer to the; * image and, if nece",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:126,Usability,SIMPL,SIMPLIFIED,126,"/* CHECK_FOR_INVALID_INDEX */; /*******************************************************************************; * Section 5: SIMPLIFIED API; *******************************************************************************; *; * Please read the documentation in libpng-manual.txt (TODO: write said; * documentation) if you don't understand what follows.; *; * The simplified API hides the details of both libpng and the PNG file format; * itself. It allows PNG files to be read into a very limited number of; * in-memory bitmap formats or to be written from the same formats. If these; * formats do not accommodate your needs then you can, and should, use the more; * sophisticated APIs above - these support a wide variety of in-memory formats; * and a wide variety of sophisticated transformations to those formats as well; * as a wide variety of APIs to manipulate ancillary information.; *; * To read a PNG file using the simplified API:; *; * 1) Declare a 'png_image' structure (see below) on the stack, set the; * version field to PNG_IMAGE_VERSION and the 'opaque' pointer to NULL; * (this is REQUIRED, your program may crash if you don't do it.); * 2) Call the appropriate png_image_begin_read... function.; * 3) Set the png_image 'format' member to the required sample format.; * 4) Allocate a buffer for the image and, if required, the color-map.; * 5) Call png_image_finish_read to read the image and, if required, the; * color-map into your buffers.; *; * There are no restrictions on the format of the PNG input itself; all valid; * color types, bit depths, and interlace methods are acceptable, and the; * input image is transformed as necessary to the requested in-memory format; * during the png_image_finish_read() step. The only caveat is that if you; * request a color-mapped image from a PNG that is full-color or makes; * complex use of an alpha channel the transformation is extremely lossy and the; * result may look terrible.; *; * To write a PNG file using the simplified API:;",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:363,Usability,simpl,simplified,363,"/* CHECK_FOR_INVALID_INDEX */; /*******************************************************************************; * Section 5: SIMPLIFIED API; *******************************************************************************; *; * Please read the documentation in libpng-manual.txt (TODO: write said; * documentation) if you don't understand what follows.; *; * The simplified API hides the details of both libpng and the PNG file format; * itself. It allows PNG files to be read into a very limited number of; * in-memory bitmap formats or to be written from the same formats. If these; * formats do not accommodate your needs then you can, and should, use the more; * sophisticated APIs above - these support a wide variety of in-memory formats; * and a wide variety of sophisticated transformations to those formats as well; * as a wide variety of APIs to manipulate ancillary information.; *; * To read a PNG file using the simplified API:; *; * 1) Declare a 'png_image' structure (see below) on the stack, set the; * version field to PNG_IMAGE_VERSION and the 'opaque' pointer to NULL; * (this is REQUIRED, your program may crash if you don't do it.); * 2) Call the appropriate png_image_begin_read... function.; * 3) Set the png_image 'format' member to the required sample format.; * 4) Allocate a buffer for the image and, if required, the color-map.; * 5) Call png_image_finish_read to read the image and, if required, the; * color-map into your buffers.; *; * There are no restrictions on the format of the PNG input itself; all valid; * color types, bit depths, and interlace methods are acceptable, and the; * input image is transformed as necessary to the requested in-memory format; * during the png_image_finish_read() step. The only caveat is that if you; * request a color-mapped image from a PNG that is full-color or makes; * complex use of an alpha channel the transformation is extremely lossy and the; * result may look terrible.; *; * To write a PNG file using the simplified API:;",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:925,Usability,simpl,simplified,925,"_INDEX */; /*******************************************************************************; * Section 5: SIMPLIFIED API; *******************************************************************************; *; * Please read the documentation in libpng-manual.txt (TODO: write said; * documentation) if you don't understand what follows.; *; * The simplified API hides the details of both libpng and the PNG file format; * itself. It allows PNG files to be read into a very limited number of; * in-memory bitmap formats or to be written from the same formats. If these; * formats do not accommodate your needs then you can, and should, use the more; * sophisticated APIs above - these support a wide variety of in-memory formats; * and a wide variety of sophisticated transformations to those formats as well; * as a wide variety of APIs to manipulate ancillary information.; *; * To read a PNG file using the simplified API:; *; * 1) Declare a 'png_image' structure (see below) on the stack, set the; * version field to PNG_IMAGE_VERSION and the 'opaque' pointer to NULL; * (this is REQUIRED, your program may crash if you don't do it.); * 2) Call the appropriate png_image_begin_read... function.; * 3) Set the png_image 'format' member to the required sample format.; * 4) Allocate a buffer for the image and, if required, the color-map.; * 5) Call png_image_finish_read to read the image and, if required, the; * color-map into your buffers.; *; * There are no restrictions on the format of the PNG input itself; all valid; * color types, bit depths, and interlace methods are acceptable, and the; * input image is transformed as necessary to the requested in-memory format; * during the png_image_finish_read() step. The only caveat is that if you; * request a color-mapped image from a PNG that is full-color or makes; * complex use of an alpha channel the transformation is extremely lossy and the; * result may look terrible.; *; * To write a PNG file using the simplified API:; *; * 1) Declare a ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1985,Usability,simpl,simplified,1985,"e written from the same formats. If these; * formats do not accommodate your needs then you can, and should, use the more; * sophisticated APIs above - these support a wide variety of in-memory formats; * and a wide variety of sophisticated transformations to those formats as well; * as a wide variety of APIs to manipulate ancillary information.; *; * To read a PNG file using the simplified API:; *; * 1) Declare a 'png_image' structure (see below) on the stack, set the; * version field to PNG_IMAGE_VERSION and the 'opaque' pointer to NULL; * (this is REQUIRED, your program may crash if you don't do it.); * 2) Call the appropriate png_image_begin_read... function.; * 3) Set the png_image 'format' member to the required sample format.; * 4) Allocate a buffer for the image and, if required, the color-map.; * 5) Call png_image_finish_read to read the image and, if required, the; * color-map into your buffers.; *; * There are no restrictions on the format of the PNG input itself; all valid; * color types, bit depths, and interlace methods are acceptable, and the; * input image is transformed as necessary to the requested in-memory format; * during the png_image_finish_read() step. The only caveat is that if you; * request a color-mapped image from a PNG that is full-color or makes; * complex use of an alpha channel the transformation is extremely lossy and the; * result may look terrible.; *; * To write a PNG file using the simplified API:; *; * 1) Declare a 'png_image' structure on the stack and memset() it to all zero.; * 2) Initialize the members of the structure that describe the image, setting; * the 'format' member to the format of the image samples.; * 3) Call the appropriate png_image_write... function with a pointer to the; * image and, if necessary, the color-map to write the PNG data.; *; * png_image is a structure that describes the in-memory format of an image; * when it is being read or defines the in-memory format of an image that you; * need to write:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:9,Availability,mask,mask,9,/* A bit mask containing informational flags */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:64,Availability,error,error,64,"/* Number of entries in the color-map */; /* In the event of an error or warning the following field will be set to a; * non-zero value and the 'message' field will contain a '\0' terminated; * string with the libpng error or warning message. If both warnings and; * an error were encountered, only the error is recorded. If there; * are multiple warnings, only the first one is recorded.; *; * The upper 30 bits of this value are reserved, the low two bits contain; * a value as follows:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:217,Availability,error,error,217,"/* Number of entries in the color-map */; /* In the event of an error or warning the following field will be set to a; * non-zero value and the 'message' field will contain a '\0' terminated; * string with the libpng error or warning message. If both warnings and; * an error were encountered, only the error is recorded. If there; * are multiple warnings, only the first one is recorded.; *; * The upper 30 bits of this value are reserved, the low two bits contain; * a value as follows:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:270,Availability,error,error,270,"/* Number of entries in the color-map */; /* In the event of an error or warning the following field will be set to a; * non-zero value and the 'message' field will contain a '\0' terminated; * string with the libpng error or warning message. If both warnings and; * an error were encountered, only the error is recorded. If there; * are multiple warnings, only the first one is recorded.; *; * The upper 30 bits of this value are reserved, the low two bits contain; * a value as follows:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:303,Availability,error,error,303,"/* Number of entries in the color-map */; /* In the event of an error or warning the following field will be set to a; * non-zero value and the 'message' field will contain a '\0' terminated; * string with the libpng error or warning message. If both warnings and; * an error were encountered, only the error is recorded. If there; * are multiple warnings, only the first one is recorded.; *; * The upper 30 bits of this value are reserved, the low two bits contain; * a value as follows:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:145,Integrability,message,message,145,"/* Number of entries in the color-map */; /* In the event of an error or warning the following field will be set to a; * non-zero value and the 'message' field will contain a '\0' terminated; * string with the libpng error or warning message. If both warnings and; * an error were encountered, only the error is recorded. If there; * are multiple warnings, only the first one is recorded.; *; * The upper 30 bits of this value are reserved, the low two bits contain; * a value as follows:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:234,Integrability,message,message,234,"/* Number of entries in the color-map */; /* In the event of an error or warning the following field will be set to a; * non-zero value and the 'message' field will contain a '\0' terminated; * string with the libpng error or warning message. If both warnings and; * an error were encountered, only the error is recorded. If there; * are multiple warnings, only the first one is recorded.; *; * The upper 30 bits of this value are reserved, the low two bits contain; * a value as follows:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:80,Availability,failure,failure,80,/*; * The result is a two-bit code such that a value more than 1 indicates; * a failure in the API just called:; *; * 0 - no warning or error; * 1 - warning; * 2 - error; * 3 - error preceded by warning; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:136,Availability,error,error,136,/*; * The result is a two-bit code such that a value more than 1 indicates; * a failure in the API just called:; *; * 0 - no warning or error; * 1 - warning; * 2 - error; * 3 - error preceded by warning; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:164,Availability,error,error,164,/*; * The result is a two-bit code such that a value more than 1 indicates; * a failure in the API just called:; *; * 0 - no warning or error; * 1 - warning; * 2 - error; * 3 - error preceded by warning; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:177,Availability,error,error,177,/*; * The result is a two-bit code such that a value more than 1 indicates; * a failure in the API just called:; *; * 0 - no warning or error; * 1 - warning; * 2 - error; * 3 - error preceded by warning; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3041,Availability,error,errors,3041,"note pixel coverage; * of the color or luminance channels and is returned as an associated alpha; * channel: the color/gray channels are scaled (pre-multiplied) by the alpha; * value.; *; * The samples are either contained directly in the image data, between 1 and 8; * bytes per pixel according to the encoding, or are held in a color-map indexed; * by bytes in the image data. In the case of a color-map the color-map entries; * are individual samples, encoded as above, and the image data has one byte per; * pixel to select the relevant sample from the color-map.; */; /* PNG_FORMAT_*; *; * #defines to be used in png_image::format. Each #define identifies a; * particular layout of sample data and, if present, alpha values. There are; * separate defines for each of the two component encodings.; *; * A format is built up using single bit flag values. All combinations are; * valid. Formats can be built up from the flag values or you can use one of; * the predefined values below. When testing formats always use the FORMAT_FLAG; * macros to test for individual features - future versions of the library may; * add new flags.; *; * When reading or writing color-mapped images the format should be set to the; * format of the entries in the color-map then png_image_{read,write}_colormap; * called to read or write the color-map and set the format correctly for the; * image data. Do not set the PNG_FORMAT_FLAG_COLORMAP bit directly!; *; * NOTE: libpng can be built with particular features disabled. If you see; * compiler errors because the definition of one of the following flags has been; * compiled out it is because libpng does not have the required support. It is; * possible, however, for the libpng configuration to enable the format on just; * read or just write; in that case you may see an error at run time. You can; * guard against this by checking for the definition of the appropriate; * ""_SUPPORTED"" macro, one of:; *; * PNG_SIMPLIFIED_{READ,WRITE}_{BGR,AFIRST}_SUPPORTED; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3320,Availability,error,error,3320,"note pixel coverage; * of the color or luminance channels and is returned as an associated alpha; * channel: the color/gray channels are scaled (pre-multiplied) by the alpha; * value.; *; * The samples are either contained directly in the image data, between 1 and 8; * bytes per pixel according to the encoding, or are held in a color-map indexed; * by bytes in the image data. In the case of a color-map the color-map entries; * are individual samples, encoded as above, and the image data has one byte per; * pixel to select the relevant sample from the color-map.; */; /* PNG_FORMAT_*; *; * #defines to be used in png_image::format. Each #define identifies a; * particular layout of sample data and, if present, alpha values. There are; * separate defines for each of the two component encodings.; *; * A format is built up using single bit flag values. All combinations are; * valid. Formats can be built up from the flag values or you can use one of; * the predefined values below. When testing formats always use the FORMAT_FLAG; * macros to test for individual features - future versions of the library may; * add new flags.; *; * When reading or writing color-mapped images the format should be set to the; * format of the entries in the color-map then png_image_{read,write}_colormap; * called to read or write the color-map and set the format correctly for the; * image data. Do not set the PNG_FORMAT_FLAG_COLORMAP bit directly!; *; * NOTE: libpng can be built with particular features disabled. If you see; * compiler errors because the definition of one of the following flags has been; * compiled out it is because libpng does not have the required support. It is; * possible, however, for the libpng configuration to enable the format on just; * read or just write; in that case you may see an error at run time. You can; * guard against this by checking for the definition of the appropriate; * ""_SUPPORTED"" macro, one of:; *; * PNG_SIMPLIFIED_{READ,WRITE}_{BGR,AFIRST}_SUPPORTED; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3226,Deployability,configurat,configuration,3226,"note pixel coverage; * of the color or luminance channels and is returned as an associated alpha; * channel: the color/gray channels are scaled (pre-multiplied) by the alpha; * value.; *; * The samples are either contained directly in the image data, between 1 and 8; * bytes per pixel according to the encoding, or are held in a color-map indexed; * by bytes in the image data. In the case of a color-map the color-map entries; * are individual samples, encoded as above, and the image data has one byte per; * pixel to select the relevant sample from the color-map.; */; /* PNG_FORMAT_*; *; * #defines to be used in png_image::format. Each #define identifies a; * particular layout of sample data and, if present, alpha values. There are; * separate defines for each of the two component encodings.; *; * A format is built up using single bit flag values. All combinations are; * valid. Formats can be built up from the flag values or you can use one of; * the predefined values below. When testing formats always use the FORMAT_FLAG; * macros to test for individual features - future versions of the library may; * add new flags.; *; * When reading or writing color-mapped images the format should be set to the; * format of the entries in the color-map then png_image_{read,write}_colormap; * called to read or write the color-map and set the format correctly for the; * image data. Do not set the PNG_FORMAT_FLAG_COLORMAP bit directly!; *; * NOTE: libpng can be built with particular features disabled. If you see; * compiler errors because the definition of one of the following flags has been; * compiled out it is because libpng does not have the required support. It is; * possible, however, for the libpng configuration to enable the format on just; * read or just write; in that case you may see an error at run time. You can; * guard against this by checking for the definition of the appropriate; * ""_SUPPORTED"" macro, one of:; *; * PNG_SIMPLIFIED_{READ,WRITE}_{BGR,AFIRST}_SUPPORTED; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:242,Energy Efficiency,green,green,242,"/* The samples of the image have one to four channels whose components have; * original values in the range 0 to 1.0:; *; * 1: A single gray or luminance channel (G).; * 2: A gray/luminance channel and an alpha channel (GA).; * 3: Three red, green, blue color channels (RGB).; * 4: Three color channels and an alpha channel (RGBA).; *; * The components are encoded in one of two ways:; *; * a) As a small integer, value 0..255, contained in a single byte. For the; * alpha channel the original value is simply value/255. For the color or; * luminance channels the value is encoded according to the sRGB specification; * and matches the 8-bit format expected by typical display devices.; *; * The color/gray channels are not scaled (pre-multiplied) by the alpha; * channel and are suitable for passing to color management software.; *; * b) As a value in the range 0..65535, contained in a 2-byte integer. All; * channels can be converted to the original value by dividing by 65535; all; * channels are linear. Color channels use the RGB encoding (RGB end-points) of; * the sRGB specification. This encoding is identified by the; * PNG_FORMAT_FLAG_LINEAR flag below.; *; * When the simplified API needs to convert between sRGB and linear colorspaces,; * the actual sRGB transfer curve defined in the sRGB specification (see the; * article at <https://en.wikipedia.org/wiki/SRGB>) is used, not the gamma=1/2.2; * approximation used elsewhere in libpng.; *; * When an alpha channel is present it is expected to denote pixel coverage; * of the color or luminance channels and is returned as an associated alpha; * channel: the color/gray channels are scaled (pre-multiplied) by the alpha; * value.; *; * The samples are either contained directly in the image data, between 1 and 8; * bytes per pixel according to the encoding, or are held in a color-map indexed; * by bytes in the image data. In the case of a color-map the color-map entries; * are individual samples, encoded as above, and the image data",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3226,Modifiability,config,configuration,3226,"note pixel coverage; * of the color or luminance channels and is returned as an associated alpha; * channel: the color/gray channels are scaled (pre-multiplied) by the alpha; * value.; *; * The samples are either contained directly in the image data, between 1 and 8; * bytes per pixel according to the encoding, or are held in a color-map indexed; * by bytes in the image data. In the case of a color-map the color-map entries; * are individual samples, encoded as above, and the image data has one byte per; * pixel to select the relevant sample from the color-map.; */; /* PNG_FORMAT_*; *; * #defines to be used in png_image::format. Each #define identifies a; * particular layout of sample data and, if present, alpha values. There are; * separate defines for each of the two component encodings.; *; * A format is built up using single bit flag values. All combinations are; * valid. Formats can be built up from the flag values or you can use one of; * the predefined values below. When testing formats always use the FORMAT_FLAG; * macros to test for individual features - future versions of the library may; * add new flags.; *; * When reading or writing color-mapped images the format should be set to the; * format of the entries in the color-map then png_image_{read,write}_colormap; * called to read or write the color-map and set the format correctly for the; * image data. Do not set the PNG_FORMAT_FLAG_COLORMAP bit directly!; *; * NOTE: libpng can be built with particular features disabled. If you see; * compiler errors because the definition of one of the following flags has been; * compiled out it is because libpng does not have the required support. It is; * possible, however, for the libpng configuration to enable the format on just; * read or just write; in that case you may see an error at run time. You can; * guard against this by checking for the definition of the appropriate; * ""_SUPPORTED"" macro, one of:; *; * PNG_SIMPLIFIED_{READ,WRITE}_{BGR,AFIRST}_SUPPORTED; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:2503,Testability,test,testing,2503,"note pixel coverage; * of the color or luminance channels and is returned as an associated alpha; * channel: the color/gray channels are scaled (pre-multiplied) by the alpha; * value.; *; * The samples are either contained directly in the image data, between 1 and 8; * bytes per pixel according to the encoding, or are held in a color-map indexed; * by bytes in the image data. In the case of a color-map the color-map entries; * are individual samples, encoded as above, and the image data has one byte per; * pixel to select the relevant sample from the color-map.; */; /* PNG_FORMAT_*; *; * #defines to be used in png_image::format. Each #define identifies a; * particular layout of sample data and, if present, alpha values. There are; * separate defines for each of the two component encodings.; *; * A format is built up using single bit flag values. All combinations are; * valid. Formats can be built up from the flag values or you can use one of; * the predefined values below. When testing formats always use the FORMAT_FLAG; * macros to test for individual features - future versions of the library may; * add new flags.; *; * When reading or writing color-mapped images the format should be set to the; * format of the entries in the color-map then png_image_{read,write}_colormap; * called to read or write the color-map and set the format correctly for the; * image data. Do not set the PNG_FORMAT_FLAG_COLORMAP bit directly!; *; * NOTE: libpng can be built with particular features disabled. If you see; * compiler errors because the definition of one of the following flags has been; * compiled out it is because libpng does not have the required support. It is; * possible, however, for the libpng configuration to enable the format on just; * read or just write; in that case you may see an error at run time. You can; * guard against this by checking for the definition of the appropriate; * ""_SUPPORTED"" macro, one of:; *; * PNG_SIMPLIFIED_{READ,WRITE}_{BGR,AFIRST}_SUPPORTED; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:2559,Testability,test,test,2559,"note pixel coverage; * of the color or luminance channels and is returned as an associated alpha; * channel: the color/gray channels are scaled (pre-multiplied) by the alpha; * value.; *; * The samples are either contained directly in the image data, between 1 and 8; * bytes per pixel according to the encoding, or are held in a color-map indexed; * by bytes in the image data. In the case of a color-map the color-map entries; * are individual samples, encoded as above, and the image data has one byte per; * pixel to select the relevant sample from the color-map.; */; /* PNG_FORMAT_*; *; * #defines to be used in png_image::format. Each #define identifies a; * particular layout of sample data and, if present, alpha values. There are; * separate defines for each of the two component encodings.; *; * A format is built up using single bit flag values. All combinations are; * valid. Formats can be built up from the flag values or you can use one of; * the predefined values below. When testing formats always use the FORMAT_FLAG; * macros to test for individual features - future versions of the library may; * add new flags.; *; * When reading or writing color-mapped images the format should be set to the; * format of the entries in the color-map then png_image_{read,write}_colormap; * called to read or write the color-map and set the format correctly for the; * image data. Do not set the PNG_FORMAT_FLAG_COLORMAP bit directly!; *; * NOTE: libpng can be built with particular features disabled. If you see; * compiler errors because the definition of one of the following flags has been; * compiled out it is because libpng does not have the required support. It is; * possible, however, for the libpng configuration to enable the format on just; * read or just write; in that case you may see an error at run time. You can; * guard against this by checking for the definition of the appropriate; * ""_SUPPORTED"" macro, one of:; *; * PNG_SIMPLIFIED_{READ,WRITE}_{BGR,AFIRST}_SUPPORTED; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:503,Usability,simpl,simply,503,"/* The samples of the image have one to four channels whose components have; * original values in the range 0 to 1.0:; *; * 1: A single gray or luminance channel (G).; * 2: A gray/luminance channel and an alpha channel (GA).; * 3: Three red, green, blue color channels (RGB).; * 4: Three color channels and an alpha channel (RGBA).; *; * The components are encoded in one of two ways:; *; * a) As a small integer, value 0..255, contained in a single byte. For the; * alpha channel the original value is simply value/255. For the color or; * luminance channels the value is encoded according to the sRGB specification; * and matches the 8-bit format expected by typical display devices.; *; * The color/gray channels are not scaled (pre-multiplied) by the alpha; * channel and are suitable for passing to color management software.; *; * b) As a value in the range 0..65535, contained in a 2-byte integer. All; * channels can be converted to the original value by dividing by 65535; all; * channels are linear. Color channels use the RGB encoding (RGB end-points) of; * the sRGB specification. This encoding is identified by the; * PNG_FORMAT_FLAG_LINEAR flag below.; *; * When the simplified API needs to convert between sRGB and linear colorspaces,; * the actual sRGB transfer curve defined in the sRGB specification (see the; * article at <https://en.wikipedia.org/wiki/SRGB>) is used, not the gamma=1/2.2; * approximation used elsewhere in libpng.; *; * When an alpha channel is present it is expected to denote pixel coverage; * of the color or luminance channels and is returned as an associated alpha; * channel: the color/gray channels are scaled (pre-multiplied) by the alpha; * value.; *; * The samples are either contained directly in the image data, between 1 and 8; * bytes per pixel according to the encoding, or are held in a color-map indexed; * by bytes in the image data. In the case of a color-map the color-map entries; * are individual samples, encoded as above, and the image data",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1181,Usability,simpl,simplified,1181," channels (RGB).; * 4: Three color channels and an alpha channel (RGBA).; *; * The components are encoded in one of two ways:; *; * a) As a small integer, value 0..255, contained in a single byte. For the; * alpha channel the original value is simply value/255. For the color or; * luminance channels the value is encoded according to the sRGB specification; * and matches the 8-bit format expected by typical display devices.; *; * The color/gray channels are not scaled (pre-multiplied) by the alpha; * channel and are suitable for passing to color management software.; *; * b) As a value in the range 0..65535, contained in a 2-byte integer. All; * channels can be converted to the original value by dividing by 65535; all; * channels are linear. Color channels use the RGB encoding (RGB end-points) of; * the sRGB specification. This encoding is identified by the; * PNG_FORMAT_FLAG_LINEAR flag below.; *; * When the simplified API needs to convert between sRGB and linear colorspaces,; * the actual sRGB transfer curve defined in the sRGB specification (see the; * article at <https://en.wikipedia.org/wiki/SRGB>) is used, not the gamma=1/2.2; * approximation used elsewhere in libpng.; *; * When an alpha channel is present it is expected to denote pixel coverage; * of the color or luminance channels and is returned as an associated alpha; * channel: the color/gray channels are scaled (pre-multiplied) by the alpha; * value.; *; * The samples are either contained directly in the image data, between 1 and 8; * bytes per pixel according to the encoding, or are held in a color-map indexed; * by bytes in the image data. In the case of a color-map the color-map entries; * are individual samples, encoded as above, and the image data has one byte per; * pixel to select the relevant sample from the color-map.; */; /* PNG_FORMAT_*; *; * #defines to be used in png_image::format. Each #define identifies a; * particular layout of sample data and, if present, alpha values. There are; * separa",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:837,Testability,test,tests,837,"/* PNG_IMAGE macros; *; * These are convenience macros to derive information from a png_image; * structure. The PNG_IMAGE_SAMPLE_ macros return values appropriate to the; * actual image sample values - either the entries in the color-map or the; * pixels in the image. The PNG_IMAGE_PIXEL_ macros return corresponding values; * for the pixels and will always return 1 for color-mapped formats. The; * remaining macros return information about the rows in the image and the; * complete image.; *; * NOTE: All the macros that take a png_image::format parameter are compile time; * constants if the format parameter is, itself, a constant. Therefore these; * macros can be used in array declarations and case labels where required.; * Similarly the macros are also pre-processor constants (sizeof is not used) so; * they can be used in #if tests.; *; * First the information about the samples.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:132,Energy Efficiency,allocate,allocate,132,/* The maximum size of the color-map required by the format expressed in a; * count of components. This can be used to compile-time allocate a; * color-map:; *; * png_uint_16 colormap[PNG_IMAGE_MAXIMUM_COLORMAP_COMPONENTS(linear_fmt)];; *; * png_byte colormap[PNG_IMAGE_MAXIMUM_COLORMAP_COMPONENTS(sRGB_fmt)];; *; * Alternatively use the PNG_IMAGE_COLORMAP_SIZE macro below to use the; * information from one of the png_image_begin_read_ APIs and dynamically; * allocate the required memory.; */; /* Corresponding information about the pixels */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:462,Energy Efficiency,allocate,allocate,462,/* The maximum size of the color-map required by the format expressed in a; * count of components. This can be used to compile-time allocate a; * color-map:; *; * png_uint_16 colormap[PNG_IMAGE_MAXIMUM_COLORMAP_COMPONENTS(linear_fmt)];; *; * png_byte colormap[PNG_IMAGE_MAXIMUM_COLORMAP_COMPONENTS(sRGB_fmt)];; *; * Alternatively use the PNG_IMAGE_COLORMAP_SIZE macro below to use the; * information from one of the png_image_begin_read_ APIs and dynamically; * allocate the required memory.; */; /* Corresponding information about the pixels */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:241,Energy Efficiency,allocate,allocate,241,"/* Return the size, in bytes, of the color-map of this image. If the image; * format is not a color-map format this will return a size sufficient for; * 256 entries in the given format; check PNG_FORMAT_FLAG_COLORMAP if; * you don't want to allocate a color-map in this case.; */; /* PNG_IMAGE_FLAG_*; *; * Flags containing additional information about the image are held in the; * 'flags' field of png_image.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:95,Energy Efficiency,green,green,95,"/* This indicates that the RGB values of the in-memory bitmap do not; * correspond to the red, green and blue end-points defined by sRGB.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:358,Security,expose,expose,358,"/* On read if the image is a 16-bit per component image and there is no gAMA; * or sRGB chunk assume that the components are sRGB encoded. Notice that; * images output by the simplified API always have gamma information; setting; * this flag only affects the interpretation of 16-bit images from an; * external source. It is recommended that the application expose this flag; * to the user; the user can normally easily recognize the difference between; * linear and sRGB encoding. This flag has no effect on write - the data; * passed to the write APIs must have the correct encoding (as defined; * above.); *; * If the flag is not set (the default) input 16-bit per component data is; * assumed to be linear.; *; * NOTE: the flag can only be set after the png_image_begin_read_ call,; * because that call initializes the 'flags' field.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:175,Usability,simpl,simplified,175,"/* On read if the image is a 16-bit per component image and there is no gAMA; * or sRGB chunk assume that the components are sRGB encoded. Notice that; * images output by the simplified API always have gamma information; setting; * this flag only affects the interpretation of 16-bit images from an; * external source. It is recommended that the application expose this flag; * to the user; the user can normally easily recognize the difference between; * linear and sRGB encoding. This flag has no effect on write - the data; * passed to the write APIs must have the correct encoding (as defined; * above.); *; * If the flag is not set (the default) input 16-bit per component data is; * assumed to be linear.; *; * NOTE: the flag can only be set after the png_image_begin_read_ call,; * because that call initializes the 'flags' field.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:156,Safety,safe,safer,156,"/* READ APIs; * ---------; *; * The png_image passed to the read APIs must have been initialized by setting; * the png_controlp field 'opaque' to NULL (or, safer, memset the whole thing.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:283,Availability,down,down,283,"/* Finish reading the image into the supplied buffer and clean up the; * png_image structure.; *; * row_stride is the step, in byte or 2-byte units as appropriate,; * between adjacent rows. A positive stride indicates that the top-most row; * is first in the buffer - the normal top-down arrangement. A negative; * stride indicates that the bottom-most row is first in the buffer.; *; * background need only be supplied if an alpha channel must be removed from; * a png_byte format and the removal is to be done by compositing on a solid; * color; otherwise it may be NULL and any composition will be done directly; * onto the buffer. The value is an sRGB color to use for the background,; * for grayscale output the green channel is used.; *; * background must be supplied when an alpha channel must be removed from a; * single byte color-mapped output format, in other words if:; *; * 1) The original format from png_image_begin_read_from_* had; * PNG_FORMAT_FLAG_ALPHA set.; * 2) The format set by the application does not.; * 3) The format set by the application has PNG_FORMAT_FLAG_COLORMAP set and; * PNG_FORMAT_FLAG_LINEAR *not* set.; *; * For linear output removing the alpha channel is always done by compositing; * on black and background is ignored.; *; * colormap must be supplied when PNG_FORMAT_FLAG_COLORMAP is set. It must; * be at least the size (in bytes) returned by PNG_IMAGE_COLORMAP_SIZE.; * image->colormap_entries will be updated to the actual number of entries; * written to the colormap; this may be less than the original value.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1446,Deployability,update,updated,1446,"/* Finish reading the image into the supplied buffer and clean up the; * png_image structure.; *; * row_stride is the step, in byte or 2-byte units as appropriate,; * between adjacent rows. A positive stride indicates that the top-most row; * is first in the buffer - the normal top-down arrangement. A negative; * stride indicates that the bottom-most row is first in the buffer.; *; * background need only be supplied if an alpha channel must be removed from; * a png_byte format and the removal is to be done by compositing on a solid; * color; otherwise it may be NULL and any composition will be done directly; * onto the buffer. The value is an sRGB color to use for the background,; * for grayscale output the green channel is used.; *; * background must be supplied when an alpha channel must be removed from a; * single byte color-mapped output format, in other words if:; *; * 1) The original format from png_image_begin_read_from_* had; * PNG_FORMAT_FLAG_ALPHA set.; * 2) The format set by the application does not.; * 3) The format set by the application has PNG_FORMAT_FLAG_COLORMAP set and; * PNG_FORMAT_FLAG_LINEAR *not* set.; *; * For linear output removing the alpha channel is always done by compositing; * on black and background is ignored.; *; * colormap must be supplied when PNG_FORMAT_FLAG_COLORMAP is set. It must; * be at least the size (in bytes) returned by PNG_IMAGE_COLORMAP_SIZE.; * image->colormap_entries will be updated to the actual number of entries; * written to the colormap; this may be less than the original value.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:717,Energy Efficiency,green,green,717,"/* Finish reading the image into the supplied buffer and clean up the; * png_image structure.; *; * row_stride is the step, in byte or 2-byte units as appropriate,; * between adjacent rows. A positive stride indicates that the top-most row; * is first in the buffer - the normal top-down arrangement. A negative; * stride indicates that the bottom-most row is first in the buffer.; *; * background need only be supplied if an alpha channel must be removed from; * a png_byte format and the removal is to be done by compositing on a solid; * color; otherwise it may be NULL and any composition will be done directly; * onto the buffer. The value is an sRGB color to use for the background,; * for grayscale output the green channel is used.; *; * background must be supplied when an alpha channel must be removed from a; * single byte color-mapped output format, in other words if:; *; * 1) The original format from png_image_begin_read_from_* had; * PNG_FORMAT_FLAG_ALPHA set.; * 2) The format set by the application does not.; * 3) The format set by the application has PNG_FORMAT_FLAG_COLORMAP set and; * PNG_FORMAT_FLAG_LINEAR *not* set.; *; * For linear output removing the alpha channel is always done by compositing; * on black and background is ignored.; *; * colormap must be supplied when PNG_FORMAT_FLAG_COLORMAP is set. It must; * be at least the size (in bytes) returned by PNG_IMAGE_COLORMAP_SIZE.; * image->colormap_entries will be updated to the actual number of entries; * written to the colormap; this may be less than the original value.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:17,Energy Efficiency,allocate,allocated,17,"/* Free any data allocated by libpng in image->opaque, setting the pointer to; * NULL. May be called at any time after the structure is initialized.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:358,Availability,failure,failure,358,"/* Write the image to the given memory buffer. The function both writes the; * whole PNG data stream to *memory and updates *memory_bytes with the count; * of bytes written.; *; * 'memory' may be NULL. In this case *memory_bytes is not read however on; * success the number of bytes which would have been written will still be; * stored in *memory_bytes. On failure *memory_bytes will contain 0.; *; * If 'memory' is not NULL it must point to memory[*memory_bytes] of; * writeable memory.; *; * If the function returns success memory[*memory_bytes] (if 'memory' is not; * NULL) contains the written PNG data. *memory_bytes will always be less; * than or equal to the original value.; *; * If the function returns false and *memory_bytes was not changed an error; * occurred during write. If *memory_bytes was changed, or is not 0 if; * 'memory' was NULL, the write would have succeeded but for the memory; * buffer being too small. *memory_bytes contains the required number of; * bytes and will be bigger that the original value.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:756,Availability,error,error,756,"/* Write the image to the given memory buffer. The function both writes the; * whole PNG data stream to *memory and updates *memory_bytes with the count; * of bytes written.; *; * 'memory' may be NULL. In this case *memory_bytes is not read however on; * success the number of bytes which would have been written will still be; * stored in *memory_bytes. On failure *memory_bytes will contain 0.; *; * If 'memory' is not NULL it must point to memory[*memory_bytes] of; * writeable memory.; *; * If the function returns success memory[*memory_bytes] (if 'memory' is not; * NULL) contains the written PNG data. *memory_bytes will always be less; * than or equal to the original value.; *; * If the function returns false and *memory_bytes was not changed an error; * occurred during write. If *memory_bytes was changed, or is not 0 if; * 'memory' was NULL, the write would have succeeded but for the memory; * buffer being too small. *memory_bytes contains the required number of; * bytes and will be bigger that the original value.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:116,Deployability,update,updates,116,"/* Write the image to the given memory buffer. The function both writes the; * whole PNG data stream to *memory and updates *memory_bytes with the count; * of bytes written.; *; * 'memory' may be NULL. In this case *memory_bytes is not read however on; * success the number of bytes which would have been written will still be; * stored in *memory_bytes. On failure *memory_bytes will contain 0.; *; * If 'memory' is not NULL it must point to memory[*memory_bytes] of; * writeable memory.; *; * If the function returns success memory[*memory_bytes] (if 'memory' is not; * NULL) contains the written PNG data. *memory_bytes will always be less; * than or equal to the original value.; *; * If the function returns false and *memory_bytes was not changed an error; * occurred during write. If *memory_bytes was changed, or is not 0 if; * 'memory' was NULL, the write would have succeeded but for the memory; * buffer being too small. *memory_bytes contains the required number of; * bytes and will be bigger that the original value.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:525,Energy Efficiency,allocate,allocate,525,"/* Return the amount of memory in 'size' required to compress this image.; * The png_image structure 'image' must be filled in as in the above; * function and must not be changed before the actual write call, the buffer; * and all other parameters must also be identical to that in the final; * write call. The 'size' variable need not be initialized.; *; * NOTE: the macro returns true/false, if false is returned 'size' will be; * set to zero and the write failed and probably will fail if tried again.; */; /* You can pre-allocate the buffer by making sure it is of sufficient size; * regardless of the amount of compression achieved. The buffer size will; * always be bigger than the original image and it will never be filled. The; * following macros are provided to assist in allocating the buffer.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:318,Modifiability,variab,variable,318,"/* Return the amount of memory in 'size' required to compress this image.; * The png_image structure 'image' must be filled in as in the above; * function and must not be changed before the actual write call, the buffer; * and all other parameters must also be identical to that in the final; * write call. The 'size' variable need not be initialized.; *; * NOTE: the macro returns true/false, if false is returned 'size' will be; * set to zero and the write failed and probably will fail if tried again.; */; /* You can pre-allocate the buffer by making sure it is of sufficient size; * regardless of the amount of compression achieved. The buffer size will; * always be bigger than the original image and it will never be filled. The; * following macros are provided to assist in allocating the buffer.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:305,Safety,avoid,avoid,305,/* The number of uncompressed bytes in the PNG byte encoding of the image;; * uncompressing the PNG IDAT data will give this number of bytes.; *; * NOTE: while PNG_IMAGE_SIZE cannot overflow for an image in memory this; * macro can because of the extra bytes used in the PNG byte encoding. You; * need to avoid this macro if your image size approaches 2^30 in width or; * height. The same goes for the remainder of these macros; they all produce; * bigger numbers than the actual in-memory image size.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:115,Usability,SIMPL,SIMPLIFIED,115,/* SIMPLIFIED_WRITE */; /*******************************************************************************; * END OF SIMPLIFIED API; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:282,Performance,optimiz,optimizations,282,"/* SIMPLIFIED_{READ|WRITE} */; /*******************************************************************************; * Section 6: IMPLEMENTATION OPTIONS; *******************************************************************************; *; * Support for arbitrary implementation-specific optimizations. The API allows; * particular options to be turned on or off. 'Option' is the number of the; * option and 'onoff' is 0 (off) or non-0 (on). The value returned is given; * by the PNG_OPTION_ defines below.; *; * HARDWARE: normally hardware capabilities, such as the Intel SSE instructions,; * are detected at run time, however sometimes it may be impossible; * to do this in user mode, in which case it is necessary to discover; * the capabilities in an OS specific way. Such capabilities are; * listed here when libpng has support for them and must be turned; * ON by the application if present.; *; * SOFTWARE: sometimes software optimizations actually result in performance; * decrease on some architectures or systems, or with some sets of; * PNG images. 'Software' options allow such optimizations to be; * selected at run time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:927,Performance,optimiz,optimizations,927,"/* SIMPLIFIED_{READ|WRITE} */; /*******************************************************************************; * Section 6: IMPLEMENTATION OPTIONS; *******************************************************************************; *; * Support for arbitrary implementation-specific optimizations. The API allows; * particular options to be turned on or off. 'Option' is the number of the; * option and 'onoff' is 0 (off) or non-0 (on). The value returned is given; * by the PNG_OPTION_ defines below.; *; * HARDWARE: normally hardware capabilities, such as the Intel SSE instructions,; * are detected at run time, however sometimes it may be impossible; * to do this in user mode, in which case it is necessary to discover; * the capabilities in an OS specific way. Such capabilities are; * listed here when libpng has support for them and must be turned; * ON by the application if present.; *; * SOFTWARE: sometimes software optimizations actually result in performance; * decrease on some architectures or systems, or with some sets of; * PNG images. 'Software' options allow such optimizations to be; * selected at run time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:960,Performance,perform,performance,960,"/* SIMPLIFIED_{READ|WRITE} */; /*******************************************************************************; * Section 6: IMPLEMENTATION OPTIONS; *******************************************************************************; *; * Support for arbitrary implementation-specific optimizations. The API allows; * particular options to be turned on or off. 'Option' is the number of the; * option and 'onoff' is 0 (off) or non-0 (on). The value returned is given; * by the PNG_OPTION_ defines below.; *; * HARDWARE: normally hardware capabilities, such as the Intel SSE instructions,; * are detected at run time, however sometimes it may be impossible; * to do this in user mode, in which case it is necessary to discover; * the capabilities in an OS specific way. Such capabilities are; * listed here when libpng has support for them and must be turned; * ON by the application if present.; *; * SOFTWARE: sometimes software optimizations actually result in performance; * decrease on some architectures or systems, or with some sets of; * PNG images. 'Software' options allow such optimizations to be; * selected at run time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1084,Performance,optimiz,optimizations,1084,"/* SIMPLIFIED_{READ|WRITE} */; /*******************************************************************************; * Section 6: IMPLEMENTATION OPTIONS; *******************************************************************************; *; * Support for arbitrary implementation-specific optimizations. The API allows; * particular options to be turned on or off. 'Option' is the number of the; * option and 'onoff' is 0 (off) or non-0 (on). The value returned is given; * by the PNG_OPTION_ defines below.; *; * HARDWARE: normally hardware capabilities, such as the Intel SSE instructions,; * are detected at run time, however sometimes it may be impossible; * to do this in user mode, in which case it is necessary to discover; * the capabilities in an OS specific way. Such capabilities are; * listed here when libpng has support for them and must be turned; * ON by the application if present.; *; * SOFTWARE: sometimes software optimizations actually result in performance; * decrease on some architectures or systems, or with some sets of; * PNG images. 'Software' options allow such optimizations to be; * selected at run time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:592,Safety,detect,detected,592,"/* SIMPLIFIED_{READ|WRITE} */; /*******************************************************************************; * Section 6: IMPLEMENTATION OPTIONS; *******************************************************************************; *; * Support for arbitrary implementation-specific optimizations. The API allows; * particular options to be turned on or off. 'Option' is the number of the; * option and 'onoff' is 0 (off) or non-0 (on). The value returned is given; * by the PNG_OPTION_ defines below.; *; * HARDWARE: normally hardware capabilities, such as the Intel SSE instructions,; * are detected at run time, however sometimes it may be impossible; * to do this in user mode, in which case it is necessary to discover; * the capabilities in an OS specific way. Such capabilities are; * listed here when libpng has support for them and must be turned; * ON by the application if present.; *; * SOFTWARE: sometimes software optimizations actually result in performance; * decrease on some architectures or systems, or with some sets of; * PNG images. 'Software' options allow such optimizations to be; * selected at run time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:13,Energy Efficiency,Power,PowerPC,13,/* HARDWARE: PowerPC VSX SIMD instructions supported */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/png.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:600,Availability,down,down,600,"/* pngconf.h - machine-configurable file for libpng; *; * libpng version 1.6.40; *; * Copyright (c) 2018-2022 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2016,2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * Any machine specific code is near the front of this file, so if you; * are configuring libpng for a machine, you may want to read the section; * starting here down to where it starts to typedef png_color, png_text,; * and png_info.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:314,Deployability,release,released,314,"/* pngconf.h - machine-configurable file for libpng; *; * libpng version 1.6.40; *; * Copyright (c) 2018-2022 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2016,2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * Any machine specific code is near the front of this file, so if you; * are configuring libpng for a machine, you may want to read the section; * starting here down to where it starts to typedef png_color, png_text,; * and png_info.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:23,Modifiability,config,configurable,23,"/* pngconf.h - machine-configurable file for libpng; *; * libpng version 1.6.40; *; * Copyright (c) 2018-2022 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2016,2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * Any machine specific code is near the front of this file, so if you; * are configuring libpng for a machine, you may want to read the section; * starting here down to where it starts to typedef png_color, png_text,; * and png_info.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:516,Modifiability,config,configuring,516,"/* pngconf.h - machine-configurable file for libpng; *; * libpng version 1.6.40; *; * Copyright (c) 2018-2022 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2016,2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * Any machine specific code is near the front of this file, so if you; * are configuring libpng for a machine, you may want to read the section; * starting here down to where it starts to typedef png_color, png_text,; * and png_info.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:17,Performance,optimiz,optimization,17,/* This controls optimization of the reading of 16-bit and 32-bit; * values from PNG files. It can be set on a per-app-file basis: it; * just changes whether a macro is used when the function is called.; * The library builder sets the default; if read functions are not; * built into the library the macro implementation is forced on.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:2483,Integrability,depend,dependent,2483," and; * the 'C' calling convention (from PNGCAPI) for; * callbacks (PNGCBAPI). This is no longer required; * in any known environment - if it has to be used; * please post an explanation of the problem to the; * libpng mailing list.; *; * These cases only differ if the operating system does not use the C; * calling convention, at present this just means the above cases; * (x86 DOS/Windows systems) and, even then, this does not apply to; * Cygwin running on those systems.; *; * Note that the value must be defined in pnglibconf.h so that what; * the application uses to call the library matches the conventions; * set when building the library.; */; /* Symbol export; * =============; * When building a shared library it is almost always necessary to tell; * the compiler which symbols to export. The png.h macro 'PNG_EXPORT'; * is used to mark the symbols. On some systems these symbols can be; * extracted at link time and need no special processing by the compiler,; * on other systems the symbols are flagged by the compiler and just; * the declaration requires a special tag applied (unfortunately) in a; * compiler dependent way. Some systems can do either.; *; * A small number of older systems also require a symbol from a DLL to; * be flagged to the program that calls it. This is a problem because; * we do not know in the header file included by application code that; * the symbol will come from a shared library, as opposed to a statically; * linked one. For this reason the application must tell us by setting; * the magic flag PNG_USE_DLL to turn on the special processing before; * it includes png.h.; *; * Four additional macros are used to make this happen:; *; * PNG_IMPEXP The magic (if any) to cause a symbol to be exported from; * the build or imported if PNG_USE_DLL is set - compiler; * and system specific.; *; * PNG_EXPORT_TYPE(type) A macro that pre or appends PNG_IMPEXP to; * 'type', compiler specific.; *; * PNG_DLL_EXPORT Set to the magic to use during a libpng bui",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:30,Availability,error,error,30,"/* If this line results in an error, either because __watcall is not; * understood or because of a redefine just below you cannot use *this*; * build of the library with the compiler you are using. *This* build was; * build using Watcom and applications must also be built using Watcom!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:30,Availability,error,error,30,/* If this line results in an error __stdcall is not understood and; * PNG_API_RULE should not have been set to '1'.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:33,Safety,detect,detected,33,"/* An older compiler, or one not detected (erroneously) above,; * if necessary override on the command line to get the correct; * variants for the compiler.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:259,Usability,simpl,simplifies,259,"/* In 1.5.2 the definition of PNG_FUNCTION has been changed to always treat; * 'attributes' as a storage class - the attributes go at the start of the; * function definition, and attributes are always appended regardless of the; * compiler. This considerably simplifies these macros but may cause problems; * if any compilers both need function attributes and fail to handle them as; * a storage class (this is unlikely.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:44,Integrability,interface,interface,44,/* Use PNG_REMOVED to comment out a removed interface. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:106,Availability,avail,available,106,/* Support for compiler specific function attributes. These are used; * so that where compiler support is available incorrect use of API; * functions in png.h will generate compiler warnings.; *; * Added at libpng-1.2.41.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:106,Availability,avail,available,106,"/* Support for compiler specific function attributes. These are used; * so that where compiler support is available, incorrect use of API; * functions in png.h will generate compiler warnings. Added at libpng; * version 1.2.41. Disabling these removes the warnings but may also produce; * less efficient code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:294,Energy Efficiency,efficient,efficient,294,"/* Support for compiler specific function attributes. These are used; * so that where compiler support is available, incorrect use of API; * functions in png.h will generate compiler warnings. Added at libpng; * version 1.2.41. Disabling these removes the warnings but may also produce; * less efficient code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:52,Safety,safe,safe,52,"/* Some typedefs to get us started. These should be safe on most of the common; * platforms.; *; * png_uint_32 and png_int_32 may, currently, be larger than required to hold a; * 32-bit value however this is not normally advisable.; *; * png_uint_16 and png_int_16 should always be two bytes in size - this is; * verified at library build time.; *; * png_byte must always be one byte in size.; *; * The checks below use constants from limits.h, as defined by the ISOC90; * standard.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:21,Testability,test,tests,21,/* Compiler specific tests for systems where size_t is known to be less than; * 32 bits (some of these systems may no longer work because of the lack of; * 'far' support; see above.); */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:410,Availability,avail,available,410,"/* Prior to 1.6.0 libpng offered limited support for Microsoft C compiler; * implementations of Intel CPU specific support of user-mode segmented address; * spaces, where 16-bit pointers address more than 65536 bytes of memory using; * separate 'segment' registers. The implementation requires two different; * types of pointer (only one of which includes the segment value.); *; * If required this support is available in version 1.2 of libpng and may be; * available in versions through 1.5, although the correctness of the code has; * not been verified recently.; */; /* Typedef for floating-point numbers that are converted to fixed-point with a; * multiple of 100,000, e.g., gamma; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:459,Availability,avail,available,459,"/* Prior to 1.6.0 libpng offered limited support for Microsoft C compiler; * implementations of Intel CPU specific support of user-mode segmented address; * spaces, where 16-bit pointers address more than 65536 bytes of memory using; * separate 'segment' registers. The implementation requires two different; * types of pointer (only one of which includes the segment value.); *; * If required this support is available in version 1.2 of libpng and may be; * available in versions through 1.5, although the correctness of the code has; * not been verified recently.; */; /* Typedef for floating-point numbers that are converted to fixed-point with a; * multiple of 100,000, e.g., gamma; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h:292,Deployability,release,released,292,"/* pngdebug.h - Debugging macros for libpng, also used in pngtest.c; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2013 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* Define PNG_DEBUG at compile time for debugging information. Higher; * numbers for PNG_DEBUG mean more debugging information. This has; * only been added since version 0.95 so it is not implemented throughout; * libpng yet, but more support will be added as needed.; *; * png_debug[1-2]?(level, message ,arg{0-2}); * Expands to a statement (either a simple expression or a compound; * do..while(0) statement) that outputs a message with parameter; * substitution if PNG_DEBUG is defined to 2 or more. If PNG_DEBUG; * is undefined, 0 or 1 every png_debug expands to a simple expression; * (actually ((void)0)).; *; * level: level of detail of message, starting at 0. A level 'n'; * message is preceded by 'n' 3-space indentations (not implemented; * on Microsoft compilers unless PNG_DEBUG_FILE is also; * defined, to allow debug DLL compilation with no standard IO).; * message: a printf(3) style text string. A trailing '\n' is added; * to the message.; * arg: 0 to 2 arguments for printf(3) style substitution in message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngdebug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h:715,Integrability,message,message,715,"/* pngdebug.h - Debugging macros for libpng, also used in pngtest.c; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2013 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* Define PNG_DEBUG at compile time for debugging information. Higher; * numbers for PNG_DEBUG mean more debugging information. This has; * only been added since version 0.95 so it is not implemented throughout; * libpng yet, but more support will be added as needed.; *; * png_debug[1-2]?(level, message ,arg{0-2}); * Expands to a statement (either a simple expression or a compound; * do..while(0) statement) that outputs a message with parameter; * substitution if PNG_DEBUG is defined to 2 or more. If PNG_DEBUG; * is undefined, 0 or 1 every png_debug expands to a simple expression; * (actually ((void)0)).; *; * level: level of detail of message, starting at 0. A level 'n'; * message is preceded by 'n' 3-space indentations (not implemented; * on Microsoft compilers unless PNG_DEBUG_FILE is also; * defined, to allow debug DLL compilation with no standard IO).; * message: a printf(3) style text string. A trailing '\n' is added; * to the message.; * arg: 0 to 2 arguments for printf(3) style substitution in message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngdebug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h:844,Integrability,message,message,844,"/* pngdebug.h - Debugging macros for libpng, also used in pngtest.c; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2013 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* Define PNG_DEBUG at compile time for debugging information. Higher; * numbers for PNG_DEBUG mean more debugging information. This has; * only been added since version 0.95 so it is not implemented throughout; * libpng yet, but more support will be added as needed.; *; * png_debug[1-2]?(level, message ,arg{0-2}); * Expands to a statement (either a simple expression or a compound; * do..while(0) statement) that outputs a message with parameter; * substitution if PNG_DEBUG is defined to 2 or more. If PNG_DEBUG; * is undefined, 0 or 1 every png_debug expands to a simple expression; * (actually ((void)0)).; *; * level: level of detail of message, starting at 0. A level 'n'; * message is preceded by 'n' 3-space indentations (not implemented; * on Microsoft compilers unless PNG_DEBUG_FILE is also; * defined, to allow debug DLL compilation with no standard IO).; * message: a printf(3) style text string. A trailing '\n' is added; * to the message.; * arg: 0 to 2 arguments for printf(3) style substitution in message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngdebug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h:1062,Integrability,message,message,1062,"/* pngdebug.h - Debugging macros for libpng, also used in pngtest.c; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2013 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* Define PNG_DEBUG at compile time for debugging information. Higher; * numbers for PNG_DEBUG mean more debugging information. This has; * only been added since version 0.95 so it is not implemented throughout; * libpng yet, but more support will be added as needed.; *; * png_debug[1-2]?(level, message ,arg{0-2}); * Expands to a statement (either a simple expression or a compound; * do..while(0) statement) that outputs a message with parameter; * substitution if PNG_DEBUG is defined to 2 or more. If PNG_DEBUG; * is undefined, 0 or 1 every png_debug expands to a simple expression; * (actually ((void)0)).; *; * level: level of detail of message, starting at 0. A level 'n'; * message is preceded by 'n' 3-space indentations (not implemented; * on Microsoft compilers unless PNG_DEBUG_FILE is also; * defined, to allow debug DLL compilation with no standard IO).; * message: a printf(3) style text string. A trailing '\n' is added; * to the message.; * arg: 0 to 2 arguments for printf(3) style substitution in message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngdebug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h:1101,Integrability,message,message,1101,"/* pngdebug.h - Debugging macros for libpng, also used in pngtest.c; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2013 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* Define PNG_DEBUG at compile time for debugging information. Higher; * numbers for PNG_DEBUG mean more debugging information. This has; * only been added since version 0.95 so it is not implemented throughout; * libpng yet, but more support will be added as needed.; *; * png_debug[1-2]?(level, message ,arg{0-2}); * Expands to a statement (either a simple expression or a compound; * do..while(0) statement) that outputs a message with parameter; * substitution if PNG_DEBUG is defined to 2 or more. If PNG_DEBUG; * is undefined, 0 or 1 every png_debug expands to a simple expression; * (actually ((void)0)).; *; * level: level of detail of message, starting at 0. A level 'n'; * message is preceded by 'n' 3-space indentations (not implemented; * on Microsoft compilers unless PNG_DEBUG_FILE is also; * defined, to allow debug DLL compilation with no standard IO).; * message: a printf(3) style text string. A trailing '\n' is added; * to the message.; * arg: 0 to 2 arguments for printf(3) style substitution in message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngdebug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h:1290,Integrability,message,message,1290,"/* pngdebug.h - Debugging macros for libpng, also used in pngtest.c; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2013 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* Define PNG_DEBUG at compile time for debugging information. Higher; * numbers for PNG_DEBUG mean more debugging information. This has; * only been added since version 0.95 so it is not implemented throughout; * libpng yet, but more support will be added as needed.; *; * png_debug[1-2]?(level, message ,arg{0-2}); * Expands to a statement (either a simple expression or a compound; * do..while(0) statement) that outputs a message with parameter; * substitution if PNG_DEBUG is defined to 2 or more. If PNG_DEBUG; * is undefined, 0 or 1 every png_debug expands to a simple expression; * (actually ((void)0)).; *; * level: level of detail of message, starting at 0. A level 'n'; * message is preceded by 'n' 3-space indentations (not implemented; * on Microsoft compilers unless PNG_DEBUG_FILE is also; * defined, to allow debug DLL compilation with no standard IO).; * message: a printf(3) style text string. A trailing '\n' is added; * to the message.; * arg: 0 to 2 arguments for printf(3) style substitution in message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngdebug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h:1365,Integrability,message,message,1365,"/* pngdebug.h - Debugging macros for libpng, also used in pngtest.c; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2013 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* Define PNG_DEBUG at compile time for debugging information. Higher; * numbers for PNG_DEBUG mean more debugging information. This has; * only been added since version 0.95 so it is not implemented throughout; * libpng yet, but more support will be added as needed.; *; * png_debug[1-2]?(level, message ,arg{0-2}); * Expands to a statement (either a simple expression or a compound; * do..while(0) statement) that outputs a message with parameter; * substitution if PNG_DEBUG is defined to 2 or more. If PNG_DEBUG; * is undefined, 0 or 1 every png_debug expands to a simple expression; * (actually ((void)0)).; *; * level: level of detail of message, starting at 0. A level 'n'; * message is preceded by 'n' 3-space indentations (not implemented; * on Microsoft compilers unless PNG_DEBUG_FILE is also; * defined, to allow debug DLL compilation with no standard IO).; * message: a printf(3) style text string. A trailing '\n' is added; * to the message.; * arg: 0 to 2 arguments for printf(3) style substitution in message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngdebug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h:1435,Integrability,message,message,1435,"/* pngdebug.h - Debugging macros for libpng, also used in pngtest.c; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2013 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* Define PNG_DEBUG at compile time for debugging information. Higher; * numbers for PNG_DEBUG mean more debugging information. This has; * only been added since version 0.95 so it is not implemented throughout; * libpng yet, but more support will be added as needed.; *; * png_debug[1-2]?(level, message ,arg{0-2}); * Expands to a statement (either a simple expression or a compound; * do..while(0) statement) that outputs a message with parameter; * substitution if PNG_DEBUG is defined to 2 or more. If PNG_DEBUG; * is undefined, 0 or 1 every png_debug expands to a simple expression; * (actually ((void)0)).; *; * level: level of detail of message, starting at 0. A level 'n'; * message is preceded by 'n' 3-space indentations (not implemented; * on Microsoft compilers unless PNG_DEBUG_FILE is also; * defined, to allow debug DLL compilation with no standard IO).; * message: a printf(3) style text string. A trailing '\n' is added; * to the message.; * arg: 0 to 2 arguments for printf(3) style substitution in message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngdebug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h:770,Usability,simpl,simple,770,"/* pngdebug.h - Debugging macros for libpng, also used in pngtest.c; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2013 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* Define PNG_DEBUG at compile time for debugging information. Higher; * numbers for PNG_DEBUG mean more debugging information. This has; * only been added since version 0.95 so it is not implemented throughout; * libpng yet, but more support will be added as needed.; *; * png_debug[1-2]?(level, message ,arg{0-2}); * Expands to a statement (either a simple expression or a compound; * do..while(0) statement) that outputs a message with parameter; * substitution if PNG_DEBUG is defined to 2 or more. If PNG_DEBUG; * is undefined, 0 or 1 every png_debug expands to a simple expression; * (actually ((void)0)).; *; * level: level of detail of message, starting at 0. A level 'n'; * message is preceded by 'n' 3-space indentations (not implemented; * on Microsoft compilers unless PNG_DEBUG_FILE is also; * defined, to allow debug DLL compilation with no standard IO).; * message: a printf(3) style text string. A trailing '\n' is added; * to the message.; * arg: 0 to 2 arguments for printf(3) style substitution in message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngdebug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h:987,Usability,simpl,simple,987,"/* pngdebug.h - Debugging macros for libpng, also used in pngtest.c; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2013 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* Define PNG_DEBUG at compile time for debugging information. Higher; * numbers for PNG_DEBUG mean more debugging information. This has; * only been added since version 0.95 so it is not implemented throughout; * libpng yet, but more support will be added as needed.; *; * png_debug[1-2]?(level, message ,arg{0-2}); * Expands to a statement (either a simple expression or a compound; * do..while(0) statement) that outputs a message with parameter; * substitution if PNG_DEBUG is defined to 2 or more. If PNG_DEBUG; * is undefined, 0 or 1 every png_debug expands to a simple expression; * (actually ((void)0)).; *; * level: level of detail of message, starting at 0. A level 'n'; * message is preceded by 'n' 3-space indentations (not implemented; * on Microsoft compilers unless PNG_DEBUG_FILE is also; * defined, to allow debug DLL compilation with no standard IO).; * message: a printf(3) style text string. A trailing '\n' is added; * to the message.; * arg: 0 to 2 arguments for printf(3) style substitution in message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngdebug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h:44,Integrability,message,messages,44,/* These settings control the formatting of messages in png.c and pngerror.c */; /* Moved to pngdebug.h at 1.5.0 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngdebug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngdebug.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:450,Availability,error,error,450,"/* pngerror.c - stub functions for i/o and memory allocation; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This file provides a location for all error handling. Users who; * need special error handling are expected to write replacement functions; * and use png_set_error_fn() to use those functions. See the instructions; * at each function.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:492,Availability,error,error,492,"/* pngerror.c - stub functions for i/o and memory allocation; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This file provides a location for all error handling. Users who; * need special error handling are expected to write replacement functions; * and use png_set_error_fn() to use those functions. See the instructions; * at each function.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:285,Deployability,release,released,285,"/* pngerror.c - stub functions for i/o and memory allocation; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This file provides a location for all error handling. Users who; * need special error handling are expected to write replacement functions; * and use png_set_error_fn() to use those functions. See the instructions; * at each function.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:16,Testability,stub,stub,16,"/* pngerror.c - stub functions for i/o and memory allocation; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This file provides a location for all error handling. Users who; * need special error handling are expected to write replacement functions; * and use png_set_error_fn() to use those functions. See the instructions; * at each function.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:69,Availability,error,error,69,"/* WARNINGS */; /* This function is called whenever there is a fatal error. This function; * should not be changed. If there is a need to handle errors differently,; * you should supply a replacement error function and use png_set_error_fn(); * to replace the error function at run-time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:145,Availability,error,errors,145,"/* WARNINGS */; /* This function is called whenever there is a fatal error. This function; * should not be changed. If there is a need to handle errors differently,; * you should supply a replacement error function and use png_set_error_fn(); * to replace the error function at run-time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:200,Availability,error,error,200,"/* WARNINGS */; /* This function is called whenever there is a fatal error. This function; * should not be changed. If there is a need to handle errors differently,; * you should supply a replacement error function and use png_set_error_fn(); * to replace the error function at run-time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:260,Availability,error,error,260,"/* WARNINGS */; /* This function is called whenever there is a fatal error. This function; * should not be changed. If there is a need to handle errors differently,; * you should supply a replacement error function and use png_set_error_fn(); * to replace the error function at run-time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:36,Availability,error,error,36,"/* Strip ""#nnnn "" from beginning of error message. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:42,Integrability,message,message,42,"/* Strip ""#nnnn "" from beginning of error message. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:148,Availability,error,error,148,"/* Prior to 1.5.2 the error_fn received a NULL pointer, expressed; * erroneously as '\0', instead of the empty string """". This was; * apparently an error, introduced in libpng-1.2.20, and png_default_error; * will crash in this case.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:79,Availability,error,errors,79,/* ERROR_TEXT */; /* Utility to safely appends strings to a buffer. This never errors out so; * error checking is not required in the caller.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:96,Availability,error,error,96,/* ERROR_TEXT */; /* Utility to safely appends strings to a buffer. This never errors out so; * error checking is not required in the caller.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:32,Safety,safe,safely,32,/* ERROR_TEXT */; /* Utility to safely appends strings to a buffer. This never errors out so; * error checking is not required in the caller.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:6,Availability,error,error,6,/* an error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:57,Availability,error,error,57,"/* This function is called whenever there is a non-fatal error. This function; * should not be changed. If there is a need to handle warnings differently,; * you should supply a replacement warning function and use; * png_set_error_fn() to replace the warning function at run-time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:279,Availability,error,error,279,"/* These functions support 'formatted' warning messages with up to; * PNG_WARNING_PARAMETER_COUNT parameters. In the format string the parameter; * is introduced by @<number>, where 'number' starts at 1. This follows the; * standard established by X/Open for internationalizable error messages.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:47,Integrability,message,messages,47,"/* These functions support 'formatted' warning messages with up to; * PNG_WARNING_PARAMETER_COUNT parameters. In the format string the parameter; * is introduced by @<number>, where 'number' starts at 1. This follows the; * standard established by X/Open for internationalizable error messages.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:285,Integrability,message,messages,285,"/* These functions support 'formatted' warning messages with up to; * PNG_WARNING_PARAMETER_COUNT parameters. In the format string the parameter; * is introduced by @<number>, where 'number' starts at 1. This follows the; * standard established by X/Open for internationalizable error messages.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:3,Safety,Avoid,Avoid,3,/* Avoid overflow by doing the negate in a png_alloc_size_t: */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:62,Integrability,message,messages,62,"/* The internal buffer is just 192 bytes - enough for all our messages,; * overflow doesn't happen because this code checks! If someone figures; * out how to send us a message longer than 192 bytes, all that will; * happen is that the message will be truncated appropriately.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:168,Integrability,message,message,168,"/* The internal buffer is just 192 bytes - enough for all our messages,; * overflow doesn't happen because this code checks! If someone figures; * out how to send us a message longer than 192 bytes, all that will; * happen is that the message will be truncated appropriately.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:235,Integrability,message,message,235,"/* The internal buffer is just 192 bytes - enough for all our messages,; * overflow doesn't happen because this code checks! If someone figures; * out how to send us a message longer than 192 bytes, all that will; * happen is that the message will be truncated appropriately.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:244,Integrability,message,message,244,/* Each iteration through the following loop writes at most one character; * to msg[i++] then returns here to validate that there is still space for; * the trailing '\0'. It may (in the case of a parameter) read more than; * one character from message[]; it must check for '\0' and continue to the; * test if it finds the end of string.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:110,Security,validat,validate,110,/* Each iteration through the following loop writes at most one character; * to msg[i++] then returns here to validate that there is still space for; * the trailing '\0'. It may (in the case of a parameter) read more than; * one character from message[]; it must check for '\0' and continue to the; * test if it finds the end of string.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:301,Testability,test,test,301,/* Each iteration through the following loop writes at most one character; * to msg[i++] then returns here to validate that there is still space for; * the trailing '\0'. It may (in the case of a parameter) read more than; * one character from message[]; it must check for '\0' and continue to the; * test if it finds the end of string.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:85,Availability,error,error,85,/* '@' at end of string is now just printed (previously it was skipped);; * it is an error in the calling code to terminate the string with @.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:130,Testability,test,test,130,/* else not a parameter and there is a character after the @ sign; just; * copy that. This is known not to be '\0' because of the test above.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:18,Integrability,message,message,18,"/* At this point *message can't be '\0', even in the bad parameter case; * above where there is a lone '@' at the end of the message string.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:125,Integrability,message,message,125,"/* At this point *message can't be '\0', even in the bad parameter case; * above where there is a lone '@' at the end of the message string.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:117,Availability,error,errors,117,"/* And this is the formatted message. It may be larger than; * PNG_MAX_ERROR_TEXT, but that is only used for 'chunk' errors and these; * are not (currently) formatted.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:29,Integrability,message,message,29,"/* And this is the formatted message. It may be larger than; * PNG_MAX_ERROR_TEXT, but that is only used for 'chunk' errors and these; * are not (currently) formatted.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:51,Availability,error,error,51,"/* These utilities are used internally to build an error message that relates; * to the current chunk. The chunk name comes from png_ptr->chunk_name,; * which is used to prefix the message. The message is limited in length; * to 63 bytes. The name characters are output as hex digits wrapped in []; * if the character is invalid.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:57,Integrability,message,message,57,"/* These utilities are used internally to build an error message that relates; * to the current chunk. The chunk name comes from png_ptr->chunk_name,; * which is used to prefix the message. The message is limited in length; * to 63 bytes. The name characters are output as hex digits wrapped in []; * if the character is invalid.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:181,Integrability,message,message,181,"/* These utilities are used internally to build an error message that relates; * to the current chunk. The chunk name comes from png_ptr->chunk_name,; * which is used to prefix the message. The message is limited in length; * to 63 bytes. The name characters are output as hex digits wrapped in []; * if the character is invalid.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:194,Integrability,message,message,194,"/* These utilities are used internally to build an error message that relates; * to the current chunk. The chunk name comes from png_ptr->chunk_name,; * which is used to prefix the message. The message is limited in length; * to 63 bytes. The name characters are output as hex digits wrapped in []; * if the character is invalid.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:284,Integrability,wrap,wrapped,284,"/* These utilities are used internally to build an error message that relates; * to the current chunk. The chunk name comes from png_ptr->chunk_name,; * which is used to prefix the message. The message is limited in length; * to 63 bytes. The name characters are output as hex digits wrapped in []; * if the character is invalid.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:49,Safety,safe,safe,49,"/* iin < PNG_MAX_ERROR_TEXT, so the following is safe: */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:40,Availability,error,error,40,"/* This API only exists if ANSI-C style error handling is used,; * otherwise it is necessary for png_default_error to be overridden.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:432,Energy Efficiency,allocate,allocated,432,"/* From libpng 1.6.0 the app gets one chance to set a 'jmpbuf_size' value; * and it must not change after that. Libpng doesn't care how big the; * buffer is, just that it doesn't change.; *; * If the buffer size is no *larger* than the size of jmp_buf when libpng is; * compiled a built in jmp_buf is returned; this preserves the pre-1.6.0; * semantics that this call will not fail. If the size is larger, however,; * the buffer is allocated and this may fail, causing the function to return; * NULL.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:7,Energy Efficiency,allocate,allocated,7,/* not allocated */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:11,Energy Efficiency,allocate,allocated,11,/* Already allocated: check the size */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:23,Availability,error,error,23,"/* This is an internal error in libpng: somehow we have been left; * with a stack allocated jmp_buf when the application regained; * control. It's always possible to fix this up, but for the moment; * this is a png_error because that makes it easy to detect.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:82,Energy Efficiency,allocate,allocated,82,"/* This is an internal error in libpng: somehow we have been left; * with a stack allocated jmp_buf when the application regained; * control. It's always possible to fix this up, but for the moment; * this is a png_error because that makes it easy to detect.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:251,Safety,detect,detect,251,"/* This is an internal error in libpng: somehow we have been left; * with a stack allocated jmp_buf when the application regained; * control. It's always possible to fix this up, but for the moment; * this is a png_error because that makes it easy to detect.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:27,Availability,failure,failure,27,"/* This stuff is so that a failure to free the error control structure; * does not leave libpng in a state with no valid error handling: the; * free always succeeds, if there is an error it gets ignored.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:47,Availability,error,error,47,"/* This stuff is so that a failure to free the error control structure; * does not leave libpng in a state with no valid error handling: the; * free always succeeds, if there is an error it gets ignored.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:121,Availability,error,error,121,"/* This stuff is so that a failure to free the error control structure; * does not leave libpng in a state with no valid error handling: the; * free always succeeds, if there is an error it gets ignored.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:181,Availability,error,error,181,"/* This stuff is so that a failure to free the error control structure; * does not leave libpng in a state with no valid error handling: the; * free always succeeds, if there is an error it gets ignored.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:23,Availability,error,error,23,/* Return to setjmp on error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:23,Availability,error,error,23,"/* This is the default error handling function. Note that replacements for; * this function MUST NOT RETURN, or the program will likely crash. This; * function is used by default, or if the program supplies NULL for the; * error function pointer in png_set_error_fn().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:223,Availability,error,error,223,"/* This is the default error handling function. Note that replacements for; * this function MUST NOT RETURN, or the program will likely crash. This; * function is used by default, or if the program supplies NULL for the; * error function pointer in png_set_error_fn().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:36,Availability,error,error,36,"/* Strip ""#nnnn "" from beginning of error message. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:42,Integrability,message,message,42,"/* Strip ""#nnnn "" from beginning of error message. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:261,Deployability,configurat,configuration,261,"/* If control reaches this point, png_longjmp() must not return. The only; * choice is to terminate the whole process (or maybe the thread); to do; * this the ANSI-C abort() function is used unless a different method is; * implemented by overriding the default configuration setting for; * PNG_ABORT().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:261,Modifiability,config,configuration,261,"/* If control reaches this point, png_longjmp() must not return. The only; * choice is to terminate the whole process (or maybe the thread); to do; * this the ANSI-C abort() function is used unless a different method is; * implemented by overriding the default configuration setting for; * PNG_ABORT().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:166,Safety,abort,abort,166,"/* If control reaches this point, png_longjmp() must not return. The only; * choice is to terminate the whole process (or maybe the thread); to do; * this the ANSI-C abort() function is used unless a different method is; * implemented by overriding the default configuration setting for; * PNG_ABORT().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:200,Deployability,configurat,configuration,200,"/* This function is called when there is a warning, but the library thinks; * it can continue anyway. Replacement functions don't have to do anything; * here if you don't want them to. In the default configuration, png_ptr is; * not used, but it is passed in case it may be useful.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:200,Modifiability,config,configuration,200,"/* This function is called when there is a warning, but the library thinks; * it can continue anyway. Replacement functions don't have to do anything; * here if you don't want them to. In the default configuration, png_ptr is; * not used, but it is passed in case it may be useful.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:107,Availability,error,errors,107,"/* WARNINGS */; /* This function is called when the application wants to use another method; * of handling errors and warnings. Note that the error function MUST NOT; * return to the calling routine or serious problems will occur. The return; * method used in the default routine calls longjmp(png_ptr->jmp_buf_ptr, 1); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:142,Availability,error,error,142,"/* WARNINGS */; /* This function is called when the application wants to use another method; * of handling errors and warnings. Note that the error function MUST NOT; * return to the calling routine or serious problems will occur. The return; * method used in the default routine calls longjmp(png_ptr->jmp_buf_ptr, 1); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:191,Integrability,rout,routine,191,"/* WARNINGS */; /* This function is called when the application wants to use another method; * of handling errors and warnings. Note that the error function MUST NOT; * return to the calling routine or serious problems will occur. The return; * method used in the default routine calls longjmp(png_ptr->jmp_buf_ptr, 1); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:272,Integrability,rout,routine,272,"/* WARNINGS */; /* This function is called when the application wants to use another method; * of handling errors and warnings. Note that the error function MUST NOT; * return to the calling routine or serious problems will occur. The return; * method used in the default routine calls longjmp(png_ptr->jmp_buf_ptr, 1); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:175,Availability,error,error,175,"/* Currently the above both depend on SETJMP_SUPPORTED, however it would be; * possible to implement without setjmp support just so long as there is some; * way to handle the error return here:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:28,Integrability,depend,depend,28,"/* Currently the above both depend on SETJMP_SUPPORTED, however it would be; * possible to implement without setjmp support just so long as there is some; * way to handle the error return here:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:6,Availability,error,error,6,"/* An error is always logged here, overwriting anything (typically a warning); * that is already there:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:22,Testability,log,logged,22,"/* An error is always logged here, overwriting anything (typically a warning); * that is already there:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:35,Availability,error,error,35,/* Here on an internal programming error. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:60,Availability,error,error,60,/* A warning is only logged if there is no prior warning or error. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:21,Testability,log,logged,21,/* A warning is only logged if there is no prior warning or error. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:3,Safety,Safe,Safely,3,/* Safely execute function(arg) with png_error returning to this function. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:35,Availability,failure,failure,35,/* And do the cleanup prior to any failure return. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:3,Usability,SIMPL,SIMPLIFIED,3,/* SIMPLIFIED READ || SIMPLIFIED_WRITE */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c:280,Deployability,release,released,280,"/* pngget.c - retrieval of values from info struct; *; * Copyright (c) 2018-2023 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngget.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c:95,Safety,detect,detection,95,/* png_handle_PLTE() may have canceled a valid tRNS chunk but left the; * 'valid' flag for the detection of duplicate chunks. Do not report a; * valid tRNS chunk in this case.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngget.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c:8,Security,access,access,8,"/* Easy access to info, added in libpng-0.99 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngget.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c:16,Energy Efficiency,meter,meters,16,"/* Convert from meters * 1,000,000 to inches * 100,000, meters to; * inches is simply *(100/2.54), so we want *(10/2.54) == 500/127.; * Notice that this can overflow - a warning is output and 0 is; * returned.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngget.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c:56,Energy Efficiency,meter,meters,56,"/* Convert from meters * 1,000,000 to inches * 100,000, meters to; * inches is simply *(100/2.54), so we want *(10/2.54) == 500/127.; * Notice that this can overflow - a warning is output and 0 is; * returned.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngget.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c:79,Usability,simpl,simply,79,"/* Convert from meters * 1,000,000 to inches * 100,000, meters to; * inches is simply *(100/2.54), so we want *(10/2.54) == 500/127.; * Notice that this can overflow - a warning is output and 0 is; * returned.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngget.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c:6,Safety,avoid,avoid,6,/* To avoid the overflow do the conversion directly in floating; * point.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngget.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c:6,Safety,avoid,avoid,6,/* To avoid the overflow do the conversion directly in floating; * point.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngget.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c:11,Availability,redundant,redundant,11,/* This is redundant if we can be sure that the info_ptr values were all; * assigned in png_set_IHDR(). We do the check anyhow in case an; * application has ignored our advice not to mess with the members; * of info_ptr directly.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngget.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c:11,Safety,redund,redundant,11,/* This is redundant if we can be sure that the info_ptr values were all; * assigned in png_set_IHDR(). We do the check anyhow in case an; * application has ignored our advice not to mess with the members; * of info_ptr directly.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngget.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h:2222,Availability,avail,available,2222," file. If you are writing the file, fill in the information; * you want to put into the PNG file, using png_set_*() functions, then; * call png_write_info().; *; * The names chosen should be very close to the PNG specification, so; * consult that document for information about the meaning of each field.; *; * With libpng < 0.95, it was only possible to directly set and read the; * the values in the png_info_struct, which meant that the contents and; * order of the values had to remain fixed. With libpng 0.95 and later,; * however, there are now functions that abstract the contents of; * png_info_struct from the application, so this makes it easier to use; * libpng with dynamic libraries, and even makes it possible to use; * libraries that don't have all of the libpng ancillary chunk-handing; * functionality. In libpng-1.5.0 this was moved into a separate private; * file that is not visible to applications.; *; * The following members may have allocated storage attached that should be; * cleaned up before the structure is discarded: palette, trans, text,; * pcal_purpose, pcal_units, pcal_params, hist, iccp_name, iccp_profile,; * splt_palettes, scal_unit, row_pointers, and unknowns. By default, these; * are automatically freed when the info structure is deallocated, if they were; * allocated internally by libpng. This behavior can be changed by means; * of the png_data_freer() function.; *; * More allocation details: all the chunk-reading functions that; * change these members go through the corresponding png_set_*; * functions. A function to clear these members is available: see; * png_free_data(). The png_set_* functions do not depend on being; * able to point info structure members to any of the storage they are; * passed (they make their own copies), EXCEPT that the png_set_text; * functions use the same storage passed to them in the text_ptr or; * itxt_ptr structure argument, and the png_set_rows and png_set_unknowns; * functions do not make their own copies.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pnginfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h:282,Deployability,release,released,282,"/* pnginfo.h - header file for PNG reference library; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2013,2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* png_info is a structure that holds the information in a PNG file so; * that the application can find out the characteristics of the image.; * If you are reading the file, this structure will tell you what is; * in the PNG file. If you are writing the file, fill in the information; * you want to put into the PNG file, using png_set_*() functions, then; * call png_write_info().; *; * The names chosen should be very close to the PNG specification, so; * consult that document for information about the meaning of each field.; *; * With libpng < 0.95, it was only possible to directly set and read the; * the values in the png_info_struct, which meant that the contents and; * order of the values had to remain fixed. With libpng 0.95 and later,; * however, there are now functions that abstract the contents of; * png_info_struct from the application, so this makes it easier to use; * libpng with dynamic libraries, and even makes it possible to use; * libraries that don't have all of the libpng ancillary chunk-handing; * functionality. In libpng-1.5.0 this was moved into a separate private; * file that is not visible to applications.; *; * The following members may have allocated storage attached that should be; * cleaned up before the structure is discarded: palette, trans, text,; * pcal_purpose, pcal_units, pcal_params, hist, iccp_name, iccp_profile,; * splt_palettes, scal_unit, row_pointers, and unknowns. By default, these; * are automatically freed when the info structure is deallocated, if they were; * allocated internally by libpng. This behavior can be changed by mean",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pnginfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h:1589,Energy Efficiency,allocate,allocated,1589," file. If you are writing the file, fill in the information; * you want to put into the PNG file, using png_set_*() functions, then; * call png_write_info().; *; * The names chosen should be very close to the PNG specification, so; * consult that document for information about the meaning of each field.; *; * With libpng < 0.95, it was only possible to directly set and read the; * the values in the png_info_struct, which meant that the contents and; * order of the values had to remain fixed. With libpng 0.95 and later,; * however, there are now functions that abstract the contents of; * png_info_struct from the application, so this makes it easier to use; * libpng with dynamic libraries, and even makes it possible to use; * libraries that don't have all of the libpng ancillary chunk-handing; * functionality. In libpng-1.5.0 this was moved into a separate private; * file that is not visible to applications.; *; * The following members may have allocated storage attached that should be; * cleaned up before the structure is discarded: palette, trans, text,; * pcal_purpose, pcal_units, pcal_params, hist, iccp_name, iccp_profile,; * splt_palettes, scal_unit, row_pointers, and unknowns. By default, these; * are automatically freed when the info structure is deallocated, if they were; * allocated internally by libpng. This behavior can be changed by means; * of the png_data_freer() function.; *; * More allocation details: all the chunk-reading functions that; * change these members go through the corresponding png_set_*; * functions. A function to clear these members is available: see; * png_free_data(). The png_set_* functions do not depend on being; * able to point info structure members to any of the storage they are; * passed (they make their own copies), EXCEPT that the png_set_text; * functions use the same storage passed to them in the text_ptr or; * itxt_ptr structure argument, and the png_set_rows and png_set_unknowns; * functions do not make their own copies.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pnginfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h:1933,Energy Efficiency,allocate,allocated,1933," file. If you are writing the file, fill in the information; * you want to put into the PNG file, using png_set_*() functions, then; * call png_write_info().; *; * The names chosen should be very close to the PNG specification, so; * consult that document for information about the meaning of each field.; *; * With libpng < 0.95, it was only possible to directly set and read the; * the values in the png_info_struct, which meant that the contents and; * order of the values had to remain fixed. With libpng 0.95 and later,; * however, there are now functions that abstract the contents of; * png_info_struct from the application, so this makes it easier to use; * libpng with dynamic libraries, and even makes it possible to use; * libraries that don't have all of the libpng ancillary chunk-handing; * functionality. In libpng-1.5.0 this was moved into a separate private; * file that is not visible to applications.; *; * The following members may have allocated storage attached that should be; * cleaned up before the structure is discarded: palette, trans, text,; * pcal_purpose, pcal_units, pcal_params, hist, iccp_name, iccp_profile,; * splt_palettes, scal_unit, row_pointers, and unknowns. By default, these; * are automatically freed when the info structure is deallocated, if they were; * allocated internally by libpng. This behavior can be changed by means; * of the png_data_freer() function.; *; * More allocation details: all the chunk-reading functions that; * change these members go through the corresponding png_set_*; * functions. A function to clear these members is available: see; * png_free_data(). The png_set_* functions do not depend on being; * able to point info structure members to any of the storage they are; * passed (they make their own copies), EXCEPT that the png_set_text; * functions use the same storage passed to them in the text_ptr or; * itxt_ptr structure argument, and the png_set_rows and png_set_unknowns; * functions do not make their own copies.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pnginfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h:2288,Integrability,depend,depend,2288," file. If you are writing the file, fill in the information; * you want to put into the PNG file, using png_set_*() functions, then; * call png_write_info().; *; * The names chosen should be very close to the PNG specification, so; * consult that document for information about the meaning of each field.; *; * With libpng < 0.95, it was only possible to directly set and read the; * the values in the png_info_struct, which meant that the contents and; * order of the values had to remain fixed. With libpng 0.95 and later,; * however, there are now functions that abstract the contents of; * png_info_struct from the application, so this makes it easier to use; * libpng with dynamic libraries, and even makes it possible to use; * libraries that don't have all of the libpng ancillary chunk-handing; * functionality. In libpng-1.5.0 this was moved into a separate private; * file that is not visible to applications.; *; * The following members may have allocated storage attached that should be; * cleaned up before the structure is discarded: palette, trans, text,; * pcal_purpose, pcal_units, pcal_params, hist, iccp_name, iccp_profile,; * splt_palettes, scal_unit, row_pointers, and unknowns. By default, these; * are automatically freed when the info structure is deallocated, if they were; * allocated internally by libpng. This behavior can be changed by means; * of the png_data_freer() function.; *; * More allocation details: all the chunk-reading functions that; * change these members go through the corresponding png_set_*; * functions. A function to clear these members is available: see; * png_free_data(). The png_set_* functions do not depend on being; * able to point info structure members to any of the storage they are; * passed (they make their own copies), EXCEPT that the png_set_text; * functions use the same storage passed to them in the text_ptr or; * itxt_ptr structure argument, and the png_set_rows and png_set_unknowns; * functions do not make their own copies.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pnginfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h:2199,Usability,clear,clear,2199," file. If you are writing the file, fill in the information; * you want to put into the PNG file, using png_set_*() functions, then; * call png_write_info().; *; * The names chosen should be very close to the PNG specification, so; * consult that document for information about the meaning of each field.; *; * With libpng < 0.95, it was only possible to directly set and read the; * the values in the png_info_struct, which meant that the contents and; * order of the values had to remain fixed. With libpng 0.95 and later,; * however, there are now functions that abstract the contents of; * png_info_struct from the application, so this makes it easier to use; * libpng with dynamic libraries, and even makes it possible to use; * libraries that don't have all of the libpng ancillary chunk-handing; * functionality. In libpng-1.5.0 this was moved into a separate private; * file that is not visible to applications.; *; * The following members may have allocated storage attached that should be; * cleaned up before the structure is discarded: palette, trans, text,; * pcal_purpose, pcal_units, pcal_params, hist, iccp_name, iccp_profile,; * splt_palettes, scal_unit, row_pointers, and unknowns. By default, these; * are automatically freed when the info structure is deallocated, if they were; * allocated internally by libpng. This behavior can be changed by means; * of the png_data_freer() function.; *; * More allocation details: all the chunk-reading functions that; * change these members go through the corresponding png_set_*; * functions. A function to clear these members is available: see; * png_free_data(). The png_set_* functions do not depend on being; * able to point info structure members to any of the storage they are; * passed (they make their own copies), EXCEPT that the png_set_text; * functions use the same storage passed to them in the text_ptr or; * itxt_ptr structure argument, and the png_set_rows and png_set_unknowns; * functions do not make their own copies.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pnginfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h:476,Deployability,configurat,configuration,476,"/* png_colorspace only contains 'flags' if neither GAMMA or COLORSPACE are; * defined. When COLORSPACE is switched on all the colorspace-defining; * chunks should be enabled, when GAMMA is switched on all the gamma-defining; * chunks should be enabled. If this is not done it becomes possible to read; * inconsistent PNG files and assign a probably incorrect interpretation to; * the information. (In other words, by carefully choosing which chunks to; * recognize the system configuration can select an interpretation for PNG; * files containing ambiguous data and this will result in inconsistent; * behavior between different libpng builds!); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pnginfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h:476,Modifiability,config,configuration,476,"/* png_colorspace only contains 'flags' if neither GAMMA or COLORSPACE are; * defined. When COLORSPACE is switched on all the colorspace-defining; * chunks should be enabled, when GAMMA is switched on all the gamma-defining; * chunks should be enabled. If this is not done it becomes possible to read; * inconsistent PNG files and assign a probably incorrect interpretation to; * the information. (In other words, by carefully choosing which chunks to; * recognize the system configuration can select an interpretation for PNG; * files containing ambiguous data and this will result in inconsistent; * behavior between different libpng builds!); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pnginfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h:81,Availability,down,downwards,81,"/* The oFFs chunk gives the offset in ""offset_unit_type"" units rightwards; * and downwards from the top-left corner of the display, page, or other; * application-specific co-ordinate space. See the PNG_OFFSET_ defines; * below for the unit types. Valid if (valid & PNG_INFO_oFFs) non-zero.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pnginfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h:146,Energy Efficiency,reduce,reduced-color,146,"/* The hIST chunk contains the relative frequency or importance of the; * various palette entries, so that a viewer can intelligently select a; * reduced-color palette, if required. Data is an array of ""num_palette""; * values in the range [0,65535]. Data valid if (valid & PNG_INFO_hIST); * is non-zero.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pnginfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h:19,Energy Efficiency,allocate,allocated,19,/* Memory has been allocated if (valid & PNG_ALLOCATED_INFO_ROWS); non-zero */; /* Data valid if (valid & PNG_INFO_IDAT) non-zero */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pnginfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnginfo.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnglibconf.h:32,Deployability,configurat,configuration,32,"/* pnglibconf.h - library build configuration */; /* libpng version 1.6.39 */; /* Copyright (c) 2018-2022 Cosmin Truta */; /* Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson */; /* This code is released under the libpng license. */; /* For conditions of distribution and use, see the disclaimer */; /* and license in png.h */; /* pnglibconf.h */; /* Machine generated file: DO NOT EDIT */; /* Derived from: scripts/pnglibconf.dfa */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pnglibconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnglibconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnglibconf.h:207,Deployability,release,released,207,"/* pnglibconf.h - library build configuration */; /* libpng version 1.6.39 */; /* Copyright (c) 2018-2022 Cosmin Truta */; /* Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson */; /* This code is released under the libpng license. */; /* For conditions of distribution and use, see the disclaimer */; /* and license in png.h */; /* pnglibconf.h */; /* Machine generated file: DO NOT EDIT */; /* Derived from: scripts/pnglibconf.dfa */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pnglibconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnglibconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnglibconf.h:32,Modifiability,config,configuration,32,"/* pnglibconf.h - library build configuration */; /* libpng version 1.6.39 */; /* Copyright (c) 2018-2022 Cosmin Truta */; /* Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson */; /* This code is released under the libpng license. */; /* For conditions of distribution and use, see the disclaimer */; /* and license in png.h */; /* pnglibconf.h */; /* Machine generated file: DO NOT EDIT */; /* Derived from: scripts/pnglibconf.dfa */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pnglibconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pnglibconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngmem.c:280,Deployability,release,released,280,"/* pngmem.c - stub functions for memory allocation; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2014,2016 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This file provides a location for all memory allocation. Users who; * need special memory handling are expected to supply replacement; * functions for png_malloc() and png_free(), and to use; * png_create_read_struct_2() and png_create_write_struct_2() to; * identify the replacement functions.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngmem.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngmem.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngmem.c:14,Testability,stub,stub,14,"/* pngmem.c - stub functions for memory allocation; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2014,2016 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This file provides a location for all memory allocation. Users who; * need special memory handling are expected to supply replacement; * functions for png_malloc() and png_free(), and to use; * png_create_read_struct_2() and png_create_write_struct_2() to; * identify the replacement functions.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngmem.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngmem.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngmem.c:7,Availability,failure,failure,7,/* The failure case when the request is too large */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngmem.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngmem.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngmem.c:22,Availability,error,errors,22,/* These are internal errors: */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngmem.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngmem.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngmem.c:3,Availability,error,error,3,/* error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngmem.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngmem.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:269,Deployability,release,released,269,"/* pngpread.c - read a png file in push mode; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:169,Security,access,access,169,"/* TODO: Deprecate and remove this API.; * Somewhere the implementation of this seems to have been lost,; * or abandoned. It was only to support some internal back-door access; * to png_struct) in libpng-1.4.x.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:37,Integrability,depend,depends,37,/* What we do with the incoming data depends on what we were previously; * doing before we ran out of data...; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:131,Integrability,rout,routine,131,"/* Read any remaining signature bytes from the stream and compare them with; * the correct PNG signature. It is possible that this routine is called; * with bytes already read from the signature, either because they have been; * checked by the calling application, or because of multiple calls to this; * routine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:305,Integrability,rout,routine,305,"/* Read any remaining signature bytes from the stream and compare them with; * the correct PNG signature. It is possible that this routine is called; * with bytes already read from the signature, either because they have been; * checked by the calling application, or because of multiple calls to this; * routine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:3,Safety,SAFE,SAFE,3,"/* SAFE, does not exceed 8 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:186,Availability,error,error,186,"/* If we reach an IDAT chunk, this means we have read all of the; * header chunks, and we can start reading the image (or if this; * is called after the image has been read - we have an error).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:124,Modifiability,variab,variable,124,"/* We want the smaller of 'idat_size' and 'current_buffer_size', but they; * are of different types and we don't know which variable has the fewest; * bits. Carefully select the smaller and cast it to the type of the; * larger - this cannot overflow. Do not cast in the following test - it; * will break on either 16-bit or 64-bit platforms.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:280,Testability,test,test,280,"/* We want the smaller of 'idat_size' and 'current_buffer_size', but they; * are of different types and we don't know which variable has the fewest; * bits. Carefully select the smaller and cast it to the type of the; * larger - this cannot overflow. Do not cast in the following test - it; * will break on either 16-bit or 64-bit platforms.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:124,Modifiability,variab,variable,124,"/* We want the smaller of 'idat_size' and 'current_buffer_size', but they; * are of different types and we don't know which variable has the fewest; * bits. Carefully select the smaller and cast it to the type of the; * larger - this cannot overflow.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:8,Integrability,rout,routine,8,"/* This routine must process all the data it has been given; * before returning, calling the row callback as required to; * handle the uncompressed results.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:29,Availability,ERROR,ERROR,29,/* TODO: WARNING: TRUNCATION ERROR: DANGER WILL ROBINSON: */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:29,Availability,ERROR,ERROR,29,/* TODO: WARNING: TRUNCATION ERROR: DANGER WILL ROBINSON: */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:17,Availability,failure,failure,17,/* Check for any failure before proceeding. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:3,Deployability,Update,Updates,3,/* Updates png_ptr->pass */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:287,Deployability,release,released,287,"/* pngpriv.h - private declarations for use inside libpng; *; * Copyright (c) 2018-2023 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* The symbols declared in this file (including the functions declared; * as extern) are PRIVATE. They are not part of the libpng public; * interface, and are not recommended for use by regular applications.; * Some of them may become public in the future; others may stay private,; * change in an incompatible way, or even disappear.; * Although the libpng users are not forbidden to include this header,; * they should be well aware of the issues that may arise from doing so.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:553,Integrability,interface,interface,553,"/* pngpriv.h - private declarations for use inside libpng; *; * Copyright (c) 2018-2023 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* The symbols declared in this file (including the functions declared; * as extern) are PRIVATE. They are not part of the libpng public; * interface, and are not recommended for use by regular applications.; * Some of them may become public in the future; others may stay private,; * change in an incompatible way, or even disappear.; * Although the libpng users are not forbidden to include this header,; * they should be well aware of the issues that may arise from doing so.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:11,Testability,Test,Test,11,"/* Feature Test Macros. The following are defined here to ensure that correctly; * implemented libraries reveal the APIs libpng needs to build and hide those; * that are not needed and potentially damaging to the compilation.; *; * Feature Test Macros must be defined before any system header is included (see; * POSIX 1003.1 2.8.2 ""POSIX Symbols.""; *; * These macros only have an effect if the operating system supports either; * POSIX 1003.1 or C99, or both. On other operating systems (particularly; * Windows/Visual Studio) there is no effect; the OS specific tests below are; * still required (as of 2011-05-02.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:240,Testability,Test,Test,240,"/* Feature Test Macros. The following are defined here to ensure that correctly; * implemented libraries reveal the APIs libpng needs to build and hide those; * that are not needed and potentially damaging to the compilation.; *; * Feature Test Macros must be defined before any system header is included (see; * POSIX 1003.1 2.8.2 ""POSIX Symbols.""; *; * These macros only have an effect if the operating system supports either; * POSIX 1003.1 or C99, or both. On other operating systems (particularly; * Windows/Visual Studio) there is no effect; the OS specific tests below are; * still required (as of 2011-05-02.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:564,Testability,test,tests,564,"/* Feature Test Macros. The following are defined here to ensure that correctly; * implemented libraries reveal the APIs libpng needs to build and hide those; * that are not needed and potentially damaging to the compilation.; *; * Feature Test Macros must be defined before any system header is included (see; * POSIX 1003.1 2.8.2 ""POSIX Symbols.""; *; * These macros only have an effect if the operating system supports either; * POSIX 1003.1 or C99, or both. On other operating systems (particularly; * Windows/Visual Studio) there is no effect; the OS specific tests below are; * still required (as of 2011-05-02.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:359,Integrability,depend,dependencies,359,"/* If HAVE_CONFIG_H is defined during the build then the build system must; * provide an appropriate ""config.h"" file on the include path. The header file; * must provide definitions as required below (search for ""HAVE_CONFIG_H"");; * see configure.ac for more details of the requirements. The macro; * ""PNG_NO_CONFIG_H"" is provided for maintainers to test for dependencies on; * 'configure'; define this macro to prevent the configure build including the; * configure generated config.h. Libpng is expected to compile without *any*; * special build system support on a reasonably ANSI-C compliant system.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:102,Modifiability,config,config,102,"/* If HAVE_CONFIG_H is defined during the build then the build system must; * provide an appropriate ""config.h"" file on the include path. The header file; * must provide definitions as required below (search for ""HAVE_CONFIG_H"");; * see configure.ac for more details of the requirements. The macro; * ""PNG_NO_CONFIG_H"" is provided for maintainers to test for dependencies on; * 'configure'; define this macro to prevent the configure build including the; * configure generated config.h. Libpng is expected to compile without *any*; * special build system support on a reasonably ANSI-C compliant system.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:237,Modifiability,config,configure,237,"/* If HAVE_CONFIG_H is defined during the build then the build system must; * provide an appropriate ""config.h"" file on the include path. The header file; * must provide definitions as required below (search for ""HAVE_CONFIG_H"");; * see configure.ac for more details of the requirements. The macro; * ""PNG_NO_CONFIG_H"" is provided for maintainers to test for dependencies on; * 'configure'; define this macro to prevent the configure build including the; * configure generated config.h. Libpng is expected to compile without *any*; * special build system support on a reasonably ANSI-C compliant system.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:379,Modifiability,config,configure,379,"/* If HAVE_CONFIG_H is defined during the build then the build system must; * provide an appropriate ""config.h"" file on the include path. The header file; * must provide definitions as required below (search for ""HAVE_CONFIG_H"");; * see configure.ac for more details of the requirements. The macro; * ""PNG_NO_CONFIG_H"" is provided for maintainers to test for dependencies on; * 'configure'; define this macro to prevent the configure build including the; * configure generated config.h. Libpng is expected to compile without *any*; * special build system support on a reasonably ANSI-C compliant system.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:424,Modifiability,config,configure,424,"/* If HAVE_CONFIG_H is defined during the build then the build system must; * provide an appropriate ""config.h"" file on the include path. The header file; * must provide definitions as required below (search for ""HAVE_CONFIG_H"");; * see configure.ac for more details of the requirements. The macro; * ""PNG_NO_CONFIG_H"" is provided for maintainers to test for dependencies on; * 'configure'; define this macro to prevent the configure build including the; * configure generated config.h. Libpng is expected to compile without *any*; * special build system support on a reasonably ANSI-C compliant system.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:457,Modifiability,config,configure,457,"/* If HAVE_CONFIG_H is defined during the build then the build system must; * provide an appropriate ""config.h"" file on the include path. The header file; * must provide definitions as required below (search for ""HAVE_CONFIG_H"");; * see configure.ac for more details of the requirements. The macro; * ""PNG_NO_CONFIG_H"" is provided for maintainers to test for dependencies on; * 'configure'; define this macro to prevent the configure build including the; * configure generated config.h. Libpng is expected to compile without *any*; * special build system support on a reasonably ANSI-C compliant system.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:477,Modifiability,config,config,477,"/* If HAVE_CONFIG_H is defined during the build then the build system must; * provide an appropriate ""config.h"" file on the include path. The header file; * must provide definitions as required below (search for ""HAVE_CONFIG_H"");; * see configure.ac for more details of the requirements. The macro; * ""PNG_NO_CONFIG_H"" is provided for maintainers to test for dependencies on; * 'configure'; define this macro to prevent the configure build including the; * configure generated config.h. Libpng is expected to compile without *any*; * special build system support on a reasonably ANSI-C compliant system.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:350,Testability,test,test,350,"/* If HAVE_CONFIG_H is defined during the build then the build system must; * provide an appropriate ""config.h"" file on the include path. The header file; * must provide definitions as required below (search for ""HAVE_CONFIG_H"");; * see configure.ac for more details of the requirements. The macro; * ""PNG_NO_CONFIG_H"" is provided for maintainers to test for dependencies on; * 'configure'; define this macro to prevent the configure build including the; * configure generated config.h. Libpng is expected to compile without *any*; * special build system support on a reasonably ANSI-C compliant system.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:45,Modifiability,config,config,45,/* Pick up the definition of 'restrict' from config.h if it was read: */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:305,Availability,avail,available,305,"/* To support symbol prefixing it is necessary to know *before* including png.h; * whether the fixed point (and maybe other) APIs are exported, because if they; * are not internal definitions may be required. This is handled below just; * before png.h is included, but load the configuration now if it is available.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:278,Deployability,configurat,configuration,278,"/* To support symbol prefixing it is necessary to know *before* including png.h; * whether the fixed point (and maybe other) APIs are exported, because if they; * are not internal definitions may be required. This is handled below just; * before png.h is included, but load the configuration now if it is available.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:278,Modifiability,config,configuration,278,"/* To support symbol prefixing it is necessary to know *before* including png.h; * whether the fixed point (and maybe other) APIs are exported, because if they; * are not internal definitions may be required. This is handled below just; * before png.h is included, but load the configuration now if it is available.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:269,Performance,load,load,269,"/* To support symbol prefixing it is necessary to know *before* including png.h; * whether the fixed point (and maybe other) APIs are exported, because if they; * are not internal definitions may be required. This is handled below just; * before png.h is included, but load the configuration now if it is available.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:544,Integrability,depend,depending,544,"/* Compile time options.; * =====================; * In a multi-arch build the compiler may compile the code several times for the; * same object module, producing different binaries for different architectures.; * When this happens configure-time setting of the target host options cannot be; * done and this interferes with the handling of the ARM NEON optimizations, and; * possibly other similar optimizations. Put additional tests here; in general; * this is needed when the same option can be changed at both compile time and; * run time depending on the target OS (i.e. iOS vs Android.); *; * NOTE: symbol prefixing does not pass $(CFLAGS) to the preprocessor, because; * this is not possible with certain compilers (Oracle SUN OS CC), as a result; * it is necessary to ensure that all extern functions that *might* be used; * regardless of $(CFLAGS) get declared in this file. The test on __ARM_NEON__; * below is one example of this behavior because it is controlled by the; * presence or not of -mfpu=neon on the GCC command line, it is possible to do; * this in $(CC), e.g. ""CC=gcc -mfpu=neon"", but people who build libpng rarely; * do this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:233,Modifiability,config,configure-time,233,"/* Compile time options.; * =====================; * In a multi-arch build the compiler may compile the code several times for the; * same object module, producing different binaries for different architectures.; * When this happens configure-time setting of the target host options cannot be; * done and this interferes with the handling of the ARM NEON optimizations, and; * possibly other similar optimizations. Put additional tests here; in general; * this is needed when the same option can be changed at both compile time and; * run time depending on the target OS (i.e. iOS vs Android.); *; * NOTE: symbol prefixing does not pass $(CFLAGS) to the preprocessor, because; * this is not possible with certain compilers (Oracle SUN OS CC), as a result; * it is necessary to ensure that all extern functions that *might* be used; * regardless of $(CFLAGS) get declared in this file. The test on __ARM_NEON__; * below is one example of this behavior because it is controlled by the; * presence or not of -mfpu=neon on the GCC command line, it is possible to do; * this in $(CC), e.g. ""CC=gcc -mfpu=neon"", but people who build libpng rarely; * do this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:355,Performance,optimiz,optimizations,355,"/* Compile time options.; * =====================; * In a multi-arch build the compiler may compile the code several times for the; * same object module, producing different binaries for different architectures.; * When this happens configure-time setting of the target host options cannot be; * done and this interferes with the handling of the ARM NEON optimizations, and; * possibly other similar optimizations. Put additional tests here; in general; * this is needed when the same option can be changed at both compile time and; * run time depending on the target OS (i.e. iOS vs Android.); *; * NOTE: symbol prefixing does not pass $(CFLAGS) to the preprocessor, because; * this is not possible with certain compilers (Oracle SUN OS CC), as a result; * it is necessary to ensure that all extern functions that *might* be used; * regardless of $(CFLAGS) get declared in this file. The test on __ARM_NEON__; * below is one example of this behavior because it is controlled by the; * presence or not of -mfpu=neon on the GCC command line, it is possible to do; * this in $(CC), e.g. ""CC=gcc -mfpu=neon"", but people who build libpng rarely; * do this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:400,Performance,optimiz,optimizations,400,"/* Compile time options.; * =====================; * In a multi-arch build the compiler may compile the code several times for the; * same object module, producing different binaries for different architectures.; * When this happens configure-time setting of the target host options cannot be; * done and this interferes with the handling of the ARM NEON optimizations, and; * possibly other similar optimizations. Put additional tests here; in general; * this is needed when the same option can be changed at both compile time and; * run time depending on the target OS (i.e. iOS vs Android.); *; * NOTE: symbol prefixing does not pass $(CFLAGS) to the preprocessor, because; * this is not possible with certain compilers (Oracle SUN OS CC), as a result; * it is necessary to ensure that all extern functions that *might* be used; * regardless of $(CFLAGS) get declared in this file. The test on __ARM_NEON__; * below is one example of this behavior because it is controlled by the; * presence or not of -mfpu=neon on the GCC command line, it is possible to do; * this in $(CC), e.g. ""CC=gcc -mfpu=neon"", but people who build libpng rarely; * do this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:430,Testability,test,tests,430,"/* Compile time options.; * =====================; * In a multi-arch build the compiler may compile the code several times for the; * same object module, producing different binaries for different architectures.; * When this happens configure-time setting of the target host options cannot be; * done and this interferes with the handling of the ARM NEON optimizations, and; * possibly other similar optimizations. Put additional tests here; in general; * this is needed when the same option can be changed at both compile time and; * run time depending on the target OS (i.e. iOS vs Android.); *; * NOTE: symbol prefixing does not pass $(CFLAGS) to the preprocessor, because; * this is not possible with certain compilers (Oracle SUN OS CC), as a result; * it is necessary to ensure that all extern functions that *might* be used; * regardless of $(CFLAGS) get declared in this file. The test on __ARM_NEON__; * below is one example of this behavior because it is controlled by the; * presence or not of -mfpu=neon on the GCC command line, it is possible to do; * this in $(CC), e.g. ""CC=gcc -mfpu=neon"", but people who build libpng rarely; * do this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:889,Testability,test,test,889,"/* Compile time options.; * =====================; * In a multi-arch build the compiler may compile the code several times for the; * same object module, producing different binaries for different architectures.; * When this happens configure-time setting of the target host options cannot be; * done and this interferes with the handling of the ARM NEON optimizations, and; * possibly other similar optimizations. Put additional tests here; in general; * this is needed when the same option can be changed at both compile time and; * run time depending on the target OS (i.e. iOS vs Android.); *; * NOTE: symbol prefixing does not pass $(CFLAGS) to the preprocessor, because; * this is not possible with certain compilers (Oracle SUN OS CC), as a result; * it is necessary to ensure that all extern functions that *might* be used; * regardless of $(CFLAGS) get declared in this file. The test on __ARM_NEON__; * below is one example of this behavior because it is controlled by the; * presence or not of -mfpu=neon on the GCC command line, it is possible to do; * this in $(CC), e.g. ""CC=gcc -mfpu=neon"", but people who build libpng rarely; * do this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:586,Availability,error,error,586,"/* ARM NEON optimizations are being controlled by the compiler settings,; * typically the target FPU. If the FPU has been set to NEON (-mfpu=neon; * with GCC) then the compiler will define __ARM_NEON__ and we can rely; * unconditionally on NEON instructions not crashing, otherwise we must; * disable use of NEON instructions.; *; * NOTE: at present these optimizations depend on 'ALIGNED_MEMORY', so they; * can only be turned on automatically if that is supported too. If; * PNG_ARM_NEON_OPT is set in CPPFLAGS (to >0) then arm/arm_init.c will fail; * to compile with an appropriate #error if ALIGNED_MEMORY has been turned; * off.; *; * Note that gcc-4.9 defines __ARM_NEON instead of the deprecated; * __ARM_NEON__, so we check both variants.; *; * To disable ARM_NEON optimizations entirely, and skip compiling the; * associated assembler code, pass --enable-arm-neon=no to configure; * or put -DPNG_ARM_NEON_OPT=0 in CPPFLAGS.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:370,Integrability,depend,depend,370,"/* ARM NEON optimizations are being controlled by the compiler settings,; * typically the target FPU. If the FPU has been set to NEON (-mfpu=neon; * with GCC) then the compiler will define __ARM_NEON__ and we can rely; * unconditionally on NEON instructions not crashing, otherwise we must; * disable use of NEON instructions.; *; * NOTE: at present these optimizations depend on 'ALIGNED_MEMORY', so they; * can only be turned on automatically if that is supported too. If; * PNG_ARM_NEON_OPT is set in CPPFLAGS (to >0) then arm/arm_init.c will fail; * to compile with an appropriate #error if ALIGNED_MEMORY has been turned; * off.; *; * Note that gcc-4.9 defines __ARM_NEON instead of the deprecated; * __ARM_NEON__, so we check both variants.; *; * To disable ARM_NEON optimizations entirely, and skip compiling the; * associated assembler code, pass --enable-arm-neon=no to configure; * or put -DPNG_ARM_NEON_OPT=0 in CPPFLAGS.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:879,Modifiability,config,configure,879,"/* ARM NEON optimizations are being controlled by the compiler settings,; * typically the target FPU. If the FPU has been set to NEON (-mfpu=neon; * with GCC) then the compiler will define __ARM_NEON__ and we can rely; * unconditionally on NEON instructions not crashing, otherwise we must; * disable use of NEON instructions.; *; * NOTE: at present these optimizations depend on 'ALIGNED_MEMORY', so they; * can only be turned on automatically if that is supported too. If; * PNG_ARM_NEON_OPT is set in CPPFLAGS (to >0) then arm/arm_init.c will fail; * to compile with an appropriate #error if ALIGNED_MEMORY has been turned; * off.; *; * Note that gcc-4.9 defines __ARM_NEON instead of the deprecated; * __ARM_NEON__, so we check both variants.; *; * To disable ARM_NEON optimizations entirely, and skip compiling the; * associated assembler code, pass --enable-arm-neon=no to configure; * or put -DPNG_ARM_NEON_OPT=0 in CPPFLAGS.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:12,Performance,optimiz,optimizations,12,"/* ARM NEON optimizations are being controlled by the compiler settings,; * typically the target FPU. If the FPU has been set to NEON (-mfpu=neon; * with GCC) then the compiler will define __ARM_NEON__ and we can rely; * unconditionally on NEON instructions not crashing, otherwise we must; * disable use of NEON instructions.; *; * NOTE: at present these optimizations depend on 'ALIGNED_MEMORY', so they; * can only be turned on automatically if that is supported too. If; * PNG_ARM_NEON_OPT is set in CPPFLAGS (to >0) then arm/arm_init.c will fail; * to compile with an appropriate #error if ALIGNED_MEMORY has been turned; * off.; *; * Note that gcc-4.9 defines __ARM_NEON instead of the deprecated; * __ARM_NEON__, so we check both variants.; *; * To disable ARM_NEON optimizations entirely, and skip compiling the; * associated assembler code, pass --enable-arm-neon=no to configure; * or put -DPNG_ARM_NEON_OPT=0 in CPPFLAGS.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:356,Performance,optimiz,optimizations,356,"/* ARM NEON optimizations are being controlled by the compiler settings,; * typically the target FPU. If the FPU has been set to NEON (-mfpu=neon; * with GCC) then the compiler will define __ARM_NEON__ and we can rely; * unconditionally on NEON instructions not crashing, otherwise we must; * disable use of NEON instructions.; *; * NOTE: at present these optimizations depend on 'ALIGNED_MEMORY', so they; * can only be turned on automatically if that is supported too. If; * PNG_ARM_NEON_OPT is set in CPPFLAGS (to >0) then arm/arm_init.c will fail; * to compile with an appropriate #error if ALIGNED_MEMORY has been turned; * off.; *; * Note that gcc-4.9 defines __ARM_NEON instead of the deprecated; * __ARM_NEON__, so we check both variants.; *; * To disable ARM_NEON optimizations entirely, and skip compiling the; * associated assembler code, pass --enable-arm-neon=no to configure; * or put -DPNG_ARM_NEON_OPT=0 in CPPFLAGS.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:773,Performance,optimiz,optimizations,773,"/* ARM NEON optimizations are being controlled by the compiler settings,; * typically the target FPU. If the FPU has been set to NEON (-mfpu=neon; * with GCC) then the compiler will define __ARM_NEON__ and we can rely; * unconditionally on NEON instructions not crashing, otherwise we must; * disable use of NEON instructions.; *; * NOTE: at present these optimizations depend on 'ALIGNED_MEMORY', so they; * can only be turned on automatically if that is supported too. If; * PNG_ARM_NEON_OPT is set in CPPFLAGS (to >0) then arm/arm_init.c will fail; * to compile with an appropriate #error if ALIGNED_MEMORY has been turned; * off.; *; * Note that gcc-4.9 defines __ARM_NEON instead of the deprecated; * __ARM_NEON__, so we check both variants.; *; * To disable ARM_NEON optimizations entirely, and skip compiling the; * associated assembler code, pass --enable-arm-neon=no to configure; * or put -DPNG_ARM_NEON_OPT=0 in CPPFLAGS.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:8,Performance,optimiz,optimizations,8,"/* NEON optimizations are to be at least considered by libpng, so enable the; * callbacks to do this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:731,Deployability,release,release,731,"/* By default the 'intrinsics' code in arm/filter_neon_intrinsics.c is used; * if possible - if __ARM_NEON__ is set and the compiler version is not known; * to be broken. This is controlled by PNG_ARM_NEON_IMPLEMENTATION which can; * be:; *; * 1 The intrinsics code (the default with __ARM_NEON__); * 2 The hand coded assembler (the default without __ARM_NEON__); *; * It is possible to set PNG_ARM_NEON_IMPLEMENTATION in CPPFLAGS, however; * this is *NOT* supported and may cease to work even after a minor revision; * to libpng. It *is* valid to do this for testing purposes, e.g. speed; * testing or a new compiler, but the results should be communicated to the; * libpng implementation list for incorporation in the next minor release.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:560,Testability,test,testing,560,"/* By default the 'intrinsics' code in arm/filter_neon_intrinsics.c is used; * if possible - if __ARM_NEON__ is set and the compiler version is not known; * to be broken. This is controlled by PNG_ARM_NEON_IMPLEMENTATION which can; * be:; *; * 1 The intrinsics code (the default with __ARM_NEON__); * 2 The hand coded assembler (the default without __ARM_NEON__); *; * It is possible to set PNG_ARM_NEON_IMPLEMENTATION in CPPFLAGS, however; * this is *NOT* supported and may cease to work even after a minor revision; * to libpng. It *is* valid to do this for testing purposes, e.g. speed; * testing or a new compiler, but the results should be communicated to the; * libpng implementation list for incorporation in the next minor release.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:592,Testability,test,testing,592,"/* By default the 'intrinsics' code in arm/filter_neon_intrinsics.c is used; * if possible - if __ARM_NEON__ is set and the compiler version is not known; * to be broken. This is controlled by PNG_ARM_NEON_IMPLEMENTATION which can; * be:; *; * 1 The intrinsics code (the default with __ARM_NEON__); * 2 The hand coded assembler (the default without __ARM_NEON__); *; * It is possible to set PNG_ARM_NEON_IMPLEMENTATION in CPPFLAGS, however; * this is *NOT* supported and may cease to work even after a minor revision; * to libpng. It *is* valid to do this for testing purposes, e.g. speed; * testing or a new compiler, but the results should be communicated to the; * libpng implementation list for incorporation in the next minor release.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:54,Usability,simpl,simply,54,/* !defined __ARM_NEON__ */; /* The 'intrinsics' code simply won't compile without this -mfpu=neon:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:35,Deployability,configurat,configuration,35,/* Only check for SSE if the build configuration has been modified to; * enable SSE optimizations. This means that these optimizations will; * be off by default. See contrib/intel for more details.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:35,Modifiability,config,configuration,35,/* Only check for SSE if the build configuration has been modified to; * enable SSE optimizations. This means that these optimizations will; * be off by default. See contrib/intel for more details.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:84,Performance,optimiz,optimizations,84,/* Only check for SSE if the build configuration has been modified to; * enable SSE optimizations. This means that these optimizations will; * be off by default. See contrib/intel for more details.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:121,Performance,optimiz,optimizations,121,/* Only check for SSE if the build configuration has been modified to; * enable SSE optimizations. This means that these optimizations will; * be off by default. See contrib/intel for more details.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:79,Safety,detect,detect,79,"/* We are not actually using AVX, but checking for AVX is the best; way we can detect SSE4.1 and SSSE3 on MSVC.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:307,Safety,avoid,avoid,307,/* Is this a build of a DLL where compilation of the object modules requires; * different preprocessor settings to those required for a simple library? If; * so PNG_BUILD_DLL must be set.; *; * If libpng is used inside a DLL but that DLL does not export the libpng APIs; * PNG_BUILD_DLL must not be set. To avoid the code below kicking in build a; * static library of libpng then link the DLL against that.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:136,Usability,simpl,simple,136,/* Is this a build of a DLL where compilation of the object modules requires; * different preprocessor settings to those required for a simple library? If; * so PNG_BUILD_DLL must be set.; *; * If libpng is used inside a DLL but that DLL does not export the libpng APIs; * PNG_BUILD_DLL must not be set. To avoid the code below kicking in build a; * static library of libpng then link the DLL against that.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:194,Availability,reliab,reliable,194,/* This is set by the Microsoft Visual Studio IDE in projects that; * build a DLL. It can't easily be removed from those projects (it; * isn't visible in the Visual Studio UI) so it is a fairly reliable; * indication that PNG_IMPEXP needs to be set to the DLL export; * attributes.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:469,Integrability,depend,depend,469,/* If floating or fixed point APIs are disabled they may still be compiled; * internally. To handle this make sure they are declared as the appropriate; * internal extern function (otherwise the symbol prefixing stuff won't work and; * the functions will be used without definitions.); *; * NOTE: although all the API functions are declared here they are not all; * actually built! Because the declarations are still made it is necessary to; * fake out types that they depend on.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:57,Deployability,install,installed,57,"/* This is a global switch to set the compilation for an installed system; * (a release build). It can be set for testing debug builds to ensure that; * they will compile when the build type is switched to RC or STABLE, the; * default is just to use PNG_LIBPNG_BUILD_BASE_TYPE. Set this in CPPFLAGS; * with either:; *; * -DPNG_RELEASE_BUILD Turns on the release compile path; * -DPNG_RELEASE_BUILD=0 Turns it off; * or in your pngusr.h with; * #define PNG_RELEASE_BUILD=1 Turns on the release compile path; * #define PNG_RELEASE_BUILD=0 Turns it off; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:80,Deployability,release,release,80,"/* This is a global switch to set the compilation for an installed system; * (a release build). It can be set for testing debug builds to ensure that; * they will compile when the build type is switched to RC or STABLE, the; * default is just to use PNG_LIBPNG_BUILD_BASE_TYPE. Set this in CPPFLAGS; * with either:; *; * -DPNG_RELEASE_BUILD Turns on the release compile path; * -DPNG_RELEASE_BUILD=0 Turns it off; * or in your pngusr.h with; * #define PNG_RELEASE_BUILD=1 Turns on the release compile path; * #define PNG_RELEASE_BUILD=0 Turns it off; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:354,Deployability,release,release,354,"/* This is a global switch to set the compilation for an installed system; * (a release build). It can be set for testing debug builds to ensure that; * they will compile when the build type is switched to RC or STABLE, the; * default is just to use PNG_LIBPNG_BUILD_BASE_TYPE. Set this in CPPFLAGS; * with either:; *; * -DPNG_RELEASE_BUILD Turns on the release compile path; * -DPNG_RELEASE_BUILD=0 Turns it off; * or in your pngusr.h with; * #define PNG_RELEASE_BUILD=1 Turns on the release compile path; * #define PNG_RELEASE_BUILD=0 Turns it off; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:485,Deployability,release,release,485,"/* This is a global switch to set the compilation for an installed system; * (a release build). It can be set for testing debug builds to ensure that; * they will compile when the build type is switched to RC or STABLE, the; * default is just to use PNG_LIBPNG_BUILD_BASE_TYPE. Set this in CPPFLAGS; * with either:; *; * -DPNG_RELEASE_BUILD Turns on the release compile path; * -DPNG_RELEASE_BUILD=0 Turns it off; * or in your pngusr.h with; * #define PNG_RELEASE_BUILD=1 Turns on the release compile path; * #define PNG_RELEASE_BUILD=0 Turns it off; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:114,Testability,test,testing,114,"/* This is a global switch to set the compilation for an installed system; * (a release build). It can be set for testing debug builds to ensure that; * they will compile when the build type is switched to RC or STABLE, the; * default is just to use PNG_LIBPNG_BUILD_BASE_TYPE. Set this in CPPFLAGS; * with either:; *; * -DPNG_RELEASE_BUILD Turns on the release compile path; * -DPNG_RELEASE_BUILD=0 Turns it off; * or in your pngusr.h with; * #define PNG_RELEASE_BUILD=1 Turns on the release compile path; * #define PNG_RELEASE_BUILD=0 Turns it off; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:305,Energy Efficiency,allocate,allocate,305,"/* SECURITY and SAFETY:; *; * libpng is built with support for internal limits on image dimensions and; * memory usage. These are documented in scripts/pnglibconf.dfa of the; * source and recorded in the machine generated header file pnglibconf.h.; */; /* If you are running on a machine where you cannot allocate more; * than 64K of memory at once, uncomment this. While libpng will not; * normally need that much memory in a chunk (unless you load up a very; * large file), zlib needs to know how big of a chunk it can use, and; * libpng thus makes sure to check any memory allocation to verify it; * will fit into memory.; *; * zlib provides 'MAXSEG_64K' which, if defined, indicates the; * same limit and pngconf.h (already included) sets the limit; * if certain operating systems are detected.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:445,Performance,load,load,445,"/* SECURITY and SAFETY:; *; * libpng is built with support for internal limits on image dimensions and; * memory usage. These are documented in scripts/pnglibconf.dfa of the; * source and recorded in the machine generated header file pnglibconf.h.; */; /* If you are running on a machine where you cannot allocate more; * than 64K of memory at once, uncomment this. While libpng will not; * normally need that much memory in a chunk (unless you load up a very; * large file), zlib needs to know how big of a chunk it can use, and; * libpng thus makes sure to check any memory allocation to verify it; * will fit into memory.; *; * zlib provides 'MAXSEG_64K' which, if defined, indicates the; * same limit and pngconf.h (already included) sets the limit; * if certain operating systems are detected.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:16,Safety,SAFE,SAFETY,16,"/* SECURITY and SAFETY:; *; * libpng is built with support for internal limits on image dimensions and; * memory usage. These are documented in scripts/pnglibconf.dfa of the; * source and recorded in the machine generated header file pnglibconf.h.; */; /* If you are running on a machine where you cannot allocate more; * than 64K of memory at once, uncomment this. While libpng will not; * normally need that much memory in a chunk (unless you load up a very; * large file), zlib needs to know how big of a chunk it can use, and; * libpng thus makes sure to check any memory allocation to verify it; * will fit into memory.; *; * zlib provides 'MAXSEG_64K' which, if defined, indicates the; * same limit and pngconf.h (already included) sets the limit; * if certain operating systems are detected.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:789,Safety,detect,detected,789,"/* SECURITY and SAFETY:; *; * libpng is built with support for internal limits on image dimensions and; * memory usage. These are documented in scripts/pnglibconf.dfa of the; * source and recorded in the machine generated header file pnglibconf.h.; */; /* If you are running on a machine where you cannot allocate more; * than 64K of memory at once, uncomment this. While libpng will not; * normally need that much memory in a chunk (unless you load up a very; * large file), zlib needs to know how big of a chunk it can use, and; * libpng thus makes sure to check any memory allocation to verify it; * will fit into memory.; *; * zlib provides 'MAXSEG_64K' which, if defined, indicates the; * same limit and pngconf.h (already included) sets the limit; * if certain operating systems are detected.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:3,Security,SECUR,SECURITY,3,"/* SECURITY and SAFETY:; *; * libpng is built with support for internal limits on image dimensions and; * memory usage. These are documented in scripts/pnglibconf.dfa of the; * source and recorded in the machine generated header file pnglibconf.h.; */; /* If you are running on a machine where you cannot allocate more; * than 64K of memory at once, uncomment this. While libpng will not; * normally need that much memory in a chunk (unless you load up a very; * large file), zlib needs to know how big of a chunk it can use, and; * libpng thus makes sure to check any memory allocation to verify it; * will fit into memory.; *; * zlib provides 'MAXSEG_64K' which, if defined, indicates the; * same limit and pngconf.h (already included) sets the limit; * if certain operating systems are detected.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:122,Performance,perform,performance,122,"/* Unused formal parameter warnings are silenced using the following macro; * which is expected to have no bad effects on performance (optimizing; * compilers will probably remove it entirely). Note that if you replace; * it with something other than whitespace, you must include the terminating; * semicolon.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:135,Performance,optimiz,optimizing,135,"/* Unused formal parameter warnings are silenced using the following macro; * which is expected to have no bad effects on performance (optimizing; * compilers will probably remove it entirely). Note that if you replace; * it with something other than whitespace, you must include the terminating; * semicolon.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:18,Availability,error,errors,18,/* If warnings or errors are turned off the code is disabled or redirected here.; * From 1.5.4 functions have been added to allow very limited formatting of; * error and warning messages - this code will also be disabled here.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:160,Availability,error,error,160,/* If warnings or errors are turned off the code is disabled or redirected here.; * From 1.5.4 functions have been added to allow very limited formatting of; * error and warning messages - this code will also be disabled here.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:178,Integrability,message,messages,178,/* If warnings or errors are turned off the code is disabled or redirected here.; * From 1.5.4 functions have been added to allow very limited formatting of; * error and warning messages - this code will also be disabled here.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:264,Availability,error,error,264,"/* Other defines specific to compilers can go here. Try to keep; * them inside an appropriate ifdef/endif pair for portability.; */; /* C allows up-casts from (void*) to any pointer and (const void*) to any; * pointer to a const object. C++ regards this as a type error and requires an; * explicit, static, cast and provides the static_cast<> rune to ensure that; * const is not cast away.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:115,Modifiability,portab,portability,115,"/* Other defines specific to compilers can go here. Try to keep; * them inside an appropriate ifdef/endif pair for portability.; */; /* C allows up-casts from (void*) to any pointer and (const void*) to any; * pointer to a const object. C++ regards this as a type error and requires an; * explicit, static, cast and provides the static_cast<> rune to ensure that; * const is not cast away.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:54,Integrability,rout,routines,54,/* This provides the non-ANSI (far) memory allocation routines. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:44,Integrability,depend,dependent,44,/* These macros may need to be architecture dependent. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:20,Security,access,accesses,20,/* assume unaligned accesses are OK */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:35,Performance,optimiz,optimizations,35,/* Default to using aligned access optimizations and requiring alignment to a; * multiple of the data type size. Override in a compiler specific fashion; * if necessary by inserting tests here:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:28,Security,access,access,28,/* Default to using aligned access optimizations and requiring alignment to a; * multiple of the data type size. Override in a compiler specific fashion; * if necessary by inserting tests here:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:182,Testability,test,tests,182,/* Default to using aligned access optimizations and requiring alignment to a; * multiple of the data type size. Override in a compiler specific fashion; * if necessary by inserting tests here:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:231,Performance,perform,performance,231,"/* This is used because in some compiler implementations non-aligned; * structure members are supported, so the offsetof approach below fails.; * Set PNG_ALIGN_SIZE=0 for compiler combinations where unaligned access; * is good for performance. Do not do this unless you have tested the; * result and understand it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:209,Security,access,access,209,"/* This is used because in some compiler implementations non-aligned; * structure members are supported, so the offsetof approach below fails.; * Set PNG_ALIGN_SIZE=0 for compiler combinations where unaligned access; * is good for performance. Do not do this unless you have tested the; * result and understand it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:275,Testability,test,tested,275,"/* This is used because in some compiler implementations non-aligned; * structure members are supported, so the offsetof approach below fails.; * Set PNG_ALIGN_SIZE=0 for compiler combinations where unaligned access; * is good for performance. Do not do this unless you have tested the; * result and understand it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:181,Security,expose,exposed,181,"/* End of memory model/platform independent support */; /* End of 1.5.0beta36 move from pngconf.h */; /* CONSTANTS and UTILITY MACROS; * These are used internally by libpng and not exposed in the API; */; /* Various modes of operation. Note that after an init, mode is set to; * zero automatically when the structure is created. Three of these; * are defined in png.h because they need to be visible to applications; * that call png_set_unknown_chunk().; */; /* #define PNG_HAVE_IHDR 0x01U (defined in png.h) */; /* #define PNG_HAVE_PLTE 0x02U (defined in png.h) */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:423,Availability,error,error,423,/* Added to libpng-1.6.0: scale a 16-bit value in the range 0..65535 to 0..255; * by dividing by 257 *with rounding*. This macro is exact for the given range.; * See the discourse in pngrtran.c png_do_scale_16_to_8. The values in the; * macro were established by experiment (modifying the added value). The macro; * has a second variant that takes a value already scaled by 255 and divides by; * 65535 - this has a maximum error of .502. Over the range 0..65535*65535 it; * only gives off-by-one errors and only for 0.5% (1 in 200) of the values.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:496,Availability,error,errors,496,/* Added to libpng-1.6.0: scale a 16-bit value in the range 0..65535 to 0..255; * by dividing by 257 *with rounding*. This macro is exact for the given range.; * See the discourse in pngrtran.c png_do_scale_16_to_8. The values in the; * macro were established by experiment (modifying the added value). The macro; * has a second variant that takes a value already scaled by 255 and divides by; * 65535 - this has a maximum error of .502. Over the range 0..65535*65535 it; * only gives off-by-one errors and only for 0.5% (1 in 200) of the values.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:209,Modifiability,variab,variable,209,"/* PNG_OUT_OF_RANGE returns true if value is outside the range; * ideal-delta..ideal+delta. Each argument is evaluated twice.; * ""ideal"" and ""delta"" should be constants, normally simple; * integers, ""value"" a variable. Added to libpng-1.2.6 JB; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:179,Usability,simpl,simple,179,"/* PNG_OUT_OF_RANGE returns true if value is outside the range; * ideal-delta..ideal+delta. Each argument is evaluated twice.; * ""ideal"" and ""delta"" should be constants, normally simple; * integers, ""value"" a variable. Added to libpng-1.2.6 JB; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:315,Availability,error,error,315,"/* The floating point conversion can't overflow, though it can and; * does lose accuracy relative to the original fixed point value.; * In practice this doesn't matter because png_fixed_point only; * stores numbers with very low precision. The png_ptr and s; * arguments are unused by default but are there in case error; * checking becomes a requirement.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:626,Availability,error,error,626,"/* The fixed point conversion performs range checking and evaluates; * its argument multiple times, so must be used with care. The; * range checking uses the PNG specification values for a signed; * 32-bit fixed point value except that the values are deliberately; * rounded-to-zero to an integral value - 21474 (21474.83 is roughly; * (2^31-1) * 100000). 's' is a string that describes the value being; * converted.; *; * NOTE: this macro will raise a png_error if the range check fails,; * therefore it is normally only appropriate to use this on values; * that come from API calls or other sources where an out of range; * error indicates a programming error, not a data error!; *; * NOTE: by default this is off - the macro is not used - because the; * function call saves a lot of code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:656,Availability,error,error,656,"/* The fixed point conversion performs range checking and evaluates; * its argument multiple times, so must be used with care. The; * range checking uses the PNG specification values for a signed; * 32-bit fixed point value except that the values are deliberately; * rounded-to-zero to an integral value - 21474 (21474.83 is roughly; * (2^31-1) * 100000). 's' is a string that describes the value being; * converted.; *; * NOTE: this macro will raise a png_error if the range check fails,; * therefore it is normally only appropriate to use this on values; * that come from API calls or other sources where an out of range; * error indicates a programming error, not a data error!; *; * NOTE: by default this is off - the macro is not used - because the; * function call saves a lot of code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:674,Availability,error,error,674,"/* The fixed point conversion performs range checking and evaluates; * its argument multiple times, so must be used with care. The; * range checking uses the PNG specification values for a signed; * 32-bit fixed point value except that the values are deliberately; * rounded-to-zero to an integral value - 21474 (21474.83 is roughly; * (2^31-1) * 100000). 's' is a string that describes the value being; * converted.; *; * NOTE: this macro will raise a png_error if the range check fails,; * therefore it is normally only appropriate to use this on values; * that come from API calls or other sources where an out of range; * error indicates a programming error, not a data error!; *; * NOTE: by default this is off - the macro is not used - because the; * function call saves a lot of code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:30,Performance,perform,performs,30,"/* The fixed point conversion performs range checking and evaluates; * its argument multiple times, so must be used with care. The; * range checking uses the PNG specification values for a signed; * 32-bit fixed point value except that the values are deliberately; * rounded-to-zero to an integral value - 21474 (21474.83 is roughly; * (2^31-1) * 100000). 's' is a string that describes the value being; * converted.; *; * NOTE: this macro will raise a png_error if the range check fails,; * therefore it is normally only appropriate to use this on values; * that come from API calls or other sources where an out of range; * error indicates a programming error, not a data error!; *; * NOTE: by default this is off - the macro is not used - because the; * function call saves a lot of code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:90,Testability,test,test,90,"/* else the corresponding function is defined below, inside the scope of the; * cplusplus test.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:277,Safety,avoid,avoid,277,"/* Constants for known chunk types. If you need to add a chunk, define the name; * here. For historical reasons these constants have the form png_<name>; i.e.; * the prefix is lower case. Please use decimal values as the parameters to; * match the ISO PNG specification and to avoid relying on the C locale; * interpretation of character values.; *; * Prior to 1.5.6 these constants were strings, as of 1.5.6 png_uint_32 values; * are computed and a new macro (PNG_STRING_FROM_CHUNK) added to allow a string; * to be generated if required.; *; * PNG_32b correctly produces a value shifted by up to 24 bits, even on; * architectures where (int) is only 16 bits.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:733,Energy Efficiency,efficient,efficiently,733,"/* Constants for known chunk types.; *; * MAINTAINERS: If you need to add a chunk, define the name here.; * For historical reasons these constants have the form png_<name>; i.e.; * the prefix is lower case. Please use decimal values as the parameters to; * match the ISO PNG specification and to avoid relying on the C locale; * interpretation of character values. Please keep the list sorted.; *; * Notice that PNG_U32 is used to define a 32-bit value for the 4 byte chunk; * type. In fact the specification does not express chunk types this way,; * however using a 32-bit value means that the chunk type can be read from the; * stream using exactly the same code as used for a 32-bit unsigned value and; * can be examined far more efficiently (using one arithmetic compare).; *; * Prior to 1.5.6 the chunk type constants were expressed as C strings. The; * libpng API still uses strings for 'unknown' chunks and a macro,; * PNG_STRING_FROM_CHUNK, allows a string to be generated if required. Notice; * that for portable code numeric values must still be used; the string ""IHDR""; * is not portable and neither is PNG_U32('I', 'H', 'D', 'R').; *; * In 1.7.0 the definitions will be made public in png.h to avoid having to; * duplicate the same definitions in application code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:1013,Modifiability,portab,portable,1013,"/* Constants for known chunk types.; *; * MAINTAINERS: If you need to add a chunk, define the name here.; * For historical reasons these constants have the form png_<name>; i.e.; * the prefix is lower case. Please use decimal values as the parameters to; * match the ISO PNG specification and to avoid relying on the C locale; * interpretation of character values. Please keep the list sorted.; *; * Notice that PNG_U32 is used to define a 32-bit value for the 4 byte chunk; * type. In fact the specification does not express chunk types this way,; * however using a 32-bit value means that the chunk type can be read from the; * stream using exactly the same code as used for a 32-bit unsigned value and; * can be examined far more efficiently (using one arithmetic compare).; *; * Prior to 1.5.6 the chunk type constants were expressed as C strings. The; * libpng API still uses strings for 'unknown' chunks and a macro,; * PNG_STRING_FROM_CHUNK, allows a string to be generated if required. Notice; * that for portable code numeric values must still be used; the string ""IHDR""; * is not portable and neither is PNG_U32('I', 'H', 'D', 'R').; *; * In 1.7.0 the definitions will be made public in png.h to avoid having to; * duplicate the same definitions in application code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:1090,Modifiability,portab,portable,1090,"/* Constants for known chunk types.; *; * MAINTAINERS: If you need to add a chunk, define the name here.; * For historical reasons these constants have the form png_<name>; i.e.; * the prefix is lower case. Please use decimal values as the parameters to; * match the ISO PNG specification and to avoid relying on the C locale; * interpretation of character values. Please keep the list sorted.; *; * Notice that PNG_U32 is used to define a 32-bit value for the 4 byte chunk; * type. In fact the specification does not express chunk types this way,; * however using a 32-bit value means that the chunk type can be read from the; * stream using exactly the same code as used for a 32-bit unsigned value and; * can be examined far more efficiently (using one arithmetic compare).; *; * Prior to 1.5.6 the chunk type constants were expressed as C strings. The; * libpng API still uses strings for 'unknown' chunks and a macro,; * PNG_STRING_FROM_CHUNK, allows a string to be generated if required. Notice; * that for portable code numeric values must still be used; the string ""IHDR""; * is not portable and neither is PNG_U32('I', 'H', 'D', 'R').; *; * In 1.7.0 the definitions will be made public in png.h to avoid having to; * duplicate the same definitions in application code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:296,Safety,avoid,avoid,296,"/* Constants for known chunk types.; *; * MAINTAINERS: If you need to add a chunk, define the name here.; * For historical reasons these constants have the form png_<name>; i.e.; * the prefix is lower case. Please use decimal values as the parameters to; * match the ISO PNG specification and to avoid relying on the C locale; * interpretation of character values. Please keep the list sorted.; *; * Notice that PNG_U32 is used to define a 32-bit value for the 4 byte chunk; * type. In fact the specification does not express chunk types this way,; * however using a 32-bit value means that the chunk type can be read from the; * stream using exactly the same code as used for a 32-bit unsigned value and; * can be examined far more efficiently (using one arithmetic compare).; *; * Prior to 1.5.6 the chunk type constants were expressed as C strings. The; * libpng API still uses strings for 'unknown' chunks and a macro,; * PNG_STRING_FROM_CHUNK, allows a string to be generated if required. Notice; * that for portable code numeric values must still be used; the string ""IHDR""; * is not portable and neither is PNG_U32('I', 'H', 'D', 'R').; *; * In 1.7.0 the definitions will be made public in png.h to avoid having to; * duplicate the same definitions in application code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:1206,Safety,avoid,avoid,1206,"/* Constants for known chunk types.; *; * MAINTAINERS: If you need to add a chunk, define the name here.; * For historical reasons these constants have the form png_<name>; i.e.; * the prefix is lower case. Please use decimal values as the parameters to; * match the ISO PNG specification and to avoid relying on the C locale; * interpretation of character values. Please keep the list sorted.; *; * Notice that PNG_U32 is used to define a 32-bit value for the 4 byte chunk; * type. In fact the specification does not express chunk types this way,; * however using a 32-bit value means that the chunk type can be read from the; * stream using exactly the same code as used for a 32-bit unsigned value and; * can be examined far more efficiently (using one arithmetic compare).; *; * Prior to 1.5.6 the chunk type constants were expressed as C strings. The; * libpng API still uses strings for 'unknown' chunks and a macro,; * PNG_STRING_FROM_CHUNK, allows a string to be generated if required. Notice; * that for portable code numeric values must still be used; the string ""IHDR""; * is not portable and neither is PNG_U32('I', 'H', 'D', 'R').; *; * In 1.7.0 the definitions will be made public in png.h to avoid having to; * duplicate the same definitions in application code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:39,Safety,avoid,avoid,39,"/* This uses (char), not (png_byte) to avoid warnings on systems where (char) is; * signed and the argument is a (char[]) This macro will fail miserably on; * systems where (char) is more than 8 bits.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:3,Testability,Test,Test,3,/* Test on flag values as defined in the spec (section 5.4): */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:3,Security,Validat,Validate,3,"/* Validate the include paths - the include path used to generate pnglibconf.h; * must match that used in the build, or we must be using pnglibconf.h.prebuilt:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:132,Availability,error,errors,132,"/* Convert from an sRGB encoded value 0..255 to a 16-bit linear value,; * 0..65535. This table gives the closest 16-bit answers (no errors).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:107,Availability,error,error,107,/* Given a value 'linear' in the range 0..255*65535 calculate the 8-bit sRGB; * encoded value with maximum error 0.646365. Note that the input is not a; * 16-bit value; it has been multiplied by 255! */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:50,Availability,failure,failure,50,"/* Internal base allocator - no messages, NULL on failure to allocate. This; * does, however, call the application provided allocator and that could call; * png_error (although that would be a bug in the application implementation.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:61,Energy Efficiency,allocate,allocate,61,"/* Internal base allocator - no messages, NULL on failure to allocate. This; * does, however, call the application provided allocator and that could call; * png_error (although that would be a bug in the application implementation.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:32,Integrability,message,messages,32,"/* Internal base allocator - no messages, NULL on failure to allocate. This; * does, however, call the application provided allocator and that could call; * png_error (although that would be a bug in the application implementation.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:40,Availability,error,error,40,"/* Internal array allocator, outputs no error or warning messages on failure,; * just returns NULL.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:69,Availability,failure,failure,69,"/* Internal array allocator, outputs no error or warning messages on failure,; * just returns NULL.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:57,Integrability,message,messages,57,"/* Internal array allocator, outputs no error or warning messages on failure,; * just returns NULL.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:37,Modifiability,extend,extended,37,/* The same but an existing array is extended by add_elements. This function; * also memsets the new elements to 0 and copies the old elements. The old; * array is not freed or altered.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:144,Availability,error,error,144,"/* text, sPLT or unknown chunks */; /* Magic to create a struct when there is no struct to call the user supplied; * memory allocators. Because error handling has not been set up the memory; * handlers can't safely call png_error, but this is an obscure and undocumented; * restriction so libpng has to assume that the 'free' handler, at least, might; * call png_error.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:208,Safety,safe,safely,208,"/* text, sPLT or unknown chunks */; /* Magic to create a struct when there is no struct to call the user supplied; * memory allocators. Because error handling has not been set up the memory; * handlers can't safely call png_error, but this is an obscure and undocumented; * restriction so libpng has to assume that the 'free' handler, at least, might; * call png_error.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:258,Usability,undo,undocumented,258,"/* text, sPLT or unknown chunks */; /* Magic to create a struct when there is no struct to call the user supplied; * memory allocators. Because error handling has not been set up the memory; * handlers can't safely call png_error, but this is an obscure and undocumented; * restriction so libpng has to assume that the 'free' handler, at least, might; * call png_error.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:11,Energy Efficiency,allocate,allocated,11,/* Free an allocated jmp_buf (always succeeds) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:15,Energy Efficiency,allocate,allocate,15,/* Function to allocate memory for zlib. PNGAPI is disallowed. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:17,Modifiability,variab,variable,17,/* Reset the CRC variable */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:28,Deployability,update,update,28,"/* Read bytes into buf, and update png_ptr->crc */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:57,Deployability,update,update,57,"/* Write various chunks */; /* Write the IHDR chunk, and update the png_struct with the necessary; * information.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:42,Security,validat,validated,42,/* The xy value must have been previously validated */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:41,Security,validat,validated,41,"/* The profile must have been previously validated for correctness, the; * length comes from the first four bytes. Only the base, deflate,; * compression is supported.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:1190,Availability,mask,masks,1190,"/* Combine a row of data, dealing with alpha, etc. if requested. 'row' is an; * array of png_ptr->width pixels. If the image is not interlaced or this; * is the final pass this just does a memcpy, otherwise the ""display"" flag; * is used to determine whether to copy pixels that are not in the current pass.; *; * Because 'png_do_read_interlace' (below) replicates pixels this allows this; * function to achieve the documented 'blocky' appearance during interlaced read; * if display is 1 and the 'sparkle' appearance, where existing pixels in 'row'; * are not changed if they are not in the current pass, when display is 0.; *; * 'display' must be 0 or 1, otherwise the memcpy will be done regardless.; *; * The API always reads from the png_struct row buffer and always assumes that; * it is full width (png_do_read_interlace has already been called.); *; * This function is only ever used to write to row buffers provided by the; * caller of the relevant libpng API and the row must have already been; * transformed by the read transformations.; *; * The PNG_USE_COMPILE_TIME_MASKS option causes generation of pre-computed; * bitmasks for use within the code, otherwise runtime generated masks are used.; * The default is compile time masks.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:1237,Availability,mask,masks,1237,"/* Combine a row of data, dealing with alpha, etc. if requested. 'row' is an; * array of png_ptr->width pixels. If the image is not interlaced or this; * is the final pass this just does a memcpy, otherwise the ""display"" flag; * is used to determine whether to copy pixels that are not in the current pass.; *; * Because 'png_do_read_interlace' (below) replicates pixels this allows this; * function to achieve the documented 'blocky' appearance during interlaced read; * if display is 1 and the 'sparkle' appearance, where existing pixels in 'row'; * are not changed if they are not in the current pass, when display is 0.; *; * 'display' must be 0 or 1, otherwise the memcpy will be done regardless.; *; * The API always reads from the png_struct row buffer and always assumes that; * it is full width (png_do_read_interlace has already been called.); *; * This function is only ever used to write to row buffers provided by the; * caller of the relevant libpng API and the row must have already been; * transformed by the read transformations.; *; * The PNG_USE_COMPILE_TIME_MASKS option causes generation of pre-computed; * bitmasks for use within the code, otherwise runtime generated masks are used.; * The default is compile time masks.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:64,Integrability,interface,interfaces,64,/* GRR TO DO (2.0 or whenever): simplify other internal calling interfaces */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:32,Usability,simpl,simplify,32,/* GRR TO DO (2.0 or whenever): simplify other internal calling interfaces */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:170,Availability,error,error,170,"/* Read 'avail_out' bytes of data from the IDAT stream. If the output buffer; * is NULL the function checks, instead, for the end of the stream. In this; * case a benign error will be issued if the stream end is not found or if; * extra data has to be consumed.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:20,Deployability,update,update,20,/* Optional call to update the users info structure */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:58,Availability,error,error,58,"/* The following decodes the appropriate chunks, and does error correction,; * then calls the appropriate callback for the chunk if it is valid.; */; /* Decode the IHDR chunk */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:248,Availability,error,errors,248,/* This is the function that gets called for unknown chunks. The 'keep'; * argument is either non-zero for a known chunk that has been set to be; * handled as unknown or zero for an unknown chunk. By default the function; * just skips the chunk or errors out if it is critical.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:3,Integrability,Synchroniz,Synchronize,3,/* Synchronize the info 'valid' flags with the colorspace */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:78,Integrability,synchroniz,synchronize,78,/* Copy the png_struct colorspace to the info_struct and call the above to; * synchronize the flags. Checks for NULL info_ptr and does nothing.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:149,Availability,error,error,149,"/* This does set the colorspace gAMA and cHRM values too, but doesn't set the; * flags to write them, if it returns false there was a problem and an error; * message has already been output (but the colorspace may still need to be; * synced to record the invalid flag).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:158,Integrability,message,message,158,"/* This does set the colorspace gAMA and cHRM values too, but doesn't set the; * flags to write them, if it returns false there was a problem and an error; * message has already been output (but the colorspace may still need to be; * synced to record the invalid flag).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:50,Integrability,Rout,Routines,50,/* The 'name' is used for information only */; /* Routines for checking parts of an ICC profile. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:114,Availability,avail,available,114,"/* 'adler' is the Adler32 checksum of the uncompressed profile data. It may; * be zero to indicate that it is not available. It is used, if provided,; * as a fast check on the profile when checking to see if it is sRGB.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:26,Security,checksum,checksum,26,"/* 'adler' is the Adler32 checksum of the uncompressed profile data. It may; * be zero to indicate that it is not available. It is used, if provided,; * as a fast check on the profile when checking to see if it is sRGB.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:137,Availability,error,errors,137,"/* Puts 'string' into 'buffer' at buffer[pos], taking care never to overwrite; * the end. Always leaves the buffer nul terminated. Never errors out (and; * there is no error code.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:168,Availability,error,error,168,"/* Puts 'string' into 'buffer' at buffer[pos], taking care never to overwrite; * the end. Always leaves the buffer nul terminated. Never errors out (and; * there is no error code.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:58,Integrability,message,messages,58,"/* Various internal functions to handle formatted warning messages, currently; * only implemented for warnings.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:126,Integrability,message,message,126,/* An l-value of this type has to be passed to the APIs below to cache the; * values of the parameters to a formatted warning message.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:65,Performance,cache,cache,65,/* An l-value of this type has to be passed to the APIs below to cache the; * values of the parameters to a formatted warning message.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:128,Availability,Error,Errors,128,"/* 'message' follows the X/Open approach of using @1, @2 to insert; * parameters previously supplied using the above functions. Errors in; * specifying the parameters will simply result in garbage substitutions.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:4,Integrability,message,message,4,"/* 'message' follows the X/Open approach of using @1, @2 to insert; * parameters previously supplied using the above functions. Errors in; * specifying the parameters will simply result in garbage substitutions.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:172,Usability,simpl,simply,172,"/* 'message' follows the X/Open approach of using @1, @2 to insert; * parameters previously supplied using the above functions. Errors in; * specifying the parameters will simply result in garbage substitutions.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:15,Availability,error,errors,15,"/* Application errors (new in 1.6); use these functions (declared below) for; * errors in the parameters or order of API function calls on read. The; * 'warning' should be used for an error that can be handled completely; the; * 'error' for one which can be handled safely but which may lose application; * information or settings.; *; * By default these both result in a png_error call prior to release, while in a; * released version the 'warning' is just a warning. However if the application; * explicitly disables benign errors (explicitly permitting the code to lose; * information) they both turn into warnings.; *; * If benign errors aren't supported they end up as the corresponding base call; * (png_warning or png_error.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:80,Availability,error,errors,80,"/* Application errors (new in 1.6); use these functions (declared below) for; * errors in the parameters or order of API function calls on read. The; * 'warning' should be used for an error that can be handled completely; the; * 'error' for one which can be handled safely but which may lose application; * information or settings.; *; * By default these both result in a png_error call prior to release, while in a; * released version the 'warning' is just a warning. However if the application; * explicitly disables benign errors (explicitly permitting the code to lose; * information) they both turn into warnings.; *; * If benign errors aren't supported they end up as the corresponding base call; * (png_warning or png_error.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:184,Availability,error,error,184,"/* Application errors (new in 1.6); use these functions (declared below) for; * errors in the parameters or order of API function calls on read. The; * 'warning' should be used for an error that can be handled completely; the; * 'error' for one which can be handled safely but which may lose application; * information or settings.; *; * By default these both result in a png_error call prior to release, while in a; * released version the 'warning' is just a warning. However if the application; * explicitly disables benign errors (explicitly permitting the code to lose; * information) they both turn into warnings.; *; * If benign errors aren't supported they end up as the corresponding base call; * (png_warning or png_error.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:230,Availability,error,error,230,"/* Application errors (new in 1.6); use these functions (declared below) for; * errors in the parameters or order of API function calls on read. The; * 'warning' should be used for an error that can be handled completely; the; * 'error' for one which can be handled safely but which may lose application; * information or settings.; *; * By default these both result in a png_error call prior to release, while in a; * released version the 'warning' is just a warning. However if the application; * explicitly disables benign errors (explicitly permitting the code to lose; * information) they both turn into warnings.; *; * If benign errors aren't supported they end up as the corresponding base call; * (png_warning or png_error.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:526,Availability,error,errors,526,"/* Application errors (new in 1.6); use these functions (declared below) for; * errors in the parameters or order of API function calls on read. The; * 'warning' should be used for an error that can be handled completely; the; * 'error' for one which can be handled safely but which may lose application; * information or settings.; *; * By default these both result in a png_error call prior to release, while in a; * released version the 'warning' is just a warning. However if the application; * explicitly disables benign errors (explicitly permitting the code to lose; * information) they both turn into warnings.; *; * If benign errors aren't supported they end up as the corresponding base call; * (png_warning or png_error.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:635,Availability,error,errors,635,"/* Application errors (new in 1.6); use these functions (declared below) for; * errors in the parameters or order of API function calls on read. The; * 'warning' should be used for an error that can be handled completely; the; * 'error' for one which can be handled safely but which may lose application; * information or settings.; *; * By default these both result in a png_error call prior to release, while in a; * released version the 'warning' is just a warning. However if the application; * explicitly disables benign errors (explicitly permitting the code to lose; * information) they both turn into warnings.; *; * If benign errors aren't supported they end up as the corresponding base call; * (png_warning or png_error.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:396,Deployability,release,release,396,"/* Application errors (new in 1.6); use these functions (declared below) for; * errors in the parameters or order of API function calls on read. The; * 'warning' should be used for an error that can be handled completely; the; * 'error' for one which can be handled safely but which may lose application; * information or settings.; *; * By default these both result in a png_error call prior to release, while in a; * released version the 'warning' is just a warning. However if the application; * explicitly disables benign errors (explicitly permitting the code to lose; * information) they both turn into warnings.; *; * If benign errors aren't supported they end up as the corresponding base call; * (png_warning or png_error.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:419,Deployability,release,released,419,"/* Application errors (new in 1.6); use these functions (declared below) for; * errors in the parameters or order of API function calls on read. The; * 'warning' should be used for an error that can be handled completely; the; * 'error' for one which can be handled safely but which may lose application; * information or settings.; *; * By default these both result in a png_error call prior to release, while in a; * released version the 'warning' is just a warning. However if the application; * explicitly disables benign errors (explicitly permitting the code to lose; * information) they both turn into warnings.; *; * If benign errors aren't supported they end up as the corresponding base call; * (png_warning or png_error.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:266,Safety,safe,safely,266,"/* Application errors (new in 1.6); use these functions (declared below) for; * errors in the parameters or order of API function calls on read. The; * 'warning' should be used for an error that can be handled completely; the; * 'error' for one which can be handled safely but which may lose application; * information or settings.; *; * By default these both result in a png_error call prior to release, while in a; * released version the 'warning' is just a warning. However if the application; * explicitly disables benign errors (explicitly permitting the code to lose; * information) they both turn into warnings.; *; * If benign errors aren't supported they end up as the corresponding base call; * (png_warning or png_error.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:136,Availability,recover,recover,136,"/* The application provided invalid parameters to an API function or called; * an API function at the wrong time, libpng can completely recover.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:136,Safety,recover,recover,136,"/* The application provided invalid parameters to an API function or called; * an API function at the wrong time, libpng can completely recover.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:78,Availability,recover,recovery,78,"/* As above but libpng will ignore the call, or attempt some other partial; * recovery from the error.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:96,Availability,error,error,96,"/* As above but libpng will ignore the call, or attempt some other partial; * recovery from the error.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:78,Safety,recover,recovery,78,"/* As above but libpng will ignore the call, or attempt some other partial; * recovery from the error.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:12,Availability,recover,recoverable,12,/* Report a recoverable issue in chunk data. On read this is used to report; * a problem found while reading a particular chunk and the; * png_chunk_benign_error or png_chunk_warning function is used as; * appropriate. On write this is used to report an error that comes from; * data set via an application call to a png_set_ API and png_app_error or; * png_app_warning is used as appropriate.; *; * The 'error' parameter must have one of the following values:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:254,Availability,error,error,254,/* Report a recoverable issue in chunk data. On read this is used to report; * a problem found while reading a particular chunk and the; * png_chunk_benign_error or png_chunk_warning function is used as; * appropriate. On write this is used to report an error that comes from; * data set via an application call to a png_set_ API and png_app_error or; * png_app_warning is used as appropriate.; *; * The 'error' parameter must have one of the following values:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:405,Availability,error,error,405,/* Report a recoverable issue in chunk data. On read this is used to report; * a problem found while reading a particular chunk and the; * png_chunk_benign_error or png_chunk_warning function is used as; * appropriate. On write this is used to report an error that comes from; * data set via an application call to a png_set_ API and png_app_error or; * png_app_warning is used as appropriate.; *; * The 'error' parameter must have one of the following values:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:12,Safety,recover,recoverable,12,/* Report a recoverable issue in chunk data. On read this is used to report; * a problem found while reading a particular chunk and the; * png_chunk_benign_error or png_chunk_warning function is used as; * appropriate. On write this is used to report an error that comes from; * data set via an application call to a png_set_ API and png_app_error or; * png_app_warning is used as appropriate.; *; * The 'error' parameter must have one of the following values:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:12,Availability,error,error,12,/* never an error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:6,Availability,error,error,6,/* an error only on write */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:13,Availability,error,error,13,/* always an error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:15,Integrability,interface,interfaces,15,"/* ASCII to FP interfaces, currently only implemented if sCAL; * support is required.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:22,Security,validat,validate,22,"/* An internal API to validate the format of a floating point number.; * The result is the index of the next character. If the number is; * not valid it will be the index of a character in the supposed number.; *; * The format of a number is defined in the PNG extensions specification; * and this API is strictly conformant to that spec, not anyone elses!; *; * The format as a regular expression is:; *; * [+-]?[0-9]+.?([Ee][+-]?[0-9]+)?; *; * or:; *; * [+-]?.[0-9]+(.[0-9]+)?([Ee][+-]?[0-9]+)?; *; * The complexity is that either integer or fraction must be present and the; * fraction is permitted to have no digits only if the integer is present.; *; * NOTE: The dangling E problem.; * There is a PNG valid floating point number in the following:; *; * PNG floating point numbers are not greedy.; *; * Working this out requires *TWO* character lookahead (because of the; * sign), the parser does not do this - it will fail at the 'r' - this; * doesn't matter for PNG sCAL chunk values, but it requires more care; * if the value were ever to be embedded in something more complex. Use; * ANSI-C strtod if you need the lookahead.; */; /* State table for the parser. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:3,Availability,mask,mask,3,/* mask for the above */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:11,Availability,avail,available,11,/* This is available for the caller to store in 'state' if required. Do not; * call the parser after setting it (the parser sometimes clears it.); */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:134,Usability,clear,clears,134,/* This is available for the caller to store in 'state' if required. Do not; * call the parser after setting it (the parser sometimes clears it.); */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:3,Availability,Avail,Available,3,/* Available for callers as a distinct value */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:3,Testability,Test,Tests,3,/* Tests on the sticky non-zero and negative flags. To pass these checks; * the state must also indicate that the whole number is valid - this is; * achieved by testing PNG_FP_SAW_DIGIT (see the implementation for why this; * is equivalent to PNG_FP_OK above.); */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:161,Testability,test,testing,161,/* Tests on the sticky non-zero and negative flags. To pass these checks; * the state must also indicate that the whole number is valid - this is; * achieved by testing PNG_FP_SAW_DIGIT (see the implementation for why this; * is equivalent to PNG_FP_OK above.); */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:5,Availability,MASK,MASK,5,/* Z MASK: the string is valid and a non-zero value. */; /* PNG_FP_SAW_DIGIT: the string is valid. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:606,Availability,recover,recover,606,"/* The actual parser. This can be called repeatedly. It updates; * the index into the string and the state variable (which must; * be initialized to 0). It returns a result code, as above. There; * is no point calling the parser any more if it fails to advance to; * the end of the string - it is stuck on an invalid character (or; * terminated by '\0').; *; * Note that the pointer will consume an E or even an E+ and then leave; * a 'maybe' state even though a preceding integer.fraction is valid.; * The PNG_FP_WAS_VALID flag indicates that a preceding substring was; * a valid number. It's possible to recover from this by calling; * the parser again (from the start, with state 0) but with a string; * that omits the last character (i.e. set the size to the index of; * the problem character.) This has not been tested within libpng.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:56,Deployability,update,updates,56,"/* The actual parser. This can be called repeatedly. It updates; * the index into the string and the state variable (which must; * be initialized to 0). It returns a result code, as above. There; * is no point calling the parser any more if it fails to advance to; * the end of the string - it is stuck on an invalid character (or; * terminated by '\0').; *; * Note that the pointer will consume an E or even an E+ and then leave; * a 'maybe' state even though a preceding integer.fraction is valid.; * The PNG_FP_WAS_VALID flag indicates that a preceding substring was; * a valid number. It's possible to recover from this by calling; * the parser again (from the start, with state 0) but with a string; * that omits the last character (i.e. set the size to the index of; * the problem character.) This has not been tested within libpng.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:107,Modifiability,variab,variable,107,"/* The actual parser. This can be called repeatedly. It updates; * the index into the string and the state variable (which must; * be initialized to 0). It returns a result code, as above. There; * is no point calling the parser any more if it fails to advance to; * the end of the string - it is stuck on an invalid character (or; * terminated by '\0').; *; * Note that the pointer will consume an E or even an E+ and then leave; * a 'maybe' state even though a preceding integer.fraction is valid.; * The PNG_FP_WAS_VALID flag indicates that a preceding substring was; * a valid number. It's possible to recover from this by calling; * the parser again (from the start, with state 0) but with a string; * that omits the last character (i.e. set the size to the index of; * the problem character.) This has not been tested within libpng.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:606,Safety,recover,recover,606,"/* The actual parser. This can be called repeatedly. It updates; * the index into the string and the state variable (which must; * be initialized to 0). It returns a result code, as above. There; * is no point calling the parser any more if it fails to advance to; * the end of the string - it is stuck on an invalid character (or; * terminated by '\0').; *; * Note that the pointer will consume an E or even an E+ and then leave; * a 'maybe' state even though a preceding integer.fraction is valid.; * The PNG_FP_WAS_VALID flag indicates that a preceding substring was; * a valid number. It's possible to recover from this by calling; * the parser again (from the start, with state 0) but with a string; * that omits the last character (i.e. set the size to the index of; * the problem character.) This has not been tested within libpng.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:817,Testability,test,tested,817,"/* The actual parser. This can be called repeatedly. It updates; * the index into the string and the state variable (which must; * be initialized to 0). It returns a result code, as above. There; * is no point calling the parser any more if it fails to advance to; * the end of the string - it is stuck on an invalid character (or; * terminated by '\0').; *; * Note that the pointer will consume an E or even an E+ and then leave; * a 'maybe' state even though a preceding integer.fraction is valid.; * The PNG_FP_WAS_VALID flag indicates that a preceding substring was; * a valid number. It's possible to recover from this by calling; * the parser again (from the start, with state 0) but with a string; * that omits the last character (i.e. set the size to the index of; * the problem character.) This has not been tested within libpng.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:273,Testability,test,testing,273,/* This is the same but it checks a complete string and returns true; * only if it just contains a floating point number. As of 1.5.4 this; * function also returns the state at the end of parsing the number if; * it was valid (otherwise it returns 0.) This can be used for testing; * for negative or zero values using the sticky flag.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:3,Usability,SIMPL,SIMPLIFIED,3,/* SIMPLIFIED READ/WRITE SUPPORT */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:80,Availability,error,errors,80,"/* Utility to safely execute a piece of libpng code catching and logging any; * errors that might occur. Returns true on success, false on failure (either; * of the function or as a result of a png_error.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:139,Availability,failure,failure,139,"/* Utility to safely execute a piece of libpng code catching and logging any; * errors that might occur. Returns true on success, false on failure (either; * of the function or as a result of a png_error.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:14,Safety,safe,safely,14,"/* Utility to safely execute a piece of libpng code catching and logging any; * errors that might occur. Returns true on success, false on failure (either; * of the function or as a result of a png_error.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:65,Testability,log,logging,65,"/* Utility to safely execute a piece of libpng code catching and logging any; * errors that might occur. Returns true on success, false on failure (either; * of the function or as a result of a png_error.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:21,Availability,error,error,21,/* Utility to log an error; this also cleans up the png_image; the function; * always returns 0 (false).; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:14,Testability,log,log,14,/* Utility to log an error; this also cleans up the png_image; the function; * always returns 0 (false).; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:103,Performance,optimiz,optimizations,103,/* SIMPLIFIED READ/WRITE */; /* These are initialization functions for hardware specific PNG filter; * optimizations; list these here then select the appropriate one at compile; * time using the macro PNG_FILTER_OPTIMIZATIONS. If the macro is not defined; * the generic code is used.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:3,Usability,SIMPL,SIMPLIFIED,3,/* SIMPLIFIED READ/WRITE */; /* These are initialization functions for hardware specific PNG filter; * optimizations; list these here then select the appropriate one at compile; * time using the macro PNG_FILTER_OPTIMIZATIONS. If the macro is not defined; * the generic code is used.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:20,Performance,optimiz,optimization,20,/* Just declare the optimization that will be used */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:27,Performance,optimiz,optimizations,27,/* List *all* the possible optimizations here - this branch is required if; * the builder of libpng passes the definition of PNG_FILTER_OPTIMIZATIONS in; * CFLAGS in place of CPPFLAGS *and* uses symbol prefixing.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:260,Deployability,release,released,260,"/* pngread.c - read a PNG file; *; * Copyright (c) 2018-2019 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This file contains routines that an application calls directly to; * read a PNG file or stream.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:406,Integrability,rout,routines,406,"/* pngread.c - read a PNG file; *; * Copyright (c) 2018-2019 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This file contains routines that an application calls directly to; * read a PNG file or stream.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:46,Safety,detect,detect,46,/* Added in libpng-1.6.0; this can be used to detect a read structure if; * required (it will be zero in a write structure.); */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:48,Availability,error,error,48,/* In stable builds only warn if an application error can be completely; * handled.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:88,Safety,avoid,avoiding,88,"/* TODO: delay this, it can be done in png_init_io (if the app doesn't; * do it itself) avoiding setting the default function if it is not; * required.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:391,Security,access,access,391,"/* Read the information before the actual image data. This has been; * changed in v0.90 to allow reading a file that already has the magic; * bytes read from the stream. You can tell libpng how many bytes have; * been read from the beginning of the stream (up to the maximum of 8); * via png_set_sig_bytes(), and we will only check the remaining bytes; * here. The application can then have access to the signature bytes we; * read if it is determined that this isn't a valid PNG file.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:8,Testability,log,logic,8,/* IDAT logic needs to happen here to simplify getting the two flags; * right.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:38,Usability,simpl,simplify,38,/* IDAT logic needs to happen here to simplify getting the two flags; * right.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:51,Security,hash,hash,51,/* This should be a binary subdivision search or a hash for; * matching the chunk name rather than a linear search.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:21,Safety,avoid,avoids,21,/* New in 1.6.0 this avoids the bug of doing the initializations twice */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:21,Safety,avoid,avoids,21,/* New in 1.6.0 this avoids the bug of doing the initializations twice */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:3,Usability,Undo,Undoes,3,"/* Undoes intrapixel differencing,; * NOTE: this is apparently only supported in the 'sequential' reader.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:12,Availability,error,error,12,/* to force error if no data was found */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:631,Availability,avail,available,631,"/* Read one or more rows of image data. If the image is interlaced,; * and png_set_interlace_handling() has been called, the rows need to; * contain the contents of the rows from the previous pass. If the; * image has alpha or transparency, and png_handle_alpha()[*] has been; * called, the rows contents must be initialized to the contents of the; * screen.; *; * ""row"" holds the actual image, and pixels are placed in it; * as they arrive. If the image is displayed after each pass, it will; * appear to ""sparkle"" in. ""display_row"" can be used to display a; * ""chunky"" progressive image, with finer detail added as it becomes; * available. If you do not want this ""chunky"" display, you may pass; * NULL for display_row. If you do not want the sparkle display, and; * you have not called png_handle_alpha(), you may pass NULL for rows.; * If you have called png_handle_alpha(), and the image has either an; * alpha channel or a transparency chunk, you must provide a buffer for; * rows. In this case, you do not have to provide a display_row buffer; * also, but you may. If the image is not interlaced, or if you have; * not called png_set_interlace_handling(), the display_row buffer will; * be ignored, so pass NULL to it.; *; * [*] png_handle_alpha() does not exist yet, as of this version of libpng; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:86,Availability,error,error,86,"/* Obtain the pass number, which also turns on the PNG_INTERLACE flag in; * the above error case.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:71,Availability,error,error,71,/* NOTE: the 'setjmp' buffer may still be allocated and the memory and error; * callbacks are still set at this point. They are required to complete the; * destruction of the png_struct itself.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:42,Energy Efficiency,allocate,allocated,42,/* NOTE: the 'setjmp' buffer may still be allocated and the memory and error; * callbacks are still set at this point. They are required to complete the; * destruction of the png_struct itself.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:411,Availability,down,down,411,/* -------------- image transformations start here ------------------- */; /* libpng 1.6.10: add code to cause a png_app_error if a selected TRANSFORM; * is not implemented. This will only happen in de-configured (non-default); * libpng builds. The results can be unexpected - png_read_png may return; * short or mal-formed rows because the transform is skipped.; */; /* Tell libpng to strip 16-bit/color files down to 8 bits per color.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:202,Modifiability,config,configured,202,/* -------------- image transformations start here ------------------- */; /* libpng 1.6.10: add code to cause a png_app_error if a selected TRANSFORM; * is not implemented. This will only happen in de-configured (non-default); * libpng builds. The results can be unexpected - png_read_png may return; * short or mal-formed rows because the transform is skipped.; */; /* Tell libpng to strip 16-bit/color files down to 8 bits per color.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:215,Availability,avail,available,215,"/* Expand paletted colors into true RGB triplets; * Expand grayscale images to full 8 bits from 1, 2, or 4 bits/pixel; * Expand paletted or RGB images with transparency to full alpha; * channels so the data will be available as RGBA quartets.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:79,Deployability,update,update,79,"/* Optional call to gamma correct and add the background to the palette; * and update info structure. REQUIRED if you are expecting libpng to; * update the palette for you (i.e., you selected such a transform above).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:145,Deployability,update,update,145,"/* Optional call to gamma correct and add the background to the palette; * and update info structure. REQUIRED if you are expecting libpng to; * update the palette for you (i.e., you selected such a transform above).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:3,Usability,SIMPL,SIMPLIFIED,3,"/* SIMPLIFIED READ; *; * This code currently relies on the sequential reader, though it could easily; * be made to work with the progressive one.; */; /* Arguments to png_image_finish_read: */; /* Encoding of PNG data (used by the color-map code) */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:9,Modifiability,variab,variables,9,/* Local variables: */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:293,Integrability,rout,routine,293,"/* Do all the *safe* initialization - 'safe' means that png_error won't be; * called, so setting up the jmp_buf is not required. This means that anything; * called from here must *not* call png_malloc - it has to call png_malloc_warn; * instead so that control is returned safely back to this routine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:15,Safety,safe,safe,15,"/* Do all the *safe* initialization - 'safe' means that png_error won't be; * called, so setting up the jmp_buf is not required. This means that anything; * called from here must *not* call png_malloc - it has to call png_malloc_warn; * instead so that control is returned safely back to this routine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:39,Safety,safe,safe,39,"/* Do all the *safe* initialization - 'safe' means that png_error won't be; * called, so setting up the jmp_buf is not required. This means that anything; * called from here must *not* call png_malloc - it has to call png_malloc_warn; * instead so that control is returned safely back to this routine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:273,Safety,safe,safely,273,"/* Do all the *safe* initialization - 'safe' means that png_error won't be; * called, so setting up the jmp_buf is not required. This means that anything; * called from here must *not* call png_malloc - it has to call png_malloc_warn; * instead so that control is returned safely back to this routine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:3,Availability,Error,Error,3,/* Error clean up */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:168,Performance,optimiz,optimizes,168,/* Is the given gamma significantly different from sRGB? The test is the same; * one used in pngrtran.c when deciding whether to do gamma correction. The; * arithmetic optimizes the division by using the fact that the inverse of the; * file sRGB gamma is 2.2; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:61,Testability,test,test,61,/* Is the given gamma significantly different from sRGB? The test is the same; * one used in pngrtran.c when deciding whether to do gamma correction. The; * arithmetic optimizes the division by using the fact that the inverse of the; * file sRGB gamma is 2.2; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:56,Usability,simpl,simplified,56,/* An uninitialized gamma is assumed to be sRGB for the simplified API. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:174,Integrability,rout,routine,174,"/* Do the main body of a 'png_image_begin_read' function; read the PNG file; * header and fill in all the information. This is executed in a safe context,; * unlike the init routine above.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:141,Safety,safe,safe,141,"/* Do the main body of a 'png_image_begin_read' function; read the PNG file; * header and fill in all the information. This is executed in a safe context,; * unlike the init routine above.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:150,Safety,safe,safe,150,"/* This is slightly evil, but png_init_io doesn't do anything other; * than this and we haven't changed the standard IO functions so; * this saves a 'safe' function.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:163,Availability,error,error,163,/* Now set the IO functions to read from the memory buffer and; * store it into io_ptr. Again do this in-place to avoid calling a; * libpng function that requires error handling.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:114,Safety,avoid,avoid,114,/* Now set the IO functions to read from the memory buffer and; * store it into io_ptr. Again do this in-place to avoid calling a; * libpng function that requires error handling.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:60,Usability,simpl,simplified,60,/* Utility function to skip chunks that are not used by the simplified image; * read functions and an appropriate macro to call it.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:659,Availability,error,errors,659,"/* Prepare the reader to ignore all recognized chunks whose data will not; * be used, i.e., all chunks recognized by libpng except for those; * involved in basic image reading:; *; * IHDR, PLTE, IDAT, IEND; *; * Or image data handling:; *; * tRNS, bKGD, gAMA, cHRM, sRGB, [iCCP] and sBIT.; *; * This provides a small performance improvement and eliminates any; * potential vulnerability to security problems in the unused chunks.; *; * At present the iCCP chunk data isn't used, so iCCP chunk can be ignored; * too. This allows the simplified API to be compiled without iCCP support,; * however if the support is there the chunk is still checked to detect; * errors (which are unfortunately quite common.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:317,Performance,perform,performance,317,"/* Prepare the reader to ignore all recognized chunks whose data will not; * be used, i.e., all chunks recognized by libpng except for those; * involved in basic image reading:; *; * IHDR, PLTE, IDAT, IEND; *; * Or image data handling:; *; * tRNS, bKGD, gAMA, cHRM, sRGB, [iCCP] and sBIT.; *; * This provides a small performance improvement and eliminates any; * potential vulnerability to security problems in the unused chunks.; *; * At present the iCCP chunk data isn't used, so iCCP chunk can be ignored; * too. This allows the simplified API to be compiled without iCCP support,; * however if the support is there the chunk is still checked to detect; * errors (which are unfortunately quite common.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:649,Safety,detect,detect,649,"/* Prepare the reader to ignore all recognized chunks whose data will not; * be used, i.e., all chunks recognized by libpng except for those; * involved in basic image reading:; *; * IHDR, PLTE, IDAT, IEND; *; * Or image data handling:; *; * tRNS, bKGD, gAMA, cHRM, sRGB, [iCCP] and sBIT.; *; * This provides a small performance improvement and eliminates any; * potential vulnerability to security problems in the unused chunks.; *; * At present the iCCP chunk data isn't used, so iCCP chunk can be ignored; * too. This allows the simplified API to be compiled without iCCP support,; * however if the support is there the chunk is still checked to detect; * errors (which are unfortunately quite common.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:390,Security,secur,security,390,"/* Prepare the reader to ignore all recognized chunks whose data will not; * be used, i.e., all chunks recognized by libpng except for those; * involved in basic image reading:; *; * IHDR, PLTE, IDAT, IEND; *; * Or image data handling:; *; * tRNS, bKGD, gAMA, cHRM, sRGB, [iCCP] and sBIT.; *; * This provides a small performance improvement and eliminates any; * potential vulnerability to security problems in the unused chunks.; *; * At present the iCCP chunk data isn't used, so iCCP chunk can be ignored; * too. This allows the simplified API to be compiled without iCCP support,; * however if the support is there the chunk is still checked to detect; * errors (which are unfortunately quite common.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:532,Usability,simpl,simplified,532,"/* Prepare the reader to ignore all recognized chunks whose data will not; * be used, i.e., all chunks recognized by libpng except for those; * involved in basic image reading:; *; * IHDR, PLTE, IDAT, IEND; *; * Or image data handling:; *; * tRNS, bKGD, gAMA, cHRM, sRGB, [iCCP] and sBIT.; *; * This provides a small performance improvement and eliminates any; * potential vulnerability to security problems in the unused chunks.; *; * At present the iCCP chunk data isn't used, so iCCP chunk can be ignored; * too. This allows the simplified API to be compiled without iCCP support,; * however if the support is there the chunk is still checked to detect; * errors (which are unfortunately quite common.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:2,Safety,SAFE,SAFE,2,/*SAFE*/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:33,Integrability,rout,routine,33,"/* NOTE: P_LINEAR values to this routine must be 16-bit, but P_FILE values must; * be 8-bit.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:3,Deployability,Update,Update,3,/* Update the cache with whether the file gamma is significantly different; * from sRGB.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:14,Performance,cache,cache,14,/* Update the cache with whether the file gamma is significantly different; * from sRGB.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:17,Performance,cache,cached,17,"/* Note that the cached value may be P_FILE too, but if it is then the; * gamma_to_linear member has been set.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:44,Testability,test,test,44,/* This encoding occurs quite frequently in test cases because PngSuite; * includes a gAMA 1.0 chunk with most images.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:83,Usability,undo,undoes,83,/* 255 is used here for the component values for consistency with the code; * that undoes premultiplication in pngwrite.c.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:128,Integrability,depend,depending,128,"/* Get a copy of the background color (this avoids repeating the checks; * below.) The encoding is 8-bit sRGB or 16-bit linear, depending on the; * output format.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:44,Safety,avoid,avoids,44,"/* Get a copy of the background color (this avoids repeating the checks; * below.) The encoding is 8-bit sRGB or 16-bit linear, depending on the; * output format.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:175,Usability,simpl,simplified,175,"/* Default the input file gamma if required - this is necessary because; * libpng assumes that if no gamma information is present the data is in the; * output format, but the simplified API deduces the gamma from the input; * format.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:245,Integrability,interface,interface,245,"/* Do this directly, not using the png_colorspace functions, to ensure; * that it happens even if the colorspace is invalid (though probably if; * it is the setting will be ignored) Note that the same thing can be; * achieved at the application interface with png_set_gAMA.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:290,Usability,simpl,simple,290,/* output_processing means that the libpng-processed row will be; * 8-bit GA and it has to be processing to single byte color-map; * values. Entry 254 is replaced by either a completely; * transparent entry or by the background color at full; * precision (and the background color is not a simple gray; * level in this case.); */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:346,Energy Efficiency,Reduce,Reduce,346,"/* 8-bit or 16-bit PNG with two channels - gray and alpha. A minimum; * of 65536 combinations. If, however, the alpha channel is to be; * removed there are only 256 possibilities if the background is gray.; * (Otherwise there is a subset of the 65536 possibilities defined by; * the triangle between black, white and the background color.); *; * Reduce 16-bit files to 8-bit and sRGB encode the result. No need to; * worry about tRNS matching - tRNS is ignored if there is an alpha; * channel.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:222,Energy Efficiency,reduce,reduced,222,"/* Alpha must be removed as the PNG data is processed when the; * background is a color because the G and A channels are; * independent and the vector addition (non-parallel vectors) is a; * 2-D problem.; *; * This can be reduced to the same algorithm as above by making a; * colormap containing gray levels (for the opaque grays), a; * background entry (for a transparent pixel) and a set of four six; * level color values, one set for each intermediate alpha value.; * See the comments in make_ga_colormap for how this works in the; * per-pixel processing.; *; * If the background is gray, however, we only need a 256 entry gray; * level color map. It is sufficient to make the entry generated; * for the background color be exactly the color specified.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:223,Testability,log,logarithmic,223,"/* For non-opaque input composite on the sRGB background - this; * requires inverting the encoding for each component. The input; * is still converted to the sRGB encoding because this is a; * reasonable approximate to the logarithmic curve of human; * visual sensitivity, at least over the narrow range which PNG; * represents. Consequently 'G' is always sRGB encoded, while; * 'A' is linear. We need the linear background colors.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:91,Usability,simpl,simple,91,"/* The color-map will be grayscale, so we may as well convert the; * input RGB values to a simple grayscale and use the grayscale; * code above.; *; * NOTE: calling this apparently damages the recognition of the; * transparent color in background color handling; call; * png_set_tRNS_to_alpha before png_set_background_fixed.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:145,Usability,simpl,simply,145,/* We need to ensure that the application background exists in; * the colormap and that completely transparent pixels map to; * it. Achieve this simply by ensuring that the entry; * selected for the background really is the background color.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:186,Energy Efficiency,reduce,reduced,186,/* We could use png_quantize here so long as there is no transparent; * color or alpha; png_quantize ignores alpha. Easier overall just; * to do it once and using PNG_DIV51 on the 6x6x6 reduced RGB cube.; * Consequently we always want libpng to produce sRGB data.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:38,Usability,simpl,simply,38,"/* Alpha in the output is irrelevant, simply map the opaque input; * pixels to the 6x6x6 color-map.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:137,Integrability,rout,routine,137,/* Called when the libpng data must be transformed into the color-mapped; * form. There is a local row buffer in display->local and this routine must; * do the interlace handling.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:79,Deployability,update,update,79,/* NOTE: this code is copied as a comment in; * make_ga_colormap above. Please update the; * comment if you change this code!; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:3,Energy Efficiency,green,green,3,/* green */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:3,Deployability,Update,Update,3,/* Update the 'info' structure and make sure the result is as required; first; * make sure to turn on the interlace handling if it will be required; * (because it can't be turned on *after* the call to png_read_update_info!); */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:107,Energy Efficiency,allocate,allocate,107,"/* Now read the rows. Do this here if it is possible to read directly into; * the output buffer, otherwise allocate a local row buffer of the maximum; * size libpng requires and call the relevant processing routine safely.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:207,Integrability,rout,routine,207,"/* Now read the rows. Do this here if it is possible to read directly into; * the output buffer, otherwise allocate a local row buffer of the maximum; * size libpng requires and call the relevant processing routine safely.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:215,Safety,safe,safely,215,"/* Now read the rows. Do this here if it is possible to read directly into; * the output buffer, otherwise allocate a local row buffer of the maximum; * size libpng requires and call the relevant processing routine safely.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:401,Integrability,rout,routine,401,"/* The do_local_background case; called when all the following transforms are to; * be done:; *; * PNG_RGB_TO_GRAY; * PNG_COMPOSITE; * PNG_GAMMA; *; * This is a work-around for the fact that both the PNG_RGB_TO_GRAY and; * PNG_COMPOSITE code performs gamma correction, so we get double gamma; * correction. The fix-up is to prevent the PNG_COMPOSITE operation from; * happening inside libpng, so this routine sees an 8 or 16-bit gray+alpha; * row and handles the removal or pre-multiplication of the alpha channel.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:242,Performance,perform,performs,242,"/* The do_local_background case; called when all the following transforms are to; * be done:; *; * PNG_RGB_TO_GRAY; * PNG_COMPOSITE; * PNG_GAMMA; *; * This is a work-around for the fact that both the PNG_RGB_TO_GRAY and; * PNG_COMPOSITE code performs gamma correction, so we get double gamma; * correction. The fix-up is to prevent the PNG_COMPOSITE operation from; * happening inside libpng, so this routine sees an 8 or 16-bit gray+alpha; * row and handles the removal or pre-multiplication of the alpha channel.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:31,Testability,log,logic,31,/* Double check the convoluted logic below. We expect to get here with; * libpng doing rgb to gray and gamma correction but background processing; * left to the png_image_read_background function. The rows libpng produce; * might be 8 or 16-bit but should always have two channels; gray plus alpha.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:14,Security,access,access,14,"/* Use direct access to info_ptr here because otherwise the simplified API; * would require PNG_EASY_ACCESS_SUPPORTED (just for this.) Note this is; * checking the value after libpng expansions, not the original value in the; * PNG.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:60,Usability,simpl,simplified,60,"/* Use direct access to info_ptr here because otherwise the simplified API; * would require PNG_EASY_ACCESS_SUPPORTED (just for this.) Note this is; * checking the value after libpng expansions, not the original value in the; * PNG.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:190,Energy Efficiency,green,green,190,/* 8-bit sRGB gray values with an alpha channel; the alpha channel is; * to be removed by composing on a background: either the row if; * display->background is NULL or display->background->green if not.; * Unlike the code above ALPHA_OPTIMIZED has *not* been done.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:26,Safety,safe,safe,26,/* The division by two is safe because the caller passed in a; * stride which was multiplied by 2 (below) to get row_bytes.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:6,Safety,avoid,avoid,6,/* to avoid double gamma correction bug */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:54,Testability,test,test,54,"/* This is 'png_gamma_threshold' from pngrtran.c; the test used for; * gamma correction, the screen gamma hasn't been set on png_struct; * yet; it's set below. png_struct::gamma, however, is set to the; * final value.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:154,Availability,error,errors,154,"/* This is always an 8-bit sRGB value, using the 'green' channel; * for gray is much better than calculating the luminance here;; * we can get off-by-one errors in that calculation relative to; * the app expectations and that will show up in transparent; * pixels.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:50,Energy Efficiency,green,green,50,"/* This is always an 8-bit sRGB value, using the 'green' channel; * for gray is much better than calculating the luminance here;; * we can get off-by-one errors in that calculation relative to; * the app expectations and that will show up in transparent; * pixels.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:119,Performance,OPTIMIZ,OPTIMIZE,119,"/* This leaves the alpha channel in the output, so it has to be; * removed by the code below. Set the encoding to the 'OPTIMIZE'; * one so the code only has to hack on the pixels that require; * composition.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:59,Availability,error,error,59,/* If change is not now 0 some transformation is missing - error out. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:3,Deployability,Update,Update,3,/* Update the 'info' structure and make sure the result is as required; first; * make sure to turn on the interlace handling if it will be required; * (because it can't be turned on *after* the call to png_read_update_info!); *; * TODO: remove the do_local_background fixup below.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:12,Availability,error,error,12,/* internal error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:32,Availability,error,error,32,/* This is actually an internal error. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:52,Performance,perform,performed,52,/* Check for row_stride overflow. This check is not performed on the; * original PNG format because it may not occur in the output PNG format; * and libpng deals with the issues of reading the original.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:2,Safety,SAFE,SAFE,2,/*SAFE*/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:83,Safety,detect,detects,83,"/* This verifies 'check', the absolute value of the actual stride; * passed in and detects overflow in the application calculation (i.e.; * if the app did actually pass in a non-zero 'row_stride'.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:417,Availability,avail,available,417,"/* Now check for overflow of the image buffer calculation; this; * limits the whole image size to 32 bits for API compatibility with; * the current, 32-bit, PNG_IMAGE_BUFFER_SIZE macro.; *; * The PNG_IMAGE_BUFFER_SIZE macro is:; *; * (PNG_IMAGE_PIXEL_COMPONENT_SIZE(fmt)*height*(row_stride)); *; * And the component size is always 1 or 2, so make sure that the; * number of *bytes* that the application is saying are available; * does actually fit into a 32-bit number.; *; * NOTE: this will be changed in 1.7 because PNG_IMAGE_BUFFER_SIZE; * will be changed to use png_alloc_size_t; bigger images can be; * accommodated on 64-bit systems.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:28,Integrability,rout,routine,28,/* Choose the correct 'end' routine; for the color-map case; * all the setup has already been done.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c:268,Deployability,release,released,268,"/* pngrio.c - functions for data input; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2016,2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This file provides a location for all input. Users who need; * special handling are expected to write a function that has the same; * arguments as this and performs a similar function, but that possibly; * has a different input method. Note that you shouldn't change this; * function, but rather write a replacement function and then make; * libpng use it at run time with png_set_read_fn(...).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c:551,Performance,perform,performs,551,"/* pngrio.c - functions for data input; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2016,2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This file provides a location for all input. Users who need; * special handling are expected to write a function that has the same; * arguments as this and performs a similar function, but that possibly; * has a different input method. Note that you shouldn't change this; * function, but rather write a replacement function and then make; * libpng use it at run time with png_set_read_fn(...).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c:64,Integrability,rout,routine,64,"/* Read the data from whatever input you are using. The default routine; * reads from a file pointer. Note that this routine sometimes gets called; * with very small lengths, so you should implement some kind of simple; * buffering if you are using unbuffered reads. This should never be asked; * to read more than 64K on a 16-bit machine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c:117,Integrability,rout,routine,117,"/* Read the data from whatever input you are using. The default routine; * reads from a file pointer. Note that this routine sometimes gets called; * with very small lengths, so you should implement some kind of simple; * buffering if you are using unbuffered reads. This should never be asked; * to read more than 64K on a 16-bit machine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c:212,Usability,simpl,simple,212,"/* Read the data from whatever input you are using. The default routine; * reads from a file pointer. Note that this routine sometimes gets called; * with very small lengths, so you should implement some kind of simple; * buffering if you are using unbuffered reads. This should never be asked; * to read more than 64K on a 16-bit machine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c:24,Availability,error,error,24,"/* fread() returns 0 on error, so it is OK to store this in a size_t; * instead of an int, which is what fread() actually returns.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c:604,Availability,error,error,604,"/* This function allows the application to supply a new input function; * for libpng if standard C streams aren't being used.; *; * This function takes as its arguments:; *; * png_ptr - pointer to a png input data structure; *; * io_ptr - pointer to user supplied structure containing info about; * the input functions. May be NULL.; *; * read_data_fn - pointer to a new input function that takes as its; * arguments a pointer to a png_struct, a pointer to; * a location where input data can be stored, and a 32-bit; * unsigned int that is the number of bytes to be read.; * To exit and output any fatal error messages the new write; * function should call png_error(png_ptr, ""Error msg"").; * May be NULL, in which case libpng's default function will; * be used.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c:677,Availability,Error,Error,677,"/* This function allows the application to supply a new input function; * for libpng if standard C streams aren't being used.; *; * This function takes as its arguments:; *; * png_ptr - pointer to a png input data structure; *; * io_ptr - pointer to user supplied structure containing info about; * the input functions. May be NULL.; *; * read_data_fn - pointer to a new input function that takes as its; * arguments a pointer to a png_struct, a pointer to; * a location where input data can be stored, and a 32-bit; * unsigned int that is the number of bytes to be read.; * To exit and output any fatal error messages the new write; * function should call png_error(png_ptr, ""Error msg"").; * May be NULL, in which case libpng's default function will; * be used.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c:610,Integrability,message,messages,610,"/* This function allows the application to supply a new input function; * for libpng if standard C streams aren't being used.; *; * This function takes as its arguments:; *; * png_ptr - pointer to a png input data structure; *; * io_ptr - pointer to user supplied structure containing info about; * the input functions. May be NULL.; *; * read_data_fn - pointer to a new input function that takes as its; * arguments a pointer to a png_struct, a pointer to; * a location where input data can be stored, and a 32-bit; * unsigned int that is the number of bytes to be read.; * To exit and output any fatal error messages the new write; * function should call png_error(png_ptr, ""Error msg"").; * May be NULL, in which case libpng's default function will; * be used.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c:12,Availability,error,error,12,/* It is an error to write to a read device */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:290,Deployability,release,released,290,"/* pngrtran.c - transforms the data in a row for PNG readers; *; * Copyright (c) 2018-2019 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This file contains functions optionally called by an application; * in order to tell libpng how to handle data when reading a PNG.; * Transformations that are used in both reading and writing are; * in pngtrans.c.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:35,Availability,error,error,35,/* Set the action on getting a CRC error for an ancillary or critical chunk. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:35,Availability,error,errors,35,/* Tell libpng how we react to CRC errors in critical chunks */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:3,Availability,Error,Error,3,/* Error/quit */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:35,Availability,error,errors,35,/* Tell libpng how we react to CRC errors in ancillary chunks */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:3,Availability,Error,Error,3,/* Error/quit */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:11,Availability,failure,failure,11,/* Turn on failure to initialize correctly for all transforms. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:247,Usability,simpl,simpler,247,"/* READ_BACKGROUND */; /* Scale 16-bit depth files to 8-bit depth. If both of these are set then the; * one that pngrtran does first (scale) happens. This is necessary to allow the; * TRANSFORM and API behavior to be somewhat consistent, and it's simpler.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:276,Availability,error,errors,276,"/* The following silently ignores cases where fixed point (times 100,000); * gamma values are passed to the floating point API. This is safe and it; * means the fixed point constants work just fine with the floating point; * API. The alternative would just lead to undetected errors and spurious; * bug reports. Negative values fail inside the _fixed API unless they; * correspond to the flag values.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:136,Safety,safe,safe,136,"/* The following silently ignores cases where fixed point (times 100,000); * gamma values are passed to the floating point API. This is safe and it; * means the fixed point constants work just fine with the floating point; * API. The alternative would just lead to undetected errors and spurious; * bug reports. Negative values fail inside the _fixed API unless they; * correspond to the flag values.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:3,Security,Validat,Validate,3,"/* Validate the value to ensure it is in a reasonable range. The value; * is expected to be 1 or greater, but this range test allows for some; * viewing correction values. The intent is to weed out users of this API; * who use the inverse of the gamma value accidentally! Since some of these; * values are reasonable this may have to be changed:; *; * 1.6.x: changed from 0.07..3 to 0.01..100 (to accommodate the optimal 16-bit; * gamma of 36, and its reciprocal.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:121,Testability,test,test,121,"/* Validate the value to ensure it is in a reasonable range. The value; * is expected to be 1 or greater, but this range test allows for some; * viewing correction values. The intent is to weed out users of this API; * who use the inverse of the gamma value accidentally! Since some of these; * values are reasonable this may have to be changed:; *; * 1.6.x: changed from 0.07..3 to 0.01..100 (to accommodate the optimal 16-bit; * gamma of 36, and its reciprocal.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:396,Usability,simpl,simply,396,"/* Dither file to 8-bit. Supply a palette, the current number; * of elements in the palette, the maximum number of elements; * allowed, and a histogram if possible. If the current number; * of colors is greater than the maximum number, the palette will be; * modified to fit in the maximum number. ""full_quantize"" indicates; * whether we need a quantizing cube set up for RGB images, or if we; * simply are reducing the number of colors in a paletted image.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:97,Integrability,rout,routine,97,"/* This is much harder to do simply (and quickly). Perhaps; * we need to go through a median cut routine, but those; * don't always behave themselves with only a few colors; * as input. So we will just find the closest two colors,; * and throw out one of them (chosen somewhat randomly).; * [We don't understand this at all, so if someone wants to; * work on improving it, be our guest - AED, GRP]; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:29,Usability,simpl,simply,29,"/* This is much harder to do simply (and quickly). Perhaps; * we need to go through a median cut routine, but those; * don't always behave themselves with only a few colors; * as input. So we will just find the closest two colors,; * and throw out one of them (chosen somewhat randomly).; * [We don't understand this at all, so if someone wants to; * work on improving it, be our guest - AED, GRP]; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:140,Energy Efficiency,allocate,allocated,140,"/* Initial wild guess at how far apart the farthest pixel; * pair we will be eliminating will be. Larger; * numbers mean more areas will be allocated, Smaller; * numbers run the risk of not saving enough data, and; * having to do this all over again.; *; * I have not done extensive checking on this number.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:178,Safety,risk,risk,178,"/* Initial wild guess at how far apart the farthest pixel; * pair we will be eliminating will be. Larger; * numbers mean more areas will be allocated, Smaller; * numbers run the risk of not saving enough data, and; * having to do this all over again.; *; * I have not done extensive checking on this number.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:131,Usability,undo,undocumented,131,"/* Checking the gamma values for being >0 was added in 1.5.4 along with the; * premultiplied alpha support; this actually hides an undocumented feature; * of the previous implementation which allowed gamma processing to be; * disabled in background handling. There is no evidence (so far) that this; * was being used; however, png_set_background itself accepted and must still; * accept '0' for the gamma value it takes, because it isn't always used.; *; * Since this is an API change (albeit a very minor one that removes an; * undocumented API feature) the following checks were only enabled in; * libpng-1.6.0.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:529,Usability,undo,undocumented,529,"/* Checking the gamma values for being >0 was added in 1.5.4 along with the; * premultiplied alpha support; this actually hides an undocumented feature; * of the previous implementation which allowed gamma processing to be; * disabled in background handling. There is no evidence (so far) that this; * was being used; however, png_set_background itself accepted and must still; * accept '0' for the gamma value it takes, because it isn't always used.; *; * Since this is an API change (albeit a very minor one that removes an; * undocumented API feature) the following checks were only enabled in; * libpng-1.6.0.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:16,Availability,error,error,16,/* Make this an error in 1.6 because otherwise the application may assume; * that it just worked and get a memory overwrite.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:173,Availability,down,down,173,"/* In the case of gamma transformations only do transformations on images where; * the [file] gamma and screen_gamma are not close reciprocals, otherwise it; * slows things down slightly, and also needlessly introduces small errors.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:225,Availability,error,errors,225,"/* In the case of gamma transformations only do transformations on images where; * the [file] gamma and screen_gamma are not close reciprocals, otherwise it; * slows things down slightly, and also needlessly introduces small errors.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:44,Performance,perform,performing,44,"/* PNG_GAMMA_THRESHOLD is the threshold for performing gamma; * correction as a difference of the overall transform from 1.0; *; * We want to compare the threshold with s*f - 1, if we get; * overflow here it is because of wacky gamma values so we; * turn on processing anyway.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:257,Integrability,rout,routines,257,/* Initialize everything needed for the read. This includes modifying; * the palette.; */; /* For the moment 'png_init_palette_transformations' and; * 'png_init_rgb_transformations' only do some flag canceling optimizations.; * The intent is that these two routines should have palette or rgb operations; * extracted from 'png_init_read_transformations'.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:210,Performance,optimiz,optimizations,210,/* Initialize everything needed for the read. This includes modifying; * the palette.; */; /* For the moment 'png_init_palette_transformations' and; * 'png_init_rgb_transformations' only do some flag canceling optimizations.; * The intent is that these two routines should have palette or rgb operations; * extracted from 'png_init_read_transformations'.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:22,Performance,optimiz,optimize,22,/* If no alpha we can optimize. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:123,Usability,simpl,simply,123,/* Added to libpng-1.5.4: check the color type to determine whether there; * is any alpha or transparency in the image and simply cancel the; * background and alpha mode stuff if there isn't.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:22,Performance,optimiz,optimize,22,/* If no alpha we can optimize. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:174,Deployability,update,update,174,"/* This internal function is called from png_read_start_row in pngrutil.c; * and it is called before the 'rowbytes' calculation is done, so the code; * in here can change or update the transformations flags.; *; * First do updates that do not depend on the details of the PNG image data; * being processed.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:223,Deployability,update,updates,223,"/* This internal function is called from png_read_start_row in pngrutil.c; * and it is called before the 'rowbytes' calculation is done, so the code; * in here can change or update the transformations flags.; *; * First do updates that do not depend on the details of the PNG image data; * being processed.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:243,Integrability,depend,depend,243,"/* This internal function is called from png_read_start_row in pngrutil.c; * and it is called before the 'rowbytes' calculation is done, so the code; * in here can change or update the transformations flags.; *; * First do updates that do not depend on the details of the PNG image data; * being processed.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:35,Performance,perform,performed,35,"/* Prior to 1.5.4 these tests were performed from png_set_gamma, 1.5.4 adds; * png_set_alpha_mode and this is another source for a default file gamma so; * the test needs to be performed later - here. In addition prior to 1.5.4; * the tests were repeated for the PALETTE color type here - this is no; * longer necessary (and doesn't seem to have been necessary before.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:177,Performance,perform,performed,177,"/* Prior to 1.5.4 these tests were performed from png_set_gamma, 1.5.4 adds; * png_set_alpha_mode and this is another source for a default file gamma so; * the test needs to be performed later - here. In addition prior to 1.5.4; * the tests were repeated for the PALETTE color type here - this is no; * longer necessary (and doesn't seem to have been necessary before.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:24,Testability,test,tests,24,"/* Prior to 1.5.4 these tests were performed from png_set_gamma, 1.5.4 adds; * png_set_alpha_mode and this is another source for a default file gamma so; * the test needs to be performed later - here. In addition prior to 1.5.4; * the tests were repeated for the PALETTE color type here - this is no; * longer necessary (and doesn't seem to have been necessary before.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:160,Testability,test,test,160,"/* Prior to 1.5.4 these tests were performed from png_set_gamma, 1.5.4 adds; * png_set_alpha_mode and this is another source for a default file gamma so; * the test needs to be performed later - here. In addition prior to 1.5.4; * the tests were repeated for the PALETTE color type here - this is no; * longer necessary (and doesn't seem to have been necessary before.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:235,Testability,test,tests,235,"/* Prior to 1.5.4 these tests were performed from png_set_gamma, 1.5.4 adds; * png_set_alpha_mode and this is another source for a default file gamma so; * the test needs to be performed later - here. In addition prior to 1.5.4; * the tests were repeated for the PALETTE color type here - this is no; * longer necessary (and doesn't seem to have been necessary before.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:48,Performance,optimiz,optimization,48,"/* Detect gray background and attempt to enable optimization for; * gray --> RGB case.; *; * Note: if PNG_BACKGROUND_EXPAND is set and color_type is either RGB or; * RGB_ALPHA (in which case need_expand is superfluous anyway), the; * background color might actually be gray yet not be flagged as such.; * This is not a problem for the current code, which uses; * PNG_BACKGROUND_IS_GRAY only to decide when to do the; * png_do_gray_to_rgb() transformation.; *; * TODO: this code needs to be revised to avoid the complexity and; * interdependencies. The color type of the background should be recorded in; * png_set_background, along with the bit depth, then the code has a record; * of exactly what color space the background is currently in.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:3,Safety,Detect,Detect,3,"/* Detect gray background and attempt to enable optimization for; * gray --> RGB case.; *; * Note: if PNG_BACKGROUND_EXPAND is set and color_type is either RGB or; * RGB_ALPHA (in which case need_expand is superfluous anyway), the; * background color might actually be gray yet not be flagged as such.; * This is not a problem for the current code, which uses; * PNG_BACKGROUND_IS_GRAY only to decide when to do the; * png_do_gray_to_rgb() transformation.; *; * TODO: this code needs to be revised to avoid the complexity and; * interdependencies. The color type of the background should be recorded in; * png_set_background, along with the bit depth, then the code has a record; * of exactly what color space the background is currently in.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:501,Safety,avoid,avoid,501,"/* Detect gray background and attempt to enable optimization for; * gray --> RGB case.; *; * Note: if PNG_BACKGROUND_EXPAND is set and color_type is either RGB or; * RGB_ALPHA (in which case need_expand is superfluous anyway), the; * background color might actually be gray yet not be flagged as such.; * This is not a problem for the current code, which uses; * PNG_BACKGROUND_IS_GRAY only to decide when to do the; * png_do_gray_to_rgb() transformation.; *; * TODO: this code needs to be revised to avoid the complexity and; * interdependencies. The color type of the background should be recorded in; * png_set_background, along with the bit depth, then the code has a record; * of exactly what color space the background is currently in.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:633,Deployability,update,updated,633,"/* READ_GRAY_TO_RGB */; /* For indexed PNG data (PNG_COLOR_TYPE_PALETTE) many of the transformations; * can be performed directly on the palette, and some (such as rgb to gray); * can be optimized inside the palette. This is particularly true of the; * composite (background and alpha) stuff, which can be pretty much all done; * in the palette even if the result is expanded to RGB or gray afterward.; *; * NOTE: this is Not Yet Implemented, the code behaves as in 1.5.1 and; * earlier and the palette stuff is actually handled on the first row. This; * leads to the reported bug that the palette returned by png_get_PLTE is not; * updated.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:111,Performance,perform,performed,111,"/* READ_GRAY_TO_RGB */; /* For indexed PNG data (PNG_COLOR_TYPE_PALETTE) many of the transformations; * can be performed directly on the palette, and some (such as rgb to gray); * can be optimized inside the palette. This is particularly true of the; * composite (background and alpha) stuff, which can be pretty much all done; * in the palette even if the result is expanded to RGB or gray afterward.; *; * NOTE: this is Not Yet Implemented, the code behaves as in 1.5.1 and; * earlier and the palette stuff is actually handled on the first row. This; * leads to the reported bug that the palette returned by png_get_PLTE is not; * updated.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:187,Performance,optimiz,optimized,187,"/* READ_GRAY_TO_RGB */; /* For indexed PNG data (PNG_COLOR_TYPE_PALETTE) many of the transformations; * can be performed directly on the palette, and some (such as rgb to gray); * can be optimized inside the palette. This is particularly true of the; * composite (background and alpha) stuff, which can be pretty much all done; * in the palette even if the result is expanded to RGB or gray afterward.; *; * NOTE: this is Not Yet Implemented, the code behaves as in 1.5.1 and; * earlier and the palette stuff is actually handled on the first row. This; * leads to the reported bug that the palette returned by png_get_PLTE is not; * updated.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:188,Energy Efficiency,reduce,reduce,188,"/* TODO: fix this. Because the expand_16 operation is after the compose; * handling the background color must be 8, not 16, bits deep, but the; * application will supply a 16-bit value so reduce it here.; *; * The PNG_BACKGROUND_EXPAND code above does not expand to 16 bits at; * present, so that case is ok (until do_expand_16 is moved.); *; * NOTE: this discards the low 16 bits of the user supplied background; * color, but until expand_16 works properly there is no choice!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:48,Energy Efficiency,reduce,reduced,48,"/* On the other hand, if a 16-bit file is to be reduced to 8-bits per; * component this will also happen after PNG_COMPOSE and so the background; * color must be pre-expanded here.; *; * TODO: fix this too.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:351,Testability,test,testing,351,"/* NOTE: below 'PNG_READ_ALPHA_MODE_SUPPORTED' is presumed to also enable the; * background support (see the comments in scripts/pnglibconf.dfa), this; * allows pre-multiplication of the alpha channel to be implemented as; * compositing on black. This is probably sub-optimal and has been done in; * 1.5.4 betas simply to enable external critique and testing (i.e. to; * implement the new API quickly, without lots of internal changes.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:312,Usability,simpl,simply,312,"/* NOTE: below 'PNG_READ_ALPHA_MODE_SUPPORTED' is presumed to also enable the; * background support (see the comments in scripts/pnglibconf.dfa), this; * allows pre-multiplication of the alpha channel to be implemented as; * compositing on black. This is probably sub-optimal and has been done in; * 1.5.4 betas simply to enable external critique and testing (i.e. to; * implement the new API quickly, without lots of internal changes.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:194,Testability,test,test,194,"/* This needs to change - in the palette image case a whole set of tables are; * built when it would be quicker to just calculate the correct value for; * each palette entry directly. Also, the test is too tricky - why check; * PNG_RGB_TO_GRAY if PNG_GAMMA is not set? The answer seems to be that; * PNG_GAMMA is cancelled even if the gamma is known? The test excludes the; * PNG_COMPOSE case, so apparently if there is no *overall* gamma correction; * the gamma tables will not be built even if composition is required on a; * gamma encoded value.; *; * In 1.5.4 this is addressed below by an additional check on the individual; * file gamma - if it is not 1.0 both RGB_TO_GRAY and COMPOSE need the; * tables.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:355,Testability,test,test,355,"/* This needs to change - in the palette image case a whole set of tables are; * built when it would be quicker to just calculate the correct value for; * each palette entry directly. Also, the test is too tricky - why check; * PNG_RGB_TO_GRAY if PNG_GAMMA is not set? The answer seems to be that; * PNG_GAMMA is cancelled even if the gamma is known? The test excludes the; * PNG_COMPOSE case, so apparently if there is no *overall* gamma correction; * the gamma tables will not be built even if composition is required on a; * gamma encoded value.; *; * In 1.5.4 this is addressed below by an additional check on the individual; * file gamma - if it is not 1.0 both RGB_TO_GRAY and COMPOSE need the; * tables.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:69,Performance,optimiz,optimized,69,/* Issue a warning about this combination: because RGB_TO_GRAY is; * optimized to do the gamma transform if present yet do_background has; * to do the same thing if both options are set a; * double-gamma-correction happens. This is true in all versions of; * libpng to date.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:151,Availability,error,error,151,"/* significant bits can be in the range 1 to 7 for a meaningful result, if; * the number of significant bits is 0 then no shift is done (this is an; * error condition which is silently ignored.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:83,Deployability,update,updated,83,"/* Modify the info structure to reflect the transformations. The; * info should be updated so a PNG file could be written with it,; * assuming the transformations result in valid PNG data.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:50,Availability,down,down,50,"/* No 16-bit support: force chopping 16-bit input down to 8, in this case; * the app program can chose if both APIs are available by setting the; * correct scaling to use.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:120,Availability,avail,available,120,"/* No 16-bit support: force chopping 16-bit input down to 8, in this case; * the app program can chose if both APIs are available by setting the; * correct scaling to use.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:20,Performance,cache,cache,20,/* Adding in 1.5.4: cache the above value in png_struct so that we can later; * check in png_rowbytes that the user buffer won't get overwritten. Note; * that the field is not always set - if png_read_update_info isn't called; * the application has to either not do any transforms or get the calculation; * right itself.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:45,Integrability,rout,routine,45,"/* Reverse the effects of png_do_shift. This routine merely shifts the; * pixels back to their significant bits values. Thus, if you have; * a row of bit depth 8, but only 5 are significant, this will shift; * the values back to 0 through 31.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:58,Integrability,rout,routine,58,/* The palette case has already been handled in the _init routine. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:44,Availability,error,error,44,/* A shift of more than the bit depth is an error condition but it; * gets ignored here.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:28,Testability,assert,assert,28,/* Must be 2bpp gray */; /* assert(channels == 1 && shift[0] == 1) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:28,Testability,assert,assert,28,/* Must be 4bpp gray */; /* assert(channels == 1) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:30,Availability,down,down,30,/* Scale rows of bit depth 16 down to 8 accurately */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:406,Availability,error,error,406,"/* The input is an array of 16-bit components, these must be scaled to; * 8 bits each. For a 16-bit value V the required value (from the PNG; * specification) is:; *; * (V * 255) / 65535; *; * This reduces to round(V / 257), or floor((V + 128.5)/257); *; * Represent V as the two byte value vhi.vlo. Make a guess that the; * result is the top byte of V, vhi, then the correction to this value; * is:; *; * error = floor(((V-vhi.vhi) + 128.5) / 257); * = floor(((vlo-vhi) + 128.5) / 257); *; * This can be approximated using integer arithmetic (and a signed; * shift):; *; * error = (vlo-vhi+128) >> 8;; *; * The approximate differs from the exact answer only when (vlo-vhi) is; * 128; it then gives a correction of +1 when the exact correction is; * 0. This gives 128 errors. The exact answer (correct for all 16-bit; * input values) is:; *; * error = (vlo-vhi+128)*65535 >> 24;; *; * An alternative arithmetic calculation which also gives no errors is:; *; * (V * 255 + 32895) >> 16; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:574,Availability,error,error,574,"/* The input is an array of 16-bit components, these must be scaled to; * 8 bits each. For a 16-bit value V the required value (from the PNG; * specification) is:; *; * (V * 255) / 65535; *; * This reduces to round(V / 257), or floor((V + 128.5)/257); *; * Represent V as the two byte value vhi.vlo. Make a guess that the; * result is the top byte of V, vhi, then the correction to this value; * is:; *; * error = floor(((V-vhi.vhi) + 128.5) / 257); * = floor(((vlo-vhi) + 128.5) / 257); *; * This can be approximated using integer arithmetic (and a signed; * shift):; *; * error = (vlo-vhi+128) >> 8;; *; * The approximate differs from the exact answer only when (vlo-vhi) is; * 128; it then gives a correction of +1 when the exact correction is; * 0. This gives 128 errors. The exact answer (correct for all 16-bit; * input values) is:; *; * error = (vlo-vhi+128)*65535 >> 24;; *; * An alternative arithmetic calculation which also gives no errors is:; *; * (V * 255 + 32895) >> 16; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:768,Availability,error,errors,768,"/* The input is an array of 16-bit components, these must be scaled to; * 8 bits each. For a 16-bit value V the required value (from the PNG; * specification) is:; *; * (V * 255) / 65535; *; * This reduces to round(V / 257), or floor((V + 128.5)/257); *; * Represent V as the two byte value vhi.vlo. Make a guess that the; * result is the top byte of V, vhi, then the correction to this value; * is:; *; * error = floor(((V-vhi.vhi) + 128.5) / 257); * = floor(((vlo-vhi) + 128.5) / 257); *; * This can be approximated using integer arithmetic (and a signed; * shift):; *; * error = (vlo-vhi+128) >> 8;; *; * The approximate differs from the exact answer only when (vlo-vhi) is; * 128; it then gives a correction of +1 when the exact correction is; * 0. This gives 128 errors. The exact answer (correct for all 16-bit; * input values) is:; *; * error = (vlo-vhi+128)*65535 >> 24;; *; * An alternative arithmetic calculation which also gives no errors is:; *; * (V * 255 + 32895) >> 16; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:844,Availability,error,error,844,"/* The input is an array of 16-bit components, these must be scaled to; * 8 bits each. For a 16-bit value V the required value (from the PNG; * specification) is:; *; * (V * 255) / 65535; *; * This reduces to round(V / 257), or floor((V + 128.5)/257); *; * Represent V as the two byte value vhi.vlo. Make a guess that the; * result is the top byte of V, vhi, then the correction to this value; * is:; *; * error = floor(((V-vhi.vhi) + 128.5) / 257); * = floor(((vlo-vhi) + 128.5) / 257); *; * This can be approximated using integer arithmetic (and a signed; * shift):; *; * error = (vlo-vhi+128) >> 8;; *; * The approximate differs from the exact answer only when (vlo-vhi) is; * 128; it then gives a correction of +1 when the exact correction is; * 0. This gives 128 errors. The exact answer (correct for all 16-bit; * input values) is:; *; * error = (vlo-vhi+128)*65535 >> 24;; *; * An alternative arithmetic calculation which also gives no errors is:; *; * (V * 255 + 32895) >> 16; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:943,Availability,error,errors,943,"/* The input is an array of 16-bit components, these must be scaled to; * 8 bits each. For a 16-bit value V the required value (from the PNG; * specification) is:; *; * (V * 255) / 65535; *; * This reduces to round(V / 257), or floor((V + 128.5)/257); *; * Represent V as the two byte value vhi.vlo. Make a guess that the; * result is the top byte of V, vhi, then the correction to this value; * is:; *; * error = floor(((V-vhi.vhi) + 128.5) / 257); * = floor(((vlo-vhi) + 128.5) / 257); *; * This can be approximated using integer arithmetic (and a signed; * shift):; *; * error = (vlo-vhi+128) >> 8;; *; * The approximate differs from the exact answer only when (vlo-vhi) is; * 128; it then gives a correction of +1 when the exact correction is; * 0. This gives 128 errors. The exact answer (correct for all 16-bit; * input values) is:; *; * error = (vlo-vhi+128)*65535 >> 24;; *; * An alternative arithmetic calculation which also gives no errors is:; *; * (V * 255 + 32895) >> 16; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:198,Energy Efficiency,reduce,reduces,198,"/* The input is an array of 16-bit components, these must be scaled to; * 8 bits each. For a 16-bit value V the required value (from the PNG; * specification) is:; *; * (V * 255) / 65535; *; * This reduces to round(V / 257), or floor((V + 128.5)/257); *; * Represent V as the two byte value vhi.vlo. Make a guess that the; * result is the top byte of V, vhi, then the correction to this value; * is:; *; * error = floor(((V-vhi.vhi) + 128.5) / 257); * = floor(((vlo-vhi) + 128.5) / 257); *; * This can be approximated using integer arithmetic (and a signed; * shift):; *; * error = (vlo-vhi+128) >> 8;; *; * The approximate differs from the exact answer only when (vlo-vhi) is; * 128; it then gives a correction of +1 when the exact correction is; * 0. This gives 128 errors. The exact answer (correct for all 16-bit; * input values) is:; *; * error = (vlo-vhi+128)*65535 >> 24;; *; * An alternative arithmetic calculation which also gives no errors is:; *; * (V * 255 + 32895) >> 16; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:3,Usability,Simpl,Simply,3,/* Simply discard the low byte. This was the default behavior prior; * to libpng-1.5.4.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:1882,Availability,avail,available,1882,"web/20000816232553/www.inforamp.net/; * ~poynton/notes/colour_and_gamma/ColorFAQ.txt ); * Charles Poynton poynton at poynton.com; *; * Y = 0.212671 * R + 0.715160 * G + 0.072169 * B; *; * which can be expressed with integers as; *; * Y = (6969 * R + 23434 * G + 2365 * B)/32768; *; * Poynton's current link (as of January 2003 through July 2011):; * <http://www.poynton.com/notes/colour_and_gamma/>; * has changed the numbers slightly:; *; * Y = 0.2126*R + 0.7152*G + 0.0722*B; *; * which can be expressed with integers as; *; * Y = (6966 * R + 23436 * G + 2366 * B)/32768; *; * Historically, however, libpng uses numbers derived from the ITU-R Rec 709; * end point chromaticities and the D65 white point. Depending on the; * precision used for the D65 white point this produces a variety of different; * numbers, however if the four decimal place value used in ITU-R Rec 709 is; * used (0.3127,0.3290) the Y calculation would be:; *; * Y = (6968 * R + 23435 * G + 2366 * B)/32768; *; * While this is correct the rounding results in an overflow for white, because; * the sum of the rounded coefficients is 32769, not 32768. Consequently; * libpng uses, instead, the closest non-overflowing approximation:; *; * Y = (6968 * R + 23434 * G + 2366 * B)/32768; *; * Starting with libpng-1.5.5, if the image being converted has a cHRM chunk; * (including an sRGB chunk) then the chromaticities are used to calculate the; * coefficients. See the chunk handling in pngrutil.c for more information.; *; * In all cases the calculation is to be done in a linear colorspace. If no; * gamma information is available to correct the encoding of the original RGB; * values this results in an implicit assumption that the original PNG RGB; * values were linear.; *; * Other integer coefficients can be used via png_set_rgb_to_gray(). Because; * the API takes just red and green coefficients the blue coefficient is; * calculated to make the sum 32768. This will result in different rounding; * to that used above.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:3,Energy Efficiency,Reduce,Reduce,3,"/* Reduce RGB files to grayscale, with or without alpha; * using the equation given in Poynton's ColorFAQ of 1998-01-04 at; * <http://www.inforamp.net/~poynton/> (THIS LINK IS DEAD June 2008 but; * versions dated 1998 through November 2002 have been archived at; * https://web.archive.org/web/20000816232553/www.inforamp.net/; * ~poynton/notes/colour_and_gamma/ColorFAQ.txt ); * Charles Poynton poynton at poynton.com; *; * Y = 0.212671 * R + 0.715160 * G + 0.072169 * B; *; * which can be expressed with integers as; *; * Y = (6969 * R + 23434 * G + 2365 * B)/32768; *; * Poynton's current link (as of January 2003 through July 2011):; * <http://www.poynton.com/notes/colour_and_gamma/>; * has changed the numbers slightly:; *; * Y = 0.2126*R + 0.7152*G + 0.0722*B; *; * which can be expressed with integers as; *; * Y = (6966 * R + 23436 * G + 2366 * B)/32768; *; * Historically, however, libpng uses numbers derived from the ITU-R Rec 709; * end point chromaticities and the D65 white point. Depending on the; * precision used for the D65 white point this produces a variety of different; * numbers, however if the four decimal place value used in ITU-R Rec 709 is; * used (0.3127,0.3290) the Y calculation would be:; *; * Y = (6968 * R + 23435 * G + 2366 * B)/32768; *; * While this is correct the rounding results in an overflow for white, because; * the sum of the rounded coefficients is 32769, not 32768. Consequently; * libpng uses, instead, the closest non-overflowing approximation:; *; * Y = (6968 * R + 23434 * G + 2366 * B)/32768; *; * Starting with libpng-1.5.5, if the image being converted has a cHRM chunk; * (including an sRGB chunk) then the chromaticities are used to calculate the; * coefficients. See the chunk handling in pngrutil.c for more information.; *; * In all cases the calculation is to be done in a linear colorspace. If no; * gamma information is available to correct the encoding of the original RGB; * values this results in an implicit assumption that the origina",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:2144,Energy Efficiency,green,green,2144,"web/20000816232553/www.inforamp.net/; * ~poynton/notes/colour_and_gamma/ColorFAQ.txt ); * Charles Poynton poynton at poynton.com; *; * Y = 0.212671 * R + 0.715160 * G + 0.072169 * B; *; * which can be expressed with integers as; *; * Y = (6969 * R + 23434 * G + 2365 * B)/32768; *; * Poynton's current link (as of January 2003 through July 2011):; * <http://www.poynton.com/notes/colour_and_gamma/>; * has changed the numbers slightly:; *; * Y = 0.2126*R + 0.7152*G + 0.0722*B; *; * which can be expressed with integers as; *; * Y = (6966 * R + 23436 * G + 2366 * B)/32768; *; * Historically, however, libpng uses numbers derived from the ITU-R Rec 709; * end point chromaticities and the D65 white point. Depending on the; * precision used for the D65 white point this produces a variety of different; * numbers, however if the four decimal place value used in ITU-R Rec 709 is; * used (0.3127,0.3290) the Y calculation would be:; *; * Y = (6968 * R + 23435 * G + 2366 * B)/32768; *; * While this is correct the rounding results in an overflow for white, because; * the sum of the rounded coefficients is 32769, not 32768. Consequently; * libpng uses, instead, the closest non-overflowing approximation:; *; * Y = (6968 * R + 23434 * G + 2366 * B)/32768; *; * Starting with libpng-1.5.5, if the image being converted has a cHRM chunk; * (including an sRGB chunk) then the chromaticities are used to calculate the; * coefficients. See the chunk handling in pngrutil.c for more information.; *; * In all cases the calculation is to be done in a linear colorspace. If no; * gamma information is available to correct the encoding of the original RGB; * values this results in an implicit assumption that the original PNG RGB; * values were linear.; *; * Other integer coefficients can be used via png_set_rgb_to_gray(). Because; * the API takes just red and green coefficients the blue coefficient is; * calculated to make the sum 32768. This will result in different rounding; * to that used above.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:995,Integrability,Depend,Depending,995," Poynton's ColorFAQ of 1998-01-04 at; * <http://www.inforamp.net/~poynton/> (THIS LINK IS DEAD June 2008 but; * versions dated 1998 through November 2002 have been archived at; * https://web.archive.org/web/20000816232553/www.inforamp.net/; * ~poynton/notes/colour_and_gamma/ColorFAQ.txt ); * Charles Poynton poynton at poynton.com; *; * Y = 0.212671 * R + 0.715160 * G + 0.072169 * B; *; * which can be expressed with integers as; *; * Y = (6969 * R + 23434 * G + 2365 * B)/32768; *; * Poynton's current link (as of January 2003 through July 2011):; * <http://www.poynton.com/notes/colour_and_gamma/>; * has changed the numbers slightly:; *; * Y = 0.2126*R + 0.7152*G + 0.0722*B; *; * which can be expressed with integers as; *; * Y = (6966 * R + 23436 * G + 2366 * B)/32768; *; * Historically, however, libpng uses numbers derived from the ITU-R Rec 709; * end point chromaticities and the D65 white point. Depending on the; * precision used for the D65 white point this produces a variety of different; * numbers, however if the four decimal place value used in ITU-R Rec 709 is; * used (0.3127,0.3290) the Y calculation would be:; *; * Y = (6968 * R + 23435 * G + 2366 * B)/32768; *; * While this is correct the rounding results in an overflow for white, because; * the sum of the rounded coefficients is 32769, not 32768. Consequently; * libpng uses, instead, the closest non-overflowing approximation:; *; * Y = (6968 * R + 23434 * G + 2366 * B)/32768; *; * Starting with libpng-1.5.5, if the image being converted has a cHRM chunk; * (including an sRGB chunk) then the chromaticities are used to calculate the; * coefficients. See the chunk handling in pngrutil.c for more information.; *; * In all cases the calculation is to be done in a linear colorspace. If no; * gamma information is available to correct the encoding of the original RGB; * values this results in an implicit assumption that the original PNG RGB; * values were linear.; *; * Other integer coefficients can be used via png_",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:47,Usability,simpl,simply,47,/* NOTE: this is the historical approach which simply; * truncates the results.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:28,Safety,avoid,avoiding,28,"/* Gamma correct the image, avoiding the alpha channel. Make sure; * you do this after you deal with the transparency issue on grayscale; * or RGB images. If your bit depth is 8, use gamma_table, if it; * is 16, use gamma_16_table and gamma_shift. Build these with; * build_gamma_table().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:47,Integrability,depend,depending,47,/* Expands a palette row to an RGB or RGBA row depending; * upon whether you supply trans and num_trans.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:12,Performance,optimiz,optimization,12,"/* The RGBA optimization works with png_ptr->bit_depth == 8; * but sometimes row_info->bit_depth has been changed to 8.; * In these cases, the palette hasn't been riffled.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:252,Usability,simpl,simply,252,"/* The row have a sequence of bytes containing [0..255] and we need; * to turn it into another row containing [0..65535], to do this we; * calculate:; *; * (input / 255) * 65535; *; * Which happens to be exactly input * 257 and this can be achieved; * simply by byte replication in place (copying backwards).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:61,Availability,down,down,61,"/* This looks real messy, but the compiler will reduce; * it down to a reasonable formula. For example, with; * 5 bits per color, we get:; * p = (((r >> 3) & 0x1f) << 10) |; * (((g >> 3) & 0x1f) << 5) |; * ((b >> 3) & 0x1f);; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:48,Energy Efficiency,reduce,reduce,48,"/* This looks real messy, but the compiler will reduce; * it down to a reasonable formula. For example, with; * 5 bits per color, we get:; * p = (((r >> 3) & 0x1f) << 10) |; * (((g >> 3) & 0x1f) << 5) |; * ((b >> 3) & 0x1f);; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:78,Availability,error,error,78,"/* Prior to 1.5.4 this output row/pass where the NULL pointer is, but this; * error is incredibly rare and incredibly easy to debug without this; * information.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:310,Deployability,upgrade,upgraded,310,"/* From Andreas Dilger e-mail to png-implement, 26 March 1998:; *; * In most cases, the ""simple transparency"" should be done prior to doing; * gray-to-RGB, or you will have to test 3x as many bytes to check if a; * pixel is transparent. You would also need to make sure that the; * transparency information is upgraded to RGB.; *; * To summarize, the current flow is:; * - Gray + simple transparency -> compare 1 or 2 gray bytes and composite; * with background ""in place"" if transparent,; * convert to RGB if necessary; * - Gray + alpha -> composite with gray background and remove alpha bytes,; * convert to RGB if necessary; *; * To support RGB backgrounds for gray images we need:; * - Gray + simple transparency -> convert to RGB + simple transparency,; * compare 3 or 6 bytes and composite with; * background ""in place"" if transparent; * (3x compare/pixel compared to doing; * composite with gray bkgrnd); * - Gray + alpha -> convert to RGB + alpha, composite with background and; * remove alpha bytes (3x float; * operations/pixel compared with composite; * on gray background); *; * Greg's change will do this. The reason it wasn't done before is for; * performance, as this increases the per-pixel operations. If we would check; * in advance if the background was gray or RGB, and position the gray-to-RGB; * transform appropriately, then it would save a lot of work/time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:1162,Performance,perform,performance,1162,"/* From Andreas Dilger e-mail to png-implement, 26 March 1998:; *; * In most cases, the ""simple transparency"" should be done prior to doing; * gray-to-RGB, or you will have to test 3x as many bytes to check if a; * pixel is transparent. You would also need to make sure that the; * transparency information is upgraded to RGB.; *; * To summarize, the current flow is:; * - Gray + simple transparency -> compare 1 or 2 gray bytes and composite; * with background ""in place"" if transparent,; * convert to RGB if necessary; * - Gray + alpha -> composite with gray background and remove alpha bytes,; * convert to RGB if necessary; *; * To support RGB backgrounds for gray images we need:; * - Gray + simple transparency -> convert to RGB + simple transparency,; * compare 3 or 6 bytes and composite with; * background ""in place"" if transparent; * (3x compare/pixel compared to doing; * composite with gray bkgrnd); * - Gray + alpha -> convert to RGB + alpha, composite with background and; * remove alpha bytes (3x float; * operations/pixel compared with composite; * on gray background); *; * Greg's change will do this. The reason it wasn't done before is for; * performance, as this increases the per-pixel operations. If we would check; * in advance if the background was gray or RGB, and position the gray-to-RGB; * transform appropriately, then it would save a lot of work/time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:176,Testability,test,test,176,"/* From Andreas Dilger e-mail to png-implement, 26 March 1998:; *; * In most cases, the ""simple transparency"" should be done prior to doing; * gray-to-RGB, or you will have to test 3x as many bytes to check if a; * pixel is transparent. You would also need to make sure that the; * transparency information is upgraded to RGB.; *; * To summarize, the current flow is:; * - Gray + simple transparency -> compare 1 or 2 gray bytes and composite; * with background ""in place"" if transparent,; * convert to RGB if necessary; * - Gray + alpha -> composite with gray background and remove alpha bytes,; * convert to RGB if necessary; *; * To support RGB backgrounds for gray images we need:; * - Gray + simple transparency -> convert to RGB + simple transparency,; * compare 3 or 6 bytes and composite with; * background ""in place"" if transparent; * (3x compare/pixel compared to doing; * composite with gray bkgrnd); * - Gray + alpha -> convert to RGB + alpha, composite with background and; * remove alpha bytes (3x float; * operations/pixel compared with composite; * on gray background); *; * Greg's change will do this. The reason it wasn't done before is for; * performance, as this increases the per-pixel operations. If we would check; * in advance if the background was gray or RGB, and position the gray-to-RGB; * transform appropriately, then it would save a lot of work/time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:89,Usability,simpl,simple,89,"/* From Andreas Dilger e-mail to png-implement, 26 March 1998:; *; * In most cases, the ""simple transparency"" should be done prior to doing; * gray-to-RGB, or you will have to test 3x as many bytes to check if a; * pixel is transparent. You would also need to make sure that the; * transparency information is upgraded to RGB.; *; * To summarize, the current flow is:; * - Gray + simple transparency -> compare 1 or 2 gray bytes and composite; * with background ""in place"" if transparent,; * convert to RGB if necessary; * - Gray + alpha -> composite with gray background and remove alpha bytes,; * convert to RGB if necessary; *; * To support RGB backgrounds for gray images we need:; * - Gray + simple transparency -> convert to RGB + simple transparency,; * compare 3 or 6 bytes and composite with; * background ""in place"" if transparent; * (3x compare/pixel compared to doing; * composite with gray bkgrnd); * - Gray + alpha -> convert to RGB + alpha, composite with background and; * remove alpha bytes (3x float; * operations/pixel compared with composite; * on gray background); *; * Greg's change will do this. The reason it wasn't done before is for; * performance, as this increases the per-pixel operations. If we would check; * in advance if the background was gray or RGB, and position the gray-to-RGB; * transform appropriately, then it would save a lot of work/time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:380,Usability,simpl,simple,380,"/* From Andreas Dilger e-mail to png-implement, 26 March 1998:; *; * In most cases, the ""simple transparency"" should be done prior to doing; * gray-to-RGB, or you will have to test 3x as many bytes to check if a; * pixel is transparent. You would also need to make sure that the; * transparency information is upgraded to RGB.; *; * To summarize, the current flow is:; * - Gray + simple transparency -> compare 1 or 2 gray bytes and composite; * with background ""in place"" if transparent,; * convert to RGB if necessary; * - Gray + alpha -> composite with gray background and remove alpha bytes,; * convert to RGB if necessary; *; * To support RGB backgrounds for gray images we need:; * - Gray + simple transparency -> convert to RGB + simple transparency,; * compare 3 or 6 bytes and composite with; * background ""in place"" if transparent; * (3x compare/pixel compared to doing; * composite with gray bkgrnd); * - Gray + alpha -> convert to RGB + alpha, composite with background and; * remove alpha bytes (3x float; * operations/pixel compared with composite; * on gray background); *; * Greg's change will do this. The reason it wasn't done before is for; * performance, as this increases the per-pixel operations. If we would check; * in advance if the background was gray or RGB, and position the gray-to-RGB; * transform appropriately, then it would save a lot of work/time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:697,Usability,simpl,simple,697,"/* From Andreas Dilger e-mail to png-implement, 26 March 1998:; *; * In most cases, the ""simple transparency"" should be done prior to doing; * gray-to-RGB, or you will have to test 3x as many bytes to check if a; * pixel is transparent. You would also need to make sure that the; * transparency information is upgraded to RGB.; *; * To summarize, the current flow is:; * - Gray + simple transparency -> compare 1 or 2 gray bytes and composite; * with background ""in place"" if transparent,; * convert to RGB if necessary; * - Gray + alpha -> composite with gray background and remove alpha bytes,; * convert to RGB if necessary; *; * To support RGB backgrounds for gray images we need:; * - Gray + simple transparency -> convert to RGB + simple transparency,; * compare 3 or 6 bytes and composite with; * background ""in place"" if transparent; * (3x compare/pixel compared to doing; * composite with gray bkgrnd); * - Gray + alpha -> convert to RGB + alpha, composite with background and; * remove alpha bytes (3x float; * operations/pixel compared with composite; * on gray background); *; * Greg's change will do this. The reason it wasn't done before is for; * performance, as this increases the per-pixel operations. If we would check; * in advance if the background was gray or RGB, and position the gray-to-RGB; * transform appropriately, then it would save a lot of work/time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:737,Usability,simpl,simple,737,"/* From Andreas Dilger e-mail to png-implement, 26 March 1998:; *; * In most cases, the ""simple transparency"" should be done prior to doing; * gray-to-RGB, or you will have to test 3x as many bytes to check if a; * pixel is transparent. You would also need to make sure that the; * transparency information is upgraded to RGB.; *; * To summarize, the current flow is:; * - Gray + simple transparency -> compare 1 or 2 gray bytes and composite; * with background ""in place"" if transparent,; * convert to RGB if necessary; * - Gray + alpha -> composite with gray background and remove alpha bytes,; * convert to RGB if necessary; *; * To support RGB backgrounds for gray images we need:; * - Gray + simple transparency -> convert to RGB + simple transparency,; * compare 3 or 6 bytes and composite with; * background ""in place"" if transparent; * (3x compare/pixel compared to doing; * composite with gray bkgrnd); * - Gray + alpha -> convert to RGB + alpha, composite with background and; * remove alpha bytes (3x float; * operations/pixel compared with composite; * on gray background); *; * Greg's change will do this. The reason it wasn't done before is for; * performance, as this increases the per-pixel operations. If we would check; * in advance if the background was gray or RGB, and position the gray-to-RGB; * transform appropriately, then it would save a lot of work/time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:82,Performance,perform,performance,82,"/* If gray -> RGB, do so now only if background is non-gray; else do later; * for performance reasons; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:153,Energy Efficiency,efficient,efficient,153,"/* Do the expansion now, after all the arithmetic has been done. Notice; * that previous transformations can handle the PNG_EXPAND_16 flag if this; * is efficient (particularly true in the case of gamma correction, where; * better accuracy results faster!); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:170,Availability,avail,available,170,"/* NOTE: the read macros will obscure these definitions, so that if; * PNG_USE_READ_MACROS is set the library will not use them internally,; * but the APIs will still be available externally.; *; * The parentheses around ""PNGAPI function_name"" in the following three; * functions are necessary because they allow the macros to co-exist with; * these (unused but exported) functions.; */; /* Grab an unsigned 32-bit integer from a buffer in big-endian format. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:27,Safety,safe,safe,27,/* The following has to be safe; this function only gets called on PNG data; * and if we get here that data is invalid. 0 is the most safe value and; * if not then an attacker would surely just generate a PNG with 0 instead.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:134,Safety,safe,safe,134,/* The following has to be safe; this function only gets called on PNG data; * and if we get here that data is invalid. 0 is the most safe value and; * if not then an attacker would surely just generate a PNG with 0 instead.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:167,Security,attack,attacker,167,/* The following has to be safe; this function only gets called on PNG data; * and if we get here that data is invalid. 0 is the most safe value and; * if not then an attacker would surely just generate a PNG with 0 instead.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:55,Performance,perform,performed,55,/* Read the length and the chunk name.; * This must be performed in a single I/O call.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:174,Availability,error,error,174,"/* Manage the read buffer; this simply reallocates the buffer if it is not small; * enough (or if it is not allocated). The routine returns a pointer to the; * buffer; if an error occurs and 'warn' is set the routine returns NULL, else; * it will call png_error (via png_malloc) on failure. (warn == 2 means; * 'silent').; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:282,Availability,failure,failure,282,"/* Manage the read buffer; this simply reallocates the buffer if it is not small; * enough (or if it is not allocated). The routine returns a pointer to the; * buffer; if an error occurs and 'warn' is set the routine returns NULL, else; * it will call png_error (via png_malloc) on failure. (warn == 2 means; * 'silent').; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:108,Energy Efficiency,allocate,allocated,108,"/* Manage the read buffer; this simply reallocates the buffer if it is not small; * enough (or if it is not allocated). The routine returns a pointer to the; * buffer; if an error occurs and 'warn' is set the routine returns NULL, else; * it will call png_error (via png_malloc) on failure. (warn == 2 means; * 'silent').; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:124,Integrability,rout,routine,124,"/* Manage the read buffer; this simply reallocates the buffer if it is not small; * enough (or if it is not allocated). The routine returns a pointer to the; * buffer; if an error occurs and 'warn' is set the routine returns NULL, else; * it will call png_error (via png_malloc) on failure. (warn == 2 means; * 'silent').; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:209,Integrability,rout,routine,209,"/* Manage the read buffer; this simply reallocates the buffer if it is not small; * enough (or if it is not allocated). The routine returns a pointer to the; * buffer; if an error occurs and 'warn' is set the routine returns NULL, else; * it will call png_error (via png_malloc) on failure. (warn == 2 means; * 'silent').; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:32,Usability,simpl,simply,32,"/* Manage the read buffer; this simply reallocates the buffer if it is not small; * enough (or if it is not allocated). The routine returns a pointer to the; * buffer; if an error occurs and 'warn' is set the routine returns NULL, else; * it will call png_error (via png_malloc) on failure. (warn == 2 means; * 'silent').; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:82,Availability,error,error,82,"/* So the message that results is ""<chunk> using zstream""; this is an; * internal error, but is very useful for debugging. i18n requirements; * are minimal.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:10,Integrability,message,message,10,"/* So the message that results is ""<chunk> using zstream""; this is an; * internal error, but is very useful for debugging. i18n requirements; * are minimal.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:716,Energy Efficiency,allocate,allocate,716,"/* Implementation note: unlike 'png_deflate_claim' this internal function; * does not take the size of the data as an argument. Some efficiency could; * be gained by using this when it is known *if* the zlib stream itself does; * not record the number; however, this is an illusion: the original writer; * of the PNG may have selected a lower window size, and we really must; * follow that because, for systems with with limited capabilities, we; * would otherwise reject the application's attempts to use a smaller window; * size (zlib doesn't have an interface to say ""this or lower""!).; *; * inflateReset2 was added to zlib 1.2.4; before this the window could not be; * reset, therefore it is necessary to always allocate the maximum window; * size with earlier zlibs just in case later compressed chunks need it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:553,Integrability,interface,interface,553,"/* Implementation note: unlike 'png_deflate_claim' this internal function; * does not take the size of the data as an argument. Some efficiency could; * be gained by using this when it is known *if* the zlib stream itself does; * not record the number; however, this is an illusion: the original writer; * of the PNG may have selected a lower window size, and we really must; * follow that because, for systems with with limited capabilities, we; * would otherwise reject the application's attempts to use a smaller window; * size (zlib doesn't have an interface to say ""this or lower""!).; *; * inflateReset2 was added to zlib 1.2.4; before this the window could not be; * reset, therefore it is necessary to always allocate the maximum window; * size with earlier zlibs just in case later compressed chunks need it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:45,Safety,safe,safety,45,"/* ZLIB_VERNUM >= 0x1240 */; /* Set this for safety, just in case the previous owner left pointers to; * memory allocations.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:12,Security,validat,validation,12,/* Turn off validation of the ADLER32 checksum in IDAT chunks */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:38,Security,checksum,checksum,38,/* Turn off validation of the ADLER32 checksum in IDAT chunks */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:117,Security,validat,validation,117,"/* Handle the start of the inflate stream if we called inflateInit2(strm,0);; * in this case some zlib versions skip validation of the CINFO field and, in; * certain circumstances, libpng may end up displaying an invalid image, in; * contrast to implementations that call zlib in the normal way (e.g. libpng; * 1.5).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:32,Availability,error,error,32,"/* png_inflate now returns zlib error codes including Z_OK and Z_STREAM_END to; * allow the caller to do multiple calls if required. If the 'finish' flag is; * set Z_FINISH will be passed to the final inflate() call and Z_STREAM_END must; * be returned or there has been a problem, otherwise Z_SYNC_FLUSH is used and; * Z_OK or Z_STREAM_END will be returned on success.; *; * The input and output sizes are updated to the actual amounts of data consumed; * or written, not the amount available (as in a z_stream). The data pointers; * are not changed, so the next input is (data+input_size) and the next; * available output is (output+output_size).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:484,Availability,avail,available,484,"/* png_inflate now returns zlib error codes including Z_OK and Z_STREAM_END to; * allow the caller to do multiple calls if required. If the 'finish' flag is; * set Z_FINISH will be passed to the final inflate() call and Z_STREAM_END must; * be returned or there has been a problem, otherwise Z_SYNC_FLUSH is used and; * Z_OK or Z_STREAM_END will be returned on success.; *; * The input and output sizes are updated to the actual amounts of data consumed; * or written, not the amount available (as in a z_stream). The data pointers; * are not changed, so the next input is (data+input_size) and the next; * available output is (output+output_size).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:607,Availability,avail,available,607,"/* png_inflate now returns zlib error codes including Z_OK and Z_STREAM_END to; * allow the caller to do multiple calls if required. If the 'finish' flag is; * set Z_FINISH will be passed to the final inflate() call and Z_STREAM_END must; * be returned or there has been a problem, otherwise Z_SYNC_FLUSH is used and; * Z_OK or Z_STREAM_END will be returned on success.; *; * The input and output sizes are updated to the actual amounts of data consumed; * or written, not the amount available (as in a z_stream). The data pointers; * are not changed, so the next input is (data+input_size) and the next; * available output is (output+output_size).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:407,Deployability,update,updated,407,"/* png_inflate now returns zlib error codes including Z_OK and Z_STREAM_END to; * allow the caller to do multiple calls if required. If the 'finish' flag is; * set Z_FINISH will be passed to the final inflate() call and Z_STREAM_END must; * be returned or there has been a problem, otherwise Z_SYNC_FLUSH is used and; * Z_OK or Z_STREAM_END will be returned on success.; *; * The input and output sizes are updated to the actual amounts of data consumed; * or written, not the amount available (as in a z_stream). The data pointers; * are not changed, so the next input is (data+input_size) and the next; * available output is (output+output_size).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:471,Energy Efficiency,reduce,reduces,471,"/* zlib can't necessarily handle more than 65535 bytes at once (i.e. it; * can't even necessarily handle 65536 bytes) because the type uInt is; * ""16 bits or more"". Consequently it is necessary to chunk the input to; * zlib. This code uses ZLIB_IO_MAX, from pngpriv.h, as the maximum (the; * maximum value that can be stored in a uInt.) It is possible to set; * ZLIB_IO_MAX to a lower value in pngpriv.h and this may sometimes have; * a performance advantage, because it reduces the amount of data accessed; * at each step and that may give the OS more time to page it in.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:437,Performance,perform,performance,437,"/* zlib can't necessarily handle more than 65535 bytes at once (i.e. it; * can't even necessarily handle 65536 bytes) because the type uInt is; * ""16 bits or more"". Consequently it is necessary to chunk the input to; * zlib. This code uses ZLIB_IO_MAX, from pngpriv.h, as the maximum (the; * maximum value that can be stored in a uInt.) It is possible to set; * ZLIB_IO_MAX to a lower value in pngpriv.h and this may sometimes have; * a performance advantage, because it reduces the amount of data accessed; * at each step and that may give the OS more time to page it in.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:498,Security,access,accessed,498,"/* zlib can't necessarily handle more than 65535 bytes at once (i.e. it; * can't even necessarily handle 65536 bytes) because the type uInt is; * ""16 bits or more"". Consequently it is necessary to chunk the input to; * zlib. This code uses ZLIB_IO_MAX, from pngpriv.h, as the maximum (the; * maximum value that can be stored in a uInt.) It is possible to set; * ZLIB_IO_MAX to a lower value in pngpriv.h and this may sometimes have; * a performance advantage, because it reduces the amount of data accessed; * at each step and that may give the OS more time to page it in.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:42,Availability,avail,available,42,/* Read directly into the output if it is available (this is set to; * a local buffer below if output is NULL).; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:153,Usability,simpl,simply,153,/* zlib INPUT BUFFER */; /* The setting of 'avail_in' used to be outside the loop; by setting it; * inside it is possible to chunk the input to zlib and simply rely on; * zlib to advance the 'next_in' pointer. This allows arbitrary; * amounts of data to be passed through zlib at the unavoidable cost of; * requiring a window save (memcpy of up to 32768 output bytes); * every ZLIB_IO_MAX input bytes.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Safety,safe,safe,3,/* safe: < than ZLIB_IO_MAX */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:73,Availability,avail,available,73,"/* Reset the output buffer each time round if output is NULL and; * make available the full buffer, up to 'remaining_space'; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Safety,safe,safe,3,/* safe: < ZLIB_IO_MAX */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:7,Safety,safe,safety,7,/* For safety kill the local buffer pointer now */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Deployability,Update,Update,3,"/* Update the input and output sizes; the updated values are the amount; * consumed or written, effectively the inverse of what zlib uses.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:42,Deployability,update,updated,42,"/* Update the input and output sizes; the updated values are the amount; * consumed or written, effectively the inverse of what zlib uses.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:26,Availability,error,error,26,"/* This is a bad internal error. The recovery assigns to the zstream msg; * pointer, which is not owned by the caller, but this is safe; it's only; * used on errors!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:37,Availability,recover,recovery,37,"/* This is a bad internal error. The recovery assigns to the zstream msg; * pointer, which is not owned by the caller, but this is safe; it's only; * used on errors!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:158,Availability,error,errors,158,"/* This is a bad internal error. The recovery assigns to the zstream msg; * pointer, which is not owned by the caller, but this is safe; it's only; * used on errors!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:37,Safety,recover,recovery,37,"/* This is a bad internal error. The recovery assigns to the zstream msg; * pointer, which is not owned by the caller, but this is safe; it's only; * used on errors!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:131,Safety,safe,safe,131,"/* This is a bad internal error. The recovery assigns to the zstream msg; * pointer, which is not owned by the caller, but this is safe; it's only; * used on errors!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:94,Energy Efficiency,allocate,allocated,94,/*; * Decompress trailing data in a chunk. The assumption is that read_buffer; * points at an allocated area holding the contents of a chunk with a; * trailing compressed part. What we get back is an allocated area; * holding the original prefix part and an uncompressed version of the; * trailing part (the malloc area passed in is freed).; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:200,Energy Efficiency,allocate,allocated,200,/*; * Decompress trailing data in a chunk. The assumption is that read_buffer; * points at an allocated area holding the contents of a chunk with a; * trailing compressed part. What we get back is an allocated area; * holding the original prefix part and an uncompressed version of the; * trailing part (the malloc area passed in is freed).; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:175,Energy Efficiency,allocate,allocates,175,"/* TODO: implement different limits for different types of chunk.; *; * The caller supplies *newlength set to the maximum length of the; * uncompressed data, but this routine allocates space for the prefix and; * maybe a '\0' terminator too. We have to assume that 'prefix_size' is; * limited only by the maximum chunk size.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:167,Integrability,rout,routine,167,"/* TODO: implement different limits for different types of chunk.; *; * The caller supplies *newlength set to the maximum length of the; * uncompressed data, but this routine allocates space for the prefix and; * maybe a '\0' terminator too. We have to assume that 'prefix_size' is; * limited only by the maximum chunk size.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:184,Integrability,message,message,184,"/* Because of the limit checks above we know that the new,; * expanded, size will fit in a size_t (let alone an; * png_alloc_size_t). Use png_malloc_base here to avoid an; * extra OOM message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:162,Safety,avoid,avoid,162,"/* Because of the limit checks above we know that the new,; * expanded, size will fit in a size_t (let alone an; * png_alloc_size_t). Use png_malloc_base here to avoid an; * extra OOM message.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:209,Availability,error,error,209,"/* The size changed on the second read, there can be no; * guarantee that anything is correct at this point.; * The 'msg' pointer has been set to ""unexpected end of; * LZ stream"", which is fine, but return an error code; * that the caller won't accept.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:7,Safety,safe,safety,7,/* for safety */; /* Free the text pointer (this is the old read_buffer on; * success); */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:49,Availability,error,error,49,"/* This really is very benign, but it's still an error because; * the extra space may otherwise be used as a Trojan Horse.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:34,Availability,error,error,34,"/* inflateReset failed, store the error message */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:40,Integrability,message,message,40,"/* inflateReset failed, store the error message */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Deployability,Release,Release,3,/* Release the claimed stream */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:15,Deployability,configurat,configuration,15,/* Application/configuration limits exceeded */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:15,Modifiability,config,configuration,15,/* Application/configuration limits exceeded */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Performance,Perform,Perform,3,"/* Perform a partial read and decompress, producing 'avail_out' bytes and; * reading from the current chunk as required.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:79,Availability,avail,available,79,/* Use Z_SYNC_FLUSH when there is no more chunk data to ensure that all; * the available output is produced; this allows reading of truncated; * streams.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:57,Availability,error,error,57,"/* Should not be required, but is safe */; /* Ensure the error message pointer is always set: */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:63,Integrability,message,message,63,"/* Should not be required, but is safe */; /* Ensure the error message pointer is always set: */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:34,Safety,safe,safe,34,"/* Should not be required, but is safe */; /* Ensure the error message pointer is always set: */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:16,Modifiability,variab,variables,16,/* Set internal variables */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:176,Availability,error,error,176,"/* Moved to before the 'after IDAT' check below because otherwise duplicate; * PLTE chunks are potentially ignored (the spec says there shall not be more; * than one PLTE, the error is not treated as benign, so this check trumps; * the requirement that PLTE appears before IDAT.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:41,Availability,error,error,41,"/* This is benign because the non-benign error happened before, when an; * IDAT was encountered in a color-mapped image with no PLTE.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:9,Integrability,depend,depend,9,/* Don't depend upon png_color being any order */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:25,Availability,error,error,25,/* Only if we have a CRC error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:88,Availability,error,error,88,"/* If we don't want to use the data from an ancillary chunk,; * we have two options: an error abort, or a warning and we; * ignore the data in this chunk (which should be OK, since; * it's considered ancillary for a RGB or RGBA image).; *; * IMPLEMENTATION NOTE: this is only here because png_crc_finish uses the; * chunk type to determine whether to check the ancillary or the critical; * flags.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:94,Safety,abort,abort,94,"/* If we don't want to use the data from an ancillary chunk,; * we have two options: an error abort, or a warning and we; * ignore the data in this chunk (which should be OK, since; * it's considered ancillary for a RGB or RGBA image).; *; * IMPLEMENTATION NOTE: this is only here because png_crc_finish uses the; * chunk type to determine whether to check the ancillary or the critical; * flags.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:143,Safety,detect,detection,143,/* Cancel this because otherwise it would be used if the transforms; * require it. Don't cancel the 'valid' flag because this would prevent; * detection of duplicate chunks.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:19,Availability,error,error,19,/* If a colorspace error has already been output skip this chunk */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:19,Availability,error,error,19,/* If a colorspace error has already been output skip this chunk */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:71,Safety,detect,detect,71,"/* Only one sRGB or iCCP chunk is allowed, use the HAVE_INTENT flag to detect; * this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Availability,error,error,3,"/* error message output, or no error */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:31,Availability,error,error,31,"/* error message output, or no error */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:9,Integrability,message,message,9,"/* error message output, or no error */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:211,Integrability,rout,routine,211,"/* Consistent with all the above colorspace handling an obviously *invalid*; * chunk is just ignored, so does not invalidate the color space. An; * alternative is to set the 'invalid' flags at the start of this routine; * and only clear them in they were not set before and all the tests pass.; */; /* The keyword must be at least one character and there is a; * terminator (0) byte and the compression method byte, and the; * 'zlib' datastream is at least 11 bytes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:282,Testability,test,tests,282,"/* Consistent with all the above colorspace handling an obviously *invalid*; * chunk is just ignored, so does not invalidate the color space. An; * alternative is to set the 'invalid' flags at the start of this routine; * and only clear them in they were not set before and all the tests pass.; */; /* The keyword must be at least one character and there is a; * terminator (0) byte and the compression method byte, and the; * 'zlib' datastream is at least 11 bytes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:231,Usability,clear,clear,231,"/* Consistent with all the above colorspace handling an obviously *invalid*; * chunk is just ignored, so does not invalidate the color space. An; * alternative is to set the 'invalid' flags at the start of this routine; * and only clear them in they were not set before and all the tests pass.; */; /* The keyword must be at least one character and there is a; * terminator (0) byte and the compression method byte, and the; * 'zlib' datastream is at least 11 bytes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:19,Availability,error,error,19,/* If a colorspace error has already been output skip this chunk */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:71,Safety,detect,detect,71,"/* Only one sRGB or iCCP chunk is allowed, use the HAVE_INTENT flag to detect; * this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:122,Security,checksum,checksum,122,"/* The minimum 'zlib' stream is assumed to be just the 2 byte header,; * 5 bytes minimum 'deflate' stream, and the 4 byte checksum.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:93,Safety,safe,safely,93,/* We only understand '0' compression - deflate - so if we get a; * different value we can't safely decode the chunk.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:78,Energy Efficiency,allocate,allocate,78,"/* Now read the tag table; a variable size buffer is; * needed at this point, allocate one for the whole; * profile. The header check has already validated; * that none of this stuff will overflow.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:29,Modifiability,variab,variable,29,"/* Now read the tag table; a variable size buffer is; * needed at this point, allocate one for the whole; * profile. The header check has already validated; * that none of this stuff will overflow.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:146,Security,validat,validated,146,"/* Now read the tag table; a variable size buffer is; * needed at this point, allocate one for the whole; * profile. The header check has already validated; * that none of this stuff will overflow.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:25,Availability,error,error,25,/* Still expect a buffer error because we expect; * there to be some tag data!; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:24,Security,validat,validated,24,"/* The profile has been validated for basic; * security issues, so read the whole thing in.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:47,Security,secur,security,47,"/* The profile has been validated for basic; * security issues, so read the whole thing in.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:42,Availability,error,error,42,/* else png_icc_check_tag_table output an error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:39,Availability,error,error,39,/* else png_icc_check_header output an error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:39,Availability,error,error,39,/* else png_icc_check_length output an error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Deployability,Release,Release,3,/* Release the stream */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Availability,Failure,Failure,3,/* Failure: the reason is in 'errmsg' */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:104,Testability,test,test,104,"/* WARNING: this may break if size_t is less than 32 bits; it is assumed; * that the PNG_MAX_MALLOC_64K test is enabled in this case, but this is a; * potential breakage point if the types in pngconf.h aren't exactly right.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Security,Integrity,Integrity-check,3,/* Integrity-check the data length */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:29,Availability,error,error,29,/* TODO: is this actually an error in the ISO spec? */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Security,Validat,Validate,3,/* Validate the unit. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Security,Validat,Validate,3,"/* Validate the ASCII numbers, need two ASCII numbers separated by; * a '\0' and they need to fit exactly in the chunk data.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Performance,Perform,Perform,3,/* Perform a basic check on the keyword length here. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:231,Availability,avail,available,231,"/* prefix_length should now be at the trailing '\0' of the translated; * keyword, but it may already be over the end. None of this arithmetic; * can overflow because chunks are at most 2^31 bytes long, but on 16-bit; * systems the available allocation may overflow.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:20,Safety,safe,safe,20,/* The following is safe because of the PNG_SIZE_MAX init above */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:2,Safety,SAFE,SAFE,2,/*SAFE*/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:2,Safety,SAFE,SAFE,2,/*SAFE*/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:108,Security,validat,validate,108,"/* The user callback takes precedence over the chunk keep value, but the; * keep value is still required to validate a save of a critical chunk.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:27,Availability,error,error,27,"/* ret is:; * negative: An error occurred; png_chunk_error will be called.; * zero: The chunk was not handled, the chunk will be discarded; * unless png_set_keep_unknown_chunks has been used to set; * a 'keep' behavior for this particular chunk, in which; * case that will be used. A critical chunk will cause an; * error at this point unless it is to be saved.; * positive: The chunk was handled, libpng will ignore/discard it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:316,Availability,error,error,316,"/* ret is:; * negative: An error occurred; png_chunk_error will be called.; * zero: The chunk was not handled, the chunk will be discarded; * unless png_set_keep_unknown_chunks has been used to set; * a 'keep' behavior for this particular chunk, in which; * case that will be used. A critical chunk will cause an; * error at this point unless it is to be saved.; * positive: The chunk was handled, libpng will ignore/discard it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:71,Availability,error,error,71,"/* If the keep value is 'default' or 'never' override it, but; * still error out on critical chunks unless the keep value is; * 'always' While this is weird it is the behavior in 1.4.12.; * A possible improvement would be to obey the value set for the; * chunk, but this would be an API change that would probably; * damage some applications.; *; * The png_app_warning below catches the case that matters, where; * the application has not set specific save or ignore for this; * chunk or global save or ignore.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:26,Safety,safe,safely,26,/* Critical chunks can be safely discarded at this point. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:171,Performance,cache,cache,171,"/* keep is currently just the per-chunk setting, if there was no; * setting change it to the global default now (not that this may; * still be AS_DEFAULT) then obtain the cache of the chunk if required,; * if not simply skip the chunk.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:213,Usability,simpl,simply,213,"/* keep is currently just the per-chunk setting, if there was no; * setting change it to the global default now (not that this may; * still be AS_DEFAULT) then obtain the cache of the chunk if required,; * if not simply skip the chunk.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:118,Usability,simpl,simply,118,"/* If here there is no read callback pointer set and no support is; * compiled in to just save the unknown chunks, so simply skip this; * chunk. If 'keep' is something other than AS_DEFAULT or NEVER then; * the app has erroneously asked for unknown chunk saving when there; * is no support.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:115,Availability,error,error,115,"/* NOTE: prior to 1.6.0 this case resulted in an unknown critical; * chunk being skipped, now there will be a hard error below.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:21,Availability,error,error,21,"/* Regardless of the error handling below the cached data (if any) can be; * freed now. Notice that the data is not freed if there is a png_error, but; * it will be freed by destroy_read_struct.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:46,Performance,cache,cached,46,"/* Regardless of the error handling below the cached data (if any) can be; * freed now. Notice that the data is not freed if there is a png_error, but; * it will be freed by destroy_read_struct.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:329,Testability,test,test,329,"/* This function is called to verify that a chunk name is valid.; * This function can't have the ""critical chunk check"" incorporated; * into it, since in the future we will need to be able to call user; * functions to handle unknown critical chunks after we check that; * the chunk name itself is valid.; */; /* Bit hacking: the test for an invalid byte in the 4 byte chunk name is:; *; * ((c) < 65 || (c) > 122 || ((c) > 90 && (c) < 97)); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:360,Availability,avail,available,360,"/* Combines the row recently read in with the existing pixels in the row. This; * routine takes care of alpha and transparency if requested. This routine also; * handles the two methods of progressive display of interlaced images,; * depending on the 'display' value; if 'display' is true then the whole row; * (dp) is filled from the start by replicating the available pixels. If; * 'display' is false only those pixels present in the pass are filled in.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:82,Integrability,rout,routine,82,"/* Combines the row recently read in with the existing pixels in the row. This; * routine takes care of alpha and transparency if requested. This routine also; * handles the two methods of progressive display of interlaced images,; * depending on the 'display' value; if 'display' is true then the whole row; * (dp) is filled from the start by replicating the available pixels. If; * 'display' is false only those pixels present in the pass are filled in.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:146,Integrability,rout,routine,146,"/* Combines the row recently read in with the existing pixels in the row. This; * routine takes care of alpha and transparency if requested. This routine also; * handles the two methods of progressive display of interlaced images,; * depending on the 'display' value; if 'display' is true then the whole row; * (dp) is filled from the start by replicating the available pixels. If; * 'display' is false only those pixels present in the pass are filled in.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:234,Integrability,depend,depending,234,"/* Combines the row recently read in with the existing pixels in the row. This; * routine takes care of alpha and transparency if requested. This routine also; * handles the two methods of progressive display of interlaced images,; * depending on the 'display' value; if 'display' is true then the whole row; * (dp) is filled from the start by replicating the available pixels. If; * 'display' is false only those pixels present in the pass are filled in.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:59,Integrability,rout,routine,59,/* Added in 1.5.6: it should not be possible to enter this routine until at; * least one row has been read from the PNG data and transformed.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:34,Energy Efficiency,reduce,reduces,34,/* For non-interlaced images this reduces to a memcpy(). A memcpy(); * will also happen if interlacing isn't supported or if the application; * does not call png_set_interlace_handling(). In the latter cases the; * caller just gets a sequence of the unexpanded rows from each interlace; * pass.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:88,Testability,test,test,88,"/* Narrow images may have no bits in a pass; the caller should handle; * this, but this test is cheap:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:44,Availability,mask,mask,44,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:167,Availability,mask,mask,167,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:226,Availability,mask,mask,226,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:256,Availability,mask,masking,256,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:447,Availability,mask,mask,447,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:619,Availability,mask,masks,619,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:1083,Availability,mask,masks,1083,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:1906,Deployability,release,release,1906,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:826,Integrability,depend,depends,826,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:1777,Safety,avoid,avoid,1777,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:1866,Safety,avoid,avoid,1866,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:597,Testability,test,test,597,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:820,Testability,log,logic,820,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:959,Testability,log,logic,959,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:974,Testability,log,logic,974,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:355,Usability,simpl,simply,355,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:12,Availability,mask,mask,12,"/* Return a mask for pass 'p' pixel 'x' at depth 'd'. The mask is; * little endian - the first pixel is at bit 0 - however the extra; * parameter 's' can be set to cause the mask position to be swapped; * within each byte, to match the PNG format. This is done by XOR of; * the shift with 7, 6 or 4 for bit depths 1, 2 and 4.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:58,Availability,mask,mask,58,"/* Return a mask for pass 'p' pixel 'x' at depth 'd'. The mask is; * little endian - the first pixel is at bit 0 - however the extra; * parameter 's' can be set to cause the mask position to be swapped; * within each byte, to match the PNG format. This is done by XOR of; * the shift with 7, 6 or 4 for bit depths 1, 2 and 4.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:174,Availability,mask,mask,174,"/* Return a mask for pass 'p' pixel 'x' at depth 'd'. The mask is; * little endian - the first pixel is at bit 0 - however the extra; * parameter 's' can be set to cause the mask position to be swapped; * within each byte, to match the PNG format. This is done by XOR of; * the shift with 7, 6 or 4 for bit depths 1, 2 and 4.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:66,Availability,mask,mask,66,/* Hence generate the appropriate 'block' or 'sparkle' pixel copy mask.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:38,Availability,mask,mask,38,"/* Combine 8 of these to get the full mask. For the 1-bpp and 2-bpp; * cases the result needs replicating, for the 4-bpp case the above; * generates a full 32 bits.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:39,Availability,mask,masks,39,/* Utility macros to construct all the masks for a depth/swap; * combination. The 's' parameter says whether the format is PNG; * (big endian bytes) or not. Only the three odd-numbered passes are; * required for the display/block algorithm.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:26,Availability,mask,masks,26,"/* Hence the pre-compiled masks indexed by PACKSWAP (or not), depth and; * then pass:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:22,Availability,mask,masks,22,/* Little-endian byte masks for PACKSWAP */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:28,Availability,mask,masks,28,/* Normal (big-endian byte) masks - PNG format */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:22,Availability,mask,masks,22,/* Little-endian byte masks for PACKSWAP */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:28,Availability,mask,masks,28,/* Normal (big-endian byte) masks - PNG format */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:54,Availability,mask,mask,54,"/* !USE_COMPILE_TIME_MASKS */; /* Use the appropriate mask to copy the required bits. In some cases; * the byte mask will be 0 or 0xff; optimize these cases. row_width is; * the number of pixels, but the code copies bytes, so it is necessary; * to special case the end.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:112,Availability,mask,mask,112,"/* !USE_COMPILE_TIME_MASKS */; /* Use the appropriate mask to copy the required bits. In some cases; * the byte mask will be 0 or 0xff; optimize these cases. row_width is; * the number of pixels, but the code copies bytes, so it is necessary; * to special case the end.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:136,Performance,optimiz,optimize,136,"/* !USE_COMPILE_TIME_MASKS */; /* Use the appropriate mask to copy the required bits. In some cases; * the byte mask will be 0 or 0xff; optimize these cases. row_width is; * the number of pixels, but the code copies bytes, so it is necessary; * to special case the end.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Security,Validat,Validate,3,/* Validate the depth - it must be a multiple of 8 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:2,Safety,SAFE,SAFE,2,/*SAFE*/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:71,Integrability,depend,depending,71,"/* And simply copy these bytes. Some optimization is possible here,; * depending on the value of 'bytes_to_copy'. Special case the low; * byte counts, which we know to be frequent.; *; * Notice that these cases all 'return' rather than 'break' - this; * avoids an unnecessary test on whether to restore the last byte; * below.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:37,Performance,optimiz,optimization,37,"/* And simply copy these bytes. Some optimization is possible here,; * depending on the value of 'bytes_to_copy'. Special case the low; * byte counts, which we know to be frequent.; *; * Notice that these cases all 'return' rather than 'break' - this; * avoids an unnecessary test on whether to restore the last byte; * below.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:254,Safety,avoid,avoids,254,"/* And simply copy these bytes. Some optimization is possible here,; * depending on the value of 'bytes_to_copy'. Special case the low; * byte counts, which we know to be frequent.; *; * Notice that these cases all 'return' rather than 'break' - this; * avoids an unnecessary test on whether to restore the last byte; * below.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:276,Testability,test,test,276,"/* And simply copy these bytes. Some optimization is possible here,; * depending on the value of 'bytes_to_copy'. Special case the low; * byte counts, which we know to be frequent.; *; * Notice that these cases all 'return' rather than 'break' - this; * avoids an unnecessary test on whether to restore the last byte; * below.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:7,Usability,simpl,simply,7,"/* And simply copy these bytes. Some optimization is possible here,; * depending on the value of 'bytes_to_copy'. Special case the low; * byte counts, which we know to be frequent.; *; * Notice that these cases all 'return' rather than 'break' - this; * avoids an unnecessary test on whether to restore the last byte; * below.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:84,Availability,down,down,84,/* There is a possibility of a partial copy at the end here; this; * slows the code down somewhat.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:2,Safety,SAFE,SAFE,2,/*SAFE*/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Safety,SAFE,SAFE,3,/* SAFE; pixel_depth does not exceed 64 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:17,Safety,predict,predictor,17,"/* Find the best predictor, the least of pa, pb, pc favoring the earlier; * ones in the case of a tie.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:114,Safety,predict,predictor,114,/* Process the first pixel in the row completely (this is the same as 'up'; * because there is only one candidate predictor for the first row).; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:415,Integrability,depend,depends,415,"/* This function is called once for every PNG image (except for PNG images; * that only use PNG_FILTER_VALUE_NONE for all rows) to set the; * implementations required to reverse the filtering of PNG rows. Reversing; * the filter is the first transformation performed on the row data. It is; * performed in place, therefore an implementation can be selected based on; * the image pixel format. If the implementation depends on image width then; * take care to ensure that it works correctly if the image is interlaced -; * interlacing causes the actual row width to vary.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:257,Performance,perform,performed,257,"/* This function is called once for every PNG image (except for PNG images; * that only use PNG_FILTER_VALUE_NONE for all rows) to set the; * implementations required to reverse the filtering of PNG rows. Reversing; * the filter is the first transformation performed on the row data. It is; * performed in place, therefore an implementation can be selected based on; * the image pixel format. If the implementation depends on image width then; * take care to ensure that it works correctly if the image is interlaced -; * interlacing causes the actual row width to vary.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:293,Performance,perform,performed,293,"/* This function is called once for every PNG image (except for PNG images; * that only use PNG_FILTER_VALUE_NONE for all rows) to set the; * implementations required to reverse the filtering of PNG rows. Reversing; * the filter is the first transformation performed on the row data. It is; * performed in place, therefore an implementation can be selected based on; * the image pixel format. If the implementation depends on image width then; * take care to ensure that it works correctly if the image is interlaced -; * interlacing causes the actual row width to vary.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:87,Deployability,install,install,87,"/* To use this define PNG_FILTER_OPTIMIZATIONS as the name of a function to; * call to install hardware optimizations for the above functions; simply; * replace whatever elements of the pp->read_filter[] array with a hardware; * specific (or, for that matter, generic) optimization.; *; * To see an example of this examine what configure.ac does when; * --enable-arm-neon is specified on the command line.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:328,Modifiability,config,configure,328,"/* To use this define PNG_FILTER_OPTIMIZATIONS as the name of a function to; * call to install hardware optimizations for the above functions; simply; * replace whatever elements of the pp->read_filter[] array with a hardware; * specific (or, for that matter, generic) optimization.; *; * To see an example of this examine what configure.ac does when; * --enable-arm-neon is specified on the command line.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:104,Performance,optimiz,optimizations,104,"/* To use this define PNG_FILTER_OPTIMIZATIONS as the name of a function to; * call to install hardware optimizations for the above functions; simply; * replace whatever elements of the pp->read_filter[] array with a hardware; * specific (or, for that matter, generic) optimization.; *; * To see an example of this examine what configure.ac does when; * --enable-arm-neon is specified on the command line.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:269,Performance,optimiz,optimization,269,"/* To use this define PNG_FILTER_OPTIMIZATIONS as the name of a function to; * call to install hardware optimizations for the above functions; simply; * replace whatever elements of the pp->read_filter[] array with a hardware; * specific (or, for that matter, generic) optimization.; *; * To see an example of this examine what configure.ac does when; * --enable-arm-neon is specified on the command line.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:143,Usability,simpl,simply,143,"/* To use this define PNG_FILTER_OPTIMIZATIONS as the name of a function to; * call to install hardware optimizations for the above functions; simply; * replace whatever elements of the pp->read_filter[] array with a hardware; * specific (or, for that matter, generic) optimization.; *; * To see an example of this examine what configure.ac does when; * --enable-arm-neon is specified on the command line.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Performance,OPTIMIZ,OPTIMIZATION,3,"/* OPTIMIZATION: DO NOT MODIFY THIS FUNCTION, instead #define; * PNG_FILTER_OPTIMIZATIONS to a function that overrides the generic; * implementations. See png_init_filter_functions above.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Safety,safe,safety,3,/* safety: set below */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:14,Availability,error,error,14,/* This is an error even in the 'check' case because the code just; * consumed a non-IDAT header.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:2,Availability,error,error,2,/*error*/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:60,Performance,optimiz,optimize,60,"/* Use NO_FLUSH; this gives zlib the maximum opportunity to optimize the; * process. If the LZ stream is truncated the sequential reader will; * terminally damage the stream, above, by reading the chunk header of the; * following chunk (it then exits with png_error).; *; * TODO: deal more elegantly with truncated IDAT lists.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:15,Safety,safe,safety,15,/* Do this for safety; we won't read any more into this row. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Safety,safe,safety,3,/* safety */; /* Now clear everything out for safety; the following may not have been; * done.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:46,Safety,safe,safety,46,/* safety */; /* Now clear everything out for safety; the following may not have been; * done.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:21,Usability,clear,clear,21,/* safety */; /* Now clear everything out for safety; the following may not have been; * done.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:31,Deployability,release,released,31,/* If the zstream has not been released do it now *and* terminate the reading; * of the final IDAT chunk.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:51,Performance,perform,performs,51,"/* WARNING: * png_read_transform_info (pngrtran.c) performs a simpler set of; * calculations to calculate the final pixel depth, then; * png_do_read_transforms actually does the transforms. This means that the; * code which effectively calculates this value is actually repeated in three; * separate places. They must all match. Innocent changes to the order of; * transformations can and will break libpng in a way that causes memory; * overwrites.; *; * TODO: fix this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:62,Usability,simpl,simpler,62,"/* WARNING: * png_read_transform_info (pngrtran.c) performs a simpler set of; * calculations to calculate the final pixel depth, then; * png_do_read_transforms actually does the transforms. This means that the; * code which effectively calculates this value is actually repeated in three; * separate places. They must all match. Innocent changes to the order of; * transformations can and will break libpng in a way that causes memory; * overwrites.; *; * TODO: fix this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:20,Availability,error,error,20,"/* In fact it is an error if it isn't supported, but checking is; * the safe way.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:72,Safety,safe,safe,72,"/* In fact it is an error if it isn't supported, but checking is; * the safe way.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:72,Safety,safe,safety,72,"/* Calculate the maximum bytes needed, adding a byte and a pixel; * for safety's sake; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:140,Availability,error,error,140,"/* Finally claim the zstream for the inflate of the IDAT data, use the bits; * value from the stream (note that this will result in a fatal error if the; * IDAT stream has a bogus deflate header window_bits value, but this should; * not be happening any longer!); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:274,Deployability,release,released,274,"/* pngset.c - storage of image information into info struct; *; * Copyright (c) 2018-2023 Cosmin Truta; * Copyright (c) 1998-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * The functions here are used during reads to store data from the file; * into the info struct, and during writes to store application data; * into the info struct for writing into the file. This abstracts the; * info struct and allows us to change the structure in the future.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:9,Security,validat,validate,9,/* TODO: validate format of calibration name and unit name */; /* Check that the type matches the specification. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:3,Security,Validat,Validate,3,/* Validate params[nparams] */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:30,Energy Efficiency,allocate,allocate,30,"/* Changed in libpng-1.2.1 to allocate PNG_MAX_PALETTE_LENGTH instead; * of num_palette entries, in case of an invalid PNG file or incorrect; * call to png_set_PLTE() with too-large sample values.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:41,Security,validat,validates,41,/* Set the colorspace first because this validates the profile; do not; * override previously set app cHRM or gAMA here (because likely as not the; * application knows better than libpng what the correct values are.) Pass; * the info_ptr color_type field to png_colorspace_set_ICC because in the; * write case it has not yet been stored in png_ptr.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:7,Energy Efficiency,allocate,allocate,7,/* Now allocate a new array and copy the old members in; this does all; * the overflow checks.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:54,Availability,error,error,54,"/* png_handle_sPLT doesn't do this, so this is an app error */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:199,Availability,error,error,199,/* IMPORTANT: we have memory now that won't get freed if something else; * goes wrong; this code must free it. png_malloc_array produces no; * warnings; use a png_chunk_report (below) if there is an error.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:32,Availability,error,error,32,/* This need not be an internal error - if the app calls; * png_set_unknown_chunks on a read pointer it must get the location right.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:7,Energy Efficiency,reduce,reduce,7,/* Now reduce the location to the top-most set bit by removing each least; * significant bit in turn.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:48,Availability,mask,mask,48,/* The cast is safe because 'location' is a bit mask and only the low four; * bits are significant.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:15,Safety,safe,safe,15,/* The cast is safe because 'location' is a bit mask and only the low four; * bits are significant.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:17,Availability,failure,failure,17,/* Check for the failure cases where support has been disabled at compile; * time. This code is hardly ever compiled - it's here because; * STORE_UNKNOWN_CHUNKS is set by both read and write code (compiling in this; * code) but may be meaningless if the read or write handling of unknown; * chunks is not compiled in.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:3,Safety,safe,safe,3,/* safe because it is initialized */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:80,Energy Efficiency,allocate,allocated,80,/* Increment unknown_chunks_num each time round the loop to protect the; * just-allocated chunk data.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:3,Usability,undo,undocumented,3,/* undocumented! */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:8,Usability,undo,undocumented,8,/* also undocumented */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:21,Deployability,update,update,21,"/* Utility function: update the 'keep' state of a chunk if it is already in; * the list, otherwise add it to the list.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:2,Safety,SAFE,SAFE,2,/*SAFE*/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:121,Modifiability,extend,extend,121,/* If these chunks are being reset to the default then no more memory is; * required because add_one_chunk above doesn't extend the list if the 'keep'; * parameter is the default.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:105,Deployability,update,updated,105,"/* Add the new chunks together with each one's handling code. If the chunk; * already exists the code is updated, otherwise the chunk is added to the; * end. (In libpng 1.6.0 order no longer matters because this code enforces; * the earlier convention that the last setting is the one that is used.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:123,Availability,error,error,123,"/* If allowed is 1, png_benign_error() is treated as a warning.; *; * If allowed is 0, png_benign_error() is treated as an error (which; * is the default behavior if png_set_benign_errors() is not called).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:264,Availability,recover,recover,264,"/* Whether to report invalid palette index; added at libng-1.5.10.; * It is possible for an indexed (color-type==3) PNG file to contain; * pixels with invalid (out-of-range) indexes if the PLTE chunk has; * fewer entries than the image's bit-depth would allow. We recover; * from this gracefully by filling any incomplete palette with zeros; * (opaque black). By default, when this occurs libpng will issue; * a benign error. This API can be used to override that behavior.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:419,Availability,error,error,419,"/* Whether to report invalid palette index; added at libng-1.5.10.; * It is possible for an indexed (color-type==3) PNG file to contain; * pixels with invalid (out-of-range) indexes if the PLTE chunk has; * fewer entries than the image's bit-depth would allow. We recover; * from this gracefully by filling any incomplete palette with zeros; * (opaque black). By default, when this occurs libpng will issue; * a benign error. This API can be used to override that behavior.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:264,Safety,recover,recover,264,"/* Whether to report invalid palette index; added at libng-1.5.10.; * It is possible for an indexed (color-type==3) PNG file to contain; * pixels with invalid (out-of-range) indexes if the PLTE chunk has; * fewer entries than the image's bit-depth would allow. We recover; * from this gracefully by filling any incomplete palette with zeros; * (opaque black). By default, when this occurs libpng will issue; * a benign error. This API can be used to override that behavior.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:481,Integrability,rout,routine,481,"/* Check that the tEXt or zTXt keyword is valid per PNG 1.0 specification,; * and if invalid, correct the keyword rather than discarding the entire; * chunk. The PNG 1.0 specification requires keywords 1-79 characters in; * length, forbids leading or trailing whitespace, multiple internal spaces,; * and the non-break space (0x80) from ISO 8859-1. Returns keyword length.; *; * The 'new_key' buffer must be 80 characters in size (for the keyword plus a; * trailing '\0'). If this routine returns 0 then there was no keyword, or a; * valid one could not be generated, and the caller must png_error.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:34,Availability,error,error,34,"/* just skip it, record the first error */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngset.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:284,Deployability,release,released,284,"/* pngstruct.h - header file for PNG reference library; *; * Copyright (c) 2018-2022 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* The structure that holds the information to read and write PNG files.; * The only people who need to care about what is inside of this are the; * people who will be modifying the library for their own special needs.; * It should NOT be accessed directly by an application.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:649,Security,access,accessed,649,"/* pngstruct.h - header file for PNG reference library; *; * Copyright (c) 2018-2022 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* The structure that holds the information to read and write PNG files.; * The only people who need to care about what is inside of this are the; * people who will be modifying the library for their own special needs.; * It should NOT be accessed directly by an application.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:47,Usability,undo,undo,47,"/* zlib.h sometimes #defines const to nothing, undo this. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:490,Performance,perform,performance,490,"/* zlib.h declares a magic type 'uInt' that limits the amount of data that zlib; * can handle at once. This type need be no larger than 16 bits (so maximum of; * 65535), this define allows us to discover how big it is, but limited by the; * maximum for size_t. The value can be overridden in a library build; * (pngusr.h, or set it in CPPFLAGS) and it works to set it to a considerably; * lower value (e.g. 255 works). A lower value may help memory usage (slightly); * and may even improve performance on some systems (and degrade it on others.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:347,Energy Efficiency,reduce,reduced,347,"/* Colorspace support; structures used in png_struct, png_info and in internal; * functions to hold and communicate information about the color space.; *; * PNG_COLORSPACE_SUPPORTED is only required if the application will perform; * colorspace corrections, otherwise all the colorspace information can be; * skipped and the size of libpng can be reduced (significantly) by compiling; * out the colorspace support.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:223,Performance,perform,perform,223,"/* Colorspace support; structures used in png_struct, png_info and in internal; * functions to hold and communicate information about the color space.; *; * PNG_COLORSPACE_SUPPORTED is only required if the application will perform; * colorspace corrections, otherwise all the colorspace information can be; * skipped and the size of libpng can be reduced (significantly) by compiling; * out the colorspace support.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:34,Energy Efficiency,green,green,34,"/* The chromaticities of the red, green and blue colorants and the chromaticity; * of the corresponding white point (i.e. of rgb(1.0,1.0,1.0)).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:31,Usability,simpl,simplify,31,/* Flags are always defined to simplify the code. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:25,Energy Efficiency,allocate,allocated,25,"/* size of the above, if allocated */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:25,Availability,error,errors,25,/* function for printing errors and aborting */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:36,Safety,abort,aborting,36,/* function for printing errors and aborting */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:28,Availability,error,error,28,/* user supplied struct for error functions */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:28,Performance,perform,perform,28,/* which transformations to perform */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:136,Energy Efficiency,allocate,allocated,136,/* buffer to save previous (unfiltered) row.; * While reading this is a pointer into; * big_prev_row; while writing it is separately; * allocated if needed.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:135,Energy Efficiency,allocate,allocated,135,"/* buffer to save current (unfiltered) row.; * While reading, this is a pointer into; * big_row_buf; while writing it is separately; * allocated.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:28,Deployability,update,updated,28,/* Added in 1.5.4: cache of updated row bytes */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:19,Performance,cache,cache,19,/* Added in 1.5.4: cache of updated row bytes */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:28,Availability,avail,available,28,/* significant bits in each available channel */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:19,Availability,avail,available,19,/* total amount of available input data */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:281,Deployability,release,released,281,"/* pngtest.c - a simple test program to test libpng; *; * Copyright (c) 2018-2019 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This program reads in a PNG image, writes it out again, and then; * compares the two files. If the files are identical, this shows that; * the basic chunk handling, filtering, and (de)compression code is working; * properly. It does not currently test all of the transforms, although; * it probably should.; *; * The program will report ""FAIL"" in certain legitimate cases:; * 1) when the compression level or filter selection method is changed.; * 2) when the maximum IDAT size (PNG_ZBUF_SIZE in pngconf.h) is not 8192.; * 3) unknown unsafe-to-copy ancillary chunks or unknown critical chunks; * exist in the input file.; * 4) others not listed here...; * In these cases, it is best to check with another tool such as ""pngcheck""; * to see what the differences between the two files are.; *; * If a filename is given on the command-line, then this file is used; * for the input, rather than the default ""pngtest.png"". This allows; * testing a wide variety of files easily. You can also test a number; * of files at once by typing ""pngtest -m file1.png file2.png ...""; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:942,Safety,unsafe,unsafe-to-copy,942,"/* pngtest.c - a simple test program to test libpng; *; * Copyright (c) 2018-2019 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This program reads in a PNG image, writes it out again, and then; * compares the two files. If the files are identical, this shows that; * the basic chunk handling, filtering, and (de)compression code is working; * properly. It does not currently test all of the transforms, although; * it probably should.; *; * The program will report ""FAIL"" in certain legitimate cases:; * 1) when the compression level or filter selection method is changed.; * 2) when the maximum IDAT size (PNG_ZBUF_SIZE in pngconf.h) is not 8192.; * 3) unknown unsafe-to-copy ancillary chunks or unknown critical chunks; * exist in the input file.; * 4) others not listed here...; * In these cases, it is best to check with another tool such as ""pngcheck""; * to see what the differences between the two files are.; *; * If a filename is given on the command-line, then this file is used; * for the input, rather than the default ""pngtest.png"". This allows; * testing a wide variety of files easily. You can also test a number; * of files at once by typing ""pngtest -m file1.png file2.png ...""; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:24,Testability,test,test,24,"/* pngtest.c - a simple test program to test libpng; *; * Copyright (c) 2018-2019 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This program reads in a PNG image, writes it out again, and then; * compares the two files. If the files are identical, this shows that; * the basic chunk handling, filtering, and (de)compression code is working; * properly. It does not currently test all of the transforms, although; * it probably should.; *; * The program will report ""FAIL"" in certain legitimate cases:; * 1) when the compression level or filter selection method is changed.; * 2) when the maximum IDAT size (PNG_ZBUF_SIZE in pngconf.h) is not 8192.; * 3) unknown unsafe-to-copy ancillary chunks or unknown critical chunks; * exist in the input file.; * 4) others not listed here...; * In these cases, it is best to check with another tool such as ""pngcheck""; * to see what the differences between the two files are.; *; * If a filename is given on the command-line, then this file is used; * for the input, rather than the default ""pngtest.png"". This allows; * testing a wide variety of files easily. You can also test a number; * of files at once by typing ""pngtest -m file1.png file2.png ...""; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:40,Testability,test,test,40,"/* pngtest.c - a simple test program to test libpng; *; * Copyright (c) 2018-2019 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This program reads in a PNG image, writes it out again, and then; * compares the two files. If the files are identical, this shows that; * the basic chunk handling, filtering, and (de)compression code is working; * properly. It does not currently test all of the transforms, although; * it probably should.; *; * The program will report ""FAIL"" in certain legitimate cases:; * 1) when the compression level or filter selection method is changed.; * 2) when the maximum IDAT size (PNG_ZBUF_SIZE in pngconf.h) is not 8192.; * 3) unknown unsafe-to-copy ancillary chunks or unknown critical chunks; * exist in the input file.; * 4) others not listed here...; * In these cases, it is best to check with another tool such as ""pngcheck""; * to see what the differences between the two files are.; *; * If a filename is given on the command-line, then this file is used; * for the input, rather than the default ""pngtest.png"". This allows; * testing a wide variety of files easily. You can also test a number; * of files at once by typing ""pngtest -m file1.png file2.png ...""; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:655,Testability,test,test,655,"/* pngtest.c - a simple test program to test libpng; *; * Copyright (c) 2018-2019 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This program reads in a PNG image, writes it out again, and then; * compares the two files. If the files are identical, this shows that; * the basic chunk handling, filtering, and (de)compression code is working; * properly. It does not currently test all of the transforms, although; * it probably should.; *; * The program will report ""FAIL"" in certain legitimate cases:; * 1) when the compression level or filter selection method is changed.; * 2) when the maximum IDAT size (PNG_ZBUF_SIZE in pngconf.h) is not 8192.; * 3) unknown unsafe-to-copy ancillary chunks or unknown critical chunks; * exist in the input file.; * 4) others not listed here...; * In these cases, it is best to check with another tool such as ""pngcheck""; * to see what the differences between the two files are.; *; * If a filename is given on the command-line, then this file is used; * for the input, rather than the default ""pngtest.png"". This allows; * testing a wide variety of files easily. You can also test a number; * of files at once by typing ""pngtest -m file1.png file2.png ...""; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:1340,Testability,test,testing,1340,"/* pngtest.c - a simple test program to test libpng; *; * Copyright (c) 2018-2019 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This program reads in a PNG image, writes it out again, and then; * compares the two files. If the files are identical, this shows that; * the basic chunk handling, filtering, and (de)compression code is working; * properly. It does not currently test all of the transforms, although; * it probably should.; *; * The program will report ""FAIL"" in certain legitimate cases:; * 1) when the compression level or filter selection method is changed.; * 2) when the maximum IDAT size (PNG_ZBUF_SIZE in pngconf.h) is not 8192.; * 3) unknown unsafe-to-copy ancillary chunks or unknown critical chunks; * exist in the input file.; * 4) others not listed here...; * In these cases, it is best to check with another tool such as ""pngcheck""; * to see what the differences between the two files are.; *; * If a filename is given on the command-line, then this file is used; * for the input, rather than the default ""pngtest.png"". This allows; * testing a wide variety of files easily. You can also test a number; * of files at once by typing ""pngtest -m file1.png file2.png ...""; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:1393,Testability,test,test,1393,"/* pngtest.c - a simple test program to test libpng; *; * Copyright (c) 2018-2019 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This program reads in a PNG image, writes it out again, and then; * compares the two files. If the files are identical, this shows that; * the basic chunk handling, filtering, and (de)compression code is working; * properly. It does not currently test all of the transforms, although; * it probably should.; *; * The program will report ""FAIL"" in certain legitimate cases:; * 1) when the compression level or filter selection method is changed.; * 2) when the maximum IDAT size (PNG_ZBUF_SIZE in pngconf.h) is not 8192.; * 3) unknown unsafe-to-copy ancillary chunks or unknown critical chunks; * exist in the input file.; * 4) others not listed here...; * In these cases, it is best to check with another tool such as ""pngcheck""; * to see what the differences between the two files are.; *; * If a filename is given on the command-line, then this file is used; * for the input, rather than the default ""pngtest.png"". This allows; * testing a wide variety of files easily. You can also test a number; * of files at once by typing ""pngtest -m file1.png file2.png ...""; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:17,Usability,simpl,simple,17,"/* pngtest.c - a simple test program to test libpng; *; * Copyright (c) 2018-2019 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This program reads in a PNG image, writes it out again, and then; * compares the two files. If the files are identical, this shows that; * the basic chunk handling, filtering, and (de)compression code is working; * properly. It does not currently test all of the transforms, although; * it probably should.; *; * The program will report ""FAIL"" in certain legitimate cases:; * 1) when the compression level or filter selection method is changed.; * 2) when the maximum IDAT size (PNG_ZBUF_SIZE in pngconf.h) is not 8192.; * 3) unknown unsafe-to-copy ancillary chunks or unknown critical chunks; * exist in the input file.; * 4) others not listed here...; * In these cases, it is best to check with another tool such as ""pngcheck""; * to see what the differences between the two files are.; *; * If a filename is given on the command-line, then this file is used; * for the input, rather than the default ""pngtest.png"". This allows; * testing a wide variety of files easily. You can also test a number; * of files at once by typing ""pngtest -m file1.png file2.png ...""; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:163,Energy Efficiency,allocate,allocates,163,"/* Known chunks that exist in pngtest.png must be supported or pngtest will fail; * simply as a result of re-ordering them. This may be fixed in 1.7; *; * pngtest allocates a single row buffer for each row and overwrites it,; * therefore if the write side doesn't support the writing of interlaced images; * nothing can be done for an interlaced image (and the code below will fail; * horribly trying to write extra data after writing garbage).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:84,Usability,simpl,simply,84,"/* Known chunks that exist in pngtest.png must be supported or pngtest will fail; * simply as a result of re-ordering them. This may be fixed in 1.7; *; * pngtest allocates a single row buffer for each row and overwrites it,; * therefore if the write side doesn't support the writing of interlaced images; * nothing can be done for an interlaced image (and the code below will fail; * horribly trying to write extra data after writing garbage).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:42,Availability,error,error,42,/* Copied from pngpriv.h but only used in error messages below. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:48,Integrability,message,messages,48,/* Copied from pngpriv.h but only used in error messages below. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:26,Availability,error,errors,26,"/* Utility to save typing/errors, the argument must be a name */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:60,Energy Efficiency,meter,meter,60,/* Example of using row callbacks to make a simple progress meter */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:44,Usability,simpl,simple,44,/* Example of using row callbacks to make a simple progress meter */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:20,Security,validat,validate,20,"/* START of code to validate stdio-free compilation */; /* These copies of the default read/write functions come from pngrio.c and; * pngwio.c. They allow ""don't include stdio"" testing of the library.; * This is the function that does the actual reading of data. If you are; * not reading from a standard C stream, you should create a replacement; * read_data function and use it at run time with png_set_read_fn(), rather; * than changing the library.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:177,Testability,test,testing,177,"/* START of code to validate stdio-free compilation */; /* These copies of the default read/write functions come from pngrio.c and; * pngwio.c. They allow ""don't include stdio"" testing of the library.; * This is the function that does the actual reading of data. If you are; * not reading from a standard C stream, you should create a replacement; * read_data function and use it at run time with png_set_read_fn(), rather; * than changing the library.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:24,Availability,error,error,24,"/* fread() returns 0 on error, so it is OK to store this in a size_t; * instead of an int, which is what fread() actually returns.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:54,Energy Efficiency,energy,energy,54,/* Do nothing; fflush() is said to be just a waste of energy. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:209,Deployability,configurat,configuration,209,"/* !STDIO */; /* This function is called when there is a warning, but the library thinks; * it can continue anyway. Replacement functions don't have to do anything; * here if you don't want to. In the default configuration, png_ptr is; * not used, but it is passed in case it may be useful.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:209,Modifiability,config,configuration,209,"/* !STDIO */; /* This function is called when there is a warning, but the library thinks; * it can continue anyway. Replacement functions don't have to do anything; * here if you don't want to. In the default configuration, png_ptr is; * not used, but it is passed in case it may be useful.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:23,Availability,error,error,23,"/* This is the default error handling function. Note that replacements for; * this function MUST NOT RETURN, or the program will likely crash. This; * function is used by default, or if the program supplies NULL for the; * error function pointer in png_set_error_fn().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:223,Availability,error,error,223,"/* This is the default error handling function. Note that replacements for; * this function MUST NOT RETURN, or the program will likely crash. This; * function is used by default, or if the program supplies NULL for the; * error function pointer in png_set_error_fn().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:18,Security,validat,validate,18,/* END of code to validate stdio-free compilation */; /* START of code to validate memory allocation and deallocation */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:74,Security,validat,validate,74,/* END of code to validate stdio-free compilation */; /* START of code to validate memory allocation and deallocation */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:3,Energy Efficiency,Allocate,Allocate,3,"/* Allocate memory. For reasonable files, size should never exceed; * 64K. However, zlib may allocate more than 64K if you don't tell; * it not to. See zconf.h and png.h for more information. zlib does; * need to allocate exactly 64K, so whatever you call here must; * have the ability to do that.; *; * This piece of code can be compiled to validate max 64K allocations; * by setting MAXSEG_64K in zlib zconf.h *or* PNG_MAX_MALLOC_64K.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:93,Energy Efficiency,allocate,allocate,93,"/* Allocate memory. For reasonable files, size should never exceed; * 64K. However, zlib may allocate more than 64K if you don't tell; * it not to. See zconf.h and png.h for more information. zlib does; * need to allocate exactly 64K, so whatever you call here must; * have the ability to do that.; *; * This piece of code can be compiled to validate max 64K allocations; * by setting MAXSEG_64K in zlib zconf.h *or* PNG_MAX_MALLOC_64K.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:213,Energy Efficiency,allocate,allocate,213,"/* Allocate memory. For reasonable files, size should never exceed; * 64K. However, zlib may allocate more than 64K if you don't tell; * it not to. See zconf.h and png.h for more information. zlib does; * need to allocate exactly 64K, so whatever you call here must; * have the ability to do that.; *; * This piece of code can be compiled to validate max 64K allocations; * by setting MAXSEG_64K in zlib zconf.h *or* PNG_MAX_MALLOC_64K.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:342,Security,validat,validate,342,"/* Allocate memory. For reasonable files, size should never exceed; * 64K. However, zlib may allocate more than 64K if you don't tell; * it not to. See zconf.h and png.h for more information. zlib does; * need to allocate exactly 64K, so whatever you call here must; * have the ability to do that.; *; * This piece of code can be compiled to validate max 64K allocations; * by setting MAXSEG_64K in zlib zconf.h *or* PNG_MAX_MALLOC_64K.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:26,Testability,test,tested,26,"/* png_malloc has already tested for NULL; png_create_struct calls; * png_debug_malloc directly, with png_ptr == NULL which is OK; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:43,Testability,test,test,43,/* USER_MEM && DEBUG */; /* END of code to test memory allocation/deallocation */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:61,Availability,error,error,61,/* Return one of the following:; * return (-n); chunk had an error; * return (0); did not recognize; * return (n); success; *; * The unknown chunk structure contains the chunk data:; * png_byte name[5];; * png_byte *data;; * size_t size;; *; * Note that libpng has already taken care of the CRC handling.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:3,Availability,Error,Error,3,/* Error return */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:3,Availability,Error,Error,3,/* Error return */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:248,Availability,error,error,248,"/* Notice that this preserves the original chunk order, however chunks; * intercepted by the callback will be written *after* chunks passed to; * libpng. This will actually reverse a pair of sTER chunks or a pair of; * vpAg chunks, resulting in an error later. This is not worth worrying; * about - the chunks should not be duplicated!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:217,Usability,simpl,simply,217,/* END of code to demonstrate user chunk support */; /* START of code to check that libpng has the required text support; this only; * checks for the write support because if read support is missing the chunk; * will simply not be reported back to pngtest.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:38,Availability,error,error,38,"/* In libpng 1.7 this now does an app-error, so stop it: */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:14,Availability,error,error,14,/* This is an error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:73,Testability,Test,Test,73,/* END of code to check that libpng has the required text support */; /* Test one file */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:31,Availability,error,errors,31,/* Treat png_benign_error() as errors on read */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:17,Availability,error,errors,17,/* Treat them as errors on write */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:47,Availability,error,errors,47,"/* if strict is not set, then app warnings and errors are treated as; * warnings in release builds, but not in unstable builds; this can be; * changed with '--relaxed'.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:84,Deployability,release,release,84,"/* if strict is not set, then app warnings and errors are treated as; * warnings in release builds, but not in unstable builds; this can be; * changed with '--relaxed'.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:31,Availability,error,errors,31,/* Allow application (pngtest) errors and warnings to pass */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:25,Availability,avail,available,25,/* num_passes may not be available below if interlace support is not; * provided by libpng for both read and write.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:51,Availability,avail,available,51,"/* Test the 'compatibility' setting here, if it is available. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:3,Testability,Test,Test,3,"/* Test the 'compatibility' setting here, if it is available. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:109,Usability,simpl,simply,109,"/* Both must be defined for libpng to be able to handle the interlace,; * otherwise it gets handled below by simply reading and writing the passes; * directly.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:173,Testability,test,test,173,"/* Normally one would use Z_DEFAULT_STRATEGY for text compression.; * This is here just to make pngtest replicate the results from libpng; * versions prior to 1.5.4, and to test this new API.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:29,Availability,error,errors,29,"/* Summarize any warnings or errors and in 'strict' mode fail the test.; * Unsupported chunks can result in warnings, in that case ignore the strict; * setting, otherwise fail the test on warnings as well as errors.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:208,Availability,error,errors,208,"/* Summarize any warnings or errors and in 'strict' mode fail the test.; * Unsupported chunks can result in warnings, in that case ignore the strict; * setting, otherwise fail the test on warnings as well as errors.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:66,Testability,test,test,66,"/* Summarize any warnings or errors and in 'strict' mode fail the test.; * Unsupported chunks can result in warnings, in that case ignore the strict; * setting, otherwise fail the test on warnings as well as errors.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:180,Testability,test,test,180,"/* Summarize any warnings or errors and in 'strict' mode fail the test.; * Unsupported chunks can result in warnings, in that case ignore the strict; * setting, otherwise fail the test on warnings as well as errors.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:91,Safety,safe,safe,91,"/* We don't really expect to get here because of the setjmp handling; * above, but this is safe.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:178,Testability,test,test,178,"/* NOTE: the unsupported_chunks escape is permitted here because; * unsupported text chunk compression will result in the compression; * mode being changed (to NONE) yet, in the test case, the result; * can be exactly the same size!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:143,Testability,test,tests,143,"/* Do some consistency checking on the memory allocation settings, I'm; * not sure this matters, but it is nice to know, the first of these; * tests should be impossible because of the way the macros are set; * in pngconf.h; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:17,Testability,test,test,17,/* And skip this test */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:23,Availability,error,error,23,/* Generate a compiler error if there is an old png.h in the search path. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c:304,Deployability,release,released,304,"/* pngtrans.c - transforms the data in a row (used by both readers and writers); *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c:184,Safety,avoid,avoid,184,"/* Add a filler byte on read, or remove a filler or alpha byte on write.; * The filler type has changed in v0.95 to allow future 2-byte fillers; * for 48-bit input data, as well as to avoid problems with some compilers; * that don't like bytes as parameters.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c:9,Usability,simpl,simply,9,/* There simply isn't any code in libpng to strip out bits; * from bytes when the components are less than a byte in; * size!; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c:8,Testability,test,test,8,/* This test removed from libpng version 1.0.13 and 1.2.0:; * if (row_info->bit_depth == 1 &&; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c:38,Testability,test,testing,38,"/* Feature added to libpng-1.6.11 for testing purposes, not; * enabled by default.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c:261,Integrability,rout,routine,261,/* Remove a channel - this used to be 'png_do_strip_filler' but it used a; * somewhat weird combination of flags to determine what to do. All the calls; * to png_do_strip_filler are changed in 1.5.2 to call this instead with the; * correct arguments.; *; * The routine isn't general - the channel must be the channel at the start or; * end (not in the middle) of each pixel.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c:185,Usability,simpl,simply,185,"/* One beyond end of row */; /* At the start sp will point to the first byte to copy and dp to where; * it is copied to. ep always points just beyond the end of the row, so; * the loop simply copies (channels-1) channels until sp reaches ep.; *; * at_start: 0 -- convert AG, XG, ARGB, XRGB, AAGG, XXGG, etc.; * nonzero -- convert GA, GX, RGBA, RGBX, GGAA, RRGGBBXX, etc.; */; /* GA, GX, XG cases */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c:259,Safety,avoid,avoids,259,"/* Calculations moved outside switch in an attempt to stop different; * compiler warnings. 'padding' is in *bits* within the last byte, it is; * an 'int' because pixel_depth becomes an 'int' in the expression below,; * and this calculation is used because it avoids warnings that other; * forms produced on either GCC or MSVC.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngtrans.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c:274,Deployability,release,released,274,"/* pngwio.c - functions for data output; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2014,2016,2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This file provides a location for all output. Users who need; * special handling are expected to write functions that have the same; * arguments as these and perform similar functions, but that possibly; * use different output methods. Note that you shouldn't change these; * functions, but rather write replacement functions and then change; * them at run time with png_set_write_fn(...).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c:559,Performance,perform,perform,559,"/* pngwio.c - functions for data output; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2014,2016,2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This file provides a location for all output. Users who need; * special handling are expected to write functions that have the same; * arguments as these and perform similar functions, but that possibly; * use different output methods. Note that you shouldn't change these; * functions, but rather write replacement functions and then change; * them at run time with png_set_write_fn(...).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c:64,Integrability,rout,routine,64,"/* Write the data to whatever output you are using. The default routine; * writes to a file pointer. Note that this routine sometimes gets called; * with very small lengths, so you should implement some kind of simple; * buffering if you are using unbuffered writes. This should never be asked; * to write more than 64K on a 16-bit machine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c:116,Integrability,rout,routine,116,"/* Write the data to whatever output you are using. The default routine; * writes to a file pointer. Note that this routine sometimes gets called; * with very small lengths, so you should implement some kind of simple; * buffering if you are using unbuffered writes. This should never be asked; * to write more than 64K on a 16-bit machine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c:211,Usability,simpl,simple,211,"/* Write the data to whatever output you are using. The default routine; * writes to a file pointer. Note that this routine sometimes gets called; * with very small lengths, so you should implement some kind of simple; * buffering if you are using unbuffered writes. This should never be asked; * to write more than 64K on a 16-bit machine.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c:605,Availability,Error,Error,605,"/* This function allows the application to supply new output functions for; * libpng if standard C streams aren't being used.; *; * This function takes as its arguments:; * png_ptr - pointer to a png output data structure; * io_ptr - pointer to user supplied structure containing info about; * the output functions. May be NULL.; * write_data_fn - pointer to a new output function that takes as its; * arguments a pointer to a png_struct, a pointer to; * data to be written, and a 32-bit unsigned int that is; * the number of bytes to be written. The new write; * function should call png_error(png_ptr, ""Error msg""); * to exit and output any fatal error messages. May be; * NULL, in which case libpng's default function will; * be used.; * flush_data_fn - pointer to a new flush function that takes as its; * arguments a pointer to a png_struct. After a call to; * the flush function, there should be no data in any buffers; * or pending transmission. If the output method doesn't do; * any buffering of output, a function prototype must still be; * supplied although it doesn't have to do anything. If; * PNG_WRITE_FLUSH_SUPPORTED is not defined at libpng compile; * time, output_flush_fn will be ignored, although it must be; * supplied for compatibility. May be NULL, in which case; * libpng's default function will be used, if; * PNG_WRITE_FLUSH_SUPPORTED is defined. This is not; * a good idea if io_ptr does not point to a standard; * *FILE structure.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c:649,Availability,error,error,649,"/* This function allows the application to supply new output functions for; * libpng if standard C streams aren't being used.; *; * This function takes as its arguments:; * png_ptr - pointer to a png output data structure; * io_ptr - pointer to user supplied structure containing info about; * the output functions. May be NULL.; * write_data_fn - pointer to a new output function that takes as its; * arguments a pointer to a png_struct, a pointer to; * data to be written, and a 32-bit unsigned int that is; * the number of bytes to be written. The new write; * function should call png_error(png_ptr, ""Error msg""); * to exit and output any fatal error messages. May be; * NULL, in which case libpng's default function will; * be used.; * flush_data_fn - pointer to a new flush function that takes as its; * arguments a pointer to a png_struct. After a call to; * the flush function, there should be no data in any buffers; * or pending transmission. If the output method doesn't do; * any buffering of output, a function prototype must still be; * supplied although it doesn't have to do anything. If; * PNG_WRITE_FLUSH_SUPPORTED is not defined at libpng compile; * time, output_flush_fn will be ignored, although it must be; * supplied for compatibility. May be NULL, in which case; * libpng's default function will be used, if; * PNG_WRITE_FLUSH_SUPPORTED is defined. This is not; * a good idea if io_ptr does not point to a standard; * *FILE structure.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c:655,Integrability,message,messages,655,"/* This function allows the application to supply new output functions for; * libpng if standard C streams aren't being used.; *; * This function takes as its arguments:; * png_ptr - pointer to a png output data structure; * io_ptr - pointer to user supplied structure containing info about; * the output functions. May be NULL.; * write_data_fn - pointer to a new output function that takes as its; * arguments a pointer to a png_struct, a pointer to; * data to be written, and a 32-bit unsigned int that is; * the number of bytes to be written. The new write; * function should call png_error(png_ptr, ""Error msg""); * to exit and output any fatal error messages. May be; * NULL, in which case libpng's default function will; * be used.; * flush_data_fn - pointer to a new flush function that takes as its; * arguments a pointer to a png_struct. After a call to; * the flush function, there should be no data in any buffers; * or pending transmission. If the output method doesn't do; * any buffering of output, a function prototype must still be; * supplied although it doesn't have to do anything. If; * PNG_WRITE_FLUSH_SUPPORTED is not defined at libpng compile; * time, output_flush_fn will be ignored, although it must be; * supplied for compatibility. May be NULL, in which case; * libpng's default function will be used, if; * PNG_WRITE_FLUSH_SUPPORTED is defined. This is not; * a good idea if io_ptr does not point to a standard; * *FILE structure.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c:12,Availability,error,error,12,/* It is an error to read while writing a png file */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:282,Deployability,release,released,282,"/* pngwrite.c - general routines to write a PNG file; *; * Copyright (c) 2018-2023 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:24,Integrability,rout,routines,24,"/* pngwrite.c - general routines to write a PNG file; *; * Copyright (c) 2018-2023 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:460,Safety,unsafe,unsafe-to-copy,460,"/* NOTE: this code is radically different from the read side in the; * matter of handling an ancillary unknown chunk. In the read side; * the default behavior is to discard it, in the code below the default; * behavior is to write it. Critical chunks are, however, only; * written if explicitly listed or if the default is set to write all; * unknown chunks.; *; * The default handling is also slightly weird - it is not possible to; * stop the writing of all unsafe-to-copy chunks!; *; * TODO: REVIEW: this would seem to be a bug.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:3,Safety,safe,safe-to-copy,3,/* safe-to-copy overrides everything */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:282,Availability,avail,available,282,"/* The rest of these check to see if the valid field has the appropriate; * flag set, and if it does, writes the chunk.; *; * 1.6.0: COLORSPACE support controls the writing of these chunks too, and; * the chunks will be written if the WRITE routine is there and; * information * is available in the COLORSPACE. (See; * png_colorspace_sync_info in png.c for where the valid flags get set.); *; * Under certain circumstances the colorspace can be invalidated without; * syncing the info_struct 'valid' flags; this happens if libpng detects; * an error and calls png_error while the color space is being set, yet; * the application continues writing the PNG. So check the 'invalid'; * flag here too.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:544,Availability,error,error,544,"/* The rest of these check to see if the valid field has the appropriate; * flag set, and if it does, writes the chunk.; *; * 1.6.0: COLORSPACE support controls the writing of these chunks too, and; * the chunks will be written if the WRITE routine is there and; * information * is available in the COLORSPACE. (See; * png_colorspace_sync_info in png.c for where the valid flags get set.); *; * Under certain circumstances the colorspace can be invalidated without; * syncing the info_struct 'valid' flags; this happens if libpng detects; * an error and calls png_error while the color space is being set, yet; * the application continues writing the PNG. So check the 'invalid'; * flag here too.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:241,Integrability,rout,routine,241,"/* The rest of these check to see if the valid field has the appropriate; * flag set, and if it does, writes the chunk.; *; * 1.6.0: COLORSPACE support controls the writing of these chunks too, and; * the chunks will be written if the WRITE routine is there and; * information * is available in the COLORSPACE. (See; * png_colorspace_sync_info in png.c for where the valid flags get set.); *; * Under certain circumstances the colorspace can be invalidated without; * syncing the info_struct 'valid' flags; this happens if libpng detects; * an error and calls png_error while the color space is being set, yet; * the application continues writing the PNG. So check the 'invalid'; * flag here too.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:530,Safety,detect,detects,530,"/* The rest of these check to see if the valid field has the appropriate; * flag set, and if it does, writes the chunk.; *; * 1.6.0: COLORSPACE support controls the writing of these chunks too, and; * the chunks will be written if the WRITE routine is there and; * information * is available in the COLORSPACE. (See; * png_colorspace_sync_info in png.c for where the valid flags get set.); *; * Under certain circumstances the colorspace can be invalidated without; * syncing the info_struct 'valid' flags; this happens if libpng detects; * an error and calls png_error while the color space is being set, yet; * the application continues writing the PNG. So check the 'invalid'; * flag here too.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:15,Modifiability,variab,variable,15,/* local index variable */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:15,Safety,safe,safe,15,/* TODO: add a safe function which takes a png_ptr argument and raises; * a png_error if the ttime argument is invalid and the call to gmtime; * fails as a consequence.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:37,Energy Efficiency,allocate,allocate,37,"/* Initialize png_ptr structure, and allocate any memory needed */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:47,Energy Efficiency,allocate,allocate,47,"/* Alternate initialize png_ptr structure, and allocate any memory needed */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:57,Deployability,configurat,configuration,57,"/* WRITE_COMPRESSED_TEXT */; /* This is a highly dubious configuration option; by default it is off,; * but it may be appropriate for private builds that are testing; * extensions not conformant to the current specification, or of; * applications that must not fail to write at all costs!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:57,Modifiability,config,configuration,57,"/* WRITE_COMPRESSED_TEXT */; /* This is a highly dubious configuration option; by default it is off,; * but it may be appropriate for private builds that are testing; * extensions not conformant to the current specification, or of; * applications that must not fail to write at all costs!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:158,Testability,test,testing,158,"/* WRITE_COMPRESSED_TEXT */; /* This is a highly dubious configuration option; by default it is off,; * but it may be appropriate for private builds that are testing; * extensions not conformant to the current specification, or of; * applications that must not fail to write at all costs!; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:48,Availability,error,error,48,/* In stable builds only warn if an application error can be completely; * handled.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:81,Availability,error,errors,81,/* App warnings are warnings in release (or release candidate) builds but; * are errors during development.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:32,Deployability,release,release,32,/* App warnings are warnings in release (or release candidate) builds but; * are errors during development.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:44,Deployability,release,release,44,/* App warnings are warnings in release (or release candidate) builds but; * are errors during development.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:90,Safety,avoid,avoiding,90,"/* TODO: delay this, it can be done in png_init_io() (if the app doesn't; * do it itself) avoiding setting the default function if it is not; * required.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:8,Modifiability,variab,variables,8,/* pass variables */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:3,Performance,Perform,Performs,3,/* Performs intrapixel differencing */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:3,Availability,error,error,3,/* error: ignore it */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:322,Availability,mask,mask,322,/* Write filter_method 64 (intrapixel differencing) only if; * 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and; * 2. Libpng did not write a PNG signature (this filter_method is only; * used in PNG datastreams that are embedded in MNG datastreams) and; * 3. The application called png_permit_mng_features with a mask that; * included PNG_FLAG_MNG_FILTER_64 and; * 4. The filter_method is 64 and; * 5. The color_type is RGB or RGBA; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:7,Availability,error,error,7,/* The error handling and memory handling information is left intact at this; * point: the jmp_buf may still have to be freed. See png_destroy_png_struct; * for how this happens.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:14,Energy Efficiency,allocate,allocated,14,"/* If we have allocated the row_buf, this means we have already started; * with the image and we should have allocated all of the filter buffers; * that have been selected. If prev_row isn't already allocated, then; * it is too late to start using the filters that need it, since we; * will be missing the data in the previous row. If an application; * wants to start and stop using particular filters during compression,; * it should start out with all of the filters, and then remove them; * or add them back after the start of compression.; *; * NOTE: this is a nasty constraint on the code, because it means that the; * prev_row buffer must be maintained even if there are currently no; * 'prev_row' requiring filters active.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:109,Energy Efficiency,allocate,allocated,109,"/* If we have allocated the row_buf, this means we have already started; * with the image and we should have allocated all of the filter buffers; * that have been selected. If prev_row isn't already allocated, then; * it is too late to start using the filters that need it, since we; * will be missing the data in the previous row. If an application; * wants to start and stop using particular filters during compression,; * it should start out with all of the filters, and then remove them; * or add them back after the start of compression.; *; * NOTE: this is a nasty constraint on the code, because it means that the; * prev_row buffer must be maintained even if there are currently no; * 'prev_row' requiring filters active.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:199,Energy Efficiency,allocate,allocated,199,"/* If we have allocated the row_buf, this means we have already started; * with the image and we should have allocated all of the filter buffers; * that have been selected. If prev_row isn't already allocated, then; * it is too late to start using the filters that need it, since we; * will be missing the data in the previous row. If an application; * wants to start and stop using particular filters during compression,; * it should start out with all of the filters, and then remove them; * or add them back after the start of compression.; *; * NOTE: this is a nasty constraint on the code, because it means that the; * prev_row buffer must be maintained even if there are currently no; * 'prev_row' requiring filters active.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:15,Availability,error,error,15,"/* This is the error case, however it is benign - the previous row; * is not available so the filter can't be used. Just warn here.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:77,Availability,avail,available,77,"/* This is the error case, however it is benign - the previous row; * is not available so the filter can't be used. Just warn here.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate needed row buffers if they have not already been; * allocated.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:64,Energy Efficiency,allocate,allocated,64,/* Allocate needed row buffers if they have not already been; * allocated.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:117,Safety,safe,safely,117,"/* If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is defined, libpng will use a; * smaller value of window_bits if it can do so safely.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:91,Availability,fault,fault,91,"/* This would produce an invalid PNG file if it worked, but it doesn't and; * deflate will fault it, so it is harmless to just warn here.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:117,Safety,safe,safely,117,"/* If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is defined, libpng will use a; * smaller value of window_bits if it can do so safely.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:3,Availability,Error,Error,3,/* Error clean up */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:9,Modifiability,variab,variables,9,/* Local variables: */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:54,Usability,simpl,simply,54,/* Calculate a reciprocal. The correct calculation is simply; * component/alpha*65535 << 15. (I.e. 15 bits of precision); this; * allows correct rounding by adding .5 before the shift. 'reciprocal'; * is only initialized when required.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:464,Safety,avoid,avoid,464,"/* The following gives 1.0 for an alpha of 0, which is fine, otherwise if 0/0; * is represented as some other value there is more likely to be a; * discontinuity which will probably damage compression when moving from a; * fully transparent area to a nearly transparent one. (The assumption here; * is that opaque areas tend not to be 0 intensity.); *; * There is a rounding problem here; if alpha is less than 128 it will end up; * as 0 when scaled to 8 bits. To avoid introducing spurious colors into the; * output change for this too.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:7,Testability,test,test,7,"/* The test is that alpha/257 (rounded) is less than 255, the first value; * that becomes 255 is 65407.; * NOTE: this must agree with the PNG_DIV257 macro (which must, therefore,; * be exact!) [Could also test reciprocal != 0]; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:205,Testability,test,test,205,"/* The test is that alpha/257 (rounded) is less than 255, the first value; * that becomes 255 is 65407.; * NOTE: this must agree with the PNG_DIV257 macro (which must, therefore,; * be exact!) [Could also test reciprocal != 0]; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:16,Availability,error,error,16,/* Make sure we error out on any bad situation */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:2,Availability,error,error,2,/*error*/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:2,Safety,SAFE,SAFE,2,/*SAFE*/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:11,Usability,intuit,intuitively,11,"/* Counter-intuitively the data transformations must be called *after*; * png_write_info, not before as in the read code, but the 'set' functions; * must still be called before. Just set the color space information, never; * write an interlaced image.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:3,Energy Efficiency,green,green,3,/* green */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:247,Performance,load,loaded,247,"/* NOTE: determined by experiment using pngstest, this reflects some; * balance between the time to write the image once and the time to read; * it about 50 times. The speed-up in pngstest was about 10-20% of the; * total (user) time on a heavily loaded system.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:27,Availability,error,error,27,/* Skip the 'write_end' on error: */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:10,Deployability,update,update,10,/* Always update the size: */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:61,Availability,error,error,61,/* The rest of the memory-specific init and write_main in an error protected; * environment. This case needs to use callbacks for the write operations; * since libpng has no built in support for writing to memory.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:40,Availability,error,error,40,/* This is to give the caller an easier error detection in the NULL; * case and guard against uninitialized variable problems:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:108,Modifiability,variab,variable,108,/* This is to give the caller an easier error detection in the NULL; * case and guard against uninitialized variable problems:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:46,Safety,detect,detection,46,/* This is to give the caller an easier error detection in the NULL; * case and guard against uninitialized variable problems:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:56,Deployability,update,updates,56,/* On out-of-buffer this function returns '0' but still updates; * memory_bytes:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:150,Safety,safe,safe,150,"/* This is slightly evil, but png_init_io doesn't do anything other; * than this and we haven't changed the standard IO functions so; * this saves a 'safe' function.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:74,Availability,error,error,74,/* The image has already been cleaned up; this is just used to; * set the error (because the original write succeeded).; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwtran.c:290,Deployability,release,released,290,"/* pngwtran.c - transforms the data in a row for PNG writers; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2016,2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwtran.c:293,Integrability,rout,routine,293,"/* Shift pixel values to take advantage of whole range. Pass the; * true number of bits in bit_depth. The row should be packed; * according to row_info->bit_depth. Thus, if you had a row of; * bit depth 4, but the pixels only had values from 0 to 7, you; * would pass 3 as bit_depth, and this routine would translate the; * data to 0 to 15.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwtran.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwtran.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:275,Deployability,release,released,275,"/* pngwutil.c - utilities to write a PNG file; *; * Copyright (c) 2018-2022 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:129,Safety,avoid,avoid,129,"/* Place a 16-bit number into a buffer in PNG byte order.; * The parameter is declared unsigned int, not png_uint_16,; * just to avoid potential problems on pre-ANSI C compilers.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:3,Usability,Simpl,Simple,3,"/* Simple function to write the signature. If we have already written; * the magic bytes of the signature, or more likely, the PNG stream is; * being embedded into another stream and doesn't need its own signature,; * we should call png_set_sig_bytes() to tell libpng how many of the; * bytes have already been written.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:3,Deployability,Update,Update,3,"/* Update the CRC after writing the data,; * in case the user I/O routine alters it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:66,Integrability,rout,routine,66,"/* Update the CRC after writing the data,; * in case the user I/O routine alters it.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:203,Safety,safe,safe,203,"/* Write a PNG chunk all at once. The type is an array of ASCII characters; * representing the chunk name. The array must be at least 4 bytes in; * length, and does not need to be null terminated. To be safe, pass the; * pre-defined chunk names here, and if you need a new one, define it; * where the others are defined. The length is the length of the data.; * All the data must be present. If that is not possible, use the; * png_write_chunk_start(), png_write_chunk_data(), and png_write_chunk_end(); * functions instead.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:3,Performance,Optimiz,Optimize,3,/* Optimize the CMF field in the zlib stream. The resultant zlib stream is; * still compliant to the stream specification.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:82,Availability,error,error,82,"/* So the message that results is ""<chunk> using zstream""; this is an; * internal error, but is very useful for debugging. i18n requirements; * are minimal.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:10,Integrability,message,message,10,"/* So the message that results is ""<chunk> using zstream""; this is an; * internal error, but is very useful for debugging. i18n requirements; * are minimal.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:16,Availability,error,error,16,/* Attempt sane error recovery */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:22,Availability,recover,recovery,22,/* Attempt sane error recovery */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:22,Safety,recover,recovery,22,/* Attempt sane error recovery */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:23,Availability,down,down,23,"/* Adjust 'windowBits' down if larger than 'data_size'; to stop this; * happening just pass 32768 as the data_size parameter. Notice that zlib; * requires an extra 262 bytes in the window in addition to the data to be; * able to see the whole of the data, so if data_size+262 takes us to the; * next windowBits size we need to fix up the value later. (Because even; * though deflate needs the extra window, inflate does not!); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:246,Testability,test,test,246,"/* IMPLEMENTATION NOTE: this 'half_window_size' stuff is only here to; * work round a Microsoft Visual C misbehavior which, contrary to C-90,; * widens the result of the following shift to 64-bits if (and,; * apparently, only if) it is used in a test.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:7,Safety,safe,safety,7,"/* For safety clear out the input and output pointers (currently zlib; * doesn't use them on Init, but it might in the future).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:14,Usability,clear,clear,14,"/* For safety clear out the input and output pointers (currently zlib; * doesn't use them on Init, but it might in the future).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:82,Usability,simpl,simple,82,"/* Now initialize if required, setting the new parameters, otherwise just; * do a simple reset to the previous parameters.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:105,Availability,error,error,105,/* The return code is from either deflateReset or deflateInit2; they have; * pretty much the same set of error codes.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:497,Availability,error,error,497,"/* This pair of functions encapsulates the operation of (a) compressing a; * text string, and (b) issuing it later as a series of chunk data writes.; * The compression_state structure is shared context for these functions; * set up by the caller to allow access to the relevant local variables.; *; * compression_buffer (new in 1.6.0) is just a linked list of zbuffer_size; * temporary buffers. From 1.6.0 it is retained in png_struct so that it will; * be correctly freed in the event of a write error (previous implementations; * just leaked memory.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:284,Modifiability,variab,variables,284,"/* This pair of functions encapsulates the operation of (a) compressing a; * text string, and (b) issuing it later as a series of chunk data writes.; * The compression_state structure is shared context for these functions; * set up by the caller to allow access to the relevant local variables.; *; * compression_buffer (new in 1.6.0) is just a linked list of zbuffer_size; * temporary buffers. From 1.6.0 it is retained in png_struct so that it will; * be correctly freed in the event of a write error (previous implementations; * just leaked memory.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:255,Security,access,access,255,"/* This pair of functions encapsulates the operation of (a) compressing a; * text string, and (b) issuing it later as a series of chunk data writes.; * The compression_state structure is shared context for these functions; * set up by the caller to allow access to the relevant local variables.; *; * compression_buffer (new in 1.6.0) is just a linked list of zbuffer_size; * temporary buffers. From 1.6.0 it is retained in png_struct so that it will; * be correctly freed in the event of a write error (previous implementations; * just leaked memory.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:268,Availability,avail,available,268,"/* To find the length of the output it is necessary to first compress the; * input. The result is buffered rather than using the two-pass algorithm; * that is used on the inflate side; deflate is assumed to be slower and a; * PNG writer is assumed to have more memory available than a PNG reader.; *; * IMPLEMENTATION NOTE: the zlib API deflateBound() can be used to find an; * upper limit on the output size, but it is always bigger than the input; * size so it is likely to be more efficient to use this linked-list; * approach.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:484,Energy Efficiency,efficient,efficient,484,"/* To find the length of the output it is necessary to first compress the; * input. The result is buffered rather than using the two-pass algorithm; * that is used on the inflate side; deflate is assumed to be slower and a; * PNG writer is assumed to have more memory available than a PNG reader.; *; * IMPLEMENTATION NOTE: the zlib API deflateBound() can be used to find an; * upper limit on the output size, but it is always bigger than the input; * size so it is likely to be more efficient to use this linked-list; * approach.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:58,Safety,avoid,avoid,58,"/* Set up the compression buffers, we need a loop here to avoid overflowing a; * uInt. Use ZLIB_IO_MAX to limit the input. The output is always limited; * by the output buffer size, so there is no need to check that. Since this; * is ANSI-C we know that an 'int', hence a uInt, is always at least 16 bits; * in size.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:8,Deployability,update,updates,8,/* zlib updates these for us: */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:3,Safety,safe,safety,3,/* safety */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:3,Safety,safe,safety,3,/* safety */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:55,Integrability,message,message,55,"/* Now double check the output length, put in a custom message if it is; * too long. Otherwise ensure the z_stream::msg pointer is set to; * something.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:93,Availability,error,error,93,"/* The only success case is Z_STREAM_END, input_len must be 0; if not this; * is an internal error.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:112,Availability,error,error,112,"/* But Z_OK is returned, not Z_STREAM_END; this allows the claim; * function above to return Z_STREAM_END on an error (though it never; * does in the current versions of zlib.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:23,Availability,error,error,23,/* This is an internal error; 'next' must have been NULL! */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:58,Deployability,update,update,58,"/* WRITE_COMPRESSED_TEXT */; /* Write the IHDR chunk, and update the png_struct with the necessary; * information. Note that the rest of this code depends upon this; * information being correct.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:147,Integrability,depend,depends,147,"/* WRITE_COMPRESSED_TEXT */; /* Write the IHDR chunk, and update the png_struct with the necessary; * information. Note that the rest of this code depends upon this; * information being correct.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:322,Availability,mask,mask,322,/* Write filter_method 64 (intrapixel differencing) only if; * 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and; * 2. Libpng did not write a PNG signature (this filter_method is only; * used in PNG datastreams that are embedded in MNG datastreams) and; * 3. The application called png_permit_mng_features with a mask that; * included PNG_FLAG_MNG_FILTER_64 and; * 4. The filter_method is 64 and; * 5. The color_type is RGB or RGBA; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:302,Availability,error,error,302,"/* This is similar to png_text_compress, above, except that it does not require; * all of the data at once and, instead of buffering the compressed result,; * writes it as IDAT chunks. Unlike png_text_compress it *can* png_error out; * because it calls the write interface. As a result it does its own error; * reporting and does not return an error code. In the event of error it will; * just call png_error. The input data length may exceed 32-bits. The 'flush'; * parameter is exactly the same as that to deflate, with the following; * meanings:; *; * Z_NO_FLUSH: normal incremental output of compressed data; * Z_SYNC_FLUSH: do a SYNC_FLUSH, used by png_write_flush; * Z_FINISH: this is the end of the input, do a Z_FINISH and clean up; *; * The routine manages the acquire and release of the png_ptr->zstream by; * checking and (at the end) clearing png_ptr->zowner; it does some sanity; * checks on the 'mode' flags while doing this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:344,Availability,error,error,344,"/* This is similar to png_text_compress, above, except that it does not require; * all of the data at once and, instead of buffering the compressed result,; * writes it as IDAT chunks. Unlike png_text_compress it *can* png_error out; * because it calls the write interface. As a result it does its own error; * reporting and does not return an error code. In the event of error it will; * just call png_error. The input data length may exceed 32-bits. The 'flush'; * parameter is exactly the same as that to deflate, with the following; * meanings:; *; * Z_NO_FLUSH: normal incremental output of compressed data; * Z_SYNC_FLUSH: do a SYNC_FLUSH, used by png_write_flush; * Z_FINISH: this is the end of the input, do a Z_FINISH and clean up; *; * The routine manages the acquire and release of the png_ptr->zstream by; * checking and (at the end) clearing png_ptr->zowner; it does some sanity; * checks on the 'mode' flags while doing this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:372,Availability,error,error,372,"/* This is similar to png_text_compress, above, except that it does not require; * all of the data at once and, instead of buffering the compressed result,; * writes it as IDAT chunks. Unlike png_text_compress it *can* png_error out; * because it calls the write interface. As a result it does its own error; * reporting and does not return an error code. In the event of error it will; * just call png_error. The input data length may exceed 32-bits. The 'flush'; * parameter is exactly the same as that to deflate, with the following; * meanings:; *; * Z_NO_FLUSH: normal incremental output of compressed data; * Z_SYNC_FLUSH: do a SYNC_FLUSH, used by png_write_flush; * Z_FINISH: this is the end of the input, do a Z_FINISH and clean up; *; * The routine manages the acquire and release of the png_ptr->zstream by; * checking and (at the end) clearing png_ptr->zowner; it does some sanity; * checks on the 'mode' flags while doing this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:782,Deployability,release,release,782,"/* This is similar to png_text_compress, above, except that it does not require; * all of the data at once and, instead of buffering the compressed result,; * writes it as IDAT chunks. Unlike png_text_compress it *can* png_error out; * because it calls the write interface. As a result it does its own error; * reporting and does not return an error code. In the event of error it will; * just call png_error. The input data length may exceed 32-bits. The 'flush'; * parameter is exactly the same as that to deflate, with the following; * meanings:; *; * Z_NO_FLUSH: normal incremental output of compressed data; * Z_SYNC_FLUSH: do a SYNC_FLUSH, used by png_write_flush; * Z_FINISH: this is the end of the input, do a Z_FINISH and clean up; *; * The routine manages the acquire and release of the png_ptr->zstream by; * checking and (at the end) clearing png_ptr->zowner; it does some sanity; * checks on the 'mode' flags while doing this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:263,Integrability,interface,interface,263,"/* This is similar to png_text_compress, above, except that it does not require; * all of the data at once and, instead of buffering the compressed result,; * writes it as IDAT chunks. Unlike png_text_compress it *can* png_error out; * because it calls the write interface. As a result it does its own error; * reporting and does not return an error code. In the event of error it will; * just call png_error. The input data length may exceed 32-bits. The 'flush'; * parameter is exactly the same as that to deflate, with the following; * meanings:; *; * Z_NO_FLUSH: normal incremental output of compressed data; * Z_SYNC_FLUSH: do a SYNC_FLUSH, used by png_write_flush; * Z_FINISH: this is the end of the input, do a Z_FINISH and clean up; *; * The routine manages the acquire and release of the png_ptr->zstream by; * checking and (at the end) clearing png_ptr->zowner; it does some sanity; * checks on the 'mode' flags while doing this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:750,Integrability,rout,routine,750,"/* This is similar to png_text_compress, above, except that it does not require; * all of the data at once and, instead of buffering the compressed result,; * writes it as IDAT chunks. Unlike png_text_compress it *can* png_error out; * because it calls the write interface. As a result it does its own error; * reporting and does not return an error code. In the event of error it will; * just call png_error. The input data length may exceed 32-bits. The 'flush'; * parameter is exactly the same as that to deflate, with the following; * meanings:; *; * Z_NO_FLUSH: normal incremental output of compressed data; * Z_SYNC_FLUSH: do a SYNC_FLUSH, used by png_write_flush; * Z_FINISH: this is the end of the input, do a Z_FINISH and clean up; *; * The routine manages the acquire and release of the png_ptr->zstream by; * checking and (at the end) clearing png_ptr->zowner; it does some sanity; * checks on the 'mode' flags while doing this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:846,Usability,clear,clearing,846,"/* This is similar to png_text_compress, above, except that it does not require; * all of the data at once and, instead of buffering the compressed result,; * writes it as IDAT chunks. Unlike png_text_compress it *can* png_error out; * because it calls the write interface. As a result it does its own error; * reporting and does not return an error code. In the event of error it will; * just call png_error. The input data length may exceed 32-bits. The 'flush'; * parameter is exactly the same as that to deflate, with the following; * meanings:; *; * Z_NO_FLUSH: normal incremental output of compressed data; * Z_SYNC_FLUSH: do a SYNC_FLUSH, used by png_write_flush; * Z_FINISH: this is the end of the input, do a Z_FINISH and clean up; *; * The routine manages the acquire and release of the png_ptr->zstream by; * checking and (at the end) clearing png_ptr->zowner; it does some sanity; * checks on the 'mode' flags while doing this.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:268,Safety,safe,safe,268,"/* First time. Ensure we have a temporary buffer for compression and; * trim the buffer list if it has more than one entry to free memory.; * If 'WRITE_COMPRESSED_TEXT' is not set the list will never have been; * created at this point, but the check here is quick and safe.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:20,Availability,error,error,20,/* It is a terminal error if we can't claim the zstream. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:70,Availability,error,error,70,"/* Now loop reading and writing until all the input is consumed or an error; * terminates the operation. The _out values are maintained across calls to; * this function, but the input must be reset each time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:3,Safety,safe,safe,3,/* safe because of the check */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:102,Performance,optimiz,optimization,102,/* Write an IDAT containing the data then reset the buffer. The; * first IDAT may need deflate header optimization.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:84,Availability,error,error,84,/* The order of these checks doesn't matter much; it just affects which; * possible error might be detected if multiple things go wrong at once.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:99,Safety,detect,detected,99,/* The order of these checks doesn't matter much; it just affects which; * possible error might be detected if multiple things go wrong at once.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:3,Deployability,Release,Release,3,/* Release the stream */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:14,Availability,error,error,14,/* This is an error condition. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:12,Availability,error,error,12,/* internal error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:22,Integrability,depend,depend,22,/* Make sure we don't depend upon the order of PNG_COLOR_8 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:415,Security,validat,validate,415,"/* for the keywod separator */; /* We leave it to the application to meet PNG-1.0 requirements on the; * contents of the text. PNG-1.0 through PNG-1.2 discourage the use of; * any non-Latin-1 characters except for NEWLINE. ISO PNG, however,; * specifies that the text is UTF-8 and this really doesn't require any; * checking.; *; * The NUL character is forbidden by PNG-1.0 through PNG-1.2 and ISO PNG.; *; * TODO: validate the language tag correctly (see the spec.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:2,Safety,SAFE,SAFE,2,/*SAFE*/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:13,Safety,detect,detect,13,/* so we can detect potential overflow of the; running sum */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:7,Safety,predict,prediction,7,"/* The prediction method we use is to find which method provides the; * smallest value when summing the absolute values of the distances; * from zero, using anything >= 128 as negative numbers. This is known; * as the ""minimum sum of absolute differences"" heuristic. Other; * heuristics are the ""weighted minimum sum of absolute differences""; * (experimental and can in theory improve compression), and the ""zlib; * predictive"" method (not implemented yet), which does test compressions; * of lines using different filter methods, and then chooses the; * (series of) filter(s) that give minimum compressed data size (VERY; * computationally expensive).; *; * GRR 980525: consider also; *; * (1) minimum sum of absolute differences from running average (i.e.,; * keep running sum of non-absolute differences & count of bytes); * [track dispersion, too? restart average if dispersion too large?]; *; * (1b) minimum sum of absolute differences from sliding average, probably; * with window size <= deflate window (usually 32K); *; * (2) minimum sum of squared differences from zero or running average; * (i.e., ~ root-mean-square approach); */; /* We don't need to test the 'no filter' case if this is the only filter; * that has been chosen, as it doesn't actually do anything to the data.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:416,Safety,predict,predictive,416,"/* The prediction method we use is to find which method provides the; * smallest value when summing the absolute values of the distances; * from zero, using anything >= 128 as negative numbers. This is known; * as the ""minimum sum of absolute differences"" heuristic. Other; * heuristics are the ""weighted minimum sum of absolute differences""; * (experimental and can in theory improve compression), and the ""zlib; * predictive"" method (not implemented yet), which does test compressions; * of lines using different filter methods, and then chooses the; * (series of) filter(s) that give minimum compressed data size (VERY; * computationally expensive).; *; * GRR 980525: consider also; *; * (1) minimum sum of absolute differences from running average (i.e.,; * keep running sum of non-absolute differences & count of bytes); * [track dispersion, too? restart average if dispersion too large?]; *; * (1b) minimum sum of absolute differences from sliding average, probably; * with window size <= deflate window (usually 32K); *; * (2) minimum sum of squared differences from zero or running average; * (i.e., ~ root-mean-square approach); */; /* We don't need to test the 'no filter' case if this is the only filter; * that has been chosen, as it doesn't actually do anything to the data.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:469,Testability,test,test,469,"/* The prediction method we use is to find which method provides the; * smallest value when summing the absolute values of the distances; * from zero, using anything >= 128 as negative numbers. This is known; * as the ""minimum sum of absolute differences"" heuristic. Other; * heuristics are the ""weighted minimum sum of absolute differences""; * (experimental and can in theory improve compression), and the ""zlib; * predictive"" method (not implemented yet), which does test compressions; * of lines using different filter methods, and then chooses the; * (series of) filter(s) that give minimum compressed data size (VERY; * computationally expensive).; *; * GRR 980525: consider also; *; * (1) minimum sum of absolute differences from running average (i.e.,; * keep running sum of non-absolute differences & count of bytes); * [track dispersion, too? restart average if dispersion too large?]; *; * (1b) minimum sum of absolute differences from sliding average, probably; * with window size <= deflate window (usually 32K); *; * (2) minimum sum of squared differences from zero or running average; * (i.e., ~ root-mean-square approach); */; /* We don't need to test the 'no filter' case if this is the only filter; * that has been chosen, as it doesn't actually do anything to the data.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:1162,Testability,test,test,1162,"/* The prediction method we use is to find which method provides the; * smallest value when summing the absolute values of the distances; * from zero, using anything >= 128 as negative numbers. This is known; * as the ""minimum sum of absolute differences"" heuristic. Other; * heuristics are the ""weighted minimum sum of absolute differences""; * (experimental and can in theory improve compression), and the ""zlib; * predictive"" method (not implemented yet), which does test compressions; * of lines using different filter methods, and then chooses the; * (series of) filter(s) that give minimum compressed data size (VERY; * computationally expensive).; *; * GRR 980525: consider also; *; * (1) minimum sum of absolute differences from running average (i.e.,; * keep running sum of non-absolute differences & count of bytes); * [track dispersion, too? restart average if dispersion too large?]; *; * (1b) minimum sum of absolute differences from sliding average, probably; * with window size <= deflate window (usually 32K); *; * (2) minimum sum of squared differences from zero or running average; * (i.e., ~ root-mean-square approach); */; /* We don't need to test the 'no filter' case if this is the only filter; * that has been chosen, as it doesn't actually do anything to the data.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:30,Testability,test,testing,30,/* It's the only filter so no testing is needed */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:36,Deployability,update,updates,36,/* WRITE_FILTER */; /* Finish row - updates counters and flushes zlib if last row */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c:3,Safety,avoid,avoid,3,/* avoid extra function call in case we use fread (TVT) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c:88,Integrability,rout,routine,88,/******************************************************************************; * This routine should be called before any other DGif calls. Note that *; * this routine is called automatically from DGif file open routines.	 *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c:162,Integrability,rout,routine,162,/******************************************************************************; * This routine should be called before any other DGif calls. Note that *; * this routine is called automatically from DGif file open routines.	 *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c:214,Integrability,rout,routines,214,/******************************************************************************; * This routine should be called before any other DGif calls. Note that *; * this routine is called automatically from DGif file open routines.	 *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c:88,Integrability,rout,routine,88,/******************************************************************************; * This routine should be called before any attemp to read an image. *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c:88,Integrability,rout,routine,88,"/******************************************************************************; * This routine should be called before any attemp to read an image. *; * Note it is assumed the Image desc. header (',') has been read.	 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c:167,Safety,detect,detected,167,"/* We probably would not be called any more, so lets clean 	 */; /* everything before we return: need to flush out all rest of */; /* image until empty block (size 0) detected. We use GetCodeNext.*/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c:40,Usability,simpl,simply,40,"/* Its regular code - if in pixel range simply add it to output */; /* stream, otherwise trace to codes linked list until the prefix */; /* is in pixel range:					 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c:11,Usability,simpl,simple,11,"/* This is simple - its pixel scalar, so add it to output: */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c:20,Availability,error,error,20,"/*fprintf( stderr, ""error at line %d, CrntCode = %d, Private->RunningCode - 2 = %d\n"", __LINE__, CrntCode, Private->RunningCode - 2 ); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c:21,Availability,error,error,21,"/* fprintf( stderr, ""error at line %d, j = %d, CrntPrefix = %d\n"", __LINE__, j, CrntPrefix ); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/dgif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:63,Availability,Mask,Masks,63,"/* #define DEBUG_NO_PREFIX		 Dump only compressed data. */; /* Masks given codes to BitsPerPixel, to make sure all codes are in range: */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:83,Deployability,Update,Update,83,"/******************************************************************************; * Update a new gif file, given its file handle, which must be opened for *; * write in binary mode.							 *; * Returns GifFileType pointer dynamically allocated which serves as the gif *; * info record. _GifError is cleared if successful.			 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:233,Energy Efficiency,allocate,allocated,233,"/******************************************************************************; * Update a new gif file, given its file handle, which must be opened for *; * write in binary mode.							 *; * Returns GifFileType pointer dynamically allocated which serves as the gif *; * info record. _GifError is cleared if successful.			 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:298,Usability,clear,cleared,298,"/******************************************************************************; * Update a new gif file, given its file handle, which must be opened for *; * write in binary mode.							 *; * Returns GifFileType pointer dynamically allocated which serves as the gif *; * info record. _GifError is cleared if successful.			 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:17,Integrability,rout,routine,17,/* No user write routine (MRB) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:14,Integrability,rout,routine,14,/* User write routine (MRB) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:83,Integrability,Rout,Routine,83,"/******************************************************************************; * Routine to set current GIF version. All files open for write will be *; * using this version until next call to this routine. Version consists of *; * 3 characters as ""87a"" or ""89a"". No test is made to validate the version. *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:200,Integrability,rout,routine,200,"/******************************************************************************; * Routine to set current GIF version. All files open for write will be *; * using this version until next call to this routine. Version consists of *; * 3 characters as ""87a"" or ""89a"". No test is made to validate the version. *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:285,Security,validat,validate,285,"/******************************************************************************; * Routine to set current GIF version. All files open for write will be *; * using this version until next call to this routine. Version consists of *; * 3 characters as ""87a"" or ""89a"". No test is made to validate the version. *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:269,Testability,test,test,269,"/******************************************************************************; * Routine to set current GIF version. All files open for write will be *; * using this version until next call to this routine. Version consists of *; * 3 characters as ""87a"" or ""89a"". No test is made to validate the version. *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:88,Integrability,rout,routine,88,"/******************************************************************************; * This routine should be called before any other EGif calls, immediately *; * follows the GIF file openning.					 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:88,Integrability,rout,routine,88,/******************************************************************************; * This routine should be called before any attemp to dump an image - any *; * call to any of the pixel dump routines.				 *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:189,Integrability,rout,routines,189,/******************************************************************************; * This routine should be called before any attemp to dump an image - any *; * call to any of the pixel dump routines.				 *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:36,Usability,clear,clear,36,/* Output any partial block and the clear code. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:3,Testability,Test,Test,3,"/* Test and see what color map to use, and from it # bits per pixel: */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:9,Security,hash,hash,9,/* Clear hash table and send Clear to make sure the decoder do the same. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:3,Usability,Clear,Clear,3,/* Clear hash table and send Clear to make sure the decoder do the same. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:29,Usability,Clear,Clear,29,/* Clear hash table and send Clear to make sure the decoder do the same. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:8,Usability,Clear,Clear,8,/* Send Clear to make sure the encoder is initialized. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:70,Security,hash,hash,70,/* Get next pixel from stream. */; /* Form a new unique key to search hash table for the code combines ; * CrntCode as Prefix string with Pixel as postfix char.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:62,Usability,simpl,simple,62,"/* This Key is already there, or the string is old one, so; * simple take new code as our CrntCode:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:13,Security,hash,hash,13,"/* Put it in hash table, output the prefix code, and make our; * CrntCode equal to Pixel.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:18,Security,Hash,HashTable,18,"/* If however the HashTable if full, we send a clear first and; * Clear the hash table.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:76,Security,hash,hash,76,"/* If however the HashTable if full, we send a clear first and; * Clear the hash table.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:47,Usability,clear,clear,47,"/* If however the HashTable if full, we send a clear first and; * Clear the hash table.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:66,Usability,Clear,Clear,66,"/* If however the HashTable if full, we send a clear first and; * Clear the hash table.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:19,Usability,clear,clearance,19,/* Time to do some clearance: */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:49,Security,hash,hash,49,/* Put this unique key with its relative Code in hash table: */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:6,Energy Efficiency,Allocate,Allocate,6,/*; * Allocate a color map of given size; initialize with contents of; * ColorMap if that pointer is non-NULL.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gifalloc.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gifalloc.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:126,Energy Efficiency,allocate,allocated,126,"/*; * Compute the union of two given color maps and return it. If result can't ; * fit into 256 colors, NULL is returned, the allocated union otherwise.; * ColorIn1 is copied as is to ColorUnion, while colors from ColorIn2 are; * copied iff they didn't exist before. ColorTransIn2 maps the old; * ColorIn2 into ColorUnion color map table.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gifalloc.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gifalloc.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:6,Energy Efficiency,Allocate,Allocate,6,/*; * Allocate table which will hold the result for sure.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gifalloc.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gifalloc.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:54,Availability,down,down,54,"/*; * Potentially obnoxious hack:; *; * Back CrntSlot down past all contiguous {0, 0, 0} slots at the end; * of table 1. This is very useful if your display is limited to; * 16 colors.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gifalloc.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gifalloc.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:34,Energy Efficiency,power,power,34,/*; 	 * Zero out slots up to next power of 2.; 	 * We know these slots exist because of the way ColorUnion's; 	 * start dimension was computed.; 	 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gifalloc.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gifalloc.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:21,Energy Efficiency,allocate,allocated,21,"/*; 	 * Make our own allocated copies of the heap fields in the; 	 * copied record. This guards against potential aliasing; 	 * problems.; 	 */; /* first, the local color map */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gifalloc.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gifalloc.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_err.c:288,Availability,error,error,288,"/*****************************************************************************; * ""Gif-Lib"" - Yet another gif library.				 *; *									 *; * Written by: Gershon Elber			IBM PC Ver 0.1,	Jun. 1989 *; ******************************************************************************; * Handle error reporting for the GIF library.				 *; ******************************************************************************; * History:								 *; * 17 Jun 89 - Version 1.0 by Gershon Elber.				 *; *****************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_err.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_err.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_err.c:102,Availability,error,error,102,/*****************************************************************************; * Return the last GIF error (0 if none) and reset the error.		 *; *****************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_err.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_err.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_err.c:134,Availability,error,error,134,/*****************************************************************************; * Return the last GIF error (0 if none) and reset the error.		 *; *****************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_err.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_err.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_err.c:101,Availability,error,error,101,/*****************************************************************************; * Print the last GIF error to stderr.					 *; *****************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_err.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_err.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:378,Security,hash,hash,378,"/*****************************************************************************; * ""Gif-Lib"" - Yet another gif library.				 *; *									 *; * Written by: Gershon Elber			IBM PC Ver 0.1,	Jun. 1989 *; ******************************************************************************; * Module to support the following operations:				 *; *									 *; * 1. InitHashTable - initialize hash table.				 *; * 2. ClearHashTable - clear the hash table to an empty state.		 *; * 2. InsertHashTable - insert one item into data structure.		 *; * 3. ExistsHashTable - test if item exists in data structure.		 *; *									 *; * This module is used to hash the GIF codes during encoding.		 *; ******************************************************************************; * History:								 *; * 14 Jun 89 - Version 1.0 by Gershon Elber.				 *; *****************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:429,Security,hash,hash,429,"/*****************************************************************************; * ""Gif-Lib"" - Yet another gif library.				 *; *									 *; * Written by: Gershon Elber			IBM PC Ver 0.1,	Jun. 1989 *; ******************************************************************************; * Module to support the following operations:				 *; *									 *; * 1. InitHashTable - initialize hash table.				 *; * 2. ClearHashTable - clear the hash table to an empty state.		 *; * 2. InsertHashTable - insert one item into data structure.		 *; * 3. ExistsHashTable - test if item exists in data structure.		 *; *									 *; * This module is used to hash the GIF codes during encoding.		 *; ******************************************************************************; * History:								 *; * 14 Jun 89 - Version 1.0 by Gershon Elber.				 *; *****************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:635,Security,hash,hash,635,"/*****************************************************************************; * ""Gif-Lib"" - Yet another gif library.				 *; *									 *; * Written by: Gershon Elber			IBM PC Ver 0.1,	Jun. 1989 *; ******************************************************************************; * Module to support the following operations:				 *; *									 *; * 1. InitHashTable - initialize hash table.				 *; * 2. ClearHashTable - clear the hash table to an empty state.		 *; * 2. InsertHashTable - insert one item into data structure.		 *; * 3. ExistsHashTable - test if item exists in data structure.		 *; *									 *; * This module is used to hash the GIF codes during encoding.		 *; ******************************************************************************; * History:								 *; * 14 Jun 89 - Version 1.0 by Gershon Elber.				 *; *****************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:552,Testability,test,test,552,"/*****************************************************************************; * ""Gif-Lib"" - Yet another gif library.				 *; *									 *; * Written by: Gershon Elber			IBM PC Ver 0.1,	Jun. 1989 *; ******************************************************************************; * Module to support the following operations:				 *; *									 *; * 1. InitHashTable - initialize hash table.				 *; * 2. ClearHashTable - clear the hash table to an empty state.		 *; * 2. InsertHashTable - insert one item into data structure.		 *; * 3. ExistsHashTable - test if item exists in data structure.		 *; *									 *; * This module is used to hash the GIF codes during encoding.		 *; ******************************************************************************; * History:								 *; * 14 Jun 89 - Version 1.0 by Gershon Elber.				 *; *****************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:402,Usability,Clear,ClearHashTable,402,"/*****************************************************************************; * ""Gif-Lib"" - Yet another gif library.				 *; *									 *; * Written by: Gershon Elber			IBM PC Ver 0.1,	Jun. 1989 *; ******************************************************************************; * Module to support the following operations:				 *; *									 *; * 1. InitHashTable - initialize hash table.				 *; * 2. ClearHashTable - clear the hash table to an empty state.		 *; * 2. InsertHashTable - insert one item into data structure.		 *; * 3. ExistsHashTable - test if item exists in data structure.		 *; *									 *; * This module is used to hash the GIF codes during encoding.		 *; ******************************************************************************; * History:								 *; * 14 Jun 89 - Version 1.0 by Gershon Elber.				 *; *****************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:419,Usability,clear,clear,419,"/*****************************************************************************; * ""Gif-Lib"" - Yet another gif library.				 *; *									 *; * Written by: Gershon Elber			IBM PC Ver 0.1,	Jun. 1989 *; ******************************************************************************; * Module to support the following operations:				 *; *									 *; * 1. InitHashTable - initialize hash table.				 *; * 2. ClearHashTable - clear the hash table to an empty state.		 *; * 2. InsertHashTable - insert one item into data structure.		 *; * 3. ExistsHashTable - test if item exists in data structure.		 *; *									 *; * This module is used to hash the GIF codes during encoding.		 *; ******************************************************************************; * History:								 *; * 14 Jun 89 - Version 1.0 by Gershon Elber.				 *; *****************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:53,Security,hash,hash,53,/* #define DEBUG_HIT_RATE Debug number of misses per hash Insert/Exists. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:106,Energy Efficiency,allocate,allocate,106,/******************************************************************************; * Initialize HashTable - allocate the memory needed and clear it.	 *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:94,Security,Hash,HashTable,94,/******************************************************************************; * Initialize HashTable - allocate the memory needed and clear it.	 *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:137,Usability,clear,clear,137,/******************************************************************************; * Initialize HashTable - allocate the memory needed and clear it.	 *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:83,Integrability,Rout,Routine,83,/******************************************************************************; * Routine to clear the HashTable to an empty state.			 *; * This part is a little machine depended. Use the commented part otherwise. *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:171,Integrability,depend,depended,171,/******************************************************************************; * Routine to clear the HashTable to an empty state.			 *; * This part is a little machine depended. Use the commented part otherwise. *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:104,Security,Hash,HashTable,104,/******************************************************************************; * Routine to clear the HashTable to an empty state.			 *; * This part is a little machine depended. Use the commented part otherwise. *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:94,Usability,clear,clear,94,/******************************************************************************; * Routine to clear the HashTable to an empty state.			 *; * This part is a little machine depended. Use the commented part otherwise. *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:83,Integrability,Rout,Routine,83,/******************************************************************************; * Routine to insert a new Item into the HashTable. The data is assumed to be *; * new one.								 *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:121,Security,Hash,HashTable,121,/******************************************************************************; * Routine to insert a new Item into the HashTable. The data is assumed to be *; * new one.								 *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:83,Integrability,Rout,Routine,83,"/******************************************************************************; * Routine to test if given Key exists in HashTable and if so returns its code *; * Returns the Code if key was found, -1 if not.				 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:122,Security,Hash,HashTable,122,"/******************************************************************************; * Routine to test if given Key exists in HashTable and if so returns its code *; * Returns the Code if key was found, -1 if not.				 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:94,Testability,test,test,94,"/******************************************************************************; * Routine to test if given Key exists in HashTable and if so returns its code *; * Returns the Code if key was found, -1 if not.				 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:83,Integrability,Rout,Routine,83,"/******************************************************************************; * Routine to generate an HKey for the hashtable out of the given unique key. *; * The given Key is assumed to be 20 bits as follows: lower 8 bits are the *; * new postfix character, while the upper 12 bits are the prefix code.	 *; * Because the average hit ratio is only 2 (2 hash references per entry), *; * evaluating more complex keys (such as twin prime keys) does not worth it! *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:119,Security,hash,hashtable,119,"/******************************************************************************; * Routine to generate an HKey for the hashtable out of the given unique key. *; * The given Key is assumed to be 20 bits as follows: lower 8 bits are the *; * new postfix character, while the upper 12 bits are the prefix code.	 *; * Because the average hit ratio is only 2 (2 hash references per entry), *; * evaluating more complex keys (such as twin prime keys) does not worth it! *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:357,Security,hash,hash,357,"/******************************************************************************; * Routine to generate an HKey for the hashtable out of the given unique key. *; * The given Key is assumed to be 20 bits as follows: lower 8 bits are the *; * new postfix character, while the upper 12 bits are the prefix code.	 *; * Because the average hit ratio is only 2 (2 hash references per entry), *; * evaluating more complex keys (such as twin prime keys) does not worth it! *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:93,Integrability,rout,routine,93,/******************************************************************************; * Debugging routine to print the hit ratio - number of times the hash table *; * was tested per operation. This routine was used to test the KeyItem routine *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:193,Integrability,rout,routine,193,/******************************************************************************; * Debugging routine to print the hit ratio - number of times the hash table *; * was tested per operation. This routine was used to test the KeyItem routine *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:230,Integrability,rout,routine,230,/******************************************************************************; * Debugging routine to print the hit ratio - number of times the hash table *; * was tested per operation. This routine was used to test the KeyItem routine *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:146,Security,hash,hash,146,/******************************************************************************; * Debugging routine to print the hit ratio - number of times the hash table *; * was tested per operation. This routine was used to test the KeyItem routine *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:166,Testability,test,tested,166,/******************************************************************************; * Debugging routine to print the hit ratio - number of times the hash table *; * was tested per operation. This routine was used to test the KeyItem routine *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:213,Testability,test,test,213,/******************************************************************************; * Debugging routine to print the hit ratio - number of times the hash table *; * was tested per operation. This routine was used to test the KeyItem routine *; ******************************************************************************/,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.h:124,Security,HASH,HASH,124,"/******************************************************************************; * Declarations, global to other of the GIF-HASH.C module.		 *; *									 *; *					Written by Gershon Elber, Jun 1989 *; *******************************************************************************; * History:								 *; * 14 Jun 89 - Version 1.0 by Gershon Elber.				 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_hash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h:18,Integrability,rout,routine,18,/* DumpScreen2Gif routine constants identify type of window/screen to dump. */; /* Note all values below 1000 are reserved for the IBMPC different display */; /* devices (it has many!) and are compatible with the numbering TC2.0 */; /* (Turbo C 2.0 compiler for IBM PC) gives to these devices.		 */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_lib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h:102,Integrability,rout,routines,102,"/******************************************************************************; * O.K., here are the routines one can access in order to encode GIF file: *; * (GIF_LIB file EGIF_LIB.C).						 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_lib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h:119,Security,access,access,119,"/******************************************************************************; * O.K., here are the routines one can access in order to encode GIF file: *; * (GIF_LIB file EGIF_LIB.C).						 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_lib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h:21,Availability,error,errors,21,/* And EGif possible errors. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_lib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h:102,Integrability,rout,routines,102,"/******************************************************************************; * O.K., here are the routines one can access in order to decode GIF file: *; * (GIF_LIB file DGIF_LIB.C).						 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_lib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h:119,Security,access,access,119,"/******************************************************************************; * O.K., here are the routines one can access in order to decode GIF file: *; * (GIF_LIB file DGIF_LIB.C).						 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_lib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h:21,Availability,error,errors,21,/* And DGif possible errors. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_lib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h:102,Integrability,rout,routines,102,"/******************************************************************************; * O.K., here are the routines from GIF_LIB file QUANTIZE.C.		 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_lib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h:102,Integrability,rout,routines,102,"/******************************************************************************; * O.K., here are the routines from GIF_LIB file QPRINTF.C.		 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_lib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h:124,Integrability,rout,routines,124,"/* HAVE_VARARGS_H */; /******************************************************************************; * O.K., here are the routines from GIF_LIB file GIF_ERR.C.		 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_lib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h:102,Integrability,rout,routines,102,"/******************************************************************************; * O.K., here are the routines from GIF_LIB file DEV2GIF.C.		 *; ******************************************************************************/",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_lib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib_private.h:7,Usability,CLEAR,CLEAR,7,/* The CLEAR LZ code. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/libungif/gif_lib_private.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib_private.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/asview.cpp:13,Integrability,message,message,13,"// Start the message loop. ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/win32/asview.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/asview.cpp
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h:3,Modifiability,config,config,3,/* config.h.in. Generated from configure.in by autoheader. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/win32/config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h:31,Modifiability,config,configure,31,/* config.h.in. Generated from configure.in by autoheader. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/win32/config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h:31,Testability,log,logging,31,/* Define if memory allocation logging and debugging is desired */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/win32/config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h:29,Availability,avail,available,29,/* Define if libAfterBase is available */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/win32/config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h:28,Availability,avail,available,28,/* Define if libFreeType is available - should always be under win32 ! */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/win32/config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h:28,Availability,avail,available,28,/* Define if libFreeType is available */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/win32/config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h:23,Availability,avail,available,23,/* Define if libgif is available */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/win32/config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h:24,Availability,avail,available,24,/* Define if libjpeg is available */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/win32/config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h:23,Availability,avail,available,23,/* Define if libpng is available */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/win32/config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h:24,Availability,avail,available,24,/* Define if libtiff is available */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/win32/config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h:26,Safety,safe,safely,26,/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/win32/config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h:50,Availability,avail,available,50,/* Define if support for shared memory XImages is available */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/win32/config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/adler32.c:37,Security,checksum,checksum,37,"/* adler32.c -- compute the Adler-32 checksum of a data stream; * Copyright (C) 1995-2004 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/adler32.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/adler32.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/adler32.c:3,Safety,avoid,avoid,3,/* avoid modulos if none remaining */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/adler32.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/adler32.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/compress.c:180,Deployability,update,updated,180,"/* ===========================================================================; If the default memLevel or windowBits for deflateInit() is changed, then; this function needs to be updated.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/compress.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c:514,Energy Efficiency,Power,Power,514,"/* crc32.c -- compute the CRC-32 of a data stream; * Copyright (C) 1995-2005 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; *; * Thanks to Rodney Brown <rbrown64@csc.com.au> for his contribution of faster; * CRC methods: exclusive-oring 32 bits of data at a time, and pre-computing; * tables for updating the shift register in one step with three exclusive-ors; * instead of four steps with four exclusive-ors. This results in about a; * factor of two increase in speed on a Power PC G4 (PPC7455) using gcc -O3.; */; /* @(#) $Id$ */; /*; Note on the use of DYNAMIC_CRC_TABLE: there is no mutex or semaphore; protection on the static variables used to control the first-use generation; of the crc tables. Therefore, if you #define DYNAMIC_CRC_TABLE, you should; first call get_crc_table() to initialize the tables before allowing more than; one thread to use crc32().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/crc32.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c:672,Modifiability,variab,variables,672,"/* crc32.c -- compute the CRC-32 of a data stream; * Copyright (C) 1995-2005 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; *; * Thanks to Rodney Brown <rbrown64@csc.com.au> for his contribution of faster; * CRC methods: exclusive-oring 32 bits of data at a time, and pre-computing; * tables for updating the shift register in one step with three exclusive-ors; * instead of four steps with four exclusive-ors. This results in about a; * factor of two increase in speed on a Power PC G4 (PPC7455) using gcc -O3.; */; /* @(#) $Id$ */; /*; Note on the use of DYNAMIC_CRC_TABLE: there is no mutex or semaphore; protection on the static variables used to control the first-use generation; of the crc tables. Therefore, if you #define DYNAMIC_CRC_TABLE, you should; first call get_crc_table() to initialize the tables before allowing more than; one thread to use crc32().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/crc32.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c:252,Energy Efficiency,power,powers,252,"/* MAKECRCH */; /*; Generate tables for a byte-wise 32-bit CRC calculation on the polynomial:; x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1. Polynomials over GF(2) are represented in binary, one bit per coefficient,; with the lowest powers in the most significant bit. Then adding polynomials; is just exclusive-or, and multiplying a polynomial by x is a right shift by; one. If we call the above polynomial p, and represent a byte as the; polynomial q, also with the lowest power in the most significant bit (so the; byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,; where a mod b means the remainder after dividing a by b. This calculation is done using the shift-register method of multiplying and; taking the remainder. The register is initialized to zero, and for each; incoming bit, x^32 is added mod p to the register if the bit is a one (where; x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by; x (which is shifting right by one and adding x^32 mod p if the bit shifted; out is a one). We start with the highest power (least significant bit) of; q and repeat for all eight bits of q. The first table is simply the CRC of all possible eight bit values. This is; all the information needed to generate CRCs on data a byte at a time for all; combinations of CRC register values and incoming bytes. The remaining tables; allow for word-at-a-time CRC calculation for both big-endian and little-; endian machines, where a word is four bytes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/crc32.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c:494,Energy Efficiency,power,power,494,"/* MAKECRCH */; /*; Generate tables for a byte-wise 32-bit CRC calculation on the polynomial:; x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1. Polynomials over GF(2) are represented in binary, one bit per coefficient,; with the lowest powers in the most significant bit. Then adding polynomials; is just exclusive-or, and multiplying a polynomial by x is a right shift by; one. If we call the above polynomial p, and represent a byte as the; polynomial q, also with the lowest power in the most significant bit (so the; byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,; where a mod b means the remainder after dividing a by b. This calculation is done using the shift-register method of multiplying and; taking the remainder. The register is initialized to zero, and for each; incoming bit, x^32 is added mod p to the register if the bit is a one (where; x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by; x (which is shifting right by one and adding x^32 mod p if the bit shifted; out is a one). We start with the highest power (least significant bit) of; q and repeat for all eight bits of q. The first table is simply the CRC of all possible eight bit values. This is; all the information needed to generate CRCs on data a byte at a time for all; combinations of CRC register values and incoming bytes. The remaining tables; allow for word-at-a-time CRC calculation for both big-endian and little-; endian machines, where a word is four bytes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/crc32.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c:1091,Energy Efficiency,power,power,1091,"/* MAKECRCH */; /*; Generate tables for a byte-wise 32-bit CRC calculation on the polynomial:; x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1. Polynomials over GF(2) are represented in binary, one bit per coefficient,; with the lowest powers in the most significant bit. Then adding polynomials; is just exclusive-or, and multiplying a polynomial by x is a right shift by; one. If we call the above polynomial p, and represent a byte as the; polynomial q, also with the lowest power in the most significant bit (so the; byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,; where a mod b means the remainder after dividing a by b. This calculation is done using the shift-register method of multiplying and; taking the remainder. The register is initialized to zero, and for each; incoming bit, x^32 is added mod p to the register if the bit is a one (where; x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by; x (which is shifting right by one and adding x^32 mod p if the bit shifted; out is a one). We start with the highest power (least significant bit) of; q and repeat for all eight bits of q. The first table is simply the CRC of all possible eight bit values. This is; all the information needed to generate CRCs on data a byte at a time for all; combinations of CRC register values and incoming bytes. The remaining tables; allow for word-at-a-time CRC calculation for both big-endian and little-; endian machines, where a word is four bytes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/crc32.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c:1182,Usability,simpl,simply,1182,"/* MAKECRCH */; /*; Generate tables for a byte-wise 32-bit CRC calculation on the polynomial:; x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1. Polynomials over GF(2) are represented in binary, one bit per coefficient,; with the lowest powers in the most significant bit. Then adding polynomials; is just exclusive-or, and multiplying a polynomial by x is a right shift by; one. If we call the above polynomial p, and represent a byte as the; polynomial q, also with the lowest power in the most significant bit (so the; byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,; where a mod b means the remainder after dividing a by b. This calculation is done using the shift-register method of multiplying and; taking the remainder. The register is initialized to zero, and for each; incoming bit, x^32 is added mod p to the register if the bit is a one (where; x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by; x (which is shifting right by one and adding x^32 mod p if the bit shifted; out is a one). We start with the highest power (least significant bit) of; q and repeat for all eight bits of q. The first table is simply the CRC of all possible eight bit values. This is; all the information needed to generate CRCs on data a byte at a time for all; combinations of CRC register values and incoming bytes. The remaining tables; allow for word-at-a-time CRC calculation for both big-endian and little-; endian machines, where a word is four bytes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/crc32.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c:17,Performance,concurren,concurrent,17,/* flag to limit concurrent making */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/crc32.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c:105,Energy Efficiency,reduce,reduces,105,"/* See if another task is already doing this (not thread-safe, but better; than nothing -- significantly reduces duration of vulnerability in; case the advice about DYNAMIC_CRC_TABLE is ignored) */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/crc32.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c:57,Safety,safe,safe,57,"/* See if another task is already doing this (not thread-safe, but better; than nothing -- significantly reduces duration of vulnerability in; case the advice about DYNAMIC_CRC_TABLE is ignored) */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/crc32.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c:58,Energy Efficiency,efficient,efficient,58,"/* not first */; /* wait for the other guy to finish (not efficient, but rare) */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/crc32.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c:8,Energy Efficiency,power,power-of-two,8,/* even-power-of-two zeros operator */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/crc32.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c:7,Energy Efficiency,power,power-of-two,7,/* odd-power-of-two zeros operator */; /* degenerate case */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/crc32.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/crc32.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:1499,Availability,redundant,redundant,1499,"; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://www.ietf.org/rfc/rfc1951.txt; *; * A description of the Rabin and Karp algorithm is given in the book; * ""Algorithms"" by R. Sedgewick, Addison-Wesley, p252.; *; * Fiala,E.R., and Greene,D.H.; * Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595; *; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:1877,Availability,Avail,Available,1877,"; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://www.ietf.org/rfc/rfc1951.txt; *; * A description of the Rabin and Karp algorithm is given in the book; * ""Algorithms"" by R. Sedgewick, Addison-Wesley, p252.; *; * Fiala,E.R., and Greene,D.H.; * Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595; *; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:1311,Energy Efficiency,Green,Greene,1311,"; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://www.ietf.org/rfc/rfc1951.txt; *; * A description of the Rabin and Karp algorithm is given in the book; * ""Algorithms"" by R. Sedgewick, Addison-Wesley, p252.; *; * Fiala,E.R., and Greene,D.H.; * Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595; *; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:2076,Energy Efficiency,Green,Greene,2076,"; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://www.ietf.org/rfc/rfc1951.txt; *; * A description of the Rabin and Karp algorithm is given in the book; * ""Algorithms"" by R. Sedgewick, Addison-Wesley, p252.; *; * Fiala,E.R., and Greene,D.H.; * Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595; *; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:230,Integrability,depend,depends,230,"/* deflate.c -- compress data using the deflation algorithm; * Copyright (C) 1995-2005 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://www.ietf.org/rfc/rfc1951.txt; *; * A description of the Rabin and Karp algorithm is given in the book; *",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:729,Performance,perform,performed,729,"/* deflate.c -- compress data using the deflation algorithm; * Copyright (C) 1995-2005 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://www.ietf.org/rfc/rfc1951.txt; *; * A description of the Rabin and Karp algorithm is given in the book; *",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:794,Performance,perform,performed,794,"/* deflate.c -- compress data using the deflation algorithm; * Copyright (C) 1995-2005 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://www.ietf.org/rfc/rfc1951.txt; *; * A description of the Rabin and Karp algorithm is given in the book; *",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:691,Safety,avoid,avoided,691,"/* deflate.c -- compress data using the deflation algorithm; * Copyright (C) 1995-2005 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://www.ietf.org/rfc/rfc1951.txt; *; * A description of the Rabin and Karp algorithm is given in the book; *",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:936,Safety,avoid,avoid,936,"/* deflate.c -- compress data using the deflation algorithm; * Copyright (C) 1995-2005 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://www.ietf.org/rfc/rfc1951.txt; *; * A description of the Rabin and Karp algorithm is given in the book; *",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:1499,Safety,redund,redundant,1499,"; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://www.ietf.org/rfc/rfc1951.txt; *; * A description of the Rabin and Karp algorithm is given in the book; * ""Algorithms"" by R. Sedgewick, Addison-Wesley, p252.; *; * Fiala,E.R., and Greene,D.H.; * Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595; *; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:1780,Testability,test,testing,1780,"; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://www.ietf.org/rfc/rfc1951.txt; *; * A description of the Rabin and Karp algorithm is given in the book; * ""Algorithms"" by R. Sedgewick, Addison-Wesley, p252.; *; * Fiala,E.R., and Greene,D.H.; * Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595; *; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:651,Usability,simpl,simple,651,"/* deflate.c -- compress data using the deflation algorithm; * Copyright (C) 1995-2005 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://www.ietf.org/rfc/rfc1951.txt; *; * A description of the Rabin and Karp algorithm is given in the book; *",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:15,Performance,perform,performed,15,/* block flush performed */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:11,Security,hash,hash,11,/* Tail of hash chains */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:190,Integrability,depend,depending,190,"/* Minimum amount of lookahead, except at the end of the input file.; * See deflate.c for comments about the MIN_MATCH+1.; */; /* Values for max_lazy_match, good_match and max_chain_length, depending on; * the desired pack level (0..9). The values given below have been tuned to; * exclude worst case performance for pathological files. Better values may be; * found for specific files.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:270,Performance,tune,tuned,270,"/* Minimum amount of lookahead, except at the end of the input file.; * See deflate.c for comments about the MIN_MATCH+1.; */; /* Values for max_lazy_match, good_match and max_chain_length, depending on; * the desired pack level (0..9). The values given below have been tuned to; * exclude worst case performance for pathological files. Better values may be; * found for specific files.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:301,Performance,perform,performance,301,"/* Minimum amount of lookahead, except at the end of the input file.; * See deflate.c for comments about the MIN_MATCH+1.; */; /* Values for max_lazy_match, good_match and max_chain_length, depending on; * the desired pack level (0..9). The values given below have been tuned to; * exclude worst case performance for pathological files. Better values may be; * found for specific files.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:3,Energy Efficiency,reduce,reduce,3,/* reduce lazy search above this match length */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:10,Performance,perform,perform,10,/* do not perform lazy search above this match length */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:82,Deployability,Update,Update,82,"/* ===========================================================================; * Update a hash value with the given input byte; * IN assertion: all calls to to UPDATE_HASH are made with consecutive; * input characters, so that a running hash key can be computed from the; * previous key instead of complete recalculation each time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:91,Security,hash,hash,91,"/* ===========================================================================; * Update a hash value with the given input byte; * IN assertion: all calls to to UPDATE_HASH are made with consecutive; * input characters, so that a running hash key can be computed from the; * previous key instead of complete recalculation each time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:238,Security,hash,hash,238,"/* ===========================================================================; * Update a hash value with the given input byte; * IN assertion: all calls to to UPDATE_HASH are made with consecutive; * input characters, so that a running hash key can be computed from the; * previous key instead of complete recalculation each time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:134,Testability,assert,assertion,134,"/* ===========================================================================; * Update a hash value with the given input byte; * IN assertion: all calls to to UPDATE_HASH are made with consecutive; * input characters, so that a running hash key can be computed from the; * previous key instead of complete recalculation each time.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:168,Security,hash,hash,168,"/* ===========================================================================; * Insert string str in the dictionary and set match_head to the previous head; * of the hash chain (the most recent string with same hash key). Return; * the previous length of the hash chain.; * If this file is compiled with -DFASTEST, the compression level is forced; * to 1, and no hash chains are maintained.; * IN assertion: all calls to to INSERT_STRING are made with consecutive; * input characters and the first MIN_MATCH bytes of str are valid; * (except for the last MIN_MATCH-1 bytes of the input file).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:213,Security,hash,hash,213,"/* ===========================================================================; * Insert string str in the dictionary and set match_head to the previous head; * of the hash chain (the most recent string with same hash key). Return; * the previous length of the hash chain.; * If this file is compiled with -DFASTEST, the compression level is forced; * to 1, and no hash chains are maintained.; * IN assertion: all calls to to INSERT_STRING are made with consecutive; * input characters and the first MIN_MATCH bytes of str are valid; * (except for the last MIN_MATCH-1 bytes of the input file).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:261,Security,hash,hash,261,"/* ===========================================================================; * Insert string str in the dictionary and set match_head to the previous head; * of the hash chain (the most recent string with same hash key). Return; * the previous length of the hash chain.; * If this file is compiled with -DFASTEST, the compression level is forced; * to 1, and no hash chains are maintained.; * IN assertion: all calls to to INSERT_STRING are made with consecutive; * input characters and the first MIN_MATCH bytes of str are valid; * (except for the last MIN_MATCH-1 bytes of the input file).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:365,Security,hash,hash,365,"/* ===========================================================================; * Insert string str in the dictionary and set match_head to the previous head; * of the hash chain (the most recent string with same hash key). Return; * the previous length of the hash chain.; * If this file is compiled with -DFASTEST, the compression level is forced; * to 1, and no hash chains are maintained.; * IN assertion: all calls to to INSERT_STRING are made with consecutive; * input characters and the first MIN_MATCH bytes of str are valid; * (except for the last MIN_MATCH-1 bytes of the input file).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:399,Testability,assert,assertion,399,"/* ===========================================================================; * Insert string str in the dictionary and set match_head to the previous head; * of the hash chain (the most recent string with same hash key). Return; * the previous length of the hash chain.; * If this file is compiled with -DFASTEST, the compression level is forced; * to 1, and no hash chains are maintained.; * IN assertion: all calls to to INSERT_STRING are made with consecutive; * input characters and the first MIN_MATCH bytes of str are valid; * (except for the last MIN_MATCH-1 bytes of the input file).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:109,Safety,avoid,avoiding,109,/* ===========================================================================; * Initialize the hash table (avoiding 64K overflow for 16 bit systems).; * prev[] will be initialized on the fly.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:97,Security,hash,hash,97,/* ===========================================================================; * Initialize the hash table (avoiding 64K overflow for 16 bit systems).; * prev[] will be initialized on the fly.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:17,Integrability,wrap,wrapper,17,/* suppress zlib wrapper */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:14,Integrability,wrap,wrapper,14,/* write gzip wrapper instead */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:29,Security,hash,hash,29,"/* Insert all strings in the hash table (except for the last two bytes).; * s->lookahead stays null, so s->ins_h will be recomputed at the next; * call of fill_window.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:24,Energy Efficiency,allocate,allocate,24,/* use zfree if we ever allocate msg dynamically */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:876,Integrability,wrap,wrap,876,"/* =========================================================================; * For the default windowBits of 15 and memLevel of 8, this function returns; * a close to exact, as well as small, upper bound on the compressed size.; * They are coded as constants here for a reason--if the #define's are; * changed, then this function needs to be changed as well. The return; * value for 15 and 8 only works for those exact settings.; *; * For any setting other than those defaults for windowBits and memLevel,; * the value returned is a conservative worst case for the maximum expansion; * resulting from using fixed blocks instead of stored blocks, which deflate; * can emit on compressed data for some combinations of the parameters.; *; * This function could be more sophisticated to provide closer upper bounds; * for every combination of windowBits and memLevel, as well as wrap.; * But even the conservative upper bound of about 14% expansion does not; * seem onerous for output buffer allocation.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:159,Testability,assert,assertion,159,/* =========================================================================; * Put a short in the pending buffer. The 16-bit value is put in MSB order.; * IN assertion: the stream state is correct and there is enough room in; * pending_buf.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:222,Safety,avoid,avoid,222,/* =========================================================================; * Flush as much pending output as possible. All deflate() output goes; * through this function so some applications may wish to modify it; * to avoid allocating a large strm->next_out buffer and copying into it.; * (See also read_buf()).; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:21,Deployability,update,update,21,/* start of bytes to update crc */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:21,Deployability,update,update,21,/* start of bytes to update crc */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:21,Deployability,update,update,21,/* start of bytes to update crc */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:196,Availability,error,error,196,"/* Since avail_out is 0, deflate will be called again with; * more output space, but possibly with both pending and; * avail_in equal to zero. There won't be anything to do,; * but this is not an error situation so make sure we; * return OK instead of BUF_ERROR at next call of deflate:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:42,Safety,avoid,avoid,42,"/* Make sure there is something to do and avoid duplicate consecutive; * flushes. For repeated and useless calls with Z_FINISH, we keep; * returning Z_STREAM_END instead of Z_BUF_ERROR.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:3,Safety,avoid,avoid,3,"/* avoid BUF_ERROR next call, see above */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:3,Safety,avoid,avoid,3,"/* avoid BUF_ERROR at next call, see above */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:134,Usability,simpl,simplify,134,"/* =========================================================================; * Copy the source state to the destination state.; * To simplify the source, this is not supported for 16-bit MSDOS (which; * doesn't have enough memory anyway to duplicate compression states).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:131,Deployability,update,update,131,"/* ===========================================================================; * Read a new buffer from the current input stream, update the adler32; * and total number of bytes read. All deflate() input goes through; * this function so some applications may wish to modify it to avoid; * allocating a large strm->next_in buffer and copying from it.; * (See also flush_pending()).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:281,Safety,avoid,avoid,281,"/* ===========================================================================; * Read a new buffer from the current input stream, update the adler32; * and total number of bytes read. All deflate() input goes through; * this function so some applications may wish to modify it to avoid; * allocating a large strm->next_in buffer and copying from it.; * (See also flush_pending()).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:113,Integrability,rout,routines,113,"/* ===========================================================================; * Initialize the ""longest match"" routines for a new zlib stream; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:19,Deployability,configurat,configuration,19,/* Set the default configuration parameters:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:19,Modifiability,config,configuration,19,/* Set the default configuration parameters:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:359,Security,hash,hash,359,"/* ===========================================================================; * Set match_start to the longest match starting at the given string and; * return its length. Matches shorter or equal to prev_length are discarded,; * in which case the result is equal to prev_length and match_start is; * garbage.; * IN assertions: cur_match is the head of the hash chain for the current; * string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1; * OUT assertion: the match length is not greater than s->lookahead.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:318,Testability,assert,assertions,318,"/* ===========================================================================; * Set match_start to the longest match starting at the given string and; * return its length. Matches shorter or equal to prev_length are discarded,; * in which case the result is equal to prev_length and match_start is; * garbage.; * IN assertions: cur_match is the head of the hash chain for the current; * string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1; * OUT assertion: the match length is not greater than s->lookahead.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:468,Testability,assert,assertion,468,"/* ===========================================================================; * Set match_start to the longest match starting at the given string and; * return its length. Matches shorter or equal to prev_length are discarded,; * in which case the result is equal to prev_length and match_start is; * garbage.; * IN assertions: cur_match is the head of the hash chain for the current; * string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1; * OUT assertion: the match length is not greater than s->lookahead.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:27,Performance,optimiz,optimized,27,"/* For 80x86 and 680x0, an optimized version will be provided in match.asm or; * match.S. The code will be functionally equivalent.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:7,Security,hash,hash,7,/* max hash chain length */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:44,Usability,simpl,simplify,44,"/* Stop when cur_match becomes <= limit. To simplify the code,; * we prevent matches with the string of window index 0.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:15,Performance,optimiz,optimized,15,/* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.; * It is easy to get rid of this optimization if necessary.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:109,Performance,optimiz,optimization,109,/* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.; * It is easy to get rid of this optimization if necessary.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:301,Integrability,depend,depend,301,"/* Skip to next match if the match length cannot increase; * or if the match length is less than 2. Note that the checks below; * for insufficient lookahead only occur occasionally for performance; * reasons. Therefore uninitialized memory will be accessed, and; * conditional jumps will be made that depend on those values.; * However the length of the match is limited to the lookahead, so; * the output of deflate is not affected by the uninitialized values.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:185,Performance,perform,performance,185,"/* Skip to next match if the match length cannot increase; * or if the match length is less than 2. Note that the checks below; * for insufficient lookahead only occur occasionally for performance; * reasons. Therefore uninitialized memory will be accessed, and; * conditional jumps will be made that depend on those values.; * However the length of the match is limited to the lookahead, so; * the output of deflate is not affected by the uninitialized values.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:248,Security,access,accessed,248,"/* Skip to next match if the match length cannot increase; * or if the match length is less than 2. Note that the checks below; * for insufficient lookahead only occur occasionally for performance; * reasons. Therefore uninitialized memory will be accessed, and; * conditional jumps will be made that depend on those values.; * However the length of the match is limited to the lookahead, so; * the output of deflate is not affected by the uninitialized values.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:129,Security,hash,hash,129,"/* It is not necessary to compare scan[2] and match[2] since they are; * always equal when the other bytes match, given that the hash keys; * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at; * strstart+3, +5, ... up to strstart+257. We check for insufficient; * lookahead only every 4th comparison; the 128th check will be made; * at strstart+257. If MAX_MATCH-2 is not a multiple of 8, it is; * necessary to put more guard bytes at the end of the window, or; * to check more often for insufficient lookahead.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:252,Security,hash,hash,252,"/* The check at best_len-1 can be removed because it will be made; * again later. (This heuristic is not always a win.); * It is not necessary to compare scan[2] and match[2] since they; * are always equal when the other bytes match, given that; * the hash keys are equal and that HASH_BITS >= 8.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:97,Performance,Optimiz,Optimized,97,/* FASTEST */; /* ---------------------------------------------------------------------------; * Optimized version for level == 1 or strategy == Z_RLE only; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:15,Performance,optimiz,optimized,15,/* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.; * It is easy to get rid of this optimization if necessary.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:109,Performance,optimiz,optimization,109,/* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.; * It is easy to get rid of this optimization if necessary.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:10,Availability,failure,failure,10,/* Return failure if the match length is less than 2:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:252,Security,hash,hash,252,"/* The check at best_len-1 can be removed because it will be made; * again later. (This heuristic is not always a win.); * It is not necessary to compare scan[2] and match[2] since they; * are always equal when the other bytes match, given that; * the hash keys are equal and that HASH_BITS >= 8.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:155,Deployability,Update,Updates,155,"/* DEBUG */; /* ===========================================================================; * Fill the window when the lookahead becomes insufficient.; * Updates strstart and lookahead.; *; * IN assertion: lookahead < MIN_LOOKAHEAD; * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD; * At least one byte has been read, or avail_in == 0; reads are; * performed for at least two bytes (required for the zip translate_eol; * option -- not supported here).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:357,Performance,perform,performed,357,"/* DEBUG */; /* ===========================================================================; * Fill the window when the lookahead becomes insufficient.; * Updates strstart and lookahead.; *; * IN assertion: lookahead < MIN_LOOKAHEAD; * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD; * At least one byte has been read, or avail_in == 0; reads are; * performed for at least two bytes (required for the zip translate_eol; * option -- not supported here).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:196,Testability,assert,assertion,196,"/* DEBUG */; /* ===========================================================================; * Fill the window when the lookahead becomes insufficient.; * Updates strstart and lookahead.; *; * IN assertion: lookahead < MIN_LOOKAHEAD; * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD; * At least one byte has been read, or avail_in == 0; reads are; * performed for at least two bytes (required for the zip translate_eol; * option -- not supported here).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:240,Testability,assert,assertions,240,"/* DEBUG */; /* ===========================================================================; * Fill the window when the lookahead becomes insufficient.; * Updates strstart and lookahead.; *; * IN assertion: lookahead < MIN_LOOKAHEAD; * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD; * At least one byte has been read, or avail_in == 0; reads are; * performed for at least two bytes (required for the zip translate_eol; * option -- not supported here).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:34,Safety,avoid,avoided,34,"/* Slide the hash table (could be avoided with 32 bit values; at the expense of memory usage). We slide even when level == 0; to keep the hash table consistent if we switch back to level > 0; later. (Using level 0 permanently is not an optimal usage of; zlib, so we don't care about this pathological case.); */; /* %%% avoid this when Z_RLE */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:320,Safety,avoid,avoid,320,"/* Slide the hash table (could be avoided with 32 bit values; at the expense of memory usage). We slide even when level == 0; to keep the hash table consistent if we switch back to level > 0; later. (Using level 0 permanently is not an optimal usage of; zlib, so we don't care about this pathological case.); */; /* %%% avoid this when Z_RLE */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:13,Security,hash,hash,13,"/* Slide the hash table (could be avoided with 32 bit values; at the expense of memory usage). We slide even when level == 0; to keep the hash table consistent if we switch back to level > 0; later. (Using level 0 permanently is not an optimal usage of; zlib, so we don't care about this pathological case.); */; /* %%% avoid this when Z_RLE */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:138,Security,hash,hash,138,"/* Slide the hash table (could be avoided with 32 bit values; at the expense of memory usage). We slide even when level == 0; to keep the hash table consistent if we switch back to level > 0; later. (Using level 0 permanently is not an optimal usage of; zlib, so we don't care about this pathological case.); */; /* %%% avoid this when Z_RLE */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:22,Security,hash,hash,22,"/* If n is not on any hash chain, prev[n] is garbage but; * its value will never be used.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:18,Security,hash,hash,18,/* Initialize the hash value now that we have some input: */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:142,Testability,assert,assertion,142,"/* ===========================================================================; * Flush the current block, with given end-of-file flag.; * IN assertion: strstart is set to the end of the current match.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:400,Performance,optimiz,optimized,400,"/* ===========================================================================; * Copy without compression as much as possible from the input stream, return; * the current block state.; * This function does not insert new strings in the dictionary since; * uncompressible data is probably not useful. This function is used; * only for the level=0 compression option.; * NOTE: this function should be optimized to avoid extra copying from; * window to pending_buf.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:413,Safety,avoid,avoid,413,"/* ===========================================================================; * Copy without compression as much as possible from the input stream, return; * the current block state.; * This function does not insert new strings in the dictionary since; * uncompressible data is probably not useful. This function is used; * only for the level=0 compression option.; * NOTE: this function should be optimized to avoid extra copying from; * window to pending_buf.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:34,Integrability,wrap,wraparound,34,/* strstart == 0 is possible when wraparound on 16-bit machine */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:195,Performance,perform,perform,195,"/* ===========================================================================; * Compress as much as possible from the input stream, return the current; * block state.; * This function does not perform lazy evaluation of matches and inserts; * new strings in the dictionary only for unmatched strings or for short; * matches. It is used only for the fast compression options.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:15,Security,hash,hash,15,/* head of the hash chain */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:111,Security,hash,hash,111,"/* Insert the string window[strstart .. strstart+2] in the; * dictionary, and set hash_head to the head of the hash chain:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:107,Safety,avoid,avoid,107,"/* To simplify the code, we prevent matches with the string; * of window index 0 (in particular we have to avoid a match; * of the string with itself at the start of the input file).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:6,Usability,simpl,simplify,6,"/* To simplify the code, we prevent matches with the string; * of window index 0 (in particular we have to avoid a match; * of the string with itself at the start of the input file).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:29,Security,hash,hash,29,/* Insert new strings in the hash table only if the match length; * is not too large. This saves time but degrades compression.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:11,Security,hash,hash,11,/* head of hash chain */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:111,Security,hash,hash,111,"/* Insert the string window[strstart .. strstart+2] in the; * dictionary, and set hash_head to the head of the hash chain:; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:107,Safety,avoid,avoid,107,"/* To simplify the code, we prevent matches with the string; * of window index 0 (in particular we have to avoid a match; * of the string with itself at the start of the input file).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:6,Usability,simpl,simplify,6,"/* To simplify the code, we prevent matches with the string; * of window index 0 (in particular we have to avoid a match; * of the string with itself at the start of the input file).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:28,Security,hash,hash,28,/* Do not insert strings in hash table beyond this. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:13,Security,hash,hash,13,"/* Insert in hash table all strings up to the end of the match.; * strstart-1 and strstart are already inserted. If there is not; * enough lookahead, the last two strings are not inserted in; * the hash table.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:198,Security,hash,hash,198,"/* Insert in hash table all strings up to the end of the match.; * strstart-1 and strstart are already inserted. If there is not; * enough lookahead, the last two strings are not inserted in; * the hash table.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:184,Security,hash,hash,184,"/* ===========================================================================; * For Z_RLE, simply look for runs of bytes, generate matches only of distance; * one. Do not maintain a hash table. (It will be regenerated if this run of; * deflate switches away from Z_RLE.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:93,Usability,simpl,simply,93,"/* ===========================================================================; * For Z_RLE, simply look for runs of bytes, generate matches only of distance; * one. Do not maintain a hash table. (It will be regenerated if this run of; * deflate switches away from Z_RLE.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:129,Safety,avoid,avoid,129,"/* define NO_GZIP when compiling if you want to disable gzip header and; trailer creation by deflate(). NO_GZIP would be used to avoid linking in; the crc code when it is not needed. For shared libraries, gzip encoding; should be left enabled. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:286,Performance,perform,performed,286,"/* Sliding window. Input bytes are read into the second half of the window,; * and move to the first half later to keep a dictionary of at least wSize; * bytes. With this organization, matches are limited to a distance of; * wSize-MAX_MATCH bytes, but this ensures that IO is always; * performed with a length multiple of the block size. Also, it limits; * the window size to 64K, which is quite useful on MSDOS.; * To do: use the user input buffer as sliding window.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:34,Security,hash,hash,34,"/* Link to older string with same hash index. To limit the size of this; * array to 64K, this link is maintained only for the last 32K strings.; * An index in this array is thus a window index modulo 32K.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:16,Security,hash,hash,16,/* Heads of the hash chains or NIL. */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:3,Security,hash,hash,3,/* hash index of string to be inserted */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:25,Security,hash,hash,25,/* number of elements in hash table */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:163,Security,hash,hash,163,"/* Number of bits by which ins_h must be shifted at each input; * step. It must be such that after MIN_MATCH steps, the oldest; * byte no longer takes part in the hash key, that is:; * hash_shift * MIN_MATCH >= hash_bits; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:26,Security,hash,hash,26,"/* To speed up deflation, hash chains are never searched beyond this; * length. A higher limit improves compression ratio but degrades the; * speed.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:29,Security,hash,hash,29,/* Insert new strings in the hash table only if the match length is not; * greater than this length. This saves time but degrades compression.; * max_insert_length is used only for compression levels <= 3.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:686,Energy Efficiency,adapt,adaptation,686,"/* Size of match buffer for literals/lengths. There are 4 reasons for; * limiting lit_bufsize to 64K:; * - frequencies can be kept in 16 bit counters; * - if compression is not successful for the first block, all input; * data is still in the window so we can still emit a stored block even; * when input comes from standard input. (This can also be done for; * all blocks if lit_bufsize is not greater than 32K.); * - if compression is not successful for a file smaller than 64K, we can; * even emit a stored file instead of a stored block (saving 5 bytes).; * This is applicable only for zip (not gzip or zlib).; * - creating new Huffman trees less frequently may not provide fast; * adaptation to changes in the input data statistics. (Take for; * example a binary file with poorly compressible code followed by; * a highly compressible string table.) Smaller buffer sizes give; * fast adaptation but have of course the overhead of transmitting; * trees more frequently.; * - I can't count above 4; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:889,Energy Efficiency,adapt,adaptation,889,"/* Size of match buffer for literals/lengths. There are 4 reasons for; * limiting lit_bufsize to 64K:; * - frequencies can be kept in 16 bit counters; * - if compression is not successful for the first block, all input; * data is still in the window so we can still emit a stored block even; * when input comes from standard input. (This can also be done for; * all blocks if lit_bufsize is not greater than 32K.); * - if compression is not successful for a file smaller than 64K, we can; * even emit a stored file instead of a stored block (saving 5 bytes).; * This is applicable only for zip (not gzip or zlib).; * - creating new Huffman trees less frequently may not provide fast; * adaptation to changes in the input data statistics. (Take for; * example a binary file with poorly compressible code followed by; * a highly compressible string table.) Smaller buffer sizes give; * fast adaptation but have of course the overhead of transmitting; * trees more frequently.; * - I can't count above 4; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:686,Modifiability,adapt,adaptation,686,"/* Size of match buffer for literals/lengths. There are 4 reasons for; * limiting lit_bufsize to 64K:; * - frequencies can be kept in 16 bit counters; * - if compression is not successful for the first block, all input; * data is still in the window so we can still emit a stored block even; * when input comes from standard input. (This can also be done for; * all blocks if lit_bufsize is not greater than 32K.); * - if compression is not successful for a file smaller than 64K, we can; * even emit a stored file instead of a stored block (saving 5 bytes).; * This is applicable only for zip (not gzip or zlib).; * - creating new Huffman trees less frequently may not provide fast; * adaptation to changes in the input data statistics. (Take for; * example a binary file with poorly compressible code followed by; * a highly compressible string table.) Smaller buffer sizes give; * fast adaptation but have of course the overhead of transmitting; * trees more frequently.; * - I can't count above 4; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:889,Modifiability,adapt,adaptation,889,"/* Size of match buffer for literals/lengths. There are 4 reasons for; * limiting lit_bufsize to 64K:; * - frequencies can be kept in 16 bit counters; * - if compression is not successful for the first block, all input; * data is still in the window so we can still emit a stored block even; * when input comes from standard input. (This can also be done for; * all blocks if lit_bufsize is not greater than 32K.); * - if compression is not successful for a file smaller than 64K, we can; * even emit a stored file instead of a stored block (saving 5 bytes).; * This is applicable only for zip (not gzip or zlib).; * - creating new Huffman trees less frequently may not provide fast; * adaptation to changes in the input data statistics. (Take for; * example a binary file with poorly compressible code followed by; * a highly compressible string table.) Smaller buffer sizes give; * fast adaptation but have of course the overhead of transmitting; * trees more frequently.; * - I can't count above 4; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:28,Usability,simpl,simplify,28,"/* Buffer for distances. To simplify the code, d_buf and l_buf have; * the same number of elements. To use different lengths, an extra flag; * array would be necessary.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:38,Testability,assert,assertion,38,/* Output a byte on the stream.; * IN assertion: there is enough room in pending_buf.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h:15,Usability,simpl,simplify,15,"/* In order to simplify the code, particularly on 16 bit machines, match; * distances are limited to MAX_DIST instead of WSIZE.; */; /* in trees.c */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/deflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:196,Safety,avoid,avoid,196,"/* gzio.c -- IO on .gz files; * Copyright (C) 1995-2005 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; *; * Compile this file with -DNO_GZCOMPRESS to avoid the compression code.; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:3,Availability,error,error,3,/* error code for last stream operation */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:3,Availability,error,error,3,/* error message */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:9,Integrability,message,message,9,/* error message */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:462,Availability,error,error,462,"/* ===========================================================================; Opens a gzip (.gz) file for reading or writing. The mode parameter; is as in fopen (""rb"" or ""wb""). The file is given either by file descriptor; or path name (if fd == -1).; gz_open returns NULL if the file could not be opened or if there was; insufficient memory to allocate the (de)compression state; errno; can be checked to distinguish the two cases (if errno is zero, the; zlib error is Z_MEM_ERROR).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:346,Energy Efficiency,allocate,allocate,346,"/* ===========================================================================; Opens a gzip (.gz) file for reading or writing. The mode parameter; is as in fopen (""rb"" or ""wb""). The file is given either by file descriptor; or path name (if fd == -1).; gz_open returns NULL if the file could not be opened or if there was; insufficient memory to allocate the (de)compression state; errno; can be checked to distinguish the two cases (if errno is zero, the; zlib error is Z_MEM_ERROR).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:16,Usability,simpl,simple,16,/* Write a very simple .gz header:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:82,Deployability,Update,Update,82,/* ===========================================================================; * Update the compression level and strategy; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:110,Deployability,update,update,110,/* ===========================================================================; Read a byte from a gz_stream; update next_in and avail_in. Return EOF; for end of file.; IN assertion: the stream s has been sucessfully opened for reading.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:172,Testability,assert,assertion,172,/* ===========================================================================; Read a byte from a gz_stream; update next_in and avail_in. Return EOF; for end of file.; IN assertion: the stream s has been sucessfully opened for reading.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:319,Testability,assert,assertion,319,"/* ===========================================================================; Check the gzip header of a gz_stream opened for reading. Set the stream; mode to transparent if the gzip magic header is not present; set s->err; to Z_DATA_ERROR if the magic header is present but the rest of the header; is incorrect.; IN assertion: the stream s has already been created sucessfully;; s->stream.avail_in is zero for the first time, but may be non-zero; for concatenated .gz files.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:135,Availability,error,error,135,/* ===========================================================================; * Cleanup then free the given gz_stream. Return a zlib error code.; Try freeing in the reverse order of allocations.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:36,Usability,UX,UX,36,/* fclose is broken for pipes in HP/UX */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:179,Availability,error,error,179,/* ===========================================================================; Reads one byte from the compressed file. gzgetc returns this byte; or -1 in case of end of file or error.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:347,Availability,error,error,347,"/* ===========================================================================; Reads bytes from the compressed file until len-1 characters are; read, or a newline character is read and transferred to buf, or an; end-of-file condition is encountered. The string is then terminated; with a null character.; gzgets returns buf, or Z_NULL in case of error. The current implementation is not optimized at all.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:388,Performance,optimiz,optimized,388,"/* ===========================================================================; Reads bytes from the compressed file until len-1 characters are; read, or a newline character is read and transferred to buf, or an; end-of-file condition is encountered. The string is then terminated; with a null character.; gzgets returns buf, or Z_NULL in case of error. The current implementation is not optimized at all.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:220,Availability,error,error,220,/* ===========================================================================; Writes the given number of uncompressed bytes into the compressed file.; gzwrite returns the number of bytes actually written (0 in case of error).; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:276,Availability,error,error,276,"/* ===========================================================================; Converts, formats, and writes the args to the compressed file under; control of the format string, as in fprintf. gzprintf returns the number of; uncompressed bytes actually written (0 in case of error).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:208,Availability,error,error,208,"/* ===========================================================================; Writes c, converted to an unsigned char, into the compressed file.; gzputc returns the value that was written, or -1 in case of error.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:254,Availability,error,error,254,"/* ===========================================================================; Writes the given null-terminated string to the compressed file, excluding; the terminating null character.; gzputs returns the number of characters written, or -1 in case of error.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:72,Availability,avail,available,72,/* deflate has finished flushing only when it hasn't used up; * all the available space in the output buffer:; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:369,Availability,error,error,369,"/* NO_GZCOMPRESS */; /* ===========================================================================; Sets the starting position for the next gzread or gzwrite on the given; compressed file. The offset represents a number of bytes in the; gzseek returns the resulting offset location as measured in bytes from; the beginning of the uncompressed stream, or -1 in case of error.; SEEK_END is not implemented, returns error.; In this version of the library, gzseek can be extremely slow.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:414,Availability,error,error,414,"/* NO_GZCOMPRESS */; /* ===========================================================================; Sets the starting position for the next gzread or gzwrite on the given; compressed file. The offset represents a number of bytes in the; gzseek returns the resulting offset location as measured in bytes from; the beginning of the uncompressed stream, or -1 in case of error.; SEEK_END is not implemented, returns error.; In this version of the library, gzseek can be extremely slow.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:119,Safety,detect,detected,119,"/* ===========================================================================; Returns 1 when EOF has previously been detected reading the given; input stream, otherwise zero.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:168,Availability,error,error,168,"/* With concatenated compressed files that can have embedded; * crc trailers, z_eof is no longer the only/best indicator of EOF; * on a gz_stream. Handle end-of-stream error explicitly here.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:155,Availability,error,error,155,/* ===========================================================================; Reads a long in LSB order from the given gz_stream. Sets z_err in case; of error.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:92,Availability,error,error,92,"/* ===========================================================================; Returns the error message for the last error which occurred on the; given compressed file. errnum is set to zlib error number. If an; error occurred in the file system and not in the compression library,; errnum is set to Z_ERRNO and the application may consult errno; to get the exact error code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:119,Availability,error,error,119,"/* ===========================================================================; Returns the error message for the last error which occurred on the; given compressed file. errnum is set to zlib error number. If an; error occurred in the file system and not in the compression library,; errnum is set to Z_ERRNO and the application may consult errno; to get the exact error code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:193,Availability,error,error,193,"/* ===========================================================================; Returns the error message for the last error which occurred on the; given compressed file. errnum is set to zlib error number. If an; error occurred in the file system and not in the compression library,; errnum is set to Z_ERRNO and the application may consult errno; to get the exact error code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:214,Availability,error,error,214,"/* ===========================================================================; Returns the error message for the last error which occurred on the; given compressed file. errnum is set to zlib error number. If an; error occurred in the file system and not in the compression library,; errnum is set to Z_ERRNO and the application may consult errno; to get the exact error code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:366,Availability,error,error,366,"/* ===========================================================================; Returns the error message for the last error which occurred on the; given compressed file. errnum is set to zlib error number. If an; error occurred in the file system and not in the compression library,; errnum is set to Z_ERRNO and the application may consult errno; to get the exact error code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:98,Integrability,message,message,98,"/* ===========================================================================; Returns the error message for the last error which occurred on the; given compressed file. errnum is set to zlib error number. If an; error occurred in the file system and not in the compression library,; errnum is set to Z_ERRNO and the application may consult errno; to get the exact error code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:90,Availability,error,error,90,"/* ===========================================================================; Clear the error and end-of-file flags, and do the same for the real file.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:80,Usability,Clear,Clear,80,"/* ===========================================================================; Clear the error and end-of-file flags, and do the same for the real file.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/gzio.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:42,Integrability,interface,interface,42,"/* infback.c -- inflate using a call-back interface; * Copyright (C) 1995-2005 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; This code is largely copied from inflate.c. Normally either infback.o or; inflate.o would be linked into an application--not both. The interface; with inffast.c is retained so that optimized assembler-coded versions of; inflate_fast() can be used with either inflate.c or infback.c.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:308,Integrability,interface,interface,308,"/* infback.c -- inflate using a call-back interface; * Copyright (C) 1995-2005 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; This code is largely copied from inflate.c. Normally either infback.o or; inflate.o would be linked into an application--not both. The interface; with inffast.c is retained so that optimized assembler-coded versions of; inflate_fast() can be used with either inflate.c or infback.c.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:354,Performance,optimiz,optimized,354,"/* infback.c -- inflate using a call-back interface; * Copyright (C) 1995-2005 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; This code is largely copied from inflate.c. Normally either infback.o or; inflate.o would be linked into an application--not both. The interface; with inffast.c is retained so that optimized assembler-coded versions of; inflate_fast() can be used with either inflate.c or infback.c.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:24,Availability,error,error,24,/* in case we return an error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:317,Energy Efficiency,reduce,reduces,317,"/*; Return state with length and distance decoding tables and index sizes set to; fixed code decoding. Normally this returns fixed tables from inffixed.h.; If BUILDFIXED is defined, then instead this routine builds the tables the; first time it's called, and returns those tables the first time and; thereafter. This reduces the size of the code by about 2K bytes, in; exchange for a little execution time. However, BUILDFIXED should not be; used for threaded applications, since the rewriting of the tables and virgin; may not be thread-safe.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:200,Integrability,rout,routine,200,"/*; Return state with length and distance decoding tables and index sizes set to; fixed code decoding. Normally this returns fixed tables from inffixed.h.; If BUILDFIXED is defined, then instead this routine builds the tables the; first time it's called, and returns those tables the first time and; thereafter. This reduces the size of the code by about 2K bytes, in; exchange for a little execution time. However, BUILDFIXED should not be; used for threaded applications, since the rewriting of the tables and virgin; may not be thread-safe.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:538,Safety,safe,safe,538,"/*; Return state with length and distance decoding tables and index sizes set to; fixed code decoding. Normally this returns fixed tables from inffixed.h.; If BUILDFIXED is defined, then instead this routine builds the tables the; first time it's called, and returns those tables the first time and; thereafter. This reduces the size of the code by about 2K bytes, in; exchange for a little execution time. However, BUILDFIXED should not be; used for threaded applications, since the rewriting of the tables and virgin; may not be thread-safe.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:63,Safety,safe,safe,63,/* build fixed huffman tables if first call (may not be thread safe) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:36,Performance,Load,Load,36,/* Macros for inflateBack(): */; /* Load returned state from inflate_fast() */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:3,Usability,Clear,Clear,3,/* Clear the input bit accumulator */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:29,Availability,avail,available,29,"/* Assure that some input is available. If input is requested, but denied,; then return a Z_BUF_ERROR from inflateBack(). */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:87,Availability,error,error,87,"/* Get a byte of input into the bit accumulator, or return from inflateBack(); with an error if there is no input available. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:114,Availability,avail,available,114,"/* Get a byte of input into the bit accumulator, or return from inflateBack(); with an error if there is no input available. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:89,Availability,avail,available,89,"/* Assure that there are at least n bits in the bit accumulator. If there is; not enough available input to do that, then return from inflateBack() with; an error. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:157,Availability,error,error,157,"/* Assure that there are at least n bits in the bit accumulator. If there is; not enough available input to do that, then return from inflateBack() with; an error. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:36,Availability,avail,available,36,"/* Assure that some output space is available, by writing out the window; if it's full. If the write fails, return from inflateBack() with a; Z_BUF_ERROR. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:188,Availability,error,error,188,"/*; strm provides the memory allocation functions and window buffer on input,; and provides information on the unused input on return. For Z_DATA_ERROR; returns, strm will also provide an error message. in() and out() are the call-back input and output functions. When; inflateBack() needs more input, it calls in(). When inflateBack() has; filled the window with output, or when it completes with data in the; window, it calls out() to write out the data. The application must not; change the provided input until in() is called again or inflateBack(); returns. The application must not change the window/output buffer until; inflateBack() returns. in() and out() are called with a descriptor parameter provided in the; inflateBack() call. This parameter can be a structure that provides the; information required to do the read or write, as well as accumulated; information on the input and output such as totals and check values. in() should return zero on failure. out() should return non-zero on; failure. If either in() or out() fails, than inflateBack() returns a; Z_BUF_ERROR. strm->next_in can be checked for Z_NULL to see whether it; was in() or out() that caused in the error. Otherwise, inflateBack(); returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format; error, or Z_MEM_ERROR if it could not allocate memory for the state.; inflateBack() can also return Z_STREAM_ERROR if the input parameters; are not correct, i.e. strm is Z_NULL or the state was not initialized.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:960,Availability,failure,failure,960,"/*; strm provides the memory allocation functions and window buffer on input,; and provides information on the unused input on return. For Z_DATA_ERROR; returns, strm will also provide an error message. in() and out() are the call-back input and output functions. When; inflateBack() needs more input, it calls in(). When inflateBack() has; filled the window with output, or when it completes with data in the; window, it calls out() to write out the data. The application must not; change the provided input until in() is called again or inflateBack(); returns. The application must not change the window/output buffer until; inflateBack() returns. in() and out() are called with a descriptor parameter provided in the; inflateBack() call. This parameter can be a structure that provides the; information required to do the read or write, as well as accumulated; information on the input and output such as totals and check values. in() should return zero on failure. out() should return non-zero on; failure. If either in() or out() fails, than inflateBack() returns a; Z_BUF_ERROR. strm->next_in can be checked for Z_NULL to see whether it; was in() or out() that caused in the error. Otherwise, inflateBack(); returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format; error, or Z_MEM_ERROR if it could not allocate memory for the state.; inflateBack() can also return Z_STREAM_ERROR if the input parameters; are not correct, i.e. strm is Z_NULL or the state was not initialized.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:1002,Availability,failure,failure,1002,"/*; strm provides the memory allocation functions and window buffer on input,; and provides information on the unused input on return. For Z_DATA_ERROR; returns, strm will also provide an error message. in() and out() are the call-back input and output functions. When; inflateBack() needs more input, it calls in(). When inflateBack() has; filled the window with output, or when it completes with data in the; window, it calls out() to write out the data. The application must not; change the provided input until in() is called again or inflateBack(); returns. The application must not change the window/output buffer until; inflateBack() returns. in() and out() are called with a descriptor parameter provided in the; inflateBack() call. This parameter can be a structure that provides the; information required to do the read or write, as well as accumulated; information on the input and output such as totals and check values. in() should return zero on failure. out() should return non-zero on; failure. If either in() or out() fails, than inflateBack() returns a; Z_BUF_ERROR. strm->next_in can be checked for Z_NULL to see whether it; was in() or out() that caused in the error. Otherwise, inflateBack(); returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format; error, or Z_MEM_ERROR if it could not allocate memory for the state.; inflateBack() can also return Z_STREAM_ERROR if the input parameters; are not correct, i.e. strm is Z_NULL or the state was not initialized.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:1181,Availability,error,error,1181,"/*; strm provides the memory allocation functions and window buffer on input,; and provides information on the unused input on return. For Z_DATA_ERROR; returns, strm will also provide an error message. in() and out() are the call-back input and output functions. When; inflateBack() needs more input, it calls in(). When inflateBack() has; filled the window with output, or when it completes with data in the; window, it calls out() to write out the data. The application must not; change the provided input until in() is called again or inflateBack(); returns. The application must not change the window/output buffer until; inflateBack() returns. in() and out() are called with a descriptor parameter provided in the; inflateBack() call. This parameter can be a structure that provides the; information required to do the read or write, as well as accumulated; information on the input and output such as totals and check values. in() should return zero on failure. out() should return non-zero on; failure. If either in() or out() fails, than inflateBack() returns a; Z_BUF_ERROR. strm->next_in can be checked for Z_NULL to see whether it; was in() or out() that caused in the error. Otherwise, inflateBack(); returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format; error, or Z_MEM_ERROR if it could not allocate memory for the state.; inflateBack() can also return Z_STREAM_ERROR if the input parameters; are not correct, i.e. strm is Z_NULL or the state was not initialized.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:1283,Availability,error,error,1283,"/*; strm provides the memory allocation functions and window buffer on input,; and provides information on the unused input on return. For Z_DATA_ERROR; returns, strm will also provide an error message. in() and out() are the call-back input and output functions. When; inflateBack() needs more input, it calls in(). When inflateBack() has; filled the window with output, or when it completes with data in the; window, it calls out() to write out the data. The application must not; change the provided input until in() is called again or inflateBack(); returns. The application must not change the window/output buffer until; inflateBack() returns. in() and out() are called with a descriptor parameter provided in the; inflateBack() call. This parameter can be a structure that provides the; information required to do the read or write, as well as accumulated; information on the input and output such as totals and check values. in() should return zero on failure. out() should return non-zero on; failure. If either in() or out() fails, than inflateBack() returns a; Z_BUF_ERROR. strm->next_in can be checked for Z_NULL to see whether it; was in() or out() that caused in the error. Otherwise, inflateBack(); returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format; error, or Z_MEM_ERROR if it could not allocate memory for the state.; inflateBack() can also return Z_STREAM_ERROR if the input parameters; are not correct, i.e. strm is Z_NULL or the state was not initialized.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:1321,Energy Efficiency,allocate,allocate,1321,"/*; strm provides the memory allocation functions and window buffer on input,; and provides information on the unused input on return. For Z_DATA_ERROR; returns, strm will also provide an error message. in() and out() are the call-back input and output functions. When; inflateBack() needs more input, it calls in(). When inflateBack() has; filled the window with output, or when it completes with data in the; window, it calls out() to write out the data. The application must not; change the provided input until in() is called again or inflateBack(); returns. The application must not change the window/output buffer until; inflateBack() returns. in() and out() are called with a descriptor parameter provided in the; inflateBack() call. This parameter can be a structure that provides the; information required to do the read or write, as well as accumulated; information on the input and output such as totals and check values. in() should return zero on failure. out() should return non-zero on; failure. If either in() or out() fails, than inflateBack() returns a; Z_BUF_ERROR. strm->next_in can be checked for Z_NULL to see whether it; was in() or out() that caused in the error. Otherwise, inflateBack(); returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format; error, or Z_MEM_ERROR if it could not allocate memory for the state.; inflateBack() can also return Z_STREAM_ERROR if the input parameters; are not correct, i.e. strm is Z_NULL or the state was not initialized.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:194,Integrability,message,message,194,"/*; strm provides the memory allocation functions and window buffer on input,; and provides information on the unused input on return. For Z_DATA_ERROR; returns, strm will also provide an error message. in() and out() are the call-back input and output functions. When; inflateBack() needs more input, it calls in(). When inflateBack() has; filled the window with output, or when it completes with data in the; window, it calls out() to write out the data. The application must not; change the provided input until in() is called again or inflateBack(); returns. The application must not change the window/output buffer until; inflateBack() returns. in() and out() are called with a descriptor parameter provided in the; inflateBack() call. This parameter can be a structure that provides the; information required to do the read or write, as well as accumulated; information on the input and output such as totals and check values. in() should return zero on failure. out() should return non-zero on; failure. If either in() or out() fails, than inflateBack() returns a; Z_BUF_ERROR. strm->next_in can be checked for Z_NULL to see whether it; was in() or out() that caused in the error. Otherwise, inflateBack(); returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format; error, or Z_MEM_ERROR if it could not allocate memory for the state.; inflateBack() can also return Z_STREAM_ERROR if the input parameters; are not correct, i.e. strm is Z_NULL or the state was not initialized.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:3,Availability,avail,available,3,/* available input and output */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c:10,Availability,error,error,10,/* handle error breaks in while */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:137,Energy Efficiency,Power,PowerPC,137,"/* Allow machine dependent optimization for post-increment or pre-increment.; Based on testing to date,; Pre-increment preferred for:; - PowerPC G3 (Adler); - MIPS R5000 (Randers-Pehrson); Post-increment preferred for:; - none; No measurable difference:; - Pentium III (Anderson); - M68060 (Nikl); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:17,Integrability,depend,dependent,17,"/* Allow machine dependent optimization for post-increment or pre-increment.; Based on testing to date,; Pre-increment preferred for:; - PowerPC G3 (Adler); - MIPS R5000 (Randers-Pehrson); Post-increment preferred for:; - none; No measurable difference:; - Pentium III (Anderson); - M68060 (Nikl); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:27,Performance,optimiz,optimization,27,"/* Allow machine dependent optimization for post-increment or pre-increment.; Based on testing to date,; Pre-increment preferred for:; - PowerPC G3 (Adler); - MIPS R5000 (Randers-Pehrson); Post-increment preferred for:; - none; No measurable difference:; - Pentium III (Anderson); - M68060 (Nikl); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:87,Testability,test,testing,87,"/* Allow machine dependent optimization for post-increment or pre-increment.; Based on testing to date,; Pre-increment preferred for:; - PowerPC G3 (Adler); - MIPS R5000 (Randers-Pehrson); Post-increment preferred for:; - none; No measurable difference:; - Pentium III (Anderson); - M68060 (Nikl); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:144,Availability,avail,available,144,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:197,Availability,error,error,197,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:630,Availability,avail,available,630,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:724,Availability,error,error,724,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:1059,Availability,avail,available,1059,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:410,Integrability,rout,routine,410,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:1039,Safety,avoid,avoid,1039,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:1284,Safety,avoid,avoid,1284,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:33,Availability,avail,available,33,"/* while in < last, enough input available */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:33,Availability,avail,available,33,"/* while out < end, enough space available */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:3,Energy Efficiency,allocate,allocated,3,"/* allocated sliding window, if wsize != 0 */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:3,Availability,mask,mask,3,/* mask for first level of length codes */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:3,Availability,mask,mask,3,/* mask for first level of distance codes */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:55,Modifiability,variab,variables,55,/* where to copy match from */; /* copy state to local variables */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:3,Integrability,wrap,wrap,3,/* wrap around window */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:3,Deployability,update,update,3,/* update state and return */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:57,Energy Efficiency,Power,PowerPC,57,"/*; inflate_fast() speedups that turned out slower (on a PowerPC G3 750CXe):; - Using bit fields for code structure; - Different op definition to avoid & for extra bits (do & for table bits); - Three separate decoding do-loops for direct, window, and write == 0; - Special case for distance > 1 copies to do overlapped load and store copy; - Explicit branch predictions (based on measured branch probabilities); - Deferring match copy and interspersed it with decoding subsequent codes; - Swapping literal/length else; - Swapping window/direct else; - Larger unrolled copy loops (three is about right); - Moving len -= 3 statement into middle of loop; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:319,Performance,load,load,319,"/*; inflate_fast() speedups that turned out slower (on a PowerPC G3 750CXe):; - Using bit fields for code structure; - Different op definition to avoid & for extra bits (do & for table bits); - Three separate decoding do-loops for direct, window, and write == 0; - Special case for distance > 1 copies to do overlapped load and store copy; - Explicit branch predictions (based on measured branch probabilities); - Deferring match copy and interspersed it with decoding subsequent codes; - Swapping literal/length else; - Swapping window/direct else; - Larger unrolled copy loops (three is about right); - Moving len -= 3 statement into middle of loop; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:146,Safety,avoid,avoid,146,"/*; inflate_fast() speedups that turned out slower (on a PowerPC G3 750CXe):; - Using bit fields for code structure; - Different op definition to avoid & for extra bits (do & for table bits); - Three separate decoding do-loops for direct, window, and write == 0; - Special case for distance > 1 copies to do overlapped load and store copy; - Explicit branch predictions (based on measured branch probabilities); - Deferring match copy and interspersed it with decoding subsequent codes; - Swapping literal/length else; - Swapping window/direct else; - Larger unrolled copy loops (three is about right); - Moving len -= 3 statement into middle of loop; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c:358,Safety,predict,predictions,358,"/*; inflate_fast() speedups that turned out slower (on a PowerPC G3 750CXe):; - Using bit fields for code structure; - Different op definition to avoid & for extra bits (do & for table bits); - Three separate decoding do-loops for direct, window, and write == 0; - Special case for distance > 1 copies to do overlapped load and store copy; - Explicit branch predictions (based on measured branch probabilities); - Deferring match copy and interspersed it with decoding subsequent codes; - Swapping literal/length else; - Swapping window/direct else; - Larger unrolled copy loops (three is about right); - Moving len -= 3 statement into middle of loop; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:544,Availability,avail,available,544,"/* inflate.c -- zlib decompression; * Copyright (C) 1995-2005 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * Change history:; *; * 1.2.beta0 24 Nov 2002; * - First version -- complete rewrite of inflate to simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table(",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:1813,Availability,avail,avail,1813,"inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common write == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inf",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:907,Energy Efficiency,reduce,reduce,907,"/* inflate.c -- zlib decompression; * Copyright (C) 1995-2005 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * Change history:; *; * 1.2.beta0 24 Nov 2002; * - First version -- complete rewrite of inflate to simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table(",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:1362,Energy Efficiency,allocate,allocated,1362,"inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common write == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inf",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:3144,Energy Efficiency,reduce,reduce,3144," speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common write == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to avoid warnings; * - Added inflateCopy() function; *; * 1.2.0 9 Mar 2003; * - Changed inflateBack() interface to provide separate opaque descriptors; * for the in() and out() functions; * - Changed inflateBack() argument and in_func typedef to swap the length; * and buffer address return values for the input function; * - Check next_in and next_out for Z_NULL on entry to inflate(); *; * The history for versions after 1.2.0 are in ChangeLog in zlib distribution.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:890,Integrability,rout,routine,890,"/* inflate.c -- zlib decompression; * Copyright (C) 1995-2005 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * Change history:; *; * 1.2.beta0 24 Nov 2002; * - First version -- complete rewrite of inflate to simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table(",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:2164,Integrability,rout,routine,2164,"-back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common write == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to av",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:2741,Integrability,interface,interface,2741,"ies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common write == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to avoid warnings; * - Added inflateCopy() function; *; * 1.2.0 9 Mar 2003; * - Changed inflateBack() interface to provide separate opaque descriptors; * for the in() and out() functions; * - Changed inflateBack() argument and in_func typedef to swap the length; * and buffer address return values for the input function; * - Check next_in and next_out for Z_NULL on entry ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:2912,Integrability,interface,interface,2912," speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common write == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to avoid warnings; * - Added inflateCopy() function; *; * 1.2.0 9 Mar 2003; * - Changed inflateBack() interface to provide separate opaque descriptors; * for the in() and out() functions; * - Changed inflateBack() argument and in_func typedef to swap the length; * and buffer address return values for the input function; * - Check next_in and next_out for Z_NULL on entry to inflate(); *; * The history for versions after 1.2.0 are in ChangeLog in zlib distribution.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:3520,Integrability,interface,interface,3520," speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common write == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to avoid warnings; * - Added inflateCopy() function; *; * 1.2.0 9 Mar 2003; * - Changed inflateBack() interface to provide separate opaque descriptors; * for the in() and out() functions; * - Changed inflateBack() argument and in_func typedef to swap the length; * and buffer address return values for the input function; * - Check next_in and next_out for Z_NULL on entry to inflate(); *; * The history for versions after 1.2.0 are in ChangeLog in zlib distribution.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:233,Modifiability,rewrite,rewrite,233,"/* inflate.c -- zlib decompression; * Copyright (C) 1995-2005 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * Change history:; *; * 1.2.beta0 24 Nov 2002; * - First version -- complete rewrite of inflate to simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table(",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:2337,Modifiability,variab,variables,2337,"-back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common write == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to av",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:270,Safety,avoid,avoid,270,"/* inflate.c -- zlib decompression; * Copyright (C) 1995-2005 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * Change history:; *; * 1.2.beta0 24 Nov 2002; * - First version -- complete rewrite of inflate to simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table(",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:1154,Safety,avoid,avoid,1154," in zlib.h; */; /*; * Change history:; *; * 1.2.beta0 24 Nov 2002; * - First version -- complete rewrite of inflate to simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to in",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:2006,Safety,avoid,avoid,2006,"hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common write == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:2833,Safety,avoid,avoid,2833,"ies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common write == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to avoid warnings; * - Added inflateCopy() function; *; * 1.2.0 9 Mar 2003; * - Changed inflateBack() interface to provide separate opaque descriptors; * for the in() and out() functions; * - Changed inflateBack() argument and in_func typedef to swap the length; * and buffer address return values for the input function; * - Check next_in and next_out for Z_NULL on entry ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:3421,Safety,avoid,avoid,3421," speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common write == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to avoid warnings; * - Added inflateCopy() function; *; * 1.2.0 9 Mar 2003; * - Changed inflateBack() interface to provide separate opaque descriptors; * for the in() and out() functions; * - Changed inflateBack() argument and in_func typedef to swap the length; * and buffer address return values for the input function; * - Check next_in and next_out for Z_NULL on entry to inflate(); *; * The history for versions after 1.2.0 are in ChangeLog in zlib distribution.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:1270,Testability,assert,assertion,1270,"simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Un",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:255,Usability,simpl,simplify,255,"/* inflate.c -- zlib decompression; * Copyright (C) 1995-2005 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * Change history:; *; * 1.2.beta0 24 Nov 2002; * - First version -- complete rewrite of inflate to simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table(",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:2233,Usability,simpl,simplification,2233,"-back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common write == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to av",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:2572,Usability,Simpl,Simplified,2572,"-back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common write == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to av",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:33,Testability,test,test,33,/* to support ill-conceived Java test suite */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:24,Availability,error,error,24,/* in case we return an error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:317,Energy Efficiency,reduce,reduces,317,"/*; Return state with length and distance decoding tables and index sizes set to; fixed code decoding. Normally this returns fixed tables from inffixed.h.; If BUILDFIXED is defined, then instead this routine builds the tables the; first time it's called, and returns those tables the first time and; thereafter. This reduces the size of the code by about 2K bytes, in; exchange for a little execution time. However, BUILDFIXED should not be; used for threaded applications, since the rewriting of the tables and virgin; may not be thread-safe.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:200,Integrability,rout,routine,200,"/*; Return state with length and distance decoding tables and index sizes set to; fixed code decoding. Normally this returns fixed tables from inffixed.h.; If BUILDFIXED is defined, then instead this routine builds the tables the; first time it's called, and returns those tables the first time and; thereafter. This reduces the size of the code by about 2K bytes, in; exchange for a little execution time. However, BUILDFIXED should not be; used for threaded applications, since the rewriting of the tables and virgin; may not be thread-safe.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:538,Safety,safe,safe,538,"/*; Return state with length and distance decoding tables and index sizes set to; fixed code decoding. Normally this returns fixed tables from inffixed.h.; If BUILDFIXED is defined, then instead this routine builds the tables the; first time it's called, and returns those tables the first time and; thereafter. This reduces the size of the code by about 2K bytes, in; exchange for a little execution time. However, BUILDFIXED should not be; used for threaded applications, since the rewriting of the tables and virgin; may not be thread-safe.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:63,Safety,safe,safe,63,/* build fixed huffman tables if first call (may not be thread safe) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:237,Usability,simpl,simply,237,"/*; Write out the inffixed.h that is #include'd above. Defining MAKEFIXED also; defines BUILDFIXED, so the tables are built on the fly. makefixed() writes; those tables to stdout, which would be piped to inffixed.h. A small program; can simply call makefixed to do this:. void makefixed(void);. int main(void); {; makefixed();; return 0;; }. Then that can be linked with zlib built with MAKEFIXED defined and run:. a.out > inffixed.h; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:21,Deployability,Update,Update,21,"/* MAKEFIXED */; /*; Update the window with the last wsize (normally 32K) bytes written before; returning. If window does not exist yet, create it. This is only called; when a window is already in use, or when output has been written during this; inflate call, but the end of the deflate stream has not been reached yet.; It is also called to create a window for dictionary data when a dictionary; is loaded. Providing output buffers larger than 32K to inflate() should provide a speed; advantage, since only the last 32K of output is copied to the sliding window; upon return from inflate(), and since all distances after the first 32K of; output will fall in the output data, making match copies simpler and faster.; The advantage may be dependent on the size of the processor's data caches.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:740,Integrability,depend,dependent,740,"/* MAKEFIXED */; /*; Update the window with the last wsize (normally 32K) bytes written before; returning. If window does not exist yet, create it. This is only called; when a window is already in use, or when output has been written during this; inflate call, but the end of the deflate stream has not been reached yet.; It is also called to create a window for dictionary data when a dictionary; is loaded. Providing output buffers larger than 32K to inflate() should provide a speed; advantage, since only the last 32K of output is copied to the sliding window; upon return from inflate(), and since all distances after the first 32K of; output will fall in the output data, making match copies simpler and faster.; The advantage may be dependent on the size of the processor's data caches.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:401,Performance,load,loaded,401,"/* MAKEFIXED */; /*; Update the window with the last wsize (normally 32K) bytes written before; returning. If window does not exist yet, create it. This is only called; when a window is already in use, or when output has been written during this; inflate call, but the end of the deflate stream has not been reached yet.; It is also called to create a window for dictionary data when a dictionary; is loaded. Providing output buffers larger than 32K to inflate() should provide a speed; advantage, since only the last 32K of output is copied to the sliding window; upon return from inflate(), and since all distances after the first 32K of; output will fall in the output data, making match copies simpler and faster.; The advantage may be dependent on the size of the processor's data caches.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:786,Performance,cache,caches,786,"/* MAKEFIXED */; /*; Update the window with the last wsize (normally 32K) bytes written before; returning. If window does not exist yet, create it. This is only called; when a window is already in use, or when output has been written during this; inflate call, but the end of the deflate stream has not been reached yet.; It is also called to create a window for dictionary data when a dictionary; is loaded. Providing output buffers larger than 32K to inflate() should provide a speed; advantage, since only the last 32K of output is copied to the sliding window; upon return from inflate(), and since all distances after the first 32K of; output will fall in the output data, making match copies simpler and faster.; The advantage may be dependent on the size of the processor's data caches.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:698,Usability,simpl,simpler,698,"/* MAKEFIXED */; /*; Update the window with the last wsize (normally 32K) bytes written before; returning. If window does not exist yet, create it. This is only called; when a window is already in use, or when output has been written during this; inflate call, but the end of the deflate stream has not been reached yet.; It is also called to create a window for dictionary data when a dictionary; is loaded. Providing output buffers larger than 32K to inflate() should provide a speed; advantage, since only the last 32K of output is copied to the sliding window; upon return from inflate(), and since all distances after the first 32K of; output will fall in the output data, making match copies simpler and faster.; The advantage may be dependent on the size of the processor's data caches.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:35,Energy Efficiency,allocate,allocate,35,"/* if it hasn't been done already, allocate space for the window */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:3,Performance,Load,Load,3,/* Load registers with state in inflate() for speed */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:3,Usability,Clear,Clear,3,/* Clear the input bit accumulator */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:96,Availability,avail,available,96,"/* Get a byte of input into the bit accumulator, or return from inflate(); if there is no input available. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:89,Availability,avail,available,89,"/* Assure that there are at least n bits in the bit accumulator. If there is; not enough available input to do that, then return from inflate(). */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:673,Availability,avail,available,673,"/*; inflate() uses a state machine to process as much input data and generate as; much output data as possible before returning. The state machine is; structured roughly as follows:. for (;;) switch (state) {; ...; case STATEn:; if (not enough input data or output space to make progress); return;; ... make progress ...; state = STATEm;; break;; ...; }. so when inflate() is called again, the same case is attempted again, and; if the appropriate resources are provided, the machine proceeds to the; next state. The NEEDBITS() macro is usually the way the state evaluates; whether it can proceed or should return. NEEDBITS() does the return if; the requested bits are not available. The typical use of the BITS macros; is:. NEEDBITS(n);; ... do something with BITS(n) ...; DROPBITS(n);. where NEEDBITS(n) either returns from inflate() if there isn't enough; input left to load n bits into the accumulator, or it continues. BITS(n); gives the low n bits in the accumulator. When done, DROPBITS(n) drops; the low n bits off the accumulator. INITBITS() clears the accumulator; and sets the number of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is a",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:1098,Availability,avail,available,1098,"; much output data as possible before returning. The state machine is; structured roughly as follows:. for (;;) switch (state) {; ...; case STATEn:; if (not enough input data or output space to make progress); return;; ... make progress ...; state = STATEm;; break;; ...; }. so when inflate() is called again, the same case is attempted again, and; if the appropriate resources are provided, the machine proceeds to the; next state. The NEEDBITS() macro is usually the way the state evaluates; whether it can proceed or should return. NEEDBITS() does the return if; the requested bits are not available. The typical use of the BITS macros; is:. NEEDBITS(n);; ... do something with BITS(n) ...; DROPBITS(n);. where NEEDBITS(n) either returns from inflate() if there isn't enough; input left to load n bits into the accumulator, or it continues. BITS(n); gives the low n bits in the accumulator. When done, DROPBITS(n) drops; the low n bits off the accumulator. INITBITS() clears the accumulator; and sets the number of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:1333,Availability,avail,available,1333,"..; }. so when inflate() is called again, the same case is attempted again, and; if the appropriate resources are provided, the machine proceeds to the; next state. The NEEDBITS() macro is usually the way the state evaluates; whether it can proceed or should return. NEEDBITS() does the return if; the requested bits are not available. The typical use of the BITS macros; is:. NEEDBITS(n);; ... do something with BITS(n) ...; DROPBITS(n);. where NEEDBITS(n) either returns from inflate() if there isn't enough; input left to load n bits into the accumulator, or it continues. BITS(n); gives the low n bits in the accumulator. When done, DROPBITS(n) drops; the low n bits off the accumulator. INITBITS() clears the accumulator; and sets the number of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:1393,Availability,avail,available,1393,"..; }. so when inflate() is called again, the same case is attempted again, and; if the appropriate resources are provided, the machine proceeds to the; next state. The NEEDBITS() macro is usually the way the state evaluates; whether it can proceed or should return. NEEDBITS() does the return if; the requested bits are not available. The typical use of the BITS macros; is:. NEEDBITS(n);; ... do something with BITS(n) ...; DROPBITS(n);. where NEEDBITS(n) either returns from inflate() if there isn't enough; input left to load n bits into the accumulator, or it continues. BITS(n); gives the low n bits in the accumulator. When done, DROPBITS(n) drops; the low n bits off the accumulator. INITBITS() clears the accumulator; and sets the number of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:2108,Availability,avail,available,2108," of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine whether any progress has been made; during that inflate() call in order to return the proper return code.; Progress is defined as a change in either strm->avail_in or strm->avail_out.; When there is a window, goto inf_leave will update the window with the last; output written. If a goto inf_leave occurs in the middle of decompression; and there is no window currently, goto inf_leave will create one and copy; output to the window for the next call of inflate(). In this implementation, the flush parameter of inflate() only affects the; return code (per zlib.h). inflate() always writes as much as possible to; strm->next_out, given the space available and the provided input--the effect; documented in zlib.h of Z_SYNC_FLUSH. Furthermore, inf",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:2995,Availability,avail,available,2995,"enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine whether any progress has been made; during that inflate() call in order to return the proper return code.; Progress is defined as a change in either strm->avail_in or strm->avail_out.; When there is a window, goto inf_leave will update the window with the last; output written. If a goto inf_leave occurs in the middle of decompression; and there is no window currently, goto inf_leave will create one and copy; output to the window for the next call of inflate(). In this implementation, the flush parameter of inflate() only affects the; return code (per zlib.h). inflate() always writes as much as possible to; strm->next_out, given the space available and the provided input--the effect; documented in zlib.h of Z_SYNC_FLUSH. Furthermore, inflate() always defers; the allocation of and copying into a sliding window until necessary, which; provides the effect documented in zlib.h for Z_FINISH when the entire input; stream available. So the only thing the flush parameter actually does is:; when flush is set to Z_FINISH, inflate() cannot return Z_OK. Instead it; will return Z_BUF_ERROR if it has not reached the end of the stream.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:3277,Availability,avail,available,3277,"enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine whether any progress has been made; during that inflate() call in order to return the proper return code.; Progress is defined as a change in either strm->avail_in or strm->avail_out.; When there is a window, goto inf_leave will update the window with the last; output written. If a goto inf_leave occurs in the middle of decompression; and there is no window currently, goto inf_leave will create one and copy; output to the window for the next call of inflate(). In this implementation, the flush parameter of inflate() only affects the; return code (per zlib.h). inflate() always writes as much as possible to; strm->next_out, given the space available and the provided input--the effect; documented in zlib.h of Z_SYNC_FLUSH. Furthermore, inflate() always defers; the allocation of and copying into a sliding window until necessary, which; provides the effect documented in zlib.h for Z_FINISH when the entire input; stream available. So the only thing the flush parameter actually does is:; when flush is set to Z_FINISH, inflate() cannot return Z_OK. Instead it; will return Z_BUF_ERROR if it has not reached the end of the stream.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:2283,Deployability,update,update,2283,"te of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine whether any progress has been made; during that inflate() call in order to return the proper return code.; Progress is defined as a change in either strm->avail_in or strm->avail_out.; When there is a window, goto inf_leave will update the window with the last; output written. If a goto inf_leave occurs in the middle of decompression; and there is no window currently, goto inf_leave will create one and copy; output to the window for the next call of inflate(). In this implementation, the flush parameter of inflate() only affects the; return code (per zlib.h). inflate() always writes as much as possible to; strm->next_out, given the space available and the provided input--the effect; documented in zlib.h of Z_SYNC_FLUSH. Furthermore, inflate() always defers; the allocation of and copying into a sliding window until necessary, which; provides the effect documented in zlib.h for Z_FINISH when the entire input; stream available. So the only thing the flush parameter actually does is:; ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:2311,Deployability,update,update,2311,"te of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine whether any progress has been made; during that inflate() call in order to return the proper return code.; Progress is defined as a change in either strm->avail_in or strm->avail_out.; When there is a window, goto inf_leave will update the window with the last; output written. If a goto inf_leave occurs in the middle of decompression; and there is no window currently, goto inf_leave will create one and copy; output to the window for the next call of inflate(). In this implementation, the flush parameter of inflate() only affects the; return code (per zlib.h). inflate() always writes as much as possible to; strm->next_out, given the space available and the provided input--the effect; documented in zlib.h of Z_SYNC_FLUSH. Furthermore, inflate() always defers; the allocation of and copying into a sliding window until necessary, which; provides the effect documented in zlib.h for Z_FINISH when the entire input; stream available. So the only thing the flush parameter actually does is:; ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:2578,Deployability,update,update,2578,"enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine whether any progress has been made; during that inflate() call in order to return the proper return code.; Progress is defined as a change in either strm->avail_in or strm->avail_out.; When there is a window, goto inf_leave will update the window with the last; output written. If a goto inf_leave occurs in the middle of decompression; and there is no window currently, goto inf_leave will create one and copy; output to the window for the next call of inflate(). In this implementation, the flush parameter of inflate() only affects the; return code (per zlib.h). inflate() always writes as much as possible to; strm->next_out, given the space available and the provided input--the effect; documented in zlib.h of Z_SYNC_FLUSH. Furthermore, inflate() always defers; the allocation of and copying into a sliding window until necessary, which; provides the effect documented in zlib.h for Z_FINISH when the entire input; stream available. So the only thing the flush parameter actually does is:; when flush is set to Z_FINISH, inflate() cannot return Z_OK. Instead it; will return Z_BUF_ERROR if it has not reached the end of the stream.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:1420,Modifiability,variab,variable,1420,"the machine proceeds to the; next state. The NEEDBITS() macro is usually the way the state evaluates; whether it can proceed or should return. NEEDBITS() does the return if; the requested bits are not available. The typical use of the BITS macros; is:. NEEDBITS(n);; ... do something with BITS(n) ...; DROPBITS(n);. where NEEDBITS(n) either returns from inflate() if there isn't enough; input left to load n bits into the accumulator, or it continues. BITS(n); gives the low n bits in the accumulator. When done, DROPBITS(n) drops; the low n bits off the accumulator. INITBITS() clears the accumulator; and sets the number of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine whether any progress has been made; during that inflate() call in order to return the proper return code.; Progress is defi",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:873,Performance,load,load,873,"/*; inflate() uses a state machine to process as much input data and generate as; much output data as possible before returning. The state machine is; structured roughly as follows:. for (;;) switch (state) {; ...; case STATEn:; if (not enough input data or output space to make progress); return;; ... make progress ...; state = STATEm;; break;; ...; }. so when inflate() is called again, the same case is attempted again, and; if the appropriate resources are provided, the machine proceeds to the; next state. The NEEDBITS() macro is usually the way the state evaluates; whether it can proceed or should return. NEEDBITS() does the return if; the requested bits are not available. The typical use of the BITS macros; is:. NEEDBITS(n);; ... do something with BITS(n) ...; DROPBITS(n);. where NEEDBITS(n) either returns from inflate() if there isn't enough; input left to load n bits into the accumulator, or it continues. BITS(n); gives the low n bits in the accumulator. When done, DROPBITS(n) drops; the low n bits off the accumulator. INITBITS() clears the accumulator; and sets the number of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is a",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:1051,Usability,clear,clears,1051,"; much output data as possible before returning. The state machine is; structured roughly as follows:. for (;;) switch (state) {; ...; case STATEn:; if (not enough input data or output space to make progress); return;; ... make progress ...; state = STATEm;; break;; ...; }. so when inflate() is called again, the same case is attempted again, and; if the appropriate resources are provided, the machine proceeds to the; next state. The NEEDBITS() macro is usually the way the state evaluates; whether it can proceed or should return. NEEDBITS() does the return if; the requested bits are not available. The typical use of the BITS macros; is:. NEEDBITS(n);; ... do something with BITS(n) ...; DROPBITS(n);. where NEEDBITS(n) either returns from inflate() if there isn't enough; input left to load n bits into the accumulator, or it continues. BITS(n); gives the low n bits in the accumulator. When done, DROPBITS(n) drops; the low n bits off the accumulator. INITBITS() clears the accumulator; and sets the number of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:10,Availability,error,error,10,/* handle error breaks in while */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:144,Availability,error,error,144,"/*; Return from inflate(), updating the total counts and the check value.; If there was no progress during the inflate() call, return a buffer; error. Call updatewindow() to create and/or update the window state.; Note: a memory error from inflate() is non-recoverable.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:229,Availability,error,error,229,"/*; Return from inflate(), updating the total counts and the check value.; If there was no progress during the inflate() call, return a buffer; error. Call updatewindow() to create and/or update the window state.; Note: a memory error from inflate() is non-recoverable.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:257,Availability,recover,recoverable,257,"/*; Return from inflate(), updating the total counts and the check value.; If there was no progress during the inflate() call, return a buffer; error. Call updatewindow() to create and/or update the window state.; Note: a memory error from inflate() is non-recoverable.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:156,Deployability,update,updatewindow,156,"/*; Return from inflate(), updating the total counts and the check value.; If there was no progress during the inflate() call, return a buffer; error. Call updatewindow() to create and/or update the window state.; Note: a memory error from inflate() is non-recoverable.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:188,Deployability,update,update,188,"/*; Return from inflate(), updating the total counts and the check value.; If there was no progress during the inflate() call, return a buffer; error. Call updatewindow() to create and/or update the window state.; Note: a memory error from inflate() is non-recoverable.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:257,Safety,recover,recoverable,257,"/*; Return from inflate(), updating the total counts and the check value.; If there was no progress during the inflate() call, return a buffer; error. Call updatewindow() to create and/or update the window state.; Note: a memory error from inflate() is non-recoverable.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:203,Deployability,update,updated,203,"/*; Search buf[0..len-1] for the pattern: 0, 0, 0xff, 0xff. Return when found; or when out of input. When called, *have is the number of pattern bytes; found in order so far, in 0..3. On return *have is updated to the new; state. If on return *have equals four, then the pattern was found and the; return value is how many bytes were read including the last byte of the; pattern. If *have is less than four, then the pattern has not been found; yet and the return value is len. In the latter case, syncsearch() can be; called again with more data and the *have state. *have is initialized to; zero for the first call.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:10,Availability,avail,available,10,/* search available input */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:181,Safety,safe,safety,181,"/*; Returns true if inflate is currently at the end of a block generated by; Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP; implementation to provide an additional safety check. PPP uses; Z_SYNC_FLUSH but removes the length bytes of the resulting empty stored; block. When decompressing, PPP checks that at the end of input packet,; inflate is waiting for these length bytes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:3,Energy Efficiency,allocate,allocate,3,/* allocate space */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.h:486,Safety,avoid,avoid,486,"/* inflate.h -- internal inflate state definition; * Copyright (C) 1995-2004 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* WARNING: this file should *not* be used by applications. It is; part of the implementation of the compression library and is; subject to change. Applications should only use zlib.h.; */; /* define NO_GZIP when compiling if you want to disable gzip header and; trailer decoding by inflate(). NO_GZIP would be used to avoid linking in; the crc code when it is not needed. For shared libraries, gzip decoding; should be left enabled. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.h:14,Availability,error,error,14,/* got a data error -- remain here until reset */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.h:27,Availability,error,error,27,/* got an inflate() memory error -- remain here until reset */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.h:15,Integrability,synchroniz,synchronization,15,/* looking for synchronization bytes to restart inflate() */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.h:3,Testability,log,log,3,/* log base 2 of requested window size */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.h:3,Energy Efficiency,allocate,allocated,3,"/* allocated sliding window, if needed */; /* bit accumulator */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.h:8,Availability,avail,available,8,/* next available space in codes[] */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c:44,Energy Efficiency,efficient,efficient,44,"/* inftrees.c -- generate Huffman trees for efficient decoding; * Copyright (C) 1995-2005 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c:721,Availability,avail,available,721,"/*; If you use the zlib library in a product, an acknowledgment is welcome; in the documentation of your product. If for some reason you cannot; include such an acknowledgment, I would appreciate that you keep this; copyright string in the executable of your product.; */; /*; Build a set of tables to decode the provided canonical Huffman code.; The code lengths are lens[0..codes-1]. The result starts at *table,; whose indices are 0..2^bits-1. work is a writable array of at least; lens shorts, which is used as a work area. type is the type of code; to be generated, CODES, LENS, or DISTS. On return, zero is success,; -1 is an invalid code, and +1 means that ENOUGH isn't enough. table; on return points to the next available entry's address. bits is the; requested root table index bits, and on return it is the actual root; table index bits. It will differ if the request is greater than the; longest code or if it is less than the shortest code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c:26,Availability,avail,available,26,/* number of prefix codes available */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c:3,Availability,mask,mask,3,/* mask for low root bits */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c:8,Availability,avail,available,8,/* next available space in table */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c:734,Integrability,rout,routine,734,"/*; Process a set of code lengths to create a canonical Huffman code. The; code lengths are lens[0..codes-1]. Each length corresponds to the; symbols 0..codes-1. The Huffman code is generated by first sorting the; symbols by length from short to long, and retaining the symbol order; for codes with equal lengths. Then the code starts with all zero bits; for the first code of the shortest length, and the codes are integer; increments for the same length, and zeros are appended as the length; increases. For the deflate format, these bits are stored backwards; from their more natural integer increment ordering, and so when the; decoding tables are built in the large loop below, the integer codes; are incremented backwards. This routine assumes, but does not check, that all of the entries in; lens[] are in the range 0..MAXBITS. The caller must assure this.; 1..MAXBITS is interpreted as that code length. zero means that that; symbol does not occur in this code. The codes are sorted by computing a count of codes for each length,; creating from that a table of starting indices for each length in the; sorted table, and then entering the symbols in order in the sorted; table. The sorted table is work[], with that space being provided by; the caller. The length counts are used for other purposes as well, i.e. finding; the minimum and maximum length codes, determining if there are any; codes at all, checking for a valid set of lengths, and looking ahead; at length counts to determine sub-table sizes when building the; decoding tables.; */; /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c:28,Availability,error,error,28,/* make a table to force an error */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c:47,Availability,error,error,47,"/* no symbols, but wait for decoding to report error */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c:1032,Energy Efficiency,allocate,allocated,1032,"/*; Create and fill in decoding tables. In this loop, the table being; filled is at next and has curr index bits. The code being used is huff; with length len. That code is converted to an index by dropping drop; bits off of the bottom. For codes where len is less than drop + curr,; those top drop + curr - len bits are incremented through all values to; fill the table with replicated entries. root is the number of index bits for the root table. When len exceeds; root, sub-tables are created pointed to by the root entry with an index; of the low root bits of huff. This is saved in low to check for when a; new sub-table should be started. drop is zero when the root table is; being filled, and drop is root when sub-tables are being filled. When a new sub-table is needed, it is necessary to look ahead in the; code lengths to determine what size sub-table is needed. The length; counts are used for this, and so count[] is decremented as codes are; entered in the tables. used keeps track of how many table entries have been allocated from the; provided *table space. It is checked when a LENS table is being made; against the space in *table, ENOUGH, minus the maximum space needed by; the worst case distance code, MAXD. This should never happen, but the; sufficiency of ENOUGH has not been proven exhaustively, hence the check.; This assumes that when type == LENS, bits == 9. sym increments through all symbols, and the loop terminates when; all codes of length max, i.e. all codes, have been processed. This; routine permits incomplete codes, so another loop after this one fills; in the rest of the decoding tables with invalid code markers.; */; /* set up for code type */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c:1521,Integrability,rout,routine,1521,"/*; Create and fill in decoding tables. In this loop, the table being; filled is at next and has curr index bits. The code being used is huff; with length len. That code is converted to an index by dropping drop; bits off of the bottom. For codes where len is less than drop + curr,; those top drop + curr - len bits are incremented through all values to; fill the table with replicated entries. root is the number of index bits for the root table. When len exceeds; root, sub-tables are created pointed to by the root entry with an index; of the low root bits of huff. This is saved in low to check for when a; new sub-table should be started. drop is zero when the root table is; being filled, and drop is root when sub-tables are being filled. When a new sub-table is needed, it is necessary to look ahead in the; code lengths to determine what size sub-table is needed. The length; counts are used for this, and so count[] is decremented as codes are; entered in the tables. used keeps track of how many table entries have been allocated from the; provided *table space. It is checked when a LENS table is being made; against the space in *table, ENOUGH, minus the maximum space needed by; the worst case distance code, MAXD. This should never happen, but the; sufficiency of ENOUGH has not been proven exhaustively, hence the check.; This assumes that when type == LENS, bits == 9. sym increments through all symbols, and the loop terminates when; all codes of length max, i.e. all codes, have been processed. This; routine permits incomplete codes, so another loop after this one fills; in the rest of the decoding tables with invalid code markers.; */; /* set up for code type */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c:3,Availability,mask,mask,3,/* mask for comparing low */; /* check available table space */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c:39,Availability,avail,available,39,/* mask for comparing low */; /* check available table space */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c:22,Deployability,update,update,22,"/* go to next symbol, update count, len */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.h:534,Safety,safe,safe,534,"/* op values as set by inflate_table():; 00000000 - literal; 0000tttt - table link, tttt != 0 is the number of table index bits; 0001eeee - length or distance, eeee is the number of extra bits; 01100000 - end of block; 01000000 - invalid code; */; /* Maximum size of dynamic tree. The maximum found in a long but non-; exhaustive search was 1444 code structures (852 for length/literals; and 592 for distances, the latter actually the result of an; exhaustive search). The true maximum is not known, but the value; below is more than safe. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/inftrees.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inftrees.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:721,Availability,Avail,Available,721,"/* trees.c -- output deflated data using Huffman coding; * Copyright (C) 1995-2005 Jean-loup Gailly; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * ALGORITHM; *; * The ""deflation"" process uses several Huffman trees. The more; * common source values are represented by shorter bit sequences.; *; * Each code tree is stored in a compressed form which is itself; * a Huffman encoding of the lengths of all the code strings (in; * ascending order by source values). The actual code strings are; * reconstructed from the lengths in the inflate process, as described; * in the deflate specification.; *; * REFERENCES; *; * Deutsch, L.P.,""'Deflate' Compressed Data Format Specification"".; * Available in ftp.uu.net:/pub/archiving/zip/doc/deflate-1.1.doc; *; * Storer, James A.; * Data Compression: Methods and Theory, pp. 49-50.; * Computer Science Press, 1988. ISBN 0-7167-8156-5.; *; * Sedgewick, R.; * Algorithms, p290.; * Addison-Wesley, 1983. ISBN 0-201-06672-6.; */; /* @(#) $Id$ */; /* #define GEN_TREES_H */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:90,Safety,avoid,avoid,90,"/* The lengths of the bit length codes are sent in order of decreasing; * probability, to avoid transmitting the lengths for unused bit length codes.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:97,Integrability,rout,routines,97,/* ===========================================================================; * Local (static) routines in this file.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:128,Testability,assert,assertion,128,/* ===========================================================================; * Output a short LSB first on the stream.; * IN assertion: there is enough room in pendingBuf.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:128,Testability,assert,assertion,128,/* ===========================================================================; * Send a value on a given number of bits.; * IN assertion: length <= 16 and value fits in length bits.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:37,Modifiability,variab,variables,37,"/* For some embedded targets, global variables are not initialized: */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:250,Deployability,Update,Updates,250,/* Index within the heap array of least frequent node in the Huffman tree */; /* ===========================================================================; * Remove the smallest element from the heap and recreate the heap with; * one less element. Updates heap and heap_len.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:118,Availability,down,down,118,"/* ===========================================================================; * Restore the heap property by moving down the tree starting at node k,; * exchanging a node with the smallest of its two sons if necessary, stopping; * when the heap property is re-established (each father smaller than its; * two sons).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:16,Availability,down,down,16,/* node to move down */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:16,Availability,down,down,16,"/* And continue down the tree, setting j to the left son of k */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:129,Deployability,update,update,129,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:472,Deployability,update,updated,472,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:500,Deployability,update,updated,500,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:189,Testability,assert,assertion,189,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:319,Testability,assert,assertions,319,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:17,Availability,down,down,17,/* move one leaf down the tree */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:109,Usability,simpl,simpler,109,"/* Now recompute all bit lengths, scanning in increasing frequency.; * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all; * lengths instead of fixing only the wrong ones. This idea is taken; * from 'ar' written by Haruhiko Okumura.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:171,Testability,assert,assertion,171,/* ===========================================================================; * Generate the codes for a given tree and bit counts (which need not be; * optimal).; * IN assertion: the array bl_count contains the bit length statistics for; * the given tree and the field len is set for all tree elements.; * OUT assertion: the field code is set for all tree elements of non; * zero code length.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:313,Testability,assert,assertion,313,/* ===========================================================================; * Generate the codes for a given tree and bit counts (which need not be; * optimal).; * IN assertion: the array bl_count contains the bit length statistics for; * the given tree and the field len is set for all tree elements.; * OUT assertion: the field code is set for all tree elements of non; * zero code length.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:158,Deployability,Update,Update,158,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:397,Deployability,update,updated,397,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:428,Deployability,update,updated,428,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:215,Testability,assert,assertion,215,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:278,Testability,assert,assertions,278,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:163,Safety,avoid,avoid,163,"/* The pkzip format requires that at least one distance code exists,; * and that at least one bit should be sent even if there is only one; * possible code. So to avoid special checks later on we force at least; * two codes of non zero frequency.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:3,Deployability,Update,Update,3,/* Update opt_len to include the bit length tree and counts */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:237,Testability,assert,assertion,237,"/* ===========================================================================; * Send the header for a block using dynamic Huffman trees: the counts, the; * lengths of the bit length codes, the literal tree and the distance tree.; * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:585,Usability,simpl,simplify,585,"/* ===========================================================================; * Send one empty static block to give enough lookahead for inflate.; * This takes 10 bits, of which 7 may remain in the bit buffer.; * The current inflate code requires 9 bits of lookahead. If the; * last two codes for the previous block (real code plus EOB) were coded; * on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode; * the last real code. In this case we send two empty static blocks instead; * of one. (There are no problems if the previous block is stored or fixed.); * To simplify the code, we assume the worst case of last real code encoded; * on one bit only.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:7,Testability,test,test,7,"/* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.; * Otherwise we can't have processed more than WSIZE input bytes since; * the last block flush, because compression would have been; * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to; * transform a block into a stored block.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:49,Integrability,wrap,wraparound,49,/* We avoid equality with lit_bufsize because of wraparound at 64K; * on 16 bit machines and because stored blocks are restricted to; * 64K-1 bytes.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c:6,Safety,avoid,avoid,6,/* We avoid equality with lit_bufsize because of wraparound at 64K; * on 16 bit machines and because stored blocks are restricted to; * 64K-1 bytes.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zconf.h:14,Deployability,configurat,configuration,14,"/* zconf.h -- configuration of the zlib compression library; * Copyright (C) 1995-2003 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zconf.h:14,Modifiability,config,configuration,14,"/* zconf.h -- configuration of the zlib compression library; * Copyright (C) 1995-2003 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zconf.h:61,Energy Efficiency,allocate,allocate,61,/*; * Compile with -DMAXSEG_64K if the alloc function cannot allocate more; * than 64k bytes at a time (needed on systems with 16-bit int).; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zconf.h:243,Energy Efficiency,reduce,reduce,243,"/* The memory requirements for deflate are (in bytes):; (1 << (windowBits+2)) + (1 << (memLevel+9)); that is: 128K for windowBits=15 + 128K for memLevel = 8 (default values); plus a few kilobytes for small objects. For example, if you want to reduce; the default memory requirements from 256K to 128K, compile with; make CFLAGS=""-O -DMAX_WBITS=14 -DMAX_MEM_LEVEL=7""; Of course this will generally degrade compression (there's no free lunch). The memory requirements for inflate are (in bytes) 1 << windowBits; that is, 32K for windowBits=15 (default value) plus a few kilobytes; for small objects.; */; /* Type declarations */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zconf.h:153,Testability,test,tested,153,"/* The following definitions for FAR are needed only for MSDOS mixed; * model programming (small or medium model with some far allocations).; * This was tested only with MSC; for other MSDOS compilers you may have; * to define NO_MEMCPY in zutil.h. If you don't need the mixed model,; * just define FAR to be empty.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zconf.h:105,Performance,perform,performance,105,"/* If building or using zlib as a DLL, define ZLIB_DLL.; * This is not mandatory, but it offers a little performance increase.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:13,Integrability,interface,interface,13,"/* zlib.h -- interface of the 'zlib' general purpose compression library; version 1.2.3, July 18th, 2005. Copyright (C) 1995-2005 Jean-loup Gailly and Mark Adler. This software is provided 'as-is', without any express or implied; warranty. In no event will the authors be held liable for any damages; arising from the use of this software. Permission is granted to anyone to use this software for any purpose,; including commercial applications, and to alter it and redistribute it; freely, subject to the following restrictions:. 1. The origin of this software must not be misrepresented; you must not; claim that you wrote the original software. If you use this software; in a product, an acknowledgment in the product documentation would be; appreciated but is not required.; 2. Altered source versions must be plainly marked as such, and must not be; misrepresented as being the original software.; 3. This notice may not be removed or altered from any source distribution. Jean-loup Gailly Mark Adler; jloup@gzip.org madler@alumni.caltech.edu. The data format used by the zlib library is described by RFCs (Request for; Comments) 1950 to 1952 in the files http://www.ietf.org/rfc/rfc1950.txt; (zlib format), rfc1951.txt (deflate format) and rfc1952.txt (gzip format).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1527,Deployability,install,install,1527,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed; data. This version of the library supports only one compression method; (deflation) but other algorithms will be added later and will have the same; stream interface. Compression can be done in a single step if the buffers are large; enough (for example if an input file is mmap'ed), or can be done by; repeated calls of the compression function. In the latter case, the; application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never; crash even in case of corrupted input.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:300,Integrability,interface,interface,300,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed; data. This version of the library supports only one compression method; (deflation) but other algorithms will be added later and will have the same; stream interface. Compression can be done in a single step if the buffers are large; enough (for example if an input file is mmap'ed), or can be done by; repeated calls of the compression function. In the latter case, the; application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never; crash even in case of corrupted input.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:734,Integrability,wrap,wrapper,734,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed; data. This version of the library supports only one compression method; (deflation) but other algorithms will be added later and will have the same; stream interface. Compression can be done in a single step if the buffers are large; enough (for example if an input file is mmap'ed), or can be done by; repeated calls of the compression function. In the latter case, the; application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never; crash even in case of corrupted input.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:766,Integrability,wrap,wrapped,766,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed; data. This version of the library supports only one compression method; (deflation) but other algorithms will be added later and will have the same; stream interface. Compression can be done in a single step if the buffers are large; enough (for example if an input file is mmap'ed), or can be done by; repeated calls of the compression function. In the latter case, the; application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never; crash even in case of corrupted input.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:922,Integrability,interface,interface,922,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed; data. This version of the library supports only one compression method; (deflation) but other algorithms will be added later and will have the same; stream interface. Compression can be done in a single step if the buffers are large; enough (for example if an input file is mmap'ed), or can be done by; repeated calls of the compression function. In the latter case, the; application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never; crash even in case of corrupted input.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1067,Integrability,wrap,wrapper,1067,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed; data. This version of the library supports only one compression method; (deflation) but other algorithms will be added later and will have the same; stream interface. Compression can be done in a single step if the buffers are large; enough (for example if an input file is mmap'ed), or can be done by; repeated calls of the compression function. In the latter case, the; application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never; crash even in case of corrupted input.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1100,Integrability,wrap,wrapped,1100,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed; data. This version of the library supports only one compression method; (deflation) but other algorithms will be added later and will have the same; stream interface. Compression can be done in a single step if the buffers are large; enough (for example if an input file is mmap'ed), or can be done by; repeated calls of the compression function. In the latter case, the; application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never; crash even in case of corrupted input.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:106,Security,integrity,integrity,106,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed; data. This version of the library supports only one compression method; (deflation) but other algorithms will be added later and will have the same; stream interface. Compression can be done in a single step if the buffers are large; enough (for example if an input file is mmap'ed), or can be done by; repeated calls of the compression function. In the latter case, the; application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never; crash even in case of corrupted input.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:19,Availability,avail,available,19,/* number of bytes available at next_in */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:8,Availability,error,error,8,"/* last error message, NULL if no error */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:34,Availability,error,error,34,"/* last error message, NULL if no error */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:14,Integrability,message,message,14,"/* last error message, NULL if no error */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:11,Energy Efficiency,allocate,allocate,11,/* used to allocate the internal state */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:52,Integrability,rout,routines,52,/*; gzip header information passed to and from zlib routines. See RFC 1952; for more details on the meanings of these fields.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:25,Deployability,update,update,25,"/*; The application must update next_in and avail_in when avail_in has; dropped to zero. It must update next_out and avail_out when avail_out; has dropped to zero. The application must initialize zalloc, zfree and; opaque before calling the init function. All other fields are set by the; compression library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this; if the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS,; pointers returned by zalloc for objects of exactly 65536 bytes *must*; have their offset normalized to zero. The default allocation function; provided by this library ensures this (see zutil.c). To reduce memory; requirements and avoid any allocation of 64K objects, at the expense of; compression ratio, compile the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or; progress reports. After compression, total_in holds the total size of; the uncompressed data and may be saved for use in the decompressor; (particularly if the decompressor wants to decompress everything in; a single step).; */; /* constants */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:97,Deployability,update,update,97,"/*; The application must update next_in and avail_in when avail_in has; dropped to zero. It must update next_out and avail_out when avail_out; has dropped to zero. The application must initialize zalloc, zfree and; opaque before calling the init function. All other fields are set by the; compression library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this; if the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS,; pointers returned by zalloc for objects of exactly 65536 bytes *must*; have their offset normalized to zero. The default allocation function; provided by this library ensures this (see zutil.c). To reduce memory; requirements and avoid any allocation of 64K objects, at the expense of; compression ratio, compile the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or; progress reports. After compression, total_in holds the total size of; the uncompressed data and may be saved for use in the decompressor; (particularly if the decompressor wants to decompress everything in; a single step).; */; /* constants */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:325,Deployability,update,updated,325,"/*; The application must update next_in and avail_in when avail_in has; dropped to zero. It must update next_out and avail_out when avail_out; has dropped to zero. The application must initialize zalloc, zfree and; opaque before calling the init function. All other fields are set by the; compression library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this; if the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS,; pointers returned by zalloc for objects of exactly 65536 bytes *must*; have their offset normalized to zero. The default allocation function; provided by this library ensures this (see zutil.c). To reduce memory; requirements and avoid any allocation of 64K objects, at the expense of; compression ratio, compile the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or; progress reports. After compression, total_in holds the total size of; the uncompressed data and may be saved for use in the decompressor; (particularly if the decompressor wants to decompress everything in; a single step).; */; /* constants */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:811,Energy Efficiency,allocate,allocate,811,"/*; The application must update next_in and avail_in when avail_in has; dropped to zero. It must update next_out and avail_out when avail_out; has dropped to zero. The application must initialize zalloc, zfree and; opaque before calling the init function. All other fields are set by the; compression library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this; if the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS,; pointers returned by zalloc for objects of exactly 65536 bytes *must*; have their offset normalized to zero. The default allocation function; provided by this library ensures this (see zutil.c). To reduce memory; requirements and avoid any allocation of 64K objects, at the expense of; compression ratio, compile the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or; progress reports. After compression, total_in holds the total size of; the uncompressed data and may be saved for use in the decompressor; (particularly if the decompressor wants to decompress everything in; a single step).; */; /* constants */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:870,Energy Efficiency,allocate,allocate,870,"/*; The application must update next_in and avail_in when avail_in has; dropped to zero. It must update next_out and avail_out when avail_out; has dropped to zero. The application must initialize zalloc, zfree and; opaque before calling the init function. All other fields are set by the; compression library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this; if the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS,; pointers returned by zalloc for objects of exactly 65536 bytes *must*; have their offset normalized to zero. The default allocation function; provided by this library ensures this (see zutil.c). To reduce memory; requirements and avoid any allocation of 64K objects, at the expense of; compression ratio, compile the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or; progress reports. After compression, total_in holds the total size of; the uncompressed data and may be saved for use in the decompressor; (particularly if the decompressor wants to decompress everything in; a single step).; */; /* constants */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1164,Energy Efficiency,reduce,reduce,1164,"/*; The application must update next_in and avail_in when avail_in has; dropped to zero. It must update next_out and avail_out when avail_out; has dropped to zero. The application must initialize zalloc, zfree and; opaque before calling the init function. All other fields are set by the; compression library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this; if the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS,; pointers returned by zalloc for objects of exactly 65536 bytes *must*; have their offset normalized to zero. The default allocation function; provided by this library ensures this (see zutil.c). To reduce memory; requirements and avoid any allocation of 64K objects, at the expense of; compression ratio, compile the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or; progress reports. After compression, total_in holds the total size of; the uncompressed data and may be saved for use in the decompressor; (particularly if the decompressor wants to decompress everything in; a single step).; */; /* constants */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:678,Performance,multi-thread,multi-threaded,678,"/*; The application must update next_in and avail_in when avail_in has; dropped to zero. It must update next_out and avail_out when avail_out; has dropped to zero. The application must initialize zalloc, zfree and; opaque before calling the init function. All other fields are set by the; compression library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this; if the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS,; pointers returned by zalloc for objects of exactly 65536 bytes *must*; have their offset normalized to zero. The default allocation function; provided by this library ensures this (see zutil.c). To reduce memory; requirements and avoid any allocation of 64K objects, at the expense of; compression ratio, compile the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or; progress reports. After compression, total_in holds the total size of; the uncompressed data and may be saved for use in the decompressor; (particularly if the decompressor wants to decompress everything in; a single step).; */; /* constants */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:739,Safety,safe,safe,739,"/*; The application must update next_in and avail_in when avail_in has; dropped to zero. It must update next_out and avail_out when avail_out; has dropped to zero. The application must initialize zalloc, zfree and; opaque before calling the init function. All other fields are set by the; compression library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this; if the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS,; pointers returned by zalloc for objects of exactly 65536 bytes *must*; have their offset normalized to zero. The default allocation function; provided by this library ensures this (see zutil.c). To reduce memory; requirements and avoid any allocation of 64K objects, at the expense of; compression ratio, compile the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or; progress reports. After compression, total_in holds the total size of; the uncompressed data and may be saved for use in the decompressor; (particularly if the decompressor wants to decompress everything in; a single step).; */; /* constants */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1196,Safety,avoid,avoid,1196,"/*; The application must update next_in and avail_in when avail_in has; dropped to zero. It must update next_out and avail_out when avail_out; has dropped to zero. The application must initialize zalloc, zfree and; opaque before calling the init function. All other fields are set by the; compression library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this; if the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS,; pointers returned by zalloc for objects of exactly 65536 bytes *must*; have their offset normalized to zero. The default allocation function; provided by this library ensures this (see zutil.c). To reduce memory; requirements and avoid any allocation of 64K objects, at the expense of; compression ratio, compile the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or; progress reports. After compression, total_in holds the total size of; the uncompressed data and may be saved for use in the decompressor; (particularly if the decompressor wants to decompress everything in; a single step).; */; /* constants */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:84,Availability,error,errors,84,"/* Return codes for the compression/decompression functions. Negative; * values are errors, positive values are used for special but normal events.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1221,Availability,error,error,1221,"/* The application can compare zlibVersion and ZLIB_VERSION for consistency.; If the first character differs, the library code actually used is; not compatible with the zlib.h header file used by the application.; This check is automatically made by deflateInit and inflateInit.; */; /*; ZEXTERN int ZEXPORT deflateInit OF((z_streamp strm, int level));. Initializes the internal stream state for compression. The fields; zalloc, zfree and opaque must be initialized before by the caller.; If zalloc and zfree are set to Z_NULL, deflateInit updates them to; use default allocation functions. The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9:; 1 gives best speed, 9 gives best compression, 0 gives no compression at; all (the input data is simply copied a block at a time).; Z_DEFAULT_COMPRESSION requests a default compromise between speed and; compression (currently equivalent to level 6). deflateInit returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_STREAM_ERROR if level is not a valid compression level,; Z_VERSION_ERROR if the zlib library version (zlib_version) is incompatible; with the version assumed by the caller (ZLIB_VERSION).; msg is set to null if there is no error message. deflateInit does not; perform any compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:540,Deployability,update,updates,540,"/* The application can compare zlibVersion and ZLIB_VERSION for consistency.; If the first character differs, the library code actually used is; not compatible with the zlib.h header file used by the application.; This check is automatically made by deflateInit and inflateInit.; */; /*; ZEXTERN int ZEXPORT deflateInit OF((z_streamp strm, int level));. Initializes the internal stream state for compression. The fields; zalloc, zfree and opaque must be initialized before by the caller.; If zalloc and zfree are set to Z_NULL, deflateInit updates them to; use default allocation functions. The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9:; 1 gives best speed, 9 gives best compression, 0 gives no compression at; all (the input data is simply copied a block at a time).; Z_DEFAULT_COMPRESSION requests a default compromise between speed and; compression (currently equivalent to level 6). deflateInit returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_STREAM_ERROR if level is not a valid compression level,; Z_VERSION_ERROR if the zlib library version (zlib_version) is incompatible; with the version assumed by the caller (ZLIB_VERSION).; msg is set to null if there is no error message. deflateInit does not; perform any compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1227,Integrability,message,message,1227,"/* The application can compare zlibVersion and ZLIB_VERSION for consistency.; If the first character differs, the library code actually used is; not compatible with the zlib.h header file used by the application.; This check is automatically made by deflateInit and inflateInit.; */; /*; ZEXTERN int ZEXPORT deflateInit OF((z_streamp strm, int level));. Initializes the internal stream state for compression. The fields; zalloc, zfree and opaque must be initialized before by the caller.; If zalloc and zfree are set to Z_NULL, deflateInit updates them to; use default allocation functions. The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9:; 1 gives best speed, 9 gives best compression, 0 gives no compression at; all (the input data is simply copied a block at a time).; Z_DEFAULT_COMPRESSION requests a default compromise between speed and; compression (currently equivalent to level 6). deflateInit returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_STREAM_ERROR if level is not a valid compression level,; Z_VERSION_ERROR if the zlib library version (zlib_version) is incompatible; with the version assumed by the caller (ZLIB_VERSION).; msg is set to null if there is no error message. deflateInit does not; perform any compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1258,Performance,perform,perform,1258,"/* The application can compare zlibVersion and ZLIB_VERSION for consistency.; If the first character differs, the library code actually used is; not compatible with the zlib.h header file used by the application.; This check is automatically made by deflateInit and inflateInit.; */; /*; ZEXTERN int ZEXPORT deflateInit OF((z_streamp strm, int level));. Initializes the internal stream state for compression. The fields; zalloc, zfree and opaque must be initialized before by the caller.; If zalloc and zfree are set to Z_NULL, deflateInit updates them to; use default allocation functions. The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9:; 1 gives best speed, 9 gives best compression, 0 gives no compression at; all (the input data is simply copied a block at a time).; Z_DEFAULT_COMPRESSION requests a default compromise between speed and; compression (currently equivalent to level 6). deflateInit returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_STREAM_ERROR if level is not a valid compression level,; Z_VERSION_ERROR if the zlib library version (zlib_version) is incompatible; with the version assumed by the caller (ZLIB_VERSION).; msg is set to null if there is no error message. deflateInit does not; perform any compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:761,Usability,simpl,simply,761,"/* The application can compare zlibVersion and ZLIB_VERSION for consistency.; If the first character differs, the library code actually used is; not compatible with the zlib.h header file used by the application.; This check is automatically made by deflateInit and inflateInit.; */; /*; ZEXTERN int ZEXPORT deflateInit OF((z_streamp strm, int level));. Initializes the internal stream state for compression. The fields; zalloc, zfree and opaque must be initialized before by the caller.; If zalloc and zfree are set to Z_NULL, deflateInit updates them to; use default allocation functions. The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9:; 1 gives best speed, 9 gives best compression, 0 gives no compression at; all (the input data is simply copied a block at a time).; Z_DEFAULT_COMPRESSION requests a default compromise between speed and; compression (currently equivalent to level 6). deflateInit returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_STREAM_ERROR if level is not a valid compression level,; Z_VERSION_ERROR if the zlib library version (zlib_version) is incompatible; with the version assumed by the caller (ZLIB_VERSION).; msg is set to null if there is no error message. deflateInit does not; perform any compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1916,Availability,avail,available,1916,"ratio, so this parameter; should be set only when necessary (in interactive applications).; Some output may be provided even if flush is not set. Before the call of deflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming; more output, and updating avail_in or avail_out accordingly; avail_out; should never be zero before the call. The application can consume the; compressed output when it wants, for example when the output buffer is full; (avail_out == 0), or after each call of deflate(). If deflate returns Z_OK; and with zero avail_out, it must be called again after making room in the; output buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumualte before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In particular; avail_in is zero after the call if enough output space has been provided; before the call.) Flushing may degrade compression for some compression; algorithms and so it should be used only when necessary. If flush is set to Z_FULL_FLUSH, all output is flushed as with; Z_SYNC_FLUSH, and the compression state is reset so that decompression can; restart from this point if previous compressed data has been damaged or if; random access is desired. Using Z_FULL_FLUSH too often can seriously degrade; compression. If deflate returns with avail_out == 0, this function must be called again; with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3214,Availability,error,error,3214,"ll.) Flushing may degrade compression for some compression; algorithms and so it should be used only when necessary. If flush is set to Z_FULL_FLUSH, all output is flushed as with; Z_SYNC_FLUSH, and the compression state is reset so that decompression can; restart from this point if previous compressed data has been damaged or if; random access is desired. Using Z_FULL_FLUSH too often can seriously degrade; compression. If deflate returns with avail_out == 0, this function must be called again; with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there; was enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only possible operations on the; stream are deflateReset or deflateEnd. Z_FINISH can be used immediately after deflateInit if all the compression; is to be done in a single step. In this case, avail_out must be at least; the value returned by deflateBound (see below). If deflate does not return; Z_STREAM_END, then it must be called again as described above. deflate() sets strm->adler to the adler32 checksum of all input read; so far (that is, total_in bytes). deflate() may update strm->data_type if it can make a good guess about; the input data type (Z_BINARY or Z_TEXT). In doubt, the data is considered; binary. This field is only for information purposes and does not affect; the compression algorithm in any manner. deflate() returns Z_OK if some progress has ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:386,Deployability,update,update,386,"/*; deflate compresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce some; output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. deflate performs one or both of the; following actions:. - Compress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in and avail_in are updated and; processing will resume at this point for the next call of deflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. This action is forced if the parameter flush is non zero.; Forcing flush frequently degrades the compression ratio, so this parameter; should be set only when necessary (in interactive applications).; Some output may be provided even if flush is not set. Before the call of deflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming; more output, and updating avail_in or avail_out accordingly; avail_out; should never be zero before the call. The application can consume the; compressed output when it wants, for example when the output buffer is full; (avail_out == 0), or after each call of deflate(). If deflate returns Z_OK; and with zero avail_out, it must be called again after making room in the; output buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumualte before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In particular; avail_in is zero after the call if enough output sp",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:545,Deployability,update,updated,545,"/*; deflate compresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce some; output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. deflate performs one or both of the; following actions:. - Compress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in and avail_in are updated and; processing will resume at this point for the next call of deflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. This action is forced if the parameter flush is non zero.; Forcing flush frequently degrades the compression ratio, so this parameter; should be set only when necessary (in interactive applications).; Some output may be provided even if flush is not set. Before the call of deflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming; more output, and updating avail_in or avail_out accordingly; avail_out; should never be zero before the call. The application can consume the; compressed output when it wants, for example when the output buffer is full; (avail_out == 0), or after each call of deflate(). If deflate returns Z_OK; and with zero avail_out, it must be called again after making room in the; output buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumualte before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In particular; avail_in is zero after the call if enough output sp",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:674,Deployability,update,update,674,"/*; deflate compresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce some; output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. deflate performs one or both of the; following actions:. - Compress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in and avail_in are updated and; processing will resume at this point for the next call of deflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. This action is forced if the parameter flush is non zero.; Forcing flush frequently degrades the compression ratio, so this parameter; should be set only when necessary (in interactive applications).; Some output may be provided even if flush is not set. Before the call of deflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming; more output, and updating avail_in or avail_out accordingly; avail_out; should never be zero before the call. The application can consume the; compressed output when it wants, for example when the output buffer is full; (avail_out == 0), or after each call of deflate(). If deflate returns Z_OK; and with zero avail_out, it must be called again after making room in the; output buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumualte before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In particular; avail_in is zero after the call if enough output sp",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2603,Deployability,update,updated,2603,"sh is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumualte before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In particular; avail_in is zero after the call if enough output space has been provided; before the call.) Flushing may degrade compression for some compression; algorithms and so it should be used only when necessary. If flush is set to Z_FULL_FLUSH, all output is flushed as with; Z_SYNC_FLUSH, and the compression state is reset so that decompression can; restart from this point if previous compressed data has been damaged or if; random access is desired. Using Z_FULL_FLUSH too often can seriously degrade; compression. If deflate returns with avail_out == 0, this function must be called again; with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there; was enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only possible operations on the; stream are deflateReset or deflateEnd. Z_FINISH can be used immediately after deflateInit if all the compression; is to be done in a single step. In this case, avail_out must be at least; the value returned by deflateBound (see below). If deflate does not return; Z_STREAM_END, ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3129,Deployability,update,updated,3129,"ll.) Flushing may degrade compression for some compression; algorithms and so it should be used only when necessary. If flush is set to Z_FULL_FLUSH, all output is flushed as with; Z_SYNC_FLUSH, and the compression state is reset so that decompression can; restart from this point if previous compressed data has been damaged or if; random access is desired. Using Z_FULL_FLUSH too often can seriously degrade; compression. If deflate returns with avail_out == 0, this function must be called again; with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there; was enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only possible operations on the; stream are deflateReset or deflateEnd. Z_FINISH can be used immediately after deflateInit if all the compression; is to be done in a single step. In this case, avail_out must be at least; the value returned by deflateBound (see below). If deflate does not return; Z_STREAM_END, then it must be called again as described above. deflate() sets strm->adler to the adler32 checksum of all input read; so far (that is, total_in bytes). deflate() may update strm->data_type if it can make a good guess about; the input data type (Z_BINARY or Z_TEXT). In doubt, the data is considered; binary. This field is only for information purposes and does not affect; the compression algorithm in any manner. deflate() returns Z_OK if some progress has ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3745,Deployability,update,update,3745,"with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there; was enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only possible operations on the; stream are deflateReset or deflateEnd. Z_FINISH can be used immediately after deflateInit if all the compression; is to be done in a single step. In this case, avail_out must be at least; the value returned by deflateBound (see below). If deflate does not return; Z_STREAM_END, then it must be called again as described above. deflate() sets strm->adler to the adler32 checksum of all input read; so far (that is, total_in bytes). deflate() may update strm->data_type if it can make a good guess about; the input data type (Z_BINARY or Z_TEXT). In doubt, the data is considered; binary. This field is only for information purposes and does not affect; the compression algorithm in any manner. deflate() returns Z_OK if some progress has been made (more input; processed or more output produced), Z_STREAM_END if all input has been; consumed and all output has been produced (only when flush is set to; Z_FINISH), Z_STREAM_ERROR if the stream state was inconsistent (for example; if next_in or next_out was NULL), Z_BUF_ERROR if no progress is possible; (for example avail_in or avail_out was zero). Note that Z_BUF_ERROR is not; fatal, and deflate() can be called again with more input and more output; space to continue compressing.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:161,Performance,latency,latency,161,"/*; deflate compresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce some; output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. deflate performs one or both of the; following actions:. - Compress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in and avail_in are updated and; processing will resume at this point for the next call of deflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. This action is forced if the parameter flush is non zero.; Forcing flush frequently degrades the compression ratio, so this parameter; should be set only when necessary (in interactive applications).; Some output may be provided even if flush is not set. Before the call of deflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming; more output, and updating avail_in or avail_out accordingly; avail_out; should never be zero before the call. The application can consume the; compressed output when it wants, for example when the output buffer is full; (avail_out == 0), or after each call of deflate(). If deflate returns Z_OK; and with zero avail_out, it must be called again after making room in the; output buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumualte before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In particular; avail_in is zero after the call if enough output sp",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:291,Performance,perform,performs,291,"/*; deflate compresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce some; output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. deflate performs one or both of the; following actions:. - Compress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in and avail_in are updated and; processing will resume at this point for the next call of deflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. This action is forced if the parameter flush is non zero.; Forcing flush frequently degrades the compression ratio, so this parameter; should be set only when necessary (in interactive applications).; Some output may be provided even if flush is not set. Before the call of deflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming; more output, and updating avail_in or avail_out accordingly; avail_out; should never be zero before the call. The application can consume the; compressed output when it wants, for example when the output buffer is full; (avail_out == 0), or after each call of deflate(). If deflate returns Z_OK; and with zero avail_out, it must be called again after making room in the; output buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumualte before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In particular; avail_in is zero after the call if enough output sp",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2792,Safety,avoid,avoid,2792,"ending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In particular; avail_in is zero after the call if enough output space has been provided; before the call.) Flushing may degrade compression for some compression; algorithms and so it should be used only when necessary. If flush is set to Z_FULL_FLUSH, all output is flushed as with; Z_SYNC_FLUSH, and the compression state is reset so that decompression can; restart from this point if previous compressed data has been damaged or if; random access is desired. Using Z_FULL_FLUSH too often can seriously degrade; compression. If deflate returns with avail_out == 0, this function must be called again; with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there; was enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only possible operations on the; stream are deflateReset or deflateEnd. Z_FINISH can be used immediately after deflateInit if all the compression; is to be done in a single step. In this case, avail_out must be at least; the value returned by deflateBound (see below). If deflate does not return; Z_STREAM_END, then it must be called again as described above. deflate() sets strm->adler to the adler32 checksum of all input read; so far (that is, total_in bytes). deflate() may update strm->data_type if it c",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2377,Security,access,access,2377,"d output when it wants, for example when the output buffer is full; (avail_out == 0), or after each call of deflate(). If deflate returns Z_OK; and with zero avail_out, it must be called again after making room in the; output buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumualte before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In particular; avail_in is zero after the call if enough output space has been provided; before the call.) Flushing may degrade compression for some compression; algorithms and so it should be used only when necessary. If flush is set to Z_FULL_FLUSH, all output is flushed as with; Z_SYNC_FLUSH, and the compression state is reset so that decompression can; restart from this point if previous compressed data has been damaged or if; random access is desired. Using Z_FULL_FLUSH too often can seriously degrade; compression. If deflate returns with avail_out == 0, this function must be called again; with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there; was enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only po",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3669,Security,checksum,checksum,3669,"with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there; was enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only possible operations on the; stream are deflateReset or deflateEnd. Z_FINISH can be used immediately after deflateInit if all the compression; is to be done in a single step. In this case, avail_out must be at least; the value returned by deflateBound (see below). If deflate does not return; Z_STREAM_END, then it must be called again as described above. deflate() sets strm->adler to the adler32 checksum of all input read; so far (that is, total_in bytes). deflate() may update strm->data_type if it can make a good guess about; the input data type (Z_BINARY or Z_TEXT). In doubt, the data is considered; binary. This field is only for information purposes and does not affect; the compression algorithm in any manner. deflate() returns Z_OK if some progress has been made (more input; processed or more output produced), Z_STREAM_END if all input has been; consumed and all output has been produced (only when flush is set to; Z_FINISH), Z_STREAM_ERROR if the stream state was inconsistent (for example; if next_in or next_out was NULL), Z_BUF_ERROR if no progress is possible; (for example avail_in or avail_out was zero). Note that Z_BUF_ERROR is not; fatal, and deflate() can be called again with more input and more output; space to continue compressing.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:574,Usability,resume,resume,574,"/*; deflate compresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce some; output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. deflate performs one or both of the; following actions:. - Compress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in and avail_in are updated and; processing will resume at this point for the next call of deflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. This action is forced if the parameter flush is non zero.; Forcing flush frequently degrades the compression ratio, so this parameter; should be set only when necessary (in interactive applications).; Some output may be provided even if flush is not set. Before the call of deflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming; more output, and updating avail_in or avail_out accordingly; avail_out; should never be zero before the call. The application can consume the; compressed output when it wants, for example when the output buffer is full; (avail_out == 0), or after each call of deflate(). If deflate returns Z_OK; and with zero avail_out, it must be called again after making room in the; output buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumualte before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In particular; avail_in is zero after the call if enough output sp",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:344,Availability,error,error,344,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any; pending output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case,; msg may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the exact; value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller. msg is set to null if there is no error; message. inflateInit does not perform any decompression apart from reading; the zlib header if present: this will be done by inflate(). (So next_in and; avail_in may be modified, but next_out and avail_out are unchanged.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1277,Availability,error,error,1277,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any; pending output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case,; msg may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the exact; value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller. msg is set to null if there is no error; message. inflateInit does not perform any decompression apart from reading; the zlib header if present: this will be done by inflate(). (So next_in and; avail_in may be modified, but next_out and avail_out are unchanged.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1009,Deployability,update,updates,1009,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any; pending output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case,; msg may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the exact; value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller. msg is set to null if there is no error; message. inflateInit does not perform any decompression apart from reading; the zlib header if present: this will be done by inflate(). (So next_in and; avail_in may be modified, but next_out and avail_out are unchanged.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:20,Energy Efficiency,allocate,allocated,20,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any; pending output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case,; msg may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the exact; value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller. msg is set to null if there is no error; message. inflateInit does not perform any decompression apart from reading; the zlib header if present: this will be done by inflate(). (So next_in and; avail_in may be modified, but next_out and avail_out are unchanged.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:841,Energy Efficiency,allocate,allocates,841,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any; pending output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case,; msg may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the exact; value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller. msg is set to null if there is no error; message. inflateInit does not perform any decompression apart from reading; the zlib header if present: this will be done by inflate(). (So next_in and; avail_in may be modified, but next_out and avail_out are unchanged.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:733,Integrability,depend,depends,733,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any; pending output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case,; msg may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the exact; value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller. msg is set to null if there is no error; message. inflateInit does not perform any decompression apart from reading; the zlib header if present: this will be done by inflate(). (So next_in and; avail_in may be modified, but next_out and avail_out are unchanged.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1284,Integrability,message,message,1284,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any; pending output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case,; msg may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the exact; value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller. msg is set to null if there is no error; message. inflateInit does not perform any decompression apart from reading; the zlib header if present: this will be done by inflate(). (So next_in and; avail_in may be modified, but next_out and avail_out are unchanged.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1314,Performance,perform,perform,1314,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any; pending output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case,; msg may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the exact; value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller. msg is set to null if there is no error; message. inflateInit does not perform any decompression apart from reading; the zlib header if present: this will be done by inflate(). (So next_in and; avail_in may be modified, but next_out and avail_out are unchanged.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2822,Availability,error,error,2822,"r and before the first block. When doing a raw inflate, inflate(); will go ahead and process the first block, and will return when it gets to; the end of that block, or when it runs out of data. The Z_BLOCK option assists in appending to or combining deflate streams.; Also to assist in this, on return inflate() will set strm->data_type to the; number of unused bits in the last byte taken from strm->next_in, plus 64; if inflate() is currently decoding the last block in the deflate stream,; plus 128 if inflate() returned immediately after decoding an end-of-block; code or decoding the complete header up to just before the first byte of the; deflate stream. The end-of-block will not be indicated until all of the; uncompressed data from that block has been written to strm->next_out. The; number of unused bits may in general be greater than seven, except when; bit 7 of data_type is set, in which case the number of unused bits will be; less than eight. inflate() should normally be called until it returns Z_STREAM_END or an; error. However if all decompression is to be performed in a single step; (a single call of inflate), the parameter flush should be set to; Z_FINISH. In this case all pending input is processed and all pending; output is flushed; avail_out must be large enough to hold all the; uncompressed data. (The size of the uncompressed data may have been saved; by the compressor for this purpose.) The next operation on this stream must; be inflateEnd to deallocate the decompression state. The use of Z_FINISH; is never required, but can be used to inform inflate that a faster approach; may be used for the single inflate() call. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the only effect of the flush parameter in this implementation; is on the return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictio",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:4122,Availability,error,error,4122,"Z_FINISH. In this case all pending input is processed and all pending; output is flushed; avail_out must be large enough to hold all the; uncompressed data. (The size of the uncompressed data may have been saved; by the compressor for this purpose.) The next operation on this stream must; be inflateEnd to deallocate the decompression state. The use of Z_FINISH; is never required, but can be used to inform inflate that a faster approach; may be used for the single inflate() call. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the only effect of the flush parameter in this implementation; is on the return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the adler32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() will decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically. Any information; contained in the gzip header is not retained, so applications that need that; information should instead use raw inflate, see inflateInit2() below, or; inflateBack() and perform their own processing of the gzip header and; trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionar",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:5636,Availability,recover,recovery,5636,"he return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the adler32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() will decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically. Any information; contained in the gzip header is not retained, so applications that need that; information should instead use raw inflate, see inflateInit2() below, or; inflateBack() and perform their own processing of the gzip header and; trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; if next_in or next_out was NULL), Z_MEM_ERROR if there was not enough memory,; Z_BUF_ERROR if no progress is possible or if there was not enough room in the; output buffer when Z_FINISH is used. Note that Z_BUF_ERROR is not fatal, and; inflate() can be called again with more input and more output space to; continue decompressing. If Z_DATA_ERROR is returned, the application may then; call inflateSync() to look for a good compression block if a partial recovery; of the data is desired.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:390,Deployability,update,update,390,"/*; inflate decompresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. inflate performs one or both of the; following actions:. - Decompress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in is updated and processing; will resume at this point for the next call of inflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. inflate() provides as much output as possible, until there; is no more input data or no more space in the output buffer (see below; about the flush parameter). Before the call of inflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming; more output, and updating the next_* and avail_* values accordingly.; The application can consume the uncompressed output when it wants, for; example when the output buffer is full (avail_out == 0), or after each; call of inflate(). If inflate returns Z_OK and with zero avail_out, it; must be called again after making room in the output buffer because there; might be more output pending. The flush parameter of inflate() can be Z_NO_FLUSH, Z_SYNC_FLUSH,; Z_FINISH, or Z_BLOCK. Z_SYNC_FLUSH requests that inflate() flush as much; output as possible to the output buffer. Z_BLOCK requests that inflate() stop; if and when it gets to the next deflate block boundary. When decoding the; zlib or gzip format, this will cause inflate() to return immediately after; the header and before the first block. When doing a raw inflate, inflate(); will go ahead and process the first block, and will return when it gets to; the end of that block, or when it runs out of data. The Z_BLOCK option",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:535,Deployability,update,updated,535,"/*; inflate decompresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. inflate performs one or both of the; following actions:. - Decompress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in is updated and processing; will resume at this point for the next call of inflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. inflate() provides as much output as possible, until there; is no more input data or no more space in the output buffer (see below; about the flush parameter). Before the call of inflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming; more output, and updating the next_* and avail_* values accordingly.; The application can consume the uncompressed output when it wants, for; example when the output buffer is full (avail_out == 0), or after each; call of inflate(). If inflate returns Z_OK and with zero avail_out, it; must be called again after making room in the output buffer because there; might be more output pending. The flush parameter of inflate() can be Z_NO_FLUSH, Z_SYNC_FLUSH,; Z_FINISH, or Z_BLOCK. Z_SYNC_FLUSH requests that inflate() flush as much; output as possible to the output buffer. Z_BLOCK requests that inflate() stop; if and when it gets to the next deflate block boundary. When decoding the; zlib or gzip format, this will cause inflate() to return immediately after; the header and before the first block. When doing a raw inflate, inflate(); will go ahead and process the first block, and will return when it gets to; the end of that block, or when it runs out of data. The Z_BLOCK option",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:664,Deployability,update,update,664,"/*; inflate decompresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. inflate performs one or both of the; following actions:. - Decompress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in is updated and processing; will resume at this point for the next call of inflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. inflate() provides as much output as possible, until there; is no more input data or no more space in the output buffer (see below; about the flush parameter). Before the call of inflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming; more output, and updating the next_* and avail_* values accordingly.; The application can consume the uncompressed output when it wants, for; example when the output buffer is full (avail_out == 0), or after each; call of inflate(). If inflate returns Z_OK and with zero avail_out, it; must be called again after making room in the output buffer because there; might be more output pending. The flush parameter of inflate() can be Z_NO_FLUSH, Z_SYNC_FLUSH,; Z_FINISH, or Z_BLOCK. Z_SYNC_FLUSH requests that inflate() flush as much; output as possible to the output buffer. Z_BLOCK requests that inflate() stop; if and when it gets to the next deflate block boundary. When decoding the; zlib or gzip format, this will cause inflate() to return immediately after; the header and before the first block. When doing a raw inflate, inflate(); will go ahead and process the first block, and will return when it gets to; the end of that block, or when it runs out of data. The Z_BLOCK option",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:4381,Integrability,wrap,wrapped,4381,"te that a faster approach; may be used for the single inflate() call. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the only effect of the flush parameter in this implementation; is on the return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the adler32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() will decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically. Any information; contained in the gzip header is not retained, so applications that need that; information should instead use raw inflate, see inflateInit2() below, or; inflateBack() and perform their own processing of the gzip header and; trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; if next_in or next_out was NULL), Z_MEM_ERROR if there was not enough memory,; Z_BUF_ERROR if no progress is possible or if there was not enough room in the; output buffer when Z_FINISH is used. N",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:4397,Integrability,wrap,wrapped,4397,"te that a faster approach; may be used for the single inflate() call. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the only effect of the flush parameter in this implementation; is on the return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the adler32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() will decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically. Any information; contained in the gzip header is not retained, so applications that need that; information should instead use raw inflate, see inflateInit2() below, or; inflateBack() and perform their own processing of the gzip header and; trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; if next_in or next_out was NULL), Z_MEM_ERROR if there was not enough memory,; Z_BUF_ERROR if no progress is possible or if there was not enough room in the; output buffer when Z_FINISH is used. N",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:163,Performance,latency,latency,163,"/*; inflate decompresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. inflate performs one or both of the; following actions:. - Decompress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in is updated and processing; will resume at this point for the next call of inflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. inflate() provides as much output as possible, until there; is no more input data or no more space in the output buffer (see below; about the flush parameter). Before the call of inflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming; more output, and updating the next_* and avail_* values accordingly.; The application can consume the uncompressed output when it wants, for; example when the output buffer is full (avail_out == 0), or after each; call of inflate(). If inflate returns Z_OK and with zero avail_out, it; must be called again after making room in the output buffer because there; might be more output pending. The flush parameter of inflate() can be Z_NO_FLUSH, Z_SYNC_FLUSH,; Z_FINISH, or Z_BLOCK. Z_SYNC_FLUSH requests that inflate() flush as much; output as possible to the output buffer. Z_BLOCK requests that inflate() stop; if and when it gets to the next deflate block boundary. When decoding the; zlib or gzip format, this will cause inflate() to return immediately after; the header and before the first block. When doing a raw inflate, inflate(); will go ahead and process the first block, and will return when it gets to; the end of that block, or when it runs out of data. The Z_BLOCK option",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:293,Performance,perform,performs,293,"/*; inflate decompresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. inflate performs one or both of the; following actions:. - Decompress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in is updated and processing; will resume at this point for the next call of inflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. inflate() provides as much output as possible, until there; is no more input data or no more space in the output buffer (see below; about the flush parameter). Before the call of inflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming; more output, and updating the next_* and avail_* values accordingly.; The application can consume the uncompressed output when it wants, for; example when the output buffer is full (avail_out == 0), or after each; call of inflate(). If inflate returns Z_OK and with zero avail_out, it; must be called again after making room in the output buffer because there; might be more output pending. The flush parameter of inflate() can be Z_NO_FLUSH, Z_SYNC_FLUSH,; Z_FINISH, or Z_BLOCK. Z_SYNC_FLUSH requests that inflate() flush as much; output as possible to the output buffer. Z_BLOCK requests that inflate() stop; if and when it gets to the next deflate block boundary. When decoding the; zlib or gzip format, this will cause inflate() to return immediately after; the header and before the first block. When doing a raw inflate, inflate(); will go ahead and process the first block, and will return when it gets to; the end of that block, or when it runs out of data. The Z_BLOCK option",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2867,Performance,perform,performed,2867,"nd will return when it gets to; the end of that block, or when it runs out of data. The Z_BLOCK option assists in appending to or combining deflate streams.; Also to assist in this, on return inflate() will set strm->data_type to the; number of unused bits in the last byte taken from strm->next_in, plus 64; if inflate() is currently decoding the last block in the deflate stream,; plus 128 if inflate() returned immediately after decoding an end-of-block; code or decoding the complete header up to just before the first byte of the; deflate stream. The end-of-block will not be indicated until all of the; uncompressed data from that block has been written to strm->next_out. The; number of unused bits may in general be greater than seven, except when; bit 7 of data_type is set, in which case the number of unused bits will be; less than eight. inflate() should normally be called until it returns Z_STREAM_END or an; error. However if all decompression is to be performed in a single step; (a single call of inflate), the parameter flush should be set to; Z_FINISH. In this case all pending input is processed and all pending; output is flushed; avail_out must be large enough to hold all the; uncompressed data. (The size of the uncompressed data may have been saved; by the compressor for this purpose.) The next operation on this stream must; be inflateEnd to deallocate the decompression state. The use of Z_FINISH; is never required, but can be used to inform inflate that a faster approach; may be used for the single inflate() call. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the only effect of the flush parameter in this implementation; is on the return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 check",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:4650,Performance,perform,perform,4650,"; first call. So the only effect of the flush parameter in this implementation; is on the return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the adler32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() will decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically. Any information; contained in the gzip header is not retained, so applications that need that; information should instead use raw inflate, see inflateInit2() below, or; inflateBack() and perform their own processing of the gzip header and; trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; if next_in or next_out was NULL), Z_MEM_ERROR if there was not enough memory,; Z_BUF_ERROR if no progress is possible or if there was not enough room in the; output buffer when Z_FINISH is used. Note that Z_BUF_ERROR is not fatal, and; inflate() can be called again with more input and more output space to; continue decompressing. If Z_DATA_ERROR is returned, the application may then; call inflateSync() t",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:4439,Safety,detect,detected,4439,"all. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the only effect of the flush parameter in this implementation; is on the return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the adler32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() will decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically. Any information; contained in the gzip header is not retained, so applications that need that; information should instead use raw inflate, see inflateInit2() below, or; inflateBack() and perform their own processing of the gzip header and; trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; if next_in or next_out was NULL), Z_MEM_ERROR if there was not enough memory,; Z_BUF_ERROR if no progress is possible or if there was not enough room in the; output buffer when Z_FINISH is used. Note that Z_BUF_ERROR is not fatal, and; inflate() can be called a",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:5636,Safety,recover,recovery,5636,"he return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the adler32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() will decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically. Any information; contained in the gzip header is not retained, so applications that need that; information should instead use raw inflate, see inflateInit2() below, or; inflateBack() and perform their own processing of the gzip header and; trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; if next_in or next_out was NULL), Z_MEM_ERROR if there was not enough memory,; Z_BUF_ERROR if no progress is possible or if there was not enough room in the; output buffer when Z_FINISH is used. Note that Z_BUF_ERROR is not fatal, and; inflate() can be called again with more input and more output space to; continue decompressing. If Z_DATA_ERROR is returned, the application may then; call inflateSync() to look for a good compression block if a partial recovery; of the data is desired.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3894,Security,checksum,checksum,3894,"Z_FINISH. In this case all pending input is processed and all pending; output is flushed; avail_out must be large enough to hold all the; uncompressed data. (The size of the uncompressed data may have been saved; by the compressor for this purpose.) The next operation on this stream must; be inflateEnd to deallocate the decompression state. The use of Z_FINISH; is never required, but can be used to inform inflate that a faster approach; may be used for the single inflate() call. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the only effect of the flush parameter in this implementation; is on the return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the adler32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() will decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically. Any information; contained in the gzip header is not retained, so applications that need that; information should instead use raw inflate, see inflateInit2() below, or; inflateBack() and perform their own processing of the gzip header and; trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionar",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:4018,Security,checksum,checksum,4018,"Z_FINISH. In this case all pending input is processed and all pending; output is flushed; avail_out must be large enough to hold all the; uncompressed data. (The size of the uncompressed data may have been saved; by the compressor for this purpose.) The next operation on this stream must; be inflateEnd to deallocate the decompression state. The use of Z_FINISH; is never required, but can be used to inform inflate that a faster approach; may be used for the single inflate() call. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the only effect of the flush parameter in this implementation; is on the return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the adler32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() will decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically. Any information; contained in the gzip header is not retained, so applications that need that; information should instead use raw inflate, see inflateInit2() below, or; inflateBack() and perform their own processing of the gzip header and; trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionar",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:4224,Security,checksum,checksum,4224,"am must; be inflateEnd to deallocate the decompression state. The use of Z_FINISH; is never required, but can be used to inform inflate that a faster approach; may be used for the single inflate() call. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the only effect of the flush parameter in this implementation; is on the return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the adler32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() will decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically. Any information; contained in the gzip header is not retained, so applications that need that; information should instead use raw inflate, see inflateInit2() below, or; inflateBack() and perform their own processing of the gzip header and; trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; if next_in or next_out was NULL), Z_MEM_ERROR if there was not ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:4312,Security,checksum,checksum,4312,"am must; be inflateEnd to deallocate the decompression state. The use of Z_FINISH; is never required, but can be used to inform inflate that a faster approach; may be used for the single inflate() call. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the only effect of the flush parameter in this implementation; is on the return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the adler32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() will decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically. Any information; contained in the gzip header is not retained, so applications that need that; information should instead use raw inflate, see inflateInit2() below, or; inflateBack() and perform their own processing of the gzip header and; trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; if next_in or next_out was NULL), Z_MEM_ERROR if there was not ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:564,Usability,resume,resume,564,"/*; inflate decompresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. inflate performs one or both of the; following actions:. - Decompress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in is updated and processing; will resume at this point for the next call of inflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. inflate() provides as much output as possible, until there; is no more input data or no more space in the output buffer (see below; about the flush parameter). Before the call of inflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming; more output, and updating the next_* and avail_* values accordingly.; The application can consume the uncompressed output when it wants, for; example when the output buffer is full (avail_out == 0), or after each; call of inflate(). If inflate returns Z_OK and with zero avail_out, it; must be called again after making room in the output buffer because there; might be more output pending. The flush parameter of inflate() can be Z_NO_FLUSH, Z_SYNC_FLUSH,; Z_FINISH, or Z_BLOCK. Z_SYNC_FLUSH requests that inflate() flush as much; output as possible to the output buffer. Z_BLOCK requests that inflate() stop; if and when it gets to the next deflate block boundary. When decoding the; zlib or gzip format, this will cause inflate() to return immediately after; the header and before the first block. When doing a raw inflate, inflate(); will go ahead and process the first block, and will return when it gets to; the end of that block, or when it runs out of data. The Z_BLOCK option",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:256,Availability,error,error,256,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any; pending output. inflateEnd returns Z_OK if success, Z_STREAM_ERROR if the stream state; was inconsistent. In the error case, msg may be set but then points to a; static string (which must not be deallocated).; */; /* Advanced functions */; /*; The following functions are needed only in some special applications.; */; /*; ZEXTERN int ZEXPORT deflateInit2 OF((z_streamp strm,; int level,; int method,; int windowBits,; int memLevel,; int strategy));. This is another version of deflateInit with more compression options. The; fields next_in, zalloc, zfree and opaque must be initialized before by; the caller. The method parameter is the compression method. It must be Z_DEFLATED in; this version of the library. The windowBits parameter is the base two logarithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3349,Availability,error,error,3349," optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and reduces compression ratio; memLevel=9 uses maximum memory; for optimal speed. The default value is 8. See zconf.h for total memory; usage as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as fast as; Z_HUFFMAN_ONLY, but give better compression for PNG image data. The strategy; parameter only affects the compression ratio but not the correctness of the; compressed output even if it is not set appropriately. Z_FIXED prevents the; use of dynamic Huffman codes, allowing for a simpler decoder for special; applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if a parameter is invalid (such as an invalid; method). msg is set to null if there is no error message. deflateInit2 does; not perform any compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:20,Energy Efficiency,allocate,allocated,20,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any; pending output. inflateEnd returns Z_OK if success, Z_STREAM_ERROR if the stream state; was inconsistent. In the error case, msg may be set but then points to a; static string (which must not be deallocated).; */; /* Advanced functions */; /*; The following functions are needed only in some special applications.; */; /*; ZEXTERN int ZEXPORT deflateInit2 OF((z_streamp strm,; int level,; int method,; int windowBits,; int memLevel,; int strategy));. This is another version of deflateInit with more compression options. The; fields next_in, zalloc, zfree and opaque must be initialized before by; the caller. The method parameter is the compression method. It must be Z_DEFLATED in; this version of the library. The windowBits parameter is the base two logarithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1907,Energy Efficiency,allocate,allocated,1907,"arithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and reduces compression ratio; memLevel=9 uses maximum memory; for optimal speed. The default value is 8. See zconf.h for total memory; usage as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as fast as; Z_HUFFMAN_ONLY, but give better compression for PNG image d",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2002,Energy Efficiency,reduce,reduces,2002,"e library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and reduces compression ratio; memLevel=9 uses maximum memory; for optimal speed. The default value is 8. See zconf.h for total memory; usage as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as fast as; Z_HUFFMAN_ONLY, but give better compression for PNG image data. The strategy; parameter only affects the compression ratio but not the correctness of the; compressed output ev",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1582,Integrability,wrap,wrapper,1582,"; int method,; int windowBits,; int memLevel,; int strategy));. This is another version of deflateInit with more compression options. The; fields next_in, zalloc, zfree and opaque must be initialized before by; the caller. The method parameter is the compression method. It must be Z_DEFLATED in; this version of the library. The windowBits parameter is the base two logarithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and reduces compression ratio; memLevel=9 uses maximum memory; for optimal speed. The default value is 8. See zconf.h for total memory; usage as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small valu",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3355,Integrability,message,message,3355," optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and reduces compression ratio; memLevel=9 uses maximum memory; for optimal speed. The default value is 8. See zconf.h for total memory; usage as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as fast as; Z_HUFFMAN_ONLY, but give better compression for PNG image data. The strategy; parameter only affects the compression ratio but not the correctness of the; compressed output even if it is not set appropriately. Z_FIXED prevents the; use of dynamic Huffman codes, allowing for a simpler decoder for special; applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if a parameter is invalid (such as an invalid; method). msg is set to null if there is no error message. deflateInit2 does; not perform any compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2216,Performance,tune,tune,2216,"aw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and reduces compression ratio; memLevel=9 uses maximum memory; for optimal speed. The default value is 8. See zconf.h for total memory; usage as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as fast as; Z_HUFFMAN_ONLY, but give better compression for PNG image data. The strategy; parameter only affects the compression ratio but not the correctness of the; compressed output even if it is not set appropriately. Z_FIXED prevents the; use of dynamic Huffman codes, allowing for a simpler decoder for special; applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2615,Performance,tune,tuned,2615," optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and reduces compression ratio; memLevel=9 uses maximum memory; for optimal speed. The default value is 8. See zconf.h for total memory; usage as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as fast as; Z_HUFFMAN_ONLY, but give better compression for PNG image data. The strategy; parameter only affects the compression ratio but not the correctness of the; compressed output even if it is not set appropriately. Z_FIXED prevents the; use of dynamic Huffman codes, allowing for a simpler decoder for special; applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if a parameter is invalid (such as an invalid; method). msg is set to null if there is no error message. deflateInit2 does; not perform any compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3387,Performance,perform,perform,3387," optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and reduces compression ratio; memLevel=9 uses maximum memory; for optimal speed. The default value is 8. See zconf.h for total memory; usage as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as fast as; Z_HUFFMAN_ONLY, but give better compression for PNG image data. The strategy; parameter only affects the compression ratio but not the correctness of the; compressed output even if it is not set appropriately. Z_FIXED prevents the; use of dynamic Huffman codes, allowing for a simpler decoder for special; applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if a parameter is invalid (such as an invalid; method). msg is set to null if there is no error message. deflateInit2 does; not perform any compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2345,Safety,predict,predictor,2345,"l not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and reduces compression ratio; memLevel=9 uses maximum memory; for optimal speed. The default value is 8. See zconf.h for total memory; usage as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as fast as; Z_HUFFMAN_ONLY, but give better compression for PNG image data. The strategy; parameter only affects the compression ratio but not the correctness of the; compressed output even if it is not set appropriately. Z_FIXED prevents the; use of dynamic Huffman codes, allowing for a simpler decoder for special; applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if a parameter is invalid (such as an invalid; method). msg is set to null if there is no error message. def",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:897,Testability,log,logarithm,897,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any; pending output. inflateEnd returns Z_OK if success, Z_STREAM_ERROR if the stream state; was inconsistent. In the error case, msg may be set but then points to a; static string (which must not be deallocated).; */; /* Advanced functions */; /*; The following functions are needed only in some special applications.; */; /*; ZEXTERN int ZEXPORT deflateInit2 OF((z_streamp strm,; int level,; int method,; int windowBits,; int memLevel,; int strategy));. This is another version of deflateInit with more compression options. The; fields next_in, zalloc, zfree and opaque must be initialized before by; the caller. The method parameter is the compression method. It must be Z_DEFLATED in; this version of the library. The windowBits parameter is the base two logarithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1505,Usability,simpl,simple,1505,"; int method,; int windowBits,; int memLevel,; int strategy));. This is another version of deflateInit with more compression options. The; fields next_in, zalloc, zfree and opaque must be initialized before by; the caller. The method parameter is the compression method. It must be Z_DEFLATED in; this version of the library. The windowBits parameter is the base two logarithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and reduces compression ratio; memLevel=9 uses maximum memory; for optimal speed. The default value is 8. See zconf.h for total memory; usage as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small valu",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3118,Usability,simpl,simpler,3118," optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and reduces compression ratio; memLevel=9 uses maximum memory; for optimal speed. The default value is 8. See zconf.h for total memory; usage as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as fast as; Z_HUFFMAN_ONLY, but give better compression for PNG image data. The strategy; parameter only affects the compression ratio but not the correctness of the; compressed output even if it is not set appropriately. Z_FIXED prevents the; use of dynamic Huffman codes, allowing for a simpler decoder for special; applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if a parameter is invalid (such as an invalid; method). msg is set to null if there is no error message. deflateInit2 does; not perform any compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:745,Integrability,Depend,Depending,745,"/*; Initializes the compression dictionary from the given byte sequence; without producing any compressed output. This function must be called; immediately after deflateInit, deflateInit2 or deflateReset, before any; call of deflate. The compressor and decompressor must use exactly the same; dictionary (see inflateSetDictionary). The dictionary should consist of strings (byte sequences) that are likely; to be encountered later in the data to be compressed, with the most commonly; used strings preferably put towards the end of the dictionary. Using a; dictionary is most useful when the data to be compressed is short and can be; predicted with good accuracy; the data can then be compressed better than; with the default empty dictionary. Depending on the size of the compression data structures selected by; deflateInit or deflateInit2, a part of the dictionary may in effect be; discarded, for example if the dictionary is larger than the window size in; deflate or deflate2. Thus the strings most likely to be useful should be; put at the end of the dictionary, not at the front. In addition, the; current implementation of deflate will use at most the window size minus; 262 bytes of the provided dictionary. Upon return of this function, strm->adler is set to the adler32 value; of the dictionary; the decompressor may later use this value to determine; which dictionary has been used by the compressor. (The adler32 value; applies to the whole dictionary even if only a subset of the dictionary is; actually used by the compressor.) If a raw deflate was requested, then the; adler32 value is not computed and strm->adler is not set. deflateSetDictionary returns Z_OK if success, or Z_STREAM_ERROR if a; parameter is invalid (such as NULL dictionary) or the stream state is; inconsistent (for example if deflate has already been called for this stream; or if the compression method is bsort). deflateSetDictionary does not; perform any compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1935,Performance,perform,perform,1935,"/*; Initializes the compression dictionary from the given byte sequence; without producing any compressed output. This function must be called; immediately after deflateInit, deflateInit2 or deflateReset, before any; call of deflate. The compressor and decompressor must use exactly the same; dictionary (see inflateSetDictionary). The dictionary should consist of strings (byte sequences) that are likely; to be encountered later in the data to be compressed, with the most commonly; used strings preferably put towards the end of the dictionary. Using a; dictionary is most useful when the data to be compressed is short and can be; predicted with good accuracy; the data can then be compressed better than; with the default empty dictionary. Depending on the size of the compression data structures selected by; deflateInit or deflateInit2, a part of the dictionary may in effect be; discarded, for example if the dictionary is larger than the window size in; deflate or deflate2. Thus the strings most likely to be useful should be; put at the end of the dictionary, not at the front. In addition, the; current implementation of deflate will use at most the window size minus; 262 bytes of the provided dictionary. Upon return of this function, strm->adler is set to the adler32 value; of the dictionary; the decompressor may later use this value to determine; which dictionary has been used by the compressor. (The adler32 value; applies to the whole dictionary even if only a subset of the dictionary is; actually used by the compressor.) If a raw deflate was requested, then the; adler32 value is not computed and strm->adler is not set. deflateSetDictionary returns Z_OK if success, or Z_STREAM_ERROR if a; parameter is invalid (such as NULL dictionary) or the stream state is; inconsistent (for example if deflate has already been called for this stream; or if the compression method is bsort). deflateSetDictionary does not; perform any compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:635,Safety,predict,predicted,635,"/*; Initializes the compression dictionary from the given byte sequence; without producing any compressed output. This function must be called; immediately after deflateInit, deflateInit2 or deflateReset, before any; call of deflate. The compressor and decompressor must use exactly the same; dictionary (see inflateSetDictionary). The dictionary should consist of strings (byte sequences) that are likely; to be encountered later in the data to be compressed, with the most commonly; used strings preferably put towards the end of the dictionary. Using a; dictionary is most useful when the data to be compressed is short and can be; predicted with good accuracy; the data can then be compressed better than; with the default empty dictionary. Depending on the size of the compression data structures selected by; deflateInit or deflateInit2, a part of the dictionary may in effect be; discarded, for example if the dictionary is larger than the window size in; deflate or deflate2. Thus the strings most likely to be useful should be; put at the end of the dictionary, not at the front. In addition, the; current implementation of deflate will use at most the window size minus; 262 bytes of the provided dictionary. Upon return of this function, strm->adler is set to the adler32 value; of the dictionary; the decompressor may later use this value to determine; which dictionary has been used by the compressor. (The adler32 value; applies to the whole dictionary even if only a subset of the dictionary is; actually used by the compressor.) If a raw deflate was requested, then the; adler32 value is not computed and strm->adler is not set. deflateSetDictionary returns Z_OK if success, or Z_STREAM_ERROR if a; parameter is invalid (such as NULL dictionary) or the stream state is; inconsistent (for example if deflate has already been called for this stream; or if the compression method is bsort). deflateSetDictionary does not; perform any compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:349,Availability,avail,available,349,"/*; Dynamically update the compression level and compression strategy. The; interpretation of level and strategy is as in deflateInit2. This can be; used to switch between compression and straight copy of the input data, or; to switch to a different kind of input data requiring a different; strategy. If the compression level is changed, the input available so far; is compressed with the old level (and may be flushed); the new level will; take effect only at the next call of deflate(). Before the call of deflateParams, the stream state must be set as for; a call of deflate(), since the currently available input may have to; be compressed and flushed. In particular, strm->avail_out must be non-zero. deflateParams returns Z_OK if success, Z_STREAM_ERROR if the source; stream state was inconsistent or if a parameter was invalid, Z_BUF_ERROR; if strm->avail_out was zero.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:602,Availability,avail,available,602,"/*; Dynamically update the compression level and compression strategy. The; interpretation of level and strategy is as in deflateInit2. This can be; used to switch between compression and straight copy of the input data, or; to switch to a different kind of input data requiring a different; strategy. If the compression level is changed, the input available so far; is compressed with the old level (and may be flushed); the new level will; take effect only at the next call of deflate(). Before the call of deflateParams, the stream state must be set as for; a call of deflate(), since the currently available input may have to; be compressed and flushed. In particular, strm->avail_out must be non-zero. deflateParams returns Z_OK if success, Z_STREAM_ERROR if the source; stream state was inconsistent or if a parameter was invalid, Z_BUF_ERROR; if strm->avail_out was zero.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:16,Deployability,update,update,16,"/*; Dynamically update the compression level and compression strategy. The; interpretation of level and strategy is as in deflateInit2. This can be; used to switch between compression and straight copy of the input data, or; to switch to a different kind of input data requiring a different; strategy. If the compression level is changed, the input available so far; is compressed with the old level (and may be flushed); the new level will; take effect only at the next call of deflate(). Before the call of deflateParams, the stream state must be set as for; a call of deflate(), since the currently available input may have to; be compressed and flushed. In particular, strm->avail_out must be non-zero. deflateParams returns Z_OK if success, Z_STREAM_ERROR if the source; stream state was inconsistent or if a parameter was invalid, Z_BUF_ERROR; if strm->avail_out was zero.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:9,Performance,tune,tune,9,"/*; Fine tune deflate's internal compression parameters. This should only be; used by someone who understands the algorithm used by zlib's deflate for; searching for the best matching string, and even then only by the most; fanatic optimizer trying to squeeze out the last compressed bit for their; specific input data. Read the deflate.c source code for the meaning of the; max_lazy, good_length, nice_length, and max_chain parameters. deflateTune() can be called after deflateInit() or deflateInit2(), and; returns Z_OK on success, or Z_STREAM_ERROR for an invalid deflate stream.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:232,Performance,optimiz,optimizer,232,"/*; Fine tune deflate's internal compression parameters. This should only be; used by someone who understands the algorithm used by zlib's deflate for; searching for the best matching string, and even then only by the most; fanatic optimizer trying to squeeze out the last compressed bit for their; specific input data. Read the deflate.c source code for the meaning of the; max_lazy, good_length, nice_length, and max_chain parameters. deflateTune() can be called after deflateInit() or deflateInit2(), and; returns Z_OK on success, or Z_STREAM_ERROR for an invalid deflate stream.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:182,Energy Efficiency,allocate,allocate,182,"/*; deflateBound() returns an upper bound on the compressed size after; deflation of sourceLen bytes. It must be called after deflateInit(); or deflateInit2(). This would be used to allocate an output buffer; for deflation in a single pass, and so would be called before deflate().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:595,Availability,avail,available,595,"/*; deflateSetHeader() provides gzip header information for when a gzip; stream is requested by deflateInit2(). deflateSetHeader() may be called; after deflateInit2() or deflateReset() and before the first call of; deflate(). The text, time, os, extra field, name, and comment information; in the provided gz_header structure are written to the gzip header (xflag is; ignored -- the extra flags are set according to the compression level). The; caller must assure that, if not Z_NULL, name and comment are terminated with; a zero byte, and that if extra is not Z_NULL, that extra_len bytes are; available there. If hcrc is true, a gzip header crc is included. Note that; the current versions of the command-line version of gzip (up through version; 1.3.x) do not support header crc's, and will report that it is a ""multi-part; gzip file"" and give up. If deflateSetHeader is not used, the default gzip header has text false,; the time set to zero, and os set to 255, with no extra, name, or comment; fields. The gzip header is returned to the default state by deflateReset(). deflateSetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateInit2 OF((z_streamp strm,; int windowBits));. This is another version of inflateInit with an extra parameter. The; fields next_in, avail_in, zalloc, zfree and opaque must be initialized; before by the caller. The windowBits parameter is the base two logarithm of the maximum window; size (the size of the history buffer). It should be in the range 8..15 for; this version of the library. The default value is 15 if inflateInit is used; instead. windowBits must be greater than or equal to the windowBits value; provided to deflateInit2() while compressing, or it must be equal to 15 if; deflateInit2() was not used. If a compressed stream with a larger window; size is given as input, inflate() will return with the error code; Z_DATA_ERROR instead of trying to allocate a larger wind",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1933,Availability,error,error,1933,"alse,; the time set to zero, and os set to 255, with no extra, name, or comment; fields. The gzip header is returned to the default state by deflateReset(). deflateSetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateInit2 OF((z_streamp strm,; int windowBits));. This is another version of inflateInit with an extra parameter. The; fields next_in, avail_in, zalloc, zfree and opaque must be initialized; before by the caller. The windowBits parameter is the base two logarithm of the maximum window; size (the size of the history buffer). It should be in the range 8..15 for; this version of the library. The default value is 15 if inflateInit is used; instead. windowBits must be greater than or equal to the windowBits value; provided to deflateInit2() while compressing, or it must be equal to 15 if; deflateInit2() was not used. If a compressed stream with a larger window; size is given as input, inflate() will return with the error code; Z_DATA_ERROR instead of trying to allocate a larger window. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate compressed data format; such as zip. Those formats provide their own check values. If a custom; format is developed using the raw deflate format for compressed data, it is; recommended that a check value such as an adler32 or a crc32 be applied to; the uncompressed data as is done in the zlib, gzip, and zip formats. For; most applications, the zlib format should be used as is. Note that comments; above on the use in deflateInit2() applies to the magnitude of windowBits. windowBits can also be greater than 15 for optional gzip decoding. Add; 32 to windo",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3343,Availability,error,error,3343,"this version of the library. The default value is 15 if inflateInit is used; instead. windowBits must be greater than or equal to the windowBits value; provided to deflateInit2() while compressing, or it must be equal to 15 if; deflateInit2() was not used. If a compressed stream with a larger window; size is given as input, inflate() will return with the error code; Z_DATA_ERROR instead of trying to allocate a larger window. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate compressed data format; such as zip. Those formats provide their own check values. If a custom; format is developed using the raw deflate format for compressed data, it is; recommended that a check value such as an adler32 or a crc32 be applied to; the uncompressed data as is done in the zlib, gzip, and zip formats. For; most applications, the zlib format should be used as is. Note that comments; above on the use in deflateInit2() applies to the magnitude of windowBits. windowBits can also be greater than 15 for optional gzip decoding. Add; 32 to windowBits to enable zlib and gzip decoding with automatic header; detection, or add 16 to decode only the gzip format (the zlib format will; return a Z_DATA_ERROR). If a gzip stream is being decoded, strm->adler is; a crc32 instead of an adler32. inflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if a parameter is invalid (such as a null strm). msg; is set to null if there is no error message. inflateInit2 does not perform; any decompression apart from reading the zlib header if present: this will; be done by inflate(). (So next_in and avail_in may be modified, but next_out; and avail_out are unchanged.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1979,Energy Efficiency,allocate,allocate,1979,"alse,; the time set to zero, and os set to 255, with no extra, name, or comment; fields. The gzip header is returned to the default state by deflateReset(). deflateSetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateInit2 OF((z_streamp strm,; int windowBits));. This is another version of inflateInit with an extra parameter. The; fields next_in, avail_in, zalloc, zfree and opaque must be initialized; before by the caller. The windowBits parameter is the base two logarithm of the maximum window; size (the size of the history buffer). It should be in the range 8..15 for; this version of the library. The default value is 15 if inflateInit is used; instead. windowBits must be greater than or equal to the windowBits value; provided to deflateInit2() while compressing, or it must be equal to 15 if; deflateInit2() was not used. If a compressed stream with a larger window; size is given as input, inflate() will return with the error code; Z_DATA_ERROR instead of trying to allocate a larger window. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate compressed data format; such as zip. Those formats provide their own check values. If a custom; format is developed using the raw deflate format for compressed data, it is; recommended that a check value such as an adler32 or a crc32 be applied to; the uncompressed data as is done in the zlib, gzip, and zip formats. For; most applications, the zlib format should be used as is. Note that comments; above on the use in deflateInit2() applies to the magnitude of windowBits. windowBits can also be greater than 15 for optional gzip decoding. Add; 32 to windo",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3349,Integrability,message,message,3349,"this version of the library. The default value is 15 if inflateInit is used; instead. windowBits must be greater than or equal to the windowBits value; provided to deflateInit2() while compressing, or it must be equal to 15 if; deflateInit2() was not used. If a compressed stream with a larger window; size is given as input, inflate() will return with the error code; Z_DATA_ERROR instead of trying to allocate a larger window. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate compressed data format; such as zip. Those formats provide their own check values. If a custom; format is developed using the raw deflate format for compressed data, it is; recommended that a check value such as an adler32 or a crc32 be applied to; the uncompressed data as is done in the zlib, gzip, and zip formats. For; most applications, the zlib format should be used as is. Note that comments; above on the use in deflateInit2() applies to the magnitude of windowBits. windowBits can also be greater than 15 for optional gzip decoding. Add; 32 to windowBits to enable zlib and gzip decoding with automatic header; detection, or add 16 to decode only the gzip format (the zlib format will; return a Z_DATA_ERROR). If a gzip stream is being decoded, strm->adler is; a crc32 instead of an adler32. inflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if a parameter is invalid (such as a null strm). msg; is set to null if there is no error message. inflateInit2 does not perform; any decompression apart from reading the zlib header if present: this will; be done by inflate(). (So next_in and avail_in may be modified, but next_out; and avail_out are unchanged.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3380,Performance,perform,perform,3380,"this version of the library. The default value is 15 if inflateInit is used; instead. windowBits must be greater than or equal to the windowBits value; provided to deflateInit2() while compressing, or it must be equal to 15 if; deflateInit2() was not used. If a compressed stream with a larger window; size is given as input, inflate() will return with the error code; Z_DATA_ERROR instead of trying to allocate a larger window. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate compressed data format; such as zip. Those formats provide their own check values. If a custom; format is developed using the raw deflate format for compressed data, it is; recommended that a check value such as an adler32 or a crc32 be applied to; the uncompressed data as is done in the zlib, gzip, and zip formats. For; most applications, the zlib format should be used as is. Note that comments; above on the use in deflateInit2() applies to the magnitude of windowBits. windowBits can also be greater than 15 for optional gzip decoding. Add; 32 to windowBits to enable zlib and gzip decoding with automatic header; detection, or add 16 to decode only the gzip format (the zlib format will; return a Z_DATA_ERROR). If a gzip stream is being decoded, strm->adler is; a crc32 instead of an adler32. inflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if a parameter is invalid (such as a null strm). msg; is set to null if there is no error message. inflateInit2 does not perform; any decompression apart from reading the zlib header if present: this will; be done by inflate(). (So next_in and avail_in may be modified, but next_out; and avail_out are unchanged.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2980,Safety,detect,detection,2980,"this version of the library. The default value is 15 if inflateInit is used; instead. windowBits must be greater than or equal to the windowBits value; provided to deflateInit2() while compressing, or it must be equal to 15 if; deflateInit2() was not used. If a compressed stream with a larger window; size is given as input, inflate() will return with the error code; Z_DATA_ERROR instead of trying to allocate a larger window. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate compressed data format; such as zip. Those formats provide their own check values. If a custom; format is developed using the raw deflate format for compressed data, it is; recommended that a check value such as an adler32 or a crc32 be applied to; the uncompressed data as is done in the zlib, gzip, and zip formats. For; most applications, the zlib format should be used as is. Note that comments; above on the use in deflateInit2() applies to the magnitude of windowBits. windowBits can also be greater than 15 for optional gzip decoding. Add; 32 to windowBits to enable zlib and gzip decoding with automatic header; detection, or add 16 to decode only the gzip format (the zlib format will; return a Z_DATA_ERROR). If a gzip stream is being decoded, strm->adler is; a crc32 instead of an adler32. inflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if a parameter is invalid (such as a null strm). msg; is set to null if there is no error message. inflateInit2 does not perform; any decompression apart from reading the zlib header if present: this will; be done by inflate(). (So next_in and avail_in may be modified, but next_out; and avail_out are unchanged.); */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1467,Testability,log,logarithm,1467,"LL, name and comment are terminated with; a zero byte, and that if extra is not Z_NULL, that extra_len bytes are; available there. If hcrc is true, a gzip header crc is included. Note that; the current versions of the command-line version of gzip (up through version; 1.3.x) do not support header crc's, and will report that it is a ""multi-part; gzip file"" and give up. If deflateSetHeader is not used, the default gzip header has text false,; the time set to zero, and os set to 255, with no extra, name, or comment; fields. The gzip header is returned to the default state by deflateReset(). deflateSetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateInit2 OF((z_streamp strm,; int windowBits));. This is another version of inflateInit with an extra parameter. The; fields next_in, avail_in, zalloc, zfree and opaque must be initialized; before by the caller. The windowBits parameter is the base two logarithm of the maximum window; size (the size of the history buffer). It should be in the range 8..15 for; this version of the library. The default value is 15 if inflateInit is used; instead. windowBits must be greater than or equal to the windowBits value; provided to deflateInit2() while compressing, or it must be equal to 15 if; deflateInit2() was not used. If a compressed stream with a larger window; size is given as input, inflate() will return with the error code; Z_DATA_ERROR instead of trying to allocate a larger window. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate compressed data format; such as zip. Those formats provide their own check values. If a custom; format is developed using ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:931,Performance,perform,perform,931,"/*; Initializes the decompression dictionary from the given uncompressed byte; sequence. This function must be called immediately after a call of inflate,; if that call returned Z_NEED_DICT. The dictionary chosen by the compressor; can be determined from the adler32 value returned by that call of inflate.; The compressor and decompressor must use exactly the same dictionary (see; deflateSetDictionary). For raw inflate, this function can be called; immediately after inflateInit2() or inflateReset() and before any call of; inflate() to set the dictionary. The application must insure that the; dictionary that was used for compression is provided. inflateSetDictionary returns Z_OK if success, Z_STREAM_ERROR if a; parameter is invalid (such as NULL dictionary) or the stream state is; inconsistent, Z_DATA_ERROR if the given dictionary doesn't match the; expected one (incorrect adler32 value). inflateSetDictionary does not; perform any decompression: this will be done by subsequent calls of; inflate().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:145,Availability,avail,available,145,"/*; Skips invalid compressed data until a full flush point (see above the; description of deflate with Z_FULL_FLUSH) can be found, or until all; available input is skipped. No output is provided. inflateSync returns Z_OK if a full flush point has been found, Z_BUF_ERROR; if no more input was provided, Z_DATA_ERROR if no flush point has been found,; or Z_STREAM_ERROR if the stream structure was inconsistent. In the success; case, the application may save the current current value of total_in which; indicates where valid compressed data was found. In the error case, the; application may repeatedly call inflateSync, providing more input each time,; until success or end of the input data.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:559,Availability,error,error,559,"/*; Skips invalid compressed data until a full flush point (see above the; description of deflate with Z_FULL_FLUSH) can be found, or until all; available input is skipped. No output is provided. inflateSync returns Z_OK if a full flush point has been found, Z_BUF_ERROR; if no more input was provided, Z_DATA_ERROR if no flush point has been found,; or Z_STREAM_ERROR if the stream structure was inconsistent. In the success; case, the application may save the current current value of total_in which; indicates where valid compressed data was found. In the error case, the; application may repeatedly call inflateSync, providing more input each time,; until success or end of the input data.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:115,Security,access,accessing,115,"/*; Sets the destination stream as a complete copy of the source stream. This function can be useful when randomly accessing a large stream. The; first pass through the stream can periodically record the inflate state,; allowing restarting inflate at those points when randomly accessing the; stream. inflateCopy returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_STREAM_ERROR if the source stream state was inconsistent; (such as zalloc being NULL). msg is left unchanged in both source and; destination.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:278,Security,access,accessing,278,"/*; Sets the destination stream as a complete copy of the source stream. This function can be useful when randomly accessing a large stream. The; first pass through the stream can periodically record the inflate state,; allowing restarting inflate at those points when randomly accessing the; stream. inflateCopy returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_STREAM_ERROR if the source stream state was inconsistent; (such as zalloc being NULL). msg is left unchanged in both source and; destination.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1674,Energy Efficiency,allocate,allocated,1674,"er; contents. hcrc is set to true if there is a header CRC. (The header CRC; was valid if done is set to one.) If extra is not Z_NULL, then extra_max; contains the maximum number of bytes to write to extra. Once done is true,; extra_len contains the actual extra field length, and extra contains the; extra field, or that field truncated if extra_max is less than extra_len.; If name is not Z_NULL, then up to name_max characters are written there,; terminated with a zero unless the length is greater than name_max. If; comment is not Z_NULL, then up to comm_max characters are written there,; terminated with a zero unless the length is greater than comm_max. When; any of extra, name, or comment are not Z_NULL and the respective field is; not present in the header, then that field is set to Z_NULL to signal its; absence. This allows the use of deflateSetHeader() with the returned; structure to duplicate the header. However if those fields are set to; allocated memory, then the application will need to save those pointers; elsewhere so that they can be eventually freed. If inflateGetHeader is not used, then the header information is simply; discarded. The header is always checked for validity, including the header; CRC if present. inflateReset() will reset the process to discard the header; information. The application would need to call inflateGetHeader() again to; retrieve the header from the next gzip stream. inflateGetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,; unsigned char FAR *window));. Initialize the internal stream state for decompression using inflateBack(); calls. The fields zalloc, zfree and opaque in strm must be initialized; before the call. If zalloc and zfree are Z_NULL, then the default library-; derived memory allocation routines are used. windowBits is the base two; logarithm of the window size, in the range 8..15. window ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3170,Energy Efficiency,allocate,allocated,3170,"aracters are written there,; terminated with a zero unless the length is greater than comm_max. When; any of extra, name, or comment are not Z_NULL and the respective field is; not present in the header, then that field is set to Z_NULL to signal its; absence. This allows the use of deflateSetHeader() with the returned; structure to duplicate the header. However if those fields are set to; allocated memory, then the application will need to save those pointers; elsewhere so that they can be eventually freed. If inflateGetHeader is not used, then the header information is simply; discarded. The header is always checked for validity, including the header; CRC if present. inflateReset() will reset the process to discard the header; information. The application would need to call inflateGetHeader() again to; retrieve the header from the next gzip stream. inflateGetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,; unsigned char FAR *window));. Initialize the internal stream state for decompression using inflateBack(); calls. The fields zalloc, zfree and opaque in strm must be initialized; before the call. If zalloc and zfree are Z_NULL, then the default library-; derived memory allocation routines are used. windowBits is the base two; logarithm of the window size, in the range 8..15. window is a caller; supplied buffer of that size. Except for special applications where it is; assured that deflate was used with small window sizes, windowBits must be 15; and a 32K byte window must be supplied to be able to decompress general; deflate streams. See inflateBack() for the usage of these routines. inflateBackInit will return Z_OK on success, Z_STREAM_ERROR if any of; the parameters are invalid, Z_MEM_ERROR if the internal state could not; be allocated, or Z_VERSION_ERROR if the version of the library does not; match the version of the header file.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2612,Integrability,rout,routines,2612,"aracters are written there,; terminated with a zero unless the length is greater than comm_max. When; any of extra, name, or comment are not Z_NULL and the respective field is; not present in the header, then that field is set to Z_NULL to signal its; absence. This allows the use of deflateSetHeader() with the returned; structure to duplicate the header. However if those fields are set to; allocated memory, then the application will need to save those pointers; elsewhere so that they can be eventually freed. If inflateGetHeader is not used, then the header information is simply; discarded. The header is always checked for validity, including the header; CRC if present. inflateReset() will reset the process to discard the header; information. The application would need to call inflateGetHeader() again to; retrieve the header from the next gzip stream. inflateGetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,; unsigned char FAR *window));. Initialize the internal stream state for decompression using inflateBack(); calls. The fields zalloc, zfree and opaque in strm must be initialized; before the call. If zalloc and zfree are Z_NULL, then the default library-; derived memory allocation routines are used. windowBits is the base two; logarithm of the window size, in the range 8..15. window is a caller; supplied buffer of that size. Except for special applications where it is; assured that deflate was used with small window sizes, windowBits must be 15; and a 32K byte window must be supplied to be able to decompress general; deflate streams. See inflateBack() for the usage of these routines. inflateBackInit will return Z_OK on success, Z_STREAM_ERROR if any of; the parameters are invalid, Z_MEM_ERROR if the internal state could not; be allocated, or Z_VERSION_ERROR if the version of the library does not; match the version of the header file.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3013,Integrability,rout,routines,3013,"aracters are written there,; terminated with a zero unless the length is greater than comm_max. When; any of extra, name, or comment are not Z_NULL and the respective field is; not present in the header, then that field is set to Z_NULL to signal its; absence. This allows the use of deflateSetHeader() with the returned; structure to duplicate the header. However if those fields are set to; allocated memory, then the application will need to save those pointers; elsewhere so that they can be eventually freed. If inflateGetHeader is not used, then the header information is simply; discarded. The header is always checked for validity, including the header; CRC if present. inflateReset() will reset the process to discard the header; information. The application would need to call inflateGetHeader() again to; retrieve the header from the next gzip stream. inflateGetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,; unsigned char FAR *window));. Initialize the internal stream state for decompression using inflateBack(); calls. The fields zalloc, zfree and opaque in strm must be initialized; before the call. If zalloc and zfree are Z_NULL, then the default library-; derived memory allocation routines are used. windowBits is the base two; logarithm of the window size, in the range 8..15. window is a caller; supplied buffer of that size. Except for special applications where it is; assured that deflate was used with small window sizes, windowBits must be 15; and a 32K byte window must be supplied to be able to decompress general; deflate streams. See inflateBack() for the usage of these routines. inflateBackInit will return Z_OK on success, Z_STREAM_ERROR if any of; the parameters are invalid, Z_MEM_ERROR if the internal state could not; be allocated, or Z_VERSION_ERROR if the version of the library does not; match the version of the header file.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2659,Testability,log,logarithm,2659,"aracters are written there,; terminated with a zero unless the length is greater than comm_max. When; any of extra, name, or comment are not Z_NULL and the respective field is; not present in the header, then that field is set to Z_NULL to signal its; absence. This allows the use of deflateSetHeader() with the returned; structure to duplicate the header. However if those fields are set to; allocated memory, then the application will need to save those pointers; elsewhere so that they can be eventually freed. If inflateGetHeader is not used, then the header information is simply; discarded. The header is always checked for validity, including the header; CRC if present. inflateReset() will reset the process to discard the header; information. The application would need to call inflateGetHeader() again to; retrieve the header from the next gzip stream. inflateGetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,; unsigned char FAR *window));. Initialize the internal stream state for decompression using inflateBack(); calls. The fields zalloc, zfree and opaque in strm must be initialized; before the call. If zalloc and zfree are Z_NULL, then the default library-; derived memory allocation routines are used. windowBits is the base two; logarithm of the window size, in the range 8..15. window is a caller; supplied buffer of that size. Except for special applications where it is; assured that deflate was used with small window sizes, windowBits must be 15; and a 32K byte window must be supplied to be able to decompress general; deflate streams. See inflateBack() for the usage of these routines. inflateBackInit will return Z_OK on success, Z_STREAM_ERROR if any of; the parameters are invalid, Z_MEM_ERROR if the internal state could not; be allocated, or Z_VERSION_ERROR if the version of the library does not; match the version of the header file.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1859,Usability,simpl,simply,1859,"is not Z_NULL, then extra_max; contains the maximum number of bytes to write to extra. Once done is true,; extra_len contains the actual extra field length, and extra contains the; extra field, or that field truncated if extra_max is less than extra_len.; If name is not Z_NULL, then up to name_max characters are written there,; terminated with a zero unless the length is greater than name_max. If; comment is not Z_NULL, then up to comm_max characters are written there,; terminated with a zero unless the length is greater than comm_max. When; any of extra, name, or comment are not Z_NULL and the respective field is; not present in the header, then that field is set to Z_NULL to signal its; absence. This allows the use of deflateSetHeader() with the returned; structure to duplicate the header. However if those fields are set to; allocated memory, then the application will need to save those pointers; elsewhere so that they can be eventually freed. If inflateGetHeader is not used, then the header information is simply; discarded. The header is always checked for validity, including the header; CRC if present. inflateReset() will reset the process to discard the header; information. The application would need to call inflateGetHeader() again to; retrieve the header from the next gzip stream. inflateGetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,; unsigned char FAR *window));. Initialize the internal stream state for decompression using inflateBack(); calls. The fields zalloc, zfree and opaque in strm must be initialized; before the call. If zalloc and zfree are Z_NULL, then the default library-; derived memory allocation routines are used. windowBits is the base two; logarithm of the window size, in the range 8..15. window is a caller; supplied buffer of that size. Except for special applications where it is; assured that deflate was used wi",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1476,Availability,error,error,1476,"t until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free; the allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects; only the raw deflate stream to decompress. This is different from the; normal behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on failure. If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provid",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1744,Availability,avail,available,1744,"p header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects; only the raw deflate stream to decompress. This is different from the; normal behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on failure. If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1847,Availability,error,error,1847,"p header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects; only the raw deflate stream to decompress. This is different from the; normal behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on failure. If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2002,Availability,failure,failure,2002,"iler on its own, hence this routine expects; only the raw deflate stream to decompress. This is different from the; normal behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on failure. If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_in is not zero, input will; initially be taken from strm->next_in[0 .. strm->avail_in - 1]. The in_desc and out_desc parameters of inflateBack() is passed as the; first parameter of in() and o",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2073,Availability,error,error,2073," stream to decompress. This is different from the; normal behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on failure. If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_in is not zero, input will; initially be taken from strm->next_in[0 .. strm->avail_in - 1]. The in_desc and out_desc parameters of inflateBack() is passed as the; first parameter of in() and out() respectively when they are called. These; descriptors can be ",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3408,Availability,error,error,3408,"If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_in is not zero, input will; initially be taken from strm->next_in[0 .. strm->avail_in - 1]. The in_desc and out_desc parameters of inflateBack() is passed as the; first parameter of in() and out() respectively when they are called. These; descriptors can be optionally used to pass any information that the caller-; supplied in() and out() functions need to do their job. On return, inflateBack() will set strm->next_in and strm->avail_in to; pass back any unused input that was provided by the last in() call. The; return values of inflateBack() can be Z_STREAM_END on success, Z_BUF_ERROR; if in() or out() returned an error, Z_DATA_ERROR if there was a format; error in the deflate stream (in which case strm->msg is set to indicate the; nature of the error), or Z_STREAM_ERROR if the stream was not properly; initialized. In the case of Z_BUF_ERROR, an input or output error can be; distinguished using strm->next_in which will be Z_NULL only if in() returned; an error. If strm->next is not Z_NULL, then the Z_BUF_ERROR was due to; out() returning non-zero. (in() will always be called before out(), so; strm->next_in is assured to be defined if out() returns non-zero.) Note; that inflateBack() cannot return Z_OK.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3451,Availability,error,error,3451,"If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_in is not zero, input will; initially be taken from strm->next_in[0 .. strm->avail_in - 1]. The in_desc and out_desc parameters of inflateBack() is passed as the; first parameter of in() and out() respectively when they are called. These; descriptors can be optionally used to pass any information that the caller-; supplied in() and out() functions need to do their job. On return, inflateBack() will set strm->next_in and strm->avail_in to; pass back any unused input that was provided by the last in() call. The; return values of inflateBack() can be Z_STREAM_END on success, Z_BUF_ERROR; if in() or out() returned an error, Z_DATA_ERROR if there was a format; error in the deflate stream (in which case strm->msg is set to indicate the; nature of the error), or Z_STREAM_ERROR if the stream was not properly; initialized. In the case of Z_BUF_ERROR, an input or output error can be; distinguished using strm->next_in which will be Z_NULL only if in() returned; an error. If strm->next is not Z_NULL, then the Z_BUF_ERROR was due to; out() returning non-zero. (in() will always be called before out(), so; strm->next_in is assured to be defined if out() returns non-zero.) Note; that inflateBack() cannot return Z_OK.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3542,Availability,error,error,3542,"If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_in is not zero, input will; initially be taken from strm->next_in[0 .. strm->avail_in - 1]. The in_desc and out_desc parameters of inflateBack() is passed as the; first parameter of in() and out() respectively when they are called. These; descriptors can be optionally used to pass any information that the caller-; supplied in() and out() functions need to do their job. On return, inflateBack() will set strm->next_in and strm->avail_in to; pass back any unused input that was provided by the last in() call. The; return values of inflateBack() can be Z_STREAM_END on success, Z_BUF_ERROR; if in() or out() returned an error, Z_DATA_ERROR if there was a format; error in the deflate stream (in which case strm->msg is set to indicate the; nature of the error), or Z_STREAM_ERROR if the stream was not properly; initialized. In the case of Z_BUF_ERROR, an input or output error can be; distinguished using strm->next_in which will be Z_NULL only if in() returned; an error. If strm->next is not Z_NULL, then the Z_BUF_ERROR was due to; out() returning non-zero. (in() will always be called before out(), so; strm->next_in is assured to be defined if out() returns non-zero.) Note; that inflateBack() cannot return Z_OK.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3660,Availability,error,error,3660,"If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_in is not zero, input will; initially be taken from strm->next_in[0 .. strm->avail_in - 1]. The in_desc and out_desc parameters of inflateBack() is passed as the; first parameter of in() and out() respectively when they are called. These; descriptors can be optionally used to pass any information that the caller-; supplied in() and out() functions need to do their job. On return, inflateBack() will set strm->next_in and strm->avail_in to; pass back any unused input that was provided by the last in() call. The; return values of inflateBack() can be Z_STREAM_END on success, Z_BUF_ERROR; if in() or out() returned an error, Z_DATA_ERROR if there was a format; error in the deflate stream (in which case strm->msg is set to indicate the; nature of the error), or Z_STREAM_ERROR if the stream was not properly; initialized. In the case of Z_BUF_ERROR, an input or output error can be; distinguished using strm->next_in which will be Z_NULL only if in() returned; an error. If strm->next is not Z_NULL, then the Z_BUF_ERROR was due to; out() returning non-zero. (in() will always be called before out(), so; strm->next_in is assured to be defined if out() returns non-zero.) Note; that inflateBack() cannot return Z_OK.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3755,Availability,error,error,3755,"If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_in is not zero, input will; initially be taken from strm->next_in[0 .. strm->avail_in - 1]. The in_desc and out_desc parameters of inflateBack() is passed as the; first parameter of in() and out() respectively when they are called. These; descriptors can be optionally used to pass any information that the caller-; supplied in() and out() functions need to do their job. On return, inflateBack() will set strm->next_in and strm->avail_in to; pass back any unused input that was provided by the last in() call. The; return values of inflateBack() can be Z_STREAM_END on success, Z_BUF_ERROR; if in() or out() returned an error, Z_DATA_ERROR if there was a format; error in the deflate stream (in which case strm->msg is set to indicate the; nature of the error), or Z_STREAM_ERROR if the stream was not properly; initialized. In the case of Z_BUF_ERROR, an input or output error can be; distinguished using strm->next_in which will be Z_NULL only if in() returned; an error. If strm->next is not Z_NULL, then the Z_BUF_ERROR was due to; out() returning non-zero. (in() will always be called before out(), so; strm->next_in is assured to be defined if out() returns non-zero.) Note; that inflateBack() cannot return Z_OK.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:120,Energy Efficiency,efficient,efficient,120,"/*; inflateBack() does a raw inflate with a single call using a call-back; interface for input and output. This is more efficient than inflate() for; file i/o applications in that it avoids copying between the output and the; sliding window by simply making the window itself the output buffer. This; function trusts the application to not change the output buffer passed by; the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free; the allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects; only the raw deflate stream to decompress. This is different from the; normal behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:477,Energy Efficiency,allocate,allocate,477,"/*; inflateBack() does a raw inflate with a single call using a call-back; interface for input and output. This is more efficient than inflate() for; file i/o applications in that it avoids copying between the output and the; sliding window by simply making the window itself the output buffer. This; function trusts the application to not change the output buffer passed by; the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free; the allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects; only the raw deflate stream to decompress. This is different from the; normal behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:723,Energy Efficiency,allocate,allocated,723,"/*; inflateBack() does a raw inflate with a single call using a call-back; interface for input and output. This is more efficient than inflate() for; file i/o applications in that it avoids copying between the output and the; sliding window by simply making the window itself the output buffer. This; function trusts the application to not change the output buffer passed by; the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free; the allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects; only the raw deflate stream to decompress. This is different from the; normal behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:75,Integrability,interface,interface,75,"/*; inflateBack() does a raw inflate with a single call using a call-back; interface for input and output. This is more efficient than inflate() for; file i/o applications in that it avoids copying between the output and the; sliding window by simply making the window itself the output buffer. This; function trusts the application to not change the output buffer passed by; the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free; the allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects; only the raw deflate stream to decompress. This is different from the; normal behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:814,Integrability,rout,routine,814,"/*; inflateBack() does a raw inflate with a single call using a call-back; interface for input and output. This is more efficient than inflate() for; file i/o applications in that it avoids copying between the output and the; sliding window by simply making the window itself the output buffer. This; function trusts the application to not change the output buffer passed by; the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free; the allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects; only the raw deflate stream to decompress. This is different from the; normal behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1007,Integrability,rout,routine,1007,"/*; inflateBack() does a raw inflate with a single call using a call-back; interface for input and output. This is more efficient than inflate() for; file i/o applications in that it avoids copying between the output and the; sliding window by simply making the window itself the output buffer. This; function trusts the application to not change the output buffer passed by; the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free; the allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects; only the raw deflate stream to decompress. This is different from the; normal behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1354,Integrability,rout,routines,1354,"t until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free; the allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects; only the raw deflate stream to decompress. This is different from the; normal behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on failure. If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provid",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:183,Safety,avoid,avoids,183,"/*; inflateBack() does a raw inflate with a single call using a call-back; interface for input and output. This is more efficient than inflate() for; file i/o applications in that it avoids copying between the output and the; sliding window by simply making the window itself the output buffer. This; function trusts the application to not change the output buffer passed by; the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free; the allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects; only the raw deflate stream to decompress. This is different from the; normal behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:244,Usability,simpl,simply,244,"/*; inflateBack() does a raw inflate with a single call using a call-back; interface for input and output. This is more efficient than inflate() for; file i/o applications in that it avoids copying between the output and the; sliding window by simply making the window itself the output buffer. This; function trusts the application to not change the output buffer passed by; the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free; the allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects; only the raw deflate stream to decompress. This is different from the; normal behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:15,Energy Efficiency,allocate,allocated,15,"/*; All memory allocated by inflateBackInit() is freed. inflateBackEnd() returns Z_OK on success, or Z_STREAM_ERROR if the stream; state was inconsistent.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1577,Integrability,interface,interface,1577,"/* Return flags indicating compile-time options. Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:; 1.0: size of uInt; 3.2: size of uLong; 5.4: size of voidpf (pointer); 7.6: size of z_off_t. Compiler, assembler, and debug options:; 8: DEBUG; 9: ASMV or ASMINF -- use ASM code; 10: ZLIB_WINAPI -- exported functions use the WINAPI calling convention; 11: 0 (reserved). One-time table building (smaller code, but not thread-safe if true):; 12: BUILDFIXED -- build static block decoding tables when needed; 13: DYNAMIC_CRC_TABLE -- build CRC calculation tables when needed; 14,15: 0 (reserved). Library content (indicates missing functionality):; 16: NO_GZCOMPRESS -- gz* functions cannot compress (to avoid linking; deflate code when not needed); 17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect; and decode gzip streams (to avoid linking crc code); 18-19: 0 (reserved). Operation variations (changes in library functionality):; 20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate; 21: FASTEST -- deflate algorithm with only one, lowest compression level; 22,23: 0 (reserved). The sprintf variant used by gzprintf (zero is best):; 24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format; 25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!; 26: 0 = returns value, 1 = void -- 1 means inferred string length returned. Remainder:; 27-31: 0 (reserved); */; /* utility functions */; /*; The following utility functions are implemented on top of the; basic stream-oriented functions. To simplify the interface, some; default options are assumed (compression level and memory usage,; standard memory allocation functions). The source code of these; utility functions can easily be modified if you need special options.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:444,Safety,safe,safe,444,"/* Return flags indicating compile-time options. Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:; 1.0: size of uInt; 3.2: size of uLong; 5.4: size of voidpf (pointer); 7.6: size of z_off_t. Compiler, assembler, and debug options:; 8: DEBUG; 9: ASMV or ASMINF -- use ASM code; 10: ZLIB_WINAPI -- exported functions use the WINAPI calling convention; 11: 0 (reserved). One-time table building (smaller code, but not thread-safe if true):; 12: BUILDFIXED -- build static block decoding tables when needed; 13: DYNAMIC_CRC_TABLE -- build CRC calculation tables when needed; 14,15: 0 (reserved). Library content (indicates missing functionality):; 16: NO_GZCOMPRESS -- gz* functions cannot compress (to avoid linking; deflate code when not needed); 17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect; and decode gzip streams (to avoid linking crc code); 18-19: 0 (reserved). Operation variations (changes in library functionality):; 20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate; 21: FASTEST -- deflate algorithm with only one, lowest compression level; 22,23: 0 (reserved). The sprintf variant used by gzprintf (zero is best):; 24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format; 25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!; 26: 0 = returns value, 1 = void -- 1 means inferred string length returned. Remainder:; 27-31: 0 (reserved); */; /* utility functions */; /*; The following utility functions are implemented on top of the; basic stream-oriented functions. To simplify the interface, some; default options are assumed (compression level and memory usage,; standard memory allocation functions). The source code of these; utility functions can easily be modified if you need special options.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:721,Safety,avoid,avoid,721,"/* Return flags indicating compile-time options. Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:; 1.0: size of uInt; 3.2: size of uLong; 5.4: size of voidpf (pointer); 7.6: size of z_off_t. Compiler, assembler, and debug options:; 8: DEBUG; 9: ASMV or ASMINF -- use ASM code; 10: ZLIB_WINAPI -- exported functions use the WINAPI calling convention; 11: 0 (reserved). One-time table building (smaller code, but not thread-safe if true):; 12: BUILDFIXED -- build static block decoding tables when needed; 13: DYNAMIC_CRC_TABLE -- build CRC calculation tables when needed; 14,15: 0 (reserved). Library content (indicates missing functionality):; 16: NO_GZCOMPRESS -- gz* functions cannot compress (to avoid linking; deflate code when not needed); 17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect; and decode gzip streams (to avoid linking crc code); 18-19: 0 (reserved). Operation variations (changes in library functionality):; 20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate; 21: FASTEST -- deflate algorithm with only one, lowest compression level; 22,23: 0 (reserved). The sprintf variant used by gzprintf (zero is best):; 24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format; 25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!; 26: 0 = returns value, 1 = void -- 1 means inferred string length returned. Remainder:; 27-31: 0 (reserved); */; /* utility functions */; /*; The following utility functions are implemented on top of the; basic stream-oriented functions. To simplify the interface, some; default options are assumed (compression level and memory usage,; standard memory allocation functions). The source code of these; utility functions can easily be modified if you need special options.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:834,Safety,detect,detect,834,"/* Return flags indicating compile-time options. Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:; 1.0: size of uInt; 3.2: size of uLong; 5.4: size of voidpf (pointer); 7.6: size of z_off_t. Compiler, assembler, and debug options:; 8: DEBUG; 9: ASMV or ASMINF -- use ASM code; 10: ZLIB_WINAPI -- exported functions use the WINAPI calling convention; 11: 0 (reserved). One-time table building (smaller code, but not thread-safe if true):; 12: BUILDFIXED -- build static block decoding tables when needed; 13: DYNAMIC_CRC_TABLE -- build CRC calculation tables when needed; 14,15: 0 (reserved). Library content (indicates missing functionality):; 16: NO_GZCOMPRESS -- gz* functions cannot compress (to avoid linking; deflate code when not needed); 17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect; and decode gzip streams (to avoid linking crc code); 18-19: 0 (reserved). Operation variations (changes in library functionality):; 20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate; 21: FASTEST -- deflate algorithm with only one, lowest compression level; 22,23: 0 (reserved). The sprintf variant used by gzprintf (zero is best):; 24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format; 25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!; 26: 0 = returns value, 1 = void -- 1 means inferred string length returned. Remainder:; 27-31: 0 (reserved); */; /* utility functions */; /*; The following utility functions are implemented on top of the; basic stream-oriented functions. To simplify the interface, some; default options are assumed (compression level and memory usage,; standard memory allocation functions). The source code of these; utility functions can easily be modified if you need special options.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:870,Safety,avoid,avoid,870,"/* Return flags indicating compile-time options. Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:; 1.0: size of uInt; 3.2: size of uLong; 5.4: size of voidpf (pointer); 7.6: size of z_off_t. Compiler, assembler, and debug options:; 8: DEBUG; 9: ASMV or ASMINF -- use ASM code; 10: ZLIB_WINAPI -- exported functions use the WINAPI calling convention; 11: 0 (reserved). One-time table building (smaller code, but not thread-safe if true):; 12: BUILDFIXED -- build static block decoding tables when needed; 13: DYNAMIC_CRC_TABLE -- build CRC calculation tables when needed; 14,15: 0 (reserved). Library content (indicates missing functionality):; 16: NO_GZCOMPRESS -- gz* functions cannot compress (to avoid linking; deflate code when not needed); 17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect; and decode gzip streams (to avoid linking crc code); 18-19: 0 (reserved). Operation variations (changes in library functionality):; 20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate; 21: FASTEST -- deflate algorithm with only one, lowest compression level; 22,23: 0 (reserved). The sprintf variant used by gzprintf (zero is best):; 24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format; 25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!; 26: 0 = returns value, 1 = void -- 1 means inferred string length returned. Remainder:; 27-31: 0 (reserved); */; /* utility functions */; /*; The following utility functions are implemented on top of the; basic stream-oriented functions. To simplify the interface, some; default options are assumed (compression level and memory usage,; standard memory allocation functions). The source code of these; utility functions can easily be modified if you need special options.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1314,Security,secur,secure,1314,"/* Return flags indicating compile-time options. Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:; 1.0: size of uInt; 3.2: size of uLong; 5.4: size of voidpf (pointer); 7.6: size of z_off_t. Compiler, assembler, and debug options:; 8: DEBUG; 9: ASMV or ASMINF -- use ASM code; 10: ZLIB_WINAPI -- exported functions use the WINAPI calling convention; 11: 0 (reserved). One-time table building (smaller code, but not thread-safe if true):; 12: BUILDFIXED -- build static block decoding tables when needed; 13: DYNAMIC_CRC_TABLE -- build CRC calculation tables when needed; 14,15: 0 (reserved). Library content (indicates missing functionality):; 16: NO_GZCOMPRESS -- gz* functions cannot compress (to avoid linking; deflate code when not needed); 17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect; and decode gzip streams (to avoid linking crc code); 18-19: 0 (reserved). Operation variations (changes in library functionality):; 20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate; 21: FASTEST -- deflate algorithm with only one, lowest compression level; 22,23: 0 (reserved). The sprintf variant used by gzprintf (zero is best):; 24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format; 25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!; 26: 0 = returns value, 1 = void -- 1 means inferred string length returned. Remainder:; 27-31: 0 (reserved); */; /* utility functions */; /*; The following utility functions are implemented on top of the; basic stream-oriented functions. To simplify the interface, some; default options are assumed (compression level and memory usage,; standard memory allocation functions). The source code of these; utility functions can easily be modified if you need special options.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1564,Usability,simpl,simplify,1564,"/* Return flags indicating compile-time options. Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:; 1.0: size of uInt; 3.2: size of uLong; 5.4: size of voidpf (pointer); 7.6: size of z_off_t. Compiler, assembler, and debug options:; 8: DEBUG; 9: ASMV or ASMINF -- use ASM code; 10: ZLIB_WINAPI -- exported functions use the WINAPI calling convention; 11: 0 (reserved). One-time table building (smaller code, but not thread-safe if true):; 12: BUILDFIXED -- build static block decoding tables when needed; 13: DYNAMIC_CRC_TABLE -- build CRC calculation tables when needed; 14,15: 0 (reserved). Library content (indicates missing functionality):; 16: NO_GZCOMPRESS -- gz* functions cannot compress (to avoid linking; deflate code when not needed); 17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect; and decode gzip streams (to avoid linking crc code); 18-19: 0 (reserved). Operation variations (changes in library functionality):; 20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate; 21: FASTEST -- deflate algorithm with only one, lowest compression level; 22,23: 0 (reserved). The sprintf variant used by gzprintf (zero is best):; 24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format; 25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!; 26: 0 = returns value, 1 = void -- 1 means inferred string length returned. Remainder:; 27-31: 0 (reserved); */; /* utility functions */; /*; The following utility functions are implemented on top of the; basic stream-oriented functions. To simplify the interface, some; default options are assumed (compression level and memory usage,; standard memory allocation functions). The source code of these; utility functions can easily be modified if you need special options.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:180,Energy Efficiency,allocate,allocate,180,/*; compressBound() returns an upper bound on the compressed size after; compress() or compress2() on sourceLen bytes. It would be used before; a compress() or compress2() call to allocate the destination buffer.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:736,Availability,error,error,736,"/*; Opens a gzip (.gz) file for reading or writing. The mode parameter; is as in fopen (""rb"" or ""wb"") but can also include a compression level; (""wb9"") or a strategy: 'f' for filtered data as in ""wb6f"", 'h' for; Huffman only compression as in ""wb1h"", or 'R' for run-length encoding; as in ""wb1R"". (See the description of deflateInit2 for more information; about the strategy parameter.). gzopen can be used to read a file which is not in gzip format; in this; case gzread will directly read from the file without decompression. gzopen returns NULL if the file could not be opened or if there was; insufficient memory to allocate the (de)compression state; errno; can be checked to distinguish the two cases (if errno is zero, the; zlib error is Z_MEM_ERROR). */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:620,Energy Efficiency,allocate,allocate,620,"/*; Opens a gzip (.gz) file for reading or writing. The mode parameter; is as in fopen (""rb"" or ""wb"") but can also include a compression level; (""wb9"") or a strategy: 'f' for filtered data as in ""wb6f"", 'h' for; Huffman only compression as in ""wb1h"", or 'R' for run-length encoding; as in ""wb1R"". (See the description of deflateInit2 for more information; about the strategy parameter.). gzopen can be used to read a file which is not in gzip format; in this; case gzread will directly read from the file without decompression. gzopen returns NULL if the file could not be opened or if there was; insufficient memory to allocate the (de)compression state; errno; can be checked to distinguish the two cases (if errno is zero, the; zlib error is Z_MEM_ERROR). */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:506,Energy Efficiency,allocate,allocate,506,"/*; gzdopen() associates a gzFile with the file descriptor fd. File; descriptors are obtained from calls like open, dup, creat, pipe or; fileno (in the file has been previously opened with fopen).; The mode parameter is as in gzopen.; The next call of gzclose on the returned gzFile will also close the; file descriptor fd, just like fclose(fdopen(fd), mode) closes the file; descriptor fd. If you want to keep fd open, use gzdopen(dup(fd), mode).; gzdopen returns NULL if there was insufficient memory to allocate; the (de)compression state.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:16,Deployability,update,update,16,"/*; Dynamically update the compression level or strategy. See the description; of deflateInit2 for the meaning of these parameters.; gzsetparams returns Z_OK if success, or Z_STREAM_ERROR if the file was not; opened for writing.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:267,Availability,error,error,267,"/*; Reads the given number of uncompressed bytes from the compressed file.; If the input file was not in gzip format, gzread copies the given number; of bytes into the buffer.; gzread returns the number of uncompressed bytes actually read (0 for; end of file, -1 for error). */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:158,Availability,error,error,158,/*; Writes the given number of uncompressed bytes into the compressed file.; gzwrite returns the number of uncompressed bytes actually written; (0 in case of error).; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:200,Availability,error,error,200,"/*; Converts, formats, and writes the args to the compressed file under; control of the format string, as in fprintf. gzprintf returns the number of; uncompressed bytes actually written (0 in case of error). The number of; uncompressed bytes written is limited to 4095. The caller should assure that; this limit is not exceeded. If it is exceeded, then gzprintf() will return; return an error (0) with nothing written. In this case, there may also be a; buffer overflow with unpredictable consequences, which is possible only if; zlib was compiled with the insecure functions sprintf() or vsprintf(); because the secure snprintf() or vsnprintf() functions were not available.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:387,Availability,error,error,387,"/*; Converts, formats, and writes the args to the compressed file under; control of the format string, as in fprintf. gzprintf returns the number of; uncompressed bytes actually written (0 in case of error). The number of; uncompressed bytes written is limited to 4095. The caller should assure that; this limit is not exceeded. If it is exceeded, then gzprintf() will return; return an error (0) with nothing written. In this case, there may also be a; buffer overflow with unpredictable consequences, which is possible only if; zlib was compiled with the insecure functions sprintf() or vsprintf(); because the secure snprintf() or vsnprintf() functions were not available.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:665,Availability,avail,available,665,"/*; Converts, formats, and writes the args to the compressed file under; control of the format string, as in fprintf. gzprintf returns the number of; uncompressed bytes actually written (0 in case of error). The number of; uncompressed bytes written is limited to 4095. The caller should assure that; this limit is not exceeded. If it is exceeded, then gzprintf() will return; return an error (0) with nothing written. In this case, there may also be a; buffer overflow with unpredictable consequences, which is possible only if; zlib was compiled with the insecure functions sprintf() or vsprintf(); because the secure snprintf() or vsnprintf() functions were not available.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:613,Security,secur,secure,613,"/*; Converts, formats, and writes the args to the compressed file under; control of the format string, as in fprintf. gzprintf returns the number of; uncompressed bytes actually written (0 in case of error). The number of; uncompressed bytes written is limited to 4095. The caller should assure that; this limit is not exceeded. If it is exceeded, then gzprintf() will return; return an error (0) with nothing written. In this case, there may also be a; buffer overflow with unpredictable consequences, which is possible only if; zlib was compiled with the insecure functions sprintf() or vsprintf(); because the secure snprintf() or vsnprintf() functions were not available.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:178,Availability,error,error,178,"/*; Writes the given null-terminated string to the compressed file, excluding; the terminating null character.; gzputs returns the number of characters written, or -1 in case of error.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:271,Availability,error,error,271,"/*; Reads bytes from the compressed file until len-1 characters are read, or; a newline character is read and transferred to buf, or an end-of-file; condition is encountered. The string is then terminated with a null; character.; gzgets returns buf, or Z_NULL in case of error.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:132,Availability,error,error,132,"/*; Writes c, converted to an unsigned char, into the compressed file.; gzputc returns the value that was written, or -1 in case of error.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:103,Availability,error,error,103,/*; Reads one byte from the compressed file. gzgetc returns this byte; or -1 in case of end of file or error.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:164,Availability,failure,failure,164,"/*; Push one character back onto the stream to be read again later.; Only one character of push-back is allowed. gzungetc() returns the; character pushed, or -1 on failure. gzungetc() will fail if a; character has been pushed but not read yet, or if c is -1. The pushed; character will be discarded if the stream is repositioned with gzseek(); or gzrewind().; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:141,Availability,error,error,141,/*; Flushes all pending output into the compressed file. The parameter; flush is as in the deflate() function. The return value is the zlib; error number (see function gzerror below). gzflush returns Z_OK if; the flush parameter is Z_FINISH and all output could be flushed.; gzflush should be called only when strictly necessary because it can; degrade compression.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:622,Availability,error,error,622,"/*; Sets the starting position for the next gzread or gzwrite on the; given compressed file. The offset represents a number of bytes in the; uncompressed data stream. The whence parameter is defined as in lseek(2);; the value SEEK_END is not supported.; If the file is opened for reading, this function is emulated but can be; extremely slow. If the file is opened for writing, only forward seeks are; supported; gzseek then compresses a sequence of zeroes up to the new; starting position. gzseek returns the resulting offset location as measured in bytes from; the beginning of the uncompressed stream, or -1 in case of error, in; particular if the file is opened for writing and the new starting position; would be before the current position.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:43,Safety,detect,detected,43,"/*; Returns 1 when EOF has previously been detected reading the given; input stream, otherwise zero.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:150,Availability,error,error,150,"/*; Flushes all pending output if necessary, closes the compressed file; and deallocates all the (de)compression state. The return value is the zlib; error number (see function gzerror below).; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:16,Availability,error,error,16,"/*; Returns the error message for the last error which occurred on the; given compressed file. errnum is set to zlib error number. If an; error occurred in the file system and not in the compression library,; errnum is set to Z_ERRNO and the application may consult errno; to get the exact error code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:43,Availability,error,error,43,"/*; Returns the error message for the last error which occurred on the; given compressed file. errnum is set to zlib error number. If an; error occurred in the file system and not in the compression library,; errnum is set to Z_ERRNO and the application may consult errno; to get the exact error code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:117,Availability,error,error,117,"/*; Returns the error message for the last error which occurred on the; given compressed file. errnum is set to zlib error number. If an; error occurred in the file system and not in the compression library,; errnum is set to Z_ERRNO and the application may consult errno; to get the exact error code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:138,Availability,error,error,138,"/*; Returns the error message for the last error which occurred on the; given compressed file. errnum is set to zlib error number. If an; error occurred in the file system and not in the compression library,; errnum is set to Z_ERRNO and the application may consult errno; to get the exact error code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:290,Availability,error,error,290,"/*; Returns the error message for the last error which occurred on the; given compressed file. errnum is set to zlib error number. If an; error occurred in the file system and not in the compression library,; errnum is set to Z_ERRNO and the application may consult errno; to get the exact error code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:22,Integrability,message,message,22,"/*; Returns the error message for the last error which occurred on the; given compressed file. errnum is set to zlib error number. If an; error occurred in the file system and not in the compression library,; errnum is set to Z_ERRNO and the application may consult errno; to get the exact error code.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:15,Availability,error,error,15,/*; Clears the error and end-of-file flags for file. This is analogous to the; clearerr() function in stdio. This is useful for continuing to read a gzip; file that is being written concurrently.; */; /* checksum functions */; /*; These functions are not related to compression but are exported; anyway because they might be useful in applications using the; compression library.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:182,Performance,concurren,concurrently,182,/*; Clears the error and end-of-file flags for file. This is analogous to the; clearerr() function in stdio. This is useful for continuing to read a gzip; file that is being written concurrently.; */; /* checksum functions */; /*; These functions are not related to compression but are exported; anyway because they might be useful in applications using the; compression library.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:204,Security,checksum,checksum,204,/*; Clears the error and end-of-file flags for file. This is analogous to the; clearerr() function in stdio. This is useful for continuing to read a gzip; file that is being written concurrently.; */; /* checksum functions */; /*; These functions are not related to compression but are exported; anyway because they might be useful in applications using the; compression library.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:4,Usability,Clear,Clears,4,/*; Clears the error and end-of-file flags for file. This is analogous to the; clearerr() function in stdio. This is useful for continuing to read a gzip; file that is being written concurrently.; */; /* checksum functions */; /*; These functions are not related to compression but are exported; anyway because they might be useful in applications using the; compression library.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:79,Usability,clear,clearerr,79,/*; Clears the error and end-of-file flags for file. This is analogous to the; clearerr() function in stdio. This is useful for continuing to read a gzip; file that is being written concurrently.; */; /* checksum functions */; /*; These functions are not related to compression but are exported; anyway because they might be useful in applications using the; compression library.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:221,Availability,reliab,reliable,221,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is NULL, this function returns; the required initial value for the checksum.; An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:449,Availability,error,error,449,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is NULL, this function returns; the required initial value for the checksum.; An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:4,Deployability,Update,Update,4,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is NULL, this function returns; the required initial value for the checksum.; An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:84,Deployability,update,updated,84,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is NULL, this function returns; the required initial value for the checksum.; An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:30,Security,checksum,checksum,30,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is NULL, this function returns; the required initial value for the checksum.; An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:92,Security,checksum,checksum,92,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is NULL, this function returns; the required initial value for the checksum.; An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:176,Security,checksum,checksum,176,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is NULL, this function returns; the required initial value for the checksum.; An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:199,Security,checksum,checksum,199,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is NULL, this function returns; the required initial value for the checksum.; An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:25,Security,checksum,checksums,25,"/*; Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:125,Security,checksum,checksums,125,"/*; Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:220,Security,checksum,checksum,220,"/*; Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:462,Availability,error,error,462,"/*; Update a running CRC-32 with the bytes buf[0..len-1] and return the; updated CRC-32. If buf is NULL, this function returns the required initial; value for the for the crc. Pre- and post-conditioning (one's complement) is; performed within this function so it shouldn't be done by the application.; Usage example:. uLong crc = crc32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; crc = crc32(crc, buffer, length);; }; if (crc != original_crc) error();; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:4,Deployability,Update,Update,4,"/*; Update a running CRC-32 with the bytes buf[0..len-1] and return the; updated CRC-32. If buf is NULL, this function returns the required initial; value for the for the crc. Pre- and post-conditioning (one's complement) is; performed within this function so it shouldn't be done by the application.; Usage example:. uLong crc = crc32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; crc = crc32(crc, buffer, length);; }; if (crc != original_crc) error();; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:73,Deployability,update,updated,73,"/*; Update a running CRC-32 with the bytes buf[0..len-1] and return the; updated CRC-32. If buf is NULL, this function returns the required initial; value for the for the crc. Pre- and post-conditioning (one's complement) is; performed within this function so it shouldn't be done by the application.; Usage example:. uLong crc = crc32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; crc = crc32(crc, buffer, length);; }; if (crc != original_crc) error();; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:226,Performance,perform,performed,226,"/*; Update a running CRC-32 with the bytes buf[0..len-1] and return the; updated CRC-32. If buf is NULL, this function returns the required initial; value for the for the crc. Pre- and post-conditioning (one's complement) is; performed within this function so it shouldn't be done by the application.; Usage example:. uLong crc = crc32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; crc = crc32(crc, buffer, length);; }; if (crc != original_crc) error();; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c:21,Integrability,depend,dependent,21,"/* zutil.c -- target dependent utility functions for the compression library; * Copyright (C) 1995-2005 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c:35,Availability,error,error,35,/* exported to allow conversion of error code to string for compress() and; * uncompress(); */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c:99,Modifiability,variab,variable,99,/* The Microsoft C Run-Time Library for Windows CE doesn't have; * errno. We define it as a global variable to simplify porting.; * Its value is always 0 and should not be used.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c:111,Usability,simpl,simplify,111,/* The Microsoft C Run-Time Library for Windows CE doesn't have; * errno. We define it as a global variable to simplify porting.; * Its value is always 0 and should not be used.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c:228,Performance,concurren,concurrent,228,"/* This table is used to remember the original form of pointers; * to large buffers (64K). Such pointers are normalized with a zero offset.; * Since MSDOS is not a preemptive multitasking OS, this table is not; * protected from concurrent access. This hack doesn't work anyway on; * a protected system like OS/2. Use Microsoft C instead.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c:239,Security,access,access,239,"/* This table is used to remember the original form of pointers; * to large buffers (64K). Such pointers are normalized with a zero offset.; * Since MSDOS is not a preemptive multitasking OS, this table is not; * protected from concurrent access. This hack doesn't work anyway on; * a protected system like OS/2. Use Microsoft C instead.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c:9,Energy Efficiency,allocate,allocate,9,"/* If we allocate less than 65520 bytes, we assume that farmalloc; * will return a usable pointer which doesn't have to be normalized.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c:83,Usability,usab,usable,83,"/* If we allocate less than 65520 bytes, we assume that farmalloc; * will return a usable pointer which doesn't have to be normalized.; */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h:37,Deployability,configurat,configuration,37,"/* zutil.h -- internal interface and configuration of the compression library; * Copyright (C) 1995-2005 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* WARNING: this file should *not* be used by applications. It is; part of the implementation of the compression library and is; subject to change. Applications should only use zlib.h.; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h:23,Integrability,interface,interface,23,"/* zutil.h -- internal interface and configuration of the compression library; * Copyright (C) 1995-2005 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* WARNING: this file should *not* be used by applications. It is; part of the implementation of the compression library and is; subject to change. Applications should only use zlib.h.; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h:37,Modifiability,config,configuration,37,"/* zutil.h -- internal interface and configuration of the compression library; * Copyright (C) 1995-2005 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* WARNING: this file should *not* be used by applications. It is; part of the implementation of the compression library and is; subject to change. Applications should only use zlib.h.; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h:99,Modifiability,variab,variable,99,/* The Microsoft C Run-Time Library for Windows CE doesn't have; * errno. We define it as a global variable to simplify porting.; * Its value is always 0 and should not be used. We rename it to; * avoid conflict with other libraries that use the same workaround.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h:197,Safety,avoid,avoid,197,/* The Microsoft C Run-Time Library for Windows CE doesn't have; * errno. We define it as a global variable to simplify porting.; * Its value is always 0 and should not be used. We rename it to; * avoid conflict with other libraries that use the same workaround.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h:111,Usability,simpl,simplify,111,/* The Microsoft C Run-Time Library for Windows CE doesn't have; * errno. We define it as a global variable to simplify porting.; * Its value is always 0 and should not be used. We rename it to; * avoid conflict with other libraries that use the same workaround.; */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h:49,Safety,avoid,avoid,49,/* indexed by 2-zlib_error */; /* (size given to avoid silly warnings with Visual C++) */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h:10,Integrability,depend,dependencies,10,/* target dependencies */,MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h:26,Availability,avail,available,26,"/* In Win32, vsnprintf is available as the ""non-ANSI"" _vsnprintf. */",MatchSource.CODE_COMMENT,graf2d/asimage/src/libAfterImage/zlib/zutil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zutil.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/CocoaConstants.h:11,Availability,mask,masks,11,"// Windows masks",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/CocoaConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/CocoaConstants.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/CocoaGuiTypes.h:12,Modifiability,extend,extends,12,"//This file extends ROOT's GuiTypes.h with additional types I need - Point/Rectangle which can use integers (not short integers).; //To be used in copy:xxxxx methods of X11Drawables and somewhere else.; //It's a shame I have to write such ""classes"" :))",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/CocoaGuiTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/CocoaGuiTypes.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/QuartzWindow.h:265,Availability,fault,fault,265,"//With reference counting and autorelease pools, it's possible that; //TGCocoa::DestroyWindow was called and window was correctly deleted,; //but it's still on screen and if used in some functions (like FindWindowForPointerEvent); //and this ends in a segmentation fault.; //fIsDeleted property is here to solve this problem.",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/QuartzWindow.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/QuartzWindow.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/QuartzWindow.h:75,Integrability,protocol,protocol,75,"//@property (nonatomic, assign) NSPoint fShapeMaskShift;; //1. X11Drawable protocol.",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/QuartzWindow.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/QuartzWindow.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/ROOTOpenGLView.h:210,Deployability,update,update,210,"//GL-view does not own GL-context, different GL contexts can be attached to the same view; //(though ROOT never does this). View has to know about GL-context only to notify it about; //geometry changes (calls -update method) and to clear drawable in a -dealloc method.",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/ROOTOpenGLView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/ROOTOpenGLView.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/ROOTOpenGLView.h:232,Usability,clear,clear,232,"//GL-view does not own GL-context, different GL contexts can be attached to the same view; //(though ROOT never does this). View has to know about GL-context only to notify it about; //geometry changes (calls -update method) and to clear drawable in a -dealloc method.",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/ROOTOpenGLView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/ROOTOpenGLView.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/ROOTOpenGLView.h:175,Integrability,interface,interface,175,"//ROOT's GL uses pixel format (TGLFormat class) when TGLWidget is; //created, after that, pixel format never changed (though I can do; //this with ROOTOpenGLView, there is no interface in ROOT's GL code for this).; //So, pixel format is a property of ROOTOpenGLView. GL-view owns pixel format,; //it can also be reset externally (again, GL module never does this).; //Later, when creating GL-context, this pixel format is used (and; //ROOT creates GL-context per GL-widget, thus using pixel format from a widget.",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/ROOTOpenGLView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/ROOTOpenGLView.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/ROOTOpenGLView.h:21,Deployability,update,updated,21,"//View's geometry is updated by ROOT's GUI, but view; //can be hidden at the moment (for example, tab with GL-view is not active; //at the moment). If so, when view is visible again, context must; //be notified about changes in a drawable's geometry.",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/ROOTOpenGLView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/ROOTOpenGLView.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/ROOTOpenGLView.h:12,Integrability,protocol,protocol,12,"//X11Window protocol.",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/ROOTOpenGLView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/ROOTOpenGLView.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h:46,Integrability,Interface,Interface,46,"/// \defgroup cocoa Cocoa backend; /// \brief Interface to MacOS native graphics system.; /// \ingroup GraphicsBackends; /** \class TGCocoa; \ingroup cocoa. This class implements TVirtualX interface for MacOS X, using Cocoa and Quartz 2D. TVirtualX is a typical fat interface, it's a ""C++ wrapper"" for; X11 library. It's a union of several orthogonal interfaces like:; color management, window management, pixmap management, cursors,; events, images, drag and drop, font management, gui-rendering,; non-gui graphics, etc. etc.; */",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/TGCocoa.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h:189,Integrability,interface,interface,189,"/// \defgroup cocoa Cocoa backend; /// \brief Interface to MacOS native graphics system.; /// \ingroup GraphicsBackends; /** \class TGCocoa; \ingroup cocoa. This class implements TVirtualX interface for MacOS X, using Cocoa and Quartz 2D. TVirtualX is a typical fat interface, it's a ""C++ wrapper"" for; X11 library. It's a union of several orthogonal interfaces like:; color management, window management, pixmap management, cursors,; events, images, drag and drop, font management, gui-rendering,; non-gui graphics, etc. etc.; */",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/TGCocoa.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h:266,Integrability,interface,interface,266,"/// \defgroup cocoa Cocoa backend; /// \brief Interface to MacOS native graphics system.; /// \ingroup GraphicsBackends; /** \class TGCocoa; \ingroup cocoa. This class implements TVirtualX interface for MacOS X, using Cocoa and Quartz 2D. TVirtualX is a typical fat interface, it's a ""C++ wrapper"" for; X11 library. It's a union of several orthogonal interfaces like:; color management, window management, pixmap management, cursors,; events, images, drag and drop, font management, gui-rendering,; non-gui graphics, etc. etc.; */",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/TGCocoa.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h:289,Integrability,wrap,wrapper,289,"/// \defgroup cocoa Cocoa backend; /// \brief Interface to MacOS native graphics system.; /// \ingroup GraphicsBackends; /** \class TGCocoa; \ingroup cocoa. This class implements TVirtualX interface for MacOS X, using Cocoa and Quartz 2D. TVirtualX is a typical fat interface, it's a ""C++ wrapper"" for; X11 library. It's a union of several orthogonal interfaces like:; color management, window management, pixmap management, cursors,; events, images, drag and drop, font management, gui-rendering,; non-gui graphics, etc. etc.; */",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/TGCocoa.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h:351,Integrability,interface,interfaces,351,"/// \defgroup cocoa Cocoa backend; /// \brief Interface to MacOS native graphics system.; /// \ingroup GraphicsBackends; /** \class TGCocoa; \ingroup cocoa. This class implements TVirtualX interface for MacOS X, using Cocoa and Quartz 2D. TVirtualX is a typical fat interface, it's a ""C++ wrapper"" for; X11 library. It's a union of several orthogonal interfaces like:; color management, window management, pixmap management, cursors,; events, images, drag and drop, font management, gui-rendering,; non-gui graphics, etc. etc.; */",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/TGCocoa.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h:85,Integrability,interface,interface,85,"//TVirtualX final overriders.; //I split them in a group not to get lost in this fat interface.; ///////////////////////////////////////; //General.",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/TGCocoa.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h:10,Usability,simpl,simply,10,"//TGCocoa simply returns wid.",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/TGCocoa.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h:211,Integrability,interface,interface,211,"//Event management.; /////////////////////////////; /////////////////////////////; //""Drag and drop"" and ""Copy and paste"" (quotes are intentional :)).; //Names here are total mess, but this comes from TVirtualX interface.",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/TGCocoa.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGOSXGL.h:29,Integrability,interface,interface,29,"//; //TGLManager is a legacy interface (gl-context/window management):; //at some point we had to use OpenGL in our TCanvas/TPad classes which do not; //have direct access to low-level APIs + on Windows we had quite tricky; //mt-problems to deal with.; //",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/TGOSXGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGOSXGL.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGOSXGL.h:165,Security,access,access,165,"//; //TGLManager is a legacy interface (gl-context/window management):; //at some point we had to use OpenGL in our TCanvas/TPad classes which do not; //have direct access to low-level APIs + on Windows we had quite tricky; //mt-problems to deal with.; //",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/TGOSXGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGOSXGL.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGQuartz.h:71,Integrability,interface,interface,71,"/** \class TGQuartz; \ingroup cocoa. This is non-GUI part of TVirtualX interface, implemented for; MacOS X, using CoreGraphics (Quartz).; */",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/TGQuartz.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGQuartz.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGQuartz.h:107,Deployability,configurat,configuration,107,"//Lines with AA can be quite different; //from what we always had with X11.; //Now this is a switch in our configuration file (system.rootrc),; //so it can be disabled. This flag affects _only_ pad's graphics,; //GUI graphics is special and different. AA for fill area has a special; // switch because it is better to have it off by default.",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/TGQuartz.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGQuartz.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGQuartz.h:107,Modifiability,config,configuration,107,"//Lines with AA can be quite different; //from what we always had with X11.; //Now this is a switch in our configuration file (system.rootrc),; //so it can be disabled. This flag affects _only_ pad's graphics,; //GUI graphics is special and different. AA for fill area has a special; // switch because it is better to have it off by default.",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/TGQuartz.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGQuartz.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/X11Colors.h:88,Integrability,depend,depends,88,"/////////////////////////////////////////////////////////////////; // //; // ROOT's GUI depends and relies on X11 XParseColors. //; // Color can be specified by name (found in X11 rgb.txt) //; // or as RGB triplet: #rgb #rrggbb #rrrgggbbb #rrrrggggbbbb. //; // //; /////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/X11Colors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/X11Colors.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/X11Drawable.h:6,Security,access,access,6,"//Get access to pixel data.",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/X11Drawable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/X11Drawable.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/X11Events.h:262,Usability,simpl,simple,262,"//////////////////////////////////////////////////////////////////////////; // //; // EventTranslator class translates Cocoa events to 'ROOT's X11' events.//; // In 90% cases there is no direct mapping from Cocoa event to //; // X11 event: Cocoa events are more simple (from programmer's POV). //; // EventTranslator tries to emulate X11 behavior. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/X11Events.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/X11Events.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/X11Events.h:13,Deployability,release,release,13,"//Both press/release events.",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/X11Events.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/X11Events.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/X11Events.h:13,Deployability,release,release,13,"//Both press/release events.",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/X11Events.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/X11Events.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/XLFDParser.h:102,Usability,simpl,simple,102,"////////////////////////////////////////////////////////////////////////; // //; // XLDF parser, very simple implementation, used by GUI only. //; // //; ////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,graf2d/cocoa/inc/XLFDParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/XLFDParser.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/src/CocoaPrivate.h:17,Performance,cache,cache,17,"//Font manager - cache CTFontRef for GUI.",MatchSource.CODE_COMMENT,graf2d/cocoa/src/CocoaPrivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/src/CocoaPrivate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/src/CocoaPrivate.h:3,Performance,Cache,Cache,3,"//""Cache"" of ids.",MatchSource.CODE_COMMENT,graf2d/cocoa/src/CocoaPrivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/src/CocoaPrivate.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/inc/TFITS.h:106,Integrability,Interface,Interface,106,"//////////////////////////////////////////////////////////////////////////; // //; // TFITS //; // //; // Interface to FITS astronomical files. //; // Please, see TFITS.cxx for info about implementation //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,graf2d/fitsio/inc/TFITS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/inc/TFITS.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/inc/TFITS.h:25,Modifiability,variab,variable-length,25,"// the column contains a variable-length array",MatchSource.CODE_COMMENT,graf2d/fitsio/inc/TFITS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/inc/TFITS.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/inc/TFITS.h:28,Modifiability,variab,variable-length,28,"// kTRUE if the columns has variable-length arrays",MatchSource.CODE_COMMENT,graf2d/fitsio/inc/TFITS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/inc/TFITS.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/inc/TFITS.h:11,Security,access,access,11,"//Metadata access methods",MatchSource.CODE_COMMENT,graf2d/fitsio/inc/TFITS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/inc/TFITS.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:1358,Availability,down,downloaded,1358,"********************************************************************/; /// \defgroup fitsio FITS file; /// \brief Interface to FITS file.; /// \ingroup Graphics2D; ///; /// TFITS is an interface that lets you reading Flexible Image Transport System; /// (FITS) files, which are generally used in astronomy. This file format; /// was standardized 1981 and today is still widely used among professional; /// and amateur astronomers. FITS is not only an image file, but also; /// it can contain spectrums, data tables, histograms, and multidimensional; /// data. Furthermore, FITS data can be described itself by containing; /// human-readable information that let us to interpret the data within; /// the FITS file. For example, a FITS could contain a 3D data cube,; /// but an additional description would tell us that we must read it, for; /// example, as a 3-layer image.; ///; /// TFITS requires CFITSIO library to be installed on your system. It; /// is currently maintained by NASA/GSFC and can be downloaded from; /// [NASA/GSFC web site](http://fits.gsfc.nasa.gov), as well as documentation.; ///; /// Using this interface is easy and straightforward. There is only 1 class; /// called ""TFITSHDU"" which has several methods to extract data from a; /// FITS file, more specifically, from an HDU within the file. An HDU, or; /// Header Data Unit, is a chunk of data with a header containing several; /// ""keyword = value"" tokens. The header describes the structure of data; /// within the HDU. An HDU can be of two types: an ""image HDU"" or a ""table; /// HDU"". The former can be any kind of multidimensional array of real numbers,; /// by which the name ""image"" may be confusing: you can store an image, but; /// you can also store a N-dimensional data cube. On the other hand, table; /// HDUs are sets of several rows and columns (a.k.a fields) which contain; /// generic data, as strings, real or complex numbers and even arrays.; ///; /// Please have a look to the tutorials ($ROOTSYS/tutorials/f",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:1276,Deployability,install,installed,1276,"ee $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /// \defgroup fitsio FITS file; /// \brief Interface to FITS file.; /// \ingroup Graphics2D; ///; /// TFITS is an interface that lets you reading Flexible Image Transport System; /// (FITS) files, which are generally used in astronomy. This file format; /// was standardized 1981 and today is still widely used among professional; /// and amateur astronomers. FITS is not only an image file, but also; /// it can contain spectrums, data tables, histograms, and multidimensional; /// data. Furthermore, FITS data can be described itself by containing; /// human-readable information that let us to interpret the data within; /// the FITS file. For example, a FITS could contain a 3D data cube,; /// but an additional description would tell us that we must read it, for; /// example, as a 3-layer image.; ///; /// TFITS requires CFITSIO library to be installed on your system. It; /// is currently maintained by NASA/GSFC and can be downloaded from; /// [NASA/GSFC web site](http://fits.gsfc.nasa.gov), as well as documentation.; ///; /// Using this interface is easy and straightforward. There is only 1 class; /// called ""TFITSHDU"" which has several methods to extract data from a; /// FITS file, more specifically, from an HDU within the file. An HDU, or; /// Header Data Unit, is a chunk of data with a header containing several; /// ""keyword = value"" tokens. The header describes the structure of data; /// within the HDU. An HDU can be of two types: an ""image HDU"" or a ""table; /// HDU"". The former can be any kind of multidimensional array of real numbers,; /// by which the name ""image"" may be confusing: you can store an image, but; /// you can also store a N-dimensional data cube. On the other hand, table; /// HDUs are sets of several rows and columns (a.k.a fields) which contain; /// generic data, as strings, real or complex ",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:470,Integrability,Interface,Interface,470,"// @(#)root/graf2d:$Id$; // Author: Claudi Martinez, July 19th 2010; /*************************************************************************; * Copyright (C) 1995-2010, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /// \defgroup fitsio FITS file; /// \brief Interface to FITS file.; /// \ingroup Graphics2D; ///; /// TFITS is an interface that lets you reading Flexible Image Transport System; /// (FITS) files, which are generally used in astronomy. This file format; /// was standardized 1981 and today is still widely used among professional; /// and amateur astronomers. FITS is not only an image file, but also; /// it can contain spectrums, data tables, histograms, and multidimensional; /// data. Furthermore, FITS data can be described itself by containing; /// human-readable information that let us to interpret the data within; /// the FITS file. For example, a FITS could contain a 3D data cube,; /// but an additional description would tell us that we must read it, for; /// example, as a 3-layer image.; ///; /// TFITS requires CFITSIO library to be installed on your system. It; /// is currently maintained by NASA/GSFC and can be downloaded from; /// [NASA/GSFC web site](http://fits.gsfc.nasa.gov), as well as documentation.; ///; /// Using this interface is easy and straightforward. There is only 1 class; /// called ""TFITSHDU"" which has several methods to extract data from a; /// FITS file, more specifically, from an HDU within the file. An HDU, or; /// Header Data Unit, is a chunk of data with a header containing several; /// ""keyword = value"" tokens. The header describes the structure of data; /// within the HDU. An HDU can be of two types: an ""image HDU"" or a ""table; /// HDU"". The former can be any kind of multidimensional array of real numbers,; /// by whic",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:541,Integrability,interface,interface,541,"// @(#)root/graf2d:$Id$; // Author: Claudi Martinez, July 19th 2010; /*************************************************************************; * Copyright (C) 1995-2010, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /// \defgroup fitsio FITS file; /// \brief Interface to FITS file.; /// \ingroup Graphics2D; ///; /// TFITS is an interface that lets you reading Flexible Image Transport System; /// (FITS) files, which are generally used in astronomy. This file format; /// was standardized 1981 and today is still widely used among professional; /// and amateur astronomers. FITS is not only an image file, but also; /// it can contain spectrums, data tables, histograms, and multidimensional; /// data. Furthermore, FITS data can be described itself by containing; /// human-readable information that let us to interpret the data within; /// the FITS file. For example, a FITS could contain a 3D data cube,; /// but an additional description would tell us that we must read it, for; /// example, as a 3-layer image.; ///; /// TFITS requires CFITSIO library to be installed on your system. It; /// is currently maintained by NASA/GSFC and can be downloaded from; /// [NASA/GSFC web site](http://fits.gsfc.nasa.gov), as well as documentation.; ///; /// Using this interface is easy and straightforward. There is only 1 class; /// called ""TFITSHDU"" which has several methods to extract data from a; /// FITS file, more specifically, from an HDU within the file. An HDU, or; /// Header Data Unit, is a chunk of data with a header containing several; /// ""keyword = value"" tokens. The header describes the structure of data; /// within the HDU. An HDU can be of two types: an ""image HDU"" or a ""table; /// HDU"". The former can be any kind of multidimensional array of real numbers,; /// by whic",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:1475,Integrability,interface,interface,1475,"FITS file.; /// \ingroup Graphics2D; ///; /// TFITS is an interface that lets you reading Flexible Image Transport System; /// (FITS) files, which are generally used in astronomy. This file format; /// was standardized 1981 and today is still widely used among professional; /// and amateur astronomers. FITS is not only an image file, but also; /// it can contain spectrums, data tables, histograms, and multidimensional; /// data. Furthermore, FITS data can be described itself by containing; /// human-readable information that let us to interpret the data within; /// the FITS file. For example, a FITS could contain a 3D data cube,; /// but an additional description would tell us that we must read it, for; /// example, as a 3-layer image.; ///; /// TFITS requires CFITSIO library to be installed on your system. It; /// is currently maintained by NASA/GSFC and can be downloaded from; /// [NASA/GSFC web site](http://fits.gsfc.nasa.gov), as well as documentation.; ///; /// Using this interface is easy and straightforward. There is only 1 class; /// called ""TFITSHDU"" which has several methods to extract data from a; /// FITS file, more specifically, from an HDU within the file. An HDU, or; /// Header Data Unit, is a chunk of data with a header containing several; /// ""keyword = value"" tokens. The header describes the structure of data; /// within the HDU. An HDU can be of two types: an ""image HDU"" or a ""table; /// HDU"". The former can be any kind of multidimensional array of real numbers,; /// by which the name ""image"" may be confusing: you can store an image, but; /// you can also store a N-dimensional data cube. On the other hand, table; /// HDUs are sets of several rows and columns (a.k.a fields) which contain; /// generic data, as strings, real or complex numbers and even arrays.; ///; /// Please have a look to the tutorials ($ROOTSYS/tutorials/fitsio/) to see; /// some examples. IMPORTANT: to run tutorials it is required that; /// you change the current working directo",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:3104,Integrability,interface,interface,3104,"requires CFITSIO library to be installed on your system. It; /// is currently maintained by NASA/GSFC and can be downloaded from; /// [NASA/GSFC web site](http://fits.gsfc.nasa.gov), as well as documentation.; ///; /// Using this interface is easy and straightforward. There is only 1 class; /// called ""TFITSHDU"" which has several methods to extract data from a; /// FITS file, more specifically, from an HDU within the file. An HDU, or; /// Header Data Unit, is a chunk of data with a header containing several; /// ""keyword = value"" tokens. The header describes the structure of data; /// within the HDU. An HDU can be of two types: an ""image HDU"" or a ""table; /// HDU"". The former can be any kind of multidimensional array of real numbers,; /// by which the name ""image"" may be confusing: you can store an image, but; /// you can also store a N-dimensional data cube. On the other hand, table; /// HDUs are sets of several rows and columns (a.k.a fields) which contain; /// generic data, as strings, real or complex numbers and even arrays.; ///; /// Please have a look to the tutorials ($ROOTSYS/tutorials/fitsio/) to see; /// some examples. IMPORTANT: to run tutorials it is required that; /// you change the current working directory of ROOT (CINT) shell to the; /// tutorials directory. Example:; /// ~~~ {.cpp}; /// root [1] gSystem->ChangeDirectory(""tutorials/fitsio""); /// root [1] .x FITS_tutorial1.C; /// ~~~; /// LIST OF TODO; /// - Support for complex values within data tables; /// - Support for reading arrays from table cells; /// - Support for grouping; ///; /// IMPLEMENTATION NOTES:; ///; /// CFITSIO library uses standard C types ('int', 'long', ...). To avoid; /// confusion, the same types are used internally by the access methods.; /// However, class's fields are ROOT-defined types.; /** \class TFITSHDU; \ingroup fitsio. FITS file interface class. TFITSHDU is a class that allows extracting images and data from FITS files and contains; several methods to manage them.; */",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:573,Modifiability,Flexible,Flexible,573,"// @(#)root/graf2d:$Id$; // Author: Claudi Martinez, July 19th 2010; /*************************************************************************; * Copyright (C) 1995-2010, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /// \defgroup fitsio FITS file; /// \brief Interface to FITS file.; /// \ingroup Graphics2D; ///; /// TFITS is an interface that lets you reading Flexible Image Transport System; /// (FITS) files, which are generally used in astronomy. This file format; /// was standardized 1981 and today is still widely used among professional; /// and amateur astronomers. FITS is not only an image file, but also; /// it can contain spectrums, data tables, histograms, and multidimensional; /// data. Furthermore, FITS data can be described itself by containing; /// human-readable information that let us to interpret the data within; /// the FITS file. For example, a FITS could contain a 3D data cube,; /// but an additional description would tell us that we must read it, for; /// example, as a 3-layer image.; ///; /// TFITS requires CFITSIO library to be installed on your system. It; /// is currently maintained by NASA/GSFC and can be downloaded from; /// [NASA/GSFC web site](http://fits.gsfc.nasa.gov), as well as documentation.; ///; /// Using this interface is easy and straightforward. There is only 1 class; /// called ""TFITSHDU"" which has several methods to extract data from a; /// FITS file, more specifically, from an HDU within the file. An HDU, or; /// Header Data Unit, is a chunk of data with a header containing several; /// ""keyword = value"" tokens. The header describes the structure of data; /// within the HDU. An HDU can be of two types: an ""image HDU"" or a ""table; /// HDU"". The former can be any kind of multidimensional array of real numbers,; /// by whic",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:2922,Safety,avoid,avoid,2922,"requires CFITSIO library to be installed on your system. It; /// is currently maintained by NASA/GSFC and can be downloaded from; /// [NASA/GSFC web site](http://fits.gsfc.nasa.gov), as well as documentation.; ///; /// Using this interface is easy and straightforward. There is only 1 class; /// called ""TFITSHDU"" which has several methods to extract data from a; /// FITS file, more specifically, from an HDU within the file. An HDU, or; /// Header Data Unit, is a chunk of data with a header containing several; /// ""keyword = value"" tokens. The header describes the structure of data; /// within the HDU. An HDU can be of two types: an ""image HDU"" or a ""table; /// HDU"". The former can be any kind of multidimensional array of real numbers,; /// by which the name ""image"" may be confusing: you can store an image, but; /// you can also store a N-dimensional data cube. On the other hand, table; /// HDUs are sets of several rows and columns (a.k.a fields) which contain; /// generic data, as strings, real or complex numbers and even arrays.; ///; /// Please have a look to the tutorials ($ROOTSYS/tutorials/fitsio/) to see; /// some examples. IMPORTANT: to run tutorials it is required that; /// you change the current working directory of ROOT (CINT) shell to the; /// tutorials directory. Example:; /// ~~~ {.cpp}; /// root [1] gSystem->ChangeDirectory(""tutorials/fitsio""); /// root [1] .x FITS_tutorial1.C; /// ~~~; /// LIST OF TODO; /// - Support for complex values within data tables; /// - Support for reading arrays from table cells; /// - Support for grouping; ///; /// IMPLEMENTATION NOTES:; ///; /// CFITSIO library uses standard C types ('int', 'long', ...). To avoid; /// confusion, the same types are used internally by the access methods.; /// However, class's fields are ROOT-defined types.; /** \class TFITSHDU; \ingroup fitsio. FITS file interface class. TFITSHDU is a class that allows extracting images and data from FITS files and contains; several methods to manage them.; */",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:2986,Security,access,access,2986,"requires CFITSIO library to be installed on your system. It; /// is currently maintained by NASA/GSFC and can be downloaded from; /// [NASA/GSFC web site](http://fits.gsfc.nasa.gov), as well as documentation.; ///; /// Using this interface is easy and straightforward. There is only 1 class; /// called ""TFITSHDU"" which has several methods to extract data from a; /// FITS file, more specifically, from an HDU within the file. An HDU, or; /// Header Data Unit, is a chunk of data with a header containing several; /// ""keyword = value"" tokens. The header describes the structure of data; /// within the HDU. An HDU can be of two types: an ""image HDU"" or a ""table; /// HDU"". The former can be any kind of multidimensional array of real numbers,; /// by which the name ""image"" may be confusing: you can store an image, but; /// you can also store a N-dimensional data cube. On the other hand, table; /// HDUs are sets of several rows and columns (a.k.a fields) which contain; /// generic data, as strings, real or complex numbers and even arrays.; ///; /// Please have a look to the tutorials ($ROOTSYS/tutorials/fitsio/) to see; /// some examples. IMPORTANT: to run tutorials it is required that; /// you change the current working directory of ROOT (CINT) shell to the; /// tutorials directory. Example:; /// ~~~ {.cpp}; /// root [1] gSystem->ChangeDirectory(""tutorials/fitsio""); /// root [1] .x FITS_tutorial1.C; /// ~~~; /// LIST OF TODO; /// - Support for complex values within data tables; /// - Support for reading arrays from table cells; /// - Support for grouping; ///; /// IMPLEMENTATION NOTES:; ///; /// CFITSIO library uses standard C types ('int', 'long', ...). To avoid; /// confusion, the same types are used internally by the access methods.; /// However, class's fields are ROOT-defined types.; /** \class TFITSHDU; \ingroup fitsio. FITS file interface class. TFITSHDU is a class that allows extracting images and data from FITS files and contains; several methods to manage them.; */",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:86,Deployability,Release,Release,86,"////////////////////////////////////////////////////////////////////////////////; /// Release internal resources.",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:30,Energy Efficiency,allocate,allocated,30,"//Deallocate character arrays allocated for kString columns",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:30,Energy Efficiency,allocate,allocated,30,"//Deallocate character arrays allocated for kString columns",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:31,Energy Efficiency,allocate,allocated,31,"// Deallocate character arrays allocated for variable-length array columns",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:45,Modifiability,variab,variable-length,45,"// Deallocate character arrays allocated for variable-length array columns",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load HDU from fits file satisfying the specified filter.; /// Returns kTRUE if success. Otherwise kFALSE.; /// If filter == """" then the primary array is selected",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate column info array",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:2,Energy Efficiency,Allocate,Allocate,2,"//Allocate cells",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:24,Modifiability,variab,variable-length,24,"// this column contains variable-length arrays",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:8,Modifiability,variab,variables,8,"// null variables needed by the fits_read_col",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:86,Modifiability,variab,variable-length,86,"// number of elements in the cell we want to read, i.e.; // number of elements in the variable-length array",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:15,Modifiability,variab,variable-length,15,"// size of the variable-length array",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:3,Modifiability,variab,variable-length,3,"// variable-length array have negative DATATYPE",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:23,Performance,load,load,23,"// define the array to load the data with the CFITSIO functions; // a fixed arrays is needed as argument to the fits_read_col function; // so a vector is defined and then its `.data()` pointer is passed; // to fits_read_col; //; // TODO: add all type cases, for now only short, long, float and double are considered; //",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:32,Modifiability,variab,variable-length,32,"// place the vector storing the variable-length array in the corresponding cell",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:50,Modifiability,variab,variable,50,"// check that the table does not contain fixed or variable length arrays; // in that case is not possible to print a flattened table",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:207,Integrability,depend,depending,207,"////////////////////////////////////////////////////////////////////////////////; /// Read image HDU as a histogram. Return 0 if conversion cannot be done.; /// The returned object can be TH1D, TH2D or TH3D depending on data dimensionality.; /// Please, check condition (returnedValue->IsA() == TH*D::%Class()) to; /// determine the object class.; ///; /// NOTE: do not confuse with image histogram! This function interprets; /// the array as a histogram. It does not compute the histogram of pixel; /// values of an image! Here ""pixels"" are interpreted as number of entries.",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:33,Energy Efficiency,allocate,allocated,33,"//Make the collection to own the allocated TVectorD objects, so when; //destroying the collection, the vectors will be destroyed too.",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:118,Modifiability,variab,variable-length,118,"////////////////////////////////////////////////////////////////////////////////; /// Get a real array (with fixed or variable-length) embedded in a cell given by (row>=0, column>=0)",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:156,Availability,error,error,156,"////////////////////////////////////////////////////////////////////////////////; /// Get the name of a column given its index (column>=0).; /// In case of error the column name is """".",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:94,Modifiability,variab,variable-length,94,"////////////////////////////////////////////////////////////////////////////////; /// Get the variable-length array contained in a cell given by (row>=0, column name)",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:94,Modifiability,variab,variable-length,94,"////////////////////////////////////////////////////////////////////////////////; /// Get the variable-length array contained in a cell given by (row>=0, column name)",MatchSource.CODE_COMMENT,graf2d/fitsio/src/TFITS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TButton.h:9,Integrability,interface,interface,9,"//A user interface button.",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TButton.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TButton.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TCanvas.h:23,Deployability,Update,Update,23,"///<! Set to True when Update method was called; //",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TCanvas.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TCanvas.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TCanvas.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TCanvas.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE* *GETTER=IsGrayscale",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TCanvas.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TClassTree.h:23,Modifiability,inherit,inheritance,23,"///<if 1 show multiple inheritance",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TClassTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TClassTree.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TClassTree.h:46,Modifiability,inherit,inheritance,46,"///<if 1 show classes relationship other than inheritance",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TClassTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TClassTree.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TClassTree.h:15,Modifiability,variab,variable,15,"///<! internal variable, used during painting",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TClassTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TClassTree.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TClassTree.h:15,Modifiability,variab,variable,15,"///<! internal variable, used during painting",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TClassTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TClassTree.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TClassTree.h:32,Modifiability,inherit,inheritance,32,"//Manager class to draw classes inheritance tree and relations",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TClassTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TClassTree.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TGroupButton.h:9,Integrability,interface,interface,9,"//A user interface button in a group of buttons.",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TGroupButton.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TGroupButton.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:34,Testability,log,log,34,"///< (=0 if X linear scale, =1 if log scale)",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:34,Testability,log,log,34,"///< (=0 if Y linear scale, =1 if log scale)",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:34,Testability,log,log,34,"///< (=0 if Z linear scale, =1 if log scale)",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:20,Availability,down,down,20,"///< Bordermode (-1=down, 0 = no border, 1=up)",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:5,Usability,Clear,Clear,5,"///< Clear after CR",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:65,Testability,log,log,65,"///Returns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decades.",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:65,Testability,log,log,65,"///Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades.",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:65,Testability,log,log,65,"///Returns the maximum x-coordinate value visible on the pad. If log axis the returned value is in decades.",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:65,Testability,log,log,65,"///Returns the maximum y-coordinate value visible on the pad. If log axis the returned value is in decades.",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPadPainter.h:84,Usability,simpl,simply,84,"//Final overriders for TVirtualPadPainter pure virtual functions.; //1. Part, which simply delegates to TVirtualX.; //Line attributes.",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPadPainter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPadPainter.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPadPainter.h:18,Usability,clear,clear,18,"//Let's make this clear:",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TPadPainter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPadPainter.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h:45,Availability,error,error,45,"///< Calculate the difference divided by the error.",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TRatioPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h:47,Availability,error,error,47,"///< Use the regular `TH1::GetBinError` as the error",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TRatioPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h:64,Availability,error,error,64,"///< Use `TH1::GetBinErrorUp` and `TH1::GetBinErrorLow` for the error, depending on y values.",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TRatioPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h:71,Integrability,depend,depending,71,"///< Use `TH1::GetBinErrorUp` and `TH1::GetBinErrorLow` for the error, depending on y values.",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TRatioPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h:54,Availability,error,error,54,"///< Use the square root of the function value as the error.",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TRatioPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h:48,Performance,perform,performed,48,"///< Stores which calculation is supposed to be performed as specified by user option",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TRatioPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h:16,Availability,error,error,16,"///< Stores the error mode, sym, asym or func",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TRatioPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h:178,Integrability,depend,depends,178,"////////////////////////////////////////////////////////////////////////////////; /// Get the output of the calculation in the form of a graph. The type of; /// the return value depends on the input option that was given in the constructor.",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TRatioPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TSlider.h:9,Integrability,interface,interface,9,"//A user interface slider.",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TSlider.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TSlider.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TView.h:70,Safety,detect,detection,70,"// NOLINT: not allowed to use = default because of TObject::kIsOnHeap detection, see ROOT-10300",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TView.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TView.h:20,Integrability,interface,interface,20,"//3-D View abstract interface for 3-D views",MatchSource.CODE_COMMENT,graf2d/gpad/inc/TView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TView.h
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TButton.cxx:62,Integrability,interface,interface,62,"/** \class TButton; \ingroup gpad. A TButton object is a user interface object. A TButton has a name and an associated action.; When the button is clicked with the left mouse button, the corresponding; action is executed. A TButton can be created by direct invocation of the constructors; or via the graphics editor. The action can be set via TButton::SetMethod.; The action can be any command. Examples of actions:; - ""34+78"" When the button is clicked, the result of addition is printed.; - "".x macro.C"" . Clicking the button executes the macro macro.C; The action can be modified at any time via TButton::SetMethod. To modify the layout/size/contents of one or several buttons; in a canvas, you must set the canvas editable via TCanvas::SetEditable.; By default a TCanvas is editable.; By default a TDialogCanvas is not editable.; TButtons are in general placed in a TDialogCanvas. A TButton being a TPad, one can draw graphics primitives in it; when the TCanvas/TDialogCanvas is editable. Example of a macro creating a dialog canvas with buttons:; ~~~ {.cpp}; void but() {; // example of a dialog canvas with a few buttons. TDialogCanvas *dialog = new TDialogCanvas(""dialog"","""",200,300);. // Create first button. Clicking on this button will execute 34+56; TButton *but1 = new TButton(""button1"",""34+56"",.05,.8,.45,.88);; but1->Draw();. // Create second button. Clicking on this button will create a new canvas; TButton *but2 = new TButton(""canvas"",""c2 = new TCanvas(\""c2\"")"",.55,.8,.95,.88);; but2->Draw();. // Create third button. Clicking on this button will invoke the browser; but3 = new TButton(""Browser"",""br = new TBrowser(\""br\"")"",0.25,0.54,0.75,0.64);; but3->SetFillColor(42);; but3->Draw();. // Create last button with no name. Instead a graph is draw inside the button; // Clicking on this button will invoke the macro $ROOTSYS/tutorials/graphs/graph.C; button = new TButton("""","".x tutorials/graphs/graph.C"",0.15,0.15,0.85,0.38);; button->SetFillColor(42);; button->Draw();; button->SetE",MatchSource.CODE_COMMENT,graf2d/gpad/src/TButton.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TButton.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:1030,Availability,avail,available,1030," Canvas is an area mapped to a window directly under the control of the display; manager. A ROOT session may have several canvases open at any given time. A Canvas may be subdivided into independent graphical areas: the __Pads__.; A canvas has a default pad which has the name of the canvas itself.; An example of a Canvas layout is sketched in the picture below. \image html gpad_canvas.png. This canvas contains two pads named P1 and P2. Both Canvas, P1 and P2 can be; moved, grown, shrunk using the normal rules of the Display manager. Once objects have been drawn in a canvas, they can be edited/moved by pointing; directly to them. The cursor shape is changed to suggest the type of action that; one can do on this object. Clicking with the right mouse button on an object; pops-up a contextmenu with a complete list of actions possible on this object. A graphical editor may be started from the canvas ""View"" menu under the menu; entry ""Toolbar"". An interactive HELP is available by clicking on the HELP button at the top right; of the canvas. It gives a short explanation about the canvas' menus. A canvas may be automatically divided into pads via `TPad::Divide`. At creation time, no matter if in interactive or batch mode, the constructor; defines the size of the canvas window (including the size of the window; manager's decoration). To define precisely the graphics area size of a canvas in; the interactive mode, the following four lines of code should be used:; ~~~ {.cpp}; {; Double_t w = 600;; Double_t h = 600;; auto c = new TCanvas(""c"", ""c"", w, h);; c->SetWindowSize(w + (w - c->GetWw()), h + (h - c->GetWh()));; }; ~~~; and in the batch mode simply do:; ~~~ {.cpp}; c->SetCanvasSize(w,h);; ~~~. If the canvas size exceeds the window size, scroll bars will be added to the canvas; This allows to display very large canvases (even bigger than the screen size). The; Following example shows how to proceed.; ~~~ {.cpp}; {; auto c = new TCanvas(""c"",""c"");; c->SetCanvasSize(1500, 1500);",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:1716,Usability,simpl,simply,1716,"anvas may be subdivided into independent graphical areas: the __Pads__.; A canvas has a default pad which has the name of the canvas itself.; An example of a Canvas layout is sketched in the picture below. \image html gpad_canvas.png. This canvas contains two pads named P1 and P2. Both Canvas, P1 and P2 can be; moved, grown, shrunk using the normal rules of the Display manager. Once objects have been drawn in a canvas, they can be edited/moved by pointing; directly to them. The cursor shape is changed to suggest the type of action that; one can do on this object. Clicking with the right mouse button on an object; pops-up a contextmenu with a complete list of actions possible on this object. A graphical editor may be started from the canvas ""View"" menu under the menu; entry ""Toolbar"". An interactive HELP is available by clicking on the HELP button at the top right; of the canvas. It gives a short explanation about the canvas' menus. A canvas may be automatically divided into pads via `TPad::Divide`. At creation time, no matter if in interactive or batch mode, the constructor; defines the size of the canvas window (including the size of the window; manager's decoration). To define precisely the graphics area size of a canvas in; the interactive mode, the following four lines of code should be used:; ~~~ {.cpp}; {; Double_t w = 600;; Double_t h = 600;; auto c = new TCanvas(""c"", ""c"", w, h);; c->SetWindowSize(w + (w - c->GetWw()), h + (h - c->GetWh()));; }; ~~~; and in the batch mode simply do:; ~~~ {.cpp}; c->SetCanvasSize(w,h);; ~~~. If the canvas size exceeds the window size, scroll bars will be added to the canvas; This allows to display very large canvases (even bigger than the screen size). The; Following example shows how to proceed.; ~~~ {.cpp}; {; auto c = new TCanvas(""c"",""c"");; c->SetCanvasSize(1500, 1500);; c->SetWindowSize(500, 500);; }; ~~~; */; ////////////////////////////////////////////////////////////////////////////////; /// Canvas default constructor.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:3,Safety,avoid,avoid,3,"// avoid Modified() signal from SetName",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:3,Safety,avoid,avoid,3,"// avoid Modified() signal from SetName",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:3,Safety,avoid,avoid,3,"// avoid Modified() signal from SetName",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:3,Safety,avoid,avoid,3,"// avoid Modified() signal from SetName",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:3,Performance,Load,Load,3,"// Load and initialize graphics libraries if; // TApplication::NeedGraphicsLibs() has been called by a; // library static initializer.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:26,Safety,avoid,avoid,26,"// mark canvas as batch - avoid gVirtualX in many places",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:31,Usability,Clear,Clear,31,"//Set color index for text; // Clear workstation",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:162,Availability,failure,failure,162,"////////////////////////////////////////////////////////////////////////////////; /// Set current canvas & pad. Returns the new current pad,; /// or 0 in case of failure.; /// See TPad::cd() for an explanation of the parameter.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:178,Usability,clear,cleared,178,"////////////////////////////////////////////////////////////////////////////////; /// Remove all primitives from the canvas.; /// If option ""D"" is specified, direct sub-pads are cleared but not deleted.; /// This option is not recursive, i.e. pads in direct sub-pads are deleted.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:3,Usability,clear,clear,3,"// clear subpads, but do not delete pads in case the canvas; // has been divided (note: option ""D"" is propagated so could cause; // conflicts for primitives using option ""D"" for something else)",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:11,Usability,clear,clear,11,"//default, clear everything in the canvas. Subpads are deleted",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:95,Usability,Clear,Cleared,95,"////////////////////////////////////////////////////////////////////////////////; /// Emit pad Cleared signal.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:3,Performance,Load,Load,3,"// Load and initialize graphics libraries if; // TApplication::NeedGraphicsLibs() has been called by a; // library static initializer.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:130,Integrability,depend,depending,130,"////////////////////////////////////////////////////////////////////////////////; /// Generate kMouseEnter and kMouseLeave events depending on the previously; /// selected object and the currently selected object. Does nothing if the; /// selected object does not change.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:102,Usability,feedback,feedback,102,"////////////////////////////////////////////////////////////////////////////////; /// Turn rubberband feedback mode on or off.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:99,Deployability,update,update,99,"////////////////////////////////////////////////////////////////////////////////; /// Force canvas update",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:153,Availability,down,down,153,"////////////////////////////////////////////////////////////////////////////////; /// Handle Input Events.; ///; /// Handle input events, like button up/down in current canvas.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:34,Availability,down,down,34,"// triggered on the second button down within 350ms and within; // 3x3 pixels of the first button down, button up finishes action",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:98,Availability,down,down,98,"// triggered on the second button down within 350ms and within; // 3x3 pixels of the first button down, button up finishes action",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:18,Deployability,update,update,18,"// before calling update make sure gPad is reset",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:386,Performance,response time,response time,386,"////////////////////////////////////////////////////////////////////////////////; /// Set option to move objects/pads in a canvas.; ///; /// - set = 1 (default) graphics objects are moved in opaque mode; /// - set = 0 only the outline of objects is drawn when moving them; ///; /// The option opaque produces the best effect. It requires however a; /// a reasonably fast workstation or response time.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:95,Usability,simpl,simplification,95,"////////////////////////////////////////////////////////////////////////////////; /// This is ""simplification"" for function TCanvas::Connect with Highlighted; /// signal for specific slot.; ///; /// Slot has to be defined ""UserFunction(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y)""; /// all parameters of UserFunction are taken from TCanvas::Highlighted",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:392,Performance,response time,response time,392,"////////////////////////////////////////////////////////////////////////////////; /// Set option to resize objects/pads in a canvas.; ///; /// - set = 1 (default) graphics objects are resized in opaque mode; /// - set = 0 only the outline of objects is drawn when resizing them; ///; /// The option opaque produces the best effect. It requires however a; /// a reasonably fast workstation or response time.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:441,Modifiability,variab,variable,441,"////////////////////////////////////////////////////////////////////////////////; /// Save primitives in this canvas as a C++ macro file.; /// This function loops on all the canvas primitives and for each primitive; /// calls the object SavePrimitive function.; /// When outputting floating point numbers, the default precision is 7 digits.; /// The precision can be changed (via system.rootrc) by changing the value; /// of the environment variable ""Canvas.SavePrecision""",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:39,Performance,optimiz,optimize,39,"R""CODE(#ifdef __CLING__; #pragma cling optimize(0); #endif; )CODE""",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:86,Deployability,Toggle,Toggle,86,"////////////////////////////////////////////////////////////////////////////////; /// Toggle batch mode. However, if the canvas is created without a window; /// then batch mode always stays set.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:663,Availability,avail,available,663,"////////////////////////////////////////////////////////////////////////////////; /// Set Width and Height of canvas to ww and wh respectively. If ww and/or wh; /// are greater than the current canvas window a scroll bar is automatically; /// generated. Use this function to zoom in a canvas and navigate via; /// the scroll bars. The Width and Height in this method are different from those; /// given in the TCanvas constructors where these two dimension include the size; /// of the window decoration whereas they do not in this method.; /// When both ww==0 and wh==0, auto resize mode will be enabled again and; /// canvas drawing area will automatically fit available window size",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:3,Integrability,depend,depending,3,"// depending of the buffer mode set the drawing window to either; // the canvas pixmap or to the canvas on-screen window",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:337,Availability,error,error,337,"////////////////////////////////////////////////////////////////////////////////; /// Function to resize a canvas so that the plot inside is shown in real aspect; /// ratio; ///; /// \param[in] axis 1 for resizing horizontally (x-axis) in order to get real; /// aspect ratio, 2 for the resizing vertically (y-axis); /// \return false if error is encountered, true otherwise; ///; /// ~~~ {.cpp}; /// hpxpy->Draw();; /// c1->SetRealAspectRatio();; /// ~~~; ///; /// - For defining the concept of real aspect ratio, it is assumed that x and y; /// axes are in same units, e.g. both in MeV or both in ns.; /// - You can resize either the width of the canvas or the height, but not both; /// at the same time; /// - Call this function AFTER drawing AND zooming (SetUserRange) your TGraph or; /// Histogram, otherwise it cannot infer your actual axes lengths; /// - This function ensures that the TFrame has a real aspect ratio, this does not; /// mean that the full pad (i.e. the canvas or png output) including margins has; /// exactly the same ratio; /// - This function does not work if the canvas is divided in several subpads",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:886,Energy Efficiency,allocate,allocated,886,"////////////////////////////////////////////////////////////////////////////////; /// Set the canvas scale in centimeters.; ///; /// This information is used by PostScript to set the page size.; ///; /// \param[in] xsize size of the canvas in centimeters along X; /// \param[in] ysize size of the canvas in centimeters along Y; ///; /// if xsize and ysize are not equal to 0, then the scale factors will; /// be computed to keep the ratio ysize/xsize independently of the canvas; /// size (parts of the physical canvas will be unused).; ///; /// if xsize = 0 and ysize is not zero, then xsize will be computed; /// to fit to the current canvas scale. If the canvas is resized,; /// a new value for xsize will be recomputed. In this case the aspect; /// ratio is not preserved.; ///; /// if both xsize = 0 and ysize = 0, then the scaling is automatic.; /// the largest dimension will be allocated a size of 20 centimeters.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:74,Deployability,update,update,74,"// Copy to current session; // do not use copy constructor which does not update highest color index",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:86,Deployability,Toggle,Toggle,86,"////////////////////////////////////////////////////////////////////////////////; /// Toggle pad auto execution of list of TExecs.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:86,Deployability,Toggle,Toggle,86,"////////////////////////////////////////////////////////////////////////////////; /// Toggle event statusbar.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:86,Deployability,Toggle,Toggle,86,"////////////////////////////////////////////////////////////////////////////////; /// Toggle toolbar.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:86,Deployability,Toggle,Toggle,86,"////////////////////////////////////////////////////////////////////////////////; /// Toggle editor.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:86,Deployability,Toggle,Toggle,86,"////////////////////////////////////////////////////////////////////////////////; /// Toggle tooltip display.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update canvas pad buffers.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:65,Deployability,Update,Update,65,"// Why do we have this (which uses the interpreter to funnel the Update(); // through the main thread) when the gThreadXAR mechanism does seemingly; // the same?",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:103,Deployability,update,update,103,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:153,Deployability,update,update,153,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:227,Deployability,update,update,227,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:413,Deployability,Update,Update,413,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:425,Performance,perform,performed,425,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:248,Safety,Avoid,Avoids,248,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:344,Safety,avoid,avoid,344,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:350,Testability,log,logical,350,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:3,Deployability,update,update,3,"// update canvas and all sub-pads, unconditionally!",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:315,Modifiability,plugin,plugin,315,"////////////////////////////////////////////////////////////////////////////////; /// Probably, TPadPainter must be placed in a separate ROOT module -; /// ""padpainter"" (the same as ""histpainter""). But now, it's directly in a; /// gpad dir, so, in case of default painter, no *.so should be loaded,; /// no need in plugin managers.; /// May change in future.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:291,Performance,load,loaded,291,"////////////////////////////////////////////////////////////////////////////////; /// Probably, TPadPainter must be placed in a separate ROOT module -; /// ""padpainter"" (the same as ""histpainter""). But now, it's directly in a; /// gpad dir, so, in case of default painter, no *.so should be loaded,; /// no need in plugin managers.; /// May change in future.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:15,Modifiability,plugin,plugin,15,"// Do not need plugin manager for this!",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:86,Security,Access,Access,86,"////////////////////////////////////////////////////////////////////////////////; /// Access and (probably) creation of pad painter.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:85,Testability,assert,assert,85,"////////////////////////////////////////////////////////////////////////////////; ///assert on IsBatch() == false?",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:495,Availability,down,down,495,"/** \class TClassTree; \ingroup gpad. Draw inheritance tree and their relations for a list of classes. The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTree::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1. `Draw(""ClassA"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; 2. `Draw(""*ClassB"")`; - Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3. `Draw("">ClassC"")`; - Draw inheritance tree for ClassC; - Show classes referencing ClassC; 4. `Draw(""ClassD<"")`; - Draw inheritance tree for ClassD; - Show classes referenced by ClassD; - Show all classes referencing ClassD; 5. `Draw(""Cla*"")`; - Draw inheritance tree for all classes with name starting with ""Cla""; - Show classes referenced by these classes; 6. `Draw(""ClassA:ClassB<"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; - Draw inheritance tree for ClassB; - Show classes referenced by ClassB; - Show all classes referencing ClassB. Example: `Draw(""TTree<"")`; - Draw inheritance tree for the Root class TTree; - Show all classes referenced by TTree; - Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; - option = ""H"" to show links to embedded classes; - option = ""M"" to show multiple inheritance; - option = ""R"" to show pointers to other classes from data members; - option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; ~~~ {.cpp}; ",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:3203,Energy Efficiency,green,green,3203,"image html gpad_classtree1.png. The TClassTree class uses the services of the class TPaveClass to; show the class names. By clicking with the right mouse button in; one TPaveClass object, one can invoke the following functions of TClassTree:; - ShowLinks(option) with by default option = ""HMR""; - Draw(classes). By default the class drawn is the one being pointed; - ShowClassesUsedBy(classes) (by default the pointed class); - ShowClassesUsing(classes) (by default the pointed class). The following picture has been generated with the following statements; ~~~ {.cpp}; TClassTree tc1(""tc1"",""TH1"");; tc1.ShowLinks(""HMR"");; ~~~. \image html gpad_classtree2.png. Note that in case of embedded classes or pointers to classes,; the corresponding dashed lines or arrows respectively start; in the TPaveClass object at an X position reflecting the position; in the list of data members. - References by data members to other classes are show with a full red line; - Multiple inheritance is shown with a dashed blue line; - ""Has a"" relation is shown with a dotted cyan line; - References from code is shown by a full green line. Use TClassTree::SetSourceDir to specify the search path for source files.; By default the search path includes the `$ROOTSYS` directory, the current; directory and the subdirectory `src`. The first time TClassTree::Draw is invoked, all the classes in the; current application are processed, including the parsing of the code; to find all classes referenced by the include statements.; This process may take a few seconds. The following commands will be; much faster. A TClassTree object may be saved in a Root file.; This object can be processed later by a Root program that ignores; the original classes. This interesting possibility allows to send; the class structure of an application to a colleague who does not have; your classes. Example:; ~~~ {.cpp}; TFile f(""myClasses.root"",""recreate""); TClassTree *ct = new TClassTree(""ct"",""ATLF*""); ct->Write();; ~~~; You can send at ",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:4350,Integrability,depend,dependencies,4350,"tements; ~~~ {.cpp}; TClassTree tc1(""tc1"",""TH1"");; tc1.ShowLinks(""HMR"");; ~~~. \image html gpad_classtree2.png. Note that in case of embedded classes or pointers to classes,; the corresponding dashed lines or arrows respectively start; in the TPaveClass object at an X position reflecting the position; in the list of data members. - References by data members to other classes are show with a full red line; - Multiple inheritance is shown with a dashed blue line; - ""Has a"" relation is shown with a dotted cyan line; - References from code is shown by a full green line. Use TClassTree::SetSourceDir to specify the search path for source files.; By default the search path includes the `$ROOTSYS` directory, the current; directory and the subdirectory `src`. The first time TClassTree::Draw is invoked, all the classes in the; current application are processed, including the parsing of the code; to find all classes referenced by the include statements.; This process may take a few seconds. The following commands will be; much faster. A TClassTree object may be saved in a Root file.; This object can be processed later by a Root program that ignores; the original classes. This interesting possibility allows to send; the class structure of an application to a colleague who does not have; your classes. Example:; ~~~ {.cpp}; TFile f(""myClasses.root"",""recreate""); TClassTree *ct = new TClassTree(""ct"",""ATLF*""); ct->Write();; ~~~; You can send at this point the file myClass.root to a colleague who can; run the following Root basic session; ~~~ {.cpp}; TFile f(""myClass.root""); //connect the file; tt.ls(); //to list all classes and titles; tt.Draw(""ATLFDisplay"") //show class ATLFDisplay with all its dependencies; ~~~; At this point, one has still access to all the classes present; in the original session and select any combination of these classes; to be displayed.; */; ////////////////////////////////////////////////////////////////////////////////; /// TClassTree default constructor.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:43,Modifiability,inherit,inheritance,43,"/** \class TClassTree; \ingroup gpad. Draw inheritance tree and their relations for a list of classes. The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTree::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1. `Draw(""ClassA"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; 2. `Draw(""*ClassB"")`; - Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3. `Draw("">ClassC"")`; - Draw inheritance tree for ClassC; - Show classes referencing ClassC; 4. `Draw(""ClassD<"")`; - Draw inheritance tree for ClassD; - Show classes referenced by ClassD; - Show all classes referencing ClassD; 5. `Draw(""Cla*"")`; - Draw inheritance tree for all classes with name starting with ""Cla""; - Show classes referenced by these classes; 6. `Draw(""ClassA:ClassB<"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; - Draw inheritance tree for ClassB; - Show classes referenced by ClassB; - Show all classes referencing ClassB. Example: `Draw(""TTree<"")`; - Draw inheritance tree for the Root class TTree; - Show all classes referenced by TTree; - Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; - option = ""H"" to show links to embedded classes; - option = ""M"" to show multiple inheritance; - option = ""R"" to show pointers to other classes from data members; - option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; ~~~ {.cpp}; ",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:149,Modifiability,inherit,inheritance,149,"/** \class TClassTree; \ingroup gpad. Draw inheritance tree and their relations for a list of classes. The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTree::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1. `Draw(""ClassA"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; 2. `Draw(""*ClassB"")`; - Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3. `Draw("">ClassC"")`; - Draw inheritance tree for ClassC; - Show classes referencing ClassC; 4. `Draw(""ClassD<"")`; - Draw inheritance tree for ClassD; - Show classes referenced by ClassD; - Show all classes referencing ClassD; 5. `Draw(""Cla*"")`; - Draw inheritance tree for all classes with name starting with ""Cla""; - Show classes referenced by these classes; 6. `Draw(""ClassA:ClassB<"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; - Draw inheritance tree for ClassB; - Show classes referenced by ClassB; - Show all classes referencing ClassB. Example: `Draw(""TTree<"")`; - Draw inheritance tree for the Root class TTree; - Show all classes referenced by TTree; - Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; - option = ""H"" to show links to embedded classes; - option = ""M"" to show multiple inheritance; - option = ""R"" to show pointers to other classes from data members; - option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; ~~~ {.cpp}; ",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:183,Modifiability,inherit,inheritance,183,"/** \class TClassTree; \ingroup gpad. Draw inheritance tree and their relations for a list of classes. The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTree::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1. `Draw(""ClassA"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; 2. `Draw(""*ClassB"")`; - Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3. `Draw("">ClassC"")`; - Draw inheritance tree for ClassC; - Show classes referencing ClassC; 4. `Draw(""ClassD<"")`; - Draw inheritance tree for ClassD; - Show classes referenced by ClassD; - Show all classes referencing ClassD; 5. `Draw(""Cla*"")`; - Draw inheritance tree for all classes with name starting with ""Cla""; - Show classes referenced by these classes; 6. `Draw(""ClassA:ClassB<"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; - Draw inheritance tree for ClassB; - Show classes referenced by ClassB; - Show all classes referencing ClassB. Example: `Draw(""TTree<"")`; - Draw inheritance tree for the Root class TTree; - Show all classes referenced by TTree; - Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; - option = ""H"" to show links to embedded classes; - option = ""M"" to show multiple inheritance; - option = ""R"" to show pointers to other classes from data members; - option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; ~~~ {.cpp}; ",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:692,Modifiability,inherit,inheritance,692,"/** \class TClassTree; \ingroup gpad. Draw inheritance tree and their relations for a list of classes. The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTree::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1. `Draw(""ClassA"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; 2. `Draw(""*ClassB"")`; - Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3. `Draw("">ClassC"")`; - Draw inheritance tree for ClassC; - Show classes referencing ClassC; 4. `Draw(""ClassD<"")`; - Draw inheritance tree for ClassD; - Show classes referenced by ClassD; - Show all classes referencing ClassD; 5. `Draw(""Cla*"")`; - Draw inheritance tree for all classes with name starting with ""Cla""; - Show classes referenced by these classes; 6. `Draw(""ClassA:ClassB<"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; - Draw inheritance tree for ClassB; - Show classes referenced by ClassB; - Show all classes referencing ClassB. Example: `Draw(""TTree<"")`; - Draw inheritance tree for the Root class TTree; - Show all classes referenced by TTree; - Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; - option = ""H"" to show links to embedded classes; - option = ""M"" to show multiple inheritance; - option = ""R"" to show pointers to other classes from data members; - option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; ~~~ {.cpp}; ",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:791,Modifiability,inherit,inheritance,791,"/** \class TClassTree; \ingroup gpad. Draw inheritance tree and their relations for a list of classes. The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTree::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1. `Draw(""ClassA"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; 2. `Draw(""*ClassB"")`; - Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3. `Draw("">ClassC"")`; - Draw inheritance tree for ClassC; - Show classes referencing ClassC; 4. `Draw(""ClassD<"")`; - Draw inheritance tree for ClassD; - Show classes referenced by ClassD; - Show all classes referencing ClassD; 5. `Draw(""Cla*"")`; - Draw inheritance tree for all classes with name starting with ""Cla""; - Show classes referenced by these classes; 6. `Draw(""ClassA:ClassB<"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; - Draw inheritance tree for ClassB; - Show classes referenced by ClassB; - Show all classes referencing ClassB. Example: `Draw(""TTree<"")`; - Draw inheritance tree for the Root class TTree; - Show all classes referenced by TTree; - Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; - option = ""H"" to show links to embedded classes; - option = ""M"" to show multiple inheritance; - option = ""R"" to show pointers to other classes from data members; - option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; ~~~ {.cpp}; ",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:891,Modifiability,inherit,inheritance,891,"/** \class TClassTree; \ingroup gpad. Draw inheritance tree and their relations for a list of classes. The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTree::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1. `Draw(""ClassA"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; 2. `Draw(""*ClassB"")`; - Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3. `Draw("">ClassC"")`; - Draw inheritance tree for ClassC; - Show classes referencing ClassC; 4. `Draw(""ClassD<"")`; - Draw inheritance tree for ClassD; - Show classes referenced by ClassD; - Show all classes referencing ClassD; 5. `Draw(""Cla*"")`; - Draw inheritance tree for all classes with name starting with ""Cla""; - Show classes referenced by these classes; 6. `Draw(""ClassA:ClassB<"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; - Draw inheritance tree for ClassB; - Show classes referenced by ClassB; - Show all classes referencing ClassB. Example: `Draw(""TTree<"")`; - Draw inheritance tree for the Root class TTree; - Show all classes referenced by TTree; - Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; - option = ""H"" to show links to embedded classes; - option = ""M"" to show multiple inheritance; - option = ""R"" to show pointers to other classes from data members; - option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; ~~~ {.cpp}; ",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:984,Modifiability,inherit,inheritance,984,"ingroup gpad. Draw inheritance tree and their relations for a list of classes. The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTree::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1. `Draw(""ClassA"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; 2. `Draw(""*ClassB"")`; - Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3. `Draw("">ClassC"")`; - Draw inheritance tree for ClassC; - Show classes referencing ClassC; 4. `Draw(""ClassD<"")`; - Draw inheritance tree for ClassD; - Show classes referenced by ClassD; - Show all classes referencing ClassD; 5. `Draw(""Cla*"")`; - Draw inheritance tree for all classes with name starting with ""Cla""; - Show classes referenced by these classes; 6. `Draw(""ClassA:ClassB<"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; - Draw inheritance tree for ClassB; - Show classes referenced by ClassB; - Show all classes referencing ClassB. Example: `Draw(""TTree<"")`; - Draw inheritance tree for the Root class TTree; - Show all classes referenced by TTree; - Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; - option = ""H"" to show links to embedded classes; - option = ""M"" to show multiple inheritance; - option = ""R"" to show pointers to other classes from data members; - option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; ~~~ {.cpp}; TClassTree ct(""ct"",""*TH",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:1115,Modifiability,inherit,inheritance,1115,"ce (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTree::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1. `Draw(""ClassA"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; 2. `Draw(""*ClassB"")`; - Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3. `Draw("">ClassC"")`; - Draw inheritance tree for ClassC; - Show classes referencing ClassC; 4. `Draw(""ClassD<"")`; - Draw inheritance tree for ClassD; - Show classes referenced by ClassD; - Show all classes referencing ClassD; 5. `Draw(""Cla*"")`; - Draw inheritance tree for all classes with name starting with ""Cla""; - Show classes referenced by these classes; 6. `Draw(""ClassA:ClassB<"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; - Draw inheritance tree for ClassB; - Show classes referenced by ClassB; - Show all classes referencing ClassB. Example: `Draw(""TTree<"")`; - Draw inheritance tree for the Root class TTree; - Show all classes referenced by TTree; - Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; - option = ""H"" to show links to embedded classes; - option = ""M"" to show multiple inheritance; - option = ""R"" to show pointers to other classes from data members; - option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; ~~~ {.cpp}; TClassTree ct(""ct"",""*TH1""); ~~~; It shows all the classes derived from the base class TH1. \image html gpad_classtree1.png. The TClassTree class uses the ser",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:1259,Modifiability,inherit,inheritance,1259," the TClassTree constructor as a second argument; - or the parameter to TClassTree::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1. `Draw(""ClassA"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; 2. `Draw(""*ClassB"")`; - Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3. `Draw("">ClassC"")`; - Draw inheritance tree for ClassC; - Show classes referencing ClassC; 4. `Draw(""ClassD<"")`; - Draw inheritance tree for ClassD; - Show classes referenced by ClassD; - Show all classes referencing ClassD; 5. `Draw(""Cla*"")`; - Draw inheritance tree for all classes with name starting with ""Cla""; - Show classes referenced by these classes; 6. `Draw(""ClassA:ClassB<"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; - Draw inheritance tree for ClassB; - Show classes referenced by ClassB; - Show all classes referencing ClassB. Example: `Draw(""TTree<"")`; - Draw inheritance tree for the Root class TTree; - Show all classes referenced by TTree; - Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; - option = ""H"" to show links to embedded classes; - option = ""M"" to show multiple inheritance; - option = ""R"" to show pointers to other classes from data members; - option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; ~~~ {.cpp}; TClassTree ct(""ct"",""*TH1""); ~~~; It shows all the classes derived from the base class TH1. \image html gpad_classtree1.png. The TClassTree class uses the services of the class TPaveClass to; show the class names. By clicking with the right mouse button in; one TPaveClass object, one can invoke the following functions of TClassTree",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:1336,Modifiability,inherit,inheritance,1336," the TClassTree constructor as a second argument; - or the parameter to TClassTree::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1. `Draw(""ClassA"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; 2. `Draw(""*ClassB"")`; - Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3. `Draw("">ClassC"")`; - Draw inheritance tree for ClassC; - Show classes referencing ClassC; 4. `Draw(""ClassD<"")`; - Draw inheritance tree for ClassD; - Show classes referenced by ClassD; - Show all classes referencing ClassD; 5. `Draw(""Cla*"")`; - Draw inheritance tree for all classes with name starting with ""Cla""; - Show classes referenced by these classes; 6. `Draw(""ClassA:ClassB<"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; - Draw inheritance tree for ClassB; - Show classes referenced by ClassB; - Show all classes referencing ClassB. Example: `Draw(""TTree<"")`; - Draw inheritance tree for the Root class TTree; - Show all classes referenced by TTree; - Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; - option = ""H"" to show links to embedded classes; - option = ""M"" to show multiple inheritance; - option = ""R"" to show pointers to other classes from data members; - option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; ~~~ {.cpp}; TClassTree ct(""ct"",""*TH1""); ~~~; It shows all the classes derived from the base class TH1. \image html gpad_classtree1.png. The TClassTree class uses the services of the class TPaveClass to; show the class names. By clicking with the right mouse button in; one TPaveClass object, one can invoke the following functions of TClassTree",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:1475,Modifiability,inherit,inheritance,1475,". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1. `Draw(""ClassA"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; 2. `Draw(""*ClassB"")`; - Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3. `Draw("">ClassC"")`; - Draw inheritance tree for ClassC; - Show classes referencing ClassC; 4. `Draw(""ClassD<"")`; - Draw inheritance tree for ClassD; - Show classes referenced by ClassD; - Show all classes referencing ClassD; 5. `Draw(""Cla*"")`; - Draw inheritance tree for all classes with name starting with ""Cla""; - Show classes referenced by these classes; 6. `Draw(""ClassA:ClassB<"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; - Draw inheritance tree for ClassB; - Show classes referenced by ClassB; - Show all classes referencing ClassB. Example: `Draw(""TTree<"")`; - Draw inheritance tree for the Root class TTree; - Show all classes referenced by TTree; - Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; - option = ""H"" to show links to embedded classes; - option = ""M"" to show multiple inheritance; - option = ""R"" to show pointers to other classes from data members; - option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; ~~~ {.cpp}; TClassTree ct(""ct"",""*TH1""); ~~~; It shows all the classes derived from the base class TH1. \image html gpad_classtree1.png. The TClassTree class uses the services of the class TPaveClass to; show the class names. By clicking with the right mouse button in; one TPaveClass object, one can invoke the following functions of TClassTree:; - ShowLinks(option) with by default option = ""HMR""; - Draw(classes). By default the class drawn is the one being pointed; - ShowClassesUsedBy(classes) (by default the pointed clas",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:1614,Modifiability,inherit,inheritance,1614,"wing formats are supported, eg in TClassTree::Draw; 1. `Draw(""ClassA"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; 2. `Draw(""*ClassB"")`; - Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3. `Draw("">ClassC"")`; - Draw inheritance tree for ClassC; - Show classes referencing ClassC; 4. `Draw(""ClassD<"")`; - Draw inheritance tree for ClassD; - Show classes referenced by ClassD; - Show all classes referencing ClassD; 5. `Draw(""Cla*"")`; - Draw inheritance tree for all classes with name starting with ""Cla""; - Show classes referenced by these classes; 6. `Draw(""ClassA:ClassB<"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; - Draw inheritance tree for ClassB; - Show classes referenced by ClassB; - Show all classes referencing ClassB. Example: `Draw(""TTree<"")`; - Draw inheritance tree for the Root class TTree; - Show all classes referenced by TTree; - Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; - option = ""H"" to show links to embedded classes; - option = ""M"" to show multiple inheritance; - option = ""R"" to show pointers to other classes from data members; - option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; ~~~ {.cpp}; TClassTree ct(""ct"",""*TH1""); ~~~; It shows all the classes derived from the base class TH1. \image html gpad_classtree1.png. The TClassTree class uses the services of the class TPaveClass to; show the class names. By clicking with the right mouse button in; one TPaveClass object, one can invoke the following functions of TClassTree:; - ShowLinks(option) with by default option = ""HMR""; - Draw(classes). By default the class drawn is the one being pointed; - ShowClassesUsedBy(classes) (by default the pointed class); - ShowClassesUsing(classes) (by default the pointed class). The following picture has been ge",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:1784,Modifiability,inherit,inheritance,1784,"raw inheritance tree for ClassB; and all the classes deriving from ClassB; 3. `Draw("">ClassC"")`; - Draw inheritance tree for ClassC; - Show classes referencing ClassC; 4. `Draw(""ClassD<"")`; - Draw inheritance tree for ClassD; - Show classes referenced by ClassD; - Show all classes referencing ClassD; 5. `Draw(""Cla*"")`; - Draw inheritance tree for all classes with name starting with ""Cla""; - Show classes referenced by these classes; 6. `Draw(""ClassA:ClassB<"")`; - Draw inheritance tree for ClassA; - Show all classes referenced by ClassA; - Draw inheritance tree for ClassB; - Show classes referenced by ClassB; - Show all classes referencing ClassB. Example: `Draw(""TTree<"")`; - Draw inheritance tree for the Root class TTree; - Show all classes referenced by TTree; - Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; - option = ""H"" to show links to embedded classes; - option = ""M"" to show multiple inheritance; - option = ""R"" to show pointers to other classes from data members; - option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; ~~~ {.cpp}; TClassTree ct(""ct"",""*TH1""); ~~~; It shows all the classes derived from the base class TH1. \image html gpad_classtree1.png. The TClassTree class uses the services of the class TPaveClass to; show the class names. By clicking with the right mouse button in; one TPaveClass object, one can invoke the following functions of TClassTree:; - ShowLinks(option) with by default option = ""HMR""; - Draw(classes). By default the class drawn is the one being pointed; - ShowClassesUsedBy(classes) (by default the pointed class); - ShowClassesUsing(classes) (by default the pointed class). The following picture has been generated with the following statements; ~~~ {.cpp}; TClassTree tc1(""tc1"",""TH1"");; tc1.ShowLinks(""HMR"");; ~~~. \image html gpad_classtree2.png. Note that in case of embedded clas",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:3062,Modifiability,inherit,inheritance,3062,"image html gpad_classtree1.png. The TClassTree class uses the services of the class TPaveClass to; show the class names. By clicking with the right mouse button in; one TPaveClass object, one can invoke the following functions of TClassTree:; - ShowLinks(option) with by default option = ""HMR""; - Draw(classes). By default the class drawn is the one being pointed; - ShowClassesUsedBy(classes) (by default the pointed class); - ShowClassesUsing(classes) (by default the pointed class). The following picture has been generated with the following statements; ~~~ {.cpp}; TClassTree tc1(""tc1"",""TH1"");; tc1.ShowLinks(""HMR"");; ~~~. \image html gpad_classtree2.png. Note that in case of embedded classes or pointers to classes,; the corresponding dashed lines or arrows respectively start; in the TPaveClass object at an X position reflecting the position; in the list of data members. - References by data members to other classes are show with a full red line; - Multiple inheritance is shown with a dashed blue line; - ""Has a"" relation is shown with a dotted cyan line; - References from code is shown by a full green line. Use TClassTree::SetSourceDir to specify the search path for source files.; By default the search path includes the `$ROOTSYS` directory, the current; directory and the subdirectory `src`. The first time TClassTree::Draw is invoked, all the classes in the; current application are processed, including the parsing of the code; to find all classes referenced by the include statements.; This process may take a few seconds. The following commands will be; much faster. A TClassTree object may be saved in a Root file.; This object can be processed later by a Root program that ignores; the original classes. This interesting possibility allows to send; the class structure of an application to a colleague who does not have; your classes. Example:; ~~~ {.cpp}; TFile f(""myClasses.root"",""recreate""); TClassTree *ct = new TClassTree(""ct"",""ATLF*""); ct->Write();; ~~~; You can send at ",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:4398,Security,access,access,4398,"tements; ~~~ {.cpp}; TClassTree tc1(""tc1"",""TH1"");; tc1.ShowLinks(""HMR"");; ~~~. \image html gpad_classtree2.png. Note that in case of embedded classes or pointers to classes,; the corresponding dashed lines or arrows respectively start; in the TPaveClass object at an X position reflecting the position; in the list of data members. - References by data members to other classes are show with a full red line; - Multiple inheritance is shown with a dashed blue line; - ""Has a"" relation is shown with a dotted cyan line; - References from code is shown by a full green line. Use TClassTree::SetSourceDir to specify the search path for source files.; By default the search path includes the `$ROOTSYS` directory, the current; directory and the subdirectory `src`. The first time TClassTree::Draw is invoked, all the classes in the; current application are processed, including the parsing of the code; to find all classes referenced by the include statements.; This process may take a few seconds. The following commands will be; much faster. A TClassTree object may be saved in a Root file.; This object can be processed later by a Root program that ignores; the original classes. This interesting possibility allows to send; the class structure of an application to a colleague who does not have; your classes. Example:; ~~~ {.cpp}; TFile f(""myClasses.root"",""recreate""); TClassTree *ct = new TClassTree(""ct"",""ATLF*""); ct->Write();; ~~~; You can send at this point the file myClass.root to a colleague who can; run the following Root basic session; ~~~ {.cpp}; TFile f(""myClass.root""); //connect the file; tt.ls(); //to list all classes and titles; tt.Draw(""ATLFDisplay"") //show class ATLFDisplay with all its dependencies; ~~~; At this point, one has still access to all the classes present; in the original session and select any combination of these classes; to be displayed.; */; ////////////////////////////////////////////////////////////////////////////////; /// TClassTree default constructor.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:95,Modifiability,inherit,inheritance,95,"////////////////////////////////////////////////////////////////////////////////; /// Draw the inheritance tree and relations for the list of classes; /// see this class header for the syntax and examples",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:99,Deployability,configurat,configuration,99,"////////////////////////////////////////////////////////////////////////////////; /// save current configuration in a Root file; /// if filename is blank, the name of the file will be the current objectname.root; /// all the current settings are preserved; /// the Root file produced can be looked at by a another Root session; /// with no access to the original classes.; /// By default a message is printed. Specify option ""Q"" to remove the message",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:390,Integrability,message,message,390,"////////////////////////////////////////////////////////////////////////////////; /// save current configuration in a Root file; /// if filename is blank, the name of the file will be the current objectname.root; /// all the current settings are preserved; /// the Root file produced can be looked at by a another Root session; /// with no access to the original classes.; /// By default a message is printed. Specify option ""Q"" to remove the message",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:443,Integrability,message,message,443,"////////////////////////////////////////////////////////////////////////////////; /// save current configuration in a Root file; /// if filename is blank, the name of the file will be the current objectname.root; /// all the current settings are preserved; /// the Root file produced can be looked at by a another Root session; /// with no access to the original classes.; /// By default a message is printed. Specify option ""Q"" to remove the message",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:99,Modifiability,config,configuration,99,"////////////////////////////////////////////////////////////////////////////////; /// save current configuration in a Root file; /// if filename is blank, the name of the file will be the current objectname.root; /// all the current settings are preserved; /// the Root file produced can be looked at by a another Root session; /// with no access to the original classes.; /// By default a message is printed. Specify option ""Q"" to remove the message",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:340,Security,access,access,340,"////////////////////////////////////////////////////////////////////////////////; /// save current configuration in a Root file; /// if filename is blank, the name of the file will be the current objectname.root; /// all the current settings are preserved; /// the Root file produced can be looked at by a another Root session; /// with no access to the original classes.; /// By default a message is printed. Specify option ""Q"" to remove the message",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:214,Modifiability,inherit,inheriting,214,"////////////////////////////////////////////////////////////////////////////////; /// Set the offset at the top of the picture; /// The default offset is computed automatically taking into account; /// classes not inheriting from TObject.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:226,Modifiability,Inherit,Inheritance,226,"////////////////////////////////////////////////////////////////////////////////; /// Set link options in the ClassTree object; ///; /// - ""C"" show References from code; /// - ""H"" show Has a relations; /// - ""M"" show Multiple Inheritance; /// - ""R"" show References from data members",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:104,Modifiability,inherit,inheritance,104,"////////////////////////////////////////////////////////////////////////////////; /// Draw the Multiple inheritance relationships",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:21,Modifiability,inherit,inheritance,21,"//keep only multiple inheritance",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:132,Modifiability,inherit,inheritance,132,"////////////////////////////////////////////////////////////////////////////////; /// Draw the References relationships (other than inheritance or composition)",MatchSource.CODE_COMMENT,graf2d/gpad/src/TClassTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TColorWheel.cxx:20,Availability,error,error,20,"// check improbable error condition, suppress gcc9 warnings",MatchSource.CODE_COMMENT,graf2d/gpad/src/TColorWheel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TColorWheel.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx:1310,Integrability,Interface,Interface,1310,"ributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TControlBar; \ingroup gpad. A Control Bar is a fully user configurable tool which provides fast; access to frequently used operations. The user can choose between; buttons and drawn buttons (let's say icons) and assign to them their; own actions (let's say ROOT or C++ commands). The macro below shows an example of control bar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. ~~~ {.cpp}; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x graphics/tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x geom/shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""file_layout"", "".x io/file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree/tree.C"",; ""The Tr",MatchSource.CODE_COMMENT,graf2d/gpad/src/TControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx:484,Modifiability,config,configurable,484,"// @(#)root/gpad:$Id$; // Author: Nenad Buncic 20/02/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TControlBar; \ingroup gpad. A Control Bar is a fully user configurable tool which provides fast; access to frequently used operations. The user can choose between; buttons and drawn buttons (let's say icons) and assign to them their; own actions (let's say ROOT or C++ commands). The macro below shows an example of control bar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. ~~~ {.cpp}; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a ",MatchSource.CODE_COMMENT,graf2d/gpad/src/TControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx:523,Security,access,access,523,"// @(#)root/gpad:$Id$; // Author: Nenad Buncic 20/02/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TControlBar; \ingroup gpad. A Control Bar is a fully user configurable tool which provides fast; access to frequently used operations. The user can choose between; buttons and drawn buttons (let's say icons) and assign to them their; own actions (let's say ROOT or C++ commands). The macro below shows an example of control bar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. ~~~ {.cpp}; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a ",MatchSource.CODE_COMMENT,graf2d/gpad/src/TControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx:882,Security,access,access,882,"// @(#)root/gpad:$Id$; // Author: Nenad Buncic 20/02/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TControlBar; \ingroup gpad. A Control Bar is a fully user configurable tool which provides fast; access to frequently used operations. The user can choose between; buttons and drawn buttons (let's say icons) and assign to them their; own actions (let's say ROOT or C++ commands). The macro below shows an example of control bar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. ~~~ {.cpp}; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a ",MatchSource.CODE_COMMENT,graf2d/gpad/src/TControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx:2415,Testability,benchmark,benchmarks,2415,"o see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. ~~~ {.cpp}; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x graphics/tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x geom/shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""file_layout"", "".x io/file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree/tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x tree/ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x legacy/benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x legacy/rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!vi hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""bar.Hide()"",; ""Close ControlBar"");; bar.Show();; }; ~~~; \image html gpad_controlbar.png; */",MatchSource.CODE_COMMENT,graf2d/gpad/src/TControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx:2439,Testability,benchmark,benchmarks,2439,"o see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. ~~~ {.cpp}; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x graphics/tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x geom/shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""file_layout"", "".x io/file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree/tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x tree/ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x legacy/benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x legacy/rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!vi hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""bar.Hide()"",; ""Close ControlBar"");; bar.Show();; }; ~~~; \image html gpad_controlbar.png; */",MatchSource.CODE_COMMENT,graf2d/gpad/src/TControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx:2474,Testability,benchmark,benchmarks,2474,"o see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. ~~~ {.cpp}; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x graphics/tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x geom/shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""file_layout"", "".x io/file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree/tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x tree/ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x legacy/benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x legacy/rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!vi hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""bar.Hide()"",; ""Close ControlBar"");; bar.Show();; }; ~~~; \image html gpad_controlbar.png; */",MatchSource.CODE_COMMENT,graf2d/gpad/src/TControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx:1643,Usability,Simpl,Simple,1643,"; own actions (let's say ROOT or C++ commands). The macro below shows an example of control bar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. ~~~ {.cpp}; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x graphics/tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x geom/shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""file_layout"", "".x io/file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree/tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x tree/ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x legacy/benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x legacy/rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!vi hsimple.C &"",; ""Invokes the t",MatchSource.CODE_COMMENT,graf2d/gpad/src/TControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx:1824,Usability,Simpl,Simple,1824,"o see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. ~~~ {.cpp}; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x graphics/tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x geom/shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""file_layout"", "".x io/file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree/tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x tree/ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x legacy/benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x legacy/rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!vi hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""bar.Hide()"",; ""Close ControlBar"");; bar.Show();; }; ~~~; \image html gpad_controlbar.png; */",MatchSource.CODE_COMMENT,graf2d/gpad/src/TControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx:2001,Usability,simpl,simple,2001,"o see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. ~~~ {.cpp}; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x graphics/tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x geom/shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""file_layout"", "".x io/file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree/tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x tree/ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x legacy/benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x legacy/rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!vi hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""bar.Hide()"",; ""Close ControlBar"");; bar.Show();; }; ~~~; \image html gpad_controlbar.png; */",MatchSource.CODE_COMMENT,graf2d/gpad/src/TControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx:3,Performance,Load,Load,3,"// Load and initialize graphics libraries if; // TApplication::NeedGraphicsLibs() has been called by a; // library static initializer.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBarButton.cxx:548,Energy Efficiency,consumption,consumption,548,"// @(#)root/gpad:$Id$; // Author: Nenad Buncic 20/02/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TControlBarButton; \ingroup gpad; This class defines the control bar buttons. Created by the TControlBar. Not for general consumption.; */",MatchSource.CODE_COMMENT,graf2d/gpad/src/TControlBarButton.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBarButton.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCreatePrimitives.cxx:199,Deployability,Release,Release,199,"////////////////////////////////////////////////////////////////////////////////; /// Create a new arc/ellipse in this gPad.; ///; /// - Click left button to indicate arrow starting position.; /// - Release left button to terminate the arrow.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCreatePrimitives.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCreatePrimitives.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCreatePrimitives.cxx:198,Deployability,Release,Release,198,"////////////////////////////////////////////////////////////////////////////////; /// Create a new line/arrow in this gPad.; ///; /// - Click left button to indicate arrow starting position.; /// - Release left button to terminate the arrow.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCreatePrimitives.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCreatePrimitives.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCreatePrimitives.cxx:195,Deployability,Release,Release,195,"////////////////////////////////////////////////////////////////////////////////; /// Create a new pavetext in gPad.; ///; /// - Click left button to indicate one corner of the pavelabel.; /// - Release left button at the opposite corner.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TCreatePrimitives.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCreatePrimitives.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TInspectCanvas.cxx:70,Integrability,wrap,wrap,70,/** \class TInspectorObject; \ingroup gpad. This class is designed to wrap a Foreign object in order to; inject it into the Browse sub-system.; */,MatchSource.CODE_COMMENT,graf2d/gpad/src/TInspectCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TInspectCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TInspectCanvas.cxx:105,Integrability,inject,inject,105,/** \class TInspectorObject; \ingroup gpad. This class is designed to wrap a Foreign object in order to; inject it into the Browse sub-system.; */,MatchSource.CODE_COMMENT,graf2d/gpad/src/TInspectCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TInspectCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TInspectCanvas.cxx:105,Security,inject,inject,105,/** \class TInspectorObject; \ingroup gpad. This class is designed to wrap a Foreign object in order to; inject it into the Browse sub-system.; */,MatchSource.CODE_COMMENT,graf2d/gpad/src/TInspectCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TInspectCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TInspectCanvas.cxx:67,Integrability,wrap,wrapping,67,"// This is possible only if obj is actually a TInspectorObject; // wrapping a non-TObject.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TInspectCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TInspectCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TInspectCanvas.cxx:104,Integrability,interface,interface,104,"////////////////////////////////////////////////////////////////////////////////; /// static function , interface to InspectObject.; /// Create the InspectCanvas if it does not exist yet.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TInspectCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TInspectCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:327,Performance,perform,performed,327,"/** \class TPad; \ingroup gpad. The most important graphics class in the ROOT system. A Pad is contained in a Canvas. A Pad may contain other pads (unlimited pad hierarchy). A pad is a linked list of primitives of any type (graphics objects,; histograms, detectors, tracks, etc.). Adding a new element into a pad is in general performed by the Draw; member function of the object classes. It is important to realize that the pad is a linked list of references; to the original object.; For example, in case of a histogram, the histogram.Draw() operation; only stores a reference to the histogram object and not a graphical; representation of this histogram.; When the mouse is used to change (say the bin content), the bin content; of the original histogram is changed. The convention used in ROOT is that a Draw operation only adds; a reference to the object. The effective drawing is performed; when the canvas receives a signal to be painted. \image html gpad_pad1.png. This signal is generally sent when typing carriage return in the; command input or when a graphical operation has been performed on one; of the pads of this canvas.; When a Canvas/Pad is repainted, the member function Paint for all; objects in the Pad linked list is invoked. \image html gpad_pad2.png. When the mouse is moved on the Pad, The member function DistancetoPrimitive; is called for all the elements in the pad. DistancetoPrimitive returns; the distance in pixels to this object. When the object is within the distance window, the member function; ExecuteEvent is called for this object. In ExecuteEvent, move, changes can be performed on the object. For examples of DistancetoPrimitive and ExecuteEvent functions,; see classes; ~~~ {.cpp}; TLine::DistancetoPrimitive, TLine::ExecuteEvent; TBox::DistancetoPrimitive, TBox::ExecuteEvent; TH1::DistancetoPrimitive, TH1::ExecuteEvent; ~~~; A Pad supports linear and log scales coordinate systems.; The transformation coefficients are explained in TPad::ResizePad.; */; /",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:886,Performance,perform,performed,886,"/** \class TPad; \ingroup gpad. The most important graphics class in the ROOT system. A Pad is contained in a Canvas. A Pad may contain other pads (unlimited pad hierarchy). A pad is a linked list of primitives of any type (graphics objects,; histograms, detectors, tracks, etc.). Adding a new element into a pad is in general performed by the Draw; member function of the object classes. It is important to realize that the pad is a linked list of references; to the original object.; For example, in case of a histogram, the histogram.Draw() operation; only stores a reference to the histogram object and not a graphical; representation of this histogram.; When the mouse is used to change (say the bin content), the bin content; of the original histogram is changed. The convention used in ROOT is that a Draw operation only adds; a reference to the object. The effective drawing is performed; when the canvas receives a signal to be painted. \image html gpad_pad1.png. This signal is generally sent when typing carriage return in the; command input or when a graphical operation has been performed on one; of the pads of this canvas.; When a Canvas/Pad is repainted, the member function Paint for all; objects in the Pad linked list is invoked. \image html gpad_pad2.png. When the mouse is moved on the Pad, The member function DistancetoPrimitive; is called for all the elements in the pad. DistancetoPrimitive returns; the distance in pixels to this object. When the object is within the distance window, the member function; ExecuteEvent is called for this object. In ExecuteEvent, move, changes can be performed on the object. For examples of DistancetoPrimitive and ExecuteEvent functions,; see classes; ~~~ {.cpp}; TLine::DistancetoPrimitive, TLine::ExecuteEvent; TBox::DistancetoPrimitive, TBox::ExecuteEvent; TH1::DistancetoPrimitive, TH1::ExecuteEvent; ~~~; A Pad supports linear and log scales coordinate systems.; The transformation coefficients are explained in TPad::ResizePad.; */; /",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:1092,Performance,perform,performed,1092,"phics class in the ROOT system. A Pad is contained in a Canvas. A Pad may contain other pads (unlimited pad hierarchy). A pad is a linked list of primitives of any type (graphics objects,; histograms, detectors, tracks, etc.). Adding a new element into a pad is in general performed by the Draw; member function of the object classes. It is important to realize that the pad is a linked list of references; to the original object.; For example, in case of a histogram, the histogram.Draw() operation; only stores a reference to the histogram object and not a graphical; representation of this histogram.; When the mouse is used to change (say the bin content), the bin content; of the original histogram is changed. The convention used in ROOT is that a Draw operation only adds; a reference to the object. The effective drawing is performed; when the canvas receives a signal to be painted. \image html gpad_pad1.png. This signal is generally sent when typing carriage return in the; command input or when a graphical operation has been performed on one; of the pads of this canvas.; When a Canvas/Pad is repainted, the member function Paint for all; objects in the Pad linked list is invoked. \image html gpad_pad2.png. When the mouse is moved on the Pad, The member function DistancetoPrimitive; is called for all the elements in the pad. DistancetoPrimitive returns; the distance in pixels to this object. When the object is within the distance window, the member function; ExecuteEvent is called for this object. In ExecuteEvent, move, changes can be performed on the object. For examples of DistancetoPrimitive and ExecuteEvent functions,; see classes; ~~~ {.cpp}; TLine::DistancetoPrimitive, TLine::ExecuteEvent; TBox::DistancetoPrimitive, TBox::ExecuteEvent; TH1::DistancetoPrimitive, TH1::ExecuteEvent; ~~~; A Pad supports linear and log scales coordinate systems.; The transformation coefficients are explained in TPad::ResizePad.; */; ///////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:1610,Performance,perform,performed,1610,"anvas. A Pad may contain other pads (unlimited pad hierarchy). A pad is a linked list of primitives of any type (graphics objects,; histograms, detectors, tracks, etc.). Adding a new element into a pad is in general performed by the Draw; member function of the object classes. It is important to realize that the pad is a linked list of references; to the original object.; For example, in case of a histogram, the histogram.Draw() operation; only stores a reference to the histogram object and not a graphical; representation of this histogram.; When the mouse is used to change (say the bin content), the bin content; of the original histogram is changed. The convention used in ROOT is that a Draw operation only adds; a reference to the object. The effective drawing is performed; when the canvas receives a signal to be painted. \image html gpad_pad1.png. This signal is generally sent when typing carriage return in the; command input or when a graphical operation has been performed on one; of the pads of this canvas.; When a Canvas/Pad is repainted, the member function Paint for all; objects in the Pad linked list is invoked. \image html gpad_pad2.png. When the mouse is moved on the Pad, The member function DistancetoPrimitive; is called for all the elements in the pad. DistancetoPrimitive returns; the distance in pixels to this object. When the object is within the distance window, the member function; ExecuteEvent is called for this object. In ExecuteEvent, move, changes can be performed on the object. For examples of DistancetoPrimitive and ExecuteEvent functions,; see classes; ~~~ {.cpp}; TLine::DistancetoPrimitive, TLine::ExecuteEvent; TBox::DistancetoPrimitive, TBox::ExecuteEvent; TH1::DistancetoPrimitive, TH1::ExecuteEvent; ~~~; A Pad supports linear and log scales coordinate systems.; The transformation coefficients are explained in TPad::ResizePad.; */; ////////////////////////////////////////////////////////////////////////////////; /// Pad default constructor.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:255,Safety,detect,detectors,255,"/** \class TPad; \ingroup gpad. The most important graphics class in the ROOT system. A Pad is contained in a Canvas. A Pad may contain other pads (unlimited pad hierarchy). A pad is a linked list of primitives of any type (graphics objects,; histograms, detectors, tracks, etc.). Adding a new element into a pad is in general performed by the Draw; member function of the object classes. It is important to realize that the pad is a linked list of references; to the original object.; For example, in case of a histogram, the histogram.Draw() operation; only stores a reference to the histogram object and not a graphical; representation of this histogram.; When the mouse is used to change (say the bin content), the bin content; of the original histogram is changed. The convention used in ROOT is that a Draw operation only adds; a reference to the object. The effective drawing is performed; when the canvas receives a signal to be painted. \image html gpad_pad1.png. This signal is generally sent when typing carriage return in the; command input or when a graphical operation has been performed on one; of the pads of this canvas.; When a Canvas/Pad is repainted, the member function Paint for all; objects in the Pad linked list is invoked. \image html gpad_pad2.png. When the mouse is moved on the Pad, The member function DistancetoPrimitive; is called for all the elements in the pad. DistancetoPrimitive returns; the distance in pixels to this object. When the object is within the distance window, the member function; ExecuteEvent is called for this object. In ExecuteEvent, move, changes can be performed on the object. For examples of DistancetoPrimitive and ExecuteEvent functions,; see classes; ~~~ {.cpp}; TLine::DistancetoPrimitive, TLine::ExecuteEvent; TBox::DistancetoPrimitive, TBox::ExecuteEvent; TH1::DistancetoPrimitive, TH1::ExecuteEvent; ~~~; A Pad supports linear and log scales coordinate systems.; The transformation coefficients are explained in TPad::ResizePad.; */; /",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:1897,Testability,log,log,1897,"anvas. A Pad may contain other pads (unlimited pad hierarchy). A pad is a linked list of primitives of any type (graphics objects,; histograms, detectors, tracks, etc.). Adding a new element into a pad is in general performed by the Draw; member function of the object classes. It is important to realize that the pad is a linked list of references; to the original object.; For example, in case of a histogram, the histogram.Draw() operation; only stores a reference to the histogram object and not a graphical; representation of this histogram.; When the mouse is used to change (say the bin content), the bin content; of the original histogram is changed. The convention used in ROOT is that a Draw operation only adds; a reference to the object. The effective drawing is performed; when the canvas receives a signal to be painted. \image html gpad_pad1.png. This signal is generally sent when typing carriage return in the; command input or when a graphical operation has been performed on one; of the pads of this canvas.; When a Canvas/Pad is repainted, the member function Paint for all; objects in the Pad linked list is invoked. \image html gpad_pad2.png. When the mouse is moved on the Pad, The member function DistancetoPrimitive; is called for all the elements in the pad. DistancetoPrimitive returns; the distance in pixels to this object. When the object is within the distance window, the member function; ExecuteEvent is called for this object. In ExecuteEvent, move, changes can be performed on the object. For examples of DistancetoPrimitive and ExecuteEvent functions,; see classes; ~~~ {.cpp}; TLine::DistancetoPrimitive, TLine::ExecuteEvent; TBox::DistancetoPrimitive, TBox::ExecuteEvent; TH1::DistancetoPrimitive, TH1::ExecuteEvent; ~~~; A Pad supports linear and log scales coordinate systems.; The transformation coefficients are explained in TPad::ResizePad.; */; ////////////////////////////////////////////////////////////////////////////////; /// Pad default constructor.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3,Availability,error,error,3,"// error in creating pad occurred, make this pad a zombie",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:243,Safety,avoid,avoid,243,"// In some cases, fPrimitives has the kMustCleanup bit set which will lead; // its destructor to call RecursiveRemove and since this pad is still; // likely to be (indirectly) in the list of cleanups, we must set; // fPrimitives to nullptr to avoid TPad::RecursiveRemove from calling; // a member function of a partially destructed object.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:39,Security,Hash,Hash,39,"// Required since we overload TObject::Hash.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:237,Safety,avoid,avoid,237,"////////////////////////////////////////////////////////////////////////////////; /// Add an object to list of primitives with speicified draw option; /// When \par modified set to kTRUE (default) pad will be marked as modified; /// Let avoid usage of gPad when drawing object(s) in canvas or in subpads.; ///; /// ~~~{.cpp}; /// auto c1 = new TCanvas(""c1"",""Canvas with subpoads"", 600, 600);; /// c1->Divide(2,2);; ///; /// for (Int_t n = 1; n <= 4; ++n) {; /// auto h1 = new TH1I(TString::Format(""hist_%d"",n), ""Random hist"", 100, -5, 5);; /// h1->FillRandom(""gaus"", 2000 + n*1000);; /// c1->GetPad(n)->Add(h1);; /// }; /// ~~~",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:246,Safety,avoid,avoid,246,"////////////////////////////////////////////////////////////////////////////////; /// Add an object as first in list of primitives with speicified draw option; /// When \par modified set to kTRUE (default) pad will be marked as modified; /// Let avoid usage of gPad when drawing object(s) in canvas or in subpads.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:1535,Energy Efficiency,power,powerful,1535,"////////////////////////////////////////////////////////////////////////////////; /// Add a new TExec object to the list of Execs.; ///; /// When an event occurs in the pad (mouse click, etc) the list of C++ commands; /// in the list of Execs are executed via TPad::AutoExec.; ///; /// When a pad event occurs (mouse move, click, etc) all the commands; /// contained in the fExecs list are executed in the order found in the list.; ///; /// This facility is activated by default. It can be deactivated by using; /// the canvas ""Option"" menu.; ///; /// The following examples of TExec commands are provided in the tutorials:; /// macros exec1.C and exec2.C.; ///; /// ### Example1 of use of exec1.C; ///; /// ~~~ {.cpp}; /// Root > TFile f(""hsimple.root""); /// Root > hpx.Draw(); /// Root > c1.AddExec(""ex1"","".x exec1.C""); /// ~~~; ///; /// At this point you can use the mouse to click on the contour of; /// the histogram hpx. When the mouse is clicked, the bin number and its; /// contents are printed.; ///; /// ### Example2 of use of exec1.C; ///; /// ~~~ {.cpp}; /// Root > TFile f(""hsimple.root""); /// Root > hpxpy.Draw(); /// Root > c1.AddExec(""ex2"","".x exec2.C""); /// ~~~; ///; /// When moving the mouse in the canvas, a second canvas shows the; /// projection along X of the bin corresponding to the Y position; /// of the mouse. The resulting histogram is fitted with a gaussian.; /// A ""dynamic"" line shows the current bin position in Y.; /// This more elaborated example can be used as a starting point; /// to develop more powerful interactive applications exploiting the C++; /// interpreter as a development engine.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:899,Safety,avoid,avoid,899,"////////////////////////////////////////////////////////////////////////////////; /// Build a legend from the graphical objects in the pad.; ///; /// A simple method to build automatically a TLegend from the primitives in a TPad.; ///; /// Only those deriving from TAttLine, TAttMarker and TAttFill are added, excluding; /// TPave and TFrame derived classes.; ///; /// \return The built TLegend; ///; /// \param[in] x1, y1, x2, y2 The TLegend coordinates; /// \param[in] title The legend title. By default it is "" ""; /// \param[in] option The TLegend option; ///; /// The caller program owns the returned TLegend.; ///; /// If the pad contains some TMultiGraph or THStack the individual; /// graphs or histograms in them are added to the TLegend.; ///; /// ### Automatic placement of the legend; /// If `x1` is equal to `x2` and `y1` is equal to `y2` the legend will be automatically; /// placed to avoid overlapping with the existing primitives already displayed.; /// `x1` is considered as the width of the legend and `y1` the height. By default; /// the legend is automatically placed with width = `x1`= `x2` = 0.3 and; /// height = `y1`= `y2` = 0.21.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:152,Usability,simpl,simple,152,"////////////////////////////////////////////////////////////////////////////////; /// Build a legend from the graphical objects in the pad.; ///; /// A simple method to build automatically a TLegend from the primitives in a TPad.; ///; /// Only those deriving from TAttLine, TAttMarker and TAttFill are added, excluding; /// TPave and TFrame derived classes.; ///; /// \return The built TLegend; ///; /// \param[in] x1, y1, x2, y2 The TLegend coordinates; /// \param[in] title The legend title. By default it is "" ""; /// \param[in] option The TLegend option; ///; /// The caller program owns the returned TLegend.; ///; /// If the pad contains some TMultiGraph or THStack the individual; /// graphs or histograms in them are added to the TLegend.; ///; /// ### Automatic placement of the legend; /// If `x1` is equal to `x2` and `y1` is equal to `y2` the legend will be automatically; /// placed to avoid overlapping with the existing primitives already displayed.; /// `x1` is considered as the width of the legend and `y1` the height. By default; /// the legend is automatically placed with width = `x1`= `x2` = 0.3 and; /// height = `y1`= `y2` = 0.21.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:347,Availability,failure,failure,347,"////////////////////////////////////////////////////////////////////////////////; /// Set Current pad.; ///; /// When a canvas/pad is divided via TPad::Divide, one can directly; /// set the current path to one of the subdivisions.; /// See TPad::Divide for the convention to number sub-pads.; ///; /// Returns the new current pad, or 0 in case of failure.; ///; /// For example:; /// ~~~ {.cpp}; /// c1.Divide(2,3); // create 6 pads (2 divisions along x, 3 along y).; /// ~~~; /// To set the current pad to the bottom right pad, do; /// ~~~ {.cpp}; /// c1.cd(6);; /// ~~~; /// Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad; /// to c1 itself.; ///; /// Note2: after a statement like c1.cd(6), the global variable gPad; /// points to the current pad. One can use gPad to set attributes; /// of the current pad.; ///; /// Note3: One can get a pointer to one of the sub-pads of pad with:; /// TPad *subpad = (TPad*)pad->GetPad(subpadnumber);",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:723,Modifiability,variab,variable,723,"////////////////////////////////////////////////////////////////////////////////; /// Set Current pad.; ///; /// When a canvas/pad is divided via TPad::Divide, one can directly; /// set the current path to one of the subdivisions.; /// See TPad::Divide for the convention to number sub-pads.; ///; /// Returns the new current pad, or 0 in case of failure.; ///; /// For example:; /// ~~~ {.cpp}; /// c1.Divide(2,3); // create 6 pads (2 divisions along x, 3 along y).; /// ~~~; /// To set the current pad to the bottom right pad, do; /// ~~~ {.cpp}; /// c1.cd(6);; /// ~~~; /// Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad; /// to c1 itself.; ///; /// Note2: after a statement like c1.cd(6), the global variable gPad; /// points to the current pad. One can use gPad to set attributes; /// of the current pad.; ///; /// Note3: One can get a pointer to one of the sub-pads of pad with:; /// TPad *subpad = (TPad*)pad->GetPad(subpadnumber);",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:179,Usability,Clear,Clear,179,"////////////////////////////////////////////////////////////////////////////////; /// Delete all pad primitives.; ///; /// If the bit kClearAfterCR has been set for this pad, the Clear function; /// will execute only after having pressed a CarriageReturn; /// Set the bit with `mypad->SetBit(TPad::kClearAfterCR)`",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:95,Integrability,rout,routine,95,"////////////////////////////////////////////////////////////////////////////////; /// Clipping routine: Cohen Sutherland algorithm.; ///; /// - If Clip ==2 the segment is outside the boundary.; /// - If Clip ==1 the segment has one point outside the boundary.; /// - If Clip ==0 the segment is inside the boundary.; ///; /// \param[inout] x[],y[] Segment coordinates (2 points); /// \param[in] xclipl,yclipb,xclipr,yclipt Clipping boundary",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:7,Modifiability,variab,variable,7,"//this variable could be used in a future version",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:7,Modifiability,variab,variable,7,"//this variable could be used in a future version",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:562,Energy Efficiency,allocate,allocated,562,"////////////////////////////////////////////////////////////////////////////////; /// Clip polygon using the Sutherland-Hodgman algorithm.; ///; /// \param[in] n Number of points in the polygon to; /// be clipped; /// \param[in] x,y Polygon x[n], y[n] do be clipped vertices; /// \param[in] xclipl,yclipb,xclipr,yclipt Clipping boundary; /// \param[out] nn Number of points in xc and yc; /// \param[out] xc,yc Clipped polygon vertices. The Int_t; /// returned by this function is; /// the number of points in the clipped; /// polygon. These vectors must; /// be allocated by the calling function.; /// A size of 2*n for each is; /// enough.; ///; /// Sutherland and Hodgman's polygon-clipping algorithm uses a divide-and-conquer; /// strategy: It solves a series of simple and identical problems that, when; /// combined, solve the overall problem. The simple problem is to clip a polygon; /// against a single infinite clip edge. Four clip edges, each defining one boundary; /// of the clip rectangle, successively clip a polygon against a clip rectangle.; ///; /// Steps of Sutherland-Hodgman's polygon-clipping algorithm:; ///; /// * Polygons can be clipped against each edge of the window one at a time.; /// Windows/edge intersections, if any, are easy to find since the X or Y coordinates; /// are already known.; /// * Vertices which are kept after clipping against one window edge are saved for; /// clipping against the remaining edges.; /// * Note that the number of vertices usually changes and will often increases.; ///; /// The clip boundary determines a visible and invisible region. The edges from; /// vertex i to vertex i+1 can be one of four types:; ///; /// * Case 1 : Wholly inside visible region - save endpoint; /// * Case 2 : Exit visible region - save the intersection; /// * Case 3 : Wholly outside visible region - save nothing; /// * Case 4 : Enter visible region - save intersection and endpoint",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:766,Usability,simpl,simple,766,"////////////////////////////////////////////////////////////////////////////////; /// Clip polygon using the Sutherland-Hodgman algorithm.; ///; /// \param[in] n Number of points in the polygon to; /// be clipped; /// \param[in] x,y Polygon x[n], y[n] do be clipped vertices; /// \param[in] xclipl,yclipb,xclipr,yclipt Clipping boundary; /// \param[out] nn Number of points in xc and yc; /// \param[out] xc,yc Clipped polygon vertices. The Int_t; /// returned by this function is; /// the number of points in the clipped; /// polygon. These vectors must; /// be allocated by the calling function.; /// A size of 2*n for each is; /// enough.; ///; /// Sutherland and Hodgman's polygon-clipping algorithm uses a divide-and-conquer; /// strategy: It solves a series of simple and identical problems that, when; /// combined, solve the overall problem. The simple problem is to clip a polygon; /// against a single infinite clip edge. Four clip edges, each defining one boundary; /// of the clip rectangle, successively clip a polygon against a clip rectangle.; ///; /// Steps of Sutherland-Hodgman's polygon-clipping algorithm:; ///; /// * Polygons can be clipped against each edge of the window one at a time.; /// Windows/edge intersections, if any, are easy to find since the X or Y coordinates; /// are already known.; /// * Vertices which are kept after clipping against one window edge are saved for; /// clipping against the remaining edges.; /// * Note that the number of vertices usually changes and will often increases.; ///; /// The clip boundary determines a visible and invisible region. The edges from; /// vertex i to vertex i+1 can be one of four types:; ///; /// * Case 1 : Wholly inside visible region - save endpoint; /// * Case 2 : Exit visible region - save the intersection; /// * Case 3 : Wholly outside visible region - save nothing; /// * Case 4 : Enter visible region - save intersection and endpoint",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:853,Usability,simpl,simple,853,"////////////////////////////////////////////////////////////////////////////////; /// Clip polygon using the Sutherland-Hodgman algorithm.; ///; /// \param[in] n Number of points in the polygon to; /// be clipped; /// \param[in] x,y Polygon x[n], y[n] do be clipped vertices; /// \param[in] xclipl,yclipb,xclipr,yclipt Clipping boundary; /// \param[out] nn Number of points in xc and yc; /// \param[out] xc,yc Clipped polygon vertices. The Int_t; /// returned by this function is; /// the number of points in the clipped; /// polygon. These vectors must; /// be allocated by the calling function.; /// A size of 2*n for each is; /// enough.; ///; /// Sutherland and Hodgman's polygon-clipping algorithm uses a divide-and-conquer; /// strategy: It solves a series of simple and identical problems that, when; /// combined, solve the overall problem. The simple problem is to clip a polygon; /// against a single infinite clip edge. Four clip edges, each defining one boundary; /// of the clip rectangle, successively clip a polygon against a clip rectangle.; ///; /// Steps of Sutherland-Hodgman's polygon-clipping algorithm:; ///; /// * Polygons can be clipped against each edge of the window one at a time.; /// Windows/edge intersections, if any, are easy to find since the X or Y coordinates; /// are already known.; /// * Vertices which are kept after clipping against one window edge are saved for; /// clipping against the remaining edges.; /// * Note that the number of vertices usually changes and will often increases.; ///; /// The clip boundary determines a visible and invisible region. The edges from; /// vertex i to vertex i+1 can be one of four types:; ///; /// * Case 1 : Wholly inside visible region - save endpoint; /// * Case 2 : Exit visible region - save the intersection; /// * Case 3 : Wholly outside visible region - save nothing; /// * Case 4 : Enter visible region - save intersection and endpoint",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:1068,Modifiability,variab,variable,1068,"////////////////////////////////////////////////////////////////////////////////; /// Automatic pad generation by division.; ///; /// - The current canvas is divided in nx by ny equal divisions (pads).; /// - xmargin is the space along x between pads in percent of canvas.; /// - ymargin is the space along y between pads in percent of canvas.; /// - color is the color of the new pads. If 0, color is the canvas color.; ///; /// Pads are automatically named `canvasname_n` where `n` is the division number; /// starting from top left pad.; ///; /// Example if canvasname=c1 , nx=2, ny=3:; ///; /// \image html gpad_pad3.png; ///; /// Once a pad is divided into sub-pads, one can set the current pad; /// to a subpad with a given division number as illustrated above; /// with TPad::cd(subpad_number).; ///; /// For example, to set the current pad to c1_4, one can do:; /// ~~~ {.cpp}; /// c1->cd(4); /// ~~~; /// __Note1:__ c1.cd() is equivalent to c1.cd(0) and sets the current pad; /// to c1 itself.; ///; /// __Note2:__ after a statement like c1.cd(6), the global variable gPad; /// points to the current pad. One can use gPad to set attributes; /// of the current pad.; ///; /// __Note3:__ in case xmargin <=0 and ymargin <= 0, there is no space; /// between pads. The current pad margins are recomputed to; /// optimize the layout.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:1317,Performance,optimiz,optimize,1317,"////////////////////////////////////////////////////////////////////////////////; /// Automatic pad generation by division.; ///; /// - The current canvas is divided in nx by ny equal divisions (pads).; /// - xmargin is the space along x between pads in percent of canvas.; /// - ymargin is the space along y between pads in percent of canvas.; /// - color is the color of the new pads. If 0, color is the canvas color.; ///; /// Pads are automatically named `canvasname_n` where `n` is the division number; /// starting from top left pad.; ///; /// Example if canvasname=c1 , nx=2, ny=3:; ///; /// \image html gpad_pad3.png; ///; /// Once a pad is divided into sub-pads, one can set the current pad; /// to a subpad with a given division number as illustrated above; /// with TPad::cd(subpad_number).; ///; /// For example, to set the current pad to c1_4, one can do:; /// ~~~ {.cpp}; /// c1->cd(4); /// ~~~; /// __Note1:__ c1.cd() is equivalent to c1.cd(0) and sets the current pad; /// to c1 itself.; ///; /// __Note2:__ after a statement like c1.cd(6), the global variable gPad; /// points to the current pad. One can use gPad to set attributes; /// of the current pad.; ///; /// __Note3:__ in case xmargin <=0 and ymargin <= 0, there is no space; /// between pads. The current pad margins are recomputed to; /// optimize the layout.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:97,Modifiability,inherit,inheritance,97,"////////////////////////////////////////////////////////////////////////////////; /// Draw class inheritance tree of the class to which obj belongs.; ///; /// If a class B inherits from a class A, description of B is drawn; /// on the right side of description of A.; ///; /// Member functions overridden by B are shown in class A with a blue line; /// crossing-out the corresponding member function.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:172,Modifiability,inherit,inherits,172,"////////////////////////////////////////////////////////////////////////////////; /// Draw class inheritance tree of the class to which obj belongs.; ///; /// If a class B inherits from a class A, description of B is drawn; /// on the right side of description of A.; ///; /// Member functions overridden by B are shown in class A with a blue line; /// crossing-out the corresponding member function.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3,Usability,Clear,Clear,3,"// Clear and Set Pad range",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:15,Modifiability,inherit,inheritance,15,"// Draw second inheritance classes for this class",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:25,Modifiability,variab,variable,25,"//if log scale in X, use variable bin size linear with log(x); //this gives a better precision when zooming on the axis",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:5,Testability,log,log,5,"//if log scale in X, use variable bin size linear with log(x); //this gives a better precision when zooming on the axis",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:55,Testability,log,log,55,"//if log scale in X, use variable bin size linear with log(x); //this gives a better precision when zooming on the axis",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:13,Deployability,release,released,13,"// button is released",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:376,Deployability,release,released,376,"////////////////////////////////////////////////////////////////////////////////; /// Execute action corresponding to one event for a TAxis object; /// (called by TAxis::ExecuteEvent.); /// This member function is called when an axis is clicked with the locator; ///; /// The axis range is set between the position where the mouse is pressed; /// and the position where it is released.; ///; /// If the mouse position is outside the current axis range when it is released; /// the axis is unzoomed with the corresponding proportions.; ///; /// Note that the mouse does not need to be in the pad or even canvas; /// when it is released.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:463,Deployability,release,released,463,"////////////////////////////////////////////////////////////////////////////////; /// Execute action corresponding to one event for a TAxis object; /// (called by TAxis::ExecuteEvent.); /// This member function is called when an axis is clicked with the locator; ///; /// The axis range is set between the position where the mouse is pressed; /// and the position where it is released.; ///; /// If the mouse position is outside the current axis range when it is released; /// the axis is unzoomed with the corresponding proportions.; ///; /// Note that the mouse does not need to be in the pad or even canvas; /// when it is released.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:626,Deployability,release,released,626,"////////////////////////////////////////////////////////////////////////////////; /// Execute action corresponding to one event for a TAxis object; /// (called by TAxis::ExecuteEvent.); /// This member function is called when an axis is clicked with the locator; ///; /// The axis range is set between the position where the mouse is pressed; /// and the position where it is released.; ///; /// If the mouse position is outside the current axis range when it is released; /// the axis is unzoomed with the corresponding proportions.; ///; /// Note that the mouse does not need to be in the pad or even canvas; /// when it is released.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2,Deployability,update,update,2,"//update object owning this axis",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2,Deployability,update,update,2,"//update all histograms in the pad",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:100,Integrability,depend,depending,100,"////////////////////////////////////////////////////////////////////////////////; /// Hide tool tip depending on the event type. Typically tool tips; /// are hidden when event is not a kMouseEnter and not a kMouseMotion; /// event.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update pad.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:103,Deployability,update,update,103,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:153,Deployability,update,update,153,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:227,Deployability,update,update,227,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:413,Deployability,Update,Update,413,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:425,Performance,perform,performed,425,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:248,Safety,Avoid,Avoids,248,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:344,Safety,avoid,avoid,344,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:350,Testability,log,logical,350,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:119,Deployability,Update,Update,119,"////////////////////////////////////////////////////////////////////////////////; /// Short cut to call Modified() and Update() in a single call.; /// On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:173,Performance,perform,performs,173,"////////////////////////////////////////////////////////////////////////////////; /// Short cut to call Modified() and Update() in a single call.; /// On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:84,Usability,clear,cleared,84,"// Close the 3D scene if we opened it. This must be done after modified; // flag is cleared, as some viewers will invoke another paint by marking pad modified again",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:24,Integrability,depend,depending,24,"// then paint 3d frame (depending on bordermode)",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:44,Usability,clear,cleared,44,"// This must be done after modified flag is cleared, as some; // viewers will invoke another paint by marking pad modified again",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:7,Usability,clear,clear,7,"//It's clear, that virtual X checks a style (4000) and will render a hollow rect!",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// This routine draw hatches inclined with the; /// angle ""angle"" and spaced of ""dy"" in normalized device; /// coordinates in the surface defined by n,xx,yy.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:460,Integrability,rout,routine,460,"////////////////////////////////////////////////////////////////////////////////; /// Search for an object at pixel position px,py.; ///; /// Check if point is in this pad.; ///; /// If yes, check if it is in one of the sub-pads; ///; /// If found in the pad, compute closest distance of approach; /// to each primitive.; ///; /// If one distance of approach is found to be within the limit Distancemaximum; /// the corresponding primitive is selected and the routine returns.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:32,Availability,avail,available,32,"//place holder for when no link available",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:137,Availability,down,down,137,"// Loop backwards over the list of primitives. The first non-pad primitive; // found is the selected one. However, we have to keep going down the; // list to see if there is maybe a pad overlaying the primitive. In that; // case look into the pad for a possible primitive. Once a pad has been; // found we can terminate the loop.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:147,Modifiability,inherit,inherited,147,"////////////////////////////////////////////////////////////////////////////////; /// Auxiliary function. Returns kTRUE if list contains an object inherited; /// from TImage",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:670,Availability,avail,available,670,"////////////////////////////////////////////////////////////////////////////////; /// Save Canvas contents in a file in one of various formats.; ///; /// \anchor TPadPrint; /// option can be:; ///; /// - `ps`: a Postscript file is produced (default). [See special cases](\ref TPadPrintPS).; /// - `Portrait`: Postscript file is produced (Portrait); /// - `Landscape`: Postscript file is produced (Landscape); /// - `eps`: an Encapsulated Postscript file is produced; /// - `Preview`: an [Encapsulated Postscript file with preview](\ref TPadPrintPreview) is produced.; /// - `pdf`: a PDF file is produced NOTE: TMathText will be converted to TLatex; q.e.d., symbols only available in TMathText will not render properly.; /// - `Title:`: The character string after `Title:` becomes a table; /// of content entry (for PDF files).; /// - `EmbedFonts`: a [PDF file with embedded fonts](\ref TPadPrintEmbedFonts) is generated.; /// - `svg`: a SVG file is produced; /// - `tex`: a TeX file is produced; /// - `Standalone`: a [standalone TeX file](\ref TPadPrintStandalone) is produced.; /// - `gif`: a GIF file is produced; /// - `gif+NN`: an animated GIF file is produced, where NN is delay in 10ms units NOTE: See other variants for looping animation in TASImage::WriteImage; /// - `xpm`: a XPM file is produced; /// - `png`: a PNG file is produced; /// - `jpg`: a JPEG file is produced. NOTE: JPEG's lossy compression will make all sharp edges fuzzy.; /// - `tiff`: a TIFF file is produced; /// - `cxx`: a C++ macro file is produced; /// - `xml`: a XML file; /// - `json`: a JSON file; /// - `root`: a ROOT binary file; ///; /// `filename` = 0 - filename is defined by `GetName` and its; /// extension is defined with the option; ///; /// When Postscript output is selected (`ps`, `eps`), the canvas is saved; /// to `filename.ps` or `filename.eps`. The aspect ratio of the canvas is preserved; /// on the Postscript file. When the ""ps"" option is selected, the Postscript; /// page will be landscape forma",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:4973,Safety,detect,detect,4973,"sed; /// - if the Postscript or PDF file name finishes with "")"" and the file has been opened; /// with ""("", the file is closed.; ///; /// Example:; /// ~~~ {.cpp}; /// {; /// TCanvas c1(""c1"");; /// h1.Draw();; /// c1.Print(""c1.ps(""); //write canvas and keep the ps file open; /// h2.Draw();; /// c1.Print(""c1.ps""); canvas is added to ""c1.ps""; /// h3.Draw();; /// c1.Print(""c1.ps)""); canvas is added to ""c1.ps"" and ps file is closed; /// }; /// ~~~; /// In the previous example replacing ""ps"" by ""pdf"" will create a multi-pages PDF file.; ///; /// Note that the following sequence writes the canvas to ""c1.ps"" and closes the ps file.:; /// ~~~ {.cpp}; /// TCanvas c1(""c1"");; /// h1.Draw();; /// c1.Print(""c1.ps"");; /// ~~~; /// The `TCanvas::Print(""file.ps("")` mechanism is very useful, but it can be; /// a little inconvenient to have the action of opening/closing a file; /// being atomic with printing a page. Particularly if pages are being; /// generated in some loop one needs to detect the special cases of first; /// and last page and then munge the argument to Print() accordingly.; ///; /// The ""["" and ""]"" can be used instead of ""("" and "")"".; ///; /// Example:; /// ~~~ {.cpp}; /// c1.Print(""file.ps[""); // No actual print, just open file.ps; /// for (int i=0; i<10; ++i) {; /// // fill canvas for context i; /// // ...; ///; /// c1.Print(""file.ps""); // actually print canvas to file; /// }// end loop; /// c1.Print(""file.ps]""); // No actual print, just close.; /// ~~~; /// As before, the same macro is valid for PDF files.; ///; /// It is possible to print a canvas into an animated GIF file by specifying the; /// file name as ""myfile.gif+"" or ""myfile.gif+NN"", where NN*10ms is delay; /// between the subimages' display. If NN is omitted the delay between; /// subimages is zero. Each picture is added in the animation thanks to a loop; /// similar to the following one:; /// ~~~ {.cpp}; /// for (int i=0; i<10; ++i) {; /// // fill canvas for context i; /// // ...; ///; /// c1.Print(""fi",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:6256,Safety,avoid,avoid,6256,"d; /// }; /// ~~~; /// In the previous example replacing ""ps"" by ""pdf"" will create a multi-pages PDF file.; ///; /// Note that the following sequence writes the canvas to ""c1.ps"" and closes the ps file.:; /// ~~~ {.cpp}; /// TCanvas c1(""c1"");; /// h1.Draw();; /// c1.Print(""c1.ps"");; /// ~~~; /// The `TCanvas::Print(""file.ps("")` mechanism is very useful, but it can be; /// a little inconvenient to have the action of opening/closing a file; /// being atomic with printing a page. Particularly if pages are being; /// generated in some loop one needs to detect the special cases of first; /// and last page and then munge the argument to Print() accordingly.; ///; /// The ""["" and ""]"" can be used instead of ""("" and "")"".; ///; /// Example:; /// ~~~ {.cpp}; /// c1.Print(""file.ps[""); // No actual print, just open file.ps; /// for (int i=0; i<10; ++i) {; /// // fill canvas for context i; /// // ...; ///; /// c1.Print(""file.ps""); // actually print canvas to file; /// }// end loop; /// c1.Print(""file.ps]""); // No actual print, just close.; /// ~~~; /// As before, the same macro is valid for PDF files.; ///; /// It is possible to print a canvas into an animated GIF file by specifying the; /// file name as ""myfile.gif+"" or ""myfile.gif+NN"", where NN*10ms is delay; /// between the subimages' display. If NN is omitted the delay between; /// subimages is zero. Each picture is added in the animation thanks to a loop; /// similar to the following one:; /// ~~~ {.cpp}; /// for (int i=0; i<10; ++i) {; /// // fill canvas for context i; /// // ...; ///; /// c1.Print(""file.gif+5""); // print canvas to GIF file with 50ms delays; /// }// end loop; /// ~~~; /// The delay between each frame must be specified in each Print() statement.; /// If the file ""myfile.gif"" already exists, the new frame are appended at; /// the end of the file. To avoid this, delete it first with `gSystem->Unlink(myfile.gif);`; /// If you want the gif file to repeat or loop forever, check TASImage::WriteImage documentation",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3,Integrability,synchroniz,synchronize,3,"// synchronize",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3,Modifiability,Plugin,Plugin,3,"// Plugin XML driver",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3,Modifiability,Plugin,Plugin,3,"// Plugin Postscript/SVG driver",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3,Modifiability,Plugin,Plugin,3,"// Plugin Postscript/SVG driver",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3,Modifiability,Plugin,Plugin,3,"// Plugin Postscript driver",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3,Modifiability,Plugin,Plugin,3,"// Plugin TImageDump driver",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:1928,Testability,LOG,LOG,1928,ange} + pylow = fYtoPixelk + fYtoPixel \times y; /// \f]; ///; /// \f[; /// \Rightarrow fYtoPixelk = pylow - pyrange \frac{ymin}{yrange}; /// \f]; /// \f[; /// fYtoPixel = \frac{pyrange}{yrange}; /// \f]; /// where:; /// \f[; /// pylow = fAbsYlowNDC \times fCh; /// \f]; /// \f[; /// pyrange = fAbsHNDC \times fCh; /// \f]; ///; /// ### Conversion from px to x; ///; /// \f[; /// \Rightarrow x = \frac{xrange(px-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; /// \f]; /// \f[; /// fPixeltoX = \frac{xrange}{pxrange}; /// \f]; ///; /// ### Conversion from py to y; ///; /// \f[; /// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - b,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2038,Testability,Log,Log,2038,yrange \frac{ymin}{yrange}; /// \f]; /// \f[; /// fYtoPixel = \frac{pyrange}{yrange}; /// \f]; /// where:; /// \f[; /// pylow = fAbsYlowNDC \times fCh; /// \f]; /// \f[; /// pyrange = fAbsHNDC \times fCh; /// \f]; ///; /// ### Conversion from px to x; ///; /// \f[; /// \Rightarrow x = \frac{xrange(px-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; /// \f]; /// \f[; /// fPixeltoX = \frac{xrange}{pxrange}; /// \f]; ///; /// ### Conversion from py to y; ///; /// \f[; /// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ ,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2047,Testability,Log,Log,2047,rac{ymin}{yrange}; /// \f]; /// \f[; /// fYtoPixel = \frac{pyrange}{yrange}; /// \f]; /// where:; /// \f[; /// pylow = fAbsYlowNDC \times fCh; /// \f]; /// \f[; /// pyrange = fAbsHNDC \times fCh; /// \f]; ///; /// ### Conversion from px to x; ///; /// \f[; /// \Rightarrow x = \frac{xrange(px-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; /// \f]; /// \f[; /// fPixeltoX = \frac{xrange}{pxrange}; /// \f]; ///; /// ### Conversion from py to y; ///; /// \f[; /// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarr,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2058,Testability,Log,Log,2058,range}; /// \f]; /// \f[; /// fYtoPixel = \frac{pyrange}{yrange}; /// \f]; /// where:; /// \f[; /// pylow = fAbsYlowNDC \times fCh; /// \f]; /// \f[; /// pyrange = fAbsHNDC \times fCh; /// \f]; ///; /// ### Conversion from px to x; ///; /// \f[; /// \Rightarrow x = \frac{xrange(px-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; /// \f]; /// \f[; /// fPixeltoX = \frac{xrange}{pxrange}; /// \f]; ///; /// ### Conversion from py to y; ///; /// \f[; /// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPix,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2070,Testability,Log,Log,2070,\f]; /// \f[; /// fYtoPixel = \frac{pyrange}{yrange}; /// \f]; /// where:; /// \f[; /// pylow = fAbsYlowNDC \times fCh; /// \f]; /// \f[; /// pyrange = fAbsHNDC \times fCh; /// \f]; ///; /// ### Conversion from px to x; ///; /// \f[; /// \Rightarrow x = \frac{xrange(px-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; /// \f]; /// \f[; /// fPixeltoX = \frac{xrange}{pxrange}; /// \f]; ///; /// ### Conversion from py to y; ///; /// \f[; /// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \time,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2089,Testability,Log,Log,2089,YtoPixel = \frac{pyrange}{yrange}; /// \f]; /// where:; /// \f[; /// pylow = fAbsYlowNDC \times fCh; /// \f]; /// \f[; /// pyrange = fAbsHNDC \times fCh; /// \f]; ///; /// ### Conversion from px to x; ///; /// \f[; /// \Rightarrow x = \frac{xrange(px-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; /// \f]; /// \f[; /// fPixeltoX = \frac{xrange}{pxrange}; /// \f]; ///; /// ### Conversion from py to y; ///; /// \f[; /// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \ti,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2102,Testability,Log,Log,2102,rac{pyrange}{yrange}; /// \f]; /// where:; /// \f[; /// pylow = fAbsYlowNDC \times fCh; /// \f]; /// \f[; /// pyrange = fAbsHNDC \times fCh; /// \f]; ///; /// ### Conversion from px to x; ///; /// \f[; /// \Rightarrow x = \frac{xrange(px-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; /// \f]; /// \f[; /// fPixeltoX = \frac{xrange}{pxrange}; /// \f]; ///; /// ### Conversion from py to y; ///; /// \f[; /// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f];,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2182,Testability,Log,Log,2182,es fCh; /// \f]; /// \f[; /// pyrange = fAbsHNDC \times fCh; /// \f]; ///; /// ### Conversion from px to x; ///; /// \f[; /// \Rightarrow x = \frac{xrange(px-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; /// \f]; /// \f[; /// fPixeltoX = \frac{xrange}{pxrange}; /// \f]; ///; /// ### Conversion from py to y; ///; /// \f[; /// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2213,Testability,Log,Log,2213,yrange = fAbsHNDC \times fCh; /// \f]; ///; /// ### Conversion from px to x; ///; /// \f[; /// \Rightarrow x = \frac{xrange(px-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; /// \f]; /// \f[; /// fPixeltoX = \frac{xrange}{pxrange}; /// \f]; ///; /// ### Conversion from py to y; ///; /// \f[; /// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Con,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2278,Testability,Log,Log,2278,om px to x; ///; /// \f[; /// \Rightarrow x = \frac{xrange(px-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; /// \f]; /// \f[; /// fPixeltoX = \frac{xrange}{pxrange}; /// \f]; ///; /// ### Conversion from py to y; ///; /// \f[; /// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2338,Testability,Log,Log,2338,x-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; /// \f]; /// \f[; /// fPixeltoX = \frac{xrange}{pxrange}; /// \f]; ///; /// ### Conversion from py to y; ///; /// \f[; /// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/a,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2638,Testability,Log,Log,2638,{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f],MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2647,Testability,Log,Log,2647,y-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2658,Testability,Log,Log,2658,yrange}+ ymin = fPixeltoYk + fPixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[ \Rightarro,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2670,Testability,Log,Log,2670,n = fPixeltoYk + fPixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[ \Rightarrow fYtoPixelk,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2689,Testability,Log,Log,2689,ixeltoY \times py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[ \Rightarrow fYtoPixelk = pylow - Log(ymin,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2702,Testability,Log,Log,2702,s py; /// \f]; ///; /// \f[; /// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \f]; /,MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2782,Testability,Log,Log,2782,"// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \f]; /// \f[ fYtoPixel = 1/beta \f]",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2818,Testability,Log,Log,2818,"// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \f]; /// \f[ fYtoPixel = 1/beta \f]",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3327,Testability,Log,Log,3327,"// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \f]; /// \f[ fYtoPixel = 1/beta \f]",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3366,Testability,Log,Log,3366,"// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \f]; /// \f[ fYtoPixel = 1/beta \f]",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3383,Testability,Log,Log,3383,"// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \f]; /// \f[ fYtoPixel = 1/beta \f]",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3433,Testability,Log,Log,3433,"// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \f]; /// \f[ fYtoPixel = 1/beta \f]",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3485,Testability,Log,Log,3485,"// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \f]; /// \f[ fYtoPixel = 1/beta \f]",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3575,Testability,Log,Log,3575,"// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \f]; /// \f[ fYtoPixel = 1/beta \f]",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3630,Testability,Log,Log,3630,"// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \f]; /// \f[ fYtoPixel = 1/beta \f]",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3683,Testability,Log,Log,3683,"// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \f]; /// \f[ fYtoPixel = 1/beta \f]",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:134,Availability,Error,Error,134,"//protection in case of wrong pad parameters.; //without this protection, the OpenPixmap or ResizePixmap crashes with; //the message ""Error in <RootX11ErrorHandler>: BadValue (integer parameter out of range for operation)""; //resulting in a frozen xterm",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:125,Integrability,message,message,125,"//protection in case of wrong pad parameters.; //without this protection, the OpenPixmap or ResizePixmap crashes with; //the message ""Error in <RootX11ErrorHandler>: BadValue (integer parameter out of range for operation)""; //resulting in a frozen xterm",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:629,Availability,avail,available,629,"////////////////////////////////////////////////////////////////////////////////; /// Save the pad content in a file.; ///; /// The file's format used to save the pad is determined by the `filename` extension:; ///; /// - if `filename` is empty, the file produced is `padname.ps`; /// - if `filename` starts with a dot, the padname is added in front; /// - if `filename` ends with `.ps`, a Postscript file is produced; /// - if `filename` ends with `.eps`, an Encapsulated Postscript file is produced; /// - if `filename` ends with `.pdf`, a PDF file is produced NOTE: TMathText will be converted to TLatex; q.e.d., symbols only available in TMathText will not render properly.; /// - if `filename` ends with `.svg`, a SVG file is produced; /// - if `filename` ends with `.tex`, a TeX file is produced; /// - if `filename` ends with `.gif`, a GIF file is produced; /// - if `filename` ends with `.gif+NN`, an animated GIF file is produced See comments in TASImage::WriteImage for meaning of NN and other .gif sufix variants; /// - if `filename` ends with `.xpm`, a XPM file is produced; /// - if `filename` ends with `.png`, a PNG file is produced; /// - if `filename` ends with `.bmp`, a BMP file is produced; /// - if `filename` ends with `.jpg` or `.jpeg` a JPEG file is produced NOTE: JPEG's lossy compression will make all sharp edges fuzzy.; /// - if `filename` ends with `.tiff`, a TIFF file is produced; /// - if `filename` ends with `.C`, `.cxx`,`.cpp` or `.cc`, a C++ macro file is produced; /// - if `filename` ends with `.root`, a Root file is produced; /// - if `filename` ends with `.xml`, a XML file is produced; /// - if `filename` ends with `.json`, a JSON file is produced; ///; /// \remarks; /// - The parameter `option` is not used.; /// - This method calls [TPad::Print(const char *filename, Option_t *option)](\ref TPadPrint); /// the value of `option` is determined by the `filename` extension.; /// - Postscript and PDF formats allow to have [several pictures in one file](\ref",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:94,Testability,Log,Log,94,"////////////////////////////////////////////////////////////////////////////////; /// Set Lin/Log scale for X; /// - value = 0 X scale will be linear; /// - value = 1 X scale will be logarithmic (base 10); /// - value > 1 reserved for possible support of base e or other",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:183,Testability,log,logarithmic,183,"////////////////////////////////////////////////////////////////////////////////; /// Set Lin/Log scale for X; /// - value = 0 X scale will be linear; /// - value = 1 X scale will be logarithmic (base 10); /// - value > 1 reserved for possible support of base e or other",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:94,Testability,Log,Log,94,"////////////////////////////////////////////////////////////////////////////////; /// Set Lin/Log scale for Y; /// - value = 0 Y scale will be linear; /// - value = 1 Y scale will be logarithmic (base 10); /// - value > 1 reserved for possible support of base e or other",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:183,Testability,log,logarithmic,183,"////////////////////////////////////////////////////////////////////////////////; /// Set Lin/Log scale for Y; /// - value = 0 Y scale will be linear; /// - value = 1 Y scale will be logarithmic (base 10); /// - value > 1 reserved for possible support of base e or other",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:94,Testability,Log,Log,94,"////////////////////////////////////////////////////////////////////////////////; /// Set Lin/Log scale for Z",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:93,Usability,guid,guide,93,"// When the object is moved with arrow or when the ShowGuideLines flag; // is off we do show guide lines.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:22,Usability,Guid,Guidelines,22,"//delete all existing Guidelines and create new invisible pad",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:214,Modifiability,plugin,plugin,214,"////////////////////////////////////////////////////////////////////////////////; /// Create/obtain handle to 3D viewer. Valid types are:; /// - 'pad' - pad drawing via TViewer3DPad; /// any others registered with plugin manager supporting TVirtualViewer3D; /// If an invalid/null type is requested then the current viewer is returned; /// (if any), otherwise a default 'pad' type is returned",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:62,Integrability,interface,interface,62,"// External viewers need to be created via plugin manager via interface...",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:43,Modifiability,plugin,plugin,43,"// External viewers need to be created via plugin manager via interface...",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:86,Deployability,Release,Release,86,"////////////////////////////////////////////////////////////////////////////////; /// Release current (external) viewer",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:83,Availability,down,down,83,"// We would like to ensure the pad is repainted; // when external viewer is closed down. However; // a modify/paint call here will repaint the pad; // before the external viewer window actually closes.; // So the pad would have to be redraw twice over.; // Currently we just have to live with the pad staying blank; // any click in pad will refresh.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:141,Deployability,Update,Update,141,"////////////////////////////////////////////////////////////////////////////////; /// Mark pad modified; /// Will be repainted when TCanvas::Update() will be called next time",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx:157,Modifiability,inherit,inherit,157,"/*; Line/fill/etc. attributes can be set inside TPad, but not only where:; many of them are set by base sub-objects of 2d primitives; (2d primitives usually inherit TAttLine or TAttFill etc.). And these sub-objects; call gVirtualX->SetLineWidth ... etc. So, if I save some attributes in my painter,; it will be mess - at any moment I do not know, where to take line attribute - from; gVirtualX or from my own member. So! All attributed, _ALL_ go to/from gVirtualX.; */; ////////////////////////////////////////////////////////////////////////////////; /// Delegate to gVirtualX.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPadPainter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear the current gVirtualX window.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPadPainter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx:94,Usability,simpl,simple,94,"////////////////////////////////////////////////////////////////////////////////; /// Paint a simple line.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPadPainter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx:94,Usability,simpl,simple,94,"////////////////////////////////////////////////////////////////////////////////; /// Paint a simple line in normalized coordinates.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPadPainter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx:94,Usability,simpl,simple,94,"////////////////////////////////////////////////////////////////////////////////; /// Paint a simple box.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPadPainter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx:22,Deployability,update,updated,22,"//This point is never updated.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPadPainter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx:102,Usability,simpl,simple,102,"////////////////////////////////////////////////////////////////////////////////; /// This is a quite simple algorithm, using the fact, that after conversion many; /// subsequent vertices can have the same 'x' or 'y' coordinate and this part of; /// a polygon will look like a line on the screen.",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPadPainter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPaveClass.cxx:229,Modifiability,Inherit,Inheritance,229,"////////////////////////////////////////////////////////////////////////////////; /// Set link options in the ClassTree object.; ///; /// - ""C"" show References from code; /// - ""H"" show ""Has a"" relations; /// - ""M"" show Multiple Inheritance; /// - ""R"" show References from data members",MatchSource.CODE_COMMENT,graf2d/gpad/src/TPaveClass.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPaveClass.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:1291,Availability,Avail,Available,1291,"the calculation, if applicable. The other constructor uses a; fitted histogram to calculate the fit residual and plot it with the histogram; and the fit function. ## Ratios and differences; The simplest case is passing two histograms without specifying any options. This defaults to using; `TGraphAsymmErrors::Divide`. The `option` variable is passed through, as are the parameters; `c1` and `c2`, that you can set via `TRatioPlot::SetC1` and `TRatioPlot::SetC1`. If you set the; `option` to `divsym` the method `TH1::Divide` will be used instead, also receiving all the parameters. Using the `option` `diff` or `diffsig`, both histograms will be subtracted, and in the case of diffsig,; the difference will be divided by the uncertainty. `c1` and `c2` will only be used to; scale the histograms using `TH1::Scale` prior to subtraction. Available options are for `option`:; | Option | Description |; | ---------- | ------------------------------------------------------------ |; | divsym | uses the histogram `TH1::Divide` method, yields symmetric errors |; | diff | subtracts the histograms |; | diffsig | subtracts the histograms and divides by the uncertainty |. Begin_Macro(source); ../../../tutorials/hist/ratioplot1.C; End_Macro. ## Fit residuals; A second constructor only accepts a single histogram, but expects it to have a fitted; function. The function is used to calculate the residual between the fit and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if ",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:1502,Availability,error,errors,1502,"the calculation, if applicable. The other constructor uses a; fitted histogram to calculate the fit residual and plot it with the histogram; and the fit function. ## Ratios and differences; The simplest case is passing two histograms without specifying any options. This defaults to using; `TGraphAsymmErrors::Divide`. The `option` variable is passed through, as are the parameters; `c1` and `c2`, that you can set via `TRatioPlot::SetC1` and `TRatioPlot::SetC1`. If you set the; `option` to `divsym` the method `TH1::Divide` will be used instead, also receiving all the parameters. Using the `option` `diff` or `diffsig`, both histograms will be subtracted, and in the case of diffsig,; the difference will be divided by the uncertainty. `c1` and `c2` will only be used to; scale the histograms using `TH1::Scale` prior to subtraction. Available options are for `option`:; | Option | Description |; | ---------- | ------------------------------------------------------------ |; | divsym | uses the histogram `TH1::Divide` method, yields symmetric errors |; | diff | subtracts the histograms |; | diffsig | subtracts the histograms and divides by the uncertainty |. Begin_Macro(source); ../../../tutorials/hist/ratioplot1.C; End_Macro. ## Fit residuals; A second constructor only accepts a single histogram, but expects it to have a fitted; function. The function is used to calculate the residual between the fit and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if ",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:2131,Availability,error,error,2131,"iffsig,; the difference will be divided by the uncertainty. `c1` and `c2` will only be used to; scale the histograms using `TH1::Scale` prior to subtraction. Available options are for `option`:; | Option | Description |; | ---------- | ------------------------------------------------------------ |; | divsym | uses the histogram `TH1::Divide` method, yields symmetric errors |; | diff | subtracts the histograms |; | diffsig | subtracts the histograms and divides by the uncertainty |. Begin_Macro(source); ../../../tutorials/hist/ratioplot1.C; End_Macro. ## Fit residuals; A second constructor only accepts a single histogram, but expects it to have a fitted; function. The function is used to calculate the residual between the fit and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if the function is below or above the bin content. The third option `errfunc` uses the square root of; the function value as the error. Begin_Macro(source); ../../../tutorials/hist/ratioplot2.C; End_Macro. ## Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing; options to the `option` argument. | Option | Description |; | ---------- | ------------------------------------------------------------ |; | errasym | Uses calculated asymmetric errors from `TH1::GetBinErrorUp`/`TH1::GetBinErrorLow`. Note that you need to set `TH1::SetBinErrorOption` first |; | errfunc | Uses \f$ \sqrt{f(x)}",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:2317,Availability,error,errors,2317,"e options are for `option`:; | Option | Description |; | ---------- | ------------------------------------------------------------ |; | divsym | uses the histogram `TH1::Divide` method, yields symmetric errors |; | diff | subtracts the histograms |; | diffsig | subtracts the histograms and divides by the uncertainty |. Begin_Macro(source); ../../../tutorials/hist/ratioplot1.C; End_Macro. ## Fit residuals; A second constructor only accepts a single histogram, but expects it to have a fitted; function. The function is used to calculate the residual between the fit and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if the function is below or above the bin content. The third option `errfunc` uses the square root of; the function value as the error. Begin_Macro(source); ../../../tutorials/hist/ratioplot2.C; End_Macro. ## Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing; options to the `option` argument. | Option | Description |; | ---------- | ------------------------------------------------------------ |; | errasym | Uses calculated asymmetric errors from `TH1::GetBinErrorUp`/`TH1::GetBinErrorLow`. Note that you need to set `TH1::SetBinErrorOption` first |; | errfunc | Uses \f$ \sqrt{f(x)} \f$ as the error |. The asymmetric error case uses the upper or lower error depending on the relative size; of the bin contents, or the bin content and the function",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:2350,Availability,error,error,2350," ------------------------------------------------------------ |; | divsym | uses the histogram `TH1::Divide` method, yields symmetric errors |; | diff | subtracts the histograms |; | diffsig | subtracts the histograms and divides by the uncertainty |. Begin_Macro(source); ../../../tutorials/hist/ratioplot1.C; End_Macro. ## Fit residuals; A second constructor only accepts a single histogram, but expects it to have a fitted; function. The function is used to calculate the residual between the fit and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if the function is below or above the bin content. The third option `errfunc` uses the square root of; the function value as the error. Begin_Macro(source); ../../../tutorials/hist/ratioplot2.C; End_Macro. ## Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing; options to the `option` argument. | Option | Description |; | ---------- | ------------------------------------------------------------ |; | errasym | Uses calculated asymmetric errors from `TH1::GetBinErrorUp`/`TH1::GetBinErrorLow`. Note that you need to set `TH1::SetBinErrorOption` first |; | errfunc | Uses \f$ \sqrt{f(x)} \f$ as the error |. The asymmetric error case uses the upper or lower error depending on the relative size; of the bin contents, or the bin content and the function value. ## Access to internal parts; You can access the internal obje",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:2418,Availability,error,error,2418,"he histogram `TH1::Divide` method, yields symmetric errors |; | diff | subtracts the histograms |; | diffsig | subtracts the histograms and divides by the uncertainty |. Begin_Macro(source); ../../../tutorials/hist/ratioplot1.C; End_Macro. ## Fit residuals; A second constructor only accepts a single histogram, but expects it to have a fitted; function. The function is used to calculate the residual between the fit and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if the function is below or above the bin content. The third option `errfunc` uses the square root of; the function value as the error. Begin_Macro(source); ../../../tutorials/hist/ratioplot2.C; End_Macro. ## Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing; options to the `option` argument. | Option | Description |; | ---------- | ------------------------------------------------------------ |; | errasym | Uses calculated asymmetric errors from `TH1::GetBinErrorUp`/`TH1::GetBinErrorLow`. Note that you need to set `TH1::SetBinErrorOption` first |; | errfunc | Uses \f$ \sqrt{f(x)} \f$ as the error |. The asymmetric error case uses the upper or lower error depending on the relative size; of the bin contents, or the bin content and the function value. ## Access to internal parts; You can access the internal objects that are used to construct the plot via a series of; methods. `TRatioPlot::GetU",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:2581,Availability,error,error,2581,"s |; | diffsig | subtracts the histograms and divides by the uncertainty |. Begin_Macro(source); ../../../tutorials/hist/ratioplot1.C; End_Macro. ## Fit residuals; A second constructor only accepts a single histogram, but expects it to have a fitted; function. The function is used to calculate the residual between the fit and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if the function is below or above the bin content. The third option `errfunc` uses the square root of; the function value as the error. Begin_Macro(source); ../../../tutorials/hist/ratioplot2.C; End_Macro. ## Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing; options to the `option` argument. | Option | Description |; | ---------- | ------------------------------------------------------------ |; | errasym | Uses calculated asymmetric errors from `TH1::GetBinErrorUp`/`TH1::GetBinErrorLow`. Note that you need to set `TH1::SetBinErrorOption` first |; | errfunc | Uses \f$ \sqrt{f(x)} \f$ as the error |. The asymmetric error case uses the upper or lower error depending on the relative size; of the bin contents, or the bin content and the function value. ## Access to internal parts; You can access the internal objects that are used to construct the plot via a series of; methods. `TRatioPlot::GetUpperPad` and `TRatioPlot::GetLowerPad` can be used to draw additional; elements on top of the ",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:2661,Availability,Error,Error,2661,"e histogram, but expects it to have a fitted; function. The function is used to calculate the residual between the fit and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if the function is below or above the bin content. The third option `errfunc` uses the square root of; the function value as the error. Begin_Macro(source); ../../../tutorials/hist/ratioplot2.C; End_Macro. ## Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing; options to the `option` argument. | Option | Description |; | ---------- | ------------------------------------------------------------ |; | errasym | Uses calculated asymmetric errors from `TH1::GetBinErrorUp`/`TH1::GetBinErrorLow`. Note that you need to set `TH1::SetBinErrorOption` first |; | errfunc | Uses \f$ \sqrt{f(x)} \f$ as the error |. The asymmetric error case uses the upper or lower error depending on the relative size; of the bin contents, or the bin content and the function value. ## Access to internal parts; You can access the internal objects that are used to construct the plot via a series of; methods. `TRatioPlot::GetUpperPad` and `TRatioPlot::GetLowerPad` can be used to draw additional; elements on top of the existing ones.; `TRatioPlot::GetLowerRefGraph` returns a reference to the lower pad's graph that; is responsible for the range, which enables you to modify the range. \image html gpad_ratioplot.png; */; /",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:2986,Availability,error,errors,2986,"it and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if the function is below or above the bin content. The third option `errfunc` uses the square root of; the function value as the error. Begin_Macro(source); ../../../tutorials/hist/ratioplot2.C; End_Macro. ## Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing; options to the `option` argument. | Option | Description |; | ---------- | ------------------------------------------------------------ |; | errasym | Uses calculated asymmetric errors from `TH1::GetBinErrorUp`/`TH1::GetBinErrorLow`. Note that you need to set `TH1::SetBinErrorOption` first |; | errfunc | Uses \f$ \sqrt{f(x)} \f$ as the error |. The asymmetric error case uses the upper or lower error depending on the relative size; of the bin contents, or the bin content and the function value. ## Access to internal parts; You can access the internal objects that are used to construct the plot via a series of; methods. `TRatioPlot::GetUpperPad` and `TRatioPlot::GetLowerPad` can be used to draw additional; elements on top of the existing ones.; `TRatioPlot::GetLowerRefGraph` returns a reference to the lower pad's graph that; is responsible for the range, which enables you to modify the range. \image html gpad_ratioplot.png; */; ////////////////////////////////////////////////////////////////////////////////; /// TRatioPlot default constructor",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:3146,Availability,error,error,3146,"it and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if the function is below or above the bin content. The third option `errfunc` uses the square root of; the function value as the error. Begin_Macro(source); ../../../tutorials/hist/ratioplot2.C; End_Macro. ## Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing; options to the `option` argument. | Option | Description |; | ---------- | ------------------------------------------------------------ |; | errasym | Uses calculated asymmetric errors from `TH1::GetBinErrorUp`/`TH1::GetBinErrorLow`. Note that you need to set `TH1::SetBinErrorOption` first |; | errfunc | Uses \f$ \sqrt{f(x)} \f$ as the error |. The asymmetric error case uses the upper or lower error depending on the relative size; of the bin contents, or the bin content and the function value. ## Access to internal parts; You can access the internal objects that are used to construct the plot via a series of; methods. `TRatioPlot::GetUpperPad` and `TRatioPlot::GetLowerPad` can be used to draw additional; elements on top of the existing ones.; `TRatioPlot::GetLowerRefGraph` returns a reference to the lower pad's graph that; is responsible for the range, which enables you to modify the range. \image html gpad_ratioplot.png; */; ////////////////////////////////////////////////////////////////////////////////; /// TRatioPlot default constructor",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:3170,Availability,error,error,3170,"it and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if the function is below or above the bin content. The third option `errfunc` uses the square root of; the function value as the error. Begin_Macro(source); ../../../tutorials/hist/ratioplot2.C; End_Macro. ## Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing; options to the `option` argument. | Option | Description |; | ---------- | ------------------------------------------------------------ |; | errasym | Uses calculated asymmetric errors from `TH1::GetBinErrorUp`/`TH1::GetBinErrorLow`. Note that you need to set `TH1::SetBinErrorOption` first |; | errfunc | Uses \f$ \sqrt{f(x)} \f$ as the error |. The asymmetric error case uses the upper or lower error depending on the relative size; of the bin contents, or the bin content and the function value. ## Access to internal parts; You can access the internal objects that are used to construct the plot via a series of; methods. `TRatioPlot::GetUpperPad` and `TRatioPlot::GetLowerPad` can be used to draw additional; elements on top of the existing ones.; `TRatioPlot::GetLowerRefGraph` returns a reference to the lower pad's graph that; is responsible for the range, which enables you to modify the range. \image html gpad_ratioplot.png; */; ////////////////////////////////////////////////////////////////////////////////; /// TRatioPlot default constructor",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:3205,Availability,error,error,3205,"it and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if the function is below or above the bin content. The third option `errfunc` uses the square root of; the function value as the error. Begin_Macro(source); ../../../tutorials/hist/ratioplot2.C; End_Macro. ## Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing; options to the `option` argument. | Option | Description |; | ---------- | ------------------------------------------------------------ |; | errasym | Uses calculated asymmetric errors from `TH1::GetBinErrorUp`/`TH1::GetBinErrorLow`. Note that you need to set `TH1::SetBinErrorOption` first |; | errfunc | Uses \f$ \sqrt{f(x)} \f$ as the error |. The asymmetric error case uses the upper or lower error depending on the relative size; of the bin contents, or the bin content and the function value. ## Access to internal parts; You can access the internal objects that are used to construct the plot via a series of; methods. `TRatioPlot::GetUpperPad` and `TRatioPlot::GetLowerPad` can be used to draw additional; elements on top of the existing ones.; `TRatioPlot::GetLowerRefGraph` returns a reference to the lower pad's graph that; is responsible for the range, which enables you to modify the range. \image html gpad_ratioplot.png; */; ////////////////////////////////////////////////////////////////////////////////; /// TRatioPlot default constructor",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:2439,Integrability,depend,depending,2439,"he histogram `TH1::Divide` method, yields symmetric errors |; | diff | subtracts the histograms |; | diffsig | subtracts the histograms and divides by the uncertainty |. Begin_Macro(source); ../../../tutorials/hist/ratioplot1.C; End_Macro. ## Fit residuals; A second constructor only accepts a single histogram, but expects it to have a fitted; function. The function is used to calculate the residual between the fit and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if the function is below or above the bin content. The third option `errfunc` uses the square root of; the function value as the error. Begin_Macro(source); ../../../tutorials/hist/ratioplot2.C; End_Macro. ## Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing; options to the `option` argument. | Option | Description |; | ---------- | ------------------------------------------------------------ |; | errasym | Uses calculated asymmetric errors from `TH1::GetBinErrorUp`/`TH1::GetBinErrorLow`. Note that you need to set `TH1::SetBinErrorOption` first |; | errfunc | Uses \f$ \sqrt{f(x)} \f$ as the error |. The asymmetric error case uses the upper or lower error depending on the relative size; of the bin contents, or the bin content and the function value. ## Access to internal parts; You can access the internal objects that are used to construct the plot via a series of; methods. `TRatioPlot::GetU",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:3211,Integrability,depend,depending,3211,"it and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if the function is below or above the bin content. The third option `errfunc` uses the square root of; the function value as the error. Begin_Macro(source); ../../../tutorials/hist/ratioplot2.C; End_Macro. ## Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing; options to the `option` argument. | Option | Description |; | ---------- | ------------------------------------------------------------ |; | errasym | Uses calculated asymmetric errors from `TH1::GetBinErrorUp`/`TH1::GetBinErrorLow`. Note that you need to set `TH1::SetBinErrorOption` first |; | errfunc | Uses \f$ \sqrt{f(x)} \f$ as the error |. The asymmetric error case uses the upper or lower error depending on the relative size; of the bin contents, or the bin content and the function value. ## Access to internal parts; You can access the internal objects that are used to construct the plot via a series of; methods. `TRatioPlot::GetUpperPad` and `TRatioPlot::GetLowerPad` can be used to draw additional; elements on top of the existing ones.; `TRatioPlot::GetLowerRefGraph` returns a reference to the lower pad's graph that; is responsible for the range, which enables you to modify the range. \image html gpad_ratioplot.png; */; ////////////////////////////////////////////////////////////////////////////////; /// TRatioPlot default constructor",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:786,Modifiability,variab,variable,786,"/** \class TRatioPlot; \ingroup gpad; Class for displaying ratios, differences and fit residuals. TRatioPlot has two constructors, one which accepts two histograms, and is responsible; for setting up the calculation of ratios and differences. This calculation is in part; delegated to `TEfficiency`. A single option can be given as a parameter, that is; used to determine which procedure is chosen. The remaining option string is then; passed through to the calculation, if applicable. The other constructor uses a; fitted histogram to calculate the fit residual and plot it with the histogram; and the fit function. ## Ratios and differences; The simplest case is passing two histograms without specifying any options. This defaults to using; `TGraphAsymmErrors::Divide`. The `option` variable is passed through, as are the parameters; `c1` and `c2`, that you can set via `TRatioPlot::SetC1` and `TRatioPlot::SetC1`. If you set the; `option` to `divsym` the method `TH1::Divide` will be used instead, also receiving all the parameters. Using the `option` `diff` or `diffsig`, both histograms will be subtracted, and in the case of diffsig,; the difference will be divided by the uncertainty. `c1` and `c2` will only be used to; scale the histograms using `TH1::Scale` prior to subtraction. Available options are for `option`:; | Option | Description |; | ---------- | ------------------------------------------------------------ |; | divsym | uses the histogram `TH1::Divide` method, yields symmetric errors |; | diff | subtracts the histograms |; | diffsig | subtracts the histograms and divides by the uncertainty |. Begin_Macro(source); ../../../tutorials/hist/ratioplot1.C; End_Macro. ## Fit residuals; A second constructor only accepts a single histogram, but expects it to have a fitted; function. The function is used to calculate the residual between the fit and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference b",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:3310,Security,Access,Access,3310,"it and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if the function is below or above the bin content. The third option `errfunc` uses the square root of; the function value as the error. Begin_Macro(source); ../../../tutorials/hist/ratioplot2.C; End_Macro. ## Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing; options to the `option` argument. | Option | Description |; | ---------- | ------------------------------------------------------------ |; | errasym | Uses calculated asymmetric errors from `TH1::GetBinErrorUp`/`TH1::GetBinErrorLow`. Note that you need to set `TH1::SetBinErrorOption` first |; | errfunc | Uses \f$ \sqrt{f(x)} \f$ as the error |. The asymmetric error case uses the upper or lower error depending on the relative size; of the bin contents, or the bin content and the function value. ## Access to internal parts; You can access the internal objects that are used to construct the plot via a series of; methods. `TRatioPlot::GetUpperPad` and `TRatioPlot::GetLowerPad` can be used to draw additional; elements on top of the existing ones.; `TRatioPlot::GetLowerRefGraph` returns a reference to the lower pad's graph that; is responsible for the range, which enables you to modify the range. \image html gpad_ratioplot.png; */; ////////////////////////////////////////////////////////////////////////////////; /// TRatioPlot default constructor",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:3344,Security,access,access,3344,"it and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if the function is below or above the bin content. The third option `errfunc` uses the square root of; the function value as the error. Begin_Macro(source); ../../../tutorials/hist/ratioplot2.C; End_Macro. ## Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing; options to the `option` argument. | Option | Description |; | ---------- | ------------------------------------------------------------ |; | errasym | Uses calculated asymmetric errors from `TH1::GetBinErrorUp`/`TH1::GetBinErrorLow`. Note that you need to set `TH1::SetBinErrorOption` first |; | errfunc | Uses \f$ \sqrt{f(x)} \f$ as the error |. The asymmetric error case uses the upper or lower error depending on the relative size; of the bin contents, or the bin content and the function value. ## Access to internal parts; You can access the internal objects that are used to construct the plot via a series of; methods. `TRatioPlot::GetUpperPad` and `TRatioPlot::GetLowerPad` can be used to draw additional; elements on top of the existing ones.; `TRatioPlot::GetLowerRefGraph` returns a reference to the lower pad's graph that; is responsible for the range, which enables you to modify the range. \image html gpad_ratioplot.png; */; ////////////////////////////////////////////////////////////////////////////////; /// TRatioPlot default constructor",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:648,Usability,simpl,simplest,648,"/** \class TRatioPlot; \ingroup gpad; Class for displaying ratios, differences and fit residuals. TRatioPlot has two constructors, one which accepts two histograms, and is responsible; for setting up the calculation of ratios and differences. This calculation is in part; delegated to `TEfficiency`. A single option can be given as a parameter, that is; used to determine which procedure is chosen. The remaining option string is then; passed through to the calculation, if applicable. The other constructor uses a; fitted histogram to calculate the fit residual and plot it with the histogram; and the fit function. ## Ratios and differences; The simplest case is passing two histograms without specifying any options. This defaults to using; `TGraphAsymmErrors::Divide`. The `option` variable is passed through, as are the parameters; `c1` and `c2`, that you can set via `TRatioPlot::SetC1` and `TRatioPlot::SetC1`. If you set the; `option` to `divsym` the method `TH1::Divide` will be used instead, also receiving all the parameters. Using the `option` `diff` or `diffsig`, both histograms will be subtracted, and in the case of diffsig,; the difference will be divided by the uncertainty. `c1` and `c2` will only be used to; scale the histograms using `TH1::Scale` prior to subtraction. Available options are for `option`:; | Option | Description |; | ---------- | ------------------------------------------------------------ |; | divsym | uses the histogram `TH1::Divide` method, yields symmetric errors |; | diff | subtracts the histograms |; | diffsig | subtracts the histograms and divides by the uncertainty |. Begin_Macro(source); ../../../tutorials/hist/ratioplot1.C; End_Macro. ## Fit residuals; A second constructor only accepts a single histogram, but expects it to have a fitted; function. The function is used to calculate the residual between the fit and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference b",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:126,Testability,log,logic,126,"////////////////////////////////////////////////////////////////////////////////; /// Internal method that shares constructor logic",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:19,Availability,error,error,19,"// determine which error style",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:215,Availability,error,error,215,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for two histograms; ///; /// \param h1 First histogram; /// \param h2 Second histogram; /// \param option Steers the error calculation, as well as ratio / difference",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:191,Availability,error,error,191,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for one histogram and a fit.; ///; /// \param h1 The histogram; /// \param option Steers the error calculation; /// \param fitres Explicit fit result to be used for calculation. Uses last fit if left empty",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:19,Availability,error,error,19,"// determine which error style",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:66,Deployability,update,update,66,"// draw ratio plot as very first object; // when painting one can update all attributes before other objects are painted",MatchSource.CODE_COMMENT,graf2d/gpad/src/TRatioPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx
