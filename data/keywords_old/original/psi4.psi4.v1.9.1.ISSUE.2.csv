id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/psi4/psi4/issues/775:855,Deployability,install,installed,855,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:925,Deployability,install,installed,925,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:1034,Deployability,configurat,configuration,1034,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:1166,Deployability,install,installation,1166,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:1378,Deployability,install,installed,1378,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:28,Modifiability,plugin,plugin,28,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:99,Modifiability,plugin,plugin-name,99,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:122,Modifiability,plugin,plugin-template,122,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:1034,Modifiability,config,configuration,1034,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:1142,Modifiability,config,config,1142,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:397,Safety,Detect,Detecting,397,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:433,Safety,Detect,Detecting,433,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:476,Safety,Detect,Detecting,476,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:511,Safety,Detect,Detecting,511,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/pull/776:607,Deployability,Release,Release,607,"## Description; Adds convergence threshold option for geometry optimization of supermolecular complexes which is slight relaxation of `g_convergence gau_tight` criteria which allows for:; - tight convergence of energy and forces, and; - relaxed convergence of `max_disp` and `rms_disp` displacement criteria. . These criteria allow for successful optimization on flat potential surfaces, especially those associated with interfragment (supermolecular) geometry optimizations. ## Todos; Adds `interfrag_gau_tight` value to `g_convergence` OPTKING convergence threshold control keyword. . * **User-Facing for Release Notes**; - Basic users can use keyword to achieve quality geometry optimizations of supermolecular complexes, without manual manipulation of individual `g_convergence` components. ## Questions; - [x] `interfrag_gau_tight` vs. `gau_tight_interfrag`? One one hand, it's a modification of `gau_tight`, but on the other hand, it has no counterpart within the Gaussian package. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/776
https://github.com/psi4/psi4/pull/776:211,Energy Efficiency,energy,energy,211,"## Description; Adds convergence threshold option for geometry optimization of supermolecular complexes which is slight relaxation of `g_convergence gau_tight` criteria which allows for:; - tight convergence of energy and forces, and; - relaxed convergence of `max_disp` and `rms_disp` displacement criteria. . These criteria allow for successful optimization on flat potential surfaces, especially those associated with interfragment (supermolecular) geometry optimizations. ## Todos; Adds `interfrag_gau_tight` value to `g_convergence` OPTKING convergence threshold control keyword. . * **User-Facing for Release Notes**; - Basic users can use keyword to achieve quality geometry optimizations of supermolecular complexes, without manual manipulation of individual `g_convergence` components. ## Questions; - [x] `interfrag_gau_tight` vs. `gau_tight_interfrag`? One one hand, it's a modification of `gau_tight`, but on the other hand, it has no counterpart within the Gaussian package. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/776
https://github.com/psi4/psi4/pull/776:63,Performance,optimiz,optimization,63,"## Description; Adds convergence threshold option for geometry optimization of supermolecular complexes which is slight relaxation of `g_convergence gau_tight` criteria which allows for:; - tight convergence of energy and forces, and; - relaxed convergence of `max_disp` and `rms_disp` displacement criteria. . These criteria allow for successful optimization on flat potential surfaces, especially those associated with interfragment (supermolecular) geometry optimizations. ## Todos; Adds `interfrag_gau_tight` value to `g_convergence` OPTKING convergence threshold control keyword. . * **User-Facing for Release Notes**; - Basic users can use keyword to achieve quality geometry optimizations of supermolecular complexes, without manual manipulation of individual `g_convergence` components. ## Questions; - [x] `interfrag_gau_tight` vs. `gau_tight_interfrag`? One one hand, it's a modification of `gau_tight`, but on the other hand, it has no counterpart within the Gaussian package. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/776
https://github.com/psi4/psi4/pull/776:347,Performance,optimiz,optimization,347,"## Description; Adds convergence threshold option for geometry optimization of supermolecular complexes which is slight relaxation of `g_convergence gau_tight` criteria which allows for:; - tight convergence of energy and forces, and; - relaxed convergence of `max_disp` and `rms_disp` displacement criteria. . These criteria allow for successful optimization on flat potential surfaces, especially those associated with interfragment (supermolecular) geometry optimizations. ## Todos; Adds `interfrag_gau_tight` value to `g_convergence` OPTKING convergence threshold control keyword. . * **User-Facing for Release Notes**; - Basic users can use keyword to achieve quality geometry optimizations of supermolecular complexes, without manual manipulation of individual `g_convergence` components. ## Questions; - [x] `interfrag_gau_tight` vs. `gau_tight_interfrag`? One one hand, it's a modification of `gau_tight`, but on the other hand, it has no counterpart within the Gaussian package. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/776
https://github.com/psi4/psi4/pull/776:461,Performance,optimiz,optimizations,461,"## Description; Adds convergence threshold option for geometry optimization of supermolecular complexes which is slight relaxation of `g_convergence gau_tight` criteria which allows for:; - tight convergence of energy and forces, and; - relaxed convergence of `max_disp` and `rms_disp` displacement criteria. . These criteria allow for successful optimization on flat potential surfaces, especially those associated with interfragment (supermolecular) geometry optimizations. ## Todos; Adds `interfrag_gau_tight` value to `g_convergence` OPTKING convergence threshold control keyword. . * **User-Facing for Release Notes**; - Basic users can use keyword to achieve quality geometry optimizations of supermolecular complexes, without manual manipulation of individual `g_convergence` components. ## Questions; - [x] `interfrag_gau_tight` vs. `gau_tight_interfrag`? One one hand, it's a modification of `gau_tight`, but on the other hand, it has no counterpart within the Gaussian package. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/776
https://github.com/psi4/psi4/pull/776:682,Performance,optimiz,optimizations,682,"## Description; Adds convergence threshold option for geometry optimization of supermolecular complexes which is slight relaxation of `g_convergence gau_tight` criteria which allows for:; - tight convergence of energy and forces, and; - relaxed convergence of `max_disp` and `rms_disp` displacement criteria. . These criteria allow for successful optimization on flat potential surfaces, especially those associated with interfragment (supermolecular) geometry optimizations. ## Todos; Adds `interfrag_gau_tight` value to `g_convergence` OPTKING convergence threshold control keyword. . * **User-Facing for Release Notes**; - Basic users can use keyword to achieve quality geometry optimizations of supermolecular complexes, without manual manipulation of individual `g_convergence` components. ## Questions; - [x] `interfrag_gau_tight` vs. `gau_tight_interfrag`? One one hand, it's a modification of `gau_tight`, but on the other hand, it has no counterpart within the Gaussian package. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/776
https://github.com/psi4/psi4/pull/777:147,Deployability,patch,patches,147,"## Description; ~~Address some convergence issues brought up by @bwb314 in psi4/psi4#773 according to solutions advanced by @dgasmith~~ Tidies and patches some MKL and Cfour interface issues. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] tidies doc for `sad_frac_occ` ~~and turns it on by default~~; - [x] temporarily revert some MKL details that were preventing iomp5 from being found and possibly turning off threading (discovered by @andysim and @bennybp); - [x] allow Cfour interface to format ESTATE_SYM properly, convert DROPMO to array type; - [x] allow Cfour interface to properly write out exponents for very tight fns to GENBASE; * **User-Facing for Release Notes**. ## Questions; - ~~4 test cases failing, how to handle (see psi4/psi4#773)~~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/777
https://github.com/psi4/psi4/pull/777:729,Deployability,Release,Release,729,"## Description; ~~Address some convergence issues brought up by @bwb314 in psi4/psi4#773 according to solutions advanced by @dgasmith~~ Tidies and patches some MKL and Cfour interface issues. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] tidies doc for `sad_frac_occ` ~~and turns it on by default~~; - [x] temporarily revert some MKL details that were preventing iomp5 from being found and possibly turning off threading (discovered by @andysim and @bennybp); - [x] allow Cfour interface to format ESTATE_SYM properly, convert DROPMO to array type; - [x] allow Cfour interface to properly write out exponents for very tight fns to GENBASE; * **User-Facing for Release Notes**. ## Questions; - ~~4 test cases failing, how to handle (see psi4/psi4#773)~~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/777
https://github.com/psi4/psi4/pull/777:174,Integrability,interface,interface,174,"## Description; ~~Address some convergence issues brought up by @bwb314 in psi4/psi4#773 according to solutions advanced by @dgasmith~~ Tidies and patches some MKL and Cfour interface issues. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] tidies doc for `sad_frac_occ` ~~and turns it on by default~~; - [x] temporarily revert some MKL details that were preventing iomp5 from being found and possibly turning off threading (discovered by @andysim and @bennybp); - [x] allow Cfour interface to format ESTATE_SYM properly, convert DROPMO to array type; - [x] allow Cfour interface to properly write out exponents for very tight fns to GENBASE; * **User-Facing for Release Notes**. ## Questions; - ~~4 test cases failing, how to handle (see psi4/psi4#773)~~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/777
https://github.com/psi4/psi4/pull/777:547,Integrability,interface,interface,547,"## Description; ~~Address some convergence issues brought up by @bwb314 in psi4/psi4#773 according to solutions advanced by @dgasmith~~ Tidies and patches some MKL and Cfour interface issues. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] tidies doc for `sad_frac_occ` ~~and turns it on by default~~; - [x] temporarily revert some MKL details that were preventing iomp5 from being found and possibly turning off threading (discovered by @andysim and @bennybp); - [x] allow Cfour interface to format ESTATE_SYM properly, convert DROPMO to array type; - [x] allow Cfour interface to properly write out exponents for very tight fns to GENBASE; * **User-Facing for Release Notes**. ## Questions; - ~~4 test cases failing, how to handle (see psi4/psi4#773)~~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/777
https://github.com/psi4/psi4/pull/777:636,Integrability,interface,interface,636,"## Description; ~~Address some convergence issues brought up by @bwb314 in psi4/psi4#773 according to solutions advanced by @dgasmith~~ Tidies and patches some MKL and Cfour interface issues. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] tidies doc for `sad_frac_occ` ~~and turns it on by default~~; - [x] temporarily revert some MKL details that were preventing iomp5 from being found and possibly turning off threading (discovered by @andysim and @bennybp); - [x] allow Cfour interface to format ESTATE_SYM properly, convert DROPMO to array type; - [x] allow Cfour interface to properly write out exponents for very tight fns to GENBASE; * **User-Facing for Release Notes**. ## Questions; - ~~4 test cases failing, how to handle (see psi4/psi4#773)~~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/777
https://github.com/psi4/psi4/pull/777:766,Testability,test,test,766,"## Description; ~~Address some convergence issues brought up by @bwb314 in psi4/psi4#773 according to solutions advanced by @dgasmith~~ Tidies and patches some MKL and Cfour interface issues. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] tidies doc for `sad_frac_occ` ~~and turns it on by default~~; - [x] temporarily revert some MKL details that were preventing iomp5 from being found and possibly turning off threading (discovered by @andysim and @bennybp); - [x] allow Cfour interface to format ESTATE_SYM properly, convert DROPMO to array type; - [x] allow Cfour interface to properly write out exponents for very tight fns to GENBASE; * **User-Facing for Release Notes**. ## Questions; - ~~4 test cases failing, how to handle (see psi4/psi4#773)~~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/777
https://github.com/psi4/psi4/pull/780:386,Deployability,Release,Release,386,"## Description; Replace char** irrep_labels() with std::vector<std::string> irrep_labels(); Convert with .c_str() when needed in print statements.; Remove calls to free(); Removed calls to delete in dcft_scf_UHF.cc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Part of the change to std::string; * **User-Facing for Release Notes**; - [ ] None. ## Status; - [ ] Test jobs cc1, dfmp2-1, scf-occ all passed, and Irrep labels printed were the same as the reference.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/780
https://github.com/psi4/psi4/pull/780:432,Testability,Test,Test,432,"## Description; Replace char** irrep_labels() with std::vector<std::string> irrep_labels(); Convert with .c_str() when needed in print statements.; Remove calls to free(); Removed calls to delete in dcft_scf_UHF.cc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Part of the change to std::string; * **User-Facing for Release Notes**; - [ ] None. ## Status; - [ ] Test jobs cc1, dfmp2-1, scf-occ all passed, and Irrep labels printed were the same as the reference.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/780
https://github.com/psi4/psi4/pull/781:291,Deployability,Release,Release,291,## Description; Provide documentation for a soon-to-follow PR from Lori that will fix the Ca basis for cc-pCV5Z. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add notes on why we are updating the file; * **User-Facing for Release Notes**; - [x] Clarify a couple of points in the user manual regarding custom basis sets (came across this while I was testing the fixed basis). ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/781
https://github.com/psi4/psi4/pull/781:418,Testability,test,testing,418,## Description; Provide documentation for a soon-to-follow PR from Lori that will fix the Ca basis for cc-pCV5Z. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add notes on why we are updating the file; * **User-Facing for Release Notes**; - [x] Clarify a couple of points in the user manual regarding custom basis sets (came across this while I was testing the fixed basis). ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/781
https://github.com/psi4/psi4/issues/782:203,Energy Efficiency,charge,charged,203,"https://github.com/psi4/psi4/pull/760/files#diff-aac3b6c47032ba056103b4f355643ca7R3113 makes a lot of sense and eliminates a pit that's easy to fall into. But need to revisit its impact on properties of charged molecules. Basically, props2 is currently broken, and need to figure out if the recent PR was too aggressive in `no_reorient`ing or if `props2` has been falling into the aforementioned pit all along.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782
https://github.com/psi4/psi4/issues/785:146,Availability,error,error,146,"Dear all, . I am trying to compile the latest version of the PSI4 package on a cluster with OpenSuse; however I end up with the following linking error : . Linking CXX shared library core.so; /usr/bin/ld: BFD (GNU Binutils; openSUSE 12.3) 2.23.1 internal error, aborting at ../../bfd/reloc.c line 444 in bfd_get_reloc_size. /usr/bin/ld: Please report this bug. collect2: error: ld returned 1 exit status; make[5]: *** [src/core.so] Error 1; make[5]: *** Deleting file `src/core.so' ; make[4]: *** [src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ; -----------------------------------------------------------------------------------------------------------------------------------------; Any idea how to get rid of it?. Best,; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/785
https://github.com/psi4/psi4/issues/785:255,Availability,error,error,255,"Dear all, . I am trying to compile the latest version of the PSI4 package on a cluster with OpenSuse; however I end up with the following linking error : . Linking CXX shared library core.so; /usr/bin/ld: BFD (GNU Binutils; openSUSE 12.3) 2.23.1 internal error, aborting at ../../bfd/reloc.c line 444 in bfd_get_reloc_size. /usr/bin/ld: Please report this bug. collect2: error: ld returned 1 exit status; make[5]: *** [src/core.so] Error 1; make[5]: *** Deleting file `src/core.so' ; make[4]: *** [src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ; -----------------------------------------------------------------------------------------------------------------------------------------; Any idea how to get rid of it?. Best,; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/785
https://github.com/psi4/psi4/issues/785:371,Availability,error,error,371,"Dear all, . I am trying to compile the latest version of the PSI4 package on a cluster with OpenSuse; however I end up with the following linking error : . Linking CXX shared library core.so; /usr/bin/ld: BFD (GNU Binutils; openSUSE 12.3) 2.23.1 internal error, aborting at ../../bfd/reloc.c line 444 in bfd_get_reloc_size. /usr/bin/ld: Please report this bug. collect2: error: ld returned 1 exit status; make[5]: *** [src/core.so] Error 1; make[5]: *** Deleting file `src/core.so' ; make[4]: *** [src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ; -----------------------------------------------------------------------------------------------------------------------------------------; Any idea how to get rid of it?. Best,; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/785
https://github.com/psi4/psi4/issues/785:432,Availability,Error,Error,432,"Dear all, . I am trying to compile the latest version of the PSI4 package on a cluster with OpenSuse; however I end up with the following linking error : . Linking CXX shared library core.so; /usr/bin/ld: BFD (GNU Binutils; openSUSE 12.3) 2.23.1 internal error, aborting at ../../bfd/reloc.c line 444 in bfd_get_reloc_size. /usr/bin/ld: Please report this bug. collect2: error: ld returned 1 exit status; make[5]: *** [src/core.so] Error 1; make[5]: *** Deleting file `src/core.so' ; make[4]: *** [src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ; -----------------------------------------------------------------------------------------------------------------------------------------; Any idea how to get rid of it?. Best,; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/785
https://github.com/psi4/psi4/issues/785:527,Availability,Error,Error,527,"Dear all, . I am trying to compile the latest version of the PSI4 package on a cluster with OpenSuse; however I end up with the following linking error : . Linking CXX shared library core.so; /usr/bin/ld: BFD (GNU Binutils; openSUSE 12.3) 2.23.1 internal error, aborting at ../../bfd/reloc.c line 444 in bfd_get_reloc_size. /usr/bin/ld: Please report this bug. collect2: error: ld returned 1 exit status; make[5]: *** [src/core.so] Error 1; make[5]: *** Deleting file `src/core.so' ; make[4]: *** [src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ; -----------------------------------------------------------------------------------------------------------------------------------------; Any idea how to get rid of it?. Best,; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/785
https://github.com/psi4/psi4/issues/785:555,Availability,Error,Error,555,"Dear all, . I am trying to compile the latest version of the PSI4 package on a cluster with OpenSuse; however I end up with the following linking error : . Linking CXX shared library core.so; /usr/bin/ld: BFD (GNU Binutils; openSUSE 12.3) 2.23.1 internal error, aborting at ../../bfd/reloc.c line 444 in bfd_get_reloc_size. /usr/bin/ld: Please report this bug. collect2: error: ld returned 1 exit status; make[5]: *** [src/core.so] Error 1; make[5]: *** Deleting file `src/core.so' ; make[4]: *** [src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ; -----------------------------------------------------------------------------------------------------------------------------------------; Any idea how to get rid of it?. Best,; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/785
https://github.com/psi4/psi4/issues/785:632,Availability,Error,Error,632,"Dear all, . I am trying to compile the latest version of the PSI4 package on a cluster with OpenSuse; however I end up with the following linking error : . Linking CXX shared library core.so; /usr/bin/ld: BFD (GNU Binutils; openSUSE 12.3) 2.23.1 internal error, aborting at ../../bfd/reloc.c line 444 in bfd_get_reloc_size. /usr/bin/ld: Please report this bug. collect2: error: ld returned 1 exit status; make[5]: *** [src/core.so] Error 1; make[5]: *** Deleting file `src/core.so' ; make[4]: *** [src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ; -----------------------------------------------------------------------------------------------------------------------------------------; Any idea how to get rid of it?. Best,; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/785
https://github.com/psi4/psi4/issues/785:685,Availability,Error,Error,685,"Dear all, . I am trying to compile the latest version of the PSI4 package on a cluster with OpenSuse; however I end up with the following linking error : . Linking CXX shared library core.so; /usr/bin/ld: BFD (GNU Binutils; openSUSE 12.3) 2.23.1 internal error, aborting at ../../bfd/reloc.c line 444 in bfd_get_reloc_size. /usr/bin/ld: Please report this bug. collect2: error: ld returned 1 exit status; make[5]: *** [src/core.so] Error 1; make[5]: *** Deleting file `src/core.so' ; make[4]: *** [src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ; -----------------------------------------------------------------------------------------------------------------------------------------; Any idea how to get rid of it?. Best,; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/785
https://github.com/psi4/psi4/issues/785:710,Availability,Error,Error,710,"Dear all, . I am trying to compile the latest version of the PSI4 package on a cluster with OpenSuse; however I end up with the following linking error : . Linking CXX shared library core.so; /usr/bin/ld: BFD (GNU Binutils; openSUSE 12.3) 2.23.1 internal error, aborting at ../../bfd/reloc.c line 444 in bfd_get_reloc_size. /usr/bin/ld: Please report this bug. collect2: error: ld returned 1 exit status; make[5]: *** [src/core.so] Error 1; make[5]: *** Deleting file `src/core.so' ; make[4]: *** [src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ; -----------------------------------------------------------------------------------------------------------------------------------------; Any idea how to get rid of it?. Best,; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/785
https://github.com/psi4/psi4/issues/785:262,Safety,abort,aborting,262,"Dear all, . I am trying to compile the latest version of the PSI4 package on a cluster with OpenSuse; however I end up with the following linking error : . Linking CXX shared library core.so; /usr/bin/ld: BFD (GNU Binutils; openSUSE 12.3) 2.23.1 internal error, aborting at ../../bfd/reloc.c line 444 in bfd_get_reloc_size. /usr/bin/ld: Please report this bug. collect2: error: ld returned 1 exit status; make[5]: *** [src/core.so] Error 1; make[5]: *** Deleting file `src/core.so' ; make[4]: *** [src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ; -----------------------------------------------------------------------------------------------------------------------------------------; Any idea how to get rid of it?. Best,; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/785
https://github.com/psi4/psi4/issues/786:566,Availability,error,error,566,"I am running the following input on Ubuntu : ; ---------------; memory 12 Gb. molecule ab { ; 0 1; Cu 0.00000 0.00000 0.00000; Cu 2.35000 0.00000 0.00000; units ang; }. set basis aug-cc-pvtz ; set scf_type df; set reference rhf; set e_convergence 1e-06; set d_convergence 1e-06; set ints_tolerance 1e-08. set frozen_uocc [5,5,5,5,5,5,5,5]; set freeze_core true; set roots_per_irrep [2,2,2,2,2,2,2,2]; set maxiter 100000; ccsd_energy, wfn = properties('eom-ccsd', properties=['oscillator_strength'],return_wfn=True). ------------------------. and I get the following error : . 	Projections for excited state, irrep Ag, root 1:; 	<0|Le^(-T)|0><0|Re^T|0> = 0.0000000000; 	<0|Le^(-T)|S><S|Re^T|0> = 0.9021404202; 	<0|Le^(-T)|D><D|Re^T|0> = 0.0978595968; 	Sum of above = 1.0000000170; 	Approx. excitation level = 1.0978596138; PSIO_ERROR: Attempt to write into next entry: 121, LIJAB; PSIO_ERROR: unit = 121, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: PSIO Error; Error occurred in file: /home/luca/Desktop/psi4_max/psi4-master/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). ./bash.sh: line 7: 10101 Aborted (core dumped) /home/luca/Desktop/psi4_max/psi4-master/bi/stage/usr/local/psi4/bin/psi4 cu2.dat cu2.out; ------------------------------------------------------------------------------------------------------------------. I have no idea what's going wrong. LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/786
https://github.com/psi4/psi4/issues/786:1047,Availability,Error,Error,1047,"I am running the following input on Ubuntu : ; ---------------; memory 12 Gb. molecule ab { ; 0 1; Cu 0.00000 0.00000 0.00000; Cu 2.35000 0.00000 0.00000; units ang; }. set basis aug-cc-pvtz ; set scf_type df; set reference rhf; set e_convergence 1e-06; set d_convergence 1e-06; set ints_tolerance 1e-08. set frozen_uocc [5,5,5,5,5,5,5,5]; set freeze_core true; set roots_per_irrep [2,2,2,2,2,2,2,2]; set maxiter 100000; ccsd_energy, wfn = properties('eom-ccsd', properties=['oscillator_strength'],return_wfn=True). ------------------------. and I get the following error : . 	Projections for excited state, irrep Ag, root 1:; 	<0|Le^(-T)|0><0|Re^T|0> = 0.0000000000; 	<0|Le^(-T)|S><S|Re^T|0> = 0.9021404202; 	<0|Le^(-T)|D><D|Re^T|0> = 0.0978595968; 	Sum of above = 1.0000000170; 	Approx. excitation level = 1.0978596138; PSIO_ERROR: Attempt to write into next entry: 121, LIJAB; PSIO_ERROR: unit = 121, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: PSIO Error; Error occurred in file: /home/luca/Desktop/psi4_max/psi4-master/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). ./bash.sh: line 7: 10101 Aborted (core dumped) /home/luca/Desktop/psi4_max/psi4-master/bi/stage/usr/local/psi4/bin/psi4 cu2.dat cu2.out; ------------------------------------------------------------------------------------------------------------------. I have no idea what's going wrong. LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/786
https://github.com/psi4/psi4/issues/786:1059,Availability,Error,Error,1059,"I am running the following input on Ubuntu : ; ---------------; memory 12 Gb. molecule ab { ; 0 1; Cu 0.00000 0.00000 0.00000; Cu 2.35000 0.00000 0.00000; units ang; }. set basis aug-cc-pvtz ; set scf_type df; set reference rhf; set e_convergence 1e-06; set d_convergence 1e-06; set ints_tolerance 1e-08. set frozen_uocc [5,5,5,5,5,5,5,5]; set freeze_core true; set roots_per_irrep [2,2,2,2,2,2,2,2]; set maxiter 100000; ccsd_energy, wfn = properties('eom-ccsd', properties=['oscillator_strength'],return_wfn=True). ------------------------. and I get the following error : . 	Projections for excited state, irrep Ag, root 1:; 	<0|Le^(-T)|0><0|Re^T|0> = 0.0000000000; 	<0|Le^(-T)|S><S|Re^T|0> = 0.9021404202; 	<0|Le^(-T)|D><D|Re^T|0> = 0.0978595968; 	Sum of above = 1.0000000170; 	Approx. excitation level = 1.0978596138; PSIO_ERROR: Attempt to write into next entry: 121, LIJAB; PSIO_ERROR: unit = 121, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: PSIO Error; Error occurred in file: /home/luca/Desktop/psi4_max/psi4-master/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). ./bash.sh: line 7: 10101 Aborted (core dumped) /home/luca/Desktop/psi4_max/psi4-master/bi/stage/usr/local/psi4/bin/psi4 cu2.dat cu2.out; ------------------------------------------------------------------------------------------------------------------. I have no idea what's going wrong. LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/786
https://github.com/psi4/psi4/issues/786:1066,Availability,Error,Error,1066,"I am running the following input on Ubuntu : ; ---------------; memory 12 Gb. molecule ab { ; 0 1; Cu 0.00000 0.00000 0.00000; Cu 2.35000 0.00000 0.00000; units ang; }. set basis aug-cc-pvtz ; set scf_type df; set reference rhf; set e_convergence 1e-06; set d_convergence 1e-06; set ints_tolerance 1e-08. set frozen_uocc [5,5,5,5,5,5,5,5]; set freeze_core true; set roots_per_irrep [2,2,2,2,2,2,2,2]; set maxiter 100000; ccsd_energy, wfn = properties('eom-ccsd', properties=['oscillator_strength'],return_wfn=True). ------------------------. and I get the following error : . 	Projections for excited state, irrep Ag, root 1:; 	<0|Le^(-T)|0><0|Re^T|0> = 0.0000000000; 	<0|Le^(-T)|S><S|Re^T|0> = 0.9021404202; 	<0|Le^(-T)|D><D|Re^T|0> = 0.0978595968; 	Sum of above = 1.0000000170; 	Approx. excitation level = 1.0978596138; PSIO_ERROR: Attempt to write into next entry: 121, LIJAB; PSIO_ERROR: unit = 121, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: PSIO Error; Error occurred in file: /home/luca/Desktop/psi4_max/psi4-master/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). ./bash.sh: line 7: 10101 Aborted (core dumped) /home/luca/Desktop/psi4_max/psi4-master/bi/stage/usr/local/psi4/bin/psi4 cu2.dat cu2.out; ------------------------------------------------------------------------------------------------------------------. I have no idea what's going wrong. LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/786
https://github.com/psi4/psi4/issues/786:1152,Availability,error,error,1152,"I am running the following input on Ubuntu : ; ---------------; memory 12 Gb. molecule ab { ; 0 1; Cu 0.00000 0.00000 0.00000; Cu 2.35000 0.00000 0.00000; units ang; }. set basis aug-cc-pvtz ; set scf_type df; set reference rhf; set e_convergence 1e-06; set d_convergence 1e-06; set ints_tolerance 1e-08. set frozen_uocc [5,5,5,5,5,5,5,5]; set freeze_core true; set roots_per_irrep [2,2,2,2,2,2,2,2]; set maxiter 100000; ccsd_energy, wfn = properties('eom-ccsd', properties=['oscillator_strength'],return_wfn=True). ------------------------. and I get the following error : . 	Projections for excited state, irrep Ag, root 1:; 	<0|Le^(-T)|0><0|Re^T|0> = 0.0000000000; 	<0|Le^(-T)|S><S|Re^T|0> = 0.9021404202; 	<0|Le^(-T)|D><D|Re^T|0> = 0.0978595968; 	Sum of above = 1.0000000170; 	Approx. excitation level = 1.0978596138; PSIO_ERROR: Attempt to write into next entry: 121, LIJAB; PSIO_ERROR: unit = 121, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: PSIO Error; Error occurred in file: /home/luca/Desktop/psi4_max/psi4-master/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). ./bash.sh: line 7: 10101 Aborted (core dumped) /home/luca/Desktop/psi4_max/psi4-master/bi/stage/usr/local/psi4/bin/psi4 cu2.dat cu2.out; ------------------------------------------------------------------------------------------------------------------. I have no idea what's going wrong. LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/786
https://github.com/psi4/psi4/issues/786:1616,Safety,Abort,Aborted,1616,"I am running the following input on Ubuntu : ; ---------------; memory 12 Gb. molecule ab { ; 0 1; Cu 0.00000 0.00000 0.00000; Cu 2.35000 0.00000 0.00000; units ang; }. set basis aug-cc-pvtz ; set scf_type df; set reference rhf; set e_convergence 1e-06; set d_convergence 1e-06; set ints_tolerance 1e-08. set frozen_uocc [5,5,5,5,5,5,5,5]; set freeze_core true; set roots_per_irrep [2,2,2,2,2,2,2,2]; set maxiter 100000; ccsd_energy, wfn = properties('eom-ccsd', properties=['oscillator_strength'],return_wfn=True). ------------------------. and I get the following error : . 	Projections for excited state, irrep Ag, root 1:; 	<0|Le^(-T)|0><0|Re^T|0> = 0.0000000000; 	<0|Le^(-T)|S><S|Re^T|0> = 0.9021404202; 	<0|Le^(-T)|D><D|Re^T|0> = 0.0978595968; 	Sum of above = 1.0000000170; 	Approx. excitation level = 1.0978596138; PSIO_ERROR: Attempt to write into next entry: 121, LIJAB; PSIO_ERROR: unit = 121, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: PSIO Error; Error occurred in file: /home/luca/Desktop/psi4_max/psi4-master/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). ./bash.sh: line 7: 10101 Aborted (core dumped) /home/luca/Desktop/psi4_max/psi4-master/bi/stage/usr/local/psi4/bin/psi4 cu2.dat cu2.out; ------------------------------------------------------------------------------------------------------------------. I have no idea what's going wrong. LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/786
https://github.com/psi4/psi4/pull/788:252,Availability,Repair,Repair,252,"## Description; Ca & Ga-Kr basis set fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Extend non-additivity from cc-pwCVXZ to cc-pCVXZ; * **User-Facing for Release Notes**; - [x] Repair Ca cc-pCV5Z (and 5+d) from Peterson's website (wrong on EMSL); - [x] Add Ca cc-pwCV5Z (and 5+d) from Peterson's website; - [x] Extend Ga-Kr basis and polarization for 6-31G. <img width=""1096"" alt=""screen shot 2017-08-23 at 12 08 07 am"" src=""https://user-images.githubusercontent.com/2314730/29598495-38232b30-8797-11e7-8f76-a8d5349ecd4a.png"">. ## Questions; - [x] @CDSherrill may want to examine. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/788
https://github.com/psi4/psi4/pull/788:229,Deployability,Release,Release,229,"## Description; Ca & Ga-Kr basis set fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Extend non-additivity from cc-pwCVXZ to cc-pCVXZ; * **User-Facing for Release Notes**; - [x] Repair Ca cc-pCV5Z (and 5+d) from Peterson's website (wrong on EMSL); - [x] Add Ca cc-pwCV5Z (and 5+d) from Peterson's website; - [x] Extend Ga-Kr basis and polarization for 6-31G. <img width=""1096"" alt=""screen shot 2017-08-23 at 12 08 07 am"" src=""https://user-images.githubusercontent.com/2314730/29598495-38232b30-8797-11e7-8f76-a8d5349ecd4a.png"">. ## Questions; - [x] @CDSherrill may want to examine. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/788
https://github.com/psi4/psi4/pull/788:159,Modifiability,Extend,Extend,159,"## Description; Ca & Ga-Kr basis set fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Extend non-additivity from cc-pwCVXZ to cc-pCVXZ; * **User-Facing for Release Notes**; - [x] Repair Ca cc-pCV5Z (and 5+d) from Peterson's website (wrong on EMSL); - [x] Add Ca cc-pwCV5Z (and 5+d) from Peterson's website; - [x] Extend Ga-Kr basis and polarization for 6-31G. <img width=""1096"" alt=""screen shot 2017-08-23 at 12 08 07 am"" src=""https://user-images.githubusercontent.com/2314730/29598495-38232b30-8797-11e7-8f76-a8d5349ecd4a.png"">. ## Questions; - [x] @CDSherrill may want to examine. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/788
https://github.com/psi4/psi4/pull/788:386,Modifiability,Extend,Extend,386,"## Description; Ca & Ga-Kr basis set fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Extend non-additivity from cc-pwCVXZ to cc-pCVXZ; * **User-Facing for Release Notes**; - [x] Repair Ca cc-pCV5Z (and 5+d) from Peterson's website (wrong on EMSL); - [x] Add Ca cc-pwCV5Z (and 5+d) from Peterson's website; - [x] Extend Ga-Kr basis and polarization for 6-31G. <img width=""1096"" alt=""screen shot 2017-08-23 at 12 08 07 am"" src=""https://user-images.githubusercontent.com/2314730/29598495-38232b30-8797-11e7-8f76-a8d5349ecd4a.png"">. ## Questions; - [x] @CDSherrill may want to examine. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/788
https://github.com/psi4/psi4/issues/789:28,Availability,error,error,28,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/issues/789:172,Availability,Error,Error,172,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/issues/789:184,Availability,Error,Error,184,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/issues/789:191,Availability,Error,Error,191,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/issues/789:270,Availability,error,error,270,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/issues/789:806,Availability,error,error,806,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/issues/789:933,Availability,Error,Error,933,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/issues/789:945,Availability,Error,Error,945,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/issues/789:952,Availability,Error,Error,952,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/issues/789:1031,Availability,error,error,1031,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/issues/789:1364,Availability,error,error-culprit,1364,"its<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.885039296153 -2.394623104348; H -1.023308879978 0.000128616114 -2.393761958029. }. set e_convergence 11; set basis cc-pvtz; set scf guess sad; set scf dft_radial_points 150; set scf scf_type df; set scf dft_spherical_points 434; set scf maxiter 100; set guess_persist true; set geom_maxiter 300. set optking {; dynamic_level=1; full_hess_every 0; max_energy_g_convergence 1e-6; max_force_g_convergence 1.5e-5; rms_force_g_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/issues/789:64,Performance,optimiz,optimizations,64,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/issues/789:833,Performance,optimiz,optimization,833,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/issues/789:892,Performance,optimiz,optimization,892,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/issues/789:1273,Performance,optimiz,optimizer,1273,"ryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.885039296153 -2.394623104348; H -1.023308879978 0.000128616114 -2.393761958029. }. set e_convergence 11; set basis cc-pvtz; set scf guess sad; set scf dft_radial_points 150; set scf scf_type df; set scf dft_spherical_points 434; se",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/issues/789:2491,Performance,optimiz,optimize,2491,"unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.885039296153 -2.394623104348; H -1.023308879978 0.000128616114 -2.393761958029. }. set e_convergence 11; set basis cc-pvtz; set scf guess sad; set scf dft_radial_points 150; set scf scf_type df; set scf dft_spherical_points 434; set scf maxiter 100; set guess_persist true; set geom_maxiter 300. set optking {; dynamic_level=1; full_hess_every 0; max_energy_g_convergence 1e-6; max_force_g_convergence 1.5e-5; rms_force_g_convergence 1e-5; max_disp_g_convergence 6e-4; rms_disp_g_convergence 4e-4; }. optimize('m05-2x'); ``` . Thanks in advance for any assistance, everyone!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789
https://github.com/psi4/psi4/pull/790:420,Deployability,Release,Release,420,"## Description; ECP basissets, counter, AM lookup. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed some `****` around ECP that weren't situated so as to satisfy our picky parser; - [x] Fixed unititialized ECP printing counter variable noticed by @fevangelista ; - [x] Extended dict looking up ECP AM noticed by @fevangelista ; * **User-Facing for Release Notes**; - [x] Add `ao_efp_multipole_potential` and `electric_field` integrals to mintshelper. ## Questions; - [ ] Should we suppress [this printing](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L500)? or redirect to outfile?; - [ ] Should consider origin question with mintshelper. Some ints use the PROPERTIES option to set origin. Just added ints take origin as an arg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/790
https://github.com/psi4/psi4/pull/790:299,Modifiability,variab,variable,299,"## Description; ECP basissets, counter, AM lookup. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed some `****` around ECP that weren't situated so as to satisfy our picky parser; - [x] Fixed unititialized ECP printing counter variable noticed by @fevangelista ; - [x] Extended dict looking up ECP AM noticed by @fevangelista ; * **User-Facing for Release Notes**; - [x] Add `ao_efp_multipole_potential` and `electric_field` integrals to mintshelper. ## Questions; - [ ] Should we suppress [this printing](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L500)? or redirect to outfile?; - [ ] Should consider origin question with mintshelper. Some ints use the PROPERTIES option to set origin. Just added ints take origin as an arg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/790
https://github.com/psi4/psi4/pull/790:341,Modifiability,Extend,Extended,341,"## Description; ECP basissets, counter, AM lookup. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed some `****` around ECP that weren't situated so as to satisfy our picky parser; - [x] Fixed unititialized ECP printing counter variable noticed by @fevangelista ; - [x] Extended dict looking up ECP AM noticed by @fevangelista ; * **User-Facing for Release Notes**; - [x] Add `ao_efp_multipole_potential` and `electric_field` integrals to mintshelper. ## Questions; - [ ] Should we suppress [this printing](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L500)? or redirect to outfile?; - [ ] Should consider origin question with mintshelper. Some ints use the PROPERTIES option to set origin. Just added ints take origin as an arg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/790
https://github.com/psi4/psi4/issues/792:10,Modifiability,inherit,inheritance,10,"The class inheritance diagrams in the documentation are currently broken: [http://psicode.org/psi4manual/1.1/psi4api.html#class-inheritance-diagram](http://psicode.org/psi4manual/1.1/psi4api.html#class-inheritance-diagram). My best guess is that something must have went wrong with the sphinx doc generation, but beyond that I have no idea.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/792
https://github.com/psi4/psi4/issues/792:128,Modifiability,inherit,inheritance-diagram,128,"The class inheritance diagrams in the documentation are currently broken: [http://psicode.org/psi4manual/1.1/psi4api.html#class-inheritance-diagram](http://psicode.org/psi4manual/1.1/psi4api.html#class-inheritance-diagram). My best guess is that something must have went wrong with the sphinx doc generation, but beyond that I have no idea.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/792
https://github.com/psi4/psi4/issues/792:202,Modifiability,inherit,inheritance-diagram,202,"The class inheritance diagrams in the documentation are currently broken: [http://psicode.org/psi4manual/1.1/psi4api.html#class-inheritance-diagram](http://psicode.org/psi4manual/1.1/psi4api.html#class-inheritance-diagram). My best guess is that something must have went wrong with the sphinx doc generation, but beyond that I have no idea.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/792
https://github.com/psi4/psi4/issues/793:416,Availability,avail,available,416,"It appears Psi4 includes a hardcoded list of libxc functional names and ids in psi4/driver/procrouting/dft_funcs/libxc_xc_funcs.py. This should be eliminated in favor of using libxc's own routines for parsing the functionals: ```XC(functional_get_name)(func_id)``` and ```XC(functional_get_number)(str)```. This will eliminate the need to maintain a functional list in psi4, making all newly added libxc functionals available in Psi4 as soon as the underlying libxc library is updated.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/793
https://github.com/psi4/psi4/issues/793:477,Deployability,update,updated,477,"It appears Psi4 includes a hardcoded list of libxc functional names and ids in psi4/driver/procrouting/dft_funcs/libxc_xc_funcs.py. This should be eliminated in favor of using libxc's own routines for parsing the functionals: ```XC(functional_get_name)(func_id)``` and ```XC(functional_get_number)(str)```. This will eliminate the need to maintain a functional list in psi4, making all newly added libxc functionals available in Psi4 as soon as the underlying libxc library is updated.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/793
https://github.com/psi4/psi4/issues/793:188,Integrability,rout,routines,188,"It appears Psi4 includes a hardcoded list of libxc functional names and ids in psi4/driver/procrouting/dft_funcs/libxc_xc_funcs.py. This should be eliminated in favor of using libxc's own routines for parsing the functionals: ```XC(functional_get_name)(func_id)``` and ```XC(functional_get_number)(str)```. This will eliminate the need to maintain a functional list in psi4, making all newly added libxc functionals available in Psi4 as soon as the underlying libxc library is updated.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/793
https://github.com/psi4/psi4/pull/794:499,Deployability,install,install,499,"## Description; Ninja is supposed to be faster at compiling than make. CMake supports it out-of-the-box, it's enough to pass it as generator:; ```; cmake -H. -Bbuild -GNinja; ```; I have tried to use Ninja on Travis and the Clang build runs in ~21 minutes. The GCC builds however fail due to a compiler bug. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `DESTDIR=${CMAKE_BINARY_DIR}/stage` was prepended to `${CMAKE_MAKE_PROGRAM} install` appearing in all instances of `INSTALL_COMMAND`.; - [x] Same `DESTDIR`-related modifications in Libint and update of the Git commit SHA. PR towards v1 was already merged. ; * **User-Facing for Release Notes**; - [x] Psi4 core now buildable with Ninja. **Caveat** To build also the addons it might be necessary to use CMake v3.7.2 _and_ the [Kitware-maintained version of Ninja](https://github.com/Kitware/ninja/releases). The official one does not support Fortran. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/794
https://github.com/psi4/psi4/pull/794:615,Deployability,update,update,615,"## Description; Ninja is supposed to be faster at compiling than make. CMake supports it out-of-the-box, it's enough to pass it as generator:; ```; cmake -H. -Bbuild -GNinja; ```; I have tried to use Ninja on Travis and the Clang build runs in ~21 minutes. The GCC builds however fail due to a compiler bug. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `DESTDIR=${CMAKE_BINARY_DIR}/stage` was prepended to `${CMAKE_MAKE_PROGRAM} install` appearing in all instances of `INSTALL_COMMAND`.; - [x] Same `DESTDIR`-related modifications in Libint and update of the Git commit SHA. PR towards v1 was already merged. ; * **User-Facing for Release Notes**; - [x] Psi4 core now buildable with Ninja. **Caveat** To build also the addons it might be necessary to use CMake v3.7.2 _and_ the [Kitware-maintained version of Ninja](https://github.com/Kitware/ninja/releases). The official one does not support Fortran. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/794
https://github.com/psi4/psi4/pull/794:701,Deployability,Release,Release,701,"## Description; Ninja is supposed to be faster at compiling than make. CMake supports it out-of-the-box, it's enough to pass it as generator:; ```; cmake -H. -Bbuild -GNinja; ```; I have tried to use Ninja on Travis and the Clang build runs in ~21 minutes. The GCC builds however fail due to a compiler bug. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `DESTDIR=${CMAKE_BINARY_DIR}/stage` was prepended to `${CMAKE_MAKE_PROGRAM} install` appearing in all instances of `INSTALL_COMMAND`.; - [x] Same `DESTDIR`-related modifications in Libint and update of the Git commit SHA. PR towards v1 was already merged. ; * **User-Facing for Release Notes**; - [x] Psi4 core now buildable with Ninja. **Caveat** To build also the addons it might be necessary to use CMake v3.7.2 _and_ the [Kitware-maintained version of Ninja](https://github.com/Kitware/ninja/releases). The official one does not support Fortran. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/794
https://github.com/psi4/psi4/pull/794:919,Deployability,release,releases,919,"## Description; Ninja is supposed to be faster at compiling than make. CMake supports it out-of-the-box, it's enough to pass it as generator:; ```; cmake -H. -Bbuild -GNinja; ```; I have tried to use Ninja on Travis and the Clang build runs in ~21 minutes. The GCC builds however fail due to a compiler bug. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `DESTDIR=${CMAKE_BINARY_DIR}/stage` was prepended to `${CMAKE_MAKE_PROGRAM} install` appearing in all instances of `INSTALL_COMMAND`.; - [x] Same `DESTDIR`-related modifications in Libint and update of the Git commit SHA. PR towards v1 was already merged. ; * **User-Facing for Release Notes**; - [x] Psi4 core now buildable with Ninja. **Caveat** To build also the addons it might be necessary to use CMake v3.7.2 _and_ the [Kitware-maintained version of Ninja](https://github.com/Kitware/ninja/releases). The official one does not support Fortran. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/794
https://github.com/psi4/psi4/pull/795:282,Deployability,Release,Release,282,"## Description; Mostly posting to serve as ECP test bed. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Also: HEAVY28 & RG6, but ECP convergence problems, such that they don't match pub values; * **User-Facing for Release Notes**; - [x] New Grimme databases: ADIM6, ALK6, DARC, DC9, HEAVY28, IDISP, ISO34, RG6; - [x] More Grimme databases: AL2X, ISOL22, NBPRC, RSE42. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/795
https://github.com/psi4/psi4/pull/795:47,Testability,test,test,47,"## Description; Mostly posting to serve as ECP test bed. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Also: HEAVY28 & RG6, but ECP convergence problems, such that they don't match pub values; * **User-Facing for Release Notes**; - [x] New Grimme databases: ADIM6, ALK6, DARC, DC9, HEAVY28, IDISP, ISO34, RG6; - [x] More Grimme databases: AL2X, ISOL22, NBPRC, RSE42. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/795
https://github.com/psi4/psi4/issues/796:455,Deployability,configurat,configuration,455,"Dear PSI4 developers. I use psi4 MOLDEN output (along with ORCA, QCHEM, etc.) as input for CASINO QMC program https://vallico.net/casinoqmc/ . For very simple system as Be, B, C atoms well proven that if we add 2s->2p excitation to the ground state than we improve wfn quality. PSI4, ORCA and other code gives me MOLDEN orbitals and coefficients for most important determinants. I can take it and check with CASINO QMC if energy of this multi-determinant configuration is the same as in conventional QMC codes. For the B output from Psi4 it isn't so.; Psi4 determinant coeffs is; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX.; ```. but should be (as in the ORCA and other programs):; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 -0.165709 ( 4, 3) 3AA 5AX.; * 3 -0.165709 ( 2, 2) 3AA 4AX.; ```; And if I change sign by hand in PSI4 output i get right energy in CASINO QMC for this multi-determinant configuration, same as PAS4 Total MCSCF energy. Can You check whether the signs of coefficients are correct. Best, Vladimir. PS Git: Rev {HEAD} add49b9. PPS; ```; memory 2 Gb. molecule b {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; restricted_docc [ 1 ]; active [ 4 ]; }. cas_e, cas_wfn = energy('casscf', return_wfn=True); molden(cas_wfn, 'molden.dat'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796
https://github.com/psi4/psi4/issues/796:1018,Deployability,configurat,configuration,1018,"Dear PSI4 developers. I use psi4 MOLDEN output (along with ORCA, QCHEM, etc.) as input for CASINO QMC program https://vallico.net/casinoqmc/ . For very simple system as Be, B, C atoms well proven that if we add 2s->2p excitation to the ground state than we improve wfn quality. PSI4, ORCA and other code gives me MOLDEN orbitals and coefficients for most important determinants. I can take it and check with CASINO QMC if energy of this multi-determinant configuration is the same as in conventional QMC codes. For the B output from Psi4 it isn't so.; Psi4 determinant coeffs is; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX.; ```. but should be (as in the ORCA and other programs):; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 -0.165709 ( 4, 3) 3AA 5AX.; * 3 -0.165709 ( 2, 2) 3AA 4AX.; ```; And if I change sign by hand in PSI4 output i get right energy in CASINO QMC for this multi-determinant configuration, same as PAS4 Total MCSCF energy. Can You check whether the signs of coefficients are correct. Best, Vladimir. PS Git: Rev {HEAD} add49b9. PPS; ```; memory 2 Gb. molecule b {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; restricted_docc [ 1 ]; active [ 4 ]; }. cas_e, cas_wfn = energy('casscf', return_wfn=True); molden(cas_wfn, 'molden.dat'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796
https://github.com/psi4/psi4/issues/796:422,Energy Efficiency,energy,energy,422,"Dear PSI4 developers. I use psi4 MOLDEN output (along with ORCA, QCHEM, etc.) as input for CASINO QMC program https://vallico.net/casinoqmc/ . For very simple system as Be, B, C atoms well proven that if we add 2s->2p excitation to the ground state than we improve wfn quality. PSI4, ORCA and other code gives me MOLDEN orbitals and coefficients for most important determinants. I can take it and check with CASINO QMC if energy of this multi-determinant configuration is the same as in conventional QMC codes. For the B output from Psi4 it isn't so.; Psi4 determinant coeffs is; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX.; ```. but should be (as in the ORCA and other programs):; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 -0.165709 ( 4, 3) 3AA 5AX.; * 3 -0.165709 ( 2, 2) 3AA 4AX.; ```; And if I change sign by hand in PSI4 output i get right energy in CASINO QMC for this multi-determinant configuration, same as PAS4 Total MCSCF energy. Can You check whether the signs of coefficients are correct. Best, Vladimir. PS Git: Rev {HEAD} add49b9. PPS; ```; memory 2 Gb. molecule b {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; restricted_docc [ 1 ]; active [ 4 ]; }. cas_e, cas_wfn = energy('casscf', return_wfn=True); molden(cas_wfn, 'molden.dat'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796
https://github.com/psi4/psi4/issues/796:970,Energy Efficiency,energy,energy,970,"Dear PSI4 developers. I use psi4 MOLDEN output (along with ORCA, QCHEM, etc.) as input for CASINO QMC program https://vallico.net/casinoqmc/ . For very simple system as Be, B, C atoms well proven that if we add 2s->2p excitation to the ground state than we improve wfn quality. PSI4, ORCA and other code gives me MOLDEN orbitals and coefficients for most important determinants. I can take it and check with CASINO QMC if energy of this multi-determinant configuration is the same as in conventional QMC codes. For the B output from Psi4 it isn't so.; Psi4 determinant coeffs is; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX.; ```. but should be (as in the ORCA and other programs):; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 -0.165709 ( 4, 3) 3AA 5AX.; * 3 -0.165709 ( 2, 2) 3AA 4AX.; ```; And if I change sign by hand in PSI4 output i get right energy in CASINO QMC for this multi-determinant configuration, same as PAS4 Total MCSCF energy. Can You check whether the signs of coefficients are correct. Best, Vladimir. PS Git: Rev {HEAD} add49b9. PPS; ```; memory 2 Gb. molecule b {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; restricted_docc [ 1 ]; active [ 4 ]; }. cas_e, cas_wfn = energy('casscf', return_wfn=True); molden(cas_wfn, 'molden.dat'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796
https://github.com/psi4/psi4/issues/796:1058,Energy Efficiency,energy,energy,1058,"Dear PSI4 developers. I use psi4 MOLDEN output (along with ORCA, QCHEM, etc.) as input for CASINO QMC program https://vallico.net/casinoqmc/ . For very simple system as Be, B, C atoms well proven that if we add 2s->2p excitation to the ground state than we improve wfn quality. PSI4, ORCA and other code gives me MOLDEN orbitals and coefficients for most important determinants. I can take it and check with CASINO QMC if energy of this multi-determinant configuration is the same as in conventional QMC codes. For the B output from Psi4 it isn't so.; Psi4 determinant coeffs is; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX.; ```. but should be (as in the ORCA and other programs):; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 -0.165709 ( 4, 3) 3AA 5AX.; * 3 -0.165709 ( 2, 2) 3AA 4AX.; ```; And if I change sign by hand in PSI4 output i get right energy in CASINO QMC for this multi-determinant configuration, same as PAS4 Total MCSCF energy. Can You check whether the signs of coefficients are correct. Best, Vladimir. PS Git: Rev {HEAD} add49b9. PPS; ```; memory 2 Gb. molecule b {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; restricted_docc [ 1 ]; active [ 4 ]; }. cas_e, cas_wfn = energy('casscf', return_wfn=True); molden(cas_wfn, 'molden.dat'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796
https://github.com/psi4/psi4/issues/796:1372,Energy Efficiency,energy,energy,1372,"Dear PSI4 developers. I use psi4 MOLDEN output (along with ORCA, QCHEM, etc.) as input for CASINO QMC program https://vallico.net/casinoqmc/ . For very simple system as Be, B, C atoms well proven that if we add 2s->2p excitation to the ground state than we improve wfn quality. PSI4, ORCA and other code gives me MOLDEN orbitals and coefficients for most important determinants. I can take it and check with CASINO QMC if energy of this multi-determinant configuration is the same as in conventional QMC codes. For the B output from Psi4 it isn't so.; Psi4 determinant coeffs is; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX.; ```. but should be (as in the ORCA and other programs):; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 -0.165709 ( 4, 3) 3AA 5AX.; * 3 -0.165709 ( 2, 2) 3AA 4AX.; ```; And if I change sign by hand in PSI4 output i get right energy in CASINO QMC for this multi-determinant configuration, same as PAS4 Total MCSCF energy. Can You check whether the signs of coefficients are correct. Best, Vladimir. PS Git: Rev {HEAD} add49b9. PPS; ```; memory 2 Gb. molecule b {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; restricted_docc [ 1 ]; active [ 4 ]; }. cas_e, cas_wfn = energy('casscf', return_wfn=True); molden(cas_wfn, 'molden.dat'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796
https://github.com/psi4/psi4/issues/796:455,Modifiability,config,configuration,455,"Dear PSI4 developers. I use psi4 MOLDEN output (along with ORCA, QCHEM, etc.) as input for CASINO QMC program https://vallico.net/casinoqmc/ . For very simple system as Be, B, C atoms well proven that if we add 2s->2p excitation to the ground state than we improve wfn quality. PSI4, ORCA and other code gives me MOLDEN orbitals and coefficients for most important determinants. I can take it and check with CASINO QMC if energy of this multi-determinant configuration is the same as in conventional QMC codes. For the B output from Psi4 it isn't so.; Psi4 determinant coeffs is; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX.; ```. but should be (as in the ORCA and other programs):; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 -0.165709 ( 4, 3) 3AA 5AX.; * 3 -0.165709 ( 2, 2) 3AA 4AX.; ```; And if I change sign by hand in PSI4 output i get right energy in CASINO QMC for this multi-determinant configuration, same as PAS4 Total MCSCF energy. Can You check whether the signs of coefficients are correct. Best, Vladimir. PS Git: Rev {HEAD} add49b9. PPS; ```; memory 2 Gb. molecule b {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; restricted_docc [ 1 ]; active [ 4 ]; }. cas_e, cas_wfn = energy('casscf', return_wfn=True); molden(cas_wfn, 'molden.dat'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796
https://github.com/psi4/psi4/issues/796:1018,Modifiability,config,configuration,1018,"Dear PSI4 developers. I use psi4 MOLDEN output (along with ORCA, QCHEM, etc.) as input for CASINO QMC program https://vallico.net/casinoqmc/ . For very simple system as Be, B, C atoms well proven that if we add 2s->2p excitation to the ground state than we improve wfn quality. PSI4, ORCA and other code gives me MOLDEN orbitals and coefficients for most important determinants. I can take it and check with CASINO QMC if energy of this multi-determinant configuration is the same as in conventional QMC codes. For the B output from Psi4 it isn't so.; Psi4 determinant coeffs is; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX.; ```. but should be (as in the ORCA and other programs):; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 -0.165709 ( 4, 3) 3AA 5AX.; * 3 -0.165709 ( 2, 2) 3AA 4AX.; ```; And if I change sign by hand in PSI4 output i get right energy in CASINO QMC for this multi-determinant configuration, same as PAS4 Total MCSCF energy. Can You check whether the signs of coefficients are correct. Best, Vladimir. PS Git: Rev {HEAD} add49b9. PPS; ```; memory 2 Gb. molecule b {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; restricted_docc [ 1 ]; active [ 4 ]; }. cas_e, cas_wfn = energy('casscf', return_wfn=True); molden(cas_wfn, 'molden.dat'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796
https://github.com/psi4/psi4/issues/796:152,Usability,simpl,simple,152,"Dear PSI4 developers. I use psi4 MOLDEN output (along with ORCA, QCHEM, etc.) as input for CASINO QMC program https://vallico.net/casinoqmc/ . For very simple system as Be, B, C atoms well proven that if we add 2s->2p excitation to the ground state than we improve wfn quality. PSI4, ORCA and other code gives me MOLDEN orbitals and coefficients for most important determinants. I can take it and check with CASINO QMC if energy of this multi-determinant configuration is the same as in conventional QMC codes. For the B output from Psi4 it isn't so.; Psi4 determinant coeffs is; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX.; ```. but should be (as in the ORCA and other programs):; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 -0.165709 ( 4, 3) 3AA 5AX.; * 3 -0.165709 ( 2, 2) 3AA 4AX.; ```; And if I change sign by hand in PSI4 output i get right energy in CASINO QMC for this multi-determinant configuration, same as PAS4 Total MCSCF energy. Can You check whether the signs of coefficients are correct. Best, Vladimir. PS Git: Rev {HEAD} add49b9. PPS; ```; memory 2 Gb. molecule b {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; restricted_docc [ 1 ]; active [ 4 ]; }. cas_e, cas_wfn = energy('casscf', return_wfn=True); molden(cas_wfn, 'molden.dat'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796
https://github.com/psi4/psi4/pull/797:160,Deployability,Release,Release,160,## Description; Updating DFOCC module with new features. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [ 1 ] DF-CCSD(T) analytic grads are implemented; - [ 2 ] EKT is implemented for DFOCC module. ## Questions; - [x] Question1. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/797
https://github.com/psi4/psi4/pull/798:129,Availability,error,error,129,"## Description; Two bug fixes. First is wrong projected energy change in P-RFO transition state optimization.; Second, is an i/o error that occured because the file1 was not always deleted when the ""dynamic level"" changed. Default behavior should be unaffected.; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; Should resolve issue #789 ; ; ## Questions; None; ## Status; Should be ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/798
https://github.com/psi4/psi4/pull/798:56,Energy Efficiency,energy,energy,56,"## Description; Two bug fixes. First is wrong projected energy change in P-RFO transition state optimization.; Second, is an i/o error that occured because the file1 was not always deleted when the ""dynamic level"" changed. Default behavior should be unaffected.; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; Should resolve issue #789 ; ; ## Questions; None; ## Status; Should be ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/798
https://github.com/psi4/psi4/pull/798:96,Performance,optimiz,optimization,96,"## Description; Two bug fixes. First is wrong projected energy change in P-RFO transition state optimization.; Second, is an i/o error that occured because the file1 was not always deleted when the ""dynamic level"" changed. Default behavior should be unaffected.; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; Should resolve issue #789 ; ; ## Questions; None; ## Status; Should be ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/798
https://github.com/psi4/psi4/pull/799:884,Deployability,Release,Release,884,"## Description; The DFT_CUSTOM_FUNCTIONAL keyword died at some point so I started to examine how to re-enable it (@loriab) and I was also bugged about HF-3C gradients (@bwb314). Luckily it turns out I had already done most of the work at some point (I have 3 more of these branches apparently that I need to merge). Basically this works finishes the movement of trying to distinguish between DFT and SCF where SCF is now a very basic DFT ""functional"". This could lead towards ""functionals"" being just SCF + stuff where the stuff could be XC, PCM, -D, external potentials, etc. . I recall @adabbott is willing to document this. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF is now basically a very vanilla case of DFT; - [x] Adds finite difference Hessians from gradients for -D corrections; * **User-Facing for Release Notes**; - [x] Enables HF-3C gradients and Hessians.; - [x] Tentatively re-enables ip_fitting and other frac procedures; - [x] Remove keyword `DFT_CUSTOM_FUNCTIONAL` in favor of `energy(""SCF"", dft_functional=...)`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799
https://github.com/psi4/psi4/pull/799:1071,Energy Efficiency,energy,energy,1071,"## Description; The DFT_CUSTOM_FUNCTIONAL keyword died at some point so I started to examine how to re-enable it (@loriab) and I was also bugged about HF-3C gradients (@bwb314). Luckily it turns out I had already done most of the work at some point (I have 3 more of these branches apparently that I need to merge). Basically this works finishes the movement of trying to distinguish between DFT and SCF where SCF is now a very basic DFT ""functional"". This could lead towards ""functionals"" being just SCF + stuff where the stuff could be XC, PCM, -D, external potentials, etc. . I recall @adabbott is willing to document this. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF is now basically a very vanilla case of DFT; - [x] Adds finite difference Hessians from gradients for -D corrections; * **User-Facing for Release Notes**; - [x] Enables HF-3C gradients and Hessians.; - [x] Tentatively re-enables ip_fitting and other frac procedures; - [x] Remove keyword `DFT_CUSTOM_FUNCTIONAL` in favor of `energy(""SCF"", dft_functional=...)`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799
https://github.com/psi4/psi4/issues/800:260,Availability,failure,failure,260,"**Note:** Migrated from my comment on #798 to expedite merging of that PR. When running OPTKING with the dynamic level turned on, i.e., with the module option:; ```; set optking {; dynamic_level = 1 # Can start dynamic level at any 1 - 7; }; ```; Optimization failure occurs if a bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; However, the error isn't translated to a PsiException, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` PsiException, so that the output does not fly under the radar as being successful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/800
https://github.com/psi4/psi4/issues/800:724,Availability,error,error,724,"**Note:** Migrated from my comment on #798 to expedite merging of that PR. When running OPTKING with the dynamic level turned on, i.e., with the module option:; ```; set optking {; dynamic_level = 1 # Can start dynamic level at any 1 - 7; }; ```; Optimization failure occurs if a bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; However, the error isn't translated to a PsiException, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` PsiException, so that the output does not fly under the radar as being successful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/800
https://github.com/psi4/psi4/issues/800:917,Availability,error,error,917,"**Note:** Migrated from my comment on #798 to expedite merging of that PR. When running OPTKING with the dynamic level turned on, i.e., with the module option:; ```; set optking {; dynamic_level = 1 # Can start dynamic level at any 1 - 7; }; ```; Optimization failure occurs if a bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; However, the error isn't translated to a PsiException, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` PsiException, so that the output does not fly under the radar as being successful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/800
https://github.com/psi4/psi4/issues/800:385,Energy Efficiency,Energy,Energy,385,"**Note:** Migrated from my comment on #798 to expedite merging of that PR. When running OPTKING with the dynamic level turned on, i.e., with the module option:; ```; set optking {; dynamic_level = 1 # Can start dynamic level at any 1 - 7; }; ```; Optimization failure occurs if a bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; However, the error isn't translated to a PsiException, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` PsiException, so that the output does not fly under the radar as being successful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/800
https://github.com/psi4/psi4/issues/800:835,Integrability,message,message,835,"**Note:** Migrated from my comment on #798 to expedite merging of that PR. When running OPTKING with the dynamic level turned on, i.e., with the module option:; ```; set optking {; dynamic_level = 1 # Can start dynamic level at any 1 - 7; }; ```; Optimization failure occurs if a bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; However, the error isn't translated to a PsiException, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` PsiException, so that the output does not fly under the radar as being successful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/800
https://github.com/psi4/psi4/issues/800:247,Performance,Optimiz,Optimization,247,"**Note:** Migrated from my comment on #798 to expedite merging of that PR. When running OPTKING with the dynamic level turned on, i.e., with the module option:; ```; set optking {; dynamic_level = 1 # Can start dynamic level at any 1 - 7; }; ```; Optimization failure occurs if a bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; However, the error isn't translated to a PsiException, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` PsiException, so that the output does not fly under the radar as being successful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/800
https://github.com/psi4/psi4/issues/800:578,Performance,Optimiz,Optimization,578,"**Note:** Migrated from my comment on #798 to expedite merging of that PR. When running OPTKING with the dynamic level turned on, i.e., with the module option:; ```; set optking {; dynamic_level = 1 # Can start dynamic level at any 1 - 7; }; ```; Optimization failure occurs if a bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; However, the error isn't translated to a PsiException, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` PsiException, so that the output does not fly under the radar as being successful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/800
https://github.com/psi4/psi4/issues/800:859,Performance,optimiz,optimization,859,"**Note:** Migrated from my comment on #798 to expedite merging of that PR. When running OPTKING with the dynamic level turned on, i.e., with the module option:; ```; set optking {; dynamic_level = 1 # Can start dynamic level at any 1 - 7; }; ```; Optimization failure occurs if a bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; However, the error isn't translated to a PsiException, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` PsiException, so that the output does not fly under the radar as being successful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/800
https://github.com/psi4/psi4/pull/801:337,Deployability,update,updates,337,"## Description; I don't think its too much of an exaggeration to say that only psinet and I build the psi4 documentation. Since other projects package their documentation helpers, we, too, can spin off the derived psi4 sphinx theme (now at psi4/sphinx_psi_theme) and evict a lot of code from the repo and automatically take advantage of updates to our dependencies, rather than every two years when I get to a docs overhaul. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Removes all sphinx themes and autoapi helpers from repo; - [x] To fully build the docs, follow the prompt to `conda install sphinx-psi-theme cloud_sptheme astropy-helpers graphviz python-graphviz -c conda-forge -c astropy -c psi4`; - [x] To use the psi4 theme (or do variants, e.g. http://psicode.org/pylibefpmanual/master/index.html) or autoapi setup in another project, just copy and modify the `doc/CMakeLists.txt` and `doc/source/conf.py.in`; * **User-Facing for Release Notes**; - [x] Incidentally, psi4/psi4#792 now fixed. Needed to have dot/graphviz installed at build time. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/801
https://github.com/psi4/psi4/pull/801:656,Deployability,install,install,656,"## Description; I don't think its too much of an exaggeration to say that only psinet and I build the psi4 documentation. Since other projects package their documentation helpers, we, too, can spin off the derived psi4 sphinx theme (now at psi4/sphinx_psi_theme) and evict a lot of code from the repo and automatically take advantage of updates to our dependencies, rather than every two years when I get to a docs overhaul. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Removes all sphinx themes and autoapi helpers from repo; - [x] To fully build the docs, follow the prompt to `conda install sphinx-psi-theme cloud_sptheme astropy-helpers graphviz python-graphviz -c conda-forge -c astropy -c psi4`; - [x] To use the psi4 theme (or do variants, e.g. http://psicode.org/pylibefpmanual/master/index.html) or autoapi setup in another project, just copy and modify the `doc/CMakeLists.txt` and `doc/source/conf.py.in`; * **User-Facing for Release Notes**; - [x] Incidentally, psi4/psi4#792 now fixed. Needed to have dot/graphviz installed at build time. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/801
https://github.com/psi4/psi4/pull/801:1007,Deployability,Release,Release,1007,"## Description; I don't think its too much of an exaggeration to say that only psinet and I build the psi4 documentation. Since other projects package their documentation helpers, we, too, can spin off the derived psi4 sphinx theme (now at psi4/sphinx_psi_theme) and evict a lot of code from the repo and automatically take advantage of updates to our dependencies, rather than every two years when I get to a docs overhaul. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Removes all sphinx themes and autoapi helpers from repo; - [x] To fully build the docs, follow the prompt to `conda install sphinx-psi-theme cloud_sptheme astropy-helpers graphviz python-graphviz -c conda-forge -c astropy -c psi4`; - [x] To use the psi4 theme (or do variants, e.g. http://psicode.org/pylibefpmanual/master/index.html) or autoapi setup in another project, just copy and modify the `doc/CMakeLists.txt` and `doc/source/conf.py.in`; * **User-Facing for Release Notes**; - [x] Incidentally, psi4/psi4#792 now fixed. Needed to have dot/graphviz installed at build time. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/801
https://github.com/psi4/psi4/pull/801:1097,Deployability,install,installed,1097,"## Description; I don't think its too much of an exaggeration to say that only psinet and I build the psi4 documentation. Since other projects package their documentation helpers, we, too, can spin off the derived psi4 sphinx theme (now at psi4/sphinx_psi_theme) and evict a lot of code from the repo and automatically take advantage of updates to our dependencies, rather than every two years when I get to a docs overhaul. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Removes all sphinx themes and autoapi helpers from repo; - [x] To fully build the docs, follow the prompt to `conda install sphinx-psi-theme cloud_sptheme astropy-helpers graphviz python-graphviz -c conda-forge -c astropy -c psi4`; - [x] To use the psi4 theme (or do variants, e.g. http://psicode.org/pylibefpmanual/master/index.html) or autoapi setup in another project, just copy and modify the `doc/CMakeLists.txt` and `doc/source/conf.py.in`; * **User-Facing for Release Notes**; - [x] Incidentally, psi4/psi4#792 now fixed. Needed to have dot/graphviz installed at build time. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/801
https://github.com/psi4/psi4/pull/801:352,Integrability,depend,dependencies,352,"## Description; I don't think its too much of an exaggeration to say that only psinet and I build the psi4 documentation. Since other projects package their documentation helpers, we, too, can spin off the derived psi4 sphinx theme (now at psi4/sphinx_psi_theme) and evict a lot of code from the repo and automatically take advantage of updates to our dependencies, rather than every two years when I get to a docs overhaul. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Removes all sphinx themes and autoapi helpers from repo; - [x] To fully build the docs, follow the prompt to `conda install sphinx-psi-theme cloud_sptheme astropy-helpers graphviz python-graphviz -c conda-forge -c astropy -c psi4`; - [x] To use the psi4 theme (or do variants, e.g. http://psicode.org/pylibefpmanual/master/index.html) or autoapi setup in another project, just copy and modify the `doc/CMakeLists.txt` and `doc/source/conf.py.in`; * **User-Facing for Release Notes**; - [x] Incidentally, psi4/psi4#792 now fixed. Needed to have dot/graphviz installed at build time. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/801
https://github.com/psi4/psi4/pull/802:383,Availability,error,errors,383,"## Description; Consider this a hacked bare minimum. Needs work. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] They are _still_ playing about with fctls so xc_funcs.h is still changing and having to be copied over into our file. I've pinned the commit for the moment so you won't get stray ""can't find libxc fctl"" errors.; - [x] From https://gitlab.com/libxc/libxc/commit/21ee6588bb8039c3c83e5b39d01b2ee4234fe5e3 , I think they've changed over 'set_params' to 'ext_params'. Haven't figured out how to do so psi-side. Not all the set_params lived so the funcs that got dropped are now commented in LibxcFunctionals.cc; - [x] They seems to have dropped lda_set_params entirely. I saw at least one commit msg indicating it was duplicate functionality; - [x] All tests but 4 (+ scf-covereage for me) pass. Fails are of the type below. ```RuntimeError: ; Fatal Error: Matrix::power: C_DSYEV failed; Error occurred in file: /home/psilocaluser/gits/hrw-dgas/psi4/src/psi4/libmints/matrix.cc on line: 2584; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::power(double, double); psi::DIISManager::extrapolate(int, ...); psi::scf::HF::iterations(); psi::scf::HF::compute_energy(); ```. ### April 2018 updates; - [x] psi's fork of Libxc resides in a branch on GH:loriab/libxc . I'd transfer that repo to psi4/libxc except then all the present cmake pulls (to the 3.0 master in that repo) would break.; - [x] added in M05, M052X, M06, M062X, M06HF, M08SO, M08HF, M11; - [x] M11 close (0.00035 E_h) but broken; - [x] MGGA_MVSh & MGGA_MVS broken; - [x] otherwise, test suite is clean; - [x] Need https://gitlab.com/libxc/libxc/merge_requests/65 to go through and hopefully 4.0.5 tag made, then pull over to GH and re-point this PR. ## Status; - [x] Ready to go. Absolutely not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802
https://github.com/psi4/psi4/pull/802:925,Availability,Error,Error,925,"## Description; Consider this a hacked bare minimum. Needs work. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] They are _still_ playing about with fctls so xc_funcs.h is still changing and having to be copied over into our file. I've pinned the commit for the moment so you won't get stray ""can't find libxc fctl"" errors.; - [x] From https://gitlab.com/libxc/libxc/commit/21ee6588bb8039c3c83e5b39d01b2ee4234fe5e3 , I think they've changed over 'set_params' to 'ext_params'. Haven't figured out how to do so psi-side. Not all the set_params lived so the funcs that got dropped are now commented in LibxcFunctionals.cc; - [x] They seems to have dropped lda_set_params entirely. I saw at least one commit msg indicating it was duplicate functionality; - [x] All tests but 4 (+ scf-covereage for me) pass. Fails are of the type below. ```RuntimeError: ; Fatal Error: Matrix::power: C_DSYEV failed; Error occurred in file: /home/psilocaluser/gits/hrw-dgas/psi4/src/psi4/libmints/matrix.cc on line: 2584; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::power(double, double); psi::DIISManager::extrapolate(int, ...); psi::scf::HF::iterations(); psi::scf::HF::compute_energy(); ```. ### April 2018 updates; - [x] psi's fork of Libxc resides in a branch on GH:loriab/libxc . I'd transfer that repo to psi4/libxc except then all the present cmake pulls (to the 3.0 master in that repo) would break.; - [x] added in M05, M052X, M06, M062X, M06HF, M08SO, M08HF, M11; - [x] M11 close (0.00035 E_h) but broken; - [x] MGGA_MVSh & MGGA_MVS broken; - [x] otherwise, test suite is clean; - [x] Need https://gitlab.com/libxc/libxc/merge_requests/65 to go through and hopefully 4.0.5 tag made, then pull over to GH and re-point this PR. ## Status; - [x] Ready to go. Absolutely not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802
https://github.com/psi4/psi4/pull/802:963,Availability,Error,Error,963,"## Description; Consider this a hacked bare minimum. Needs work. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] They are _still_ playing about with fctls so xc_funcs.h is still changing and having to be copied over into our file. I've pinned the commit for the moment so you won't get stray ""can't find libxc fctl"" errors.; - [x] From https://gitlab.com/libxc/libxc/commit/21ee6588bb8039c3c83e5b39d01b2ee4234fe5e3 , I think they've changed over 'set_params' to 'ext_params'. Haven't figured out how to do so psi-side. Not all the set_params lived so the funcs that got dropped are now commented in LibxcFunctionals.cc; - [x] They seems to have dropped lda_set_params entirely. I saw at least one commit msg indicating it was duplicate functionality; - [x] All tests but 4 (+ scf-covereage for me) pass. Fails are of the type below. ```RuntimeError: ; Fatal Error: Matrix::power: C_DSYEV failed; Error occurred in file: /home/psilocaluser/gits/hrw-dgas/psi4/src/psi4/libmints/matrix.cc on line: 2584; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::power(double, double); psi::DIISManager::extrapolate(int, ...); psi::scf::HF::iterations(); psi::scf::HF::compute_energy(); ```. ### April 2018 updates; - [x] psi's fork of Libxc resides in a branch on GH:loriab/libxc . I'd transfer that repo to psi4/libxc except then all the present cmake pulls (to the 3.0 master in that repo) would break.; - [x] added in M05, M052X, M06, M062X, M06HF, M08SO, M08HF, M11; - [x] M11 close (0.00035 E_h) but broken; - [x] MGGA_MVSh & MGGA_MVS broken; - [x] otherwise, test suite is clean; - [x] Need https://gitlab.com/libxc/libxc/merge_requests/65 to go through and hopefully 4.0.5 tag made, then pull over to GH and re-point this PR. ## Status; - [x] Ready to go. Absolutely not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802
https://github.com/psi4/psi4/pull/802:1397,Deployability,update,updates,1397,"## Description; Consider this a hacked bare minimum. Needs work. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] They are _still_ playing about with fctls so xc_funcs.h is still changing and having to be copied over into our file. I've pinned the commit for the moment so you won't get stray ""can't find libxc fctl"" errors.; - [x] From https://gitlab.com/libxc/libxc/commit/21ee6588bb8039c3c83e5b39d01b2ee4234fe5e3 , I think they've changed over 'set_params' to 'ext_params'. Haven't figured out how to do so psi-side. Not all the set_params lived so the funcs that got dropped are now commented in LibxcFunctionals.cc; - [x] They seems to have dropped lda_set_params entirely. I saw at least one commit msg indicating it was duplicate functionality; - [x] All tests but 4 (+ scf-covereage for me) pass. Fails are of the type below. ```RuntimeError: ; Fatal Error: Matrix::power: C_DSYEV failed; Error occurred in file: /home/psilocaluser/gits/hrw-dgas/psi4/src/psi4/libmints/matrix.cc on line: 2584; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::power(double, double); psi::DIISManager::extrapolate(int, ...); psi::scf::HF::iterations(); psi::scf::HF::compute_energy(); ```. ### April 2018 updates; - [x] psi's fork of Libxc resides in a branch on GH:loriab/libxc . I'd transfer that repo to psi4/libxc except then all the present cmake pulls (to the 3.0 master in that repo) would break.; - [x] added in M05, M052X, M06, M062X, M06HF, M08SO, M08HF, M11; - [x] M11 close (0.00035 E_h) but broken; - [x] MGGA_MVSh & MGGA_MVS broken; - [x] otherwise, test suite is clean; - [x] Need https://gitlab.com/libxc/libxc/merge_requests/65 to go through and hopefully 4.0.5 tag made, then pull over to GH and re-point this PR. ## Status; - [x] Ready to go. Absolutely not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802
https://github.com/psi4/psi4/pull/802:940,Energy Efficiency,power,power,940,"## Description; Consider this a hacked bare minimum. Needs work. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] They are _still_ playing about with fctls so xc_funcs.h is still changing and having to be copied over into our file. I've pinned the commit for the moment so you won't get stray ""can't find libxc fctl"" errors.; - [x] From https://gitlab.com/libxc/libxc/commit/21ee6588bb8039c3c83e5b39d01b2ee4234fe5e3 , I think they've changed over 'set_params' to 'ext_params'. Haven't figured out how to do so psi-side. Not all the set_params lived so the funcs that got dropped are now commented in LibxcFunctionals.cc; - [x] They seems to have dropped lda_set_params entirely. I saw at least one commit msg indicating it was duplicate functionality; - [x] All tests but 4 (+ scf-covereage for me) pass. Fails are of the type below. ```RuntimeError: ; Fatal Error: Matrix::power: C_DSYEV failed; Error occurred in file: /home/psilocaluser/gits/hrw-dgas/psi4/src/psi4/libmints/matrix.cc on line: 2584; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::power(double, double); psi::DIISManager::extrapolate(int, ...); psi::scf::HF::iterations(); psi::scf::HF::compute_energy(); ```. ### April 2018 updates; - [x] psi's fork of Libxc resides in a branch on GH:loriab/libxc . I'd transfer that repo to psi4/libxc except then all the present cmake pulls (to the 3.0 master in that repo) would break.; - [x] added in M05, M052X, M06, M062X, M06HF, M08SO, M08HF, M11; - [x] M11 close (0.00035 E_h) but broken; - [x] MGGA_MVSh & MGGA_MVS broken; - [x] otherwise, test suite is clean; - [x] Need https://gitlab.com/libxc/libxc/merge_requests/65 to go through and hopefully 4.0.5 tag made, then pull over to GH and re-point this PR. ## Status; - [x] Ready to go. Absolutely not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802
https://github.com/psi4/psi4/pull/802:1253,Energy Efficiency,power,power,1253,"## Description; Consider this a hacked bare minimum. Needs work. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] They are _still_ playing about with fctls so xc_funcs.h is still changing and having to be copied over into our file. I've pinned the commit for the moment so you won't get stray ""can't find libxc fctl"" errors.; - [x] From https://gitlab.com/libxc/libxc/commit/21ee6588bb8039c3c83e5b39d01b2ee4234fe5e3 , I think they've changed over 'set_params' to 'ext_params'. Haven't figured out how to do so psi-side. Not all the set_params lived so the funcs that got dropped are now commented in LibxcFunctionals.cc; - [x] They seems to have dropped lda_set_params entirely. I saw at least one commit msg indicating it was duplicate functionality; - [x] All tests but 4 (+ scf-covereage for me) pass. Fails are of the type below. ```RuntimeError: ; Fatal Error: Matrix::power: C_DSYEV failed; Error occurred in file: /home/psilocaluser/gits/hrw-dgas/psi4/src/psi4/libmints/matrix.cc on line: 2584; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::power(double, double); psi::DIISManager::extrapolate(int, ...); psi::scf::HF::iterations(); psi::scf::HF::compute_energy(); ```. ### April 2018 updates; - [x] psi's fork of Libxc resides in a branch on GH:loriab/libxc . I'd transfer that repo to psi4/libxc except then all the present cmake pulls (to the 3.0 master in that repo) would break.; - [x] added in M05, M052X, M06, M062X, M06HF, M08SO, M08HF, M11; - [x] M11 close (0.00035 E_h) but broken; - [x] MGGA_MVSh & MGGA_MVS broken; - [x] otherwise, test suite is clean; - [x] Need https://gitlab.com/libxc/libxc/merge_requests/65 to go through and hopefully 4.0.5 tag made, then pull over to GH and re-point this PR. ## Status; - [x] Ready to go. Absolutely not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802
https://github.com/psi4/psi4/pull/802:828,Testability,test,tests,828,"## Description; Consider this a hacked bare minimum. Needs work. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] They are _still_ playing about with fctls so xc_funcs.h is still changing and having to be copied over into our file. I've pinned the commit for the moment so you won't get stray ""can't find libxc fctl"" errors.; - [x] From https://gitlab.com/libxc/libxc/commit/21ee6588bb8039c3c83e5b39d01b2ee4234fe5e3 , I think they've changed over 'set_params' to 'ext_params'. Haven't figured out how to do so psi-side. Not all the set_params lived so the funcs that got dropped are now commented in LibxcFunctionals.cc; - [x] They seems to have dropped lda_set_params entirely. I saw at least one commit msg indicating it was duplicate functionality; - [x] All tests but 4 (+ scf-covereage for me) pass. Fails are of the type below. ```RuntimeError: ; Fatal Error: Matrix::power: C_DSYEV failed; Error occurred in file: /home/psilocaluser/gits/hrw-dgas/psi4/src/psi4/libmints/matrix.cc on line: 2584; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::power(double, double); psi::DIISManager::extrapolate(int, ...); psi::scf::HF::iterations(); psi::scf::HF::compute_energy(); ```. ### April 2018 updates; - [x] psi's fork of Libxc resides in a branch on GH:loriab/libxc . I'd transfer that repo to psi4/libxc except then all the present cmake pulls (to the 3.0 master in that repo) would break.; - [x] added in M05, M052X, M06, M062X, M06HF, M08SO, M08HF, M11; - [x] M11 close (0.00035 E_h) but broken; - [x] MGGA_MVSh & MGGA_MVS broken; - [x] otherwise, test suite is clean; - [x] Need https://gitlab.com/libxc/libxc/merge_requests/65 to go through and hopefully 4.0.5 tag made, then pull over to GH and re-point this PR. ## Status; - [x] Ready to go. Absolutely not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802
https://github.com/psi4/psi4/pull/802:1756,Testability,test,test,1756,"## Description; Consider this a hacked bare minimum. Needs work. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] They are _still_ playing about with fctls so xc_funcs.h is still changing and having to be copied over into our file. I've pinned the commit for the moment so you won't get stray ""can't find libxc fctl"" errors.; - [x] From https://gitlab.com/libxc/libxc/commit/21ee6588bb8039c3c83e5b39d01b2ee4234fe5e3 , I think they've changed over 'set_params' to 'ext_params'. Haven't figured out how to do so psi-side. Not all the set_params lived so the funcs that got dropped are now commented in LibxcFunctionals.cc; - [x] They seems to have dropped lda_set_params entirely. I saw at least one commit msg indicating it was duplicate functionality; - [x] All tests but 4 (+ scf-covereage for me) pass. Fails are of the type below. ```RuntimeError: ; Fatal Error: Matrix::power: C_DSYEV failed; Error occurred in file: /home/psilocaluser/gits/hrw-dgas/psi4/src/psi4/libmints/matrix.cc on line: 2584; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::power(double, double); psi::DIISManager::extrapolate(int, ...); psi::scf::HF::iterations(); psi::scf::HF::compute_energy(); ```. ### April 2018 updates; - [x] psi's fork of Libxc resides in a branch on GH:loriab/libxc . I'd transfer that repo to psi4/libxc except then all the present cmake pulls (to the 3.0 master in that repo) would break.; - [x] added in M05, M052X, M06, M062X, M06HF, M08SO, M08HF, M11; - [x] M11 close (0.00035 E_h) but broken; - [x] MGGA_MVSh & MGGA_MVS broken; - [x] otherwise, test suite is clean; - [x] Need https://gitlab.com/libxc/libxc/merge_requests/65 to go through and hopefully 4.0.5 tag made, then pull over to GH and re-point this PR. ## Status; - [x] Ready to go. Absolutely not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802
https://github.com/psi4/psi4/issues/804:216,Energy Efficiency,charge,charge,216,"Hello all; I've tried to load molecular geometry from XYZ-file. 3; 0 2; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000; H 0.000000000000 0.000000000000 2.275843410000. charge = 0 multiplicity = 2. my input. memory 2 Gb; qmol = qcdb.Molecule.init_with_xyz('mol.xyz'); lmol = geometry(qmol.create_psi4_string_from_molecule()); set basis cc-pVQZ; set reference uhf; hf_e, hf_wfn = energy('scf', return_wfn=True); molden(hf_wfn, 'molden.dat'). I've got the following issue:. ```; Traceback (most recent call last):; File ""/home/vladimir/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 21, in <module>; File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/molecule.py"", line 147, in init_with_xyz; instance.add_atom(el2z[fileAtom], fileX, fileY, fileZ, fileAtom, el2mass[fileAtom], el2z[fileAtom]); File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1173, in add_atom; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""); ```; this exception raises after H atom insertions.; my version Git: Rev {HEAD} add49b9. when I rearranged my XYZ-file to the following. 3; 0 2; H 0.000000000000 0.000000000000 2.275843410000; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000. all works fine. Best wishes, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/804
https://github.com/psi4/psi4/issues/804:426,Energy Efficiency,energy,energy,426,"Hello all; I've tried to load molecular geometry from XYZ-file. 3; 0 2; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000; H 0.000000000000 0.000000000000 2.275843410000. charge = 0 multiplicity = 2. my input. memory 2 Gb; qmol = qcdb.Molecule.init_with_xyz('mol.xyz'); lmol = geometry(qmol.create_psi4_string_from_molecule()); set basis cc-pVQZ; set reference uhf; hf_e, hf_wfn = energy('scf', return_wfn=True); molden(hf_wfn, 'molden.dat'). I've got the following issue:. ```; Traceback (most recent call last):; File ""/home/vladimir/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 21, in <module>; File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/molecule.py"", line 147, in init_with_xyz; instance.add_atom(el2z[fileAtom], fileX, fileY, fileZ, fileAtom, el2mass[fileAtom], el2z[fileAtom]); File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1173, in add_atom; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""); ```; this exception raises after H atom insertions.; my version Git: Rev {HEAD} add49b9. when I rearranged my XYZ-file to the following. 3; 0 2; H 0.000000000000 0.000000000000 2.275843410000; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000. all works fine. Best wishes, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/804
https://github.com/psi4/psi4/issues/804:25,Performance,load,load,25,"Hello all; I've tried to load molecular geometry from XYZ-file. 3; 0 2; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000; H 0.000000000000 0.000000000000 2.275843410000. charge = 0 multiplicity = 2. my input. memory 2 Gb; qmol = qcdb.Molecule.init_with_xyz('mol.xyz'); lmol = geometry(qmol.create_psi4_string_from_molecule()); set basis cc-pVQZ; set reference uhf; hf_e, hf_wfn = energy('scf', return_wfn=True); molden(hf_wfn, 'molden.dat'). I've got the following issue:. ```; Traceback (most recent call last):; File ""/home/vladimir/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 21, in <module>; File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/molecule.py"", line 147, in init_with_xyz; instance.add_atom(el2z[fileAtom], fileX, fileY, fileZ, fileAtom, el2mass[fileAtom], el2z[fileAtom]); File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1173, in add_atom; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""); ```; this exception raises after H atom insertions.; my version Git: Rev {HEAD} add49b9. when I rearranged my XYZ-file to the following. 3; 0 2; H 0.000000000000 0.000000000000 2.275843410000; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000. all works fine. Best wishes, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/804
https://github.com/psi4/psi4/issues/804:1028,Security,Validat,ValidationError,1028,"Hello all; I've tried to load molecular geometry from XYZ-file. 3; 0 2; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000; H 0.000000000000 0.000000000000 2.275843410000. charge = 0 multiplicity = 2. my input. memory 2 Gb; qmol = qcdb.Molecule.init_with_xyz('mol.xyz'); lmol = geometry(qmol.create_psi4_string_from_molecule()); set basis cc-pVQZ; set reference uhf; hf_e, hf_wfn = energy('scf', return_wfn=True); molden(hf_wfn, 'molden.dat'). I've got the following issue:. ```; Traceback (most recent call last):; File ""/home/vladimir/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 21, in <module>; File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/molecule.py"", line 147, in init_with_xyz; instance.add_atom(el2z[fileAtom], fileX, fileY, fileZ, fileAtom, el2mass[fileAtom], el2z[fileAtom]); File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1173, in add_atom; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""); ```; this exception raises after H atom insertions.; my version Git: Rev {HEAD} add49b9. when I rearranged my XYZ-file to the following. 3; 0 2; H 0.000000000000 0.000000000000 2.275843410000; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000. all works fine. Best wishes, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/804
https://github.com/psi4/psi4/pull/805:30,Deployability,update,update,30,## Description; Documentation update for the new dft logic. ## Todos; - [x] Ensure currently existing docs are updated with the new dft logic; - [x] Include new examples on functional customization. Waiting on #799 to be merged to test new examples for the docs. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/805
https://github.com/psi4/psi4/pull/805:111,Deployability,update,updated,111,## Description; Documentation update for the new dft logic. ## Todos; - [x] Ensure currently existing docs are updated with the new dft logic; - [x] Include new examples on functional customization. Waiting on #799 to be merged to test new examples for the docs. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/805
https://github.com/psi4/psi4/pull/805:53,Testability,log,logic,53,## Description; Documentation update for the new dft logic. ## Todos; - [x] Ensure currently existing docs are updated with the new dft logic; - [x] Include new examples on functional customization. Waiting on #799 to be merged to test new examples for the docs. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/805
https://github.com/psi4/psi4/pull/805:136,Testability,log,logic,136,## Description; Documentation update for the new dft logic. ## Todos; - [x] Ensure currently existing docs are updated with the new dft logic; - [x] Include new examples on functional customization. Waiting on #799 to be merged to test new examples for the docs. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/805
https://github.com/psi4/psi4/pull/805:231,Testability,test,test,231,## Description; Documentation update for the new dft logic. ## Todos; - [x] Ensure currently existing docs are updated with the new dft logic; - [x] Include new examples on functional customization. Waiting on #799 to be merged to test new examples for the docs. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/805
https://github.com/psi4/psi4/pull/806:491,Deployability,Release,Release,491,"## Description; Misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix threading for P4C4 now that psi4 doesn't deal directly with OMP_NUM_THREADS; - [x] Devin's ncc module isn't full-fledged in v2.00beta, but let's at least allow it to be selected; - [x] Were throwing ConvError when optking exceeded requested number of cycles but not when it failed internally. Now doing so, fixing  psi4/psi4#800; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/806
https://github.com/psi4/psi4/pull/808:79,Availability,robust,robust,79,Based off the forums and a few issues there are a few tests that are not quite robust enough to test the code rather than a operational tweaks.; - `props2` - The new orientation code requires that this be moved to the COM at every step.; - `props3` - Overall convergence needs to be tightened to move flutter in 64-pole below test threshold.; - `scf-cov` - Convergence needs to be tightened in addition to not using a C2v molecule during a orientation check.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/808
https://github.com/psi4/psi4/pull/808:54,Testability,test,tests,54,Based off the forums and a few issues there are a few tests that are not quite robust enough to test the code rather than a operational tweaks.; - `props2` - The new orientation code requires that this be moved to the COM at every step.; - `props3` - Overall convergence needs to be tightened to move flutter in 64-pole below test threshold.; - `scf-cov` - Convergence needs to be tightened in addition to not using a C2v molecule during a orientation check.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/808
https://github.com/psi4/psi4/pull/808:96,Testability,test,test,96,Based off the forums and a few issues there are a few tests that are not quite robust enough to test the code rather than a operational tweaks.; - `props2` - The new orientation code requires that this be moved to the COM at every step.; - `props3` - Overall convergence needs to be tightened to move flutter in 64-pole below test threshold.; - `scf-cov` - Convergence needs to be tightened in addition to not using a C2v molecule during a orientation check.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/808
https://github.com/psi4/psi4/pull/808:326,Testability,test,test,326,Based off the forums and a few issues there are a few tests that are not quite robust enough to test the code rather than a operational tweaks.; - `props2` - The new orientation code requires that this be moved to the COM at every step.; - `props3` - Overall convergence needs to be tightened to move flutter in 64-pole below test threshold.; - `scf-cov` - Convergence needs to be tightened in addition to not using a C2v molecule during a orientation check.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/808
https://github.com/psi4/psi4/pull/809:4,Deployability,integrat,integration,4,"The integration runs some checks on PRs, notably that C++ code style conforms to `.clang-format`. ## Description; [Danger.Systems](http://danger.systems/ruby/) provides a DSL to perform checks on PRs. It's a Ruby gem that runs on Travis, reads the `Dangerfile` and comments on a PR through a bot.; The current version of the `Dangerfile`:; 1. **Fails PR** if C++ code style does not comply with `.clang-format`; 1. **Fails PR** if Python code style does not comply with `.style.yapf`; 2. **Warns** if PR is classed as work in progress, _i.e._ contains `[WIP]` in the title; 3. **Warns** if PR is classed as trivial, _i.e._ contains `#trivial` in the title; 4. **Fails PR** if there are merge commits in the history; 5. **Warns** if PR introduced code changes (in subdirectories `psi4`, `external`, `cmake`) without adding tests and/or docs. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Integrate with Danger.Systems; - [x] Danger checks that C++ code style complies with `.clang-format`; - [x] Clean up `.travis.yml` from now useless PPA; - [x] Ignore `build*` directories; - [x] Danger checks that Python code style complies with `.style.yapf`; - [x] Enabled caching of some dependencies on Travis. ## Questions; 1. I think it's better to pull this in once `clang-format` has been run over the whole code base.; 2. Where is a good place to document the behavior of the bot?; 3. Are the commented sections in `.travis.yml` supposed to be there for future use?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/809
https://github.com/psi4/psi4/pull/809:956,Deployability,Integrat,Integrate,956,"The integration runs some checks on PRs, notably that C++ code style conforms to `.clang-format`. ## Description; [Danger.Systems](http://danger.systems/ruby/) provides a DSL to perform checks on PRs. It's a Ruby gem that runs on Travis, reads the `Dangerfile` and comments on a PR through a bot.; The current version of the `Dangerfile`:; 1. **Fails PR** if C++ code style does not comply with `.clang-format`; 1. **Fails PR** if Python code style does not comply with `.style.yapf`; 2. **Warns** if PR is classed as work in progress, _i.e._ contains `[WIP]` in the title; 3. **Warns** if PR is classed as trivial, _i.e._ contains `#trivial` in the title; 4. **Fails PR** if there are merge commits in the history; 5. **Warns** if PR introduced code changes (in subdirectories `psi4`, `external`, `cmake`) without adding tests and/or docs. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Integrate with Danger.Systems; - [x] Danger checks that C++ code style complies with `.clang-format`; - [x] Clean up `.travis.yml` from now useless PPA; - [x] Ignore `build*` directories; - [x] Danger checks that Python code style complies with `.style.yapf`; - [x] Enabled caching of some dependencies on Travis. ## Questions; 1. I think it's better to pull this in once `clang-format` has been run over the whole code base.; 2. Where is a good place to document the behavior of the bot?; 3. Are the commented sections in `.travis.yml` supposed to be there for future use?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/809
https://github.com/psi4/psi4/pull/809:4,Integrability,integrat,integration,4,"The integration runs some checks on PRs, notably that C++ code style conforms to `.clang-format`. ## Description; [Danger.Systems](http://danger.systems/ruby/) provides a DSL to perform checks on PRs. It's a Ruby gem that runs on Travis, reads the `Dangerfile` and comments on a PR through a bot.; The current version of the `Dangerfile`:; 1. **Fails PR** if C++ code style does not comply with `.clang-format`; 1. **Fails PR** if Python code style does not comply with `.style.yapf`; 2. **Warns** if PR is classed as work in progress, _i.e._ contains `[WIP]` in the title; 3. **Warns** if PR is classed as trivial, _i.e._ contains `#trivial` in the title; 4. **Fails PR** if there are merge commits in the history; 5. **Warns** if PR introduced code changes (in subdirectories `psi4`, `external`, `cmake`) without adding tests and/or docs. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Integrate with Danger.Systems; - [x] Danger checks that C++ code style complies with `.clang-format`; - [x] Clean up `.travis.yml` from now useless PPA; - [x] Ignore `build*` directories; - [x] Danger checks that Python code style complies with `.style.yapf`; - [x] Enabled caching of some dependencies on Travis. ## Questions; 1. I think it's better to pull this in once `clang-format` has been run over the whole code base.; 2. Where is a good place to document the behavior of the bot?; 3. Are the commented sections in `.travis.yml` supposed to be there for future use?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/809
https://github.com/psi4/psi4/pull/809:956,Integrability,Integrat,Integrate,956,"The integration runs some checks on PRs, notably that C++ code style conforms to `.clang-format`. ## Description; [Danger.Systems](http://danger.systems/ruby/) provides a DSL to perform checks on PRs. It's a Ruby gem that runs on Travis, reads the `Dangerfile` and comments on a PR through a bot.; The current version of the `Dangerfile`:; 1. **Fails PR** if C++ code style does not comply with `.clang-format`; 1. **Fails PR** if Python code style does not comply with `.style.yapf`; 2. **Warns** if PR is classed as work in progress, _i.e._ contains `[WIP]` in the title; 3. **Warns** if PR is classed as trivial, _i.e._ contains `#trivial` in the title; 4. **Fails PR** if there are merge commits in the history; 5. **Warns** if PR introduced code changes (in subdirectories `psi4`, `external`, `cmake`) without adding tests and/or docs. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Integrate with Danger.Systems; - [x] Danger checks that C++ code style complies with `.clang-format`; - [x] Clean up `.travis.yml` from now useless PPA; - [x] Ignore `build*` directories; - [x] Danger checks that Python code style complies with `.style.yapf`; - [x] Enabled caching of some dependencies on Travis. ## Questions; 1. I think it's better to pull this in once `clang-format` has been run over the whole code base.; 2. Where is a good place to document the behavior of the bot?; 3. Are the commented sections in `.travis.yml` supposed to be there for future use?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/809
https://github.com/psi4/psi4/pull/809:1246,Integrability,depend,dependencies,1246,"The integration runs some checks on PRs, notably that C++ code style conforms to `.clang-format`. ## Description; [Danger.Systems](http://danger.systems/ruby/) provides a DSL to perform checks on PRs. It's a Ruby gem that runs on Travis, reads the `Dangerfile` and comments on a PR through a bot.; The current version of the `Dangerfile`:; 1. **Fails PR** if C++ code style does not comply with `.clang-format`; 1. **Fails PR** if Python code style does not comply with `.style.yapf`; 2. **Warns** if PR is classed as work in progress, _i.e._ contains `[WIP]` in the title; 3. **Warns** if PR is classed as trivial, _i.e._ contains `#trivial` in the title; 4. **Fails PR** if there are merge commits in the history; 5. **Warns** if PR introduced code changes (in subdirectories `psi4`, `external`, `cmake`) without adding tests and/or docs. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Integrate with Danger.Systems; - [x] Danger checks that C++ code style complies with `.clang-format`; - [x] Clean up `.travis.yml` from now useless PPA; - [x] Ignore `build*` directories; - [x] Danger checks that Python code style complies with `.style.yapf`; - [x] Enabled caching of some dependencies on Travis. ## Questions; 1. I think it's better to pull this in once `clang-format` has been run over the whole code base.; 2. Where is a good place to document the behavior of the bot?; 3. Are the commented sections in `.travis.yml` supposed to be there for future use?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/809
https://github.com/psi4/psi4/pull/809:178,Performance,perform,perform,178,"The integration runs some checks on PRs, notably that C++ code style conforms to `.clang-format`. ## Description; [Danger.Systems](http://danger.systems/ruby/) provides a DSL to perform checks on PRs. It's a Ruby gem that runs on Travis, reads the `Dangerfile` and comments on a PR through a bot.; The current version of the `Dangerfile`:; 1. **Fails PR** if C++ code style does not comply with `.clang-format`; 1. **Fails PR** if Python code style does not comply with `.style.yapf`; 2. **Warns** if PR is classed as work in progress, _i.e._ contains `[WIP]` in the title; 3. **Warns** if PR is classed as trivial, _i.e._ contains `#trivial` in the title; 4. **Fails PR** if there are merge commits in the history; 5. **Warns** if PR introduced code changes (in subdirectories `psi4`, `external`, `cmake`) without adding tests and/or docs. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Integrate with Danger.Systems; - [x] Danger checks that C++ code style complies with `.clang-format`; - [x] Clean up `.travis.yml` from now useless PPA; - [x] Ignore `build*` directories; - [x] Danger checks that Python code style complies with `.style.yapf`; - [x] Enabled caching of some dependencies on Travis. ## Questions; 1. I think it's better to pull this in once `clang-format` has been run over the whole code base.; 2. Where is a good place to document the behavior of the bot?; 3. Are the commented sections in `.travis.yml` supposed to be there for future use?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/809
https://github.com/psi4/psi4/pull/809:822,Testability,test,tests,822,"The integration runs some checks on PRs, notably that C++ code style conforms to `.clang-format`. ## Description; [Danger.Systems](http://danger.systems/ruby/) provides a DSL to perform checks on PRs. It's a Ruby gem that runs on Travis, reads the `Dangerfile` and comments on a PR through a bot.; The current version of the `Dangerfile`:; 1. **Fails PR** if C++ code style does not comply with `.clang-format`; 1. **Fails PR** if Python code style does not comply with `.style.yapf`; 2. **Warns** if PR is classed as work in progress, _i.e._ contains `[WIP]` in the title; 3. **Warns** if PR is classed as trivial, _i.e._ contains `#trivial` in the title; 4. **Fails PR** if there are merge commits in the history; 5. **Warns** if PR introduced code changes (in subdirectories `psi4`, `external`, `cmake`) without adding tests and/or docs. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Integrate with Danger.Systems; - [x] Danger checks that C++ code style complies with `.clang-format`; - [x] Clean up `.travis.yml` from now useless PPA; - [x] Ignore `build*` directories; - [x] Danger checks that Python code style complies with `.style.yapf`; - [x] Enabled caching of some dependencies on Travis. ## Questions; 1. I think it's better to pull this in once `clang-format` has been run over the whole code base.; 2. Where is a good place to document the behavior of the bot?; 3. Are the commented sections in `.travis.yml` supposed to be there for future use?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/809
https://github.com/psi4/psi4/pull/810:345,Deployability,update,update,345,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/810
https://github.com/psi4/psi4/pull/810:546,Deployability,Release,Release,546,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/810
https://github.com/psi4/psi4/pull/810:1445,Deployability,Update,Updated,1445,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/810
https://github.com/psi4/psi4/pull/810:93,Energy Efficiency,Energy,Energy-and-Density,93,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/810
https://github.com/psi4/psi4/pull/810:1071,Energy Efficiency,energy,energy,1071,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/810
https://github.com/psi4/psi4/pull/810:1298,Energy Efficiency,energy,energy,1298,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/810
https://github.com/psi4/psi4/pull/810:1112,Safety,avoid,avoids,1112,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/810
https://github.com/psi4/psi4/pull/810:450,Testability,test,test,450,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/810
https://github.com/psi4/psi4/pull/810:1404,Testability,test,tests,1404,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/810
https://github.com/psi4/psi4/pull/810:1505,Testability,test,test,1505,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/810
https://github.com/psi4/psi4/pull/810:1305,Usability,clear,clearly,1305,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/810
https://github.com/psi4/psi4/pull/811:1260,Availability,Error,Error,1260,"## Description; There were a few more `set dft_functional fctl` in the full test suite. This should polish it off. ## Accomplished; - [x] Pin pybind11 to 2.0.0 so psi doesn't pick up any incompatible newer versions lying around; - [x] long tests all pass. ## Questions; - [ ] @dgasmith, should `gradient('scf', dft_functional='bp86')` work?. tests/dftd3/grad/input.dat; ```; ...; grad = gradient('bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by name"") #TEST; clean(). grad = gradient('scf', dft_functional='bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by options"") #TEST; ```; ```; 	Outsourced dft gradients called by name...........................PASSED; Traceback (most recent call last):; File ""stage/usr/local/psi4/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2055, in run_scf_gradient; grad = core.scfgrad(ref_wfn). RuntimeError: ; Fatal Error: V: RKS should have only one D Matrix; Error occurred in file: /home/psilocaluser/gits/hrw-matt/psi4/src/psi4/libfock/v.cc on line: 915; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::RV::compute_gradient(); psi::scfgrad::SCFGrad::compute_gradient(); psi::scfgrad::scfgrad(std::shared_ptr<psi::Wavefunction>, psi::Options&); py_psi_scfgrad(std::shared_ptr<psi::Wavefunction>); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/811
https://github.com/psi4/psi4/pull/811:1305,Availability,Error,Error,1305,"## Description; There were a few more `set dft_functional fctl` in the full test suite. This should polish it off. ## Accomplished; - [x] Pin pybind11 to 2.0.0 so psi doesn't pick up any incompatible newer versions lying around; - [x] long tests all pass. ## Questions; - [ ] @dgasmith, should `gradient('scf', dft_functional='bp86')` work?. tests/dftd3/grad/input.dat; ```; ...; grad = gradient('bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by name"") #TEST; clean(). grad = gradient('scf', dft_functional='bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by options"") #TEST; ```; ```; 	Outsourced dft gradients called by name...........................PASSED; Traceback (most recent call last):; File ""stage/usr/local/psi4/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2055, in run_scf_gradient; grad = core.scfgrad(ref_wfn). RuntimeError: ; Fatal Error: V: RKS should have only one D Matrix; Error occurred in file: /home/psilocaluser/gits/hrw-matt/psi4/src/psi4/libfock/v.cc on line: 915; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::RV::compute_gradient(); psi::scfgrad::SCFGrad::compute_gradient(); psi::scfgrad::scfgrad(std::shared_ptr<psi::Wavefunction>, psi::Options&); py_psi_scfgrad(std::shared_ptr<psi::Wavefunction>); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/811
https://github.com/psi4/psi4/pull/811:76,Testability,test,test,76,"## Description; There were a few more `set dft_functional fctl` in the full test suite. This should polish it off. ## Accomplished; - [x] Pin pybind11 to 2.0.0 so psi doesn't pick up any incompatible newer versions lying around; - [x] long tests all pass. ## Questions; - [ ] @dgasmith, should `gradient('scf', dft_functional='bp86')` work?. tests/dftd3/grad/input.dat; ```; ...; grad = gradient('bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by name"") #TEST; clean(). grad = gradient('scf', dft_functional='bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by options"") #TEST; ```; ```; 	Outsourced dft gradients called by name...........................PASSED; Traceback (most recent call last):; File ""stage/usr/local/psi4/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2055, in run_scf_gradient; grad = core.scfgrad(ref_wfn). RuntimeError: ; Fatal Error: V: RKS should have only one D Matrix; Error occurred in file: /home/psilocaluser/gits/hrw-matt/psi4/src/psi4/libfock/v.cc on line: 915; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::RV::compute_gradient(); psi::scfgrad::SCFGrad::compute_gradient(); psi::scfgrad::scfgrad(std::shared_ptr<psi::Wavefunction>, psi::Options&); py_psi_scfgrad(std::shared_ptr<psi::Wavefunction>); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/811
https://github.com/psi4/psi4/pull/811:240,Testability,test,tests,240,"## Description; There were a few more `set dft_functional fctl` in the full test suite. This should polish it off. ## Accomplished; - [x] Pin pybind11 to 2.0.0 so psi doesn't pick up any incompatible newer versions lying around; - [x] long tests all pass. ## Questions; - [ ] @dgasmith, should `gradient('scf', dft_functional='bp86')` work?. tests/dftd3/grad/input.dat; ```; ...; grad = gradient('bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by name"") #TEST; clean(). grad = gradient('scf', dft_functional='bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by options"") #TEST; ```; ```; 	Outsourced dft gradients called by name...........................PASSED; Traceback (most recent call last):; File ""stage/usr/local/psi4/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2055, in run_scf_gradient; grad = core.scfgrad(ref_wfn). RuntimeError: ; Fatal Error: V: RKS should have only one D Matrix; Error occurred in file: /home/psilocaluser/gits/hrw-matt/psi4/src/psi4/libfock/v.cc on line: 915; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::RV::compute_gradient(); psi::scfgrad::SCFGrad::compute_gradient(); psi::scfgrad::scfgrad(std::shared_ptr<psi::Wavefunction>, psi::Options&); py_psi_scfgrad(std::shared_ptr<psi::Wavefunction>); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/811
https://github.com/psi4/psi4/pull/811:342,Testability,test,tests,342,"## Description; There were a few more `set dft_functional fctl` in the full test suite. This should polish it off. ## Accomplished; - [x] Pin pybind11 to 2.0.0 so psi doesn't pick up any incompatible newer versions lying around; - [x] long tests all pass. ## Questions; - [ ] @dgasmith, should `gradient('scf', dft_functional='bp86')` work?. tests/dftd3/grad/input.dat; ```; ...; grad = gradient('bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by name"") #TEST; clean(). grad = gradient('scf', dft_functional='bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by options"") #TEST; ```; ```; 	Outsourced dft gradients called by name...........................PASSED; Traceback (most recent call last):; File ""stage/usr/local/psi4/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2055, in run_scf_gradient; grad = core.scfgrad(ref_wfn). RuntimeError: ; Fatal Error: V: RKS should have only one D Matrix; Error occurred in file: /home/psilocaluser/gits/hrw-matt/psi4/src/psi4/libfock/v.cc on line: 915; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::RV::compute_gradient(); psi::scfgrad::SCFGrad::compute_gradient(); psi::scfgrad::scfgrad(std::shared_ptr<psi::Wavefunction>, psi::Options&); py_psi_scfgrad(std::shared_ptr<psi::Wavefunction>); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/811
https://github.com/psi4/psi4/pull/811:485,Testability,TEST,TEST,485,"## Description; There were a few more `set dft_functional fctl` in the full test suite. This should polish it off. ## Accomplished; - [x] Pin pybind11 to 2.0.0 so psi doesn't pick up any incompatible newer versions lying around; - [x] long tests all pass. ## Questions; - [ ] @dgasmith, should `gradient('scf', dft_functional='bp86')` work?. tests/dftd3/grad/input.dat; ```; ...; grad = gradient('bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by name"") #TEST; clean(). grad = gradient('scf', dft_functional='bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by options"") #TEST; ```; ```; 	Outsourced dft gradients called by name...........................PASSED; Traceback (most recent call last):; File ""stage/usr/local/psi4/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2055, in run_scf_gradient; grad = core.scfgrad(ref_wfn). RuntimeError: ; Fatal Error: V: RKS should have only one D Matrix; Error occurred in file: /home/psilocaluser/gits/hrw-matt/psi4/src/psi4/libfock/v.cc on line: 915; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::RV::compute_gradient(); psi::scfgrad::SCFGrad::compute_gradient(); psi::scfgrad::scfgrad(std::shared_ptr<psi::Wavefunction>, psi::Options&); py_psi_scfgrad(std::shared_ptr<psi::Wavefunction>); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/811
https://github.com/psi4/psi4/pull/811:630,Testability,TEST,TEST,630,"## Description; There were a few more `set dft_functional fctl` in the full test suite. This should polish it off. ## Accomplished; - [x] Pin pybind11 to 2.0.0 so psi doesn't pick up any incompatible newer versions lying around; - [x] long tests all pass. ## Questions; - [ ] @dgasmith, should `gradient('scf', dft_functional='bp86')` work?. tests/dftd3/grad/input.dat; ```; ...; grad = gradient('bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by name"") #TEST; clean(). grad = gradient('scf', dft_functional='bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by options"") #TEST; ```; ```; 	Outsourced dft gradients called by name...........................PASSED; Traceback (most recent call last):; File ""stage/usr/local/psi4/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2055, in run_scf_gradient; grad = core.scfgrad(ref_wfn). RuntimeError: ; Fatal Error: V: RKS should have only one D Matrix; Error occurred in file: /home/psilocaluser/gits/hrw-matt/psi4/src/psi4/libfock/v.cc on line: 915; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::RV::compute_gradient(); psi::scfgrad::SCFGrad::compute_gradient(); psi::scfgrad::scfgrad(std::shared_ptr<psi::Wavefunction>, psi::Options&); py_psi_scfgrad(std::shared_ptr<psi::Wavefunction>); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/811
https://github.com/psi4/psi4/issues/812:632,Deployability,install,installed,632,"Hi guys,. I was dealing with some compilation issues on some C code we have that was relying on standard libraries coming from conda, and after discussion with the conda guys (https://github.com/ContinuumIO/anaconda-issues/issues/6215), it seems like they have a newer version of gcc (under the package `gcc_linux-64`, for Linux). I assume you were using your own gcc version 5 because version 4 on the defaults was not sufficient for you. Do you have any plans on relying on the gcc from conda?. I'm also concerned about psi4 `gcc-5` and defaults `libgcc` ""writing"" to the same .so files. I.e., if I have both `libgcc` and `gcc-5` installed, running `conda inspect linkages --all` gives me lots of warnings like these:. ```; WARNING:conda_build.inspect:Warning: /home/joao/miniconda3/lib/libgcc_s.so.1 comes from multiple packages: defaults::libgcc-5.2.0-0, psi4::gcc-5-5.2.0-1, and defaults::libgcc-ng-7.2.0-hcbc56d2_1; ```; Thanks a lot!. (cc @raimis)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812
https://github.com/psi4/psi4/pull/814:40,Deployability,Update,Update,40,"## Description; Bump some dependencies. Update psi to pybind11 2.2.1. Deal accompanying visibility issues through Jet's `PSI_API` macro. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CheMPS2 to 1.8.4; - [x] ~Libint to latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814
https://github.com/psi4/psi4/pull/814:674,Deployability,Release,Release,674,"## Description; Bump some dependencies. Update psi to pybind11 2.2.1. Deal accompanying visibility issues through Jet's `PSI_API` macro. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CheMPS2 to 1.8.4; - [x] ~Libint to latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814
https://github.com/psi4/psi4/pull/814:1120,Deployability,upgrade,upgrade,1120,"'s `PSI_API` macro. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CheMPS2 to 1.8.4; - [x] ~Libint to latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not always be the case. I believe some of pybind's asserted control over symbols is actually meant to allow better mixing ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814
https://github.com/psi4/psi4/pull/814:26,Integrability,depend,dependencies,26,"## Description; Bump some dependencies. Update psi to pybind11 2.2.1. Deal accompanying visibility issues through Jet's `PSI_API` macro. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CheMPS2 to 1.8.4; - [x] ~Libint to latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814
https://github.com/psi4/psi4/pull/814:1268,Integrability,depend,dependency,1268,"o latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not always be the case. I believe some of pybind's asserted control over symbols is actually meant to allow better mixing of pb projects, in which case we should also consider doing as they advise and only exporting the symbols we need. ## Status; - [x] Ready to go. This is now pointing to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814
https://github.com/psi4/psi4/pull/814:636,Modifiability,plugin,plugins,636,"## Description; Bump some dependencies. Update psi to pybind11 2.2.1. Deal accompanying visibility issues through Jet's `PSI_API` macro. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CheMPS2 to 1.8.4; - [x] ~Libint to latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814
https://github.com/psi4/psi4/pull/814:1338,Modifiability,plugin,plugins,1338,"o latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not always be the case. I believe some of pybind's asserted control over symbols is actually meant to allow better mixing of pb projects, in which case we should also consider doing as they advise and only exporting the symbols we need. ## Status; - [x] Ready to go. This is now pointing to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814
https://github.com/psi4/psi4/pull/814:1446,Testability,test,test,1446,"d this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not always be the case. I believe some of pybind's asserted control over symbols is actually meant to allow better mixing of pb projects, in which case we should also consider doing as they advise and only exporting the symbols we need. ## Status; - [x] Ready to go. This is now pointing to scfitertopy branch, so ok to merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814
https://github.com/psi4/psi4/pull/814:2047,Testability,assert,asserted,2047,"d this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not always be the case. I believe some of pybind's asserted control over symbols is actually meant to allow better mixing of pb projects, in which case we should also consider doing as they advise and only exporting the symbols we need. ## Status; - [x] Ready to go. This is now pointing to scfitertopy branch, so ok to merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814
https://github.com/psi4/psi4/pull/814:843,Usability,clear,cleared,843,"## Description; Bump some dependencies. Update psi to pybind11 2.2.1. Deal accompanying visibility issues through Jet's `PSI_API` macro. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CheMPS2 to 1.8.4; - [x] ~Libint to latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814
https://github.com/psi4/psi4/issues/815:429,Deployability,Update,Update,429,"While I love the fact that you can output cube files and display the density and ESP in tandem in tools like paraview or VMD, I'm at a bit at a loss to understand the units of the density and ESP values that I am getting back. From my preliminary analysis, it seems the ESP has units of MJ/mol, and the electron density is in electrons/au^3. We should document this and not leave it up to guesswork. I would propose that we:; a) Update the documentation for the cubeprop page with the units of the things that you can get back; b) Update the cube files that are generated with the units of the things that are in the cube file; the first two lines in the cube file spec are for metadata, and we could certainly for instance have a second line that reads like:; ```; Property: Dt [electrons/au^3]; ```; instead of ; ```; Property: Dt; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/815
https://github.com/psi4/psi4/issues/815:531,Deployability,Update,Update,531,"While I love the fact that you can output cube files and display the density and ESP in tandem in tools like paraview or VMD, I'm at a bit at a loss to understand the units of the density and ESP values that I am getting back. From my preliminary analysis, it seems the ESP has units of MJ/mol, and the electron density is in electrons/au^3. We should document this and not leave it up to guesswork. I would propose that we:; a) Update the documentation for the cubeprop page with the units of the things that you can get back; b) Update the cube files that are generated with the units of the things that are in the cube file; the first two lines in the cube file spec are for metadata, and we could certainly for instance have a second line that reads like:; ```; Property: Dt [electrons/au^3]; ```; instead of ; ```; Property: Dt; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/815
https://github.com/psi4/psi4/issues/816:388,Energy Efficiency,energy,energy,388,"Looks like psi4 is not following instabilities with ROHF. The issue is present in the current master. Debug case:; ```; molecule mol {; 0 1; H 0.530330 0.000000 0.0; H 0.000000 0.530330 0.0; H -0.530330 0.000000 0.0; H -0.000000 -0.530330 0.0; }. memory 31500 mb. set basis aug-pcseg-1; set reference rohf; set guess core; set scf_type pk; set stability_analysis follow; scf_e, scf_wfn = energy('scf', return_wfn = True); ```. This converges as; ```; @ROHF iter 1: -1.35786249373809 -1.35786e+00 3.29066e-02 ; @ROHF iter 2: -1.76576328233758 -4.07901e-01 2.42353e-03 DIIS; @ROHF iter 3: -1.76782078804299 -2.05751e-03 6.21952e-04 DIIS; @ROHF iter 4: -1.76802124530854 -2.00457e-04 4.60781e-05 DIIS; @ROHF iter 5: -1.76802266421582 -1.41891e-06 3.48831e-06 DIIS; @ROHF iter 6: -1.76802267513349 -1.09177e-08 6.89002e-07 DIIS; SO Integrals not on disk, computing...done.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Lowest ROHF->ROHF stability eigenvalues:-; B1g -0.022531 B2u 0.142418 B3g 0.159990 B1g 0.196160 ; ```; The lowest eigenvalue is significantly negative, and the solution is indeed a saddle point. However, the program does **not** proceed by a SCF restart from displaced orbitals.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/816
https://github.com/psi4/psi4/issues/817:44,Energy Efficiency,adapt,adapting,44,"Hi guys,. @raimis found this bug and we are adapting to it on our code, but I find it kind of an ugly workaround. Have you experienced it?. @raimis, can you provide some more details? Thanks!. João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817
https://github.com/psi4/psi4/issues/817:44,Modifiability,adapt,adapting,44,"Hi guys,. @raimis found this bug and we are adapting to it on our code, but I find it kind of an ugly workaround. Have you experienced it?. @raimis, can you provide some more details? Thanks!. João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817
https://github.com/psi4/psi4/pull/818:262,Deployability,Release,Release,262,## Description; Parsing the PCM section of the input requires changing directories. As noted in #817 this is not really documented anywhere and affects users. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] CWD is saved before parsing PCM section and restored at the end. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818
https://github.com/psi4/psi4/pull/819:199,Availability,error,error,199,The manual mentioned `ENABLE_CheMPS2` instead of `ENABLE_PCMSolver`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Fix error in the manual. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/819
https://github.com/psi4/psi4/pull/819:172,Deployability,Release,Release,172,The manual mentioned `ENABLE_CheMPS2` instead of `ENABLE_PCMSolver`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Fix error in the manual. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/819
https://github.com/psi4/psi4/issues/820:5442,Availability,FAILURE,FAILURES,5442,"FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/pr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:7823,Availability,Error,Error,7823,"object at 0x7f6fc4cd6b48>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; C",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:7918,Availability,Error,Error,7918,"rrect wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:13332,Availability,Error,Error,13332,"object at 0x7f6fc4b93fc0>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; C",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:13427,Availability,Error,Error,13427,"rrect wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Tripl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:17676,Availability,failure,failure,17676,"__________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:20633,Availability,Error,Error,20633,"object at 0x7f6fc4be7678>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; ________________________________________________________________ test_psi4_basic _________________________________________________________________. d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:20728,Availability,Error,Error,20728,"rrect wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; ________________________________________________________________ test_psi4_basic _________________________________________________________________. def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.9",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:23764,Availability,Error,Error,23764,"object at 0x7f6fc4ccd780>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; _________________________________________________________________ test_psi4_cas __________________________________________________________________. d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:23859,Availability,Error,Error,23859,"rrect wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; _________________________________________________________________ test_psi4_cas __________________________________________________________________. def test_psi4_cas():; """"""casscf-sp""""""; #! CASSCF/6-31G** energy point; ; geom = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:27192,Availability,Error,Error,27192,"object at 0x7f6fef0343b8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; __________________________________________________________________ test_psi4_cc __________________________________________________________________. d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:27287,Availability,Error,Error,27287,"rrect wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; __________________________________________________________________ test_psi4_cc __________________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:30833,Availability,Error,Error,30833,"object at 0x7f6fc4a59eb8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; P",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:30928,Availability,Error,Error,30928,"rrect wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Performing finite difference calculations; 5 displacements needed ... 1; __________________________________________________________",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:42305,Availability,Error,Error,42305,"object at 0x7f6fc473c360>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:42400,Availability,Error,Error,42400,"rrect wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; ========================================================",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:6115,Energy Efficiency,energy,energy,6115,"6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4cd6b48>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:6231,Energy Efficiency,energy,energy,6231,"_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4cd6b48>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:6257,Energy Efficiency,energy,energy,6257,"_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4cd6b48>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:8991,Energy Efficiency,energy,energy,8991,"must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, mul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:9066,Energy Efficiency,energy,energy,9066,"he most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.00000000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:9141,Energy Efficiency,energy,energy,9141,"n(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational const",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:9216,Energy Efficiency,energy,energy,9216,"har> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constant",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:9820,Energy Efficiency,charge,charge,9820,"------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contractio",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:10301,Energy Efficiency,Charge,Charge,10301," 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packag",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:10500,Energy Efficiency,Energy,Energy,10500,"---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:11624,Energy Efficiency,energy,energy,11624,"end = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4b93fc0>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:11740,Energy Efficiency,energy,energy,11740,"armonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4b93fc0>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:11766,Energy Efficiency,energy,energy,11766,"armonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4b93fc0>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:14503,Energy Efficiency,energy,energy,14503,"st add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:14578,Energy Efficiency,energy,energy,14578,"most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.00000000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:14653,Energy Efficiency,energy,energy,14653,"td::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational const",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:14728,Energy Efficiency,energy,energy,14728,"> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constant",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:15332,Energy Efficiency,charge,charge,15332,"---------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contractio",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:15813,Energy Efficiency,Charge,Charge,15813," 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; ___________________________________________________________________ test_json ____________________________________________________________________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""drive",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:16012,Energy Efficiency,Energy,Energy,16012,"---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; ___________________________________________________________________ test_json ____________________________________________________________________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_j",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:16704,Energy Efficiency,energy,energy,16704,"1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; ___________________________________________________________________ test_json ____________________________________________________________________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:18715,Energy Efficiency,energy,energy,18715,".; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; > e = psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:790: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4be7678>, functional = None. def scf_wavefunction_fa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:19041,Energy Efficiency,energy,energy,19041,"------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; > e = psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:790: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4be7678>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:19067,Energy Efficiency,energy,energy,19067,"------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; > e = psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:790: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4be7678>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:21687,Energy Efficiency,energy,energy,21687,"ock to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; ________________________________________________________________ test_psi4_basic _________________________________________________________________. def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); > psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:15: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:21849,Energy Efficiency,energy,energy,21849,"4; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; ________________________________________________________________ test_psi4_basic _________________________________________________________________. def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); > psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:15: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4ccd780>, functional = None. def scf_wavefunction_facto",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:22172,Energy Efficiency,energy,energy,22172,"shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; ________________________________________________________________ test_psi4_basic _________________________________________________________________. def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); > psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:15: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4ccd780>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:22198,Energy Efficiency,energy,energy,22198,"shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; ________________________________________________________________ test_psi4_basic _________________________________________________________________. def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); > psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:15: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4ccd780>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:24840,Energy Efficiency,energy,energy,24840,"e{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; _________________________________________________________________ test_psi4_cas __________________________________________________________________. def test_psi4_cas():; """"""casscf-sp""""""; #! CASSCF/6-31G** energy point; ; geom = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""); ; psi4.set_options({; ""basis"" : '6-31G**',; ""reference"" : 'rhf',; ""scf_type"" : 'pk',; ""mcscf_algorithm"" : 'ah',; ""qc_module"" : 'detci',; ""nat_orbs"" : True}); ; > cisd_energy, cisd_wfn = psi4.energy(""CISD"", return_wfn=True). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:38: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:947: in select_cisd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:25110,Energy Efficiency,energy,energy,25110," std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; _________________________________________________________________ test_psi4_cas __________________________________________________________________. def test_psi4_cas():; """"""casscf-sp""""""; #! CASSCF/6-31G** energy point; ; geom = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""); ; psi4.set_options({; ""basis"" : '6-31G**',; ""reference"" : 'rhf',; ""scf_type"" : 'pk',; ""mcscf_algorithm"" : 'ah',; ""qc_module"" : 'detci',; ""nat_orbs"" : True}); ; > cisd_energy, cisd_wfn = psi4.energy(""CISD"", return_wfn=True). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:38: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:947: in select_cisd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:25451,Energy Efficiency,energy,energy,25451,"tr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; _________________________________________________________________ test_psi4_cas __________________________________________________________________. def test_psi4_cas():; """"""casscf-sp""""""; #! CASSCF/6-31G** energy point; ; geom = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""); ; psi4.set_options({; ""basis"" : '6-31G**',; ""reference"" : 'rhf',; ""scf_type"" : 'pk',; ""mcscf_algorithm"" : 'ah',; ""qc_module"" : 'detci',; ""nat_orbs"" : True}); ; > cisd_energy, cisd_wfn = psi4.energy(""CISD"", return_wfn=True). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:38: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:947: in select_cisd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fef0343b8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:25477,Energy Efficiency,energy,energy,25477,"tr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; _________________________________________________________________ test_psi4_cas __________________________________________________________________. def test_psi4_cas():; """"""casscf-sp""""""; #! CASSCF/6-31G** energy point; ; geom = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""); ; psi4.set_options({; ""basis"" : '6-31G**',; ""reference"" : 'rhf',; ""scf_type"" : 'pk',; ""mcscf_algorithm"" : 'ah',; ""qc_module"" : 'detci',; ""nat_orbs"" : True}); ; > cisd_energy, cisd_wfn = psi4.energy(""CISD"", return_wfn=True). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:38: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:947: in select_cisd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fef0343b8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:28942,Energy Efficiency,energy,energy,28942,"da3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; __________________________________________________________________ test_psi4_cc __________________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: in select_ccsd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a59eb8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:29092,Energy Efficiency,energy,energy,29092,"______________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: in select_ccsd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a59eb8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:29118,Energy Efficiency,energy,energy,29118,"______________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: in select_ccsd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a59eb8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:32194,Energy Efficiency,energy,energy,32194,"_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Performing finite difference calculations; 5 displacements needed ... 1; ________________________________________________________________ test_psi4_dfmp2 _________________________________________________________________. def test_psi4_dfmp2():; """"""dfmp2-1""""""; #! Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy; #! using automatic counterpoise correction. Monomers are specified using Cartesian coordinates.; ; Enuc = 235.946620315069168; Ecp = -0.0224119246; ; formic_dim = psi4.geometry(""""""; 0 1; C -1.888896 -0.179692 0.000000; O -1.493280 1.073689 0.000000; O -1.170435 -1.166590 0.000000; H -2.979488 -0.258829 0.000000; H -0.498833 1.107195 0.000000; --; 0 1; C 1.888896 0.179692 0.000000; O 1.493280 -1.073689 0.000000; O 1.170435 1.166590 0.000000; H 2.979488 0.258829 0.000000; H 0.498833 -1.107195 0.000000; units angstrom; no_reorient; """"""); ; psi4.set_options({; 'basis': 'cc-pvdz',; 'df_basis_scf': 'cc-pvdz-jkfit',; 'df_basis_mp2': 'cc-pvdz-ri',; # not necessary to specify df_basis* for most basis sets; 'scf_type': 'df',; 'guess': 'sad',; 'd_convergence': 11,; }); ; > e_cp = psi4.energy('mp2', bsse_type='cp'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:112: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:32987,Energy Efficiency,energy,energy,32987,"mp2 _________________________________________________________________. def test_psi4_dfmp2():; """"""dfmp2-1""""""; #! Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy; #! using automatic counterpoise correction. Monomers are specified using Cartesian coordinates.; ; Enuc = 235.946620315069168; Ecp = -0.0224119246; ; formic_dim = psi4.geometry(""""""; 0 1; C -1.888896 -0.179692 0.000000; O -1.493280 1.073689 0.000000; O -1.170435 -1.166590 0.000000; H -2.979488 -0.258829 0.000000; H -0.498833 1.107195 0.000000; --; 0 1; C 1.888896 0.179692 0.000000; O 1.493280 -1.073689 0.000000; O 1.170435 1.166590 0.000000; H 2.979488 0.258829 0.000000; H 0.498833 -1.107195 0.000000; units angstrom; no_reorient; """"""); ; psi4.set_options({; 'basis': 'cc-pvdz',; 'df_basis_scf': 'cc-pvdz-jkfit',; 'df_basis_mp2': 'cc-pvdz-ri',; # not necessary to specify df_basis* for most basis sets; 'scf_type': 'df',; 'guess': 'sad',; 'd_convergence': 11,; }); ; > e_cp = psi4.energy('mp2', bsse_type='cp'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:112: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:415: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver_nbody.py:303: in nbody_gufunc; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . name = 'mp2', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f6fc9d20298>}, reference = 'RHF', mtd",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:33327,Energy Efficiency,energy,energy,33327,"-0.0224119246; ; formic_dim = psi4.geometry(""""""; 0 1; C -1.888896 -0.179692 0.000000; O -1.493280 1.073689 0.000000; O -1.170435 -1.166590 0.000000; H -2.979488 -0.258829 0.000000; H -0.498833 1.107195 0.000000; --; 0 1; C 1.888896 0.179692 0.000000; O 1.493280 -1.073689 0.000000; O 1.170435 1.166590 0.000000; H 2.979488 0.258829 0.000000; H 0.498833 -1.107195 0.000000; units angstrom; no_reorient; """"""); ; psi4.set_options({; 'basis': 'cc-pvdz',; 'df_basis_scf': 'cc-pvdz-jkfit',; 'df_basis_mp2': 'cc-pvdz-ri',; # not necessary to specify df_basis* for most basis sets; 'scf_type': 'df',; 'guess': 'sad',; 'd_convergence': 11,; }); ; > e_cp = psi4.energy('mp2', bsse_type='cp'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:112: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:415: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver_nbody.py:303: in nbody_gufunc; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . name = 'mp2', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f6fc9d20298>}, reference = 'RHF', mtd_type = 'DF', module = 'DETCI'; func = None. def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules.; ; """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_opti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:33368,Energy Efficiency,energy,energy,33368,"6 -0.179692 0.000000; O -1.493280 1.073689 0.000000; O -1.170435 -1.166590 0.000000; H -2.979488 -0.258829 0.000000; H -0.498833 1.107195 0.000000; --; 0 1; C 1.888896 0.179692 0.000000; O 1.493280 -1.073689 0.000000; O 1.170435 1.166590 0.000000; H 2.979488 0.258829 0.000000; H 0.498833 -1.107195 0.000000; units angstrom; no_reorient; """"""); ; psi4.set_options({; 'basis': 'cc-pvdz',; 'df_basis_scf': 'cc-pvdz-jkfit',; 'df_basis_mp2': 'cc-pvdz-ri',; # not necessary to specify df_basis* for most basis sets; 'scf_type': 'df',; 'guess': 'sad',; 'd_convergence': 11,; }); ; > e_cp = psi4.energy('mp2', bsse_type='cp'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:112: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:415: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver_nbody.py:303: in nbody_gufunc; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . name = 'mp2', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f6fc9d20298>}, reference = 'RHF', mtd_type = 'DF', module = 'DETCI'; func = None. def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules.; ; """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2/detci/fnocc; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:33389,Energy Efficiency,energy,energy,33389,"6 -0.179692 0.000000; O -1.493280 1.073689 0.000000; O -1.170435 -1.166590 0.000000; H -2.979488 -0.258829 0.000000; H -0.498833 1.107195 0.000000; --; 0 1; C 1.888896 0.179692 0.000000; O 1.493280 -1.073689 0.000000; O 1.170435 1.166590 0.000000; H 2.979488 0.258829 0.000000; H 0.498833 -1.107195 0.000000; units angstrom; no_reorient; """"""); ; psi4.set_options({; 'basis': 'cc-pvdz',; 'df_basis_scf': 'cc-pvdz-jkfit',; 'df_basis_mp2': 'cc-pvdz-ri',; # not necessary to specify df_basis* for most basis sets; 'scf_type': 'df',; 'guess': 'sad',; 'd_convergence': 11,; }); ; > e_cp = psi4.energy('mp2', bsse_type='cp'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:112: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:415: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver_nbody.py:303: in nbody_gufunc; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . name = 'mp2', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f6fc9d20298>}, reference = 'RHF', mtd_type = 'DF', module = 'DETCI'; func = None. def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules.; ; """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2/detci/fnocc; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:33661,Energy Efficiency,energy,energy,33661,": 'cc-pvdz',; 'df_basis_scf': 'cc-pvdz-jkfit',; 'df_basis_mp2': 'cc-pvdz-ri',; # not necessary to specify df_basis* for most basis sets; 'scf_type': 'df',; 'guess': 'sad',; 'd_convergence': 11,; }); ; > e_cp = psi4.energy('mp2', bsse_type='cp'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:112: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:415: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver_nbody.py:303: in nbody_gufunc; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . name = 'mp2', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f6fc9d20298>}, reference = 'RHF', mtd_type = 'DF', module = 'DETCI'; func = None. def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules.; ; """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2/detci/fnocc; ; # MP2_TYPE exists largely for py-side reasoning, so must manage it; # here rather than passing to c-side unprepared for validation; ; func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; fun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:33687,Energy Efficiency,energy,energy,33687,": 'cc-pvdz',; 'df_basis_scf': 'cc-pvdz-jkfit',; 'df_basis_mp2': 'cc-pvdz-ri',; # not necessary to specify df_basis* for most basis sets; 'scf_type': 'df',; 'guess': 'sad',; 'd_convergence': 11,; }); ; > e_cp = psi4.energy('mp2', bsse_type='cp'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:112: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:415: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver_nbody.py:303: in nbody_gufunc; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . name = 'mp2', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f6fc9d20298>}, reference = 'RHF', mtd_type = 'DF', module = 'DETCI'; func = None. def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules.; ; """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2/detci/fnocc; ; # MP2_TYPE exists largely for py-side reasoning, so must manage it; # here rather than passing to c-side unprepared for validation; ; func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; fun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:34126,Energy Efficiency,energy,energy,34126," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:415: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver_nbody.py:303: in nbody_gufunc; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . name = 'mp2', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f6fc9d20298>}, reference = 'RHF', mtd_type = 'DF', module = 'DETCI'; func = None. def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules.; ; """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2/detci/fnocc; ; # MP2_TYPE exists largely for py-side reasoning, so must manage it; # here rather than passing to c-side unprepared for validation; ; func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:36219,Energy Efficiency,energy,energy,36219,"f mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference in ['RKS', 'UKS']:; if mtd_type == 'DF':; if module in ['', 'DFMP2']:; func = run_dfmp2; ; if func is None:; > raise ManagedMethodError(['select_mp2', name, 'MP2_TYPE', mtd_type, reference, module]); E psi4.driver.p4util.exceptions.ManagedMethodError: select_mp2: Method 'mp2' with MP2_TYPE 'DF' and REFERENCE 'RHF' not directable to QC_MODULE 'DETCI'. /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:121: ManagedMethodError; _________________________________________________________________ test_psi4_sapt _________________________________________________________________. def test_psi4_sapt():; """"""sapt1""""""; #! SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF; #! and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates.; ; Eref = [ 85.189064196429101, -0.00359915058, 0.00362911158,; -0.00083137117, -0.00150542374, -0.00230683391 ]; ; ethene_ethyne = psi4.geometry(""""""; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; """"""); ; # this molecule will crash test if molecule passing broken; barrier = psi4.geometry(""""""; 0 1; He; """"""); ; psi4.set_options({; ""basis"": ""cc-pvdz"",; ""guess"": ""sad"",; ""scf_type"": ""df"",; ""sad_print"": 2,; ""d_convergence"": 11,; ""puream"": True,; ""print"": 1}); ; > psi4.energy('sapt0', molecule=ethene_ethyne). /home/joao/miniconda3/lib/python3.6/site-packa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:37121,Energy Efficiency,energy,energy,37121,":; """"""sapt1""""""; #! SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF; #! and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates.; ; Eref = [ 85.189064196429101, -0.00359915058, 0.00362911158,; -0.00083137117, -0.00150542374, -0.00230683391 ]; ; ethene_ethyne = psi4.geometry(""""""; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; """"""); ; # this molecule will crash test if molecule passing broken; barrier = psi4.geometry(""""""; 0 1; He; """"""); ; psi4.set_options({; ""basis"": ""cc-pvdz"",; ""guess"": ""sad"",; ""scf_type"": ""df"",; ""sad_print"": 2,; ""d_convergence"": 11,; ""puream"": True,; ""print"": 1}); ; > psi4.energy('sapt0', molecule=ethene_ethyne). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:158: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:3200: in run_sapt; monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a5c830>, funct",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:37471,Energy Efficiency,energy,energy,37471,"-0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; """"""); ; # this molecule will crash test if molecule passing broken; barrier = psi4.geometry(""""""; 0 1; He; """"""); ; psi4.set_options({; ""basis"": ""cc-pvdz"",; ""guess"": ""sad"",; ""scf_type"": ""df"",; ""sad_print"": 2,; ""d_convergence"": 11,; ""puream"": True,; ""print"": 1}); ; > psi4.energy('sapt0', molecule=ethene_ethyne). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:158: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:3200: in run_sapt; monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a5c830>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; su",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:37497,Energy Efficiency,energy,energy,37497,"-0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; """"""); ; # this molecule will crash test if molecule passing broken; barrier = psi4.geometry(""""""; 0 1; He; """"""); ; psi4.set_options({; ""basis"": ""cc-pvdz"",; ""guess"": ""sad"",; ""scf_type"": ""df"",; ""sad_print"": 2,; ""d_convergence"": 11,; ""puream"": True,; ""print"": 1}); ; > psi4.energy('sapt0', molecule=ethene_ethyne). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:158: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:3200: in run_sapt; monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a5c830>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; su",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:39957,Energy Efficiency,energy,energy,39957,"rfunc); E MemoryError: std::bad_alloc. /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: MemoryError; _____________________________________________________________ test_psi4_scfproperty ______________________________________________________________. def test_psi4_scfproperty():; """"""scf-property""""""; #! UFH and B3LYP cc-pVQZ properties for the CH2 molecule.; ; with open('grid.dat', 'w') as handle:; handle.write(""""""\; 0.0 0.0 0.0; 1.1 1.3 1.4; """"""); ; ch2 = psi4.geometry(""""""; 0 3; c; h 1 b1; h 1 b1 2 a1; ; b1 = 1.0; a1 = 125.0; """"""); ; # Get a reasonable guess, to save some iterations; psi4.set_options({; ""scf_type"": ""pk"",; ""basis"": ""6-31G**"",; ""e_convergence"": 8,; ""docc"": [2, 0, 0, 1],; ""socc"": [1, 0, 1, 0],; ""reference"": ""uhf""}); ; ch2.update_geometry(); assert psi4.compare_values(6.648418918908746, ch2.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy""); ; props = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES',; 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MAYER_INDICES',; 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI',; 'MULTIPOLE(5)', 'NO_OCCUPATIONS']; ; > psi4.property('scf', properties=props). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:211: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:823: in property; wfn = procedures['property'][lowername](lowername, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2370: in run_scf_property; scf_wfn = run_scf(name, scf_do_dipole=False, do_timer=False, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:43343,Energy Efficiency,energy,energy,43343,"re.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; =============================================================== 1 tests deselected ===============================================================; =================================== 10 failed, 4 passed, 4 skipped, 1 deselected, 1 xpassed in 193.31 seconds ====================================; ```. I excluded the `test_gdma` there because it's even weirder, as it crashes without output (`pytest -v -k 'test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`):. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../cur",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:10813,Integrability,Contract,Contraction,10813,"------ ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:10998,Integrability,Interface,Interface,10998,"994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:16325,Integrability,Contract,Contraction,16325,"------ ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; ___________________________________________________________________ test_json ____________________________________________________________________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:16510,Integrability,Interface,Interface,16510,"994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; ___________________________________________________________________ test_json ____________________________________________________________________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:17760,Integrability,message,message,17760," = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; > e = psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:17880,Integrability,message,message,17880,"dient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; > e = psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:790: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:597,Performance,cache,cachedir,597,"Hi guys,. I have been experimenting with symlinks to conda distributions. They have been working generally fine, but I am facing some issues with psi4. I've started with the tests. Running: `pytest -v /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/miniconda3` is a real/physical path, works fine:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: .cache; rootdir: /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests, inifile:; collected 20 items . test_aaa_profiling.py::test_threaded_blas XPASS; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:608,Performance,cache,cache,608,"Hi guys,. I have been experimenting with symlinks to conda distributions. They have been working generally fine, but I am facing some issues with psi4. I've started with the tests. Running: `pytest -v /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/miniconda3` is a real/physical path, works fine:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: .cache; rootdir: /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests, inifile:; collected 20 items . test_aaa_profiling.py::test_threaded_blas XPASS; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:2049,Performance,cache,cachedir,2049,"_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/pyth",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:2078,Performance,cache,cache,2078,"four SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- minicon",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:9356,Performance,Load,Loading,9356,"scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:14868,Performance,Load,Loading,14868,"::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:17650,Performance,Perform,Performs,17650,"__________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:28276,Performance,optimiz,optimization,28276,"run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; __________________________________________________________________ test_psi4_cc __________________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:28425,Performance,optimiz,optimize,28425,"nt 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; __________________________________________________________________ test_psi4_cc __________________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: in select_ccsd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:28752,Performance,optimiz,optimize,28752,"unctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; __________________________________________________________________ test_psi4_cc __________________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: in select_ccsd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:31852,Performance,Perform,Performing,31852,"func); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Performing finite difference calculations; 5 displacements needed ... 1; ________________________________________________________________ test_psi4_dfmp2 _________________________________________________________________. def test_psi4_dfmp2():; """"""dfmp2-1""""""; #! Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy; #! using automatic counterpoise correction. Monomers are specified using Cartesian coordinates.; ; Enuc = 235.946620315069168; Ecp = -0.0224119246; ; formic_dim = psi4.geometry(""""""; 0 1; C -1.888896 -0.179692 0.000000; O -1.493280 1.073689 0.000000; O -1.170435 -1.166590 0.000000; H -2.979488 -0.258829 0.000000; H -0.498833 1.107195 0.000000; --; 0 1; C 1.888896 0.179692 0.000000; O 1.493280 -1.073689 0.000000; O 1.170435 1.166590 0.000000; H 2.979488 0.258829 0.000000; H 0.498833 -1.107195 0.000000; units angstrom; no_reorient; """"""); ; psi4.set_options({; 'basis': 'cc-pvdz',; 'df_basis_scf'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:34174,Performance,perform,performance,34174," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:415: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver_nbody.py:303: in nbody_gufunc; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . name = 'mp2', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f6fc9d20298>}, reference = 'RHF', mtd_type = 'DF', module = 'DETCI'; func = None. def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules.; ; """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2/detci/fnocc; ; # MP2_TYPE exists largely for py-side reasoning, so must manage it; # here rather than passing to c-side unprepared for validation; ; func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:44143,Performance,cache,cachedir,44143,"function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; =============================================================== 1 tests deselected ===============================================================; =================================== 10 failed, 4 passed, 4 skipped, 1 deselected, 1 xpassed in 193.31 seconds ====================================; ```. I excluded the `test_gdma` there because it's even weirder, as it crashes without output (`pytest -v -k 'test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`):. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py [joao@computer02 tests]$ ; ```. I would accept if you tell me that I should not be using symlinks, but I would appreciate any feedback possible :). Thanks,; João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:44172,Performance,cache,cache,44172,"function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; =============================================================== 1 tests deselected ===============================================================; =================================== 10 failed, 4 passed, 4 skipped, 1 deselected, 1 xpassed in 193.31 seconds ====================================; ```. I excluded the `test_gdma` there because it's even weirder, as it crashes without output (`pytest -v -k 'test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`):. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py [joao@computer02 tests]$ ; ```. I would accept if you tell me that I should not be using symlinks, but I would appreciate any feedback possible :). Thanks,; João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:7588,Security,Validat,ValidationError,7588,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4cd6b48>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:13097,Security,Validat,ValidationError,13097,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4b93fc0>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:20398,Security,Validat,ValidationError,20398,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4be7678>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:23529,Security,Validat,ValidationError,23529,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4ccd780>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:26957,Security,Validat,ValidationError,26957,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fef0343b8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:30598,Security,Validat,ValidationError,30598,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a59eb8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:34521,Security,validat,validation,34521,"le = 'DETCI'; func = None. def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules.; ; """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2/detci/fnocc; ; # MP2_TYPE exists largely for py-side reasoning, so must manage it; # here rather than passing to c-side unprepared for validation; ; func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference in ['RKS', 'UKS']:; if mtd_type == 'DF':; if module in ['', 'DFMP2']:; func = run_dfmp2; ; if func is None:; > raise ManagedMethodError(['select_mp2', name, 'MP2_TYPE', mtd_type, reference, module]); E psi4.driver.p4util.exceptions.ManagedMethodError: select_mp2: Method 'mp2' with MP2_TYPE 'DF' and REFERENCE 'RHF' not directable to QC_MODULE 'DETCI'. /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:121: ManagedMethodError; ________________________________________________",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:38854,Security,Validat,ValidationError,38854,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a5c830>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E MemoryError: std::bad_alloc. /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: MemoryError; _____________________________________________________________ test_psi4_scfproperty ______________________________________________________________. def test_psi4_scfproperty():; """"""scf-property""""""; #! UFH and B3LYP cc-pVQZ properties for the CH2 molecule.; ; with open('grid.dat', 'w') as handle:; handle.write(""""""\; 0.0 0.0 0.0; 1.1 1.3 1.4; """"""); ; ch2 = psi4.geometry(""""""; 0 3; c; h 1 b1; h 1 b1 2 a1; ; b1 = 1.0; a1 = 125.0; """"""); ; # Get a reasonable guess, to save some iterations; psi4.set_options({; ""scf_type"": ""pk"",; ""basis"": ""6-31G**"",; ""e_convergence"": 8,; ""docc"": [2, 0, 0, 1],; ""socc"": [1, 0, 1, 0],; ""reference"": ""uhf""}); ; ch2.update_geometry(); assert psi4.compare_value",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:42070,Security,Validat,ValidationError,42070,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc473c360>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:174,Testability,test,tests,174,"Hi guys,. I have been experimenting with symlinks to conda distributions. They have been working generally fine, but I am facing some issues with psi4. I've started with the tests. Running: `pytest -v /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/miniconda3` is a real/physical path, works fine:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: .cache; rootdir: /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests, inifile:; collected 20 items . test_aaa_profiling.py::test_threaded_blas XPASS; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:256,Testability,test,tests,256,"Hi guys,. I have been experimenting with symlinks to conda distributions. They have been working generally fine, but I am facing some issues with psi4. I've started with the tests. Running: `pytest -v /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/miniconda3` is a real/physical path, works fine:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: .cache; rootdir: /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests, inifile:; collected 20 items . test_aaa_profiling.py::test_threaded_blas XPASS; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:405,Testability,test,test,405,"Hi guys,. I have been experimenting with symlinks to conda distributions. They have been working generally fine, but I am facing some issues with psi4. I've started with the tests. Running: `pytest -v /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/miniconda3` is a real/physical path, works fine:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: .cache; rootdir: /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests, inifile:; collected 20 items . test_aaa_profiling.py::test_threaded_blas XPASS; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:679,Testability,test,tests,679,"Hi guys,. I have been experimenting with symlinks to conda distributions. They have been working generally fine, but I am facing some issues with psi4. I've started with the tests. Running: `pytest -v /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/miniconda3` is a real/physical path, works fine:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: .cache; rootdir: /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests, inifile:; collected 20 items . test_aaa_profiling.py::test_threaded_blas XPASS; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:1708,Testability,test,tests,1708,"cted 20 items . test_aaa_profiling.py::test_threaded_blas XPASS; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:1857,Testability,test,test,1857,"ddons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-pa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:2196,Testability,test,tests,2196,"PPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:2291,Testability,test,tests,2291,"_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/si",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:2385,Testability,test,tests,2385," test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:2464,Testability,test,tests,2464,"D. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/sit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:2553,Testability,test,tests,2553,".33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:2635,Testability,test,tests,2635," -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-pa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:2723,Testability,test,tests,2723,"where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-pa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:2803,Testability,test,tests,2803,"======================================================= test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-pa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:2891,Testability,test,tests,2891,"===================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:2972,Testability,test,tests,2972,".1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:3060,Testability,test,tests,3060," ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:3144,Testability,test,tests,3144,/../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:3232,Testability,test,tests,3232,threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:3310,Testability,test,tests,3310,ofiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:3398,Testability,test,tests,3398,addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:3479,Testability,test,tests,3479,dons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:3567,Testability,test,tests,3567,ddons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:3646,Testability,test,tests,3646,t_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:3734,Testability,test,tests,3734,t_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:3814,Testability,test,tests,3814,t_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:3903,Testability,test,tests,3903,_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/s,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:3990,Testability,test,tests,3990,s.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:4079,Testability,test,tests,4079,.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-pac,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:4163,Testability,test,tests,4163,.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packa,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:4252,Testability,test,tests,4252,py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:4330,Testability,test,tests,4330,py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/si,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:4418,Testability,test,tests,4418,.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ===========================================,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:4501,Testability,test,tests,4501,y FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ================================================,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:4587,Testability,test,tests,4587,.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ________________________________________________________________,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:4668,Testability,test,tests,4668,y FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ___________________________________________________________________,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:4754,Testability,test,tests,4754,".py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:4834,Testability,test,tests,4834,".py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:4920,Testability,test,tests,4920,"ons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:5003,Testability,test,tests,5003,"_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:5089,Testability,test,tests,5089,"est_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:5171,Testability,test,tests,5171,"/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/minicon",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:5257,Testability,test,tests,5257,"sts/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:5346,Testability,test,tests,5346,"dons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:5834,Testability,test,tests,5834,"4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wav",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:6065,Testability,test,tests,6065,"hon3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4cd6b48>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:8853,Testability,Test,Test,8853,"must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, mul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:11343,Testability,test,tests,11343,"= 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wav",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:11574,Testability,test,tests,11574,"shold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4b93fc0>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:14362,Testability,Test,Test,14362,"st add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:17040,Testability,assert,assert,17040,"0e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; ___________________________________________________________________ test_json ____________________________________________________________________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-pa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:17118,Testability,test,test,17118,"e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; ___________________________________________________________________ test_json ____________________________________________________________________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:17128,Testability,assert,assert,17128,"e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; ___________________________________________________________________ test_json ____________________________________________________________________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:17252,Testability,test,tests,17252,"f AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; ___________________________________________________________________ test_json ____________________________________________________________________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:17712,Testability,test,test,17712,"/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:17860,Testability,Test,TestComparisonError,17860,"dient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; > e = psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:790: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:17922,Testability,Test,TestComparisonError,17922,"3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; > e = psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:790: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:18074,Testability,Test,TestComparisonError,18074,", json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; > e = psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:790: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:18252,Testability,test,test,18252,", json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; > e = psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:790: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:18785,Testability,test,tests,18785,"ted value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; > e = psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:790: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4be7678>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the cor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:21919,Testability,test,tests,21919,"xception::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; ________________________________________________________________ test_psi4_basic _________________________________________________________________. def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); > psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:15: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4ccd780>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the corre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:25198,Testability,test,tests,25198,"ons&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; _________________________________________________________________ test_psi4_cas __________________________________________________________________. def test_psi4_cas():; """"""casscf-sp""""""; #! CASSCF/6-31G** energy point; ; geom = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""); ; psi4.set_options({; ""basis"" : '6-31G**',; ""reference"" : 'rhf',; ""scf_type"" : 'pk',; ""mcscf_algorithm"" : 'ah',; ""qc_module"" : 'detci',; ""nat_orbs"" : True}); ; > cisd_energy, cisd_wfn = psi4.energy(""CISD"", return_wfn=True). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:38: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:947: in select_cisd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:28498,Testability,test,tests,28498,"on(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; __________________________________________________________________ test_psi4_cc __________________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: in select_ccsd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/pyth",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:33073,Testability,test,tests,33073,"_. def test_psi4_dfmp2():; """"""dfmp2-1""""""; #! Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy; #! using automatic counterpoise correction. Monomers are specified using Cartesian coordinates.; ; Enuc = 235.946620315069168; Ecp = -0.0224119246; ; formic_dim = psi4.geometry(""""""; 0 1; C -1.888896 -0.179692 0.000000; O -1.493280 1.073689 0.000000; O -1.170435 -1.166590 0.000000; H -2.979488 -0.258829 0.000000; H -0.498833 1.107195 0.000000; --; 0 1; C 1.888896 0.179692 0.000000; O 1.493280 -1.073689 0.000000; O 1.170435 1.166590 0.000000; H 2.979488 0.258829 0.000000; H 0.498833 -1.107195 0.000000; units angstrom; no_reorient; """"""); ; psi4.set_options({; 'basis': 'cc-pvdz',; 'df_basis_scf': 'cc-pvdz-jkfit',; 'df_basis_mp2': 'cc-pvdz-ri',; # not necessary to specify df_basis* for most basis sets; 'scf_type': 'df',; 'guess': 'sad',; 'd_convergence': 11,; }); ; > e_cp = psi4.energy('mp2', bsse_type='cp'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:112: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:415: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver_nbody.py:303: in nbody_gufunc; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . name = 'mp2', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f6fc9d20298>}, reference = 'RHF', mtd_type = 'DF', module = 'DETCI'; func = None. def select_mp2(name, **k",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:36886,Testability,test,test,36886,"iconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:121: ManagedMethodError; _________________________________________________________________ test_psi4_sapt _________________________________________________________________. def test_psi4_sapt():; """"""sapt1""""""; #! SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF; #! and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates.; ; Eref = [ 85.189064196429101, -0.00359915058, 0.00362911158,; -0.00083137117, -0.00150542374, -0.00230683391 ]; ; ethene_ethyne = psi4.geometry(""""""; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; """"""); ; # this molecule will crash test if molecule passing broken; barrier = psi4.geometry(""""""; 0 1; He; """"""); ; psi4.set_options({; ""basis"": ""cc-pvdz"",; ""guess"": ""sad"",; ""scf_type"": ""df"",; ""sad_print"": 2,; ""d_convergence"": 11,; ""puream"": True,; ""print"": 1}); ; > psi4.energy('sapt0', molecule=ethene_ethyne). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:158: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:3200: in run_sapt; monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:37217,Testability,test,tests,37217,"tion energy, using the cc-pVDZ-JKFIT RI basis for SCF; #! and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates.; ; Eref = [ 85.189064196429101, -0.00359915058, 0.00362911158,; -0.00083137117, -0.00150542374, -0.00230683391 ]; ; ethene_ethyne = psi4.geometry(""""""; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; """"""); ; # this molecule will crash test if molecule passing broken; barrier = psi4.geometry(""""""; 0 1; He; """"""); ; psi4.set_options({; ""basis"": ""cc-pvdz"",; ""guess"": ""sad"",; ""scf_type"": ""df"",; ""sad_print"": 2,; ""d_convergence"": 11,; ""puream"": True,; ""print"": 1}); ; > psi4.energy('sapt0', molecule=ethene_ethyne). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:158: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:3200: in run_sapt; monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a5c830>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:39857,Testability,assert,assert,39857," ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E MemoryError: std::bad_alloc. /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: MemoryError; _____________________________________________________________ test_psi4_scfproperty ______________________________________________________________. def test_psi4_scfproperty():; """"""scf-property""""""; #! UFH and B3LYP cc-pVQZ properties for the CH2 molecule.; ; with open('grid.dat', 'w') as handle:; handle.write(""""""\; 0.0 0.0 0.0; 1.1 1.3 1.4; """"""); ; ch2 = psi4.geometry(""""""; 0 3; c; h 1 b1; h 1 b1 2 a1; ; b1 = 1.0; a1 = 125.0; """"""); ; # Get a reasonable guess, to save some iterations; psi4.set_options({; ""scf_type"": ""pk"",; ""basis"": ""6-31G**"",; ""e_convergence"": 8,; ""docc"": [2, 0, 0, 1],; ""socc"": [1, 0, 1, 0],; ""reference"": ""uhf""}); ; ch2.update_geometry(); assert psi4.compare_values(6.648418918908746, ch2.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy""); ; props = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES',; 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MAYER_INDICES',; 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI',; 'MULTIPOLE(5)', 'NO_OCCUPATIONS']; ; > psi4.property('scf', properties=props). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:211: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:823: in property; wfn = procedures['property'][lowername](lowername, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2370: in run_scf_property; scf_wfn = run_scf(name, scf_do_dipole=False, do_timer=False, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:40293,Testability,test,tests,40293,"___________________________________________________. def test_psi4_scfproperty():; """"""scf-property""""""; #! UFH and B3LYP cc-pVQZ properties for the CH2 molecule.; ; with open('grid.dat', 'w') as handle:; handle.write(""""""\; 0.0 0.0 0.0; 1.1 1.3 1.4; """"""); ; ch2 = psi4.geometry(""""""; 0 3; c; h 1 b1; h 1 b1 2 a1; ; b1 = 1.0; a1 = 125.0; """"""); ; # Get a reasonable guess, to save some iterations; psi4.set_options({; ""scf_type"": ""pk"",; ""basis"": ""6-31G**"",; ""e_convergence"": 8,; ""docc"": [2, 0, 0, 1],; ""socc"": [1, 0, 1, 0],; ""reference"": ""uhf""}); ; ch2.update_geometry(); assert psi4.compare_values(6.648418918908746, ch2.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy""); ; props = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES',; 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MAYER_INDICES',; 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI',; 'MULTIPOLE(5)', 'NO_OCCUPATIONS']; ; > psi4.property('scf', properties=props). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:211: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:823: in property; wfn = procedures['property'][lowername](lowername, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2370: in run_scf_property; scf_wfn = run_scf(name, scf_do_dipole=False, do_timer=False, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:43465,Testability,test,tests,43465,"n line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; =============================================================== 1 tests deselected ===============================================================; =================================== 10 failed, 4 passed, 4 skipped, 1 deselected, 1 xpassed in 193.31 seconds ====================================; ```. I excluded the `test_gdma` there because it's even weirder, as it crashes without output (`pytest -v -k 'test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`):. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py [joao@computer02 tests]$ ; ```. I would accept if you tell me that I should not be using symlinks, but I would appreciate any fee",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:43868,Testability,test,tests,43868,"function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; =============================================================== 1 tests deselected ===============================================================; =================================== 10 failed, 4 passed, 4 skipped, 1 deselected, 1 xpassed in 193.31 seconds ====================================; ```. I excluded the `test_gdma` there because it's even weirder, as it crashes without output (`pytest -v -k 'test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`):. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py [joao@computer02 tests]$ ; ```. I would accept if you tell me that I should not be using symlinks, but I would appreciate any feedback possible :). Thanks,; João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:43951,Testability,test,test,43951,"function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; =============================================================== 1 tests deselected ===============================================================; =================================== 10 failed, 4 passed, 4 skipped, 1 deselected, 1 xpassed in 193.31 seconds ====================================; ```. I excluded the `test_gdma` there because it's even weirder, as it crashes without output (`pytest -v -k 'test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`):. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py [joao@computer02 tests]$ ; ```. I would accept if you tell me that I should not be using symlinks, but I would appreciate any feedback possible :). Thanks,; João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:44290,Testability,test,tests,44290,"function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; =============================================================== 1 tests deselected ===============================================================; =================================== 10 failed, 4 passed, 4 skipped, 1 deselected, 1 xpassed in 193.31 seconds ====================================; ```. I excluded the `test_gdma` there because it's even weirder, as it crashes without output (`pytest -v -k 'test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`):. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py [joao@computer02 tests]$ ; ```. I would accept if you tell me that I should not be using symlinks, but I would appreciate any feedback possible :). Thanks,; João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:44369,Testability,test,tests,44369,"function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; =============================================================== 1 tests deselected ===============================================================; =================================== 10 failed, 4 passed, 4 skipped, 1 deselected, 1 xpassed in 193.31 seconds ====================================; ```. I excluded the `test_gdma` there because it's even weirder, as it crashes without output (`pytest -v -k 'test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`):. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py [joao@computer02 tests]$ ; ```. I would accept if you tell me that I should not be using symlinks, but I would appreciate any feedback possible :). Thanks,; João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:44407,Testability,test,tests,44407,"function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; =============================================================== 1 tests deselected ===============================================================; =================================== 10 failed, 4 passed, 4 skipped, 1 deselected, 1 xpassed in 193.31 seconds ====================================; ```. I excluded the `test_gdma` there because it's even weirder, as it crashes without output (`pytest -v -k 'test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`):. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py [joao@computer02 tests]$ ; ```. I would accept if you tell me that I should not be using symlinks, but I would appreciate any feedback possible :). Thanks,; João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/issues/820:44516,Usability,feedback,feedback,44516,"function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; =============================================================== 1 tests deselected ===============================================================; =================================== 10 failed, 4 passed, 4 skipped, 1 deselected, 1 xpassed in 193.31 seconds ====================================; ```. I excluded the `test_gdma` there because it's even weirder, as it crashes without output (`pytest -v -k 'test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`):. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py [joao@computer02 tests]$ ; ```. I would accept if you tell me that I should not be using symlinks, but I would appreciate any feedback possible :). Thanks,; João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820
https://github.com/psi4/psi4/pull/822:174,Deployability,Release,Release,174,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Added unit labels to density and ESP.; * **User-Facing for Release Notes**. ## Questions; - [ ] @fevangelista, how do the units look to you?; - [ ] Should units be applied to https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libcubeprop/cubeprop.cc#L192-L196. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/822
https://github.com/psi4/psi4/issues/823:197,Availability,error,error,197,"Hi, I'm the freshman in psi4. ; I want to try to put auxiliary basis set directly instead of creating a gbs file.; Should this idea make sense in psi4?; I try the file below, but always get syntax error. I find auxiliary basis set for iodine, and give it a name, ijkfit. set {; df_basis_sapt {; assign I ijkfit{; spherical. I 0. S 3 1.00; 78.663624500 0.22672393800E-01; 48.541031400 -0.18152349840; 29.953788800 0.98312521180; S 1 1.00; 18.484236200 1.0000000000; S 1 1.00; 11.406633900 1.0000000000; S 1 1.00; 7.0391304000 1.0000000000; S 1 1.00; 4.3439548000 1.0000000000; S 1 1.00; 2.6807457000 1.0000000000; S 1 1.00; 1.6543571000 1.0000000000; S 1 1.00; 1.0209523000 1.0000000000; S 1 1.00; 0.63006230000 1.0000000000; S 1 1.00; 0.38883260000 1.0000000000; S 1 1.00; 0.23996180000 1.0000000000; P 3 1.00; 58.564943900 0.47818500000E-04; 32.524986300 0.91692464400E-01; 18.063612600 -0.99578737170; P 1 1.00; 10.032273100 1.0000000000; P 1 1.00; 5.5718636000 1.0000000000; P 1 1.00; 3.0946187000 1.0000000000; P 1 1.00; 1.7187729000 1.0000000000; P 1 1.00; 0.95462700000 1.0000000000; P 1 1.00; 0.53021480000 1.0000000000; P 1 1.00; 0.29449110000 1.0000000000; P 1 1.00; 0.16356630000 1.0000000000; P 1 1.00; 0.90848100000E-01 1.0000000000; D 2 1.00; 36.660416700 0.38284697300E-01; 20.124038000 0.99926687220; D 1 1.00; 11.073863500 1.0000000000; D 1 1.00; 6.1069764000 1.0000000000; D 1 1.00; 3.3742113000 1.0000000000; D 1 1.00; 1.8672931000 1.0000000000; D 1 1.00; 1.0347167000 1.0000000000; D 1 1.00; 0.57394910000 1.0000000000; D 1 1.00; 0.31859720000 1.0000000000; D 1 1.00; 0.17692960000 1.0000000000; D 1 1.00; 0.98270400000E-01 1.0000000000; F 2 1.00; 23.924298800 0.52150940000E-03; 12.079185400 0.99999986400; F 1 1.00; 6.0988158000 1.0000000000; F 1 1.00; 3.0793646000 1.0000000000; F 1 1.00; 1.5241930000 1.0000000000; F 1 1.00; 0.76960140000 1.0000000000; F 1 1.00; 0.39640310000 1.0000000000; F 1 1.00; 0.20015500000 1.0000000000; G 2 1.00; 13.390088800 0.36144881600E-01; 6.82854",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/823
https://github.com/psi4/psi4/pull/824:319,Availability,avail,available,319,"## Description; Frozen Natural Orbitals were implemented for DF-CCSD and DF-CCSD(T) energies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] FNOs are implemented for MP2.5, MP3, LCCD, CCD, CCSD, CCSD(T), and CCSD(AT).; - [] Both DF and CD options are available (only for RHF ref for now).; - [] The required changes were made in proc.py and proc_table.py. ; - [] Relevant doc files are revised.; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/824
https://github.com/psi4/psi4/pull/824:484,Deployability,Release,Release,484,"## Description; Frozen Natural Orbitals were implemented for DF-CCSD and DF-CCSD(T) energies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] FNOs are implemented for MP2.5, MP3, LCCD, CCD, CCSD, CCSD(T), and CCSD(AT).; - [] Both DF and CD options are available (only for RHF ref for now).; - [] The required changes were made in proc.py and proc_table.py. ; - [] Relevant doc files are revised.; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/824
https://github.com/psi4/psi4/pull/826:71,Availability,avail,avail,71,"## Description; I hit a system that was raising [putenv and setenv not avail](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L136). Rather than solve it, decided (with support) to clean environment variables out of `P::e`. Only active uses were PSI_SCRATCH and PSIDATADIR. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replaced all the PSI_SCRATCH with calls directly to psio.get_default_path(). Also cleared that fn out so it truly defaults to `/tmp/`, not TMP, TEMP, TMPDIR, then /tmp/.; - [x] Once all the parsing's py-side might be able to drop PSIDATADIR entirely. But for now, moved it to its own slot as `P::e.[gs]et_datadir()`; - [x] Can't tell if you're dealing with Clang or AppleClang by `#defines`, so lowered cxxstandard cutoff to permit Intel + !AppleClang to pass.; - [x] `FindOpenMP.cmake` attaches a lib to try_run that isn't needed just to extract versions. Shift OMP detection so cxxstandard doesn't complain about unfindable lib; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/826
https://github.com/psi4/psi4/pull/826:1070,Deployability,Release,Release,1070,"## Description; I hit a system that was raising [putenv and setenv not avail](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L136). Rather than solve it, decided (with support) to clean environment variables out of `P::e`. Only active uses were PSI_SCRATCH and PSIDATADIR. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replaced all the PSI_SCRATCH with calls directly to psio.get_default_path(). Also cleared that fn out so it truly defaults to `/tmp/`, not TMP, TEMP, TMPDIR, then /tmp/.; - [x] Once all the parsing's py-side might be able to drop PSIDATADIR entirely. But for now, moved it to its own slot as `P::e.[gs]et_datadir()`; - [x] Can't tell if you're dealing with Clang or AppleClang by `#defines`, so lowered cxxstandard cutoff to permit Intel + !AppleClang to pass.; - [x] `FindOpenMP.cmake` attaches a lib to try_run that isn't needed just to extract versions. Shift OMP detection so cxxstandard doesn't complain about unfindable lib; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/826
https://github.com/psi4/psi4/pull/826:229,Modifiability,variab,variables,229,"## Description; I hit a system that was raising [putenv and setenv not avail](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L136). Rather than solve it, decided (with support) to clean environment variables out of `P::e`. Only active uses were PSI_SCRATCH and PSIDATADIR. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replaced all the PSI_SCRATCH with calls directly to psio.get_default_path(). Also cleared that fn out so it truly defaults to `/tmp/`, not TMP, TEMP, TMPDIR, then /tmp/.; - [x] Once all the parsing's py-side might be able to drop PSIDATADIR entirely. But for now, moved it to its own slot as `P::e.[gs]et_datadir()`; - [x] Can't tell if you're dealing with Clang or AppleClang by `#defines`, so lowered cxxstandard cutoff to permit Intel + !AppleClang to pass.; - [x] `FindOpenMP.cmake` attaches a lib to try_run that isn't needed just to extract versions. Shift OMP detection so cxxstandard doesn't complain about unfindable lib; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/826
https://github.com/psi4/psi4/pull/826:986,Safety,detect,detection,986,"## Description; I hit a system that was raising [putenv and setenv not avail](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L136). Rather than solve it, decided (with support) to clean environment variables out of `P::e`. Only active uses were PSI_SCRATCH and PSIDATADIR. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replaced all the PSI_SCRATCH with calls directly to psio.get_default_path(). Also cleared that fn out so it truly defaults to `/tmp/`, not TMP, TEMP, TMPDIR, then /tmp/.; - [x] Once all the parsing's py-side might be able to drop PSIDATADIR entirely. But for now, moved it to its own slot as `P::e.[gs]et_datadir()`; - [x] Can't tell if you're dealing with Clang or AppleClang by `#defines`, so lowered cxxstandard cutoff to permit Intel + !AppleClang to pass.; - [x] `FindOpenMP.cmake` attaches a lib to try_run that isn't needed just to extract versions. Shift OMP detection so cxxstandard doesn't complain about unfindable lib; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/826
https://github.com/psi4/psi4/pull/826:501,Usability,clear,cleared,501,"## Description; I hit a system that was raising [putenv and setenv not avail](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L136). Rather than solve it, decided (with support) to clean environment variables out of `P::e`. Only active uses were PSI_SCRATCH and PSIDATADIR. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replaced all the PSI_SCRATCH with calls directly to psio.get_default_path(). Also cleared that fn out so it truly defaults to `/tmp/`, not TMP, TEMP, TMPDIR, then /tmp/.; - [x] Once all the parsing's py-side might be able to drop PSIDATADIR entirely. But for now, moved it to its own slot as `P::e.[gs]et_datadir()`; - [x] Can't tell if you're dealing with Clang or AppleClang by `#defines`, so lowered cxxstandard cutoff to permit Intel + !AppleClang to pass.; - [x] `FindOpenMP.cmake` attaches a lib to try_run that isn't needed just to extract versions. Shift OMP detection so cxxstandard doesn't complain about unfindable lib; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/826
https://github.com/psi4/psi4/issues/827:169,Availability,error,error,169,"Hi,. When I submit a wB97M-V calculation using the SG-1 grid (recommended in the wB97M-V paper: http://aip.scitation.org/doi/10.1063/1.4952647), I receive the following error:. ```RuntimeError: ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /tmp/garden-install.fcce11d8cfbe/psi4-1.1-desres05-c7/psi4/src/psi4/libfock/cubature.cc on line: 2488; The most recent 5 function calls were:. psi::MolecularGrid::buildGridFromOptions(psi::MolecularGrid::MolecularGridOptions const&); psi::DFTGrid::buildGridFromOptions(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >); psi::DFTGrid::DFTGrid(std::shared_ptr<psi::Molecule>, std::shared_ptr<psi::BasisSet>, psi::Options&). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. Are there plans to include support for the SG-1 grid in Psi4? If not, are there any alternative grids that do work? _Removing_ the SG-1 option from the input file simply results in a segfault. The input file is below:. ```; memory 13500 Mb; molecule {; 0 1; C 4.067369 -2.240127 -0.129252; C 4.972458 -1.390566 3.098494; C 2.921005 -1.630865 0.608144; C 2.878286 -1.651992 2.002187; C 0.763829 -0.484138 1.955055; C 1.885141 -1.036307 -0.112440",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/827
https://github.com/psi4/psi4/issues/827:202,Availability,Error,Error,202,"Hi,. When I submit a wB97M-V calculation using the SG-1 grid (recommended in the wB97M-V paper: http://aip.scitation.org/doi/10.1063/1.4952647), I receive the following error:. ```RuntimeError: ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /tmp/garden-install.fcce11d8cfbe/psi4-1.1-desres05-c7/psi4/src/psi4/libfock/cubature.cc on line: 2488; The most recent 5 function calls were:. psi::MolecularGrid::buildGridFromOptions(psi::MolecularGrid::MolecularGridOptions const&); psi::DFTGrid::buildGridFromOptions(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >); psi::DFTGrid::DFTGrid(std::shared_ptr<psi::Molecule>, std::shared_ptr<psi::BasisSet>, psi::Options&). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. Are there plans to include support for the SG-1 grid in Psi4? If not, are there any alternative grids that do work? _Removing_ the SG-1 option from the input file simply results in a segfault. The input file is below:. ```; memory 13500 Mb; molecule {; 0 1; C 4.067369 -2.240127 -0.129252; C 4.972458 -1.390566 3.098494; C 2.921005 -1.630865 0.608144; C 2.878286 -1.651992 2.002187; C 0.763829 -0.484138 1.955055; C 1.885141 -1.036307 -0.112440",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/827
https://github.com/psi4/psi4/issues/827:273,Availability,Error,Error,273,"Hi,. When I submit a wB97M-V calculation using the SG-1 grid (recommended in the wB97M-V paper: http://aip.scitation.org/doi/10.1063/1.4952647), I receive the following error:. ```RuntimeError: ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /tmp/garden-install.fcce11d8cfbe/psi4-1.1-desres05-c7/psi4/src/psi4/libfock/cubature.cc on line: 2488; The most recent 5 function calls were:. psi::MolecularGrid::buildGridFromOptions(psi::MolecularGrid::MolecularGridOptions const&); psi::DFTGrid::buildGridFromOptions(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >); psi::DFTGrid::DFTGrid(std::shared_ptr<psi::Molecule>, std::shared_ptr<psi::BasisSet>, psi::Options&). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. Are there plans to include support for the SG-1 grid in Psi4? If not, are there any alternative grids that do work? _Removing_ the SG-1 option from the input file simply results in a segfault. The input file is below:. ```; memory 13500 Mb; molecule {; 0 1; C 4.067369 -2.240127 -0.129252; C 4.972458 -1.390566 3.098494; C 2.921005 -1.630865 0.608144; C 2.878286 -1.651992 2.002187; C 0.763829 -0.484138 1.955055; C 1.885141 -1.036307 -0.112440",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/827
https://github.com/psi4/psi4/issues/827:1466,Availability,error,error,1466,"id::buildGridFromOptions(psi::MolecularGrid::MolecularGridOptions const&); psi::DFTGrid::buildGridFromOptions(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >); psi::DFTGrid::DFTGrid(std::shared_ptr<psi::Molecule>, std::shared_ptr<psi::BasisSet>, psi::Options&). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. Are there plans to include support for the SG-1 grid in Psi4? If not, are there any alternative grids that do work? _Removing_ the SG-1 option from the input file simply results in a segfault. The input file is below:. ```; memory 13500 Mb; molecule {; 0 1; C 4.067369 -2.240127 -0.129252; C 4.972458 -1.390566 3.098494; C 2.921005 -1.630865 0.608144; C 2.878286 -1.651992 2.002187; C 0.763829 -0.484138 1.955055; C 1.885141 -1.036307 -0.112440; C 1.799700 -1.078640 2.675676; C 0.806556 -0.463011 0.561006; O 3.881939 -2.228505 2.721026; Br -0.697406 0.294370 2.866925; H 4.856028 -1.495441 -0.288527; H 4.492277 -3.085465 0.426246; H 3.750214 -2.627370 -1.105706; H 5.701654 -1.973847 3.666076; H 4.602203 -0.560418 3.705314; H 5.446916 -0.996749 2.196547; H 1.908587 -1.015574 -1.198747; H 1.775186 -1.100057 3.762739; H 0.006619 -0.004988 -0.014918; }; set dft_radial_points 99; set dft_spherical",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/827
https://github.com/psi4/psi4/issues/827:309,Deployability,install,install,309,"Hi,. When I submit a wB97M-V calculation using the SG-1 grid (recommended in the wB97M-V paper: http://aip.scitation.org/doi/10.1063/1.4952647), I receive the following error:. ```RuntimeError: ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /tmp/garden-install.fcce11d8cfbe/psi4-1.1-desres05-c7/psi4/src/psi4/libfock/cubature.cc on line: 2488; The most recent 5 function calls were:. psi::MolecularGrid::buildGridFromOptions(psi::MolecularGrid::MolecularGridOptions const&); psi::DFTGrid::buildGridFromOptions(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >); psi::DFTGrid::DFTGrid(std::shared_ptr<psi::Molecule>, std::shared_ptr<psi::BasisSet>, psi::Options&). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. Are there plans to include support for the SG-1 grid in Psi4? If not, are there any alternative grids that do work? _Removing_ the SG-1 option from the input file simply results in a segfault. The input file is below:. ```; memory 13500 Mb; molecule {; 0 1; C 4.067369 -2.240127 -0.129252; C 4.972458 -1.390566 3.098494; C 2.921005 -1.630865 0.608144; C 2.878286 -1.651992 2.002187; C 0.763829 -0.484138 1.955055; C 1.885141 -1.036307 -0.112440",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/827
https://github.com/psi4/psi4/issues/827:2579,Energy Efficiency,energy,energy,2579,":__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >); psi::DFTGrid::DFTGrid(std::shared_ptr<psi::Molecule>, std::shared_ptr<psi::BasisSet>, psi::Options&). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. Are there plans to include support for the SG-1 grid in Psi4? If not, are there any alternative grids that do work? _Removing_ the SG-1 option from the input file simply results in a segfault. The input file is below:. ```; memory 13500 Mb; molecule {; 0 1; C 4.067369 -2.240127 -0.129252; C 4.972458 -1.390566 3.098494; C 2.921005 -1.630865 0.608144; C 2.878286 -1.651992 2.002187; C 0.763829 -0.484138 1.955055; C 1.885141 -1.036307 -0.112440; C 1.799700 -1.078640 2.675676; C 0.806556 -0.463011 0.561006; O 3.881939 -2.228505 2.721026; Br -0.697406 0.294370 2.866925; H 4.856028 -1.495441 -0.288527; H 4.492277 -3.085465 0.426246; H 3.750214 -2.627370 -1.105706; H 5.701654 -1.973847 3.666076; H 4.602203 -0.560418 3.705314; H 5.446916 -0.996749 2.196547; H 1.908587 -1.015574 -1.198747; H 1.775186 -1.100057 3.762739; H 0.006619 -0.004988 -0.014918; }; set dft_radial_points 99; set dft_spherical_points 590; set dft_grid_name SG1; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ENE=energy(""wB97M-V""); ```. I'm running with a slightly old commit from 09/19 (92b4c55b7171ba48520f91b5344cdcfe99cedc2f). My apologies if the problem has already been fixed in a more recent commit, though it doesn't seem like it based on reading through the diffs of commits with relevant messages. Thanks!; Aditya",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/827
https://github.com/psi4/psi4/issues/827:2864,Integrability,message,messages,2864,":__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >); psi::DFTGrid::DFTGrid(std::shared_ptr<psi::Molecule>, std::shared_ptr<psi::BasisSet>, psi::Options&). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. Are there plans to include support for the SG-1 grid in Psi4? If not, are there any alternative grids that do work? _Removing_ the SG-1 option from the input file simply results in a segfault. The input file is below:. ```; memory 13500 Mb; molecule {; 0 1; C 4.067369 -2.240127 -0.129252; C 4.972458 -1.390566 3.098494; C 2.921005 -1.630865 0.608144; C 2.878286 -1.651992 2.002187; C 0.763829 -0.484138 1.955055; C 1.885141 -1.036307 -0.112440; C 1.799700 -1.078640 2.675676; C 0.806556 -0.463011 0.561006; O 3.881939 -2.228505 2.721026; Br -0.697406 0.294370 2.866925; H 4.856028 -1.495441 -0.288527; H 4.492277 -3.085465 0.426246; H 3.750214 -2.627370 -1.105706; H 5.701654 -1.973847 3.666076; H 4.602203 -0.560418 3.705314; H 5.446916 -0.996749 2.196547; H 1.908587 -1.015574 -1.198747; H 1.775186 -1.100057 3.762739; H 0.006619 -0.004988 -0.014918; }; set dft_radial_points 99; set dft_spherical_points 590; set dft_grid_name SG1; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ENE=energy(""wB97M-V""); ```. I'm running with a slightly old commit from 09/19 (92b4c55b7171ba48520f91b5344cdcfe99cedc2f). My apologies if the problem has already been fixed in a more recent commit, though it doesn't seem like it based on reading through the diffs of commits with relevant messages. Thanks!; Aditya",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/827
https://github.com/psi4/psi4/issues/827:1720,Usability,simpl,simply,1720," >, int, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >); psi::DFTGrid::DFTGrid(std::shared_ptr<psi::Molecule>, std::shared_ptr<psi::BasisSet>, psi::Options&). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. Are there plans to include support for the SG-1 grid in Psi4? If not, are there any alternative grids that do work? _Removing_ the SG-1 option from the input file simply results in a segfault. The input file is below:. ```; memory 13500 Mb; molecule {; 0 1; C 4.067369 -2.240127 -0.129252; C 4.972458 -1.390566 3.098494; C 2.921005 -1.630865 0.608144; C 2.878286 -1.651992 2.002187; C 0.763829 -0.484138 1.955055; C 1.885141 -1.036307 -0.112440; C 1.799700 -1.078640 2.675676; C 0.806556 -0.463011 0.561006; O 3.881939 -2.228505 2.721026; Br -0.697406 0.294370 2.866925; H 4.856028 -1.495441 -0.288527; H 4.492277 -3.085465 0.426246; H 3.750214 -2.627370 -1.105706; H 5.701654 -1.973847 3.666076; H 4.602203 -0.560418 3.705314; H 5.446916 -0.996749 2.196547; H 1.908587 -1.015574 -1.198747; H 1.775186 -1.100057 3.762739; H 0.006619 -0.004988 -0.014918; }; set dft_radial_points 99; set dft_spherical_points 590; set dft_grid_name SG1; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ENE=energy(""wB97M-V""); ```. I'm running with a slightly old commit from 09/19 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/827
https://github.com/psi4/psi4/issues/828:895,Availability,error,error,895,"I tried running a CISD/STO-3G job on benzene (structure borrowed from the [psi4 input file samples](https://github.com/psi4/psi4/blob/master/samples/props3/input.dat)) using the following input:; ```; molecule benzene {; C 0.710500000000 0.000000000000 -1.230622098778; C 1.421000000000 0.000000000000 0.000000000000; C 0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 -1.230622098778; C -1.421000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 -2.172857738095; H -1.254500000000 0.000000000000 2.172857738095; H 2.509000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 2.172857738095; H -1.254500000000 0.000000000000 -2.172857738095; H -2.509000000000 0.000000000000 0.000000000000; }. set basis sto-3g. energy('cisd', molecule=benzene); ```; Psi4 returned the following error:; ```; Traceback (most recent call last):; File ""/usr/local/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/usr/local/psi4/lib/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 949, in select_cisd; return func(name, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 4238, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /home/shouck/psi4/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::fnocc::CoupledCluster::common_init(); psi::fnocc::CoupledCluster::CoupledCluster(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::CoupledPair::CoupledPair(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::fnocc(std:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828
https://github.com/psi4/psi4/issues/828:1458,Availability,Error,Error,1458,"0000 -1.230622098778; C -1.421000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 -2.172857738095; H -1.254500000000 0.000000000000 2.172857738095; H 2.509000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 2.172857738095; H -1.254500000000 0.000000000000 -2.172857738095; H -2.509000000000 0.000000000000 0.000000000000; }. set basis sto-3g. energy('cisd', molecule=benzene); ```; Psi4 returned the following error:; ```; Traceback (most recent call last):; File ""/usr/local/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/usr/local/psi4/lib/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 949, in select_cisd; return func(name, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 4238, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /home/shouck/psi4/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::fnocc::CoupledCluster::common_init(); psi::fnocc::CoupledCluster::CoupledCluster(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::CoupledPair::CoupledPair(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::fnocc(std::shared_ptr<psi::Wavefunction>, psi::Options&); ```; The CISDT and CISDTQ methods run with no problems, so it seems like the issue is just in the CISD method. The exception appears to be thrown from [here in the ccsd.cc program](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/ccsd.cc#L144). It only breaks for small toy systems, and using DETCI provides a nice work-around, but I thought I should mention this anyway. Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828
https://github.com/psi4/psi4/issues/828:1496,Availability,Error,Error,1496,"0000 -1.230622098778; C -1.421000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 -2.172857738095; H -1.254500000000 0.000000000000 2.172857738095; H 2.509000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 2.172857738095; H -1.254500000000 0.000000000000 -2.172857738095; H -2.509000000000 0.000000000000 0.000000000000; }. set basis sto-3g. energy('cisd', molecule=benzene); ```; Psi4 returned the following error:; ```; Traceback (most recent call last):; File ""/usr/local/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/usr/local/psi4/lib/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 949, in select_cisd; return func(name, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 4238, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /home/shouck/psi4/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::fnocc::CoupledCluster::common_init(); psi::fnocc::CoupledCluster::CoupledCluster(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::CoupledPair::CoupledPair(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::fnocc(std::shared_ptr<psi::Wavefunction>, psi::Options&); ```; The CISDT and CISDTQ methods run with no problems, so it seems like the issue is just in the CISD method. The exception appears to be thrown from [here in the ccsd.cc program](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/ccsd.cc#L144). It only breaks for small toy systems, and using DETCI provides a nice work-around, but I thought I should mention this anyway. Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828
https://github.com/psi4/psi4/issues/828:828,Energy Efficiency,energy,energy,828,"I tried running a CISD/STO-3G job on benzene (structure borrowed from the [psi4 input file samples](https://github.com/psi4/psi4/blob/master/samples/props3/input.dat)) using the following input:; ```; molecule benzene {; C 0.710500000000 0.000000000000 -1.230622098778; C 1.421000000000 0.000000000000 0.000000000000; C 0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 -1.230622098778; C -1.421000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 -2.172857738095; H -1.254500000000 0.000000000000 2.172857738095; H 2.509000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 2.172857738095; H -1.254500000000 0.000000000000 -2.172857738095; H -2.509000000000 0.000000000000 0.000000000000; }. set basis sto-3g. energy('cisd', molecule=benzene); ```; Psi4 returned the following error:; ```; Traceback (most recent call last):; File ""/usr/local/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/usr/local/psi4/lib/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 949, in select_cisd; return func(name, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 4238, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /home/shouck/psi4/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::fnocc::CoupledCluster::common_init(); psi::fnocc::CoupledCluster::CoupledCluster(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::CoupledPair::CoupledPair(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::fnocc(std:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828
https://github.com/psi4/psi4/issues/828:1117,Energy Efficiency,energy,energy,1117,"ollowing input:; ```; molecule benzene {; C 0.710500000000 0.000000000000 -1.230622098778; C 1.421000000000 0.000000000000 0.000000000000; C 0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 -1.230622098778; C -1.421000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 -2.172857738095; H -1.254500000000 0.000000000000 2.172857738095; H 2.509000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 2.172857738095; H -1.254500000000 0.000000000000 -2.172857738095; H -2.509000000000 0.000000000000 0.000000000000; }. set basis sto-3g. energy('cisd', molecule=benzene); ```; Psi4 returned the following error:; ```; Traceback (most recent call last):; File ""/usr/local/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/usr/local/psi4/lib/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 949, in select_cisd; return func(name, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 4238, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /home/shouck/psi4/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::fnocc::CoupledCluster::common_init(); psi::fnocc::CoupledCluster::CoupledCluster(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::CoupledPair::CoupledPair(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::fnocc(std::shared_ptr<psi::Wavefunction>, psi::Options&); ```; The CISDT and CISDTQ methods run with no problems, so it seems like the issue is just in the CISD method. The exception appea",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828
https://github.com/psi4/psi4/issues/828:1143,Energy Efficiency,energy,energy,1143,"ollowing input:; ```; molecule benzene {; C 0.710500000000 0.000000000000 -1.230622098778; C 1.421000000000 0.000000000000 0.000000000000; C 0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 -1.230622098778; C -1.421000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 -2.172857738095; H -1.254500000000 0.000000000000 2.172857738095; H 2.509000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 2.172857738095; H -1.254500000000 0.000000000000 -2.172857738095; H -2.509000000000 0.000000000000 0.000000000000; }. set basis sto-3g. energy('cisd', molecule=benzene); ```; Psi4 returned the following error:; ```; Traceback (most recent call last):; File ""/usr/local/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/usr/local/psi4/lib/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 949, in select_cisd; return func(name, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 4238, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /home/shouck/psi4/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::fnocc::CoupledCluster::common_init(); psi::fnocc::CoupledCluster::CoupledCluster(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::CoupledPair::CoupledPair(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::fnocc(std::shared_ptr<psi::Wavefunction>, psi::Options&); ```; The CISDT and CISDTQ methods run with no problems, so it seems like the issue is just in the CISD method. The exception appea",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828
https://github.com/psi4/psi4/issues/829:27,Energy Efficiency,efficient,efficient,27,"Because the fno code is an efficient implementation of mp2 natural orbitals, it'd make a whole lot of sense to have ""fno"" variants of detci keywords, which would just trigger the detci calculation in the MP2 NO basis. The better starting guess would make CASSCF and RASSCF calculations converge a lot more quickly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/829
https://github.com/psi4/psi4/pull/832:60,Availability,fault,faults,60,"## Description; Fixes an issues where VV10 occasionally seg faults due to improperly sized temporary arrays. Also, spot the error of why the Naive grid blocker has been seg faulting for years in [#9575ede](https://github.com/dgasmith/psi4/commit/9575ede082c5287be1c176a13299829317b3b719). Highly recommend we stop using raw pointers and C functions. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/832
https://github.com/psi4/psi4/pull/832:124,Availability,error,error,124,"## Description; Fixes an issues where VV10 occasionally seg faults due to improperly sized temporary arrays. Also, spot the error of why the Naive grid blocker has been seg faulting for years in [#9575ede](https://github.com/dgasmith/psi4/commit/9575ede082c5287be1c176a13299829317b3b719). Highly recommend we stop using raw pointers and C functions. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/832
https://github.com/psi4/psi4/pull/832:173,Availability,fault,faulting,173,"## Description; Fixes an issues where VV10 occasionally seg faults due to improperly sized temporary arrays. Also, spot the error of why the Naive grid blocker has been seg faulting for years in [#9575ede](https://github.com/dgasmith/psi4/commit/9575ede082c5287be1c176a13299829317b3b719). Highly recommend we stop using raw pointers and C functions. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/832
https://github.com/psi4/psi4/issues/833:112,Availability,error,errors,112,"Reaping and sowing seem to be broken for Hessians when using Psi4 compiled with Python 3. None of the following errors could be reproduced when using Psi4 compiled with Python 2. The following input file produces the following error:; ```memory 500 MB. molecule {; N ; H 1 R ; H 1 R 2 A ; H 1 R 2 A 3 D . R = 1.0043; A = 120 ; D = 180 ; }. set {; basis sto-3g; }. frequencies('ccsd(t)', dertype='gradient', mode='sow'); ```. ```Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 1681, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 1332, in hessian ; fmaster.write(p4util.format_options_for_input(moleculeclone, **kwargs)). TypeError: a bytes-like object is required, not 'str'; ```. The culprit is exactly what the traceback says: fmaster is opened in binary mode and format_options_for_input returns a string. Python 2 would let you write a string to a binary file, but Python 3 expects bytes. I can fix this locally by adding the required .encode('utf-8') calls to that line as well as several lines afterwards, starting around 1370. If that was all, I would just fix this myself, but sowing is useless without reaping, and the reaping bug is trickier. The displacement files include bytes encoded from UTF-8 and also bytes dumped from pickle (the gradient kwargs). In general, pickle bytes will not be intelligible in any text encoding scheme. Python 2's naive approach to bytes means this is not a problem. When you try to run one of those files with Python 3-compiled Psi4, however... ```Traceback (most recent cal",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/833
https://github.com/psi4/psi4/issues/833:227,Availability,error,error,227,"Reaping and sowing seem to be broken for Hessians when using Psi4 compiled with Python 3. None of the following errors could be reproduced when using Psi4 compiled with Python 2. The following input file produces the following error:; ```memory 500 MB. molecule {; N ; H 1 R ; H 1 R 2 A ; H 1 R 2 A 3 D . R = 1.0043; A = 120 ; D = 180 ; }. set {; basis sto-3g; }. frequencies('ccsd(t)', dertype='gradient', mode='sow'); ```. ```Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 1681, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 1332, in hessian ; fmaster.write(p4util.format_options_for_input(moleculeclone, **kwargs)). TypeError: a bytes-like object is required, not 'str'; ```. The culprit is exactly what the traceback says: fmaster is opened in binary mode and format_options_for_input returns a string. Python 2 would let you write a string to a binary file, but Python 3 expects bytes. I can fix this locally by adding the required .encode('utf-8') calls to that line as well as several lines afterwards, starting around 1370. If that was all, I would just fix this myself, but sowing is useless without reaping, and the reaping bug is trickier. The displacement files include bytes encoded from UTF-8 and also bytes dumped from pickle (the gradient kwargs). In general, pickle bytes will not be intelligible in any text encoding scheme. Python 2's naive approach to bytes means this is not a problem. When you try to run one of those files with Python 3-compiled Psi4, however... ```Traceback (most recent cal",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/833
https://github.com/psi4/psi4/issues/833:2307,Availability,error,errors,2307,"el-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 1681, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 1332, in hessian ; fmaster.write(p4util.format_options_for_input(moleculeclone, **kwargs)). TypeError: a bytes-like object is required, not 'str'; ```. The culprit is exactly what the traceback says: fmaster is opened in binary mode and format_options_for_input returns a string. Python 2 would let you write a string to a binary file, but Python 3 expects bytes. I can fix this locally by adding the required .encode('utf-8') calls to that line as well as several lines afterwards, starting around 1370. If that was all, I would just fix this myself, but sowing is useless without reaping, and the reaping bug is trickier. The displacement files include bytes encoded from UTF-8 and also bytes dumped from pickle (the gradient kwargs). In general, pickle bytes will not be intelligible in any text encoding scheme. Python 2's naive approach to bytes means this is not a problem. When you try to run one of those files with Python 3-compiled Psi4, however... ```Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/usr/local/psi4/bin/psi4"", line 230, in <module>; content = f.read(); File ""/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/codecs.py"", line 321, in decode; (result, consumed) = self._buffer_decode(data, self.errors, final); UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 440: invalid start byte; ```. Python 3 tries to read all the bytes as UTF-8. This fails for the pickled bytes, so Psi4 crashes. Even if you read the file as binary, you would still have to (somehow) instruct Python 3 which parts of the file should be UTF-8 decoded and which parts should be pickle-loaded.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/833
https://github.com/psi4/psi4/issues/833:2690,Performance,load,loaded,2690,"el-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 1681, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 1332, in hessian ; fmaster.write(p4util.format_options_for_input(moleculeclone, **kwargs)). TypeError: a bytes-like object is required, not 'str'; ```. The culprit is exactly what the traceback says: fmaster is opened in binary mode and format_options_for_input returns a string. Python 2 would let you write a string to a binary file, but Python 3 expects bytes. I can fix this locally by adding the required .encode('utf-8') calls to that line as well as several lines afterwards, starting around 1370. If that was all, I would just fix this myself, but sowing is useless without reaping, and the reaping bug is trickier. The displacement files include bytes encoded from UTF-8 and also bytes dumped from pickle (the gradient kwargs). In general, pickle bytes will not be intelligible in any text encoding scheme. Python 2's naive approach to bytes means this is not a problem. When you try to run one of those files with Python 3-compiled Psi4, however... ```Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/usr/local/psi4/bin/psi4"", line 230, in <module>; content = f.read(); File ""/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/codecs.py"", line 321, in decode; (result, consumed) = self._buffer_decode(data, self.errors, final); UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 440: invalid start byte; ```. Python 3 tries to read all the bytes as UTF-8. This fails for the pickled bytes, so Psi4 crashes. Even if you read the file as binary, you would still have to (somehow) instruct Python 3 which parts of the file should be UTF-8 decoded and which parts should be pickle-loaded.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/833
https://github.com/psi4/psi4/pull/834:750,Availability,error,errors,750,"## Description; Includes Joe's psi4/psi4#772, since the original point of this was to do properly the hacks needed to get the normco into the Wfn. This includes py-side vibrational analysis, thermo, and small-system reordering. Also fixes Hessian symmetrization (py-side; haven't moved it back c-side). ~This isn't a final product. I only re-hooked-back-up one conventional freq test case. There's plenty of organizational, naming, storage (want both freq and normco in Wfn? and if so, only vibs, not RT? and how ID imag freq if we're float and don't want `-`?) choices yet. What this does have is a substantial py test case with 6 Hessian readouts from Cfour and 6 matching p4 findif-by-grad vibrational analyses to help debug some analytic Hessian errors at wwdc.~. ~And watch out – any change to `findif.h` recompiles most of psi.~. In the end, this added a py-side vib analysis, identified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large syst",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:2382,Availability,avail,avail,2382,"tes for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:2847,Availability,down,down,2847,"axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set_units called, rather than as extra step.; - Finally add a `com_fixed` fn to mirror `orientation_fixed`. In q",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:5948,Availability,down,down,5948,"nd fills in defaults, emitting a standardized (to become MolSSI JSON) molrec dict. Plain fn produces dict. `psi4.core.Molecule.from_arrays` and `qcdb.Molecule.from_arrays` go a step further and return a Mol.; - Function `validate_and_fill_chgmult` addresses current problems (1) create_mol_from_string's problem of not allowing overall chgmult to be set, defaulting all frag to `0 1`, and defaulting overall to fragA, (2) physical reasonableness (chg/mult/#elec compatible) not being tested for fragments at all and for overall not until the SCF code, (3) problems like psi4/psi4#114, and (4) overall and frag chgmult getting out of whack upon set_chg/mult, extract_subsets, not having frag chgmult editable, scf singlet/doublet defaulting. Taking given tot/frag chg/mult info and reasoning out the missing info would have been massive logic for chg/mult/#elec simultaneously, so this just codes up the rules and the defaults and throw `itertools.product` at it. Slows down a bit by 10 frag, but there's room for performance optimization. Ideally we'd call this at every reinterpret_coordentry, but that's not feasible for psi4 Mol. A good newdev starter project would be (for impossible reconciliations) to keep track of the least offending combo, and print out a summary of what rules it's violating.; - Function `reconcile_nucleus` addresses problems (1) can't specify atoms by atomic number, (2) can't specify masses by mass number, (3) faced with A, Z, E, real/ghost, and label `@C_special@12.1`, all as inputs, need to make sure (a) extracting as much user info as possible, (b) not allowing contradictory info, and (c) filling in everything else from periodictable. Like chgmult, fn handles this by defining rules and candidate values, and letting itertools do the rest. Expand atom label spec so can specify isotope and atomic number e.g., `Gh(27@58.933)` or `2H_deut`.; - Validates atoms-too-close all at once, rather than per-atom, which can run into units, coordsys, and? old CoordEntry tr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:912,Deployability,upgrade,upgraded,912,"## Description; Includes Joe's psi4/psi4#772, since the original point of this was to do properly the hacks needed to get the normco into the Wfn. This includes py-side vibrational analysis, thermo, and small-system reordering. Also fixes Hessian symmetrization (py-side; haven't moved it back c-side). ~This isn't a final product. I only re-hooked-back-up one conventional freq test case. There's plenty of organizational, naming, storage (want both freq and normco in Wfn? and if so, only vibs, not RT? and how ID imag freq if we're float and don't want `-`?) choices yet. What this does have is a substantial py test case with 6 Hessian readouts from Cfour and 6 matching p4 findif-by-grad vibrational analyses to help debug some analytic Hessian errors at wwdc.~. ~And watch out – any change to `findif.h` recompiles most of psi.~. In the end, this added a py-side vib analysis, identified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large syst",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:12579,Deployability,update,updated,12579,"efault, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to access and work with. But it is numpy arrays attached to Wfn and thus mixing array classes on Wfn and unable to access c-side. Is this ok? Better ideas?; ```; Returns; -------; dict, text; Returns dictionary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:12674,Deployability,Release,Release,12674,"efault, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to access and work with. But it is numpy arrays attached to Wfn and thus mixing array classes on Wfn and unable to access c-side. Is this ok? Better ideas?; ```; Returns; -------; dict, text; Returns dictionary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:11323,Energy Efficiency,energy,energy,11323,"ent vec, rotation mat, and atom map to get best Kabsch overlap (@dsirianni code) between two molecules. Uses Hungarian algorithm+ for atom shuffling. In that case, required `hungarian` and `networkx` add'l packages. Handles shuffled atoms up to at least benzene trimer and more if haven't too many symmetry-equivalent atoms. Really good for perfect matches, fine but untuned for imperfect matches. Also provides functions that use that return set to properly manipulate list, vec, mol, grad, hess (hess untested). Upon request, also tests mirror-image alignment.; - Remove everything beyond constructing the Cartesian Hessian from findif, including VIBRATION class; - Remove the c-side thermo module ; - Adds extensive vib test on HOOH-TS, CO2, ethene, H2CO, methane that checks freqs _and_ normco of each mol vs. Cfour output for following conditions; - Cfour Hessian (tests harmonic analysis machinery); - Psi freq by grad; - Psi freq by energy; - Psi freq by analytic ~(only methane and ammonia pass)~ All pass now, thanks to @andysim ; - [x] fix the embarrassing bug (I'll do you a coding favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:14077,Energy Efficiency,reduce,reduced,14077,"ary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normalized un-mass-weighted | a0 | np.array(ndof, ndof) float |; | degeneracy | degree of degeneracy | | np.array(ndof) int |; | TRV | translation/rotation/vibration | | np.array(ndof) str 'TR' or 'V' or '-' for partial |; | gamma | irreducible representation | | np.array(ndof) str irrep or None if unclassifiable |; | mu | reduced mass | u | np.array(ndof) float (+/+) |; | k | force constant | mDyne/A | np.array(ndof) float (+/-) |; | DQ0 | RMS deviation v=0 | a0 u^1/2 | np.array(ndof) float (+/0) |; | Qtp0 | Turning point v=0 | a0 u^1/2 | np.array(ndof) float (+/0) |; | Xtp0 | Turning point v=0 | a0 | np.array(ndof) float (+/0) |; | theta_vib | char temp | K | np.array(ndof) float (+/0) |; ; Examples; --------; # displacement of first atom in highest energy mode; >>> vibinfo['x'].data[:, -1].reshape(nat, 3)[0]; ; # remove translations & rotations; >>> vibonly = filter_nonvib(vibinfo); ```; - [ ] Should we run a gradient before every freq to judge whether to project rotations? Right now freq on non-stationary structures are going to be way different than from findif because findif stuck with the (in PR analysis labeling) ""pre-proj"" vibs; - [ ] How to handle natural geometry shift the occurs upon isotopic substitution in geometry but not in reused Hessian? shift/rotate the Hessian? compu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:14514,Energy Efficiency,energy,energy,14514,"=====================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normalized un-mass-weighted | a0 | np.array(ndof, ndof) float |; | degeneracy | degree of degeneracy | | np.array(ndof) int |; | TRV | translation/rotation/vibration | | np.array(ndof) str 'TR' or 'V' or '-' for partial |; | gamma | irreducible representation | | np.array(ndof) str irrep or None if unclassifiable |; | mu | reduced mass | u | np.array(ndof) float (+/+) |; | k | force constant | mDyne/A | np.array(ndof) float (+/-) |; | DQ0 | RMS deviation v=0 | a0 u^1/2 | np.array(ndof) float (+/0) |; | Qtp0 | Turning point v=0 | a0 u^1/2 | np.array(ndof) float (+/0) |; | Xtp0 | Turning point v=0 | a0 | np.array(ndof) float (+/0) |; | theta_vib | char temp | K | np.array(ndof) float (+/0) |; ; Examples; --------; # displacement of first atom in highest energy mode; >>> vibinfo['x'].data[:, -1].reshape(nat, 3)[0]; ; # remove translations & rotations; >>> vibonly = filter_nonvib(vibinfo); ```; - [ ] Should we run a gradient before every freq to judge whether to project rotations? Right now freq on non-stationary structures are going to be way different than from findif because findif stuck with the (in PR analysis labeling) ""pre-proj"" vibs; - [ ] How to handle natural geometry shift the occurs upon isotopic substitution in geometry but not in reused Hessian? shift/rotate the Hessian? compute in center-of-charge instead?. ## Good stuff still to do; - [ ] vibs docs; - [ ] warning to isapt folks that frag spec just got tighter wrt mult; - [ ] break up vibanalysis, dft-cation, dft-water-dimer tests. to py?. closes #940 . ## Status; - [x] Ready for review; - [x] Ready for merge content-correctness-wise; - [x] Ready for merge psi-planning-wise",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:15075,Energy Efficiency,charge,charge,15075,"=====================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normalized un-mass-weighted | a0 | np.array(ndof, ndof) float |; | degeneracy | degree of degeneracy | | np.array(ndof) int |; | TRV | translation/rotation/vibration | | np.array(ndof) str 'TR' or 'V' or '-' for partial |; | gamma | irreducible representation | | np.array(ndof) str irrep or None if unclassifiable |; | mu | reduced mass | u | np.array(ndof) float (+/+) |; | k | force constant | mDyne/A | np.array(ndof) float (+/-) |; | DQ0 | RMS deviation v=0 | a0 u^1/2 | np.array(ndof) float (+/0) |; | Qtp0 | Turning point v=0 | a0 u^1/2 | np.array(ndof) float (+/0) |; | Xtp0 | Turning point v=0 | a0 | np.array(ndof) float (+/0) |; | theta_vib | char temp | K | np.array(ndof) float (+/0) |; ; Examples; --------; # displacement of first atom in highest energy mode; >>> vibinfo['x'].data[:, -1].reshape(nat, 3)[0]; ; # remove translations & rotations; >>> vibonly = filter_nonvib(vibinfo); ```; - [ ] Should we run a gradient before every freq to judge whether to project rotations? Right now freq on non-stationary structures are going to be way different than from findif because findif stuck with the (in PR analysis labeling) ""pre-proj"" vibs; - [ ] How to handle natural geometry shift the occurs upon isotopic substitution in geometry but not in reused Hessian? shift/rotate the Hessian? compute in center-of-charge instead?. ## Good stuff still to do; - [ ] vibs docs; - [ ] warning to isapt folks that frag spec just got tighter wrt mult; - [ ] break up vibanalysis, dft-cation, dft-water-dimer tests. to py?. closes #940 . ## Status; - [x] Ready for review; - [x] Ready for merge content-correctness-wise; - [x] Ready for merge psi-planning-wise",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:2664,Integrability,Depend,Depending,2664,"ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:12808,Integrability,interface,interface,12808,"d and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to access and work with. But it is numpy arrays attached to Wfn and thus mixing array classes on Wfn and unable to access c-side. Is this ok? Better ideas?; ```; Returns; -------; dict, text; Returns dictionary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normal",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:3065,Modifiability,Enhance,Enhanced,3065,"b.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set_units called, rather than as extra step.; - Finally add a `com_fixed` fn to mirror `orientation_fixed`. In qcdb.Mol, also a `fix_com`.; - `create_molecule_from_string` was doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_mult",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:3989,Modifiability,extend,extend,3989,"turns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set_units called, rather than as extra step.; - Finally add a `com_fixed` fn to mirror `orientation_fixed`. In qcdb.Mol, also a `fix_com`.; - `create_molecule_from_string` was doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_multiplicity/set_molecular_charge values might not stick upon reinterpret_coordentries b/c recomputed from fragments (which the user can't change) and by high-spin-sum. Adds logic to retain set_mult value if all fragments real (still no guarantee of physical reasonableness wrt frags) b/c otherwise I couldn't do isapt. See `validate_and_fill_chgmult` for general solution at the boundaries of Mol class, but no good internally to psi4.Mol b/c in python.; - `to_arrays`, `to_dict`, `BFS`, `B787`, `scramble` fns shared btwn psi4 & qcdb Mol classes. When drop py27, can attach qcdb fns directly to psi4 and drop the @static raw_ intermed fns.; - Molecule serialization; - New `from_arrays` constructor that takes minimal (geom & Z) to full geom spec as arrays (homogeneous natom-length, not heterogeneous per-atom) and thoroughly ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:1272,Performance,optimiz,optimize,1272,"g. Also fixes Hessian symmetrization (py-side; haven't moved it back c-side). ~This isn't a final product. I only re-hooked-back-up one conventional freq test case. There's plenty of organizational, naming, storage (want both freq and normco in Wfn? and if so, only vibs, not RT? and how ID imag freq if we're float and don't want `-`?) choices yet. What this does have is a substantial py test case with 6 Hessian readouts from Cfour and 6 matching p4 findif-by-grad vibrational analyses to help debug some analytic Hessian errors at wwdc.~. ~And watch out – any change to `findif.h` recompiles most of psi.~. In the end, this added a py-side vib analysis, identified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:1384,Performance,optimiz,optimization,1384,"hooked-back-up one conventional freq test case. There's plenty of organizational, naming, storage (want both freq and normco in Wfn? and if so, only vibs, not RT? and how ID imag freq if we're float and don't want `-`?) choices yet. What this does have is a substantial py test case with 6 Hessian readouts from Cfour and 6 matching p4 findif-by-grad vibrational analyses to help debug some analytic Hessian errors at wwdc.~. ~And watch out – any change to `findif.h` recompiles most of psi.~. In the end, this added a py-side vib analysis, identified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:1939,Performance,Optimiz,Optimize,1939,"ntified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `un",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:2287,Performance,perform,performance,2287,"tes for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:5992,Performance,perform,performance,5992,"nd fills in defaults, emitting a standardized (to become MolSSI JSON) molrec dict. Plain fn produces dict. `psi4.core.Molecule.from_arrays` and `qcdb.Molecule.from_arrays` go a step further and return a Mol.; - Function `validate_and_fill_chgmult` addresses current problems (1) create_mol_from_string's problem of not allowing overall chgmult to be set, defaulting all frag to `0 1`, and defaulting overall to fragA, (2) physical reasonableness (chg/mult/#elec compatible) not being tested for fragments at all and for overall not until the SCF code, (3) problems like psi4/psi4#114, and (4) overall and frag chgmult getting out of whack upon set_chg/mult, extract_subsets, not having frag chgmult editable, scf singlet/doublet defaulting. Taking given tot/frag chg/mult info and reasoning out the missing info would have been massive logic for chg/mult/#elec simultaneously, so this just codes up the rules and the defaults and throw `itertools.product` at it. Slows down a bit by 10 frag, but there's room for performance optimization. Ideally we'd call this at every reinterpret_coordentry, but that's not feasible for psi4 Mol. A good newdev starter project would be (for impossible reconciliations) to keep track of the least offending combo, and print out a summary of what rules it's violating.; - Function `reconcile_nucleus` addresses problems (1) can't specify atoms by atomic number, (2) can't specify masses by mass number, (3) faced with A, Z, E, real/ghost, and label `@C_special@12.1`, all as inputs, need to make sure (a) extracting as much user info as possible, (b) not allowing contradictory info, and (c) filling in everything else from periodictable. Like chgmult, fn handles this by defining rules and candidate values, and letting itertools do the rest. Expand atom label spec so can specify isotope and atomic number e.g., `Gh(27@58.933)` or `2H_deut`.; - Validates atoms-too-close all at once, rather than per-atom, which can run into units, coordsys, and? old CoordEntry tr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:6004,Performance,optimiz,optimization,6004,"nd fills in defaults, emitting a standardized (to become MolSSI JSON) molrec dict. Plain fn produces dict. `psi4.core.Molecule.from_arrays` and `qcdb.Molecule.from_arrays` go a step further and return a Mol.; - Function `validate_and_fill_chgmult` addresses current problems (1) create_mol_from_string's problem of not allowing overall chgmult to be set, defaulting all frag to `0 1`, and defaulting overall to fragA, (2) physical reasonableness (chg/mult/#elec compatible) not being tested for fragments at all and for overall not until the SCF code, (3) problems like psi4/psi4#114, and (4) overall and frag chgmult getting out of whack upon set_chg/mult, extract_subsets, not having frag chgmult editable, scf singlet/doublet defaulting. Taking given tot/frag chg/mult info and reasoning out the missing info would have been massive logic for chg/mult/#elec simultaneously, so this just codes up the rules and the defaults and throw `itertools.product` at it. Slows down a bit by 10 frag, but there's room for performance optimization. Ideally we'd call this at every reinterpret_coordentry, but that's not feasible for psi4 Mol. A good newdev starter project would be (for impossible reconciliations) to keep track of the least offending combo, and print out a summary of what rules it's violating.; - Function `reconcile_nucleus` addresses problems (1) can't specify atoms by atomic number, (2) can't specify masses by mass number, (3) faced with A, Z, E, real/ghost, and label `@C_special@12.1`, all as inputs, need to make sure (a) extracting as much user info as possible, (b) not allowing contradictory info, and (c) filling in everything else from periodictable. Like chgmult, fn handles this by defining rules and candidate values, and letting itertools do the rest. Expand atom label spec so can specify isotope and atomic number e.g., `Gh(27@58.933)` or `2H_deut`.; - Validates atoms-too-close all at once, rather than per-atom, which can run into units, coordsys, and? old CoordEntry tr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:1686,Safety,detect,detection,1686,"ntified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `un",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:11711,Safety,safe,safe,11711,"nt atoms. Really good for perfect matches, fine but untuned for imperfect matches. Also provides functions that use that return set to properly manipulate list, vec, mol, grad, hess (hess untested). Upon request, also tests mirror-image alignment.; - Remove everything beyond constructing the Cartesian Hessian from findif, including VIBRATION class; - Remove the c-side thermo module ; - Adds extensive vib test on HOOH-TS, CO2, ethene, H2CO, methane that checks freqs _and_ normco of each mol vs. Cfour output for following conditions; - Cfour Hessian (tests harmonic analysis machinery); - Psi freq by grad; - Psi freq by energy; - Psi freq by analytic ~(only methane and ammonia pass)~ All pass now, thanks to @andysim ; - [x] fix the embarrassing bug (I'll do you a coding favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Ques",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:3214,Security,access,accessor,3214,"b.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set_units called, rather than as extra step.; - Finally add a `com_fixed` fn to mirror `orientation_fixed`. In qcdb.Mol, also a `fix_com`.; - `create_molecule_from_string` was doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_mult",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:3410,Security,access,access,3410," the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set_units called, rather than as extra step.; - Finally add a `com_fixed` fn to mirror `orientation_fixed`. In qcdb.Mol, also a `fix_com`.; - `create_molecule_from_string` was doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_multiplicity/set_molecular_charge values might not stick upon reinterpret_coordentries b/c recomputed from fragments (which the user can't change) and by high-spin-sum. Adds logic to retain set_mult value if all fragments real (still no guarantee of physical re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:4963,Security,validat,validates,4963,"s doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_multiplicity/set_molecular_charge values might not stick upon reinterpret_coordentries b/c recomputed from fragments (which the user can't change) and by high-spin-sum. Adds logic to retain set_mult value if all fragments real (still no guarantee of physical reasonableness wrt frags) b/c otherwise I couldn't do isapt. See `validate_and_fill_chgmult` for general solution at the boundaries of Mol class, but no good internally to psi4.Mol b/c in python.; - `to_arrays`, `to_dict`, `BFS`, `B787`, `scramble` fns shared btwn psi4 & qcdb Mol classes. When drop py27, can attach qcdb fns directly to psi4 and drop the @static raw_ intermed fns.; - Molecule serialization; - New `from_arrays` constructor that takes minimal (geom & Z) to full geom spec as arrays (homogeneous natom-length, not heterogeneous per-atom) and thoroughly validates them and fills in defaults, emitting a standardized (to become MolSSI JSON) molrec dict. Plain fn produces dict. `psi4.core.Molecule.from_arrays` and `qcdb.Molecule.from_arrays` go a step further and return a Mol.; - Function `validate_and_fill_chgmult` addresses current problems (1) create_mol_from_string's problem of not allowing overall chgmult to be set, defaulting all frag to `0 1`, and defaulting overall to fragA, (2) physical reasonableness (chg/mult/#elec compatible) not being tested for fragments at all and for overall not until the SCF code, (3) problems like psi4/psi4#114, and (4) overall and frag chgmult getting out of whack upon set_chg/mult, extract_subsets, not having frag chgmult editable, scf singlet/doublet defaulting. Taking given tot/frag chg/mult info and reasoning out the missing info would have been massive logic for chg/mult/#elec simultaneously, so this just codes up the rules and the defaults and throw `it",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:6860,Security,Validat,Validates,6860,"tools.product` at it. Slows down a bit by 10 frag, but there's room for performance optimization. Ideally we'd call this at every reinterpret_coordentry, but that's not feasible for psi4 Mol. A good newdev starter project would be (for impossible reconciliations) to keep track of the least offending combo, and print out a summary of what rules it's violating.; - Function `reconcile_nucleus` addresses problems (1) can't specify atoms by atomic number, (2) can't specify masses by mass number, (3) faced with A, Z, E, real/ghost, and label `@C_special@12.1`, all as inputs, need to make sure (a) extracting as much user info as possible, (b) not allowing contradictory info, and (c) filling in everything else from periodictable. Like chgmult, fn handles this by defining rules and candidate values, and letting itertools do the rest. Expand atom label spec so can specify isotope and atomic number e.g., `Gh(27@58.933)` or `2H_deut`.; - Validates atoms-too-close all at once, rather than per-atom, which can run into units, coordsys, and? old CoordEntry trouble.; - New `from_dict` fn takes a fully validated and defaulted molrec dict and constructs a Mol. psi4 fn is in export_mints.cc, and qcdb fn is in molecule.py.; - New `to_dict` fn serializes Mol into molrec dict. This fn in molecule.py is shared by psi4 & qcdb Mol classes. For the moment (not mandatory), this dict passes again through `from_arrays` and output is compared to make sure (1) resulting dict is pure and (2) Mol hasn't been tampered with in an unphysical way.; - `from_arrays` used internally to qcdb.Molecule for decomposing and reconstituting Mol into np arrays for fragmentation and alignment (potentially reordering); - BasisSet molecule handover (happens a lot to construct py basis for c++ mol and hand it back; also happens once per atom for SAD) that used to use create_psi4_string_from_molecule & create_molecule_from_string now uses to_dict & from_dict. So even though all this serialization tech isn't hooked up to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:7022,Security,validat,validated,7022,"all this at every reinterpret_coordentry, but that's not feasible for psi4 Mol. A good newdev starter project would be (for impossible reconciliations) to keep track of the least offending combo, and print out a summary of what rules it's violating.; - Function `reconcile_nucleus` addresses problems (1) can't specify atoms by atomic number, (2) can't specify masses by mass number, (3) faced with A, Z, E, real/ghost, and label `@C_special@12.1`, all as inputs, need to make sure (a) extracting as much user info as possible, (b) not allowing contradictory info, and (c) filling in everything else from periodictable. Like chgmult, fn handles this by defining rules and candidate values, and letting itertools do the rest. Expand atom label spec so can specify isotope and atomic number e.g., `Gh(27@58.933)` or `2H_deut`.; - Validates atoms-too-close all at once, rather than per-atom, which can run into units, coordsys, and? old CoordEntry trouble.; - New `from_dict` fn takes a fully validated and defaulted molrec dict and constructs a Mol. psi4 fn is in export_mints.cc, and qcdb fn is in molecule.py.; - New `to_dict` fn serializes Mol into molrec dict. This fn in molecule.py is shared by psi4 & qcdb Mol classes. For the moment (not mandatory), this dict passes again through `from_arrays` and output is compared to make sure (1) resulting dict is pure and (2) Mol hasn't been tampered with in an unphysical way.; - `from_arrays` used internally to qcdb.Molecule for decomposing and reconstituting Mol into np arrays for fragmentation and alignment (potentially reordering); - BasisSet molecule handover (happens a lot to construct py basis for c++ mol and hand it back; also happens once per atom for SAD) that used to use create_psi4_string_from_molecule & create_molecule_from_string now uses to_dict & from_dict. So even though all this serialization tech isn't hooked up to `molecule {...}`, it's still getting exercised a lot.; - ISAPT calcs may well need to use `from_arrays` rather",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:12855,Security,access,access,12855," isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to access and work with. But it is numpy arrays attached to Wfn and thus mixing array classes on Wfn and unable to access c-side. Is this ok? Better ideas?; ```; Returns; -------; dict, text; Returns dictionary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normalized un-mass-weighted | a0 | np.array(ndof, ndof) float |; | degeneracy | degree of degenerac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:12967,Security,access,access,12967,"q; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to access and work with. But it is numpy arrays attached to Wfn and thus mixing array classes on Wfn and unable to access c-side. Is this ok? Better ideas?; ```; Returns; -------; dict, text; Returns dictionary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normalized un-mass-weighted | a0 | np.array(ndof, ndof) float |; | degeneracy | degree of degeneracy | | np.array(ndof) int |; | TRV | translation/rotation/vibration | | np.arra",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:379,Testability,test,test,379,"## Description; Includes Joe's psi4/psi4#772, since the original point of this was to do properly the hacks needed to get the normco into the Wfn. This includes py-side vibrational analysis, thermo, and small-system reordering. Also fixes Hessian symmetrization (py-side; haven't moved it back c-side). ~This isn't a final product. I only re-hooked-back-up one conventional freq test case. There's plenty of organizational, naming, storage (want both freq and normco in Wfn? and if so, only vibs, not RT? and how ID imag freq if we're float and don't want `-`?) choices yet. What this does have is a substantial py test case with 6 Hessian readouts from Cfour and 6 matching p4 findif-by-grad vibrational analyses to help debug some analytic Hessian errors at wwdc.~. ~And watch out – any change to `findif.h` recompiles most of psi.~. In the end, this added a py-side vib analysis, identified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large syst",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:615,Testability,test,test,615,"## Description; Includes Joe's psi4/psi4#772, since the original point of this was to do properly the hacks needed to get the normco into the Wfn. This includes py-side vibrational analysis, thermo, and small-system reordering. Also fixes Hessian symmetrization (py-side; haven't moved it back c-side). ~This isn't a final product. I only re-hooked-back-up one conventional freq test case. There's plenty of organizational, naming, storage (want both freq and normco in Wfn? and if so, only vibs, not RT? and how ID imag freq if we're float and don't want `-`?) choices yet. What this does have is a substantial py test case with 6 Hessian readouts from Cfour and 6 matching p4 findif-by-grad vibrational analyses to help debug some analytic Hessian errors at wwdc.~. ~And watch out – any change to `findif.h` recompiles most of psi.~. In the end, this added a py-side vib analysis, identified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large syst",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:4308,Testability,log,logic,4308,"Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set_units called, rather than as extra step.; - Finally add a `com_fixed` fn to mirror `orientation_fixed`. In qcdb.Mol, also a `fix_com`.; - `create_molecule_from_string` was doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_multiplicity/set_molecular_charge values might not stick upon reinterpret_coordentries b/c recomputed from fragments (which the user can't change) and by high-spin-sum. Adds logic to retain set_mult value if all fragments real (still no guarantee of physical reasonableness wrt frags) b/c otherwise I couldn't do isapt. See `validate_and_fill_chgmult` for general solution at the boundaries of Mol class, but no good internally to psi4.Mol b/c in python.; - `to_arrays`, `to_dict`, `BFS`, `B787`, `scramble` fns shared btwn psi4 & qcdb Mol classes. When drop py27, can attach qcdb fns directly to psi4 and drop the @static raw_ intermed fns.; - Molecule serialization; - New `from_arrays` constructor that takes minimal (geom & Z) to full geom spec as arrays (homogeneous natom-length, not heterogeneous per-atom) and thoroughly validates them and fills in defaults, emitting a standardized (to become MolSSI JSON) molrec dict. Plain fn produces dict. `psi4.core.Molecule.from_arrays` and `qcdb.Molecule.from_arrays` go a step further and return a Mol.; - Function `validate_and_fill_chgmult` addresses current problems (1) create_mol_from_string's problem of not allowing overall chgmult to be set, defaulting all frag to `0 1`, and defaulting",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:5463,Testability,test,tested,5463,". See `validate_and_fill_chgmult` for general solution at the boundaries of Mol class, but no good internally to psi4.Mol b/c in python.; - `to_arrays`, `to_dict`, `BFS`, `B787`, `scramble` fns shared btwn psi4 & qcdb Mol classes. When drop py27, can attach qcdb fns directly to psi4 and drop the @static raw_ intermed fns.; - Molecule serialization; - New `from_arrays` constructor that takes minimal (geom & Z) to full geom spec as arrays (homogeneous natom-length, not heterogeneous per-atom) and thoroughly validates them and fills in defaults, emitting a standardized (to become MolSSI JSON) molrec dict. Plain fn produces dict. `psi4.core.Molecule.from_arrays` and `qcdb.Molecule.from_arrays` go a step further and return a Mol.; - Function `validate_and_fill_chgmult` addresses current problems (1) create_mol_from_string's problem of not allowing overall chgmult to be set, defaulting all frag to `0 1`, and defaulting overall to fragA, (2) physical reasonableness (chg/mult/#elec compatible) not being tested for fragments at all and for overall not until the SCF code, (3) problems like psi4/psi4#114, and (4) overall and frag chgmult getting out of whack upon set_chg/mult, extract_subsets, not having frag chgmult editable, scf singlet/doublet defaulting. Taking given tot/frag chg/mult info and reasoning out the missing info would have been massive logic for chg/mult/#elec simultaneously, so this just codes up the rules and the defaults and throw `itertools.product` at it. Slows down a bit by 10 frag, but there's room for performance optimization. Ideally we'd call this at every reinterpret_coordentry, but that's not feasible for psi4 Mol. A good newdev starter project would be (for impossible reconciliations) to keep track of the least offending combo, and print out a summary of what rules it's violating.; - Function `reconcile_nucleus` addresses problems (1) can't specify atoms by atomic number, (2) can't specify masses by mass number, (3) faced with A, Z, E, real/ghost, a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:5815,Testability,log,logic,5815," constructor that takes minimal (geom & Z) to full geom spec as arrays (homogeneous natom-length, not heterogeneous per-atom) and thoroughly validates them and fills in defaults, emitting a standardized (to become MolSSI JSON) molrec dict. Plain fn produces dict. `psi4.core.Molecule.from_arrays` and `qcdb.Molecule.from_arrays` go a step further and return a Mol.; - Function `validate_and_fill_chgmult` addresses current problems (1) create_mol_from_string's problem of not allowing overall chgmult to be set, defaulting all frag to `0 1`, and defaulting overall to fragA, (2) physical reasonableness (chg/mult/#elec compatible) not being tested for fragments at all and for overall not until the SCF code, (3) problems like psi4/psi4#114, and (4) overall and frag chgmult getting out of whack upon set_chg/mult, extract_subsets, not having frag chgmult editable, scf singlet/doublet defaulting. Taking given tot/frag chg/mult info and reasoning out the missing info would have been massive logic for chg/mult/#elec simultaneously, so this just codes up the rules and the defaults and throw `itertools.product` at it. Slows down a bit by 10 frag, but there's room for performance optimization. Ideally we'd call this at every reinterpret_coordentry, but that's not feasible for psi4 Mol. A good newdev starter project would be (for impossible reconciliations) to keep track of the least offending combo, and print out a summary of what rules it's violating.; - Function `reconcile_nucleus` addresses problems (1) can't specify atoms by atomic number, (2) can't specify masses by mass number, (3) faced with A, Z, E, real/ghost, and label `@C_special@12.1`, all as inputs, need to make sure (a) extracting as much user info as possible, (b) not allowing contradictory info, and (c) filling in everything else from periodictable. Like chgmult, fn handles this by defining rules and candidate values, and letting itertools do the rest. Expand atom label spec so can specify isotope and atomic number e.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:8136,Testability,test,tests,8136,"e.py.; - New `to_dict` fn serializes Mol into molrec dict. This fn in molecule.py is shared by psi4 & qcdb Mol classes. For the moment (not mandatory), this dict passes again through `from_arrays` and output is compared to make sure (1) resulting dict is pure and (2) Mol hasn't been tampered with in an unphysical way.; - `from_arrays` used internally to qcdb.Molecule for decomposing and reconstituting Mol into np arrays for fragmentation and alignment (potentially reordering); - BasisSet molecule handover (happens a lot to construct py basis for c++ mol and hand it back; also happens once per atom for SAD) that used to use create_psi4_string_from_molecule & create_molecule_from_string now uses to_dict & from_dict. So even though all this serialization tech isn't hooked up to `molecule {...}`, it's still getting exercised a lot.; - ISAPT calcs may well need to use `from_arrays` rather than `molecule {...}` for a bit (until new molecule string parser in) if splitting bonds. See note in `tests/isapt1`. @bwb314, your SAPT consumer base may need informing about this change when it hits master.; - Add a py-side vibrational analysis called from `driver.frequency()` after the internal hessian() call; - Still sets `Wavefunction.frequencies` member data with vib-only real frequencies in cm^-1 so tests happy; - Rest of results is appended to Wfn py-side. See Q below; - Adds a `symmetrize_hessian` function; - Translates `print_molden_vibs`; - Easy switching between mass-weighted normalized (q), un-mass-weighted (w), and un-mass-weighted normalized (x) normal coordinates; - projects translations and rotations from Hessian; - separate `print_vibs(vibinfo)` function in which q/w/x normco, number of vibs per row, number of decimal places for freq, number of decimal places for normco, and normco (nat x 3) or (3*nat x 1) is all customizable by option; - py-side thermo analysis that returns a dict of all the results; - compare_vibinfos fn so one can compare every aspect of a vib calcu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:8443,Testability,test,tests,8443,"n unphysical way.; - `from_arrays` used internally to qcdb.Molecule for decomposing and reconstituting Mol into np arrays for fragmentation and alignment (potentially reordering); - BasisSet molecule handover (happens a lot to construct py basis for c++ mol and hand it back; also happens once per atom for SAD) that used to use create_psi4_string_from_molecule & create_molecule_from_string now uses to_dict & from_dict. So even though all this serialization tech isn't hooked up to `molecule {...}`, it's still getting exercised a lot.; - ISAPT calcs may well need to use `from_arrays` rather than `molecule {...}` for a bit (until new molecule string parser in) if splitting bonds. See note in `tests/isapt1`. @bwb314, your SAPT consumer base may need informing about this change when it hits master.; - Add a py-side vibrational analysis called from `driver.frequency()` after the internal hessian() call; - Still sets `Wavefunction.frequencies` member data with vib-only real frequencies in cm^-1 so tests happy; - Rest of results is appended to Wfn py-side. See Q below; - Adds a `symmetrize_hessian` function; - Translates `print_molden_vibs`; - Easy switching between mass-weighted normalized (q), un-mass-weighted (w), and un-mass-weighted normalized (x) normal coordinates; - projects translations and rotations from Hessian; - separate `print_vibs(vibinfo)` function in which q/w/x normco, number of vibs per row, number of decimal places for freq, number of decimal places for normco, and normco (nat x 3) or (3*nat x 1) is all customizable by option; - py-side thermo analysis that returns a dict of all the results; - compare_vibinfos fn so one can compare every aspect of a vib calculation, including normco. has capability to forgive some fields e.g., irrep label on mol with degen modes; - checks normco for partial findif frequency. @psi-rking fixed bug that made normco wrong for not-totally-symmetric partial findif-by-G frequency. connection?; - Adds gradient calc to the beginni",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:10916,Testability,test,tests,10916,"correctly, Gaussian prints low freqs of unproj and final normco of proj, Q-Chem prints the final normco of proj, Cfour prints final normco of unproj and prints the freq of proj.; - Add nifty fn stolen from internet to ; - decompose numpy matrices into little numpy matrices (like the i, jth atom of a Hessian ...) and put it back together again.; - generate a random, evenly distributed 3d rotation matrix; - Adds an alignment tool (B787) that returns a displacement vec, rotation mat, and atom map to get best Kabsch overlap (@dsirianni code) between two molecules. Uses Hungarian algorithm+ for atom shuffling. In that case, required `hungarian` and `networkx` add'l packages. Handles shuffled atoms up to at least benzene trimer and more if haven't too many symmetry-equivalent atoms. Really good for perfect matches, fine but untuned for imperfect matches. Also provides functions that use that return set to properly manipulate list, vec, mol, grad, hess (hess untested). Upon request, also tests mirror-image alignment.; - Remove everything beyond constructing the Cartesian Hessian from findif, including VIBRATION class; - Remove the c-side thermo module ; - Adds extensive vib test on HOOH-TS, CO2, ethene, H2CO, methane that checks freqs _and_ normco of each mol vs. Cfour output for following conditions; - Cfour Hessian (tests harmonic analysis machinery); - Psi freq by grad; - Psi freq by energy; - Psi freq by analytic ~(only methane and ammonia pass)~ All pass now, thanks to @andysim ; - [x] fix the embarrassing bug (I'll do you a coding favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not j",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:11106,Testability,test,test,11106,"nd prints the freq of proj.; - Add nifty fn stolen from internet to ; - decompose numpy matrices into little numpy matrices (like the i, jth atom of a Hessian ...) and put it back together again.; - generate a random, evenly distributed 3d rotation matrix; - Adds an alignment tool (B787) that returns a displacement vec, rotation mat, and atom map to get best Kabsch overlap (@dsirianni code) between two molecules. Uses Hungarian algorithm+ for atom shuffling. In that case, required `hungarian` and `networkx` add'l packages. Handles shuffled atoms up to at least benzene trimer and more if haven't too many symmetry-equivalent atoms. Really good for perfect matches, fine but untuned for imperfect matches. Also provides functions that use that return set to properly manipulate list, vec, mol, grad, hess (hess untested). Upon request, also tests mirror-image alignment.; - Remove everything beyond constructing the Cartesian Hessian from findif, including VIBRATION class; - Remove the c-side thermo module ; - Adds extensive vib test on HOOH-TS, CO2, ethene, H2CO, methane that checks freqs _and_ normco of each mol vs. Cfour output for following conditions; - Cfour Hessian (tests harmonic analysis machinery); - Psi freq by grad; - Psi freq by energy; - Psi freq by analytic ~(only methane and ammonia pass)~ All pass now, thanks to @andysim ; - [x] fix the embarrassing bug (I'll do you a coding favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:11253,Testability,test,tests,11253,"ent vec, rotation mat, and atom map to get best Kabsch overlap (@dsirianni code) between two molecules. Uses Hungarian algorithm+ for atom shuffling. In that case, required `hungarian` and `networkx` add'l packages. Handles shuffled atoms up to at least benzene trimer and more if haven't too many symmetry-equivalent atoms. Really good for perfect matches, fine but untuned for imperfect matches. Also provides functions that use that return set to properly manipulate list, vec, mol, grad, hess (hess untested). Upon request, also tests mirror-image alignment.; - Remove everything beyond constructing the Cartesian Hessian from findif, including VIBRATION class; - Remove the c-side thermo module ; - Adds extensive vib test on HOOH-TS, CO2, ethene, H2CO, methane that checks freqs _and_ normco of each mol vs. Cfour output for following conditions; - Cfour Hessian (tests harmonic analysis machinery); - Psi freq by grad; - Psi freq by energy; - Psi freq by analytic ~(only methane and ammonia pass)~ All pass now, thanks to @andysim ; - [x] fix the embarrassing bug (I'll do you a coding favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:11840,Testability,test,testing,11840," vec, mol, grad, hess (hess untested). Upon request, also tests mirror-image alignment.; - Remove everything beyond constructing the Cartesian Hessian from findif, including VIBRATION class; - Remove the c-side thermo module ; - Adds extensive vib test on HOOH-TS, CO2, ethene, H2CO, methane that checks freqs _and_ normco of each mol vs. Cfour output for following conditions; - Cfour Hessian (tests harmonic analysis machinery); - Psi freq by grad; - Psi freq by energy; - Psi freq by analytic ~(only methane and ammonia pass)~ All pass now, thanks to @andysim ; - [x] fix the embarrassing bug (I'll do you a coding favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to acc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:12250,Testability,test,test,12250,"c analysis machinery); - Psi freq by grad; - Psi freq by energy; - Psi freq by analytic ~(only methane and ammonia pass)~ All pass now, thanks to @andysim ; - [x] fix the embarrassing bug (I'll do you a coding favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to access and work with. But it is numpy arrays attached to Wfn and thus mixing array classes on Wfn and unable to access c-side. Is this ok? Better ideas?; ```; Returns; -------; dict, text; Returns dictionary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+---------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:12332,Testability,Test,TestComparisonError,12332,"- Psi freq by analytic ~(only methane and ammonia pass)~ All pass now, thanks to @andysim ; - [x] fix the embarrassing bug (I'll do you a coding favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to access and work with. But it is numpy arrays attached to Wfn and thus mixing array classes on Wfn and unable to access c-side. Is this ok? Better ideas?; ```; Returns; -------; dict, text; Returns dictionary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:12414,Testability,test,test,12414,"ng favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to access and work with. But it is numpy arrays attached to Wfn and thus mixing array classes on Wfn and unable to access c-side. Is this ok? Better ideas?; ```; Returns; -------; dict, text; Returns dictionary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+==========================",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:15263,Testability,test,tests,15263,"=====================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normalized un-mass-weighted | a0 | np.array(ndof, ndof) float |; | degeneracy | degree of degeneracy | | np.array(ndof) int |; | TRV | translation/rotation/vibration | | np.array(ndof) str 'TR' or 'V' or '-' for partial |; | gamma | irreducible representation | | np.array(ndof) str irrep or None if unclassifiable |; | mu | reduced mass | u | np.array(ndof) float (+/+) |; | k | force constant | mDyne/A | np.array(ndof) float (+/-) |; | DQ0 | RMS deviation v=0 | a0 u^1/2 | np.array(ndof) float (+/0) |; | Qtp0 | Turning point v=0 | a0 u^1/2 | np.array(ndof) float (+/0) |; | Xtp0 | Turning point v=0 | a0 | np.array(ndof) float (+/0) |; | theta_vib | char temp | K | np.array(ndof) float (+/0) |; ; Examples; --------; # displacement of first atom in highest energy mode; >>> vibinfo['x'].data[:, -1].reshape(nat, 3)[0]; ; # remove translations & rotations; >>> vibonly = filter_nonvib(vibinfo); ```; - [ ] Should we run a gradient before every freq to judge whether to project rotations? Right now freq on non-stationary structures are going to be way different than from findif because findif stuck with the (in PR analysis labeling) ""pre-proj"" vibs; - [ ] How to handle natural geometry shift the occurs upon isotopic substitution in geometry but not in reused Hessian? shift/rotate the Hessian? compute in center-of-charge instead?. ## Good stuff still to do; - [ ] vibs docs; - [ ] warning to isapt folks that frag spec just got tighter wrt mult; - [ ] break up vibanalysis, dft-cation, dft-water-dimer tests. to py?. closes #940 . ## Status; - [x] Ready for review; - [x] Ready for merge content-correctness-wise; - [x] Ready for merge psi-planning-wise",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/834:1788,Usability,Simpl,Simplify,1788,"ntified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `un",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834
https://github.com/psi4/psi4/pull/835:72,Deployability,update,updates,72,## Description; Ensures that JSON provenance data is always written and updates its memory setter to the new type. Removes EP2 pragma's that shouldn't exists and has caused problems. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/835
https://github.com/psi4/psi4/pull/836:746,Availability,down,down,746,"## Description; This PR is an effort to move towards canonical C++11 usage: ; 1. it removes use of `new` when creating `std::shared_ptr`s in favor of `std::make_shared`.; 2. it uses `auto` on the left-hand side of the `std::shared_ptr` declarations.; 3. it replaces occurrences of `NULL`, signalling the null pointer, with `nullptr`.; These are changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; s",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/836
https://github.com/psi4/psi4/pull/836:561,Energy Efficiency,Reduce,Reduces,561,"## Description; This PR is an effort to move towards canonical C++11 usage: ; 1. it removes use of `new` when creating `std::shared_ptr`s in favor of `std::make_shared`.; 2. it uses `auto` on the left-hand side of the `std::shared_ptr` declarations.; 3. it replaces occurrences of `NULL`, signalling the null pointer, with `nullptr`.; These are changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; s",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/836
https://github.com/psi4/psi4/pull/836:1365,Energy Efficiency,reduce,reduces,1365,"changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `null",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/836
https://github.com/psi4/psi4/pull/836:2122,Integrability,DEPEND,DEPENDENT,2122,"iency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `nullptr` to `0` or `NULL`; `0` is an `int` not a pointer. Almost the same goes for `NULL` though implementations of the language can differ in the details. If you want to overload on pointer types and/or use pointer types with templates, use `nullptr` to signal the null pointer. The correct overload/template parameter will then be deduced. Using `nullptr` also makes the code more readable, especially if `auto` is used consistently throughout.; _Reference_: Item 8 in [Effective Modern C++].; _Note_: This PR only replaces `NULL` with `nullptr`. ## Todos; * **Developer Interest**; - [x] Converts `std::shared_ptr<TYPE> VARIABLE = std::shared_ptr<TYPE>(new TYPE(PARAMETERS));` to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/836
https://github.com/psi4/psi4/pull/836:1405,Modifiability,variab,variable,1405,"+]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `nullptr` to `0` or `NULL`; `0` is an `int` not a pointer. Almost the same goes for `NULL` though implementations of the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/836
https://github.com/psi4/psi4/pull/836:1648,Modifiability,variab,variables,1648,"d_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `nullptr` to `0` or `NULL`; `0` is an `int` not a pointer. Almost the same goes for `NULL` though implementations of the language can differ in the details. If you want to overload on pointer types and/or use pointer types with templates, use `nullptr` to signal the null pointer. The correct overl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/836
https://github.com/psi4/psi4/pull/836:2965,Modifiability,VARIAB,VARIABLE,2965,"ix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `nullptr` to `0` or `NULL`; `0` is an `int` not a pointer. Almost the same goes for `NULL` though implementations of the language can differ in the details. If you want to overload on pointer types and/or use pointer types with templates, use `nullptr` to signal the null pointer. The correct overload/template parameter will then be deduced. Using `nullptr` also makes the code more readable, especially if `auto` is used consistently throughout.; _Reference_: Item 8 in [Effective Modern C++].; _Note_: This PR only replaces `NULL` with `nullptr`. ## Todos; * **Developer Interest**; - [x] Converts `std::shared_ptr<TYPE> VARIABLE = std::shared_ptr<TYPE>(new TYPE(PARAMETERS));` to `std::shared_ptr<TYPE> VARIABLE = std::make_shared<TYPE>(PARAMETERS);`; - [x] Use `auto` on the left-hand side of some of the now converted declarations: `auto VARIABLE = std::make_shared<TYPE>(PARAMETERS);`; - [x] Replace occurrences of `NULL` with `nullptr`. ## Status; - [x] Ready to go. [Effective Modern C++]:; https://edisciplinas.usp.br/pluginfile.php/1995323/mod_resource/content/1/Effective%20Modern%20C%2B%2B%202014.pdf",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/836
https://github.com/psi4/psi4/pull/836:3048,Modifiability,VARIAB,VARIABLE,3048,"ix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `nullptr` to `0` or `NULL`; `0` is an `int` not a pointer. Almost the same goes for `NULL` though implementations of the language can differ in the details. If you want to overload on pointer types and/or use pointer types with templates, use `nullptr` to signal the null pointer. The correct overload/template parameter will then be deduced. Using `nullptr` also makes the code more readable, especially if `auto` is used consistently throughout.; _Reference_: Item 8 in [Effective Modern C++].; _Note_: This PR only replaces `NULL` with `nullptr`. ## Todos; * **Developer Interest**; - [x] Converts `std::shared_ptr<TYPE> VARIABLE = std::shared_ptr<TYPE>(new TYPE(PARAMETERS));` to `std::shared_ptr<TYPE> VARIABLE = std::make_shared<TYPE>(PARAMETERS);`; - [x] Use `auto` on the left-hand side of some of the now converted declarations: `auto VARIABLE = std::make_shared<TYPE>(PARAMETERS);`; - [x] Replace occurrences of `NULL` with `nullptr`. ## Status; - [x] Ready to go. [Effective Modern C++]:; https://edisciplinas.usp.br/pluginfile.php/1995323/mod_resource/content/1/Effective%20Modern%20C%2B%2B%202014.pdf",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/836
https://github.com/psi4/psi4/pull/836:3185,Modifiability,VARIAB,VARIABLE,3185,"ix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `nullptr` to `0` or `NULL`; `0` is an `int` not a pointer. Almost the same goes for `NULL` though implementations of the language can differ in the details. If you want to overload on pointer types and/or use pointer types with templates, use `nullptr` to signal the null pointer. The correct overload/template parameter will then be deduced. Using `nullptr` also makes the code more readable, especially if `auto` is used consistently throughout.; _Reference_: Item 8 in [Effective Modern C++].; _Note_: This PR only replaces `NULL` with `nullptr`. ## Todos; * **Developer Interest**; - [x] Converts `std::shared_ptr<TYPE> VARIABLE = std::shared_ptr<TYPE>(new TYPE(PARAMETERS));` to `std::shared_ptr<TYPE> VARIABLE = std::make_shared<TYPE>(PARAMETERS);`; - [x] Use `auto` on the left-hand side of some of the now converted declarations: `auto VARIABLE = std::make_shared<TYPE>(PARAMETERS);`; - [x] Replace occurrences of `NULL` with `nullptr`. ## Status; - [x] Ready to go. [Effective Modern C++]:; https://edisciplinas.usp.br/pluginfile.php/1995323/mod_resource/content/1/Effective%20Modern%20C%2B%2B%202014.pdf",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/836
https://github.com/psi4/psi4/pull/836:3369,Modifiability,plugin,pluginfile,3369,"ix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `nullptr` to `0` or `NULL`; `0` is an `int` not a pointer. Almost the same goes for `NULL` though implementations of the language can differ in the details. If you want to overload on pointer types and/or use pointer types with templates, use `nullptr` to signal the null pointer. The correct overload/template parameter will then be deduced. Using `nullptr` also makes the code more readable, especially if `auto` is used consistently throughout.; _Reference_: Item 8 in [Effective Modern C++].; _Note_: This PR only replaces `NULL` with `nullptr`. ## Todos; * **Developer Interest**; - [x] Converts `std::shared_ptr<TYPE> VARIABLE = std::shared_ptr<TYPE>(new TYPE(PARAMETERS));` to `std::shared_ptr<TYPE> VARIABLE = std::make_shared<TYPE>(PARAMETERS);`; - [x] Use `auto` on the left-hand side of some of the now converted declarations: `auto VARIABLE = std::make_shared<TYPE>(PARAMETERS);`; - [x] Replace occurrences of `NULL` with `nullptr`. ## Status; - [x] Ready to go. [Effective Modern C++]:; https://edisciplinas.usp.br/pluginfile.php/1995323/mod_resource/content/1/Effective%20Modern%20C%2B%2B%202014.pdf",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/836
https://github.com/psi4/psi4/pull/836:1040,Performance,Perform,Performs,1040,"d_ptr`s in favor of `std::make_shared`.; 2. it uses `auto` on the left-hand side of the `std::shared_ptr` declarations.; 3. it replaces occurrences of `NULL`, signalling the null pointer, with `nullptr`.; These are changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/836
https://github.com/psi4/psi4/pull/836:1161,Performance,Perform,Performs,1161,"d_ptr`s in favor of `std::make_shared`.; 2. it uses `auto` on the left-hand side of the `std::shared_ptr` declarations.; 3. it replaces occurrences of `NULL`, signalling the null pointer, with `nullptr`.; These are changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/836
https://github.com/psi4/psi4/pull/836:970,Safety,safe,safety,970,"## Description; This PR is an effort to move towards canonical C++11 usage: ; 1. it removes use of `new` when creating `std::shared_ptr`s in favor of `std::make_shared`.; 2. it uses `auto` on the left-hand side of the `std::shared_ptr` declarations.; 3. it replaces occurrences of `NULL`, signalling the null pointer, with `nullptr`.; These are changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; s",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/836
https://github.com/psi4/psi4/pull/836:1380,Safety,avoid,avoids,1380,"changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `null",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/836
https://github.com/psi4/psi4/pull/837:215,Deployability,Release,Release,215,## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/837
https://github.com/psi4/psi4/pull/839:492,Deployability,Release,Release,492,"## Description; A pull request aiming to simplify the Psi4 gradients. Doing this ensures dipole perturbations and external potentials are used throughout Psi4 and not just in the SCF and MP2 codes. Also, will either provide basic infrastructure for DFT Hessians or the Hessians themselves. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Potential/Kinetic/Overlap/Perturbation gradients from MintsHelper; * **User-Facing for Release Notes**; - [ ] RKS DFT Hessians. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/839
https://github.com/psi4/psi4/pull/839:41,Usability,simpl,simplify,41,"## Description; A pull request aiming to simplify the Psi4 gradients. Doing this ensures dipole perturbations and external potentials are used throughout Psi4 and not just in the SCF and MP2 codes. Also, will either provide basic infrastructure for DFT Hessians or the Hessians themselves. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Potential/Kinetic/Overlap/Perturbation gradients from MintsHelper; * **User-Facing for Release Notes**; - [ ] RKS DFT Hessians. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/839
https://github.com/psi4/psi4/pull/840:109,Availability,down,down,109,## Description; Small tweak to SAPT(DFT) to help eliminate small ~30cal/mol wiggles in the PES. Tracked this down to issues in allowing the derivatives of very small densities leading to quite spurious results. This was changed to the same tolerance as the V derivative builds. Does change the result by ~1cal/mol for a test case- this is lost in the noise of DFT. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/840
https://github.com/psi4/psi4/pull/840:240,Availability,toler,tolerance,240,## Description; Small tweak to SAPT(DFT) to help eliminate small ~30cal/mol wiggles in the PES. Tracked this down to issues in allowing the derivatives of very small densities leading to quite spurious results. This was changed to the same tolerance as the V derivative builds. Does change the result by ~1cal/mol for a test case- this is lost in the noise of DFT. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/840
https://github.com/psi4/psi4/pull/840:320,Testability,test,test,320,## Description; Small tweak to SAPT(DFT) to help eliminate small ~30cal/mol wiggles in the PES. Tracked this down to issues in allowing the derivatives of very small densities leading to quite spurious results. This was changed to the same tolerance as the V derivative builds. Does change the result by ~1cal/mol for a test case- this is lost in the noise of DFT. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/840
https://github.com/psi4/psi4/pull/841:97,Availability,failure,failure,97,## Description; This PR fixes a line in cookbook-rohf-orb-rot test that was previously causing a failure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Fixes previously failing tests; * **User-Facing for Release Notes**; - Not sure if this is applicable?. ## Questions; - No questions at this time. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/841
https://github.com/psi4/psi4/pull/841:273,Deployability,Release,Release,273,## Description; This PR fixes a line in cookbook-rohf-orb-rot test that was previously causing a failure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Fixes previously failing tests; * **User-Facing for Release Notes**; - Not sure if this is applicable?. ## Questions; - No questions at this time. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/841
https://github.com/psi4/psi4/pull/841:62,Testability,test,test,62,## Description; This PR fixes a line in cookbook-rohf-orb-rot test that was previously causing a failure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Fixes previously failing tests; * **User-Facing for Release Notes**; - Not sure if this is applicable?. ## Questions; - No questions at this time. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/841
https://github.com/psi4/psi4/pull/841:246,Testability,test,tests,246,## Description; This PR fixes a line in cookbook-rohf-orb-rot test that was previously causing a failure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Fixes previously failing tests; * **User-Facing for Release Notes**; - Not sure if this is applicable?. ## Questions; - No questions at this time. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/841
https://github.com/psi4/psi4/pull/842:249,Testability,test,tests,249,## Description; Adds analytic UHF hessians. ## Todos; Notable points that this PR has either accomplished or will accomplish. - [X] UHF response terms (conventional algorithm); - [X] UHF response terms (DF algorithm); - [X] UHF JK derivs; - [X] Add tests . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/842
https://github.com/psi4/psi4/issues/843:64,Energy Efficiency,energy,energy,64,"Hi, I noticed some odd ghosting behavior when doing interaction energy calculations on molecules containing Iodine. . When manually doing the counterpoise correction for a non-I-containing molecule, Psi4 reads the ghosted atoms properly and computes a sensible interaction energy (see `correctly-ghosted.txt`). However, when manually doing the counterpoise correction for an I-containing molecule, Psi4 does not ghost the atoms at all, and does the exact same calculation three times, resulting in an incorrect interaction energy (see `incorrectly-ghosted.txt`). The (much easier) workaround here is to counterpoise correct using the bsse_type=""cp"" interface, but I wanted to bring this to your attention anyways. [correctly-ghosted.txt](https://github.com/psi4/psi4/files/1458283/correctly-ghosted.txt); [incorrectly-ghosted.txt](https://github.com/psi4/psi4/files/1458284/incorrectly-ghosted.txt). Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/843
https://github.com/psi4/psi4/issues/843:273,Energy Efficiency,energy,energy,273,"Hi, I noticed some odd ghosting behavior when doing interaction energy calculations on molecules containing Iodine. . When manually doing the counterpoise correction for a non-I-containing molecule, Psi4 reads the ghosted atoms properly and computes a sensible interaction energy (see `correctly-ghosted.txt`). However, when manually doing the counterpoise correction for an I-containing molecule, Psi4 does not ghost the atoms at all, and does the exact same calculation three times, resulting in an incorrect interaction energy (see `incorrectly-ghosted.txt`). The (much easier) workaround here is to counterpoise correct using the bsse_type=""cp"" interface, but I wanted to bring this to your attention anyways. [correctly-ghosted.txt](https://github.com/psi4/psi4/files/1458283/correctly-ghosted.txt); [incorrectly-ghosted.txt](https://github.com/psi4/psi4/files/1458284/incorrectly-ghosted.txt). Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/843
https://github.com/psi4/psi4/issues/843:523,Energy Efficiency,energy,energy,523,"Hi, I noticed some odd ghosting behavior when doing interaction energy calculations on molecules containing Iodine. . When manually doing the counterpoise correction for a non-I-containing molecule, Psi4 reads the ghosted atoms properly and computes a sensible interaction energy (see `correctly-ghosted.txt`). However, when manually doing the counterpoise correction for an I-containing molecule, Psi4 does not ghost the atoms at all, and does the exact same calculation three times, resulting in an incorrect interaction energy (see `incorrectly-ghosted.txt`). The (much easier) workaround here is to counterpoise correct using the bsse_type=""cp"" interface, but I wanted to bring this to your attention anyways. [correctly-ghosted.txt](https://github.com/psi4/psi4/files/1458283/correctly-ghosted.txt); [incorrectly-ghosted.txt](https://github.com/psi4/psi4/files/1458284/incorrectly-ghosted.txt). Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/843
https://github.com/psi4/psi4/issues/843:649,Integrability,interface,interface,649,"Hi, I noticed some odd ghosting behavior when doing interaction energy calculations on molecules containing Iodine. . When manually doing the counterpoise correction for a non-I-containing molecule, Psi4 reads the ghosted atoms properly and computes a sensible interaction energy (see `correctly-ghosted.txt`). However, when manually doing the counterpoise correction for an I-containing molecule, Psi4 does not ghost the atoms at all, and does the exact same calculation three times, resulting in an incorrect interaction energy (see `incorrectly-ghosted.txt`). The (much easier) workaround here is to counterpoise correct using the bsse_type=""cp"" interface, but I wanted to bring this to your attention anyways. [correctly-ghosted.txt](https://github.com/psi4/psi4/files/1458283/correctly-ghosted.txt); [incorrectly-ghosted.txt](https://github.com/psi4/psi4/files/1458284/incorrectly-ghosted.txt). Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/843
https://github.com/psi4/psi4/pull/844:669,Deployability,Release,Release,669,"## Description; @dgasmith and I had to do some preliminary work to get the Hessian code extended, and here's the result. Essentially, we've centralized the construction of the core Hamiltonian and its derivatives, which ensures that different codes will correctly obey any new one electron contributions (field perturbation, MM point charges, ECPs, *etc.*) and derivatives thereof. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] @psi-rking: your perturbed CC gradient request should be addressed by this fix.; - [x] Test cases for DFOCC and CCENERGY gradients, with dipole field.; * **User-Facing for Release Notes**; - [x] Improved support for ECPs and external fields, and their gradients, in correlated calculations. . ## Questions; - [x] How should we handle the new signature for mol's `nuclear_repulsion_energy()`? The current solution is to mandate that the field be specified C++-side, but py-side just provides a default zero field. Another option would be to overload with an arg-less function, and provide a deprecation warning for that version (to force the programmer to think about whether they really mean to compute the nuc. energy ignoring the field). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/844
https://github.com/psi4/psi4/pull/844:334,Energy Efficiency,charge,charges,334,"## Description; @dgasmith and I had to do some preliminary work to get the Hessian code extended, and here's the result. Essentially, we've centralized the construction of the core Hamiltonian and its derivatives, which ensures that different codes will correctly obey any new one electron contributions (field perturbation, MM point charges, ECPs, *etc.*) and derivatives thereof. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] @psi-rking: your perturbed CC gradient request should be addressed by this fix.; - [x] Test cases for DFOCC and CCENERGY gradients, with dipole field.; * **User-Facing for Release Notes**; - [x] Improved support for ECPs and external fields, and their gradients, in correlated calculations. . ## Questions; - [x] How should we handle the new signature for mol's `nuclear_repulsion_energy()`? The current solution is to mandate that the field be specified C++-side, but py-side just provides a default zero field. Another option would be to overload with an arg-less function, and provide a deprecation warning for that version (to force the programmer to think about whether they really mean to compute the nuc. energy ignoring the field). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/844
https://github.com/psi4/psi4/pull/844:1209,Energy Efficiency,energy,energy,1209,"## Description; @dgasmith and I had to do some preliminary work to get the Hessian code extended, and here's the result. Essentially, we've centralized the construction of the core Hamiltonian and its derivatives, which ensures that different codes will correctly obey any new one electron contributions (field perturbation, MM point charges, ECPs, *etc.*) and derivatives thereof. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] @psi-rking: your perturbed CC gradient request should be addressed by this fix.; - [x] Test cases for DFOCC and CCENERGY gradients, with dipole field.; * **User-Facing for Release Notes**; - [x] Improved support for ECPs and external fields, and their gradients, in correlated calculations. . ## Questions; - [x] How should we handle the new signature for mol's `nuclear_repulsion_energy()`? The current solution is to mandate that the field be specified C++-side, but py-side just provides a default zero field. Another option would be to overload with an arg-less function, and provide a deprecation warning for that version (to force the programmer to think about whether they really mean to compute the nuc. energy ignoring the field). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/844
https://github.com/psi4/psi4/pull/844:88,Modifiability,extend,extended,88,"## Description; @dgasmith and I had to do some preliminary work to get the Hessian code extended, and here's the result. Essentially, we've centralized the construction of the core Hamiltonian and its derivatives, which ensures that different codes will correctly obey any new one electron contributions (field perturbation, MM point charges, ECPs, *etc.*) and derivatives thereof. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] @psi-rking: your perturbed CC gradient request should be addressed by this fix.; - [x] Test cases for DFOCC and CCENERGY gradients, with dipole field.; * **User-Facing for Release Notes**; - [x] Improved support for ECPs and external fields, and their gradients, in correlated calculations. . ## Questions; - [x] How should we handle the new signature for mol's `nuclear_repulsion_energy()`? The current solution is to mandate that the field be specified C++-side, but py-side just provides a default zero field. Another option would be to overload with an arg-less function, and provide a deprecation warning for that version (to force the programmer to think about whether they really mean to compute the nuc. energy ignoring the field). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/844
https://github.com/psi4/psi4/pull/844:584,Testability,Test,Test,584,"## Description; @dgasmith and I had to do some preliminary work to get the Hessian code extended, and here's the result. Essentially, we've centralized the construction of the core Hamiltonian and its derivatives, which ensures that different codes will correctly obey any new one electron contributions (field perturbation, MM point charges, ECPs, *etc.*) and derivatives thereof. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] @psi-rking: your perturbed CC gradient request should be addressed by this fix.; - [x] Test cases for DFOCC and CCENERGY gradients, with dipole field.; * **User-Facing for Release Notes**; - [x] Improved support for ECPs and external fields, and their gradients, in correlated calculations. . ## Questions; - [x] How should we handle the new signature for mol's `nuclear_repulsion_energy()`? The current solution is to mandate that the field be specified C++-side, but py-side just provides a default zero field. Another option would be to overload with an arg-less function, and provide a deprecation warning for that version (to force the programmer to think about whether they really mean to compute the nuc. energy ignoring the field). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/844
https://github.com/psi4/psi4/pull/845:268,Availability,error,errors,268,"## Description; During the switch over to the super build the `ENABLE_{ASAN,TSAN,UBSAN}` flags stopped working. This PR fixes them. To use these sanitizers you must compile a copy of Python with the corresponding flags added. If you do not then you'll receive runtime errors. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845
https://github.com/psi4/psi4/pull/845:145,Security,sanitiz,sanitizers,145,"## Description; During the switch over to the super build the `ENABLE_{ASAN,TSAN,UBSAN}` flags stopped working. This PR fixes them. To use these sanitizers you must compile a copy of Python with the corresponding flags added. If you do not then you'll receive runtime errors. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845
https://github.com/psi4/psi4/issues/846:171,Availability,recover,recover,171,"[This block of code](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsgshell.py#L222-L228) in libmintsgshell.py throws a UnboundLocalError when trying to recover from the ZeroDivisionError. ```; try:; norm = math.sqrt(1.0 / (tmp * e_sum)); except ZeroDivisionError:; self.PYcoef[i] = [1.0 for i in range(self.nprimitive())]; # Set the normalization; for i in range(self.nprimitive()):; self.PYcoef[i] *= norm; ```. Traceback; ```; Traceback (most recent call last):; File ""/prefix/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/prefix/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1990, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1279, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 101, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 68, in pybuild_basis; key, resolved_target, fitrole, other, return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 661, in pyconstruct; return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 876, in construct; ecpbasisset = BasisSet(key, mol, ecp_atom_basis_shell); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 148, in __init__; self.constructor_role_mol_shellmap(*args); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 349, in constructor_role_mol_shellmap; n, xyz_ptr, bf_count, pt='Unnormalized', rpowers=rpowers[tst:tsp]); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 193, in __init__; self.normalize_shell(); File ""/prefix/lib//psi4/d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/846
https://github.com/psi4/psi4/issues/846:642,Energy Efficiency,energy,energy,642,"[This block of code](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsgshell.py#L222-L228) in libmintsgshell.py throws a UnboundLocalError when trying to recover from the ZeroDivisionError. ```; try:; norm = math.sqrt(1.0 / (tmp * e_sum)); except ZeroDivisionError:; self.PYcoef[i] = [1.0 for i in range(self.nprimitive())]; # Set the normalization; for i in range(self.nprimitive()):; self.PYcoef[i] *= norm; ```. Traceback; ```; Traceback (most recent call last):; File ""/prefix/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/prefix/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1990, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1279, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 101, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 68, in pybuild_basis; key, resolved_target, fitrole, other, return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 661, in pyconstruct; return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 876, in construct; ecpbasisset = BasisSet(key, mol, ecp_atom_basis_shell); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 148, in __init__; self.constructor_role_mol_shellmap(*args); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 349, in constructor_role_mol_shellmap; n, xyz_ptr, bf_count, pt='Unnormalized', rpowers=rpowers[tst:tsp]); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 193, in __init__; self.normalize_shell(); File ""/prefix/lib//psi4/d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/846
https://github.com/psi4/psi4/issues/846:668,Energy Efficiency,energy,energy,668,"[This block of code](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsgshell.py#L222-L228) in libmintsgshell.py throws a UnboundLocalError when trying to recover from the ZeroDivisionError. ```; try:; norm = math.sqrt(1.0 / (tmp * e_sum)); except ZeroDivisionError:; self.PYcoef[i] = [1.0 for i in range(self.nprimitive())]; # Set the normalization; for i in range(self.nprimitive()):; self.PYcoef[i] *= norm; ```. Traceback; ```; Traceback (most recent call last):; File ""/prefix/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/prefix/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1990, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1279, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 101, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 68, in pybuild_basis; key, resolved_target, fitrole, other, return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 661, in pyconstruct; return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 876, in construct; ecpbasisset = BasisSet(key, mol, ecp_atom_basis_shell); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 148, in __init__; self.constructor_role_mol_shellmap(*args); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 349, in constructor_role_mol_shellmap; n, xyz_ptr, bf_count, pt='Unnormalized', rpowers=rpowers[tst:tsp]); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 193, in __init__; self.normalize_shell(); File ""/prefix/lib//psi4/d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/846
https://github.com/psi4/psi4/issues/846:2241,Modifiability,variab,variable,2241,"Ycoef[i] = [1.0 for i in range(self.nprimitive())]; # Set the normalization; for i in range(self.nprimitive()):; self.PYcoef[i] *= norm; ```. Traceback; ```; Traceback (most recent call last):; File ""/prefix/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/prefix/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1990, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1279, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 101, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 68, in pybuild_basis; key, resolved_target, fitrole, other, return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 661, in pyconstruct; return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 876, in construct; ecpbasisset = BasisSet(key, mol, ecp_atom_basis_shell); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 148, in __init__; self.constructor_role_mol_shellmap(*args); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 349, in constructor_role_mol_shellmap; n, xyz_ptr, bf_count, pt='Unnormalized', rpowers=rpowers[tst:tsp]); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 193, in __init__; self.normalize_shell(); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 238, in normalize_shell; self.contraction_normalization(); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 228, in contraction_normalization; self.PYcoef[i] *= norm. UnboundLocalError: local variable 'norm' referenced before assignment; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/846
https://github.com/psi4/psi4/issues/846:171,Safety,recover,recover,171,"[This block of code](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsgshell.py#L222-L228) in libmintsgshell.py throws a UnboundLocalError when trying to recover from the ZeroDivisionError. ```; try:; norm = math.sqrt(1.0 / (tmp * e_sum)); except ZeroDivisionError:; self.PYcoef[i] = [1.0 for i in range(self.nprimitive())]; # Set the normalization; for i in range(self.nprimitive()):; self.PYcoef[i] *= norm; ```. Traceback; ```; Traceback (most recent call last):; File ""/prefix/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/prefix/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1990, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1279, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 101, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 68, in pybuild_basis; key, resolved_target, fitrole, other, return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 661, in pyconstruct; return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 876, in construct; ecpbasisset = BasisSet(key, mol, ecp_atom_basis_shell); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 148, in __init__; self.constructor_role_mol_shellmap(*args); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 349, in constructor_role_mol_shellmap; n, xyz_ptr, bf_count, pt='Unnormalized', rpowers=rpowers[tst:tsp]); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 193, in __init__; self.normalize_shell(); File ""/prefix/lib//psi4/d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/846
https://github.com/psi4/psi4/pull/847:355,Testability,test,tests,355,"## Description; In order to bring back SCF hooks, kill the C-side EFP octopus, and provide a foundation for a smart SCF driver, want control over SCF iterations to be at the driver level. Features will have to be filled out more fully from the commit msgs once this stabilizes, but current status is (1) rebased, (2) no EFP or PCM yet, (3) otherwise, all tests pass, (4) haven't done a final output vs. output.ref comparison. Please to assess mercilessly the general structure and stable parts of the C/Py handshake. There's very little that I'll defend energetically. There's a few questions and notes marked with `Q:` in the code. Hack away in the ""pre-review"" time. That is, this can't be merged b/c it breaks addons. But it'd be nice if this was tentatively pre-approved before continuing on into efp, pcm, and json stages. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/847
https://github.com/psi4/psi4/pull/848:566,Deployability,Release,Release,566,"## Description; So all the build docs on the wiki are indeed deprecated as they announce. But all the rest of the docs are of varying levels of value and states of deprecation. This collects the ones that really shouldn't be lost. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Starts a programmers FAQ; - [x] Collects orbital naming and options naming items; - [x] Collects BLAS/LAPACK usage docs; - [x] Collects the C-style notes that RDR assembled in psi4/psi4#836 comments; * **User-Facing for Release Notes**. ## Questions; - [ ] BLAS/LAPACK docs need some editing, as they refer to old ways like `init_array` and `block_matrix`. I'd fix `em up into `Matrix`, but there's another section on `Matrix` + BLAS, so didn't want to duplicate.; - [x] @jturney, you can use, build on, renovate, or ignore any of this, but the options naming section does have to make it into the docs before the Wiki is archived and turned off.; - [x] @jturney, there may be more goodies, particularly in https://github.com/psi4/psi4/wiki/BestPractices that you want to collect. I think that doc originated back in the TRAC days. ## Status; - [ ] Ready to go. Should have BLAS edited before merge. I've no more plans to work on it, so in that sense, ready for review.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/848
https://github.com/psi4/psi4/pull/849:683,Availability,error,error,683,"## Description; Issue #846 has been fixed, so a contraction set where all primitives have a coefficient of 0 will remain untouched. While I was poking around the file, I decided to clean up some other things. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] 0 coefficient primitives will no longer be normalized. This should prove useful to planned ECP changes.; - [X] Miscellaneous code cleanup. ## Questions; - [ ] ECP team, I assume you're happy with this? ; - [ ] In the zero coefficient case, do we want to explicitly check this is an ECP by checking radial powers? If so, what would we do otherwise, raise some error?; - [ ] I also assume that I'm within the Psi4 coding style here?. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/849
https://github.com/psi4/psi4/pull/849:629,Energy Efficiency,power,powers,629,"## Description; Issue #846 has been fixed, so a contraction set where all primitives have a coefficient of 0 will remain untouched. While I was poking around the file, I decided to clean up some other things. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] 0 coefficient primitives will no longer be normalized. This should prove useful to planned ECP changes.; - [X] Miscellaneous code cleanup. ## Questions; - [ ] ECP team, I assume you're happy with this? ; - [ ] In the zero coefficient case, do we want to explicitly check this is an ECP by checking radial powers? If so, what would we do otherwise, raise some error?; - [ ] I also assume that I'm within the Psi4 coding style here?. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/849
https://github.com/psi4/psi4/pull/849:48,Integrability,contract,contraction,48,"## Description; Issue #846 has been fixed, so a contraction set where all primitives have a coefficient of 0 will remain untouched. While I was poking around the file, I decided to clean up some other things. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] 0 coefficient primitives will no longer be normalized. This should prove useful to planned ECP changes.; - [X] Miscellaneous code cleanup. ## Questions; - [ ] ECP team, I assume you're happy with this? ; - [ ] In the zero coefficient case, do we want to explicitly check this is an ECP by checking radial powers? If so, what would we do otherwise, raise some error?; - [ ] I also assume that I'm within the Psi4 coding style here?. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/849
https://github.com/psi4/psi4/pull/850:351,Deployability,install,install,351,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850
https://github.com/psi4/psi4/pull/850:800,Deployability,install,installation,800,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850
https://github.com/psi4/psi4/pull/850:176,Energy Efficiency,energy,energy,176,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850
https://github.com/psi4/psi4/pull/850:42,Modifiability,plugin,plugin,42,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850
https://github.com/psi4/psi4/pull/850:122,Modifiability,plugin,plugins,122,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850
https://github.com/psi4/psi4/pull/850:633,Modifiability,plugin,plugin,633,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850
https://github.com/psi4/psi4/pull/850:835,Modifiability,plugin,plugin,835,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850
https://github.com/psi4/psi4/pull/850:387,Testability,test,tests,387,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850
https://github.com/psi4/psi4/pull/850:666,Testability,test,tests,666,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850
https://github.com/psi4/psi4/pull/850:708,Testability,test,tests,708,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850
https://github.com/psi4/psi4/pull/850:737,Testability,test,test,737,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850
https://github.com/psi4/psi4/issues/851:106,Availability,error,error,106,"Version 1.1 fails:. ```; /usr/ports/science/psi4/work/psi4-1.1/psi4/src/psi4/libparallel/process.cc:69:9: error: use of undeclared identifier 'environ'; if (environ) {; ^; /usr/ports/science/psi4/work/psi4-1.1/psi4/src/psi4/libparallel/process.cc:70:16: error: use of undeclared identifier 'environ'; while (environ[i] != NULL) {; ^; /usr/ports/science/psi4/work/psi4-1.1/psi4/src/psi4/libparallel/process.cc:71:52: error: use of undeclared identifier 'environ'; std::vector <std::string> strs = split(environ[i], ""="");; ^; ```. Found on the FreeBSD 11.1.; 'environ' needs to be declared.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/851
https://github.com/psi4/psi4/issues/851:254,Availability,error,error,254,"Version 1.1 fails:. ```; /usr/ports/science/psi4/work/psi4-1.1/psi4/src/psi4/libparallel/process.cc:69:9: error: use of undeclared identifier 'environ'; if (environ) {; ^; /usr/ports/science/psi4/work/psi4-1.1/psi4/src/psi4/libparallel/process.cc:70:16: error: use of undeclared identifier 'environ'; while (environ[i] != NULL) {; ^; /usr/ports/science/psi4/work/psi4-1.1/psi4/src/psi4/libparallel/process.cc:71:52: error: use of undeclared identifier 'environ'; std::vector <std::string> strs = split(environ[i], ""="");; ^; ```. Found on the FreeBSD 11.1.; 'environ' needs to be declared.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/851
https://github.com/psi4/psi4/issues/851:416,Availability,error,error,416,"Version 1.1 fails:. ```; /usr/ports/science/psi4/work/psi4-1.1/psi4/src/psi4/libparallel/process.cc:69:9: error: use of undeclared identifier 'environ'; if (environ) {; ^; /usr/ports/science/psi4/work/psi4-1.1/psi4/src/psi4/libparallel/process.cc:70:16: error: use of undeclared identifier 'environ'; while (environ[i] != NULL) {; ^; /usr/ports/science/psi4/work/psi4-1.1/psi4/src/psi4/libparallel/process.cc:71:52: error: use of undeclared identifier 'environ'; std::vector <std::string> strs = split(environ[i], ""="");; ^; ```. Found on the FreeBSD 11.1.; 'environ' needs to be declared.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/851
https://github.com/psi4/psi4/issues/852:294,Availability,error,error,294,"Version 1.1; Compiler: clang-40; OS: FreeBSD 11.1. ```; In file included from /usr/ports/science/psi4/work/psi4-1.1/psi4/src/export_functional.cc:29:; In file included from /usr/ports/science/psi4/work/psi4-1.1/psi4/include/psi4/pybind11.h:10:; /usr/local/include/pybind11/pybind11.h:1012:105: error: cannot initialize return object of type 'void (psi::Functional::*)(int) const' with an lvalue of type 'void (psi::SuperFunctional::*)(int) const': different classes ('psi::Functional' vs 'psi::SuperFunctional'); auto method_adaptor(Return (Class::*pmf)(Args...) const) -> Return (Derived::*)(Args...) const { return pmf; }; ^~~; /usr/local/include/pybind11/pybind11.h:1087:25: note: in instantiation of function template specialization 'pybind11::method_adaptor<psi::Functional, void, psi::SuperFunctional, int>' requested here; cpp_function cf(method_adaptor<type>(std::forward<Func>(f)), name(name_), is_method(*this),; ^; /usr/ports/science/psi4/work/psi4-1.1/psi4/src/export_functional.cc:112:9: note: in instantiation of function template specialization 'pybind11::class_<psi::Functional, std::__1::shared_ptr<psi::Functional> >::def<void (psi::SuperFunctional::*)(int) const, char [10]>' requested here; def(""print_detail"",&SuperFunctional::py_print_detail, ""docstring"");; ^; 1 error generated.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/852
https://github.com/psi4/psi4/issues/852:1285,Availability,error,error,1285,"Version 1.1; Compiler: clang-40; OS: FreeBSD 11.1. ```; In file included from /usr/ports/science/psi4/work/psi4-1.1/psi4/src/export_functional.cc:29:; In file included from /usr/ports/science/psi4/work/psi4-1.1/psi4/include/psi4/pybind11.h:10:; /usr/local/include/pybind11/pybind11.h:1012:105: error: cannot initialize return object of type 'void (psi::Functional::*)(int) const' with an lvalue of type 'void (psi::SuperFunctional::*)(int) const': different classes ('psi::Functional' vs 'psi::SuperFunctional'); auto method_adaptor(Return (Class::*pmf)(Args...) const) -> Return (Derived::*)(Args...) const { return pmf; }; ^~~; /usr/local/include/pybind11/pybind11.h:1087:25: note: in instantiation of function template specialization 'pybind11::method_adaptor<psi::Functional, void, psi::SuperFunctional, int>' requested here; cpp_function cf(method_adaptor<type>(std::forward<Func>(f)), name(name_), is_method(*this),; ^; /usr/ports/science/psi4/work/psi4-1.1/psi4/src/export_functional.cc:112:9: note: in instantiation of function template specialization 'pybind11::class_<psi::Functional, std::__1::shared_ptr<psi::Functional> >::def<void (psi::SuperFunctional::*)(int) const, char [10]>' requested here; def(""print_detail"",&SuperFunctional::py_print_detail, ""docstring"");; ^; 1 error generated.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/852
https://github.com/psi4/psi4/issues/854:16,Deployability,install,installs,16,"Currently, psi4 installs bin/xc-info, include/libxc/xc.h, lib/libxc.a that conflict with standalone libxc package.; It also installs include/libint/libint.h and lib/libint.a that conflict with standalone libint package.; Etc. If psi4 needs those packages, it should either use bundled versions internally, during build, or use external versions. Installing bundled packages causes conflicts with standalone versions. I suggest:; 1. have USE_EXTERNAL_LIBXC, USE_EXTERNAL_LIBINT, etc, that will make build to use external packages; 2. Bundled versions should only be used internally, and not installed",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854
https://github.com/psi4/psi4/issues/854:124,Deployability,install,installs,124,"Currently, psi4 installs bin/xc-info, include/libxc/xc.h, lib/libxc.a that conflict with standalone libxc package.; It also installs include/libint/libint.h and lib/libint.a that conflict with standalone libint package.; Etc. If psi4 needs those packages, it should either use bundled versions internally, during build, or use external versions. Installing bundled packages causes conflicts with standalone versions. I suggest:; 1. have USE_EXTERNAL_LIBXC, USE_EXTERNAL_LIBINT, etc, that will make build to use external packages; 2. Bundled versions should only be used internally, and not installed",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854
https://github.com/psi4/psi4/issues/854:346,Deployability,Install,Installing,346,"Currently, psi4 installs bin/xc-info, include/libxc/xc.h, lib/libxc.a that conflict with standalone libxc package.; It also installs include/libint/libint.h and lib/libint.a that conflict with standalone libint package.; Etc. If psi4 needs those packages, it should either use bundled versions internally, during build, or use external versions. Installing bundled packages causes conflicts with standalone versions. I suggest:; 1. have USE_EXTERNAL_LIBXC, USE_EXTERNAL_LIBINT, etc, that will make build to use external packages; 2. Bundled versions should only be used internally, and not installed",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854
https://github.com/psi4/psi4/issues/854:590,Deployability,install,installed,590,"Currently, psi4 installs bin/xc-info, include/libxc/xc.h, lib/libxc.a that conflict with standalone libxc package.; It also installs include/libint/libint.h and lib/libint.a that conflict with standalone libint package.; Etc. If psi4 needs those packages, it should either use bundled versions internally, during build, or use external versions. Installing bundled packages causes conflicts with standalone versions. I suggest:; 1. have USE_EXTERNAL_LIBXC, USE_EXTERNAL_LIBINT, etc, that will make build to use external packages; 2. Bundled versions should only be used internally, and not installed",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854
https://github.com/psi4/psi4/issues/855:38,Availability,Error,Error,38,"The build installs these files:; ```; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5ConfigVersion.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Targets.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKTargets.cmake; ```. Each one is already installed into the proper location, ex. ```; /usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake```. For some reason, it installs duplicates copies into locations derived from the build directory path (?). @loriab Maybe you know how to fix it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855
https://github.com/psi4/psi4/issues/855:154,Availability,Error,Error,154,"The build installs these files:; ```; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5ConfigVersion.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Targets.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKTargets.cmake; ```. Each one is already installed into the proper location, ex. ```; /usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake```. For some reason, it installs duplicates copies into locations derived from the build directory path (?). @loriab Maybe you know how to fix it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855
https://github.com/psi4/psi4/issues/855:277,Availability,Error,Error,277,"The build installs these files:; ```; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5ConfigVersion.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Targets.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKTargets.cmake; ```. Each one is already installed into the proper location, ex. ```; /usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake```. For some reason, it installs duplicates copies into locations derived from the build directory path (?). @loriab Maybe you know how to fix it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855
https://github.com/psi4/psi4/issues/855:394,Availability,Error,Error,394,"The build installs these files:; ```; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5ConfigVersion.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Targets.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKTargets.cmake; ```. Each one is already installed into the proper location, ex. ```; /usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake```. For some reason, it installs duplicates copies into locations derived from the build directory path (?). @loriab Maybe you know how to fix it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855
https://github.com/psi4/psi4/issues/855:514,Availability,Error,Error,514,"The build installs these files:; ```; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5ConfigVersion.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Targets.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKTargets.cmake; ```. Each one is already installed into the proper location, ex. ```; /usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake```. For some reason, it installs duplicates copies into locations derived from the build directory path (?). @loriab Maybe you know how to fix it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855
https://github.com/psi4/psi4/issues/855:10,Deployability,install,installs,10,"The build installs these files:; ```; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5ConfigVersion.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Targets.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKTargets.cmake; ```. Each one is already installed into the proper location, ex. ```; /usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake```. For some reason, it installs duplicates copies into locations derived from the build directory path (?). @loriab Maybe you know how to fix it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855
https://github.com/psi4/psi4/issues/855:660,Deployability,install,installed,660,"The build installs these files:; ```; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5ConfigVersion.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Targets.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKTargets.cmake; ```. Each one is already installed into the proper location, ex. ```; /usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake```. For some reason, it installs duplicates copies into locations derived from the build directory path (?). @loriab Maybe you know how to fix it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855
https://github.com/psi4/psi4/issues/855:786,Deployability,install,installs,786,"The build installs these files:; ```; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5ConfigVersion.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Targets.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKTargets.cmake; ```. Each one is already installed into the proper location, ex. ```; /usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake```. For some reason, it installs duplicates copies into locations derived from the build directory path (?). @loriab Maybe you know how to fix it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855
https://github.com/psi4/psi4/pull/856:277,Deployability,Release,Release,277,"## Description; address build issues for FreeBSD packaging @yurivict . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Killed off the Apple `environ` setting that wasn't being used anymore; * **User-Facing for Release Notes**; - [x] AddOns now have a `CMAKE_INSIST_FIND_PACKAGE_${AddON}` variable whereby you can fail configuration when the right package not detected. That is, no falling back to internal build. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/856
https://github.com/psi4/psi4/pull/856:385,Deployability,configurat,configuration,385,"## Description; address build issues for FreeBSD packaging @yurivict . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Killed off the Apple `environ` setting that wasn't being used anymore; * **User-Facing for Release Notes**; - [x] AddOns now have a `CMAKE_INSIST_FIND_PACKAGE_${AddON}` variable whereby you can fail configuration when the right package not detected. That is, no falling back to internal build. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/856
https://github.com/psi4/psi4/pull/856:355,Modifiability,variab,variable,355,"## Description; address build issues for FreeBSD packaging @yurivict . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Killed off the Apple `environ` setting that wasn't being used anymore; * **User-Facing for Release Notes**; - [x] AddOns now have a `CMAKE_INSIST_FIND_PACKAGE_${AddON}` variable whereby you can fail configuration when the right package not detected. That is, no falling back to internal build. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/856
https://github.com/psi4/psi4/pull/856:385,Modifiability,config,configuration,385,"## Description; address build issues for FreeBSD packaging @yurivict . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Killed off the Apple `environ` setting that wasn't being used anymore; * **User-Facing for Release Notes**; - [x] AddOns now have a `CMAKE_INSIST_FIND_PACKAGE_${AddON}` variable whereby you can fail configuration when the right package not detected. That is, no falling back to internal build. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/856
https://github.com/psi4/psi4/pull/856:426,Safety,detect,detected,426,"## Description; address build issues for FreeBSD packaging @yurivict . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Killed off the Apple `environ` setting that wasn't being used anymore; * **User-Facing for Release Notes**; - [x] AddOns now have a `CMAKE_INSIST_FIND_PACKAGE_${AddON}` variable whereby you can fail configuration when the right package not detected. That is, no falling back to internal build. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/856
https://github.com/psi4/psi4/pull/857:360,Modifiability,variab,variables,360,"## Description; Originally, only the last rotation or polarizability values computed were actually dumped to the dictionary accessed by `core.get_variables`. This fix pushes each one into the dictionary with its corresponding wavelength (in NM). I've added a few lines to `tests/cc39/input.dat` and `tests/cc29/input.dat` to test the polarization and rotation variables, respectively. I've run the tests separately since the quick tests on Travis may not cover them, the results can be found [here](https://gist.github.com/bgpeyton/6a7842adb77a03a10bf696c8364a9c54) and [here](https://gist.github.com/bgpeyton/a6654acd0f7fcaa89b5023bebd40b025). . ## Todos; - [x] Make polarizabilities push each calculated value to the dictionary just like I did with rotation; - [x] Add to polarizability / rotation test cases to ensure new variables don't get overwritten by ""accident"". ## Questions; None. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857
https://github.com/psi4/psi4/pull/857:825,Modifiability,variab,variables,825,"## Description; Originally, only the last rotation or polarizability values computed were actually dumped to the dictionary accessed by `core.get_variables`. This fix pushes each one into the dictionary with its corresponding wavelength (in NM). I've added a few lines to `tests/cc39/input.dat` and `tests/cc29/input.dat` to test the polarization and rotation variables, respectively. I've run the tests separately since the quick tests on Travis may not cover them, the results can be found [here](https://gist.github.com/bgpeyton/6a7842adb77a03a10bf696c8364a9c54) and [here](https://gist.github.com/bgpeyton/a6654acd0f7fcaa89b5023bebd40b025). . ## Todos; - [x] Make polarizabilities push each calculated value to the dictionary just like I did with rotation; - [x] Add to polarizability / rotation test cases to ensure new variables don't get overwritten by ""accident"". ## Questions; None. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857
https://github.com/psi4/psi4/pull/857:124,Security,access,accessed,124,"## Description; Originally, only the last rotation or polarizability values computed were actually dumped to the dictionary accessed by `core.get_variables`. This fix pushes each one into the dictionary with its corresponding wavelength (in NM). I've added a few lines to `tests/cc39/input.dat` and `tests/cc29/input.dat` to test the polarization and rotation variables, respectively. I've run the tests separately since the quick tests on Travis may not cover them, the results can be found [here](https://gist.github.com/bgpeyton/6a7842adb77a03a10bf696c8364a9c54) and [here](https://gist.github.com/bgpeyton/a6654acd0f7fcaa89b5023bebd40b025). . ## Todos; - [x] Make polarizabilities push each calculated value to the dictionary just like I did with rotation; - [x] Add to polarizability / rotation test cases to ensure new variables don't get overwritten by ""accident"". ## Questions; None. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857
https://github.com/psi4/psi4/pull/857:273,Testability,test,tests,273,"## Description; Originally, only the last rotation or polarizability values computed were actually dumped to the dictionary accessed by `core.get_variables`. This fix pushes each one into the dictionary with its corresponding wavelength (in NM). I've added a few lines to `tests/cc39/input.dat` and `tests/cc29/input.dat` to test the polarization and rotation variables, respectively. I've run the tests separately since the quick tests on Travis may not cover them, the results can be found [here](https://gist.github.com/bgpeyton/6a7842adb77a03a10bf696c8364a9c54) and [here](https://gist.github.com/bgpeyton/a6654acd0f7fcaa89b5023bebd40b025). . ## Todos; - [x] Make polarizabilities push each calculated value to the dictionary just like I did with rotation; - [x] Add to polarizability / rotation test cases to ensure new variables don't get overwritten by ""accident"". ## Questions; None. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857
https://github.com/psi4/psi4/pull/857:300,Testability,test,tests,300,"## Description; Originally, only the last rotation or polarizability values computed were actually dumped to the dictionary accessed by `core.get_variables`. This fix pushes each one into the dictionary with its corresponding wavelength (in NM). I've added a few lines to `tests/cc39/input.dat` and `tests/cc29/input.dat` to test the polarization and rotation variables, respectively. I've run the tests separately since the quick tests on Travis may not cover them, the results can be found [here](https://gist.github.com/bgpeyton/6a7842adb77a03a10bf696c8364a9c54) and [here](https://gist.github.com/bgpeyton/a6654acd0f7fcaa89b5023bebd40b025). . ## Todos; - [x] Make polarizabilities push each calculated value to the dictionary just like I did with rotation; - [x] Add to polarizability / rotation test cases to ensure new variables don't get overwritten by ""accident"". ## Questions; None. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857
https://github.com/psi4/psi4/pull/857:325,Testability,test,test,325,"## Description; Originally, only the last rotation or polarizability values computed were actually dumped to the dictionary accessed by `core.get_variables`. This fix pushes each one into the dictionary with its corresponding wavelength (in NM). I've added a few lines to `tests/cc39/input.dat` and `tests/cc29/input.dat` to test the polarization and rotation variables, respectively. I've run the tests separately since the quick tests on Travis may not cover them, the results can be found [here](https://gist.github.com/bgpeyton/6a7842adb77a03a10bf696c8364a9c54) and [here](https://gist.github.com/bgpeyton/a6654acd0f7fcaa89b5023bebd40b025). . ## Todos; - [x] Make polarizabilities push each calculated value to the dictionary just like I did with rotation; - [x] Add to polarizability / rotation test cases to ensure new variables don't get overwritten by ""accident"". ## Questions; None. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857
https://github.com/psi4/psi4/pull/857:398,Testability,test,tests,398,"## Description; Originally, only the last rotation or polarizability values computed were actually dumped to the dictionary accessed by `core.get_variables`. This fix pushes each one into the dictionary with its corresponding wavelength (in NM). I've added a few lines to `tests/cc39/input.dat` and `tests/cc29/input.dat` to test the polarization and rotation variables, respectively. I've run the tests separately since the quick tests on Travis may not cover them, the results can be found [here](https://gist.github.com/bgpeyton/6a7842adb77a03a10bf696c8364a9c54) and [here](https://gist.github.com/bgpeyton/a6654acd0f7fcaa89b5023bebd40b025). . ## Todos; - [x] Make polarizabilities push each calculated value to the dictionary just like I did with rotation; - [x] Add to polarizability / rotation test cases to ensure new variables don't get overwritten by ""accident"". ## Questions; None. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857
https://github.com/psi4/psi4/pull/857:431,Testability,test,tests,431,"## Description; Originally, only the last rotation or polarizability values computed were actually dumped to the dictionary accessed by `core.get_variables`. This fix pushes each one into the dictionary with its corresponding wavelength (in NM). I've added a few lines to `tests/cc39/input.dat` and `tests/cc29/input.dat` to test the polarization and rotation variables, respectively. I've run the tests separately since the quick tests on Travis may not cover them, the results can be found [here](https://gist.github.com/bgpeyton/6a7842adb77a03a10bf696c8364a9c54) and [here](https://gist.github.com/bgpeyton/a6654acd0f7fcaa89b5023bebd40b025). . ## Todos; - [x] Make polarizabilities push each calculated value to the dictionary just like I did with rotation; - [x] Add to polarizability / rotation test cases to ensure new variables don't get overwritten by ""accident"". ## Questions; None. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857
https://github.com/psi4/psi4/pull/857:800,Testability,test,test,800,"## Description; Originally, only the last rotation or polarizability values computed were actually dumped to the dictionary accessed by `core.get_variables`. This fix pushes each one into the dictionary with its corresponding wavelength (in NM). I've added a few lines to `tests/cc39/input.dat` and `tests/cc29/input.dat` to test the polarization and rotation variables, respectively. I've run the tests separately since the quick tests on Travis may not cover them, the results can be found [here](https://gist.github.com/bgpeyton/6a7842adb77a03a10bf696c8364a9c54) and [here](https://gist.github.com/bgpeyton/a6654acd0f7fcaa89b5023bebd40b025). . ## Todos; - [x] Make polarizabilities push each calculated value to the dictionary just like I did with rotation; - [x] Add to polarizability / rotation test cases to ensure new variables don't get overwritten by ""accident"". ## Questions; None. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857
https://github.com/psi4/psi4/issues/858:85,Availability,error,error,85,"I was running a constrained geometry optimization but the optimizer failed with this error:; ```; Back-transformation to cartesian coordinates...; 	The INTCO_EXCEPTion handler:; 	TORS::compute_val: unable to compute torsion value; 	Dynamic level is 0.; 	exc.g_really_quit() is 0. **** Optimization has failed! (in 3 steps) ****; ```. Here's the [input file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and the [output file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out). I ran it again with `dynamic_level = 1` but this time I got the following error:; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); 7447,46 99%; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858
https://github.com/psi4/psi4/issues/858:723,Availability,error,error,723,"I was running a constrained geometry optimization but the optimizer failed with this error:; ```; Back-transformation to cartesian coordinates...; 	The INTCO_EXCEPTion handler:; 	TORS::compute_val: unable to compute torsion value; 	Dynamic level is 0.; 	exc.g_really_quit() is 0. **** Optimization has failed! (in 3 steps) ****; ```. Here's the [input file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and the [output file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out). I ran it again with `dynamic_level = 1` but this time I got the following error:; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); 7447,46 99%; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858
https://github.com/psi4/psi4/issues/858:740,Availability,Error,Error,740,"I was running a constrained geometry optimization but the optimizer failed with this error:; ```; Back-transformation to cartesian coordinates...; 	The INTCO_EXCEPTion handler:; 	TORS::compute_val: unable to compute torsion value; 	Dynamic level is 0.; 	exc.g_really_quit() is 0. **** Optimization has failed! (in 3 steps) ****; ```. Here's the [input file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and the [output file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out). I ran it again with `dynamic_level = 1` but this time I got the following error:; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); 7447,46 99%; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858
https://github.com/psi4/psi4/issues/858:752,Availability,Error,Error,752,"I was running a constrained geometry optimization but the optimizer failed with this error:; ```; Back-transformation to cartesian coordinates...; 	The INTCO_EXCEPTion handler:; 	TORS::compute_val: unable to compute torsion value; 	Dynamic level is 0.; 	exc.g_really_quit() is 0. **** Optimization has failed! (in 3 steps) ****; ```. Here's the [input file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and the [output file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out). I ran it again with `dynamic_level = 1` but this time I got the following error:; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); 7447,46 99%; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858
https://github.com/psi4/psi4/issues/858:759,Availability,Error,Error,759,"I was running a constrained geometry optimization but the optimizer failed with this error:; ```; Back-transformation to cartesian coordinates...; 	The INTCO_EXCEPTion handler:; 	TORS::compute_val: unable to compute torsion value; 	Dynamic level is 0.; 	exc.g_really_quit() is 0. **** Optimization has failed! (in 3 steps) ****; ```. Here's the [input file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and the [output file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out). I ran it again with `dynamic_level = 1` but this time I got the following error:; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); 7447,46 99%; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858
https://github.com/psi4/psi4/issues/858:864,Availability,error,error,864,"I was running a constrained geometry optimization but the optimizer failed with this error:; ```; Back-transformation to cartesian coordinates...; 	The INTCO_EXCEPTion handler:; 	TORS::compute_val: unable to compute torsion value; 	Dynamic level is 0.; 	exc.g_really_quit() is 0. **** Optimization has failed! (in 3 steps) ****; ```. Here's the [input file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and the [output file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out). I ran it again with `dynamic_level = 1` but this time I got the following error:; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); 7447,46 99%; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858
https://github.com/psi4/psi4/issues/858:37,Performance,optimiz,optimization,37,"I was running a constrained geometry optimization but the optimizer failed with this error:; ```; Back-transformation to cartesian coordinates...; 	The INTCO_EXCEPTion handler:; 	TORS::compute_val: unable to compute torsion value; 	Dynamic level is 0.; 	exc.g_really_quit() is 0. **** Optimization has failed! (in 3 steps) ****; ```. Here's the [input file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and the [output file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out). I ran it again with `dynamic_level = 1` but this time I got the following error:; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); 7447,46 99%; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858
https://github.com/psi4/psi4/issues/858:58,Performance,optimiz,optimizer,58,"I was running a constrained geometry optimization but the optimizer failed with this error:; ```; Back-transformation to cartesian coordinates...; 	The INTCO_EXCEPTion handler:; 	TORS::compute_val: unable to compute torsion value; 	Dynamic level is 0.; 	exc.g_really_quit() is 0. **** Optimization has failed! (in 3 steps) ****; ```. Here's the [input file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and the [output file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out). I ran it again with `dynamic_level = 1` but this time I got the following error:; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); 7447,46 99%; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858
https://github.com/psi4/psi4/issues/858:285,Performance,Optimiz,Optimization,285,"I was running a constrained geometry optimization but the optimizer failed with this error:; ```; Back-transformation to cartesian coordinates...; 	The INTCO_EXCEPTion handler:; 	TORS::compute_val: unable to compute torsion value; 	Dynamic level is 0.; 	exc.g_really_quit() is 0. **** Optimization has failed! (in 3 steps) ****; ```. Here's the [input file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and the [output file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out). I ran it again with `dynamic_level = 1` but this time I got the following error:; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); 7447,46 99%; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858
https://github.com/psi4/psi4/issues/859:778,Deployability,update,updated,778,"Suppose we are performing an IRC starting from a transition state that is very tightly converged. An IRC will converge to that transition state, rather than the minima. ## Psi4 Internals Explanation. optking.cc::349 will call the irc_step function beginning opt_data.cc::98. Now proceed to line opt_data.cc::221. The lines below that will return true if the molecule is converged. Because the transition state was tightly converged, the function will return true. **Comparison with a non-bugged case shows this is unexpected behavior.**. converged is true and this is an IRC type optimization, so we enter optking.cc::392, the point_converged function. molecule_irc_step.cc::83 shows this causes an IRC step to be taken immediately - before the energy or the gradient have been updated from the last step. OPTKING then sees we are not at the first step but the gradient is zero and assumes we have truly converged. It terminates the IRC. ## Previous Fix Attempts. I attempted to fix this just by having the IRC return false for Step 0 of an IRC, but in some cases I found that it would converge on Step 1 instead. We'll need a smarter way to make sure we don't converge to a TS, possibly checking for negative Hessian eigenvalues. I would do this myself, but after some of the other Optking issues I've run into this, this is much less of a personal priority. Hopefully, PyOptKing will automatically take care of this. ## Minimal Demonstration Files. Demonstrated for four atoms at the SCF level. Even including the Hessian calculation, this took less than two minutes on our cluster. [input.txt](https://github.com/psi4/psi4/files/1471977/input.txt); [output.txt](https://github.com/psi4/psi4/files/1471978/output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/859
https://github.com/psi4/psi4/issues/859:745,Energy Efficiency,energy,energy,745,"Suppose we are performing an IRC starting from a transition state that is very tightly converged. An IRC will converge to that transition state, rather than the minima. ## Psi4 Internals Explanation. optking.cc::349 will call the irc_step function beginning opt_data.cc::98. Now proceed to line opt_data.cc::221. The lines below that will return true if the molecule is converged. Because the transition state was tightly converged, the function will return true. **Comparison with a non-bugged case shows this is unexpected behavior.**. converged is true and this is an IRC type optimization, so we enter optking.cc::392, the point_converged function. molecule_irc_step.cc::83 shows this causes an IRC step to be taken immediately - before the energy or the gradient have been updated from the last step. OPTKING then sees we are not at the first step but the gradient is zero and assumes we have truly converged. It terminates the IRC. ## Previous Fix Attempts. I attempted to fix this just by having the IRC return false for Step 0 of an IRC, but in some cases I found that it would converge on Step 1 instead. We'll need a smarter way to make sure we don't converge to a TS, possibly checking for negative Hessian eigenvalues. I would do this myself, but after some of the other Optking issues I've run into this, this is much less of a personal priority. Hopefully, PyOptKing will automatically take care of this. ## Minimal Demonstration Files. Demonstrated for four atoms at the SCF level. Even including the Hessian calculation, this took less than two minutes on our cluster. [input.txt](https://github.com/psi4/psi4/files/1471977/input.txt); [output.txt](https://github.com/psi4/psi4/files/1471978/output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/859
https://github.com/psi4/psi4/issues/859:15,Performance,perform,performing,15,"Suppose we are performing an IRC starting from a transition state that is very tightly converged. An IRC will converge to that transition state, rather than the minima. ## Psi4 Internals Explanation. optking.cc::349 will call the irc_step function beginning opt_data.cc::98. Now proceed to line opt_data.cc::221. The lines below that will return true if the molecule is converged. Because the transition state was tightly converged, the function will return true. **Comparison with a non-bugged case shows this is unexpected behavior.**. converged is true and this is an IRC type optimization, so we enter optking.cc::392, the point_converged function. molecule_irc_step.cc::83 shows this causes an IRC step to be taken immediately - before the energy or the gradient have been updated from the last step. OPTKING then sees we are not at the first step but the gradient is zero and assumes we have truly converged. It terminates the IRC. ## Previous Fix Attempts. I attempted to fix this just by having the IRC return false for Step 0 of an IRC, but in some cases I found that it would converge on Step 1 instead. We'll need a smarter way to make sure we don't converge to a TS, possibly checking for negative Hessian eigenvalues. I would do this myself, but after some of the other Optking issues I've run into this, this is much less of a personal priority. Hopefully, PyOptKing will automatically take care of this. ## Minimal Demonstration Files. Demonstrated for four atoms at the SCF level. Even including the Hessian calculation, this took less than two minutes on our cluster. [input.txt](https://github.com/psi4/psi4/files/1471977/input.txt); [output.txt](https://github.com/psi4/psi4/files/1471978/output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/859
https://github.com/psi4/psi4/issues/859:580,Performance,optimiz,optimization,580,"Suppose we are performing an IRC starting from a transition state that is very tightly converged. An IRC will converge to that transition state, rather than the minima. ## Psi4 Internals Explanation. optking.cc::349 will call the irc_step function beginning opt_data.cc::98. Now proceed to line opt_data.cc::221. The lines below that will return true if the molecule is converged. Because the transition state was tightly converged, the function will return true. **Comparison with a non-bugged case shows this is unexpected behavior.**. converged is true and this is an IRC type optimization, so we enter optking.cc::392, the point_converged function. molecule_irc_step.cc::83 shows this causes an IRC step to be taken immediately - before the energy or the gradient have been updated from the last step. OPTKING then sees we are not at the first step but the gradient is zero and assumes we have truly converged. It terminates the IRC. ## Previous Fix Attempts. I attempted to fix this just by having the IRC return false for Step 0 of an IRC, but in some cases I found that it would converge on Step 1 instead. We'll need a smarter way to make sure we don't converge to a TS, possibly checking for negative Hessian eigenvalues. I would do this myself, but after some of the other Optking issues I've run into this, this is much less of a personal priority. Hopefully, PyOptKing will automatically take care of this. ## Minimal Demonstration Files. Demonstrated for four atoms at the SCF level. Even including the Hessian calculation, this took less than two minutes on our cluster. [input.txt](https://github.com/psi4/psi4/files/1471977/input.txt); [output.txt](https://github.com/psi4/psi4/files/1471978/output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/859
https://github.com/psi4/psi4/issues/860:537,Testability,test,tests,537,"Under certain conditions, OPTKING's steps are non-deterministic. A dihedral of 0 seems necessary, but it is not clear to me if this is sufficient. I've only found this in the IRC code, though I haven't checked for this in the non-IRC code. The below three files use the exact same input file but all have different steps. (This is on my own ircfix branch. I had conv_check return false on the first iteration as described [here](https://github.com/psi4/psi4/issues/859) and hardcoded the filename for my external hessian, to speed up my tests. The hessian itself was generated at SCF with this geometry.). [output.txt](https://github.com/psi4/psi4/files/1472907/output.txt); [output1.txt](https://github.com/psi4/psi4/files/1472908/output1.txt); [output2.txt](https://github.com/psi4/psi4/files/1472909/output2.txt). The below cases do not show the non-deterministic behavior. The only change in input file from the previous runs to this run was that the dihedral of 0 has been changed to a dihedral of 2. [output.txt](https://github.com/psi4/psi4/files/1472911/output.txt); [output1.txt](https://github.com/psi4/psi4/files/1472912/output1.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860
https://github.com/psi4/psi4/issues/860:112,Usability,clear,clear,112,"Under certain conditions, OPTKING's steps are non-deterministic. A dihedral of 0 seems necessary, but it is not clear to me if this is sufficient. I've only found this in the IRC code, though I haven't checked for this in the non-IRC code. The below three files use the exact same input file but all have different steps. (This is on my own ircfix branch. I had conv_check return false on the first iteration as described [here](https://github.com/psi4/psi4/issues/859) and hardcoded the filename for my external hessian, to speed up my tests. The hessian itself was generated at SCF with this geometry.). [output.txt](https://github.com/psi4/psi4/files/1472907/output.txt); [output1.txt](https://github.com/psi4/psi4/files/1472908/output1.txt); [output2.txt](https://github.com/psi4/psi4/files/1472909/output2.txt). The below cases do not show the non-deterministic behavior. The only change in input file from the previous runs to this run was that the dihedral of 0 has been changed to a dihedral of 2. [output.txt](https://github.com/psi4/psi4/files/1472911/output.txt); [output1.txt](https://github.com/psi4/psi4/files/1472912/output1.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860
https://github.com/psi4/psi4/pull/861:927,Deployability,Release,Release,927,"## Description; This PR will expose the `PCM` object in Psi4 out to Python. The `PCM` object wraps the PCMSolver library and offers three methods:; 1. `compute_E` to calculate the polarization energy due to the continuum;; 2. `compute_E_electronic` to calculate the polarization energy due to the continuum, but only using the electron density;; 3. `compute_V` to calculate the PCM potential, which is added on top of the Fock matrix. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); * **User-Facing for Release Notes**; - [ ] Exposing the `PCM` object to Python. ## Questions; - The initialization of the `PCM` object requires a `BasisSet`. I am unsure what is the best way to grab that Python-side.; - Still regarding initialization, I think it can be done better. Meaning that after reading the user input, the `PCM` object can be initialized by passing the printlevel and the `BasisSet` _under the hood_. @loriab @dgasmith can you point me to existing examples in the codebase? I've looked around in `core.cc` but it's a bit daunting.; - I think this will be useful for the ongoing work on #847 ; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/861
https://github.com/psi4/psi4/pull/861:193,Energy Efficiency,energy,energy,193,"## Description; This PR will expose the `PCM` object in Psi4 out to Python. The `PCM` object wraps the PCMSolver library and offers three methods:; 1. `compute_E` to calculate the polarization energy due to the continuum;; 2. `compute_E_electronic` to calculate the polarization energy due to the continuum, but only using the electron density;; 3. `compute_V` to calculate the PCM potential, which is added on top of the Fock matrix. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); * **User-Facing for Release Notes**; - [ ] Exposing the `PCM` object to Python. ## Questions; - The initialization of the `PCM` object requires a `BasisSet`. I am unsure what is the best way to grab that Python-side.; - Still regarding initialization, I think it can be done better. Meaning that after reading the user input, the `PCM` object can be initialized by passing the printlevel and the `BasisSet` _under the hood_. @loriab @dgasmith can you point me to existing examples in the codebase? I've looked around in `core.cc` but it's a bit daunting.; - I think this will be useful for the ongoing work on #847 ; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/861
https://github.com/psi4/psi4/pull/861:279,Energy Efficiency,energy,energy,279,"## Description; This PR will expose the `PCM` object in Psi4 out to Python. The `PCM` object wraps the PCMSolver library and offers three methods:; 1. `compute_E` to calculate the polarization energy due to the continuum;; 2. `compute_E_electronic` to calculate the polarization energy due to the continuum, but only using the electron density;; 3. `compute_V` to calculate the PCM potential, which is added on top of the Fock matrix. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); * **User-Facing for Release Notes**; - [ ] Exposing the `PCM` object to Python. ## Questions; - The initialization of the `PCM` object requires a `BasisSet`. I am unsure what is the best way to grab that Python-side.; - Still regarding initialization, I think it can be done better. Meaning that after reading the user input, the `PCM` object can be initialized by passing the printlevel and the `BasisSet` _under the hood_. @loriab @dgasmith can you point me to existing examples in the codebase? I've looked around in `core.cc` but it's a bit daunting.; - I think this will be useful for the ongoing work on #847 ; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/861
https://github.com/psi4/psi4/pull/861:93,Integrability,wrap,wraps,93,"## Description; This PR will expose the `PCM` object in Psi4 out to Python. The `PCM` object wraps the PCMSolver library and offers three methods:; 1. `compute_E` to calculate the polarization energy due to the continuum;; 2. `compute_E_electronic` to calculate the polarization energy due to the continuum, but only using the electron density;; 3. `compute_V` to calculate the PCM potential, which is added on top of the Fock matrix. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); * **User-Facing for Release Notes**; - [ ] Exposing the `PCM` object to Python. ## Questions; - The initialization of the `PCM` object requires a `BasisSet`. I am unsure what is the best way to grab that Python-side.; - Still regarding initialization, I think it can be done better. Meaning that after reading the user input, the `PCM` object can be initialized by passing the printlevel and the `BasisSet` _under the hood_. @loriab @dgasmith can you point me to existing examples in the codebase? I've looked around in `core.cc` but it's a bit daunting.; - I think this will be useful for the ongoing work on #847 ; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/861
https://github.com/psi4/psi4/pull/861:29,Security,expose,expose,29,"## Description; This PR will expose the `PCM` object in Psi4 out to Python. The `PCM` object wraps the PCMSolver library and offers three methods:; 1. `compute_E` to calculate the polarization energy due to the continuum;; 2. `compute_E_electronic` to calculate the polarization energy due to the continuum, but only using the electron density;; 3. `compute_V` to calculate the PCM potential, which is added on top of the Fock matrix. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); * **User-Facing for Release Notes**; - [ ] Exposing the `PCM` object to Python. ## Questions; - The initialization of the `PCM` object requires a `BasisSet`. I am unsure what is the best way to grab that Python-side.; - Still regarding initialization, I think it can be done better. Meaning that after reading the user input, the `PCM` object can be initialized by passing the printlevel and the `BasisSet` _under the hood_. @loriab @dgasmith can you point me to existing examples in the codebase? I've looked around in `core.cc` but it's a bit daunting.; - I think this will be useful for the ongoing work on #847 ; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/861
https://github.com/psi4/psi4/issues/862:1642,Availability,ERROR,ERROR,1642,":56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.10.0-693.5.2.el7.x86_64; - Python 3.6.3; - Jupyter 4.4.0; - Psi4 1.2a1.dev611+",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862
https://github.com/psi4/psi4/issues/862:1720,Availability,ERROR,ERROR,1720,"cense"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.10.0-693.5.2.el7.x86_64; - Python 3.6.3; - Jupyter 4.4.0; - Psi4 1.2a1.dev611+8fe3513; <details><summary>Output of `conda list`</summary><p>. ```; ca-certificates 2017.7.27.1 0 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862
https://github.com/psi4/psi4/issues/862:2009,Availability,recover,recovers,2009,"me/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.10.0-693.5.2.el7.x86_64; - Python 3.6.3; - Jupyter 4.4.0; - Psi4 1.2a1.dev611+8fe3513; <details><summary>Output of `conda list`</summary><p>. ```; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862
https://github.com/psi4/psi4/issues/862:210,Deployability,install,installed,210,"I'm trying to use Psi4 in a `jupyter notebook` and getting an immediate crash. I didn't see anything in documentation or issues about running inside a notebook, so I'm not sure if this is supported behavior. I installed Psi4 using `conda` in its own environment, following the instructions [here](http://psicode.org/psi4manual/1.1/conda.html?highlight=conda) with `conda create -n p4env python=3.6 psi4 psi4-rt -c psi4/label/dev -c psi4`. I can `import psi4` correctly using the python interactive shell. ```bash; $ source activate p4env; $ python; ```; ```python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kerne",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862
https://github.com/psi4/psi4/issues/862:2302,Deployability,install,install,2302," a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.10.0-693.5.2.el7.x86_64; - Python 3.6.3; - Jupyter 4.4.0; - Psi4 1.2a1.dev611+8fe3513; <details><summary>Output of `conda list`</summary><p>. ```; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; gmp 6.1.2 0 conda-forge; hdf5 1.8.17 11 conda-forge; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36_0 conda-forge; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jupyter_client 5.1.0 py36_0 conda-forge; jup",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862
https://github.com/psi4/psi4/issues/862:2409,Deployability,install,install,2409," a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.10.0-693.5.2.el7.x86_64; - Python 3.6.3; - Jupyter 4.4.0; - Psi4 1.2a1.dev611+8fe3513; <details><summary>Output of `conda list`</summary><p>. ```; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; gmp 6.1.2 0 conda-forge; hdf5 1.8.17 11 conda-forge; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36_0 conda-forge; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jupyter_client 5.1.0 py36_0 conda-forge; jup",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862
https://github.com/psi4/psi4/issues/862:2526,Deployability,release,release,2526," [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.10.0-693.5.2.el7.x86_64; - Python 3.6.3; - Jupyter 4.4.0; - Psi4 1.2a1.dev611+8fe3513; <details><summary>Output of `conda list`</summary><p>. ```; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; gmp 6.1.2 0 conda-forge; hdf5 1.8.17 11 conda-forge; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36_0 conda-forge; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_core 4.4.0 py_0 conda-forge; libefp 1.5b1 0 psi4/label/dev; libgfortran 3.0.0 1 ; libint 1.2.1 1 psi4/label/dev; libsodium 1.0.10 0 conda-forge; libxc 3.0.0 6 psi4/label/dev; mkl 2018.0.0 hb4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862
https://github.com/psi4/psi4/issues/862:1553,Energy Efficiency,Adapt,Adapting,1553,"`python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862
https://github.com/psi4/psi4/issues/862:1419,Integrability,message,message,1419,"t -c psi4/label/dev -c psi4`. I can `import psi4` correctly using the python interactive shell. ```bash; $ source activate p4env; $ python; ```; ```python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862
https://github.com/psi4/psi4/issues/862:1565,Integrability,protocol,protocol,1565,"`python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862
https://github.com/psi4/psi4/issues/862:1553,Modifiability,Adapt,Adapting,1553,"`python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862
https://github.com/psi4/psi4/issues/862:1297,Performance,load,loaded,1297,"tp://psicode.org/psi4manual/1.1/conda.html?highlight=conda) with `conda create -n p4env python=3.6 psi4 psi4-rt -c psi4/label/dev -c psi4`. I can `import psi4` correctly using the python interactive shell. ```bash; $ source activate p4env; $ python; ```; ```python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `con",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862
https://github.com/psi4/psi4/issues/862:2009,Safety,recover,recovers,2009,"me/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.10.0-693.5.2.el7.x86_64; - Python 3.6.3; - Jupyter 4.4.0; - Psi4 1.2a1.dev611+8fe3513; <details><summary>Output of `conda list`</summary><p>. ```; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862
https://github.com/psi4/psi4/issues/862:2706,Security,certificate,certificates,2706,"ernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.10.0-693.5.2.el7.x86_64; - Python 3.6.3; - Jupyter 4.4.0; - Psi4 1.2a1.dev611+8fe3513; <details><summary>Output of `conda list`</summary><p>. ```; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; gmp 6.1.2 0 conda-forge; hdf5 1.8.17 11 conda-forge; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36_0 conda-forge; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_core 4.4.0 py_0 conda-forge; libefp 1.5b1 0 psi4/label/dev; libgfortran 3.0.0 1 ; libint 1.2.1 1 psi4/label/dev; libsodium 1.0.10 0 conda-forge; libxc 3.0.0 6 psi4/label/dev; mkl 2018.0.0 hb491cac_4 ; mpc 1.0.1 0 ; mpfr 3.1.2 0 ; ncurses 5.9 10 conda-forge; numpy 1.13.3 py36ha12f23b_0 ; openssl 1.0.2l 0 conda-forge; pcmsolver 1.1.10 py36_1 psi4/label/dev; pexpect 4.2.1 py36_0 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862
https://github.com/psi4/psi4/issues/862:4290,Usability,simpl,simplegeneric,4290,mary><p>. ```; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; gmp 6.1.2 0 conda-forge; hdf5 1.8.17 11 conda-forge; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36_0 conda-forge; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_core 4.4.0 py_0 conda-forge; libefp 1.5b1 0 psi4/label/dev; libgfortran 3.0.0 1 ; libint 1.2.1 1 psi4/label/dev; libsodium 1.0.10 0 conda-forge; libxc 3.0.0 6 psi4/label/dev; mkl 2018.0.0 hb491cac_4 ; mpc 1.0.1 0 ; mpfr 3.1.2 0 ; ncurses 5.9 10 conda-forge; numpy 1.13.3 py36ha12f23b_0 ; openssl 1.0.2l 0 conda-forge; pcmsolver 1.1.10 py36_1 psi4/label/dev; pexpect 4.2.1 py36_0 conda-forge; pickleshare 0.7.4 py36_0 conda-forge; pip 9.0.1 py36_0 conda-forge; prompt_toolkit 1.0.15 py36_0 conda-forge; psi4 1.2a1.dev611+8fe3513 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev3 py36_0 psi4/label/dev; psi4-rt 1.2a1.dev3 py36_0 psi4/label/dev; ptyprocess 0.5.2 py36_0 conda-forge; py 1.5.2 py_0 conda-forge; pygments 2.2.0 py36_0 conda-forge; pytest 3.2.5 py36_0 conda-forge; python 3.6.3 1 conda-forge; python-dateutil 2.6.1 py36_0 conda-forge; pyzmq 16.0.2 py36_2 conda-forge; readline 6.2 0 conda-forge; setuptools 36.6.0 py36_1 conda-forge; simint 0.7 0 psi4; simplegeneric 0.8.1 py36_0 conda-forge; six 1.11.0 py36_1 conda-forge; sqlite 3.13.0 1 conda-forge; tk 8.5.19 2 conda-forge; tornado 4.5.2 py36_0 conda-forge; traitlets 4.3.2 py36_0 conda-forge; v2rdm_casscf 0.4 py36_1 psi4/label/dev; wcwidth 0.1.7 py36_0 conda-forge; wheel 0.30.0 py_1 conda-forge; xz 5.2.3 0 conda-forge; zeromq 4.2.1 1 conda-forge; zlib 1.2.11 0 conda-forge; ```; </p></details>,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862
https://github.com/psi4/psi4/issues/863:173,Deployability,upgrade,upgrade,173,"This was already shortly discussed on the forum http://forum.psicode.org/t/libxc-density-functionals/589, possibly caused by libxc. No idea if this can be hot-fixed without upgrade to libxc4, but SCAN-D3(BJ) gave excellent results for the GMTKN55 so it would be really nice to have it. Here is a test than runs scan and scan0: [scan.txt](https://github.com/psi4/psi4/files/1481932/scan.txt). also tagging @dgasmith because he did already some checks on this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863
https://github.com/psi4/psi4/issues/863:296,Testability,test,test,296,"This was already shortly discussed on the forum http://forum.psicode.org/t/libxc-density-functionals/589, possibly caused by libxc. No idea if this can be hot-fixed without upgrade to libxc4, but SCAN-D3(BJ) gave excellent results for the GMTKN55 so it would be really nice to have it. Here is a test than runs scan and scan0: [scan.txt](https://github.com/psi4/psi4/files/1481932/scan.txt). also tagging @dgasmith because he did already some checks on this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863
https://github.com/psi4/psi4/pull/864:1173,Deployability,update,updated,1173,"## Description; This is an enhancement to Psi4 cubeprop library. Cube files are usually plotted using isocontour surfaces with a common iso value. This PR implements the computation of adaptive isocontour values that capture a certain fraction of a MO density (orbital squared) using the least amount of points. This is similar to the approach of Lehtola and Jónsson [J. Chem. Theory Comput. 10, 642–649 (2014)], but appears to be different in the fact that the implementation in this PR uses two isocontour values. The added code just sorts a cube file's grid points and finds a pair of positive and negative isocontour values the satisfy the above definition. The default is to capture 85% of the density, but the user can specify a different value with the new option `CUBEPROP_ISOCONTOUR_THRESHOLD`. The adaptive isocontour range is included in the second comment line of the MO cube files and looks like this; ```; Psi4 Gaussian Cube File.; Property: Psi_a_1_1-Ag. Isocontour range for 85% of the density: ( 0.053504, 0.000000); ```; The user can then inspect the cube file to find the value of the range. However, the recommended way to use this feature is to use an updated version of `vmd_cube` that will be posted shortly and that will automatically plot all cube files using the adaptive ranges saved in the cube files. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add ability to compute range for densities; - [x] Add documentation of feature; - [x] Add documentation of new options. ## Questions; - [x] Merge the changes done in #822 with this PR?; ## Status; - [x] Ready to go; - [x] Closes #822",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/864
https://github.com/psi4/psi4/pull/864:185,Energy Efficiency,adapt,adaptive,185,"## Description; This is an enhancement to Psi4 cubeprop library. Cube files are usually plotted using isocontour surfaces with a common iso value. This PR implements the computation of adaptive isocontour values that capture a certain fraction of a MO density (orbital squared) using the least amount of points. This is similar to the approach of Lehtola and Jónsson [J. Chem. Theory Comput. 10, 642–649 (2014)], but appears to be different in the fact that the implementation in this PR uses two isocontour values. The added code just sorts a cube file's grid points and finds a pair of positive and negative isocontour values the satisfy the above definition. The default is to capture 85% of the density, but the user can specify a different value with the new option `CUBEPROP_ISOCONTOUR_THRESHOLD`. The adaptive isocontour range is included in the second comment line of the MO cube files and looks like this; ```; Psi4 Gaussian Cube File.; Property: Psi_a_1_1-Ag. Isocontour range for 85% of the density: ( 0.053504, 0.000000); ```; The user can then inspect the cube file to find the value of the range. However, the recommended way to use this feature is to use an updated version of `vmd_cube` that will be posted shortly and that will automatically plot all cube files using the adaptive ranges saved in the cube files. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add ability to compute range for densities; - [x] Add documentation of feature; - [x] Add documentation of new options. ## Questions; - [x] Merge the changes done in #822 with this PR?; ## Status; - [x] Ready to go; - [x] Closes #822",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/864
https://github.com/psi4/psi4/pull/864:808,Energy Efficiency,adapt,adaptive,808,"## Description; This is an enhancement to Psi4 cubeprop library. Cube files are usually plotted using isocontour surfaces with a common iso value. This PR implements the computation of adaptive isocontour values that capture a certain fraction of a MO density (orbital squared) using the least amount of points. This is similar to the approach of Lehtola and Jónsson [J. Chem. Theory Comput. 10, 642–649 (2014)], but appears to be different in the fact that the implementation in this PR uses two isocontour values. The added code just sorts a cube file's grid points and finds a pair of positive and negative isocontour values the satisfy the above definition. The default is to capture 85% of the density, but the user can specify a different value with the new option `CUBEPROP_ISOCONTOUR_THRESHOLD`. The adaptive isocontour range is included in the second comment line of the MO cube files and looks like this; ```; Psi4 Gaussian Cube File.; Property: Psi_a_1_1-Ag. Isocontour range for 85% of the density: ( 0.053504, 0.000000); ```; The user can then inspect the cube file to find the value of the range. However, the recommended way to use this feature is to use an updated version of `vmd_cube` that will be posted shortly and that will automatically plot all cube files using the adaptive ranges saved in the cube files. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add ability to compute range for densities; - [x] Add documentation of feature; - [x] Add documentation of new options. ## Questions; - [x] Merge the changes done in #822 with this PR?; ## Status; - [x] Ready to go; - [x] Closes #822",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/864
https://github.com/psi4/psi4/pull/864:1289,Energy Efficiency,adapt,adaptive,1289,"## Description; This is an enhancement to Psi4 cubeprop library. Cube files are usually plotted using isocontour surfaces with a common iso value. This PR implements the computation of adaptive isocontour values that capture a certain fraction of a MO density (orbital squared) using the least amount of points. This is similar to the approach of Lehtola and Jónsson [J. Chem. Theory Comput. 10, 642–649 (2014)], but appears to be different in the fact that the implementation in this PR uses two isocontour values. The added code just sorts a cube file's grid points and finds a pair of positive and negative isocontour values the satisfy the above definition. The default is to capture 85% of the density, but the user can specify a different value with the new option `CUBEPROP_ISOCONTOUR_THRESHOLD`. The adaptive isocontour range is included in the second comment line of the MO cube files and looks like this; ```; Psi4 Gaussian Cube File.; Property: Psi_a_1_1-Ag. Isocontour range for 85% of the density: ( 0.053504, 0.000000); ```; The user can then inspect the cube file to find the value of the range. However, the recommended way to use this feature is to use an updated version of `vmd_cube` that will be posted shortly and that will automatically plot all cube files using the adaptive ranges saved in the cube files. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add ability to compute range for densities; - [x] Add documentation of feature; - [x] Add documentation of new options. ## Questions; - [x] Merge the changes done in #822 with this PR?; ## Status; - [x] Ready to go; - [x] Closes #822",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/864
https://github.com/psi4/psi4/pull/864:27,Modifiability,enhance,enhancement,27,"## Description; This is an enhancement to Psi4 cubeprop library. Cube files are usually plotted using isocontour surfaces with a common iso value. This PR implements the computation of adaptive isocontour values that capture a certain fraction of a MO density (orbital squared) using the least amount of points. This is similar to the approach of Lehtola and Jónsson [J. Chem. Theory Comput. 10, 642–649 (2014)], but appears to be different in the fact that the implementation in this PR uses two isocontour values. The added code just sorts a cube file's grid points and finds a pair of positive and negative isocontour values the satisfy the above definition. The default is to capture 85% of the density, but the user can specify a different value with the new option `CUBEPROP_ISOCONTOUR_THRESHOLD`. The adaptive isocontour range is included in the second comment line of the MO cube files and looks like this; ```; Psi4 Gaussian Cube File.; Property: Psi_a_1_1-Ag. Isocontour range for 85% of the density: ( 0.053504, 0.000000); ```; The user can then inspect the cube file to find the value of the range. However, the recommended way to use this feature is to use an updated version of `vmd_cube` that will be posted shortly and that will automatically plot all cube files using the adaptive ranges saved in the cube files. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add ability to compute range for densities; - [x] Add documentation of feature; - [x] Add documentation of new options. ## Questions; - [x] Merge the changes done in #822 with this PR?; ## Status; - [x] Ready to go; - [x] Closes #822",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/864
https://github.com/psi4/psi4/pull/864:185,Modifiability,adapt,adaptive,185,"## Description; This is an enhancement to Psi4 cubeprop library. Cube files are usually plotted using isocontour surfaces with a common iso value. This PR implements the computation of adaptive isocontour values that capture a certain fraction of a MO density (orbital squared) using the least amount of points. This is similar to the approach of Lehtola and Jónsson [J. Chem. Theory Comput. 10, 642–649 (2014)], but appears to be different in the fact that the implementation in this PR uses two isocontour values. The added code just sorts a cube file's grid points and finds a pair of positive and negative isocontour values the satisfy the above definition. The default is to capture 85% of the density, but the user can specify a different value with the new option `CUBEPROP_ISOCONTOUR_THRESHOLD`. The adaptive isocontour range is included in the second comment line of the MO cube files and looks like this; ```; Psi4 Gaussian Cube File.; Property: Psi_a_1_1-Ag. Isocontour range for 85% of the density: ( 0.053504, 0.000000); ```; The user can then inspect the cube file to find the value of the range. However, the recommended way to use this feature is to use an updated version of `vmd_cube` that will be posted shortly and that will automatically plot all cube files using the adaptive ranges saved in the cube files. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add ability to compute range for densities; - [x] Add documentation of feature; - [x] Add documentation of new options. ## Questions; - [x] Merge the changes done in #822 with this PR?; ## Status; - [x] Ready to go; - [x] Closes #822",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/864
https://github.com/psi4/psi4/pull/864:808,Modifiability,adapt,adaptive,808,"## Description; This is an enhancement to Psi4 cubeprop library. Cube files are usually plotted using isocontour surfaces with a common iso value. This PR implements the computation of adaptive isocontour values that capture a certain fraction of a MO density (orbital squared) using the least amount of points. This is similar to the approach of Lehtola and Jónsson [J. Chem. Theory Comput. 10, 642–649 (2014)], but appears to be different in the fact that the implementation in this PR uses two isocontour values. The added code just sorts a cube file's grid points and finds a pair of positive and negative isocontour values the satisfy the above definition. The default is to capture 85% of the density, but the user can specify a different value with the new option `CUBEPROP_ISOCONTOUR_THRESHOLD`. The adaptive isocontour range is included in the second comment line of the MO cube files and looks like this; ```; Psi4 Gaussian Cube File.; Property: Psi_a_1_1-Ag. Isocontour range for 85% of the density: ( 0.053504, 0.000000); ```; The user can then inspect the cube file to find the value of the range. However, the recommended way to use this feature is to use an updated version of `vmd_cube` that will be posted shortly and that will automatically plot all cube files using the adaptive ranges saved in the cube files. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add ability to compute range for densities; - [x] Add documentation of feature; - [x] Add documentation of new options. ## Questions; - [x] Merge the changes done in #822 with this PR?; ## Status; - [x] Ready to go; - [x] Closes #822",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/864
https://github.com/psi4/psi4/pull/864:1289,Modifiability,adapt,adaptive,1289,"## Description; This is an enhancement to Psi4 cubeprop library. Cube files are usually plotted using isocontour surfaces with a common iso value. This PR implements the computation of adaptive isocontour values that capture a certain fraction of a MO density (orbital squared) using the least amount of points. This is similar to the approach of Lehtola and Jónsson [J. Chem. Theory Comput. 10, 642–649 (2014)], but appears to be different in the fact that the implementation in this PR uses two isocontour values. The added code just sorts a cube file's grid points and finds a pair of positive and negative isocontour values the satisfy the above definition. The default is to capture 85% of the density, but the user can specify a different value with the new option `CUBEPROP_ISOCONTOUR_THRESHOLD`. The adaptive isocontour range is included in the second comment line of the MO cube files and looks like this; ```; Psi4 Gaussian Cube File.; Property: Psi_a_1_1-Ag. Isocontour range for 85% of the density: ( 0.053504, 0.000000); ```; The user can then inspect the cube file to find the value of the range. However, the recommended way to use this feature is to use an updated version of `vmd_cube` that will be posted shortly and that will automatically plot all cube files using the adaptive ranges saved in the cube files. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add ability to compute range for densities; - [x] Add documentation of feature; - [x] Add documentation of new options. ## Questions; - [x] Merge the changes done in #822 with this PR?; ## Status; - [x] Ready to go; - [x] Closes #822",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/864
https://github.com/psi4/psi4/pull/865:160,Availability,down,downstream,160,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:313,Availability,down,downstream,313,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:1549,Availability,error,error,1549,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:1625,Availability,down,down,1625,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:64,Deployability,integrat,integrated,64,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:960,Deployability,install,installed,960,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:1162,Deployability,Release,Release,1162,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:544,Energy Efficiency,adapt,adapted,544,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:782,Energy Efficiency,Adapt,Adapt,782,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:64,Integrability,integrat,integrated,64,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:1399,Integrability,depend,dependency,1399,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:1527,Integrability,depend,dependent,1527,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:99,Modifiability,plugin,plugin,99,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:544,Modifiability,adapt,adapted,544,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:782,Modifiability,Adapt,Adapt,782,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:1747,Modifiability,plugin,plugin,1747,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:478,Safety,detect,detect-from,478,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:1312,Safety,detect,detect,1312,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:800,Testability,test,test,800,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:853,Testability,test,tests,853,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:1089,Testability,test,tested,1089,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/865:1443,Testability,test,testing,1443,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865
https://github.com/psi4/psi4/pull/866:97,Modifiability,plugin,plugin,97,"## Description; Enable v2rdm_casscf build from psi4. Add tests. This gets Eugene's renovated 0.5 plugin that now has gradients working again with psi4. Suppresses the plugin ""module loaded"" text since that command isn't called directly anymore and the text was interfering with CMake by corrupting the cache. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/866
https://github.com/psi4/psi4/pull/866:167,Modifiability,plugin,plugin,167,"## Description; Enable v2rdm_casscf build from psi4. Add tests. This gets Eugene's renovated 0.5 plugin that now has gradients working again with psi4. Suppresses the plugin ""module loaded"" text since that command isn't called directly anymore and the text was interfering with CMake by corrupting the cache. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/866
https://github.com/psi4/psi4/pull/866:182,Performance,load,loaded,182,"## Description; Enable v2rdm_casscf build from psi4. Add tests. This gets Eugene's renovated 0.5 plugin that now has gradients working again with psi4. Suppresses the plugin ""module loaded"" text since that command isn't called directly anymore and the text was interfering with CMake by corrupting the cache. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/866
https://github.com/psi4/psi4/pull/866:302,Performance,cache,cache,302,"## Description; Enable v2rdm_casscf build from psi4. Add tests. This gets Eugene's renovated 0.5 plugin that now has gradients working again with psi4. Suppresses the plugin ""module loaded"" text since that command isn't called directly anymore and the text was interfering with CMake by corrupting the cache. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/866
https://github.com/psi4/psi4/pull/866:57,Testability,test,tests,57,"## Description; Enable v2rdm_casscf build from psi4. Add tests. This gets Eugene's renovated 0.5 plugin that now has gradients working again with psi4. Suppresses the plugin ""module loaded"" text since that command isn't called directly anymore and the text was interfering with CMake by corrupting the cache. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/866
https://github.com/psi4/psi4/issues/867:1461,Availability,avail,available,1461,"Compute numerical and analytical gradients with **wB97X** functional:; ```python; import psi4. print(psi4.__version__). psi4.geometry('H -.5 0 0\nH .5 0 0'); psi4.gradient('wb97x/3-21g', dertype=0); psi4.gradient('wb97x/3-21g', dertype=1); ```. The numerical gradient works, but analytical one crashes:; ```; 1.2a1.dev681; gradient() will perform gradient computation by finite difference of analytic energies. ... skipped ... ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 2 x 3. 1 2 3. 1 -0.08957282148820 0.00000000000000 0.00000000000000; 2 0.08957282148820 0.00000000000000 0.00000000000000. Traceback (most recent call last):; File ""test.py"", line 7, in <module>; psi4.gradient('wb97x/3-21g', dertype=1); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in gradient; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in <listcomp>; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 103, in _find_derivative_type; % (method_name, str(dertype), alternatives)); psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. Also, the error message is self-contradicting:; ```; psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. According to https://gitlab.com/libxc/libxc/wikis/Functionals-list-3.0.0, **libXC** supports **wB97X** and I don't see any notes that the analytical gradient is not implemented. So I guess, the problem is somewhere in **Psi4**.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867
https://github.com/psi4/psi4/issues/867:1533,Availability,error,error,1533,"Compute numerical and analytical gradients with **wB97X** functional:; ```python; import psi4. print(psi4.__version__). psi4.geometry('H -.5 0 0\nH .5 0 0'); psi4.gradient('wb97x/3-21g', dertype=0); psi4.gradient('wb97x/3-21g', dertype=1); ```. The numerical gradient works, but analytical one crashes:; ```; 1.2a1.dev681; gradient() will perform gradient computation by finite difference of analytic energies. ... skipped ... ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 2 x 3. 1 2 3. 1 -0.08957282148820 0.00000000000000 0.00000000000000; 2 0.08957282148820 0.00000000000000 0.00000000000000. Traceback (most recent call last):; File ""test.py"", line 7, in <module>; psi4.gradient('wb97x/3-21g', dertype=1); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in gradient; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in <listcomp>; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 103, in _find_derivative_type; % (method_name, str(dertype), alternatives)); psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. Also, the error message is self-contradicting:; ```; psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. According to https://gitlab.com/libxc/libxc/wikis/Functionals-list-3.0.0, **libXC** supports **wB97X** and I don't see any notes that the analytical gradient is not implemented. So I guess, the problem is somewhere in **Psi4**.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867
https://github.com/psi4/psi4/issues/867:1695,Availability,avail,available,1695,"Compute numerical and analytical gradients with **wB97X** functional:; ```python; import psi4. print(psi4.__version__). psi4.geometry('H -.5 0 0\nH .5 0 0'); psi4.gradient('wb97x/3-21g', dertype=0); psi4.gradient('wb97x/3-21g', dertype=1); ```. The numerical gradient works, but analytical one crashes:; ```; 1.2a1.dev681; gradient() will perform gradient computation by finite difference of analytic energies. ... skipped ... ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 2 x 3. 1 2 3. 1 -0.08957282148820 0.00000000000000 0.00000000000000; 2 0.08957282148820 0.00000000000000 0.00000000000000. Traceback (most recent call last):; File ""test.py"", line 7, in <module>; psi4.gradient('wb97x/3-21g', dertype=1); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in gradient; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in <listcomp>; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 103, in _find_derivative_type; % (method_name, str(dertype), alternatives)); psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. Also, the error message is self-contradicting:; ```; psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. According to https://gitlab.com/libxc/libxc/wikis/Functionals-list-3.0.0, **libXC** supports **wB97X** and I don't see any notes that the analytical gradient is not implemented. So I guess, the problem is somewhere in **Psi4**.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867
https://github.com/psi4/psi4/issues/867:1539,Integrability,message,message,1539,"Compute numerical and analytical gradients with **wB97X** functional:; ```python; import psi4. print(psi4.__version__). psi4.geometry('H -.5 0 0\nH .5 0 0'); psi4.gradient('wb97x/3-21g', dertype=0); psi4.gradient('wb97x/3-21g', dertype=1); ```. The numerical gradient works, but analytical one crashes:; ```; 1.2a1.dev681; gradient() will perform gradient computation by finite difference of analytic energies. ... skipped ... ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 2 x 3. 1 2 3. 1 -0.08957282148820 0.00000000000000 0.00000000000000; 2 0.08957282148820 0.00000000000000 0.00000000000000. Traceback (most recent call last):; File ""test.py"", line 7, in <module>; psi4.gradient('wb97x/3-21g', dertype=1); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in gradient; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in <listcomp>; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 103, in _find_derivative_type; % (method_name, str(dertype), alternatives)); psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. Also, the error message is self-contradicting:; ```; psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. According to https://gitlab.com/libxc/libxc/wikis/Functionals-list-3.0.0, **libXC** supports **wB97X** and I don't see any notes that the analytical gradient is not implemented. So I guess, the problem is somewhere in **Psi4**.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867
https://github.com/psi4/psi4/issues/867:339,Performance,perform,perform,339,"Compute numerical and analytical gradients with **wB97X** functional:; ```python; import psi4. print(psi4.__version__). psi4.geometry('H -.5 0 0\nH .5 0 0'); psi4.gradient('wb97x/3-21g', dertype=0); psi4.gradient('wb97x/3-21g', dertype=1); ```. The numerical gradient works, but analytical one crashes:; ```; 1.2a1.dev681; gradient() will perform gradient computation by finite difference of analytic energies. ... skipped ... ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 2 x 3. 1 2 3. 1 -0.08957282148820 0.00000000000000 0.00000000000000; 2 0.08957282148820 0.00000000000000 0.00000000000000. Traceback (most recent call last):; File ""test.py"", line 7, in <module>; psi4.gradient('wb97x/3-21g', dertype=1); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in gradient; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in <listcomp>; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 103, in _find_derivative_type; % (method_name, str(dertype), alternatives)); psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. Also, the error message is self-contradicting:; ```; psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. According to https://gitlab.com/libxc/libxc/wikis/Functionals-list-3.0.0, **libXC** supports **wB97X** and I don't see any notes that the analytical gradient is not implemented. So I guess, the problem is somewhere in **Psi4**.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867
https://github.com/psi4/psi4/issues/867:1372,Security,Validat,ValidationError,1372,"Compute numerical and analytical gradients with **wB97X** functional:; ```python; import psi4. print(psi4.__version__). psi4.geometry('H -.5 0 0\nH .5 0 0'); psi4.gradient('wb97x/3-21g', dertype=0); psi4.gradient('wb97x/3-21g', dertype=1); ```. The numerical gradient works, but analytical one crashes:; ```; 1.2a1.dev681; gradient() will perform gradient computation by finite difference of analytic energies. ... skipped ... ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 2 x 3. 1 2 3. 1 -0.08957282148820 0.00000000000000 0.00000000000000; 2 0.08957282148820 0.00000000000000 0.00000000000000. Traceback (most recent call last):; File ""test.py"", line 7, in <module>; psi4.gradient('wb97x/3-21g', dertype=1); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in gradient; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in <listcomp>; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 103, in _find_derivative_type; % (method_name, str(dertype), alternatives)); psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. Also, the error message is self-contradicting:; ```; psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. According to https://gitlab.com/libxc/libxc/wikis/Functionals-list-3.0.0, **libXC** supports **wB97X** and I don't see any notes that the analytical gradient is not implemented. So I guess, the problem is somewhere in **Psi4**.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867
https://github.com/psi4/psi4/issues/867:1606,Security,Validat,ValidationError,1606,"Compute numerical and analytical gradients with **wB97X** functional:; ```python; import psi4. print(psi4.__version__). psi4.geometry('H -.5 0 0\nH .5 0 0'); psi4.gradient('wb97x/3-21g', dertype=0); psi4.gradient('wb97x/3-21g', dertype=1); ```. The numerical gradient works, but analytical one crashes:; ```; 1.2a1.dev681; gradient() will perform gradient computation by finite difference of analytic energies. ... skipped ... ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 2 x 3. 1 2 3. 1 -0.08957282148820 0.00000000000000 0.00000000000000; 2 0.08957282148820 0.00000000000000 0.00000000000000. Traceback (most recent call last):; File ""test.py"", line 7, in <module>; psi4.gradient('wb97x/3-21g', dertype=1); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in gradient; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in <listcomp>; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 103, in _find_derivative_type; % (method_name, str(dertype), alternatives)); psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. Also, the error message is self-contradicting:; ```; psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. According to https://gitlab.com/libxc/libxc/wikis/Functionals-list-3.0.0, **libXC** supports **wB97X** and I don't see any notes that the analytical gradient is not implemented. So I guess, the problem is somewhere in **Psi4**.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867
https://github.com/psi4/psi4/issues/867:640,Testability,test,test,640,"Compute numerical and analytical gradients with **wB97X** functional:; ```python; import psi4. print(psi4.__version__). psi4.geometry('H -.5 0 0\nH .5 0 0'); psi4.gradient('wb97x/3-21g', dertype=0); psi4.gradient('wb97x/3-21g', dertype=1); ```. The numerical gradient works, but analytical one crashes:; ```; 1.2a1.dev681; gradient() will perform gradient computation by finite difference of analytic energies. ... skipped ... ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 2 x 3. 1 2 3. 1 -0.08957282148820 0.00000000000000 0.00000000000000; 2 0.08957282148820 0.00000000000000 0.00000000000000. Traceback (most recent call last):; File ""test.py"", line 7, in <module>; psi4.gradient('wb97x/3-21g', dertype=1); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in gradient; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in <listcomp>; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 103, in _find_derivative_type; % (method_name, str(dertype), alternatives)); psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. Also, the error message is self-contradicting:; ```; psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. According to https://gitlab.com/libxc/libxc/wikis/Functionals-list-3.0.0, **libXC** supports **wB97X** and I don't see any notes that the analytical gradient is not implemented. So I guess, the problem is somewhere in **Psi4**.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867
https://github.com/psi4/psi4/issues/868:405,Energy Efficiency,energy,energy,405,"I'm trying to run some simple x2c jobs using the new Karlsruhe x2c basis sets. The SVP jobs run fine, but the larger basis sets cause problems. For instance,; ```; molecule {; units bohr; 0 1; Ag; Ag 1 4.60; }. set basis x2c-TZVPall-decon; set basis_relativistic x2c-TZVPall-decon; set relativistic x2c; set scf_type direct; set df_scf_guess false; set dft_radial_points 99; set dft_spherical_points 590. energy('svwn'); ```; fails to converge. For SVP, I get; ```; The 1-norm of |H_X2C - H_Dirac| is: 0.000000088631; ```; but for TZVP; ```; The 1-norm of |H_X2C - H_Dirac| is: 181094.365380967443. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set.; ```. This must be related to linear dependencies in the basis. pyscf appears to run the same calculations without problems. It uses a threshold for small exponents for the small exponents (https://programtalk.com/vs2/python/12572/pyscf/scf/x2c.py/ line 68); maybe one should also be used in psi4?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/868
https://github.com/psi4/psi4/issues/868:781,Integrability,depend,dependencies,781,"I'm trying to run some simple x2c jobs using the new Karlsruhe x2c basis sets. The SVP jobs run fine, but the larger basis sets cause problems. For instance,; ```; molecule {; units bohr; 0 1; Ag; Ag 1 4.60; }. set basis x2c-TZVPall-decon; set basis_relativistic x2c-TZVPall-decon; set relativistic x2c; set scf_type direct; set df_scf_guess false; set dft_radial_points 99; set dft_spherical_points 590. energy('svwn'); ```; fails to converge. For SVP, I get; ```; The 1-norm of |H_X2C - H_Dirac| is: 0.000000088631; ```; but for TZVP; ```; The 1-norm of |H_X2C - H_Dirac| is: 181094.365380967443. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set.; ```. This must be related to linear dependencies in the basis. pyscf appears to run the same calculations without problems. It uses a threshold for small exponents for the small exponents (https://programtalk.com/vs2/python/12572/pyscf/scf/x2c.py/ line 68); maybe one should also be used in psi4?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/868
https://github.com/psi4/psi4/issues/868:23,Usability,simpl,simple,23,"I'm trying to run some simple x2c jobs using the new Karlsruhe x2c basis sets. The SVP jobs run fine, but the larger basis sets cause problems. For instance,; ```; molecule {; units bohr; 0 1; Ag; Ag 1 4.60; }. set basis x2c-TZVPall-decon; set basis_relativistic x2c-TZVPall-decon; set relativistic x2c; set scf_type direct; set df_scf_guess false; set dft_radial_points 99; set dft_spherical_points 590. energy('svwn'); ```; fails to converge. For SVP, I get; ```; The 1-norm of |H_X2C - H_Dirac| is: 0.000000088631; ```; but for TZVP; ```; The 1-norm of |H_X2C - H_Dirac| is: 181094.365380967443. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set.; ```. This must be related to linear dependencies in the basis. pyscf appears to run the same calculations without problems. It uses a threshold for small exponents for the small exponents (https://programtalk.com/vs2/python/12572/pyscf/scf/x2c.py/ line 68); maybe one should also be used in psi4?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/868
https://github.com/psi4/psi4/pull/869:418,Deployability,Release,Release,418,"## Description; Build gau2grid as required dep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Build gau2grid as required dep. Not doing anything yet, just building; - [x] Still needs hooking up and polishing; - [x] Mint a gau2grid version so that we are not pulling from HEAD.; - [x] Hook gau2grid MAX AM to Psi4 LibInt MAX AM.; * **User-Facing for Release Notes**. ## Questions; - [x] attn @dgasmith . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/869
https://github.com/psi4/psi4/issues/870:507,Integrability,interface,interface,507,"I would like to use the vv10 kernel with custom parameters to use it in the DFT-NL fashion (http://pubs.acs.org/doi/full/10.1021/ct200644w).; One needs to modify the b and c parameters. I figured out that those are obtained from libxc in `LibXCfunctional.cc`. I suppose that within `LibXCFunctional::build_worker` one has to add a user-tweak somehow to modify the vv10 parameters. So to the actual questions:. - Can I already request the VV10 kernel to be included for a given functional through the python interface? (parameters aside); - Can I already request the VV10 kernel in a post-SCF fashion for a given density (a non-SCF VV10 is perfectly fine for energies, it is the default in ORCA). I think I saw this mentioned somewhere, but cannot find it.; - Any further helpful pointers to within code where I would need to make changes or need to take a look? (I am more a Fortran than C++ guy, my head hurts already)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870
https://github.com/psi4/psi4/issues/871:142,Availability,error,error,142,"When trying to compile Psi4 with Miniconda3 using the keywords generated by `psi4-path-advisor` in the development environment, the following error is produced:; ```; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc: In function ‘void psi::dmrg::buildHamDMRG(std::shared_ptr<psi::IntegralTransform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:552,Availability,error,error,552,"When trying to compile Psi4 with Miniconda3 using the keywords generated by `psi4-path-advisor` in the development environment, the following error is produced:; ```; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc: In function ‘void psi::dmrg::buildHamDMRG(std::shared_ptr<psi::IntegralTransform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:1200,Availability,Error,Error,1200,"on ‘void psi::dmrg::buildHamDMRG(std::shared_ptr<psi::IntegralTransform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutpu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:1262,Availability,Error,Error,1262,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:1290,Availability,Error,Error,1290,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:1367,Availability,Error,Error,1367,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:1420,Availability,Error,Error,1420,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:1445,Availability,Error,Error,1445,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:1716,Availability,down,down,1716,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:2091,Availability,error,error,2091,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:2067,Deployability,update,updated,2067,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:1844,Performance,CACHE,CACHE,1844,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:1933,Performance,CACHE,CACHE,1933,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:2101,Testability,log,log,2101,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:2149,Testability,log,log,2149,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:2208,Testability,log,log,2208,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:2227,Testability,log,log,2227,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/issues/871:2287,Testability,log,log,2287,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871
https://github.com/psi4/psi4/pull/872:1304,Deployability,Release,Release,1304,"## Description; I have added a Python function `fcidump` that lets the user save the one- and two-electron integrals to a plain-text file in [FCIDUMP format](http://www.sciencedirect.com/science/article/pii/0010465589900337); This is largely modeled on the [fcidump plugin](https://github.com/hande-qmc/fcidump) by @jsspencer It lets the user decide whether to save additional, non-standard information to the file like orbital energies ~and other one-electron integrals: dipole, quadrupole, etc. (not yet implemented!)~; **I'll implement printing out of the property integrals in a follow-up PR**. ### Some details; The integral transformation is done C-side. Once the OEI and TEI have been transformed, the print to file is done part C-side (TEIs) and part Py-side (OEIs). Not really elegant, I think, but gets the job done. @ashutoshvt might be interesting to get the T-amplitudes in the CC codes printed to file. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposed Python bindings for `MOSpace` and `IntegralTransform` classes in `export_trans.cc`; - [x] Exposed Python bindings for `Slice` class in `export_mints.cc`; - [x] Exposed Python bindings for some additional member functions in the `Matrix` class; * **User-Facing for Release Notes**; - [x] Added a `fcidump` Python function.; ~- [ ] Make it possible to print property integrals to file.~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872
https://github.com/psi4/psi4/pull/872:266,Modifiability,plugin,plugin,266,"## Description; I have added a Python function `fcidump` that lets the user save the one- and two-electron integrals to a plain-text file in [FCIDUMP format](http://www.sciencedirect.com/science/article/pii/0010465589900337); This is largely modeled on the [fcidump plugin](https://github.com/hande-qmc/fcidump) by @jsspencer It lets the user decide whether to save additional, non-standard information to the file like orbital energies ~and other one-electron integrals: dipole, quadrupole, etc. (not yet implemented!)~; **I'll implement printing out of the property integrals in a follow-up PR**. ### Some details; The integral transformation is done C-side. Once the OEI and TEI have been transformed, the print to file is done part C-side (TEIs) and part Py-side (OEIs). Not really elegant, I think, but gets the job done. @ashutoshvt might be interesting to get the T-amplitudes in the CC codes printed to file. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposed Python bindings for `MOSpace` and `IntegralTransform` classes in `export_trans.cc`; - [x] Exposed Python bindings for `Slice` class in `export_mints.cc`; - [x] Exposed Python bindings for some additional member functions in the `Matrix` class; * **User-Facing for Release Notes**; - [x] Added a `fcidump` Python function.; ~- [ ] Make it possible to print property integrals to file.~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872
https://github.com/psi4/psi4/pull/872:1032,Security,Expose,Exposed,1032,"## Description; I have added a Python function `fcidump` that lets the user save the one- and two-electron integrals to a plain-text file in [FCIDUMP format](http://www.sciencedirect.com/science/article/pii/0010465589900337); This is largely modeled on the [fcidump plugin](https://github.com/hande-qmc/fcidump) by @jsspencer It lets the user decide whether to save additional, non-standard information to the file like orbital energies ~and other one-electron integrals: dipole, quadrupole, etc. (not yet implemented!)~; **I'll implement printing out of the property integrals in a follow-up PR**. ### Some details; The integral transformation is done C-side. Once the OEI and TEI have been transformed, the print to file is done part C-side (TEIs) and part Py-side (OEIs). Not really elegant, I think, but gets the job done. @ashutoshvt might be interesting to get the T-amplitudes in the CC codes printed to file. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposed Python bindings for `MOSpace` and `IntegralTransform` classes in `export_trans.cc`; - [x] Exposed Python bindings for `Slice` class in `export_mints.cc`; - [x] Exposed Python bindings for some additional member functions in the `Matrix` class; * **User-Facing for Release Notes**; - [x] Added a `fcidump` Python function.; ~- [ ] Make it possible to print property integrals to file.~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872
https://github.com/psi4/psi4/pull/872:1130,Security,Expose,Exposed,1130,"## Description; I have added a Python function `fcidump` that lets the user save the one- and two-electron integrals to a plain-text file in [FCIDUMP format](http://www.sciencedirect.com/science/article/pii/0010465589900337); This is largely modeled on the [fcidump plugin](https://github.com/hande-qmc/fcidump) by @jsspencer It lets the user decide whether to save additional, non-standard information to the file like orbital energies ~and other one-electron integrals: dipole, quadrupole, etc. (not yet implemented!)~; **I'll implement printing out of the property integrals in a follow-up PR**. ### Some details; The integral transformation is done C-side. Once the OEI and TEI have been transformed, the print to file is done part C-side (TEIs) and part Py-side (OEIs). Not really elegant, I think, but gets the job done. @ashutoshvt might be interesting to get the T-amplitudes in the CC codes printed to file. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposed Python bindings for `MOSpace` and `IntegralTransform` classes in `export_trans.cc`; - [x] Exposed Python bindings for `Slice` class in `export_mints.cc`; - [x] Exposed Python bindings for some additional member functions in the `Matrix` class; * **User-Facing for Release Notes**; - [x] Added a `fcidump` Python function.; ~- [ ] Make it possible to print property integrals to file.~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872
https://github.com/psi4/psi4/pull/872:1200,Security,Expose,Exposed,1200,"## Description; I have added a Python function `fcidump` that lets the user save the one- and two-electron integrals to a plain-text file in [FCIDUMP format](http://www.sciencedirect.com/science/article/pii/0010465589900337); This is largely modeled on the [fcidump plugin](https://github.com/hande-qmc/fcidump) by @jsspencer It lets the user decide whether to save additional, non-standard information to the file like orbital energies ~and other one-electron integrals: dipole, quadrupole, etc. (not yet implemented!)~; **I'll implement printing out of the property integrals in a follow-up PR**. ### Some details; The integral transformation is done C-side. Once the OEI and TEI have been transformed, the print to file is done part C-side (TEIs) and part Py-side (OEIs). Not really elegant, I think, but gets the job done. @ashutoshvt might be interesting to get the T-amplitudes in the CC codes printed to file. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposed Python bindings for `MOSpace` and `IntegralTransform` classes in `export_trans.cc`; - [x] Exposed Python bindings for `Slice` class in `export_mints.cc`; - [x] Exposed Python bindings for some additional member functions in the `Matrix` class; * **User-Facing for Release Notes**; - [x] Added a `fcidump` Python function.; ~- [ ] Make it possible to print property integrals to file.~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872
https://github.com/psi4/psi4/pull/873:220,Testability,test,test,220,"## Description; PR #844 made the dipole field a required argument almost everywhere but missed DMRG. The DMRG code now supplies this argument, so the code can be built again!. ## Questions; - [x] ~I couldn't find a dmrg test suite. I assume that DMRG doesn't need any wacky external field handling.~ Tested and passing!. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/873
https://github.com/psi4/psi4/pull/873:300,Testability,Test,Tested,300,"## Description; PR #844 made the dipole field a required argument almost everywhere but missed DMRG. The DMRG code now supplies this argument, so the code can be built again!. ## Questions; - [x] ~I couldn't find a dmrg test suite. I assume that DMRG doesn't need any wacky external field handling.~ Tested and passing!. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/873
https://github.com/psi4/psi4/issues/874:7398,Integrability,contract,contraction,7398,"0.0000000; 24 0.0000000 0.0000000 -0.2145081 -0.0955885 -0.3962490 -0.1582019 -0.1748445 0.0000000 -0.2501782 0.0000000; 25 0.0000000 0.0000000 -0.3899088 -0.0161290 -0.0829898 -0.0000000 -0.0000000 0.0000000 0.0000000 0.0502025. 21 22 23 24 25. 1 0.0534972 0.0695717 0.0000000 -0.0869670 -0.0673371; 2 0.2748140 0.3248252 0.0000000 -0.3181362 -0.2463274; 3 0.4954265 0.6469897 0.0000000 -0.3093155 -0.2394976; 4 0.0000000 0.0000000 0.1943450 0.0000000 0.0000000; 5 0.2220879 0.0839998 0.0000000 -0.1646270 -0.2779458; 6 0.1719588 0.0650396 0.0000000 -0.2779458 -0.0208636; 7 0.0000000 0.0000000 0.3902542 0.0000000 0.0000000; 8 0.4918677 0.3101080 0.0000000 0.0695736 -0.2482975; 9 0.3808447 0.2401112 0.0000000 -0.2482975 0.1980018; 10 0.2068227 0.3228525 0.0000000 -0.2355869 -0.1824109; 11 0.0000000 0.0000000 0.1445331 0.0000000 0.0000000; 12 0.0000000 0.0000000 0.1119094 0.0000000 0.0000000; 13 0.3506915 0.3379822 0.0000000 -0.2145081 -0.3899088; 14 0.1113951 0.0117147 0.0000000 -0.0955885 -0.0161290; 15 0.2930740 0.3319229 0.0000000 -0.3962490 -0.0829898; 16 0.1198368 0.3062336 0.0000000 -0.1582019 -0.0000000; 17 0.3062336 0.6052920 0.0000000 -0.1748445 -0.0000000; 18 0.0000000 0.0000000 0.0502025 0.0000000 0.0000000; 19 0.1582019 0.1748445 0.0000000 -0.2501782 0.0000000; 20 -0.0000000 -0.0000000 0.0000000 0.0000000 0.0502025; 21 1.0000000 0.6848603 0.0000000 -0.0000000 -0.0000000; 22 0.6848603 1.0000000 0.0000000 -0.0000000 -0.0000000; 23 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000; 24 -0.0000000 -0.0000000 0.0000000 1.0000000 0.0000000; 25 -0.0000000 -0.0000000 0.0000000 0.0000000 1.0000000. For example, for the AO function 11 the self-overlap is computed as 0.3333333, but it should be 1. At first glance, I was thinking that there might be a problem in the normalization of contraction coefficients. But the strange thing is that when I repeat the same example with my dfocc module I get the correct normalization. Any help to understand the problem? @jturney @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/874
https://github.com/psi4/psi4/issues/874:25,Modifiability,plugin,plugin,25,"I have generated a plain plugin template and read so basis overlap integrals as follows:; MintsHelper mints(MintsHelper(ref_wfn->basisset(), options, 0));; Sso_ = mints.ao_overlap();. I used the following geometry with cc-pvdz basis set and with the ""puream false"" option:; O 0.000000000000 0.000000000000 -0.065775570538; H 0.000000000000 -0.759061990794 0.521953018295; H 0.000000000000 0.759061990794 0.521953018295; symmetry c1; noreorient. and I get the following output:; ## SO-basis Overlap Ints ##. 1 2 3 4 5 6 7 8 9 10. 1 1.0000000 -0.2140627 0.1943842 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 -0.0000000 0.0705864; 2 -0.2140627 1.0000000 0.7086073 0.0000000 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 0.6299064; 3 0.1943842 0.7086073 1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.6642838; 4 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.5012715 0.0000000 0.0000000 0.0000000; 5 0.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.5012715 0.0000000 0.0000000; 6 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.5012715 -0.0000000; 7 0.0000000 0.0000000 0.0000000 0.5012715 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000; 8 0.0000000 0.0000000 0.0000000 0.0000000 0.5012715 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000; 9 -0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.5012715 0.0000000 0.0000000 1.0000000 0.0000000; 10 0.0705864 0.6299064 0.6642838 0.0000000 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 1.0000000; 11 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 12 0.0000000 0.0000000 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 13 0.0705864 0.6299064 0.6642838 0.0000000 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 0.3333333; 14 0.0000000 0.0000000 0.0000000 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 15 0.0705864 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/874
https://github.com/psi4/psi4/issues/875:701,Availability,failure,failure,701,"I believe we have had this problem in the past. Take a symmetric molecule who's optimal wavefunction should contain less symmetry:. ```python; import numpy as np. mol = psi4.geometry(""""""; 0 1; C 0.0 0.0 0.673055; C 0.0 0.0 -0.673055; H 0.0 0.934981 1.246807; H 0.0 -0.934981 1.246807; H 0.934981 0.0 -1.246807; H -0.934981 0.0 -1.246807; symmetry c1; """"""). # Set reference and guess.; psi4.set_options({; ""reference"": ""rhf"",; ""guess"": ""sad"",; ""basis"": ""DZP"",; ""soscf"": ""true"",; # ""sad_frac_occ"": ""true""; }). e_scf = energy('scf'); if np.allclose(e_scf, -77.87781349420317):; print(""Found non-symmetric minima! Success!""); elif np.allclose(e_scf, -77.84789770426966):; print(""Found symmetric minima... failure.""); else:; print(""You found something... wrong.""); ```. The `-77.847` result should be found when the molecule is constrained to symmetry. However, without that constraint there is a lower SCF result to be found. The kicker is even without the symmetry restraint (computation in `c1`) we fairly consistently end up with a symmetric wavefunction. Any ideas on how to avoid this?. Note 1: The stability analysis is showing that it is indeed finding the wrong answer and there are negative eigenvalues present. We should be able to follow these once the py-scf iterations are finished. Note 2: This is not deterministic for which result we land in (whoo!). Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find the correct energy. Really any noise lets the diagonalizer break out of its self-imposed symmetry constraints.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/875
https://github.com/psi4/psi4/issues/875:516,Energy Efficiency,energy,energy,516,"I believe we have had this problem in the past. Take a symmetric molecule who's optimal wavefunction should contain less symmetry:. ```python; import numpy as np. mol = psi4.geometry(""""""; 0 1; C 0.0 0.0 0.673055; C 0.0 0.0 -0.673055; H 0.0 0.934981 1.246807; H 0.0 -0.934981 1.246807; H 0.934981 0.0 -1.246807; H -0.934981 0.0 -1.246807; symmetry c1; """"""). # Set reference and guess.; psi4.set_options({; ""reference"": ""rhf"",; ""guess"": ""sad"",; ""basis"": ""DZP"",; ""soscf"": ""true"",; # ""sad_frac_occ"": ""true""; }). e_scf = energy('scf'); if np.allclose(e_scf, -77.87781349420317):; print(""Found non-symmetric minima! Success!""); elif np.allclose(e_scf, -77.84789770426966):; print(""Found symmetric minima... failure.""); else:; print(""You found something... wrong.""); ```. The `-77.847` result should be found when the molecule is constrained to symmetry. However, without that constraint there is a lower SCF result to be found. The kicker is even without the symmetry restraint (computation in `c1`) we fairly consistently end up with a symmetric wavefunction. Any ideas on how to avoid this?. Note 1: The stability analysis is showing that it is indeed finding the wrong answer and there are negative eigenvalues present. We should be able to follow these once the py-scf iterations are finished. Note 2: This is not deterministic for which result we land in (whoo!). Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find the correct energy. Really any noise lets the diagonalizer break out of its self-imposed symmetry constraints.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/875
https://github.com/psi4/psi4/issues/875:1450,Energy Efficiency,energy,energy,1450,"I believe we have had this problem in the past. Take a symmetric molecule who's optimal wavefunction should contain less symmetry:. ```python; import numpy as np. mol = psi4.geometry(""""""; 0 1; C 0.0 0.0 0.673055; C 0.0 0.0 -0.673055; H 0.0 0.934981 1.246807; H 0.0 -0.934981 1.246807; H 0.934981 0.0 -1.246807; H -0.934981 0.0 -1.246807; symmetry c1; """"""). # Set reference and guess.; psi4.set_options({; ""reference"": ""rhf"",; ""guess"": ""sad"",; ""basis"": ""DZP"",; ""soscf"": ""true"",; # ""sad_frac_occ"": ""true""; }). e_scf = energy('scf'); if np.allclose(e_scf, -77.87781349420317):; print(""Found non-symmetric minima! Success!""); elif np.allclose(e_scf, -77.84789770426966):; print(""Found symmetric minima... failure.""); else:; print(""You found something... wrong.""); ```. The `-77.847` result should be found when the molecule is constrained to symmetry. However, without that constraint there is a lower SCF result to be found. The kicker is even without the symmetry restraint (computation in `c1`) we fairly consistently end up with a symmetric wavefunction. Any ideas on how to avoid this?. Note 1: The stability analysis is showing that it is indeed finding the wrong answer and there are negative eigenvalues present. We should be able to follow these once the py-scf iterations are finished. Note 2: This is not deterministic for which result we land in (whoo!). Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find the correct energy. Really any noise lets the diagonalizer break out of its self-imposed symmetry constraints.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/875
https://github.com/psi4/psi4/issues/875:1075,Safety,avoid,avoid,1075,"I believe we have had this problem in the past. Take a symmetric molecule who's optimal wavefunction should contain less symmetry:. ```python; import numpy as np. mol = psi4.geometry(""""""; 0 1; C 0.0 0.0 0.673055; C 0.0 0.0 -0.673055; H 0.0 0.934981 1.246807; H 0.0 -0.934981 1.246807; H 0.934981 0.0 -1.246807; H -0.934981 0.0 -1.246807; symmetry c1; """"""). # Set reference and guess.; psi4.set_options({; ""reference"": ""rhf"",; ""guess"": ""sad"",; ""basis"": ""DZP"",; ""soscf"": ""true"",; # ""sad_frac_occ"": ""true""; }). e_scf = energy('scf'); if np.allclose(e_scf, -77.87781349420317):; print(""Found non-symmetric minima! Success!""); elif np.allclose(e_scf, -77.84789770426966):; print(""Found symmetric minima... failure.""); else:; print(""You found something... wrong.""); ```. The `-77.847` result should be found when the molecule is constrained to symmetry. However, without that constraint there is a lower SCF result to be found. The kicker is even without the symmetry restraint (computation in `c1`) we fairly consistently end up with a symmetric wavefunction. Any ideas on how to avoid this?. Note 1: The stability analysis is showing that it is indeed finding the wrong answer and there are negative eigenvalues present. We should be able to follow these once the py-scf iterations are finished. Note 2: This is not deterministic for which result we land in (whoo!). Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find the correct energy. Really any noise lets the diagonalizer break out of its self-imposed symmetry constraints.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/875
https://github.com/psi4/psi4/pull/876:232,Deployability,update,updated,232,"## Description; This PR adds implementation of `force_soccpi` and `force_doccpi`, allowing the user to change the singly and doubly occupied orbitals per irrep in the Wavefunction object. The alpha and beta electron counts are also updated accordingly. This functionality should only be used by expert users in special circumstances, since it causes inconsistency in the Wavefunction object for SCF purposes. (Let me know if I should add some sort of ""expert"" flag in the documentation to reflect this, or if I need to add any other documentation besides what I've put in already!). ## Todos; - [x] Add implementation of `force_soccpi` and `force_doccpi` C++-side; - [x] Add Python-side accessibility to `force_soccpi` and `force_doccpi`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/876
https://github.com/psi4/psi4/pull/876:687,Security,access,accessibility,687,"## Description; This PR adds implementation of `force_soccpi` and `force_doccpi`, allowing the user to change the singly and doubly occupied orbitals per irrep in the Wavefunction object. The alpha and beta electron counts are also updated accordingly. This functionality should only be used by expert users in special circumstances, since it causes inconsistency in the Wavefunction object for SCF purposes. (Let me know if I should add some sort of ""expert"" flag in the documentation to reflect this, or if I need to add any other documentation besides what I've put in already!). ## Todos; - [x] Add implementation of `force_soccpi` and `force_doccpi` C++-side; - [x] Add Python-side accessibility to `force_soccpi` and `force_doccpi`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/876
https://github.com/psi4/psi4/pull/877:197,Deployability,Release,Release,197,"## Description; Defines couple new XC functionals in the driver and adds few D3BJ parameters. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Double-Hybrids: B2GPPLYP, PWPB95, PTPSS, DSD-BLYP; - [x] hybrid-GGAs: PW6B95; - [x] mega-GGAs: TPSS, revTPSS; - [x] GGAs: mPWPW; - [x] tests; - [x] adding of some reference outputs; - [x] clean-up ; - [x] praying libxc 4.0 switch does not break the tweaking options. * **Developer notes/issues**; - [x] tests put into dft-custom-gga/mgga/hybrid/dhdf; supersedes a number of older tests (removed only from CMakeLists.txt):; -`dft-dsd + dft-pbe0-2 `moved into `dft-custom-dhdf`; -`dft-dldf` moved into `dft-custom-mgga`; - [x] new tests for mgga_ms0/1/2 based on libxc test data.; - incomplete dft-custom-hybrid test: missing wpbe, wpbe0, b5050lyp. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/877
https://github.com/psi4/psi4/pull/877:355,Testability,test,tests,355,"## Description; Defines couple new XC functionals in the driver and adds few D3BJ parameters. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Double-Hybrids: B2GPPLYP, PWPB95, PTPSS, DSD-BLYP; - [x] hybrid-GGAs: PW6B95; - [x] mega-GGAs: TPSS, revTPSS; - [x] GGAs: mPWPW; - [x] tests; - [x] adding of some reference outputs; - [x] clean-up ; - [x] praying libxc 4.0 switch does not break the tweaking options. * **Developer notes/issues**; - [x] tests put into dft-custom-gga/mgga/hybrid/dhdf; supersedes a number of older tests (removed only from CMakeLists.txt):; -`dft-dsd + dft-pbe0-2 `moved into `dft-custom-dhdf`; -`dft-dldf` moved into `dft-custom-mgga`; - [x] new tests for mgga_ms0/1/2 based on libxc test data.; - incomplete dft-custom-hybrid test: missing wpbe, wpbe0, b5050lyp. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/877
https://github.com/psi4/psi4/pull/877:523,Testability,test,tests,523,"## Description; Defines couple new XC functionals in the driver and adds few D3BJ parameters. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Double-Hybrids: B2GPPLYP, PWPB95, PTPSS, DSD-BLYP; - [x] hybrid-GGAs: PW6B95; - [x] mega-GGAs: TPSS, revTPSS; - [x] GGAs: mPWPW; - [x] tests; - [x] adding of some reference outputs; - [x] clean-up ; - [x] praying libxc 4.0 switch does not break the tweaking options. * **Developer notes/issues**; - [x] tests put into dft-custom-gga/mgga/hybrid/dhdf; supersedes a number of older tests (removed only from CMakeLists.txt):; -`dft-dsd + dft-pbe0-2 `moved into `dft-custom-dhdf`; -`dft-dldf` moved into `dft-custom-mgga`; - [x] new tests for mgga_ms0/1/2 based on libxc test data.; - incomplete dft-custom-hybrid test: missing wpbe, wpbe0, b5050lyp. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/877
https://github.com/psi4/psi4/pull/877:600,Testability,test,tests,600,"## Description; Defines couple new XC functionals in the driver and adds few D3BJ parameters. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Double-Hybrids: B2GPPLYP, PWPB95, PTPSS, DSD-BLYP; - [x] hybrid-GGAs: PW6B95; - [x] mega-GGAs: TPSS, revTPSS; - [x] GGAs: mPWPW; - [x] tests; - [x] adding of some reference outputs; - [x] clean-up ; - [x] praying libxc 4.0 switch does not break the tweaking options. * **Developer notes/issues**; - [x] tests put into dft-custom-gga/mgga/hybrid/dhdf; supersedes a number of older tests (removed only from CMakeLists.txt):; -`dft-dsd + dft-pbe0-2 `moved into `dft-custom-dhdf`; -`dft-dldf` moved into `dft-custom-mgga`; - [x] new tests for mgga_ms0/1/2 based on libxc test data.; - incomplete dft-custom-hybrid test: missing wpbe, wpbe0, b5050lyp. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/877
https://github.com/psi4/psi4/pull/877:749,Testability,test,tests,749,"## Description; Defines couple new XC functionals in the driver and adds few D3BJ parameters. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Double-Hybrids: B2GPPLYP, PWPB95, PTPSS, DSD-BLYP; - [x] hybrid-GGAs: PW6B95; - [x] mega-GGAs: TPSS, revTPSS; - [x] GGAs: mPWPW; - [x] tests; - [x] adding of some reference outputs; - [x] clean-up ; - [x] praying libxc 4.0 switch does not break the tweaking options. * **Developer notes/issues**; - [x] tests put into dft-custom-gga/mgga/hybrid/dhdf; supersedes a number of older tests (removed only from CMakeLists.txt):; -`dft-dsd + dft-pbe0-2 `moved into `dft-custom-dhdf`; -`dft-dldf` moved into `dft-custom-mgga`; - [x] new tests for mgga_ms0/1/2 based on libxc test data.; - incomplete dft-custom-hybrid test: missing wpbe, wpbe0, b5050lyp. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/877
https://github.com/psi4/psi4/pull/877:787,Testability,test,test,787,"## Description; Defines couple new XC functionals in the driver and adds few D3BJ parameters. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Double-Hybrids: B2GPPLYP, PWPB95, PTPSS, DSD-BLYP; - [x] hybrid-GGAs: PW6B95; - [x] mega-GGAs: TPSS, revTPSS; - [x] GGAs: mPWPW; - [x] tests; - [x] adding of some reference outputs; - [x] clean-up ; - [x] praying libxc 4.0 switch does not break the tweaking options. * **Developer notes/issues**; - [x] tests put into dft-custom-gga/mgga/hybrid/dhdf; supersedes a number of older tests (removed only from CMakeLists.txt):; -`dft-dsd + dft-pbe0-2 `moved into `dft-custom-dhdf`; -`dft-dldf` moved into `dft-custom-mgga`; - [x] new tests for mgga_ms0/1/2 based on libxc test data.; - incomplete dft-custom-hybrid test: missing wpbe, wpbe0, b5050lyp. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/877
https://github.com/psi4/psi4/pull/877:830,Testability,test,test,830,"## Description; Defines couple new XC functionals in the driver and adds few D3BJ parameters. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Double-Hybrids: B2GPPLYP, PWPB95, PTPSS, DSD-BLYP; - [x] hybrid-GGAs: PW6B95; - [x] mega-GGAs: TPSS, revTPSS; - [x] GGAs: mPWPW; - [x] tests; - [x] adding of some reference outputs; - [x] clean-up ; - [x] praying libxc 4.0 switch does not break the tweaking options. * **Developer notes/issues**; - [x] tests put into dft-custom-gga/mgga/hybrid/dhdf; supersedes a number of older tests (removed only from CMakeLists.txt):; -`dft-dsd + dft-pbe0-2 `moved into `dft-custom-dhdf`; -`dft-dldf` moved into `dft-custom-mgga`; - [x] new tests for mgga_ms0/1/2 based on libxc test data.; - incomplete dft-custom-hybrid test: missing wpbe, wpbe0, b5050lyp. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/877
https://github.com/psi4/psi4/pull/878:1939,Availability,avail,available,1939,"l bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/878
https://github.com/psi4/psi4/pull/878:1017,Deployability,Release,Release,1017,"## Description; This PR will expose the `PCM` object in Psi4 out to Python, similarly to #861, but will bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/878
https://github.com/psi4/psi4/pull/878:288,Energy Efficiency,energy,energy,288,"## Description; This PR will expose the `PCM` object in Psi4 out to Python, similarly to #861, but will bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/878
https://github.com/psi4/psi4/pull/878:1529,Energy Efficiency,charge,charge,1529,"l bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/878
https://github.com/psi4/psi4/pull/878:187,Integrability,wrap,wraps,187,"## Description; This PR will expose the `PCM` object in Psi4 out to Python, similarly to #861, but will bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/878
https://github.com/psi4/psi4/pull/878:2037,Integrability,rout,routed,2037,"l bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/878
https://github.com/psi4/psi4/pull/878:29,Security,expose,expose,29,"## Description; This PR will expose the `PCM` object in Psi4 out to Python, similarly to #861, but will bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/878
https://github.com/psi4/psi4/pull/878:923,Testability,test,tests,923,"## Description; This PR will expose the `PCM` object in Psi4 out to Python, similarly to #861, but will bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/878
https://github.com/psi4/psi4/pull/878:1864,Usability,clear,clearly,1864,"l bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/878
https://github.com/psi4/psi4/pull/879:89,Testability,test,tests,89,## Description; Some bugs were exterminated in `find()` and `fexch()`. ; Additional unit tests were added. ; Thanks to @bwb314 for creating extensive unit tests which check all fsapt terms. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/879
https://github.com/psi4/psi4/pull/879:155,Testability,test,tests,155,## Description; Some bugs were exterminated in `find()` and `fexch()`. ; Additional unit tests were added. ; Thanks to @bwb314 for creating extensive unit tests which check all fsapt terms. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/879
https://github.com/psi4/psi4/pull/880:48,Testability,test,tests,48,## Description; This PR is designed to add more tests for libXC in Psi4. ## Todos; - [x] output.ref files need to be generated; - [x] CMakeLists.txt needs to added; - [x] Test names need to be added to psi4/tests/CMakeLists.txt. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/880
https://github.com/psi4/psi4/pull/880:171,Testability,Test,Test,171,## Description; This PR is designed to add more tests for libXC in Psi4. ## Todos; - [x] output.ref files need to be generated; - [x] CMakeLists.txt needs to added; - [x] Test names need to be added to psi4/tests/CMakeLists.txt. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/880
https://github.com/psi4/psi4/pull/880:207,Testability,test,tests,207,## Description; This PR is designed to add more tests for libXC in Psi4. ## Todos; - [x] output.ref files need to be generated; - [x] CMakeLists.txt needs to added; - [x] Test names need to be added to psi4/tests/CMakeLists.txt. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/880
https://github.com/psi4/psi4/pull/881:63,Availability,error,errors,63,"## Description; Allow access to wfn (incl. geom) after optking errors. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * **User-Facing for Release Notes**; - [x] If optking fails internally or through exceeding max cycles and throws a `ConvergenceError`, you can now catch it with:. ```; try:; optimize('hf'); except psi4.ConvergenceError as err:; gotcha = err.wfn; print(gotcha.molecule().nuclear_repulsion_energy()); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/881
https://github.com/psi4/psi4/pull/881:200,Deployability,Release,Release,200,"## Description; Allow access to wfn (incl. geom) after optking errors. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * **User-Facing for Release Notes**; - [x] If optking fails internally or through exceeding max cycles and throws a `ConvergenceError`, you can now catch it with:. ```; try:; optimize('hf'); except psi4.ConvergenceError as err:; gotcha = err.wfn; print(gotcha.molecule().nuclear_repulsion_energy()); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/881
https://github.com/psi4/psi4/pull/881:355,Performance,optimiz,optimize,355,"## Description; Allow access to wfn (incl. geom) after optking errors. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * **User-Facing for Release Notes**; - [x] If optking fails internally or through exceeding max cycles and throws a `ConvergenceError`, you can now catch it with:. ```; try:; optimize('hf'); except psi4.ConvergenceError as err:; gotcha = err.wfn; print(gotcha.molecule().nuclear_repulsion_energy()); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/881
https://github.com/psi4/psi4/pull/881:22,Security,access,access,22,"## Description; Allow access to wfn (incl. geom) after optking errors. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * **User-Facing for Release Notes**; - [x] If optking fails internally or through exceeding max cycles and throws a `ConvergenceError`, you can now catch it with:. ```; try:; optimize('hf'); except psi4.ConvergenceError as err:; gotcha = err.wfn; print(gotcha.molecule().nuclear_repulsion_energy()); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/881
https://github.com/psi4/psi4/pull/882:901,Deployability,Release,Release,901,"## Description; As documented in #859, an IRC performed on a tightly converged transition state would converge to the initial transition state. The obvious workaround showed non-deterministic optking steps, as documented in #860. Both bugs originate from neglecting the possibility of near-zero gradients and have been fixed. Also as documented in #860, there is still some non-deterministic behavior after the minimum has been found. As optking is going to be moved Python-side soon and this behavior is irrelevant for most users, I'll hold off from investigating that until we see if the Python-version has the problem. I have added a test case for tightly converged transition states, thanks to the oddly prescient #881. For the sake of other developers, I added a page on how to add test cases. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [x] Fixes a bug disabling IRCs for tightly converged transition states. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/882
https://github.com/psi4/psi4/pull/882:46,Performance,perform,performed,46,"## Description; As documented in #859, an IRC performed on a tightly converged transition state would converge to the initial transition state. The obvious workaround showed non-deterministic optking steps, as documented in #860. Both bugs originate from neglecting the possibility of near-zero gradients and have been fixed. Also as documented in #860, there is still some non-deterministic behavior after the minimum has been found. As optking is going to be moved Python-side soon and this behavior is irrelevant for most users, I'll hold off from investigating that until we see if the Python-version has the problem. I have added a test case for tightly converged transition states, thanks to the oddly prescient #881. For the sake of other developers, I added a page on how to add test cases. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [x] Fixes a bug disabling IRCs for tightly converged transition states. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/882
https://github.com/psi4/psi4/pull/882:637,Testability,test,test,637,"## Description; As documented in #859, an IRC performed on a tightly converged transition state would converge to the initial transition state. The obvious workaround showed non-deterministic optking steps, as documented in #860. Both bugs originate from neglecting the possibility of near-zero gradients and have been fixed. Also as documented in #860, there is still some non-deterministic behavior after the minimum has been found. As optking is going to be moved Python-side soon and this behavior is irrelevant for most users, I'll hold off from investigating that until we see if the Python-version has the problem. I have added a test case for tightly converged transition states, thanks to the oddly prescient #881. For the sake of other developers, I added a page on how to add test cases. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [x] Fixes a bug disabling IRCs for tightly converged transition states. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/882
https://github.com/psi4/psi4/pull/882:787,Testability,test,test,787,"## Description; As documented in #859, an IRC performed on a tightly converged transition state would converge to the initial transition state. The obvious workaround showed non-deterministic optking steps, as documented in #860. Both bugs originate from neglecting the possibility of near-zero gradients and have been fixed. Also as documented in #860, there is still some non-deterministic behavior after the minimum has been found. As optking is going to be moved Python-side soon and this behavior is irrelevant for most users, I'll hold off from investigating that until we see if the Python-version has the problem. I have added a test case for tightly converged transition states, thanks to the oddly prescient #881. For the sake of other developers, I added a page on how to add test cases. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [x] Fixes a bug disabling IRCs for tightly converged transition states. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/882
https://github.com/psi4/psi4/issues/883:403,Energy Efficiency,energy,energy,403,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/883
https://github.com/psi4/psi4/issues/883:512,Energy Efficiency,energy,energy,512,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/883
https://github.com/psi4/psi4/issues/883:27,Modifiability,variab,variable,27,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/883
https://github.com/psi4/psi4/issues/883:85,Modifiability,variab,variables,85,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/883
https://github.com/psi4/psi4/issues/883:332,Modifiability,variab,variables,332,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/883
https://github.com/psi4/psi4/issues/883:352,Modifiability,variab,variables,352,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/883
https://github.com/psi4/psi4/issues/883:559,Modifiability,variab,variables,559,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/883
https://github.com/psi4/psi4/issues/883:747,Modifiability,variab,variables,747,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/883
https://github.com/psi4/psi4/issues/883:833,Modifiability,variab,variable,833,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/883
https://github.com/psi4/psi4/issues/883:890,Modifiability,variab,variable,890,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/883
https://github.com/psi4/psi4/issues/883:953,Modifiability,variab,variables,953,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/883
https://github.com/psi4/psi4/issues/883:1330,Testability,test,testing,1330,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/883
https://github.com/psi4/psi4/issues/884:357,Integrability,wrap,wrapped,357,"It would be great to move the finite difference code Python-side for a variety of reasons. This would require the following steps:; - [x] Finished exporting `CdSalcList` to Python, see `psi4/src/export_mints.cc:512`. Some decisions will need to be made about the matrix factory input (which isn't used) and the ""need irreps"" keyword might want to be nicely wrapped for Python.; - [x] Pop out `fd_geoms_1_0` / `fd_1_0 Python side and add unit tests. Explore various interface types. I know a big one to consider is to use dictionaries rather than list so that we can do something like: compute gradient, do some checks, compute Hessian without duplicating computations, etc.; - [x] Move the rest of the fd code Python side.; - [x] Replace C calls with Py calls and remove C++ code. Many folks might want to comment on this so please make a PR after/during step one for review.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/884
https://github.com/psi4/psi4/issues/884:465,Integrability,interface,interface,465,"It would be great to move the finite difference code Python-side for a variety of reasons. This would require the following steps:; - [x] Finished exporting `CdSalcList` to Python, see `psi4/src/export_mints.cc:512`. Some decisions will need to be made about the matrix factory input (which isn't used) and the ""need irreps"" keyword might want to be nicely wrapped for Python.; - [x] Pop out `fd_geoms_1_0` / `fd_1_0 Python side and add unit tests. Explore various interface types. I know a big one to consider is to use dictionaries rather than list so that we can do something like: compute gradient, do some checks, compute Hessian without duplicating computations, etc.; - [x] Move the rest of the fd code Python side.; - [x] Replace C calls with Py calls and remove C++ code. Many folks might want to comment on this so please make a PR after/during step one for review.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/884
https://github.com/psi4/psi4/issues/884:442,Testability,test,tests,442,"It would be great to move the finite difference code Python-side for a variety of reasons. This would require the following steps:; - [x] Finished exporting `CdSalcList` to Python, see `psi4/src/export_mints.cc:512`. Some decisions will need to be made about the matrix factory input (which isn't used) and the ""need irreps"" keyword might want to be nicely wrapped for Python.; - [x] Pop out `fd_geoms_1_0` / `fd_1_0 Python side and add unit tests. Explore various interface types. I know a big one to consider is to use dictionaries rather than list so that we can do something like: compute gradient, do some checks, compute Hessian without duplicating computations, etc.; - [x] Move the rest of the fd code Python side.; - [x] Replace C calls with Py calls and remove C++ code. Many folks might want to comment on this so please make a PR after/during step one for review.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/884
https://github.com/psi4/psi4/issues/886:502,Testability,stub,stub,502,"We have started a folder that contains arbitrary solvers in `psi4/driver/p4util/solvers.py`. A generalized Davidson solver which can find the first `n` roots would be greatly useful for both TDDFT, and SCF (DFT) root following. . Requirements:; - First n roots; - Allow preconditions; - Specific root following (say only positive roots); - Support initial guesses; - Subspace collapse; - Any requirements or suggestions @CDSherrill might have as well. I believe Ruhee is on this project, but opening a stub.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/886
https://github.com/psi4/psi4/issues/887:875,Energy Efficiency,reduce,reduce,875,"It would be very handy to have the ability to read/write entire Wavefunctions. We do this somewhat awkwardly for the SCF `read` guess functionality on [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1384) line. . Some issues and solutions:; - Serializing basis sets could be problematic. Saving the Python dictionary representation of the basis is the likely solution see [here](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L43) to get started.; - Molecule can be serialized to/from a string (future JSON) `core.Molecule.create_molecule_from_string(mol_string)`.; - Initializing a new Wavefunction could be done with a long signature call that looks something like `Wavefunction(std::map<str::string, SharedMatrix>, std::map<str::string, SharedVector>, std::map<str::string, Dimension>, ...`. This could help reduce the number of inputs required. Curious if anyone has suggestions to simplify the population of private data. Use cases:; - Write our RHF wavefunction, read in for many post-SCF methods.; - Save initial guesses for tricky to converge molecules.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/887
https://github.com/psi4/psi4/issues/887:950,Usability,simpl,simplify,950,"It would be very handy to have the ability to read/write entire Wavefunctions. We do this somewhat awkwardly for the SCF `read` guess functionality on [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1384) line. . Some issues and solutions:; - Serializing basis sets could be problematic. Saving the Python dictionary representation of the basis is the likely solution see [here](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L43) to get started.; - Molecule can be serialized to/from a string (future JSON) `core.Molecule.create_molecule_from_string(mol_string)`.; - Initializing a new Wavefunction could be done with a long signature call that looks something like `Wavefunction(std::map<str::string, SharedMatrix>, std::map<str::string, SharedVector>, std::map<str::string, Dimension>, ...`. This could help reduce the number of inputs required. Curious if anyone has suggestions to simplify the population of private data. Use cases:; - Write our RHF wavefunction, read in for many post-SCF methods.; - Save initial guesses for tricky to converge molecules.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/887
https://github.com/psi4/psi4/issues/888:304,Energy Efficiency,energy,energy,304,"In general the Psi4 SCF solver is rather straightforward by just running through DIIS iterations until convergence is reached. Fortunately the `SCF` iterations have been moving Python side and doing a smart SCF solver should be much easier. A list of possible tricks:; - Automatic root following: If the energy has converged, but the Fock gradient remains large it would be good to detect this and take a Davidson step to get out of an odd minima.; - Automatic SOSCF detection: If very tight convergences are required (1e-10 or less) SOSCF steps after (1.e-5 density/energy) would be preferred.; - Pure first order stepping: In the case of guess`read` the density is diagonalized leading to steps that could take the result away from the minima. A better approach would be to take first order steps (MO Fock matrix over the energy denominators) so that radical changes in the density do not occur.; - Damp post-guess fluctuations: often after a SAD or GWH guess the energy and density will jump considerably before coming back to something near the initial guess. It could be good to take combinations of the next iteration and guess density to prevent such jumps. In the case of SAD this will mean more computations will be non-variational, but the tradeoff could be worth it.; - SCF shake: As discussed in #875 a small amount of noise added to the orbitals/density at the start of a SCF computation could be useful in finding different minima.; - Damping of wild oscillations: If large oscillations occur in the density this could be detected and damping could be turned on for a short time.; - Many more ideas are possible and a discussion of these could be very useful. Please note that not all tricks need to be implemented at once. I would very much encourage small steps at a time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/888
https://github.com/psi4/psi4/issues/888:567,Energy Efficiency,energy,energy,567,"In general the Psi4 SCF solver is rather straightforward by just running through DIIS iterations until convergence is reached. Fortunately the `SCF` iterations have been moving Python side and doing a smart SCF solver should be much easier. A list of possible tricks:; - Automatic root following: If the energy has converged, but the Fock gradient remains large it would be good to detect this and take a Davidson step to get out of an odd minima.; - Automatic SOSCF detection: If very tight convergences are required (1e-10 or less) SOSCF steps after (1.e-5 density/energy) would be preferred.; - Pure first order stepping: In the case of guess`read` the density is diagonalized leading to steps that could take the result away from the minima. A better approach would be to take first order steps (MO Fock matrix over the energy denominators) so that radical changes in the density do not occur.; - Damp post-guess fluctuations: often after a SAD or GWH guess the energy and density will jump considerably before coming back to something near the initial guess. It could be good to take combinations of the next iteration and guess density to prevent such jumps. In the case of SAD this will mean more computations will be non-variational, but the tradeoff could be worth it.; - SCF shake: As discussed in #875 a small amount of noise added to the orbitals/density at the start of a SCF computation could be useful in finding different minima.; - Damping of wild oscillations: If large oscillations occur in the density this could be detected and damping could be turned on for a short time.; - Many more ideas are possible and a discussion of these could be very useful. Please note that not all tricks need to be implemented at once. I would very much encourage small steps at a time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/888
https://github.com/psi4/psi4/issues/888:824,Energy Efficiency,energy,energy,824,"In general the Psi4 SCF solver is rather straightforward by just running through DIIS iterations until convergence is reached. Fortunately the `SCF` iterations have been moving Python side and doing a smart SCF solver should be much easier. A list of possible tricks:; - Automatic root following: If the energy has converged, but the Fock gradient remains large it would be good to detect this and take a Davidson step to get out of an odd minima.; - Automatic SOSCF detection: If very tight convergences are required (1e-10 or less) SOSCF steps after (1.e-5 density/energy) would be preferred.; - Pure first order stepping: In the case of guess`read` the density is diagonalized leading to steps that could take the result away from the minima. A better approach would be to take first order steps (MO Fock matrix over the energy denominators) so that radical changes in the density do not occur.; - Damp post-guess fluctuations: often after a SAD or GWH guess the energy and density will jump considerably before coming back to something near the initial guess. It could be good to take combinations of the next iteration and guess density to prevent such jumps. In the case of SAD this will mean more computations will be non-variational, but the tradeoff could be worth it.; - SCF shake: As discussed in #875 a small amount of noise added to the orbitals/density at the start of a SCF computation could be useful in finding different minima.; - Damping of wild oscillations: If large oscillations occur in the density this could be detected and damping could be turned on for a short time.; - Many more ideas are possible and a discussion of these could be very useful. Please note that not all tricks need to be implemented at once. I would very much encourage small steps at a time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/888
https://github.com/psi4/psi4/issues/888:966,Energy Efficiency,energy,energy,966,"In general the Psi4 SCF solver is rather straightforward by just running through DIIS iterations until convergence is reached. Fortunately the `SCF` iterations have been moving Python side and doing a smart SCF solver should be much easier. A list of possible tricks:; - Automatic root following: If the energy has converged, but the Fock gradient remains large it would be good to detect this and take a Davidson step to get out of an odd minima.; - Automatic SOSCF detection: If very tight convergences are required (1e-10 or less) SOSCF steps after (1.e-5 density/energy) would be preferred.; - Pure first order stepping: In the case of guess`read` the density is diagonalized leading to steps that could take the result away from the minima. A better approach would be to take first order steps (MO Fock matrix over the energy denominators) so that radical changes in the density do not occur.; - Damp post-guess fluctuations: often after a SAD or GWH guess the energy and density will jump considerably before coming back to something near the initial guess. It could be good to take combinations of the next iteration and guess density to prevent such jumps. In the case of SAD this will mean more computations will be non-variational, but the tradeoff could be worth it.; - SCF shake: As discussed in #875 a small amount of noise added to the orbitals/density at the start of a SCF computation could be useful in finding different minima.; - Damping of wild oscillations: If large oscillations occur in the density this could be detected and damping could be turned on for a short time.; - Many more ideas are possible and a discussion of these could be very useful. Please note that not all tricks need to be implemented at once. I would very much encourage small steps at a time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/888
https://github.com/psi4/psi4/issues/888:382,Safety,detect,detect,382,"In general the Psi4 SCF solver is rather straightforward by just running through DIIS iterations until convergence is reached. Fortunately the `SCF` iterations have been moving Python side and doing a smart SCF solver should be much easier. A list of possible tricks:; - Automatic root following: If the energy has converged, but the Fock gradient remains large it would be good to detect this and take a Davidson step to get out of an odd minima.; - Automatic SOSCF detection: If very tight convergences are required (1e-10 or less) SOSCF steps after (1.e-5 density/energy) would be preferred.; - Pure first order stepping: In the case of guess`read` the density is diagonalized leading to steps that could take the result away from the minima. A better approach would be to take first order steps (MO Fock matrix over the energy denominators) so that radical changes in the density do not occur.; - Damp post-guess fluctuations: often after a SAD or GWH guess the energy and density will jump considerably before coming back to something near the initial guess. It could be good to take combinations of the next iteration and guess density to prevent such jumps. In the case of SAD this will mean more computations will be non-variational, but the tradeoff could be worth it.; - SCF shake: As discussed in #875 a small amount of noise added to the orbitals/density at the start of a SCF computation could be useful in finding different minima.; - Damping of wild oscillations: If large oscillations occur in the density this could be detected and damping could be turned on for a short time.; - Many more ideas are possible and a discussion of these could be very useful. Please note that not all tricks need to be implemented at once. I would very much encourage small steps at a time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/888
https://github.com/psi4/psi4/issues/888:467,Safety,detect,detection,467,"In general the Psi4 SCF solver is rather straightforward by just running through DIIS iterations until convergence is reached. Fortunately the `SCF` iterations have been moving Python side and doing a smart SCF solver should be much easier. A list of possible tricks:; - Automatic root following: If the energy has converged, but the Fock gradient remains large it would be good to detect this and take a Davidson step to get out of an odd minima.; - Automatic SOSCF detection: If very tight convergences are required (1e-10 or less) SOSCF steps after (1.e-5 density/energy) would be preferred.; - Pure first order stepping: In the case of guess`read` the density is diagonalized leading to steps that could take the result away from the minima. A better approach would be to take first order steps (MO Fock matrix over the energy denominators) so that radical changes in the density do not occur.; - Damp post-guess fluctuations: often after a SAD or GWH guess the energy and density will jump considerably before coming back to something near the initial guess. It could be good to take combinations of the next iteration and guess density to prevent such jumps. In the case of SAD this will mean more computations will be non-variational, but the tradeoff could be worth it.; - SCF shake: As discussed in #875 a small amount of noise added to the orbitals/density at the start of a SCF computation could be useful in finding different minima.; - Damping of wild oscillations: If large oscillations occur in the density this could be detected and damping could be turned on for a short time.; - Many more ideas are possible and a discussion of these could be very useful. Please note that not all tricks need to be implemented at once. I would very much encourage small steps at a time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/888
https://github.com/psi4/psi4/issues/888:1536,Safety,detect,detected,1536,"In general the Psi4 SCF solver is rather straightforward by just running through DIIS iterations until convergence is reached. Fortunately the `SCF` iterations have been moving Python side and doing a smart SCF solver should be much easier. A list of possible tricks:; - Automatic root following: If the energy has converged, but the Fock gradient remains large it would be good to detect this and take a Davidson step to get out of an odd minima.; - Automatic SOSCF detection: If very tight convergences are required (1e-10 or less) SOSCF steps after (1.e-5 density/energy) would be preferred.; - Pure first order stepping: In the case of guess`read` the density is diagonalized leading to steps that could take the result away from the minima. A better approach would be to take first order steps (MO Fock matrix over the energy denominators) so that radical changes in the density do not occur.; - Damp post-guess fluctuations: often after a SAD or GWH guess the energy and density will jump considerably before coming back to something near the initial guess. It could be good to take combinations of the next iteration and guess density to prevent such jumps. In the case of SAD this will mean more computations will be non-variational, but the tradeoff could be worth it.; - SCF shake: As discussed in #875 a small amount of noise added to the orbitals/density at the start of a SCF computation could be useful in finding different minima.; - Damping of wild oscillations: If large oscillations occur in the density this could be detected and damping could be turned on for a short time.; - Many more ideas are possible and a discussion of these could be very useful. Please note that not all tricks need to be implemented at once. I would very much encourage small steps at a time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/888
https://github.com/psi4/psi4/pull/889:62,Deployability,patch,patched,62,## Description; Small timer mistype in VV10 NL correlation. I patched this up and added a (faster) test to the quicktests suite so that we also check VV10 in CI. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/889
https://github.com/psi4/psi4/pull/889:99,Testability,test,test,99,## Description; Small timer mistype in VV10 NL correlation. I patched this up and added a (faster) test to the quicktests suite so that we also check VV10 in CI. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/889
https://github.com/psi4/psi4/issues/890:47,Availability,error,errors,47,"In `intrinsics_sse.h` and `simint_eri.h` i get errors like: ; ` fatal error: simint/cpp_restrict.hpp: No such file or directory`. The file is located in my installation here:; `[..]/external/upstream/simint/simint_external-prefix/src/simint_external/simint/cpp_restrict.hpp`. For now I can hotfix this for myself by setting the correct path manually.; This issue suddenly appeared, it worked fine before.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/890
https://github.com/psi4/psi4/issues/890:70,Availability,error,error,70,"In `intrinsics_sse.h` and `simint_eri.h` i get errors like: ; ` fatal error: simint/cpp_restrict.hpp: No such file or directory`. The file is located in my installation here:; `[..]/external/upstream/simint/simint_external-prefix/src/simint_external/simint/cpp_restrict.hpp`. For now I can hotfix this for myself by setting the correct path manually.; This issue suddenly appeared, it worked fine before.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/890
https://github.com/psi4/psi4/issues/890:156,Deployability,install,installation,156,"In `intrinsics_sse.h` and `simint_eri.h` i get errors like: ; ` fatal error: simint/cpp_restrict.hpp: No such file or directory`. The file is located in my installation here:; `[..]/external/upstream/simint/simint_external-prefix/src/simint_external/simint/cpp_restrict.hpp`. For now I can hotfix this for myself by setting the correct path manually.; This issue suddenly appeared, it worked fine before.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/890
https://github.com/psi4/psi4/issues/890:290,Deployability,hotfix,hotfix,290,"In `intrinsics_sse.h` and `simint_eri.h` i get errors like: ; ` fatal error: simint/cpp_restrict.hpp: No such file or directory`. The file is located in my installation here:; `[..]/external/upstream/simint/simint_external-prefix/src/simint_external/simint/cpp_restrict.hpp`. For now I can hotfix this for myself by setting the correct path manually.; This issue suddenly appeared, it worked fine before.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/890
https://github.com/psi4/psi4/pull/891:59,Deployability,update,update,59,"## Description; Default memory had been raised to 500 MiB, update documentation to match it. Add some extra information about the handling of IEC/SI units. . ## Todos; * **User-Facing for Release Notes**; - [ ] Documentation about setting memory has been updated. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/891
https://github.com/psi4/psi4/pull/891:188,Deployability,Release,Release,188,"## Description; Default memory had been raised to 500 MiB, update documentation to match it. Add some extra information about the handling of IEC/SI units. . ## Todos; * **User-Facing for Release Notes**; - [ ] Documentation about setting memory has been updated. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/891
https://github.com/psi4/psi4/pull/891:255,Deployability,update,updated,255,"## Description; Default memory had been raised to 500 MiB, update documentation to match it. Add some extra information about the handling of IEC/SI units. . ## Todos; * **User-Facing for Release Notes**; - [ ] Documentation about setting memory has been updated. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/891
https://github.com/psi4/psi4/issues/893:163,Availability,error,error,163,"@bozkaya While running geometry optimizations on a test set of molecules, the MP2.5 and MP3 codes both crash specifically for 2 electron systems without any clear error messages. Input and output files for H2 and Helium geometry optimizations using MP2.5 or MP3 method, respectively.; [h2_input.txt](https://github.com/psi4/psi4/files/1635881/h2_input.txt); [h2_output.txt](https://github.com/psi4/psi4/files/1635895/h2_output.txt); [he_input.txt](https://github.com/psi4/psi4/files/1635897/he_input.txt); [he_output.txt](https://github.com/psi4/psi4/files/1635899/he_output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/893
https://github.com/psi4/psi4/issues/893:169,Integrability,message,messages,169,"@bozkaya While running geometry optimizations on a test set of molecules, the MP2.5 and MP3 codes both crash specifically for 2 electron systems without any clear error messages. Input and output files for H2 and Helium geometry optimizations using MP2.5 or MP3 method, respectively.; [h2_input.txt](https://github.com/psi4/psi4/files/1635881/h2_input.txt); [h2_output.txt](https://github.com/psi4/psi4/files/1635895/h2_output.txt); [he_input.txt](https://github.com/psi4/psi4/files/1635897/he_input.txt); [he_output.txt](https://github.com/psi4/psi4/files/1635899/he_output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/893
https://github.com/psi4/psi4/issues/893:32,Performance,optimiz,optimizations,32,"@bozkaya While running geometry optimizations on a test set of molecules, the MP2.5 and MP3 codes both crash specifically for 2 electron systems without any clear error messages. Input and output files for H2 and Helium geometry optimizations using MP2.5 or MP3 method, respectively.; [h2_input.txt](https://github.com/psi4/psi4/files/1635881/h2_input.txt); [h2_output.txt](https://github.com/psi4/psi4/files/1635895/h2_output.txt); [he_input.txt](https://github.com/psi4/psi4/files/1635897/he_input.txt); [he_output.txt](https://github.com/psi4/psi4/files/1635899/he_output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/893
https://github.com/psi4/psi4/issues/893:229,Performance,optimiz,optimizations,229,"@bozkaya While running geometry optimizations on a test set of molecules, the MP2.5 and MP3 codes both crash specifically for 2 electron systems without any clear error messages. Input and output files for H2 and Helium geometry optimizations using MP2.5 or MP3 method, respectively.; [h2_input.txt](https://github.com/psi4/psi4/files/1635881/h2_input.txt); [h2_output.txt](https://github.com/psi4/psi4/files/1635895/h2_output.txt); [he_input.txt](https://github.com/psi4/psi4/files/1635897/he_input.txt); [he_output.txt](https://github.com/psi4/psi4/files/1635899/he_output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/893
https://github.com/psi4/psi4/issues/893:51,Testability,test,test,51,"@bozkaya While running geometry optimizations on a test set of molecules, the MP2.5 and MP3 codes both crash specifically for 2 electron systems without any clear error messages. Input and output files for H2 and Helium geometry optimizations using MP2.5 or MP3 method, respectively.; [h2_input.txt](https://github.com/psi4/psi4/files/1635881/h2_input.txt); [h2_output.txt](https://github.com/psi4/psi4/files/1635895/h2_output.txt); [he_input.txt](https://github.com/psi4/psi4/files/1635897/he_input.txt); [he_output.txt](https://github.com/psi4/psi4/files/1635899/he_output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/893
https://github.com/psi4/psi4/issues/893:157,Usability,clear,clear,157,"@bozkaya While running geometry optimizations on a test set of molecules, the MP2.5 and MP3 codes both crash specifically for 2 electron systems without any clear error messages. Input and output files for H2 and Helium geometry optimizations using MP2.5 or MP3 method, respectively.; [h2_input.txt](https://github.com/psi4/psi4/files/1635881/h2_input.txt); [h2_output.txt](https://github.com/psi4/psi4/files/1635895/h2_output.txt); [he_input.txt](https://github.com/psi4/psi4/files/1635897/he_input.txt); [he_output.txt](https://github.com/psi4/psi4/files/1635899/he_output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/893
https://github.com/psi4/psi4/pull/894:42,Testability,test,test,42,"## Description; A minor correction to the test file of rhf-hessian. Unfortunately, this wasn't picked ; before the merge of https://github.com/psi4/psi4/pull/757. ; ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/894
https://github.com/psi4/psi4/pull/895:219,Availability,Ping,Pinging,219,"## Description; The CdSalcList code is made fully accessible to the Python layer, per #884. This code does that and makes a few other changes to clean up code I found while trying to write the documentation for Pybind. Pinging @loriab and @dgasmith by request. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves the factory argument from the CdSalcList constructor to an argument of the method that uses it, getting rid of several null pointers and also meaning that a list of displacements no longer needs to care about orbital irreps.; - [x] Adds missing `const` declarations; - [x] The documentation no longer tells developers to use the non-existent SimpleMatrix class; - [x] Other misc. cleanup, from removing an overloaded term to simplification; * **User-Facing for Release Notes**; - [x] Exposed `CdSalcList` to Python; - [x] Made the needed irreps for Cartesian displacements more readable. ## Questions; - [x] ~~I am playing with reworking the print function. needed_irreps displays as an integer, so that part of the output is unintelligible to people who do not know that it is internally a bitstring. Would this be worth changing?~~ Changed!. ## Status; - [x] Ready to go!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/895
https://github.com/psi4/psi4/pull/895:843,Deployability,Release,Release,843,"## Description; The CdSalcList code is made fully accessible to the Python layer, per #884. This code does that and makes a few other changes to clean up code I found while trying to write the documentation for Pybind. Pinging @loriab and @dgasmith by request. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves the factory argument from the CdSalcList constructor to an argument of the method that uses it, getting rid of several null pointers and also meaning that a list of displacements no longer needs to care about orbital irreps.; - [x] Adds missing `const` declarations; - [x] The documentation no longer tells developers to use the non-existent SimpleMatrix class; - [x] Other misc. cleanup, from removing an overloaded term to simplification; * **User-Facing for Release Notes**; - [x] Exposed `CdSalcList` to Python; - [x] Made the needed irreps for Cartesian displacements more readable. ## Questions; - [x] ~~I am playing with reworking the print function. needed_irreps displays as an integer, so that part of the output is unintelligible to people who do not know that it is internally a bitstring. Would this be worth changing?~~ Changed!. ## Status; - [x] Ready to go!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/895
https://github.com/psi4/psi4/pull/895:50,Security,access,accessible,50,"## Description; The CdSalcList code is made fully accessible to the Python layer, per #884. This code does that and makes a few other changes to clean up code I found while trying to write the documentation for Pybind. Pinging @loriab and @dgasmith by request. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves the factory argument from the CdSalcList constructor to an argument of the method that uses it, getting rid of several null pointers and also meaning that a list of displacements no longer needs to care about orbital irreps.; - [x] Adds missing `const` declarations; - [x] The documentation no longer tells developers to use the non-existent SimpleMatrix class; - [x] Other misc. cleanup, from removing an overloaded term to simplification; * **User-Facing for Release Notes**; - [x] Exposed `CdSalcList` to Python; - [x] Made the needed irreps for Cartesian displacements more readable. ## Questions; - [x] ~~I am playing with reworking the print function. needed_irreps displays as an integer, so that part of the output is unintelligible to people who do not know that it is internally a bitstring. Would this be worth changing?~~ Changed!. ## Status; - [x] Ready to go!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/895
https://github.com/psi4/psi4/pull/895:866,Security,Expose,Exposed,866,"## Description; The CdSalcList code is made fully accessible to the Python layer, per #884. This code does that and makes a few other changes to clean up code I found while trying to write the documentation for Pybind. Pinging @loriab and @dgasmith by request. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves the factory argument from the CdSalcList constructor to an argument of the method that uses it, getting rid of several null pointers and also meaning that a list of displacements no longer needs to care about orbital irreps.; - [x] Adds missing `const` declarations; - [x] The documentation no longer tells developers to use the non-existent SimpleMatrix class; - [x] Other misc. cleanup, from removing an overloaded term to simplification; * **User-Facing for Release Notes**; - [x] Exposed `CdSalcList` to Python; - [x] Made the needed irreps for Cartesian displacements more readable. ## Questions; - [x] ~~I am playing with reworking the print function. needed_irreps displays as an integer, so that part of the output is unintelligible to people who do not know that it is internally a bitstring. Would this be worth changing?~~ Changed!. ## Status; - [x] Ready to go!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/895
https://github.com/psi4/psi4/pull/895:724,Usability,Simpl,SimpleMatrix,724,"## Description; The CdSalcList code is made fully accessible to the Python layer, per #884. This code does that and makes a few other changes to clean up code I found while trying to write the documentation for Pybind. Pinging @loriab and @dgasmith by request. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves the factory argument from the CdSalcList constructor to an argument of the method that uses it, getting rid of several null pointers and also meaning that a list of displacements no longer needs to care about orbital irreps.; - [x] Adds missing `const` declarations; - [x] The documentation no longer tells developers to use the non-existent SimpleMatrix class; - [x] Other misc. cleanup, from removing an overloaded term to simplification; * **User-Facing for Release Notes**; - [x] Exposed `CdSalcList` to Python; - [x] Made the needed irreps for Cartesian displacements more readable. ## Questions; - [x] ~~I am playing with reworking the print function. needed_irreps displays as an integer, so that part of the output is unintelligible to people who do not know that it is internally a bitstring. Would this be worth changing?~~ Changed!. ## Status; - [x] Ready to go!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/895
https://github.com/psi4/psi4/pull/895:807,Usability,simpl,simplification,807,"## Description; The CdSalcList code is made fully accessible to the Python layer, per #884. This code does that and makes a few other changes to clean up code I found while trying to write the documentation for Pybind. Pinging @loriab and @dgasmith by request. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves the factory argument from the CdSalcList constructor to an argument of the method that uses it, getting rid of several null pointers and also meaning that a list of displacements no longer needs to care about orbital irreps.; - [x] Adds missing `const` declarations; - [x] The documentation no longer tells developers to use the non-existent SimpleMatrix class; - [x] Other misc. cleanup, from removing an overloaded term to simplification; * **User-Facing for Release Notes**; - [x] Exposed `CdSalcList` to Python; - [x] Made the needed irreps for Cartesian displacements more readable. ## Questions; - [x] ~~I am playing with reworking the print function. needed_irreps displays as an integer, so that part of the output is unintelligible to people who do not know that it is internally a bitstring. Would this be worth changing?~~ Changed!. ## Status; - [x] Ready to go!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/895
https://github.com/psi4/psi4/pull/896:615,Availability,avail,available,615,"## Description; This PR brings (hopefully!) to a close the PCM-changes-directory saga noted in issue #817 and partially alleviated in PR #818. ; This change needed an API update PCMSolver-side, hence the minimum required version bump to its 1.1.12 version. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] PCMSolver updated to its v1.1.12; * **User-Facing for Release Notes**; - [x] Parsing PCM directory _no longer_ changes directory. ## Questions; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/896
https://github.com/psi4/psi4/pull/896:171,Deployability,update,update,171,"## Description; This PR brings (hopefully!) to a close the PCM-changes-directory saga noted in issue #817 and partially alleviated in PR #818. ; This change needed an API update PCMSolver-side, hence the minimum required version bump to its 1.1.12 version. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] PCMSolver updated to its v1.1.12; * **User-Facing for Release Notes**; - [x] Parsing PCM directory _no longer_ changes directory. ## Questions; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/896
https://github.com/psi4/psi4/pull/896:382,Deployability,update,updated,382,"## Description; This PR brings (hopefully!) to a close the PCM-changes-directory saga noted in issue #817 and partially alleviated in PR #818. ; This change needed an API update PCMSolver-side, hence the minimum required version bump to its 1.1.12 version. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] PCMSolver updated to its v1.1.12; * **User-Facing for Release Notes**; - [x] Parsing PCM directory _no longer_ changes directory. ## Questions; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/896
https://github.com/psi4/psi4/pull/896:426,Deployability,Release,Release,426,"## Description; This PR brings (hopefully!) to a close the PCM-changes-directory saga noted in issue #817 and partially alleviated in PR #818. ; This change needed an API update PCMSolver-side, hence the minimum required version bump to its 1.1.12 version. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] PCMSolver updated to its v1.1.12; * **User-Facing for Release Notes**; - [x] Parsing PCM directory _no longer_ changes directory. ## Questions; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/896
https://github.com/psi4/psi4/pull/896:713,Integrability,rout,routed,713,"## Description; This PR brings (hopefully!) to a close the PCM-changes-directory saga noted in issue #817 and partially alleviated in PR #818. ; This change needed an API update PCMSolver-side, hence the minimum required version bump to its 1.1.12 version. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] PCMSolver updated to its v1.1.12; * **User-Facing for Release Notes**; - [x] Parsing PCM directory _no longer_ changes directory. ## Questions; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/896
https://github.com/psi4/psi4/pull/896:540,Usability,clear,clearly,540,"## Description; This PR brings (hopefully!) to a close the PCM-changes-directory saga noted in issue #817 and partially alleviated in PR #818. ; This change needed an API update PCMSolver-side, hence the minimum required version bump to its 1.1.12 version. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] PCMSolver updated to its v1.1.12; * **User-Facing for Release Notes**; - [x] Parsing PCM directory _no longer_ changes directory. ## Questions; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/896
https://github.com/psi4/psi4/pull/897:99,Availability,error,error,99,"## Description; Apparently UKS Meta-GGA's have been wrong since the LibXC patch. I have fixed this error and get quite a nice agreement across our test set. I have changed the `dft1` test to cover these cases and be a bit more specific in what we are testing. I have also started on UKS VV10; however, I am not quite confident it is correct. The VV10 energy is certainly correct, but the gradient might not be scaled correctly. This is the last chance I have to look at it for several weeks so it will need to wait. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/897
https://github.com/psi4/psi4/pull/897:74,Deployability,patch,patch,74,"## Description; Apparently UKS Meta-GGA's have been wrong since the LibXC patch. I have fixed this error and get quite a nice agreement across our test set. I have changed the `dft1` test to cover these cases and be a bit more specific in what we are testing. I have also started on UKS VV10; however, I am not quite confident it is correct. The VV10 energy is certainly correct, but the gradient might not be scaled correctly. This is the last chance I have to look at it for several weeks so it will need to wait. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/897
https://github.com/psi4/psi4/pull/897:351,Energy Efficiency,energy,energy,351,"## Description; Apparently UKS Meta-GGA's have been wrong since the LibXC patch. I have fixed this error and get quite a nice agreement across our test set. I have changed the `dft1` test to cover these cases and be a bit more specific in what we are testing. I have also started on UKS VV10; however, I am not quite confident it is correct. The VV10 energy is certainly correct, but the gradient might not be scaled correctly. This is the last chance I have to look at it for several weeks so it will need to wait. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/897
https://github.com/psi4/psi4/pull/897:147,Testability,test,test,147,"## Description; Apparently UKS Meta-GGA's have been wrong since the LibXC patch. I have fixed this error and get quite a nice agreement across our test set. I have changed the `dft1` test to cover these cases and be a bit more specific in what we are testing. I have also started on UKS VV10; however, I am not quite confident it is correct. The VV10 energy is certainly correct, but the gradient might not be scaled correctly. This is the last chance I have to look at it for several weeks so it will need to wait. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/897
https://github.com/psi4/psi4/pull/897:183,Testability,test,test,183,"## Description; Apparently UKS Meta-GGA's have been wrong since the LibXC patch. I have fixed this error and get quite a nice agreement across our test set. I have changed the `dft1` test to cover these cases and be a bit more specific in what we are testing. I have also started on UKS VV10; however, I am not quite confident it is correct. The VV10 energy is certainly correct, but the gradient might not be scaled correctly. This is the last chance I have to look at it for several weeks so it will need to wait. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/897
https://github.com/psi4/psi4/pull/897:251,Testability,test,testing,251,"## Description; Apparently UKS Meta-GGA's have been wrong since the LibXC patch. I have fixed this error and get quite a nice agreement across our test set. I have changed the `dft1` test to cover these cases and be a bit more specific in what we are testing. I have also started on UKS VV10; however, I am not quite confident it is correct. The VV10 energy is certainly correct, but the gradient might not be scaled correctly. This is the last chance I have to look at it for several weeks so it will need to wait. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/897
https://github.com/psi4/psi4/issues/898:941,Availability,Avail,Available,941,"I noticed that there is some kind of overflow happening in the printing of the memory (see below).; Looks like all variables are doubles so idk why. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2493. The other thing is that this (and similar lines); `cost_ampAA = nocc2AA * nvir2AA;` should maybe be `cost_ampAA = naocc2AA * nvir2AA;`; Otherwise frozen-core is ignored for the memory consideration. Or I misunderstand something. If you could have a look @bozkaya ?. ```; DF-MP2.5 ; Program Written by Ugur Bozkaya; Latest Revision September 9, 2017. ============================================================================== ; ============================================================================== ; ============================================================================== . MO spaces... . FC OCC VIR FV ; ----------------------; 19 49 827 0. Number of basis functions in the DF-CC basis: 2173. Available memory : 55313.11 MB ; Memory requirement for 3-index ints : 12050.26 MB ; Memory requirement for DF-CC int trans: 36889.52 MB ; Memory requirement for CC contractions: -34560.53 MB ; Total memory requirement for DF+CC int: -22510.28 MB ; Memory requirement for Wabef term : 39520.86 MB . ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/898
https://github.com/psi4/psi4/issues/898:1106,Integrability,contract,contractions,1106,"I noticed that there is some kind of overflow happening in the printing of the memory (see below).; Looks like all variables are doubles so idk why. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2493. The other thing is that this (and similar lines); `cost_ampAA = nocc2AA * nvir2AA;` should maybe be `cost_ampAA = naocc2AA * nvir2AA;`; Otherwise frozen-core is ignored for the memory consideration. Or I misunderstand something. If you could have a look @bozkaya ?. ```; DF-MP2.5 ; Program Written by Ugur Bozkaya; Latest Revision September 9, 2017. ============================================================================== ; ============================================================================== ; ============================================================================== . MO spaces... . FC OCC VIR FV ; ----------------------; 19 49 827 0. Number of basis functions in the DF-CC basis: 2173. Available memory : 55313.11 MB ; Memory requirement for 3-index ints : 12050.26 MB ; Memory requirement for DF-CC int trans: 36889.52 MB ; Memory requirement for CC contractions: -34560.53 MB ; Total memory requirement for DF+CC int: -22510.28 MB ; Memory requirement for Wabef term : 39520.86 MB . ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/898
https://github.com/psi4/psi4/issues/898:115,Modifiability,variab,variables,115,"I noticed that there is some kind of overflow happening in the printing of the memory (see below).; Looks like all variables are doubles so idk why. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2493. The other thing is that this (and similar lines); `cost_ampAA = nocc2AA * nvir2AA;` should maybe be `cost_ampAA = naocc2AA * nvir2AA;`; Otherwise frozen-core is ignored for the memory consideration. Or I misunderstand something. If you could have a look @bozkaya ?. ```; DF-MP2.5 ; Program Written by Ugur Bozkaya; Latest Revision September 9, 2017. ============================================================================== ; ============================================================================== ; ============================================================================== . MO spaces... . FC OCC VIR FV ; ----------------------; 19 49 827 0. Number of basis functions in the DF-CC basis: 2173. Available memory : 55313.11 MB ; Memory requirement for 3-index ints : 12050.26 MB ; Memory requirement for DF-CC int trans: 36889.52 MB ; Memory requirement for CC contractions: -34560.53 MB ; Total memory requirement for DF+CC int: -22510.28 MB ; Memory requirement for Wabef term : 39520.86 MB . ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/898
https://github.com/psi4/psi4/issues/899:214,Energy Efficiency,Energy,Energy,214,"http://forum.psicode.org/t/scf-problems-please-help/765/14. ```; First ROHF (DZ):; Computing 2-order Douglas-Kroll-Hess integrals.; Adding Douglas-Kroll-Hess corrections to the potential integrals.; …; @ROHF Final Energy: -1271.85284181863290. Second ROHF (pwCVTZ):; Computing 2-order Douglas-Kroll-Hess integrals.; Adding Douglas-Kroll-Hess corrections to the potential integrals.; …; SCF Guess: Orbitals guess was supplied from a previous computation.; @ROHF Final Energy: -1267.93014988281766; ```. Even though converged docc and socc are the same, we get a difference of 4 Hartrees in the initial versus final ROHF. . Below is a simpler input that shows the problem. ```; molecule {; 0 4; Fe; H 1 1.566665; }. set {; reference rohf; docc [7, 0, 3, 2]; socc [1, 1, 0, 1]; scf_type pk; relativistic dkh; dkh_order 2; print_mos true; maxiter=500; freeze_core false; }. basis mine2{; spherical; ****; Fe 0; S 20 1.00; 4.316265E+06 8.048803E-06; 6.463424E+05 6.258306E-05; 1.470897E+05 3.290239E-04; 4.166152E+04 1.387355E-03; 1.359077E+04 5.023256E-03; 4.905750E+03 1.610140E-02; 1.912746E+03 4.590034E-02; 7.926043E+02 1.136154E-01; 3.448065E+02 2.283869E-01; 1.558999E+02 3.221159E-01; 7.223091E+01 2.383661E-01; 3.272506E+01 7.404667E-02; 1.566762E+01 9.214197E-02; 7.503483E+00 9.339790E-02; 3.312223E+00 1.573965E-02; 1.558471E+00 -4.186682E-04; 6.839140E-01 5.376318E-05; 1.467570E-01 -3.816654E-05; 7.058300E-02 4.319603E-05; 3.144900E-02 -3.401019E-06; S 20 1.00; 4.316265E+06 -4.155954E-06; 6.463424E+05 -3.231401E-05; 1.470897E+05 -1.699525E-04; 4.166152E+04 -7.171369E-04; 1.359077E+04 -2.603625E-03; 4.905750E+03 -8.399109E-03; 1.912746E+03 -2.434109E-02; 7.926043E+02 -6.251948E-02; 3.448065E+02 -1.365929E-01; 1.558999E+02 -2.312707E-01; 7.223091E+01 -2.383734E-01; 3.272506E+01 3.123837E-02; 1.566762E+01 5.086818E-01; 7.503483E+00 4.987695E-01; 3.312223E+00 9.033552E-02; 1.558471E+00 -6.005337E-03; 6.839140E-01 2.312454E-04; 1.467570E-01 -5.643680E-04; 7.058300E-02 4.992260E-04; 3.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/899
https://github.com/psi4/psi4/issues/899:467,Energy Efficiency,Energy,Energy,467,"http://forum.psicode.org/t/scf-problems-please-help/765/14. ```; First ROHF (DZ):; Computing 2-order Douglas-Kroll-Hess integrals.; Adding Douglas-Kroll-Hess corrections to the potential integrals.; …; @ROHF Final Energy: -1271.85284181863290. Second ROHF (pwCVTZ):; Computing 2-order Douglas-Kroll-Hess integrals.; Adding Douglas-Kroll-Hess corrections to the potential integrals.; …; SCF Guess: Orbitals guess was supplied from a previous computation.; @ROHF Final Energy: -1267.93014988281766; ```. Even though converged docc and socc are the same, we get a difference of 4 Hartrees in the initial versus final ROHF. . Below is a simpler input that shows the problem. ```; molecule {; 0 4; Fe; H 1 1.566665; }. set {; reference rohf; docc [7, 0, 3, 2]; socc [1, 1, 0, 1]; scf_type pk; relativistic dkh; dkh_order 2; print_mos true; maxiter=500; freeze_core false; }. basis mine2{; spherical; ****; Fe 0; S 20 1.00; 4.316265E+06 8.048803E-06; 6.463424E+05 6.258306E-05; 1.470897E+05 3.290239E-04; 4.166152E+04 1.387355E-03; 1.359077E+04 5.023256E-03; 4.905750E+03 1.610140E-02; 1.912746E+03 4.590034E-02; 7.926043E+02 1.136154E-01; 3.448065E+02 2.283869E-01; 1.558999E+02 3.221159E-01; 7.223091E+01 2.383661E-01; 3.272506E+01 7.404667E-02; 1.566762E+01 9.214197E-02; 7.503483E+00 9.339790E-02; 3.312223E+00 1.573965E-02; 1.558471E+00 -4.186682E-04; 6.839140E-01 5.376318E-05; 1.467570E-01 -3.816654E-05; 7.058300E-02 4.319603E-05; 3.144900E-02 -3.401019E-06; S 20 1.00; 4.316265E+06 -4.155954E-06; 6.463424E+05 -3.231401E-05; 1.470897E+05 -1.699525E-04; 4.166152E+04 -7.171369E-04; 1.359077E+04 -2.603625E-03; 4.905750E+03 -8.399109E-03; 1.912746E+03 -2.434109E-02; 7.926043E+02 -6.251948E-02; 3.448065E+02 -1.365929E-01; 1.558999E+02 -2.312707E-01; 7.223091E+01 -2.383734E-01; 3.272506E+01 3.123837E-02; 1.566762E+01 5.086818E-01; 7.503483E+00 4.987695E-01; 3.312223E+00 9.033552E-02; 1.558471E+00 -6.005337E-03; 6.839140E-01 2.312454E-04; 1.467570E-01 -5.643680E-04; 7.058300E-02 4.992260E-04; 3.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/899
https://github.com/psi4/psi4/issues/899:6419,Energy Efficiency,energy,energy,6419,1; 7.108450E-01 2.850510E-01; 2.731900E-01 4.614400E-02; 1.042330E-01 -3.249000E-03; 3.829100E-02 1.357000E-03; P 16 1.00; 1.774569E+04 3.000000E-06; 4.200721E+03 2.900000E-05; 1.364429E+03 1.650000E-04; 5.220806E+02 7.340000E-04; 2.214595E+02 2.626000E-03; 1.009096E+02 7.725000E-03; 4.840115E+01 1.773300E-02; 2.398536E+01 3.005500E-02; 1.218250E+01 3.109400E-02; 6.242298E+00 -1.004800E-02; 3.110944E+00 -8.830600E-02; 1.509958E+00 -1.298240E-01; 7.108450E-01 -7.693700E-02; 2.731900E-01 2.126610E-01; 1.042330E-01 5.730610E-01; 3.829100E-02 3.696510E-01; P 16 1.00; 1.774569E+04 5.000000E-06; 4.200721E+03 4.200000E-05; 1.364429E+03 2.410000E-04; 5.220806E+02 1.085000E-03; 2.214595E+02 3.831000E-03; 1.009096E+02 1.142300E-02; 4.840115E+01 2.579200E-02; 2.398536E+01 4.481800E-02; 1.218250E+01 4.459800E-02; 6.242298E+00 -1.117700E-02; 3.110944E+00 -1.381340E-01; 1.509958E+00 -1.882850E-01; 7.108450E-01 -1.073990E-01; 2.731900E-01 4.448630E-01; 1.042330E-01 6.402390E-01; 3.829100E-02 6.445700E-02; P 1 1.00; 3.829100E-02 1.000000E+00; D 8 1.00; 1.133440E+02 3.530000E-03; 3.364140E+01 2.578400E-02; 1.233100E+01 9.911900E-02; 4.994780E+00 2.390730E-01; 2.072800E+00 3.571990E-01; 8.307530E-01 3.621880E-01; 3.091780E-01 2.364610E-01; 1.001300E-01 6.011800E-02; D 8 1.00; 1.133440E+02 -3.890000E-03; 3.364140E+01 -2.844200E-02; 1.233100E+01 -1.124290E-01; 4.994780E+00 -2.742570E-01; 2.072800E+00 -3.155460E-01; 8.307530E-01 5.710900E-02; 3.091780E-01 5.636040E-01; 1.001300E-01 3.846370E-01; D 1 1.00; 1.001300E-01 1.000000E+00; F 2 1.00; 3.224300E+00 4.222490E-01; 7.758000E-01 7.714680E-01; ****; H 0; S 3 1.00; 13.0100000 0.0196850; 1.9620000 0.1379770; 0.4446000 0.4781480; S 1 1.00; 0.1220000 1.0000000; P 1 1.00; 0.7270000 1.0000000; ****; }. set basis mine2; set basis_relativistic mine2. set scf df_scf_guess false; set scf guess gwh; set ccenergy r_convergence 10; energy('scf'). clean(). basis{; assign Fe cc-pwcvtz-dk; assign H cc-pvtz-dk; }. set scf guess read; energy('cc2'); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/899
https://github.com/psi4/psi4/issues/899:6519,Energy Efficiency,energy,energy,6519,1; 7.108450E-01 2.850510E-01; 2.731900E-01 4.614400E-02; 1.042330E-01 -3.249000E-03; 3.829100E-02 1.357000E-03; P 16 1.00; 1.774569E+04 3.000000E-06; 4.200721E+03 2.900000E-05; 1.364429E+03 1.650000E-04; 5.220806E+02 7.340000E-04; 2.214595E+02 2.626000E-03; 1.009096E+02 7.725000E-03; 4.840115E+01 1.773300E-02; 2.398536E+01 3.005500E-02; 1.218250E+01 3.109400E-02; 6.242298E+00 -1.004800E-02; 3.110944E+00 -8.830600E-02; 1.509958E+00 -1.298240E-01; 7.108450E-01 -7.693700E-02; 2.731900E-01 2.126610E-01; 1.042330E-01 5.730610E-01; 3.829100E-02 3.696510E-01; P 16 1.00; 1.774569E+04 5.000000E-06; 4.200721E+03 4.200000E-05; 1.364429E+03 2.410000E-04; 5.220806E+02 1.085000E-03; 2.214595E+02 3.831000E-03; 1.009096E+02 1.142300E-02; 4.840115E+01 2.579200E-02; 2.398536E+01 4.481800E-02; 1.218250E+01 4.459800E-02; 6.242298E+00 -1.117700E-02; 3.110944E+00 -1.381340E-01; 1.509958E+00 -1.882850E-01; 7.108450E-01 -1.073990E-01; 2.731900E-01 4.448630E-01; 1.042330E-01 6.402390E-01; 3.829100E-02 6.445700E-02; P 1 1.00; 3.829100E-02 1.000000E+00; D 8 1.00; 1.133440E+02 3.530000E-03; 3.364140E+01 2.578400E-02; 1.233100E+01 9.911900E-02; 4.994780E+00 2.390730E-01; 2.072800E+00 3.571990E-01; 8.307530E-01 3.621880E-01; 3.091780E-01 2.364610E-01; 1.001300E-01 6.011800E-02; D 8 1.00; 1.133440E+02 -3.890000E-03; 3.364140E+01 -2.844200E-02; 1.233100E+01 -1.124290E-01; 4.994780E+00 -2.742570E-01; 2.072800E+00 -3.155460E-01; 8.307530E-01 5.710900E-02; 3.091780E-01 5.636040E-01; 1.001300E-01 3.846370E-01; D 1 1.00; 1.001300E-01 1.000000E+00; F 2 1.00; 3.224300E+00 4.222490E-01; 7.758000E-01 7.714680E-01; ****; H 0; S 3 1.00; 13.0100000 0.0196850; 1.9620000 0.1379770; 0.4446000 0.4781480; S 1 1.00; 0.1220000 1.0000000; P 1 1.00; 0.7270000 1.0000000; ****; }. set basis mine2; set basis_relativistic mine2. set scf df_scf_guess false; set scf guess gwh; set ccenergy r_convergence 10; energy('scf'). clean(). basis{; assign Fe cc-pwcvtz-dk; assign H cc-pvtz-dk; }. set scf guess read; energy('cc2'); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/899
https://github.com/psi4/psi4/issues/899:633,Usability,simpl,simpler,633,"http://forum.psicode.org/t/scf-problems-please-help/765/14. ```; First ROHF (DZ):; Computing 2-order Douglas-Kroll-Hess integrals.; Adding Douglas-Kroll-Hess corrections to the potential integrals.; …; @ROHF Final Energy: -1271.85284181863290. Second ROHF (pwCVTZ):; Computing 2-order Douglas-Kroll-Hess integrals.; Adding Douglas-Kroll-Hess corrections to the potential integrals.; …; SCF Guess: Orbitals guess was supplied from a previous computation.; @ROHF Final Energy: -1267.93014988281766; ```. Even though converged docc and socc are the same, we get a difference of 4 Hartrees in the initial versus final ROHF. . Below is a simpler input that shows the problem. ```; molecule {; 0 4; Fe; H 1 1.566665; }. set {; reference rohf; docc [7, 0, 3, 2]; socc [1, 1, 0, 1]; scf_type pk; relativistic dkh; dkh_order 2; print_mos true; maxiter=500; freeze_core false; }. basis mine2{; spherical; ****; Fe 0; S 20 1.00; 4.316265E+06 8.048803E-06; 6.463424E+05 6.258306E-05; 1.470897E+05 3.290239E-04; 4.166152E+04 1.387355E-03; 1.359077E+04 5.023256E-03; 4.905750E+03 1.610140E-02; 1.912746E+03 4.590034E-02; 7.926043E+02 1.136154E-01; 3.448065E+02 2.283869E-01; 1.558999E+02 3.221159E-01; 7.223091E+01 2.383661E-01; 3.272506E+01 7.404667E-02; 1.566762E+01 9.214197E-02; 7.503483E+00 9.339790E-02; 3.312223E+00 1.573965E-02; 1.558471E+00 -4.186682E-04; 6.839140E-01 5.376318E-05; 1.467570E-01 -3.816654E-05; 7.058300E-02 4.319603E-05; 3.144900E-02 -3.401019E-06; S 20 1.00; 4.316265E+06 -4.155954E-06; 6.463424E+05 -3.231401E-05; 1.470897E+05 -1.699525E-04; 4.166152E+04 -7.171369E-04; 1.359077E+04 -2.603625E-03; 4.905750E+03 -8.399109E-03; 1.912746E+03 -2.434109E-02; 7.926043E+02 -6.251948E-02; 3.448065E+02 -1.365929E-01; 1.558999E+02 -2.312707E-01; 7.223091E+01 -2.383734E-01; 3.272506E+01 3.123837E-02; 1.566762E+01 5.086818E-01; 7.503483E+00 4.987695E-01; 3.312223E+00 9.033552E-02; 1.558471E+00 -6.005337E-03; 6.839140E-01 2.312454E-04; 1.467570E-01 -5.643680E-04; 7.058300E-02 4.992260E-04; 3.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/899
https://github.com/psi4/psi4/issues/900:429,Energy Efficiency,energy,energy,429,"Running a cam-b3lyp calculation with ghost atoms leads to severe scf problems. ```; molecule wat {; @O -0.031788188689 -0.057762343755 -2.500000000000; @H -0.415040188689 0.819260656245 -2.500000000000; @H 0.919541811311 0.097469656245 -2.500000000000; O -0.031788188689 -0.057762343755 2.500000000000; H -0.415040188689 0.819260656245 2.500000000000; H 0.919541811311 0.097469656245 2.500000000000; }. set {; basis def2-SVP; }; energy('cam-b3lyp'); ```. Gives:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -76.28416922601539 -7.62842e+01 3.25937e-02 ; @DF-RKS iter 1: 42.90914490853778 1.19193e+02 1.57477e-01 ; @DF-RKS iter 2: -67.59424772229025 -1.10503e+02 6.97022e-02 DIIS; @DF-RKS iter 3: -5.92023271767882 6.16740e+01 1.67018e-01 DIIS; @DF-RKS iter 4: -25.53109522421165 -1.96109e+01 1.22988e-01 DIIS; @DF-RKS iter 5: -6.43807826871483 1.90930e+01 1.58323e-01 DIIS; @DF-RKS iter 6: 29.17875295082399 3.56168e+01 1.24341e-01 DIIS; @DF-RKS iter 7: 29.14675833982615 -3.19946e-02 1.24329e-01 DIIS; @DF-RKS iter 8: 29.14518341499436 -1.57492e-03 1.24344e-01 DIIS; @DF-RKS iter 9: 29.15167484147237 6.49143e-03 1.24371e-01 DIIS; @DF-RKS iter 10: -25.72021965887588 -5.48719e+01 1.20627e-01 DIIS; @DF-RKS iter 11: -25.72793758296909 -7.71792e-03 1.20619e-01 DIIS; @DF-RKS iter 12: -26.38471390876281 -6.56776e-01 1.23180e-01 DIIS; @DF-RKS iter 13: -6.54455688045927 1.98402e+01 1.57065e-01 DIIS. ```. Other LRC functionals like `lrc-wpbe` seem to work fine. . The first energy is in the correct ballpark, so I guess something is wrong with the potential. But how would ghost atoms come into play? And why seemingly just for CAM-style?. -----. edit:; seemingly working ""LC"" versions:; LRC-wPBE; CAMY-B3LYP ; LCY-BLYP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/900
https://github.com/psi4/psi4/issues/900:494,Energy Efficiency,Energy,Energy,494,"Running a cam-b3lyp calculation with ghost atoms leads to severe scf problems. ```; molecule wat {; @O -0.031788188689 -0.057762343755 -2.500000000000; @H -0.415040188689 0.819260656245 -2.500000000000; @H 0.919541811311 0.097469656245 -2.500000000000; O -0.031788188689 -0.057762343755 2.500000000000; H -0.415040188689 0.819260656245 2.500000000000; H 0.919541811311 0.097469656245 2.500000000000; }. set {; basis def2-SVP; }; energy('cam-b3lyp'); ```. Gives:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -76.28416922601539 -7.62842e+01 3.25937e-02 ; @DF-RKS iter 1: 42.90914490853778 1.19193e+02 1.57477e-01 ; @DF-RKS iter 2: -67.59424772229025 -1.10503e+02 6.97022e-02 DIIS; @DF-RKS iter 3: -5.92023271767882 6.16740e+01 1.67018e-01 DIIS; @DF-RKS iter 4: -25.53109522421165 -1.96109e+01 1.22988e-01 DIIS; @DF-RKS iter 5: -6.43807826871483 1.90930e+01 1.58323e-01 DIIS; @DF-RKS iter 6: 29.17875295082399 3.56168e+01 1.24341e-01 DIIS; @DF-RKS iter 7: 29.14675833982615 -3.19946e-02 1.24329e-01 DIIS; @DF-RKS iter 8: 29.14518341499436 -1.57492e-03 1.24344e-01 DIIS; @DF-RKS iter 9: 29.15167484147237 6.49143e-03 1.24371e-01 DIIS; @DF-RKS iter 10: -25.72021965887588 -5.48719e+01 1.20627e-01 DIIS; @DF-RKS iter 11: -25.72793758296909 -7.71792e-03 1.20619e-01 DIIS; @DF-RKS iter 12: -26.38471390876281 -6.56776e-01 1.23180e-01 DIIS; @DF-RKS iter 13: -6.54455688045927 1.98402e+01 1.57065e-01 DIIS. ```. Other LRC functionals like `lrc-wpbe` seem to work fine. . The first energy is in the correct ballpark, so I guess something is wrong with the potential. But how would ghost atoms come into play? And why seemingly just for CAM-style?. -----. edit:; seemingly working ""LC"" versions:; LRC-wPBE; CAMY-B3LYP ; LCY-BLYP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/900
https://github.com/psi4/psi4/issues/900:1502,Energy Efficiency,energy,energy,1502,"Running a cam-b3lyp calculation with ghost atoms leads to severe scf problems. ```; molecule wat {; @O -0.031788188689 -0.057762343755 -2.500000000000; @H -0.415040188689 0.819260656245 -2.500000000000; @H 0.919541811311 0.097469656245 -2.500000000000; O -0.031788188689 -0.057762343755 2.500000000000; H -0.415040188689 0.819260656245 2.500000000000; H 0.919541811311 0.097469656245 2.500000000000; }. set {; basis def2-SVP; }; energy('cam-b3lyp'); ```. Gives:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -76.28416922601539 -7.62842e+01 3.25937e-02 ; @DF-RKS iter 1: 42.90914490853778 1.19193e+02 1.57477e-01 ; @DF-RKS iter 2: -67.59424772229025 -1.10503e+02 6.97022e-02 DIIS; @DF-RKS iter 3: -5.92023271767882 6.16740e+01 1.67018e-01 DIIS; @DF-RKS iter 4: -25.53109522421165 -1.96109e+01 1.22988e-01 DIIS; @DF-RKS iter 5: -6.43807826871483 1.90930e+01 1.58323e-01 DIIS; @DF-RKS iter 6: 29.17875295082399 3.56168e+01 1.24341e-01 DIIS; @DF-RKS iter 7: 29.14675833982615 -3.19946e-02 1.24329e-01 DIIS; @DF-RKS iter 8: 29.14518341499436 -1.57492e-03 1.24344e-01 DIIS; @DF-RKS iter 9: 29.15167484147237 6.49143e-03 1.24371e-01 DIIS; @DF-RKS iter 10: -25.72021965887588 -5.48719e+01 1.20627e-01 DIIS; @DF-RKS iter 11: -25.72793758296909 -7.71792e-03 1.20619e-01 DIIS; @DF-RKS iter 12: -26.38471390876281 -6.56776e-01 1.23180e-01 DIIS; @DF-RKS iter 13: -6.54455688045927 1.98402e+01 1.57065e-01 DIIS. ```. Other LRC functionals like `lrc-wpbe` seem to work fine. . The first energy is in the correct ballpark, so I guess something is wrong with the potential. But how would ghost atoms come into play? And why seemingly just for CAM-style?. -----. edit:; seemingly working ""LC"" versions:; LRC-wPBE; CAMY-B3LYP ; LCY-BLYP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/900
https://github.com/psi4/psi4/issues/901:467,Energy Efficiency,energy,energy,467,"While trying to reproduce some gaussian calculations with psi4, I noticed that the frequencies dependent on the dertype setting to a larger extend than anticipated: ; ```; molecule h2o {; units angstrom; H 0.000000 0.760300 -0.196100; O 0.000000 0.000000 0.392200; H 0.000000 -0.760300 -0.196100; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. optimize('scf', molecule=h2o). scf_e, scf_wfn = frequencies('scf', dertype='energy', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='gradient', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; This generated the following frequencies:; ```; $ grep -A 3 'Vib. Freq' 'hf-6-311Gstarstar-freq.out'; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.943 2519.214; 2 4142.104 5959.557; 3 4237.400 6096.666; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.925 2519.188; 2 4142.111 5959.567; 3 4237.427 6096.704; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; For reference these are the gaussian g09 frequencies:; ```; Frequencies -- 1750.9454 4142.1029 4237.3716; ```. I am using:; ```; $ rpm -qif /usr/bin/psi4 | egrep '^Version|^Source'; Version : 1.1; Source RPM : psi4-1.1-2.add49b9git.fc26.src.rpm; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/901
https://github.com/psi4/psi4/issues/901:95,Integrability,depend,dependent,95,"While trying to reproduce some gaussian calculations with psi4, I noticed that the frequencies dependent on the dertype setting to a larger extend than anticipated: ; ```; molecule h2o {; units angstrom; H 0.000000 0.760300 -0.196100; O 0.000000 0.000000 0.392200; H 0.000000 -0.760300 -0.196100; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. optimize('scf', molecule=h2o). scf_e, scf_wfn = frequencies('scf', dertype='energy', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='gradient', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; This generated the following frequencies:; ```; $ grep -A 3 'Vib. Freq' 'hf-6-311Gstarstar-freq.out'; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.943 2519.214; 2 4142.104 5959.557; 3 4237.400 6096.666; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.925 2519.188; 2 4142.111 5959.567; 3 4237.427 6096.704; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; For reference these are the gaussian g09 frequencies:; ```; Frequencies -- 1750.9454 4142.1029 4237.3716; ```. I am using:; ```; $ rpm -qif /usr/bin/psi4 | egrep '^Version|^Source'; Version : 1.1; Source RPM : psi4-1.1-2.add49b9git.fc26.src.rpm; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/901
https://github.com/psi4/psi4/issues/901:140,Modifiability,extend,extend,140,"While trying to reproduce some gaussian calculations with psi4, I noticed that the frequencies dependent on the dertype setting to a larger extend than anticipated: ; ```; molecule h2o {; units angstrom; H 0.000000 0.760300 -0.196100; O 0.000000 0.000000 0.392200; H 0.000000 -0.760300 -0.196100; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. optimize('scf', molecule=h2o). scf_e, scf_wfn = frequencies('scf', dertype='energy', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='gradient', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; This generated the following frequencies:; ```; $ grep -A 3 'Vib. Freq' 'hf-6-311Gstarstar-freq.out'; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.943 2519.214; 2 4142.104 5959.557; 3 4237.400 6096.666; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.925 2519.188; 2 4142.111 5959.567; 3 4237.427 6096.704; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; For reference these are the gaussian g09 frequencies:; ```; Frequencies -- 1750.9454 4142.1029 4237.3716; ```. I am using:; ```; $ rpm -qif /usr/bin/psi4 | egrep '^Version|^Source'; Version : 1.1; Source RPM : psi4-1.1-2.add49b9git.fc26.src.rpm; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/901
https://github.com/psi4/psi4/issues/901:391,Performance,optimiz,optimize,391,"While trying to reproduce some gaussian calculations with psi4, I noticed that the frequencies dependent on the dertype setting to a larger extend than anticipated: ; ```; molecule h2o {; units angstrom; H 0.000000 0.760300 -0.196100; O 0.000000 0.000000 0.392200; H 0.000000 -0.760300 -0.196100; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. optimize('scf', molecule=h2o). scf_e, scf_wfn = frequencies('scf', dertype='energy', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='gradient', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; This generated the following frequencies:; ```; $ grep -A 3 'Vib. Freq' 'hf-6-311Gstarstar-freq.out'; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.943 2519.214; 2 4142.104 5959.557; 3 4237.400 6096.666; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.925 2519.188; 2 4142.111 5959.567; 3 4237.427 6096.704; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; For reference these are the gaussian g09 frequencies:; ```; Frequencies -- 1750.9454 4142.1029 4237.3716; ```. I am using:; ```; $ rpm -qif /usr/bin/psi4 | egrep '^Version|^Source'; Version : 1.1; Source RPM : psi4-1.1-2.add49b9git.fc26.src.rpm; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/901
https://github.com/psi4/psi4/pull/902:106,Security,access,accessed,106,"## Description; The CC2/CCSD static polarizability values i.e when omega = 0 ev or Inf nm can be properly accessed now. Ex for CC2: ``psi4.get_variable(""CC2 DIPOLE POLARIZABILITY @ INF NM"")``. Right now, the tag is erroneously set to ``""...POLARIZABILITY @ 0NM""`` for such cases. So, this is a very minor bug.; ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/902
https://github.com/psi4/psi4/pull/903:73,Availability,error,errors,73,"## Description; A typo in the overlap integral second derivatives caused errors in the analytic hessians. The error seems to be confined to one of the three contributions to matrix elements where the angular momentum in the bra and ket differ, and only when the derivatives both refer to the same perturbation; which is why the code made it through the initial tests. I'm still trying to wrap my head around exactly why those tests work, so I'd like a day or two before this is ready to merge. My sincere apologies to all whom this bug inconvenienced. Fixes #791 and #901. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [ ] Fixed a bug in the analytic Hessian code. ## Questions; - [x] Which extra tests do you have in mind, @loriab?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/903
https://github.com/psi4/psi4/pull/903:110,Availability,error,error,110,"## Description; A typo in the overlap integral second derivatives caused errors in the analytic hessians. The error seems to be confined to one of the three contributions to matrix elements where the angular momentum in the bra and ket differ, and only when the derivatives both refer to the same perturbation; which is why the code made it through the initial tests. I'm still trying to wrap my head around exactly why those tests work, so I'd like a day or two before this is ready to merge. My sincere apologies to all whom this bug inconvenienced. Fixes #791 and #901. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [ ] Fixed a bug in the analytic Hessian code. ## Questions; - [x] Which extra tests do you have in mind, @loriab?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/903
https://github.com/psi4/psi4/pull/903:675,Deployability,Release,Release,675,"## Description; A typo in the overlap integral second derivatives caused errors in the analytic hessians. The error seems to be confined to one of the three contributions to matrix elements where the angular momentum in the bra and ket differ, and only when the derivatives both refer to the same perturbation; which is why the code made it through the initial tests. I'm still trying to wrap my head around exactly why those tests work, so I'd like a day or two before this is ready to merge. My sincere apologies to all whom this bug inconvenienced. Fixes #791 and #901. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [ ] Fixed a bug in the analytic Hessian code. ## Questions; - [x] Which extra tests do you have in mind, @loriab?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/903
https://github.com/psi4/psi4/pull/903:388,Integrability,wrap,wrap,388,"## Description; A typo in the overlap integral second derivatives caused errors in the analytic hessians. The error seems to be confined to one of the three contributions to matrix elements where the angular momentum in the bra and ket differ, and only when the derivatives both refer to the same perturbation; which is why the code made it through the initial tests. I'm still trying to wrap my head around exactly why those tests work, so I'd like a day or two before this is ready to merge. My sincere apologies to all whom this bug inconvenienced. Fixes #791 and #901. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [ ] Fixed a bug in the analytic Hessian code. ## Questions; - [x] Which extra tests do you have in mind, @loriab?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/903
https://github.com/psi4/psi4/pull/903:361,Testability,test,tests,361,"## Description; A typo in the overlap integral second derivatives caused errors in the analytic hessians. The error seems to be confined to one of the three contributions to matrix elements where the angular momentum in the bra and ket differ, and only when the derivatives both refer to the same perturbation; which is why the code made it through the initial tests. I'm still trying to wrap my head around exactly why those tests work, so I'd like a day or two before this is ready to merge. My sincere apologies to all whom this bug inconvenienced. Fixes #791 and #901. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [ ] Fixed a bug in the analytic Hessian code. ## Questions; - [x] Which extra tests do you have in mind, @loriab?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/903
https://github.com/psi4/psi4/pull/903:426,Testability,test,tests,426,"## Description; A typo in the overlap integral second derivatives caused errors in the analytic hessians. The error seems to be confined to one of the three contributions to matrix elements where the angular momentum in the bra and ket differ, and only when the derivatives both refer to the same perturbation; which is why the code made it through the initial tests. I'm still trying to wrap my head around exactly why those tests work, so I'd like a day or two before this is ready to merge. My sincere apologies to all whom this bug inconvenienced. Fixes #791 and #901. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [ ] Fixed a bug in the analytic Hessian code. ## Questions; - [x] Which extra tests do you have in mind, @loriab?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/903
https://github.com/psi4/psi4/pull/903:772,Testability,test,tests,772,"## Description; A typo in the overlap integral second derivatives caused errors in the analytic hessians. The error seems to be confined to one of the three contributions to matrix elements where the angular momentum in the bra and ket differ, and only when the derivatives both refer to the same perturbation; which is why the code made it through the initial tests. I'm still trying to wrap my head around exactly why those tests work, so I'd like a day or two before this is ready to merge. My sincere apologies to all whom this bug inconvenienced. Fixes #791 and #901. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [ ] Fixed a bug in the analytic Hessian code. ## Questions; - [x] Which extra tests do you have in mind, @loriab?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/903
https://github.com/psi4/psi4/pull/904:607,Availability,avail,available,607,"## Description; Added and tested the following functionals. For the last two, unfortunately no bench value is provided.; ```; Functional: libxc : rob qchem; Comparison SOGGA11: -76.3720792686 : nan 3.84e-05 ; Comparison SOGGA11-X: -76.3569745367 : nan 1.10e-05 ; Comparison M06-L: -76.3766432198 : nan 1.95e-06 ; Comparison MN12-L: -76.3109178757 : nan 3.84e-05 ; Comparison MN15-L: -76.3001901669 : nan 5.49e-06 ; Comparison MN15: -76.3017521834 : nan nan ; Comparison PBE0-DH: -76.1613318950 : nan nan ; ```. Added worker functions for SCAN family of functionals, however without XC_MGGA_C_SCAN (which is available in LibXC 3.0.1) they won't work - commented out. See http://forum.psicode.org/t/libxc-density-functionals/589/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/904
https://github.com/psi4/psi4/pull/904:26,Testability,test,tested,26,"## Description; Added and tested the following functionals. For the last two, unfortunately no bench value is provided.; ```; Functional: libxc : rob qchem; Comparison SOGGA11: -76.3720792686 : nan 3.84e-05 ; Comparison SOGGA11-X: -76.3569745367 : nan 1.10e-05 ; Comparison M06-L: -76.3766432198 : nan 1.95e-06 ; Comparison MN12-L: -76.3109178757 : nan 3.84e-05 ; Comparison MN15-L: -76.3001901669 : nan 5.49e-06 ; Comparison MN15: -76.3017521834 : nan nan ; Comparison PBE0-DH: -76.1613318950 : nan nan ; ```. Added worker functions for SCAN family of functionals, however without XC_MGGA_C_SCAN (which is available in LibXC 3.0.1) they won't work - commented out. See http://forum.psicode.org/t/libxc-density-functionals/589/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/904
https://github.com/psi4/psi4/issues/905:509,Deployability,Release,Release,509,"Hi everyone,. I newly compiled Psi4 Rev {master} d7d117e pulled from the latest Master, with Intel MKL 2018.1.163 and GNU compilers version 5.4.0. I used the following cmake options to try to get most of the optional modules and get CheMPS2 interprocedural optimization to work:; cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib. Everything configures and builds like a charm, then all tests run except those that seem to end with a segfault shortly before the 2-RDM computation starts:; 401 - v2rdm_casscf-v2rdm1 (Failed); 402 - v2rdm_casscf-v2rdm2 (Failed); 403 - v2rdm_casscf-v2rdm3 (Failed); 404 - v2rdm_casscf-v2rdm4 (Failed); 405 - v2rdm_casscf-v2rdm5 (Failed); 406 - v2rdm_casscf-v2rdm6 (Failed). make pytest shows all non-skipped tests passed. I also see ; 363 - dft-custom-hybrid (Failed); but this one is because the GCP software is not installed so I guess the test should have been skipped in this case. I don't actually need to run 2-RDM computations but I thought I should let you know.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/905
https://github.com/psi4/psi4/issues/905:1097,Deployability,install,installed,1097,"Hi everyone,. I newly compiled Psi4 Rev {master} d7d117e pulled from the latest Master, with Intel MKL 2018.1.163 and GNU compilers version 5.4.0. I used the following cmake options to try to get most of the optional modules and get CheMPS2 interprocedural optimization to work:; cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib. Everything configures and builds like a charm, then all tests run except those that seem to end with a segfault shortly before the 2-RDM computation starts:; 401 - v2rdm_casscf-v2rdm1 (Failed); 402 - v2rdm_casscf-v2rdm2 (Failed); 403 - v2rdm_casscf-v2rdm3 (Failed); 404 - v2rdm_casscf-v2rdm4 (Failed); 405 - v2rdm_casscf-v2rdm5 (Failed); 406 - v2rdm_casscf-v2rdm6 (Failed). make pytest shows all non-skipped tests passed. I also see ; 363 - dft-custom-hybrid (Failed); but this one is because the GCP software is not installed so I guess the test should have been skipped in this case. I don't actually need to run 2-RDM computations but I thought I should let you know.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/905
https://github.com/psi4/psi4/issues/905:591,Modifiability,config,configures,591,"Hi everyone,. I newly compiled Psi4 Rev {master} d7d117e pulled from the latest Master, with Intel MKL 2018.1.163 and GNU compilers version 5.4.0. I used the following cmake options to try to get most of the optional modules and get CheMPS2 interprocedural optimization to work:; cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib. Everything configures and builds like a charm, then all tests run except those that seem to end with a segfault shortly before the 2-RDM computation starts:; 401 - v2rdm_casscf-v2rdm1 (Failed); 402 - v2rdm_casscf-v2rdm2 (Failed); 403 - v2rdm_casscf-v2rdm3 (Failed); 404 - v2rdm_casscf-v2rdm4 (Failed); 405 - v2rdm_casscf-v2rdm5 (Failed); 406 - v2rdm_casscf-v2rdm6 (Failed). make pytest shows all non-skipped tests passed. I also see ; 363 - dft-custom-hybrid (Failed); but this one is because the GCP software is not installed so I guess the test should have been skipped in this case. I don't actually need to run 2-RDM computations but I thought I should let you know.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/905
https://github.com/psi4/psi4/issues/905:257,Performance,optimiz,optimization,257,"Hi everyone,. I newly compiled Psi4 Rev {master} d7d117e pulled from the latest Master, with Intel MKL 2018.1.163 and GNU compilers version 5.4.0. I used the following cmake options to try to get most of the optional modules and get CheMPS2 interprocedural optimization to work:; cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib. Everything configures and builds like a charm, then all tests run except those that seem to end with a segfault shortly before the 2-RDM computation starts:; 401 - v2rdm_casscf-v2rdm1 (Failed); 402 - v2rdm_casscf-v2rdm2 (Failed); 403 - v2rdm_casscf-v2rdm3 (Failed); 404 - v2rdm_casscf-v2rdm4 (Failed); 405 - v2rdm_casscf-v2rdm5 (Failed); 406 - v2rdm_casscf-v2rdm6 (Failed). make pytest shows all non-skipped tests passed. I also see ; 363 - dft-custom-hybrid (Failed); but this one is because the GCP software is not installed so I guess the test should have been skipped in this case. I don't actually need to run 2-RDM computations but I thought I should let you know.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/905
https://github.com/psi4/psi4/issues/905:636,Testability,test,tests,636,"Hi everyone,. I newly compiled Psi4 Rev {master} d7d117e pulled from the latest Master, with Intel MKL 2018.1.163 and GNU compilers version 5.4.0. I used the following cmake options to try to get most of the optional modules and get CheMPS2 interprocedural optimization to work:; cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib. Everything configures and builds like a charm, then all tests run except those that seem to end with a segfault shortly before the 2-RDM computation starts:; 401 - v2rdm_casscf-v2rdm1 (Failed); 402 - v2rdm_casscf-v2rdm2 (Failed); 403 - v2rdm_casscf-v2rdm3 (Failed); 404 - v2rdm_casscf-v2rdm4 (Failed); 405 - v2rdm_casscf-v2rdm5 (Failed); 406 - v2rdm_casscf-v2rdm6 (Failed). make pytest shows all non-skipped tests passed. I also see ; 363 - dft-custom-hybrid (Failed); but this one is because the GCP software is not installed so I guess the test should have been skipped in this case. I don't actually need to run 2-RDM computations but I thought I should let you know.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/905
https://github.com/psi4/psi4/issues/905:988,Testability,test,tests,988,"Hi everyone,. I newly compiled Psi4 Rev {master} d7d117e pulled from the latest Master, with Intel MKL 2018.1.163 and GNU compilers version 5.4.0. I used the following cmake options to try to get most of the optional modules and get CheMPS2 interprocedural optimization to work:; cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib. Everything configures and builds like a charm, then all tests run except those that seem to end with a segfault shortly before the 2-RDM computation starts:; 401 - v2rdm_casscf-v2rdm1 (Failed); 402 - v2rdm_casscf-v2rdm2 (Failed); 403 - v2rdm_casscf-v2rdm3 (Failed); 404 - v2rdm_casscf-v2rdm4 (Failed); 405 - v2rdm_casscf-v2rdm5 (Failed); 406 - v2rdm_casscf-v2rdm6 (Failed). make pytest shows all non-skipped tests passed. I also see ; 363 - dft-custom-hybrid (Failed); but this one is because the GCP software is not installed so I guess the test should have been skipped in this case. I don't actually need to run 2-RDM computations but I thought I should let you know.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/905
https://github.com/psi4/psi4/issues/905:1122,Testability,test,test,1122,"Hi everyone,. I newly compiled Psi4 Rev {master} d7d117e pulled from the latest Master, with Intel MKL 2018.1.163 and GNU compilers version 5.4.0. I used the following cmake options to try to get most of the optional modules and get CheMPS2 interprocedural optimization to work:; cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib. Everything configures and builds like a charm, then all tests run except those that seem to end with a segfault shortly before the 2-RDM computation starts:; 401 - v2rdm_casscf-v2rdm1 (Failed); 402 - v2rdm_casscf-v2rdm2 (Failed); 403 - v2rdm_casscf-v2rdm3 (Failed); 404 - v2rdm_casscf-v2rdm4 (Failed); 405 - v2rdm_casscf-v2rdm5 (Failed); 406 - v2rdm_casscf-v2rdm6 (Failed). make pytest shows all non-skipped tests passed. I also see ; 363 - dft-custom-hybrid (Failed); but this one is because the GCP software is not installed so I guess the test should have been skipped in this case. I don't actually need to run 2-RDM computations but I thought I should let you know.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/905
https://github.com/psi4/psi4/issues/907:780,Energy Efficiency,energy,energy,780,"The manual states that when NO_RESPONSE option is set, SAPT0 should print a warning that uncoupled induction is computed. There is no such warning and the final printing contains Ind20,r which seems to imply response. I can probably do the necessary changes but I create the issue so it does not get forgotten. Example input:. ```; import psi4; psi4.set_output_file(""output_ref.dat""); water_dimer = psi4.geometry(""""""; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; units angstrom; no_com; no_reorient; symmetry c1; """"""). psi4.set_options({""BASIS"" : ""cc-pVDZ"",; ""SCF_TYPE"": ""DF"",; ""SAVE_JK"" : True,; ""NO_RESPONSE"" : True,; }). psi4.energy('sapt0'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/907
https://github.com/psi4/psi4/pull/908:426,Deployability,Release,Release,426,"## Description; When requesting uncoupled induction in RHF-based SAPT0, the final summary still printed Ind20,r instead of Ind20,u as the line title, and no warning was issued about the uncoupled induction stored in the Psi4 variable for coupled induction, contrary to what is happening for open-shell SAPT0.; Solves #907. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Correct printing of titles and warning for uncoupled induction in RHF-based SAPT0. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/908
https://github.com/psi4/psi4/pull/908:225,Modifiability,variab,variable,225,"## Description; When requesting uncoupled induction in RHF-based SAPT0, the final summary still printed Ind20,r instead of Ind20,u as the line title, and no warning was issued about the uncoupled induction stored in the Psi4 variable for coupled induction, contrary to what is happening for open-shell SAPT0.; Solves #907. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Correct printing of titles and warning for uncoupled induction in RHF-based SAPT0. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/908
https://github.com/psi4/psi4/issues/909:261,Safety,avoid,avoid,261,"This is an issue I came across when needing to calculate the molecular weight of a molecule (which I was surprised is not already part of the Molecule class). . Currently, ghost atoms still return a mass when calling `mol.mass(i)`. The best way I have found to avoid this on the Python side is to check the Z value `if mol.Z():` because ghost atoms (correctly) return false here. `optrot.cc` does not do this correctly and so uses an incorrect molecular weight for molecules with ghost atoms, and there may be more codes that have this issue. I thought it may be better to fix `mass()` rather than try to find every single code which calculates a molecular weight and add in the Z value check. I feel ghost atoms should not have any mass in the first place, as they are usually just coordinates on which to place basis functions corresponding to the atom. I can't think of any places where you would want the mass of a ghosted atom, so please correct me if I'm mistaken. . Within `masses.h`, a note is found:; ```; ** 10/08/99 EFV - Changed an2masses[0] to 0.0000; ** (ghost atom's weight should be 0); ```; But in `molecule.cc` the an2masses list is only used if `atoms_[atom]->mass() != 0` returns false, which will not happen for ghost atoms as they are currently done. Instead, it should probably be checked first `if atoms_[atom]->Z() == 0` and return a zero mass. (I thought this was better than pushing the Z == 0 case into the else statement, because doing that throws a _lot_ of warnings at the user). This is an easy fix, but as this effects the molecule class I wanted to check some other opinions before opening my PR. There also may be a more fundamental place to fix this problem, such as when the `atoms_` list is generated, but I wasn't sure.; @amjames",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/909
https://github.com/psi4/psi4/issues/910:136,Usability,simpl,simple,136,"The summary output of the SAPT(DFT) module correctly converts to mH and kcal/mol, but does not convert to kJ/mol. . The fix seems to be simple: In the file lib/psi4/driver/procrouting/sapt/sapt_util.py; change the third conversion constant to constants.hartree2kJmol.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/910
https://github.com/psi4/psi4/issues/911:326,Availability,error,error,326,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/911
https://github.com/psi4/psi4/issues/911:1336,Availability,error,error,1336,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/911
https://github.com/psi4/psi4/issues/911:649,Deployability,install,install,649,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/911
https://github.com/psi4/psi4/issues/911:777,Deployability,install,install,777,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/911
https://github.com/psi4/psi4/issues/911:946,Deployability,install,install,946,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/911
https://github.com/psi4/psi4/issues/911:1134,Deployability,install,install,1134,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/911
https://github.com/psi4/psi4/issues/911:835,Energy Efficiency,energy,energy,835,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/911
https://github.com/psi4/psi4/issues/911:861,Energy Efficiency,energy,energy,861,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/911
https://github.com/psi4/psi4/issues/911:332,Integrability,message,message,332,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/911
https://github.com/psi4/psi4/issues/911:1038,Performance,cache,cache,1038,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/911
https://github.com/psi4/psi4/issues/911:1237,Performance,cache,cache,1237,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/911
https://github.com/psi4/psi4/issues/911:1607,Testability,test,testing,1607,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/911
https://github.com/psi4/psi4/issues/911:1619,Testability,benchmark,benchmarking,1619,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/911
https://github.com/psi4/psi4/pull/912:112,Safety,avoid,avoid,112,## Description; The IWL integrals are calculated but apparently not needed for DF-DCFT. Added IF/ELSE clause to avoid this. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/912
https://github.com/psi4/psi4/pull/913:999,Integrability,Contract,Contracts,999,"## Description; Furthers the generality of integral transformations and enables a special workflow, `DIRECT_iaQ`, to alleviate disk IO when transforming to `pqQ` forms. Timings comparing the `DIRECT_iaQ` and `DIRECT` methods are inbound. Edit: Here are some tests that (almost comically) display the efficacy of `DIRECT_iaQ` over `DIRECT` + `pqQ`. 1. Test1: ; [input.txt](https://github.com/psi4/psi4/files/1740970/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740977/timer.txt). 2. Test2: ; [input.txt](https://github.com/psi4/psi4/files/1740966/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740974/timer.txt). Notice the difference between the `DFH: MO to disk` timers. . Edit2: I added a reduction on `max_val` in `prepare_sparsity` to ensure thread safety. This was incorrect before. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - DF_Helper now has three methods for integral transformations:; `STORE`: Contracts metric with AO integrals, stores, then transforms.; `DIRECT`: Transforms integrals, contracts with metric.; `DIRECT_iaQ`: Optimized `DIRECT` workflow when using `pqQ` transformed integrals. - DF_Helper outputs any transformed integral form you want: `Qpq`, `pQq`, or `pqQ`. The following can be used for each of the respective methods listed above:; `STORE`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT_iaQ`: `pqQ`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/913
https://github.com/psi4/psi4/pull/913:1093,Integrability,contract,contracts,1093,"## Description; Furthers the generality of integral transformations and enables a special workflow, `DIRECT_iaQ`, to alleviate disk IO when transforming to `pqQ` forms. Timings comparing the `DIRECT_iaQ` and `DIRECT` methods are inbound. Edit: Here are some tests that (almost comically) display the efficacy of `DIRECT_iaQ` over `DIRECT` + `pqQ`. 1. Test1: ; [input.txt](https://github.com/psi4/psi4/files/1740970/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740977/timer.txt). 2. Test2: ; [input.txt](https://github.com/psi4/psi4/files/1740966/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740974/timer.txt). Notice the difference between the `DFH: MO to disk` timers. . Edit2: I added a reduction on `max_val` in `prepare_sparsity` to ensure thread safety. This was incorrect before. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - DF_Helper now has three methods for integral transformations:; `STORE`: Contracts metric with AO integrals, stores, then transforms.; `DIRECT`: Transforms integrals, contracts with metric.; `DIRECT_iaQ`: Optimized `DIRECT` workflow when using `pqQ` transformed integrals. - DF_Helper outputs any transformed integral form you want: `Qpq`, `pQq`, or `pqQ`. The following can be used for each of the respective methods listed above:; `STORE`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT_iaQ`: `pqQ`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/913
https://github.com/psi4/psi4/pull/913:1131,Performance,Optimiz,Optimized,1131,"## Description; Furthers the generality of integral transformations and enables a special workflow, `DIRECT_iaQ`, to alleviate disk IO when transforming to `pqQ` forms. Timings comparing the `DIRECT_iaQ` and `DIRECT` methods are inbound. Edit: Here are some tests that (almost comically) display the efficacy of `DIRECT_iaQ` over `DIRECT` + `pqQ`. 1. Test1: ; [input.txt](https://github.com/psi4/psi4/files/1740970/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740977/timer.txt). 2. Test2: ; [input.txt](https://github.com/psi4/psi4/files/1740966/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740974/timer.txt). Notice the difference between the `DFH: MO to disk` timers. . Edit2: I added a reduction on `max_val` in `prepare_sparsity` to ensure thread safety. This was incorrect before. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - DF_Helper now has three methods for integral transformations:; `STORE`: Contracts metric with AO integrals, stores, then transforms.; `DIRECT`: Transforms integrals, contracts with metric.; `DIRECT_iaQ`: Optimized `DIRECT` workflow when using `pqQ` transformed integrals. - DF_Helper outputs any transformed integral form you want: `Qpq`, `pQq`, or `pqQ`. The following can be used for each of the respective methods listed above:; `STORE`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT_iaQ`: `pqQ`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/913
https://github.com/psi4/psi4/pull/913:781,Safety,safe,safety,781,"## Description; Furthers the generality of integral transformations and enables a special workflow, `DIRECT_iaQ`, to alleviate disk IO when transforming to `pqQ` forms. Timings comparing the `DIRECT_iaQ` and `DIRECT` methods are inbound. Edit: Here are some tests that (almost comically) display the efficacy of `DIRECT_iaQ` over `DIRECT` + `pqQ`. 1. Test1: ; [input.txt](https://github.com/psi4/psi4/files/1740970/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740977/timer.txt). 2. Test2: ; [input.txt](https://github.com/psi4/psi4/files/1740966/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740974/timer.txt). Notice the difference between the `DFH: MO to disk` timers. . Edit2: I added a reduction on `max_val` in `prepare_sparsity` to ensure thread safety. This was incorrect before. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - DF_Helper now has three methods for integral transformations:; `STORE`: Contracts metric with AO integrals, stores, then transforms.; `DIRECT`: Transforms integrals, contracts with metric.; `DIRECT_iaQ`: Optimized `DIRECT` workflow when using `pqQ` transformed integrals. - DF_Helper outputs any transformed integral form you want: `Qpq`, `pQq`, or `pqQ`. The following can be used for each of the respective methods listed above:; `STORE`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT_iaQ`: `pqQ`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/913
https://github.com/psi4/psi4/pull/913:258,Testability,test,tests,258,"## Description; Furthers the generality of integral transformations and enables a special workflow, `DIRECT_iaQ`, to alleviate disk IO when transforming to `pqQ` forms. Timings comparing the `DIRECT_iaQ` and `DIRECT` methods are inbound. Edit: Here are some tests that (almost comically) display the efficacy of `DIRECT_iaQ` over `DIRECT` + `pqQ`. 1. Test1: ; [input.txt](https://github.com/psi4/psi4/files/1740970/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740977/timer.txt). 2. Test2: ; [input.txt](https://github.com/psi4/psi4/files/1740966/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740974/timer.txt). Notice the difference between the `DFH: MO to disk` timers. . Edit2: I added a reduction on `max_val` in `prepare_sparsity` to ensure thread safety. This was incorrect before. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - DF_Helper now has three methods for integral transformations:; `STORE`: Contracts metric with AO integrals, stores, then transforms.; `DIRECT`: Transforms integrals, contracts with metric.; `DIRECT_iaQ`: Optimized `DIRECT` workflow when using `pqQ` transformed integrals. - DF_Helper outputs any transformed integral form you want: `Qpq`, `pQq`, or `pqQ`. The following can be used for each of the respective methods listed above:; `STORE`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT_iaQ`: `pqQ`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/913
https://github.com/psi4/psi4/pull/914:1052,Availability,fault,fault,1052,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/pull/914:264,Deployability,Release,Release,264,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/pull/914:983,Deployability,integrat,integrate,983,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/pull/914:1063,Deployability,integrat,integration,1063,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/pull/914:62,Energy Efficiency,energy,energy,62,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/pull/914:554,Energy Efficiency,energy,energy,554,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/pull/914:794,Energy Efficiency,energy,energy,794,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/pull/914:1088,Energy Efficiency,energy,energy,1088,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/pull/914:1140,Energy Efficiency,energy,energy,1140,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/pull/914:983,Integrability,integrat,integrate,983,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/pull/914:1063,Integrability,integrat,integration,1063,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/pull/914:446,Security,access,access,446,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/pull/914:1171,Security,access,access,1171,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/pull/914:993,Testability,test,tests,993,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/pull/914:1292,Testability,test,tests,1292,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/pull/914:1332,Testability,test,test,1332,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/914
https://github.com/psi4/psi4/issues/915:61,Energy Efficiency,energy,energy,61,"Hi all,. I was using the MRCC interface to compute the CCSDT energy of a trimer at the quadruplet spin state. Psi4 seems to initiate the computation correctly, but the MRCC computation stops after printing; `Calculation of MP denominators...`; without performing the CC iterations, but still printing `Normal termination of mrcc.` ; I tried the water example provided in the MRCC interface manual:; `molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt')`; It works fine as is, it also works fine if I change the multiplicity to `0 3` with `reference uhf` but not if I change it to `1 4` with `reference uhf`. It then fails at the same point than my original trimer computation. I notice that the output file of the successful triplet computation prints `Spin multiplicity: 3` twice whereas this line is missing in the failing quadruplet computations (see attached files).; [test.out.txt](https://github.com/psi4/psi4/files/1713187/test.out.txt); [test_quad.out.txt](https://github.com/psi4/psi4/files/1713188/test_quad.out.txt). Running the quadruplet directly through MRCC using their input file works fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/915
https://github.com/psi4/psi4/issues/915:473,Energy Efficiency,energy,energy,473,"Hi all,. I was using the MRCC interface to compute the CCSDT energy of a trimer at the quadruplet spin state. Psi4 seems to initiate the computation correctly, but the MRCC computation stops after printing; `Calculation of MP denominators...`; without performing the CC iterations, but still printing `Normal termination of mrcc.` ; I tried the water example provided in the MRCC interface manual:; `molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt')`; It works fine as is, it also works fine if I change the multiplicity to `0 3` with `reference uhf` but not if I change it to `1 4` with `reference uhf`. It then fails at the same point than my original trimer computation. I notice that the output file of the successful triplet computation prints `Spin multiplicity: 3` twice whereas this line is missing in the failing quadruplet computations (see attached files).; [test.out.txt](https://github.com/psi4/psi4/files/1713187/test.out.txt); [test_quad.out.txt](https://github.com/psi4/psi4/files/1713188/test_quad.out.txt). Running the quadruplet directly through MRCC using their input file works fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/915
https://github.com/psi4/psi4/issues/915:30,Integrability,interface,interface,30,"Hi all,. I was using the MRCC interface to compute the CCSDT energy of a trimer at the quadruplet spin state. Psi4 seems to initiate the computation correctly, but the MRCC computation stops after printing; `Calculation of MP denominators...`; without performing the CC iterations, but still printing `Normal termination of mrcc.` ; I tried the water example provided in the MRCC interface manual:; `molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt')`; It works fine as is, it also works fine if I change the multiplicity to `0 3` with `reference uhf` but not if I change it to `1 4` with `reference uhf`. It then fails at the same point than my original trimer computation. I notice that the output file of the successful triplet computation prints `Spin multiplicity: 3` twice whereas this line is missing in the failing quadruplet computations (see attached files).; [test.out.txt](https://github.com/psi4/psi4/files/1713187/test.out.txt); [test_quad.out.txt](https://github.com/psi4/psi4/files/1713188/test_quad.out.txt). Running the quadruplet directly through MRCC using their input file works fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/915
https://github.com/psi4/psi4/issues/915:380,Integrability,interface,interface,380,"Hi all,. I was using the MRCC interface to compute the CCSDT energy of a trimer at the quadruplet spin state. Psi4 seems to initiate the computation correctly, but the MRCC computation stops after printing; `Calculation of MP denominators...`; without performing the CC iterations, but still printing `Normal termination of mrcc.` ; I tried the water example provided in the MRCC interface manual:; `molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt')`; It works fine as is, it also works fine if I change the multiplicity to `0 3` with `reference uhf` but not if I change it to `1 4` with `reference uhf`. It then fails at the same point than my original trimer computation. I notice that the output file of the successful triplet computation prints `Spin multiplicity: 3` twice whereas this line is missing in the failing quadruplet computations (see attached files).; [test.out.txt](https://github.com/psi4/psi4/files/1713187/test.out.txt); [test_quad.out.txt](https://github.com/psi4/psi4/files/1713188/test_quad.out.txt). Running the quadruplet directly through MRCC using their input file works fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/915
https://github.com/psi4/psi4/issues/915:252,Performance,perform,performing,252,"Hi all,. I was using the MRCC interface to compute the CCSDT energy of a trimer at the quadruplet spin state. Psi4 seems to initiate the computation correctly, but the MRCC computation stops after printing; `Calculation of MP denominators...`; without performing the CC iterations, but still printing `Normal termination of mrcc.` ; I tried the water example provided in the MRCC interface manual:; `molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt')`; It works fine as is, it also works fine if I change the multiplicity to `0 3` with `reference uhf` but not if I change it to `1 4` with `reference uhf`. It then fails at the same point than my original trimer computation. I notice that the output file of the successful triplet computation prints `Spin multiplicity: 3` twice whereas this line is missing in the failing quadruplet computations (see attached files).; [test.out.txt](https://github.com/psi4/psi4/files/1713187/test.out.txt); [test_quad.out.txt](https://github.com/psi4/psi4/files/1713188/test_quad.out.txt). Running the quadruplet directly through MRCC using their input file works fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/915
https://github.com/psi4/psi4/issues/915:911,Testability,test,test,911,"Hi all,. I was using the MRCC interface to compute the CCSDT energy of a trimer at the quadruplet spin state. Psi4 seems to initiate the computation correctly, but the MRCC computation stops after printing; `Calculation of MP denominators...`; without performing the CC iterations, but still printing `Normal termination of mrcc.` ; I tried the water example provided in the MRCC interface manual:; `molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt')`; It works fine as is, it also works fine if I change the multiplicity to `0 3` with `reference uhf` but not if I change it to `1 4` with `reference uhf`. It then fails at the same point than my original trimer computation. I notice that the output file of the successful triplet computation prints `Spin multiplicity: 3` twice whereas this line is missing in the failing quadruplet computations (see attached files).; [test.out.txt](https://github.com/psi4/psi4/files/1713187/test.out.txt); [test_quad.out.txt](https://github.com/psi4/psi4/files/1713188/test_quad.out.txt). Running the quadruplet directly through MRCC using their input file works fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/915
https://github.com/psi4/psi4/issues/915:968,Testability,test,test,968,"Hi all,. I was using the MRCC interface to compute the CCSDT energy of a trimer at the quadruplet spin state. Psi4 seems to initiate the computation correctly, but the MRCC computation stops after printing; `Calculation of MP denominators...`; without performing the CC iterations, but still printing `Normal termination of mrcc.` ; I tried the water example provided in the MRCC interface manual:; `molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt')`; It works fine as is, it also works fine if I change the multiplicity to `0 3` with `reference uhf` but not if I change it to `1 4` with `reference uhf`. It then fails at the same point than my original trimer computation. I notice that the output file of the successful triplet computation prints `Spin multiplicity: 3` twice whereas this line is missing in the failing quadruplet computations (see attached files).; [test.out.txt](https://github.com/psi4/psi4/files/1713187/test.out.txt); [test_quad.out.txt](https://github.com/psi4/psi4/files/1713188/test_quad.out.txt). Running the quadruplet directly through MRCC using their input file works fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/915
https://github.com/psi4/psi4/pull/916:459,Deployability,Release,Release,459,"Added dashparams for -D3(0) and -D3(BJ) for 7 functionals from L. Goerigk (JPC:L 6 (2015) 3891).; Added three functionals from Peverati and Truhlar (PCCP 14 (2012) 16187; JCTC 8 (2012) 2310). The functionals still need tests. ## Description; Added missing dashparams and functionals. Could someone please run the Q-Chem tests for N12, N12-SX and MN12-SX?. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Added -D3(0) and -D3(BJ) params for M11-L, MN12-L, N12, SOGGA11-X, and M11; - [ ] Added functionals N12, N12-SX and MN12-SX; - [x] Added -D3(0) and -D3(BJ) params for N12-SX and MN12-SX. ## Status; - [ ] Tests for N12, N12-SX and MN12-SX; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/916
https://github.com/psi4/psi4/pull/916:219,Testability,test,tests,219,"Added dashparams for -D3(0) and -D3(BJ) for 7 functionals from L. Goerigk (JPC:L 6 (2015) 3891).; Added three functionals from Peverati and Truhlar (PCCP 14 (2012) 16187; JCTC 8 (2012) 2310). The functionals still need tests. ## Description; Added missing dashparams and functionals. Could someone please run the Q-Chem tests for N12, N12-SX and MN12-SX?. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Added -D3(0) and -D3(BJ) params for M11-L, MN12-L, N12, SOGGA11-X, and M11; - [ ] Added functionals N12, N12-SX and MN12-SX; - [x] Added -D3(0) and -D3(BJ) params for N12-SX and MN12-SX. ## Status; - [ ] Tests for N12, N12-SX and MN12-SX; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/916
https://github.com/psi4/psi4/pull/916:320,Testability,test,tests,320,"Added dashparams for -D3(0) and -D3(BJ) for 7 functionals from L. Goerigk (JPC:L 6 (2015) 3891).; Added three functionals from Peverati and Truhlar (PCCP 14 (2012) 16187; JCTC 8 (2012) 2310). The functionals still need tests. ## Description; Added missing dashparams and functionals. Could someone please run the Q-Chem tests for N12, N12-SX and MN12-SX?. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Added -D3(0) and -D3(BJ) params for M11-L, MN12-L, N12, SOGGA11-X, and M11; - [ ] Added functionals N12, N12-SX and MN12-SX; - [x] Added -D3(0) and -D3(BJ) params for N12-SX and MN12-SX. ## Status; - [ ] Tests for N12, N12-SX and MN12-SX; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/916
https://github.com/psi4/psi4/pull/916:686,Testability,Test,Tests,686,"Added dashparams for -D3(0) and -D3(BJ) for 7 functionals from L. Goerigk (JPC:L 6 (2015) 3891).; Added three functionals from Peverati and Truhlar (PCCP 14 (2012) 16187; JCTC 8 (2012) 2310). The functionals still need tests. ## Description; Added missing dashparams and functionals. Could someone please run the Q-Chem tests for N12, N12-SX and MN12-SX?. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Added -D3(0) and -D3(BJ) params for M11-L, MN12-L, N12, SOGGA11-X, and M11; - [ ] Added functionals N12, N12-SX and MN12-SX; - [x] Added -D3(0) and -D3(BJ) params for N12-SX and MN12-SX. ## Status; - [ ] Tests for N12, N12-SX and MN12-SX; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/916
https://github.com/psi4/psi4/issues/917:10,Deployability,update,update,10,"Haw can I update my basis set list?. BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 2 for key BASIS among:; Shell Entries: [u'AU']; Basis Sets: [(u'DEF2-QZVP', u'DEF2-QZVP', None)]; File Path: /lustre/home/drninko19/RESTORED/naftalen/SAPT, /lustre/home/drninko19/RESTORED/naftalen/SAPT, /lustre/home/drninko19/psi4conda/share/psi4/basis; Input Blocks:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/917
https://github.com/psi4/psi4/issues/918:246,Energy Efficiency,energy,energy,246,"Dear all,. I try to obtain molecular orbitals for a converged calculation. I use the following input:; ```python; set guess sad; set scf_type df; set reference rhf. psi4_io.set_specific_path(180, './'); psi4_io.set_specific_retention(180, True). energy('scf'); ```; and start psi4 with the ""-m"" flag. However, I do not get this file. Is there another command/way that I have to use?. thanks,; Christopher",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/918
https://github.com/psi4/psi4/pull/919:970,Deployability,Release,Release,970,"## Description; This gets the scfitertopy (scf iterations py-side, pb221, pcm py-side) fully operational again with efp py-side. Also extends pyvib2's Molecule dict (often labeled ""molrec"") init and validation to input parsing. This requires two extensions to molrec – one for efp and one for zmat/variables in geometry. Replaces all the c-side constructors (i.e., create_molecule_from_string, init_with_xyz), replacing them with a unified dict, str, arrays constructor. This branch is presently master (reviewed) + pyvib2 (unreviewed) + scfitertopy (semi-reviewed) + newstuff, all rebased so it doesn't align with anything. After pyvib2 makes it into master, I'll rebase and separate into scfitertopy and newstuff, so it can be readily reviewed. This is just getting the commits posted so I can break psi locally yet again. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/919
https://github.com/psi4/psi4/pull/919:134,Modifiability,extend,extends,134,"## Description; This gets the scfitertopy (scf iterations py-side, pb221, pcm py-side) fully operational again with efp py-side. Also extends pyvib2's Molecule dict (often labeled ""molrec"") init and validation to input parsing. This requires two extensions to molrec – one for efp and one for zmat/variables in geometry. Replaces all the c-side constructors (i.e., create_molecule_from_string, init_with_xyz), replacing them with a unified dict, str, arrays constructor. This branch is presently master (reviewed) + pyvib2 (unreviewed) + scfitertopy (semi-reviewed) + newstuff, all rebased so it doesn't align with anything. After pyvib2 makes it into master, I'll rebase and separate into scfitertopy and newstuff, so it can be readily reviewed. This is just getting the commits posted so I can break psi locally yet again. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/919
https://github.com/psi4/psi4/pull/919:298,Modifiability,variab,variables,298,"## Description; This gets the scfitertopy (scf iterations py-side, pb221, pcm py-side) fully operational again with efp py-side. Also extends pyvib2's Molecule dict (often labeled ""molrec"") init and validation to input parsing. This requires two extensions to molrec – one for efp and one for zmat/variables in geometry. Replaces all the c-side constructors (i.e., create_molecule_from_string, init_with_xyz), replacing them with a unified dict, str, arrays constructor. This branch is presently master (reviewed) + pyvib2 (unreviewed) + scfitertopy (semi-reviewed) + newstuff, all rebased so it doesn't align with anything. After pyvib2 makes it into master, I'll rebase and separate into scfitertopy and newstuff, so it can be readily reviewed. This is just getting the commits posted so I can break psi locally yet again. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/919
https://github.com/psi4/psi4/pull/919:199,Security,validat,validation,199,"## Description; This gets the scfitertopy (scf iterations py-side, pb221, pcm py-side) fully operational again with efp py-side. Also extends pyvib2's Molecule dict (often labeled ""molrec"") init and validation to input parsing. This requires two extensions to molrec – one for efp and one for zmat/variables in geometry. Replaces all the c-side constructors (i.e., create_molecule_from_string, init_with_xyz), replacing them with a unified dict, str, arrays constructor. This branch is presently master (reviewed) + pyvib2 (unreviewed) + scfitertopy (semi-reviewed) + newstuff, all rebased so it doesn't align with anything. After pyvib2 makes it into master, I'll rebase and separate into scfitertopy and newstuff, so it can be readily reviewed. This is just getting the commits posted so I can break psi locally yet again. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/919
https://github.com/psi4/psi4/issues/920:391,Energy Efficiency,energy,energy,391,"Title is kept general, but this is especially relevant for the newer DSD double hybrids. Issue made from short discussion in slacks. For example: http://onlinelibrary.wiley.com/doi/10.1002/jcc.23391/full ; Different functional compositions for the exchange, correlation, mp2 parts for (among others) -D2 and -D3BJ. The dashparam.py functionality cannot handle these multiple versions, but; `energy('dsd-pbepbe')`, `energy('dsd-pbepbe-d2') `or `energy('dsd-pbepbe-d3bj')` should provide the proposed parameters automatically. . A possible workaround is to define everything, including the e.g. the -D parameters, in the superfunctional object and either avoid the ""dash"" in the method name or avoid invoking the dashparam functionality for specific names.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/920
https://github.com/psi4/psi4/issues/920:415,Energy Efficiency,energy,energy,415,"Title is kept general, but this is especially relevant for the newer DSD double hybrids. Issue made from short discussion in slacks. For example: http://onlinelibrary.wiley.com/doi/10.1002/jcc.23391/full ; Different functional compositions for the exchange, correlation, mp2 parts for (among others) -D2 and -D3BJ. The dashparam.py functionality cannot handle these multiple versions, but; `energy('dsd-pbepbe')`, `energy('dsd-pbepbe-d2') `or `energy('dsd-pbepbe-d3bj')` should provide the proposed parameters automatically. . A possible workaround is to define everything, including the e.g. the -D parameters, in the superfunctional object and either avoid the ""dash"" in the method name or avoid invoking the dashparam functionality for specific names.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/920
https://github.com/psi4/psi4/issues/920:444,Energy Efficiency,energy,energy,444,"Title is kept general, but this is especially relevant for the newer DSD double hybrids. Issue made from short discussion in slacks. For example: http://onlinelibrary.wiley.com/doi/10.1002/jcc.23391/full ; Different functional compositions for the exchange, correlation, mp2 parts for (among others) -D2 and -D3BJ. The dashparam.py functionality cannot handle these multiple versions, but; `energy('dsd-pbepbe')`, `energy('dsd-pbepbe-d2') `or `energy('dsd-pbepbe-d3bj')` should provide the proposed parameters automatically. . A possible workaround is to define everything, including the e.g. the -D parameters, in the superfunctional object and either avoid the ""dash"" in the method name or avoid invoking the dashparam functionality for specific names.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/920
https://github.com/psi4/psi4/issues/920:653,Safety,avoid,avoid,653,"Title is kept general, but this is especially relevant for the newer DSD double hybrids. Issue made from short discussion in slacks. For example: http://onlinelibrary.wiley.com/doi/10.1002/jcc.23391/full ; Different functional compositions for the exchange, correlation, mp2 parts for (among others) -D2 and -D3BJ. The dashparam.py functionality cannot handle these multiple versions, but; `energy('dsd-pbepbe')`, `energy('dsd-pbepbe-d2') `or `energy('dsd-pbepbe-d3bj')` should provide the proposed parameters automatically. . A possible workaround is to define everything, including the e.g. the -D parameters, in the superfunctional object and either avoid the ""dash"" in the method name or avoid invoking the dashparam functionality for specific names.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/920
https://github.com/psi4/psi4/issues/920:692,Safety,avoid,avoid,692,"Title is kept general, but this is especially relevant for the newer DSD double hybrids. Issue made from short discussion in slacks. For example: http://onlinelibrary.wiley.com/doi/10.1002/jcc.23391/full ; Different functional compositions for the exchange, correlation, mp2 parts for (among others) -D2 and -D3BJ. The dashparam.py functionality cannot handle these multiple versions, but; `energy('dsd-pbepbe')`, `energy('dsd-pbepbe-d2') `or `energy('dsd-pbepbe-d3bj')` should provide the proposed parameters automatically. . A possible workaround is to define everything, including the e.g. the -D parameters, in the superfunctional object and either avoid the ""dash"" in the method name or avoid invoking the dashparam functionality for specific names.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/920
https://github.com/psi4/psi4/pull/921:172,Deployability,Release,Release,172,"Add the option for SAPT to compute the second order exchange-induction term, coupled or uncoupled, without the Single-Exchange Approximation. ## Todos; * __User-Facing for Release Notes__; - [ ] Add Sinf option to second order exchange-induction",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/921
https://github.com/psi4/psi4/pull/922:1059,Deployability,Release,Release,1059,"## Description; Added a dictionary-based method for implementing density functionals. All non-dispersion versions of original functionals are working with some exceptions, the new definition of functionals has ""TEST-"" prefix for now. Not working functionals are: HF+D and HJS-B88 which do not run, HF3C for unknown reason, B97-D which should be -D2 not -D3 corrected in master. Some dispersion corrected methods already implemented - all BLYP functionals, for example. Script used for testing attached:; [test.dat.txt](https://github.com/psi4/psi4/files/1735039/test.dat.txt). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for Issue #920 ; - [x] Easy implementation of new functionals; - [x] LibXC parameters (ALPHA, BETA, OMEGA) now exposed to python; - [x] Check functionals against Q-Chem; - [ ] oPBE-D, oTPSS-D, oPWLYP-D ,oBLYP-D, TPSSh-D3BJ - not included in PR #880 ; - [x] B97-D; - [x] wB97X-D3 - needs tweaks - was disabled.; - [x] DSD-***; - [x] [PBE]HF3C; * **User-Facing for Release Notes**; - [ ] Eventually: let user pass a dict to psi4 with custom functionals? . ## Questions; - [ ] What do you think about the current interface?. ## Status; - [x] Dashparams for functionals need to be migrated too.; - [x] Ready to go - from my PoV at least.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/922
https://github.com/psi4/psi4/pull/922:1206,Integrability,interface,interface,1206,"## Description; Added a dictionary-based method for implementing density functionals. All non-dispersion versions of original functionals are working with some exceptions, the new definition of functionals has ""TEST-"" prefix for now. Not working functionals are: HF+D and HJS-B88 which do not run, HF3C for unknown reason, B97-D which should be -D2 not -D3 corrected in master. Some dispersion corrected methods already implemented - all BLYP functionals, for example. Script used for testing attached:; [test.dat.txt](https://github.com/psi4/psi4/files/1735039/test.dat.txt). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for Issue #920 ; - [x] Easy implementation of new functionals; - [x] LibXC parameters (ALPHA, BETA, OMEGA) now exposed to python; - [x] Check functionals against Q-Chem; - [ ] oPBE-D, oTPSS-D, oPWLYP-D ,oBLYP-D, TPSSh-D3BJ - not included in PR #880 ; - [x] B97-D; - [x] wB97X-D3 - needs tweaks - was disabled.; - [x] DSD-***; - [x] [PBE]HF3C; * **User-Facing for Release Notes**; - [ ] Eventually: let user pass a dict to psi4 with custom functionals? . ## Questions; - [ ] What do you think about the current interface?. ## Status; - [x] Dashparams for functionals need to be migrated too.; - [x] Ready to go - from my PoV at least.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/922
https://github.com/psi4/psi4/pull/922:807,Security,expose,exposed,807,"## Description; Added a dictionary-based method for implementing density functionals. All non-dispersion versions of original functionals are working with some exceptions, the new definition of functionals has ""TEST-"" prefix for now. Not working functionals are: HF+D and HJS-B88 which do not run, HF3C for unknown reason, B97-D which should be -D2 not -D3 corrected in master. Some dispersion corrected methods already implemented - all BLYP functionals, for example. Script used for testing attached:; [test.dat.txt](https://github.com/psi4/psi4/files/1735039/test.dat.txt). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for Issue #920 ; - [x] Easy implementation of new functionals; - [x] LibXC parameters (ALPHA, BETA, OMEGA) now exposed to python; - [x] Check functionals against Q-Chem; - [ ] oPBE-D, oTPSS-D, oPWLYP-D ,oBLYP-D, TPSSh-D3BJ - not included in PR #880 ; - [x] B97-D; - [x] wB97X-D3 - needs tweaks - was disabled.; - [x] DSD-***; - [x] [PBE]HF3C; * **User-Facing for Release Notes**; - [ ] Eventually: let user pass a dict to psi4 with custom functionals? . ## Questions; - [ ] What do you think about the current interface?. ## Status; - [x] Dashparams for functionals need to be migrated too.; - [x] Ready to go - from my PoV at least.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/922
https://github.com/psi4/psi4/pull/922:211,Testability,TEST,TEST,211,"## Description; Added a dictionary-based method for implementing density functionals. All non-dispersion versions of original functionals are working with some exceptions, the new definition of functionals has ""TEST-"" prefix for now. Not working functionals are: HF+D and HJS-B88 which do not run, HF3C for unknown reason, B97-D which should be -D2 not -D3 corrected in master. Some dispersion corrected methods already implemented - all BLYP functionals, for example. Script used for testing attached:; [test.dat.txt](https://github.com/psi4/psi4/files/1735039/test.dat.txt). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for Issue #920 ; - [x] Easy implementation of new functionals; - [x] LibXC parameters (ALPHA, BETA, OMEGA) now exposed to python; - [x] Check functionals against Q-Chem; - [ ] oPBE-D, oTPSS-D, oPWLYP-D ,oBLYP-D, TPSSh-D3BJ - not included in PR #880 ; - [x] B97-D; - [x] wB97X-D3 - needs tweaks - was disabled.; - [x] DSD-***; - [x] [PBE]HF3C; * **User-Facing for Release Notes**; - [ ] Eventually: let user pass a dict to psi4 with custom functionals? . ## Questions; - [ ] What do you think about the current interface?. ## Status; - [x] Dashparams for functionals need to be migrated too.; - [x] Ready to go - from my PoV at least.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/922
https://github.com/psi4/psi4/pull/922:485,Testability,test,testing,485,"## Description; Added a dictionary-based method for implementing density functionals. All non-dispersion versions of original functionals are working with some exceptions, the new definition of functionals has ""TEST-"" prefix for now. Not working functionals are: HF+D and HJS-B88 which do not run, HF3C for unknown reason, B97-D which should be -D2 not -D3 corrected in master. Some dispersion corrected methods already implemented - all BLYP functionals, for example. Script used for testing attached:; [test.dat.txt](https://github.com/psi4/psi4/files/1735039/test.dat.txt). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for Issue #920 ; - [x] Easy implementation of new functionals; - [x] LibXC parameters (ALPHA, BETA, OMEGA) now exposed to python; - [x] Check functionals against Q-Chem; - [ ] oPBE-D, oTPSS-D, oPWLYP-D ,oBLYP-D, TPSSh-D3BJ - not included in PR #880 ; - [x] B97-D; - [x] wB97X-D3 - needs tweaks - was disabled.; - [x] DSD-***; - [x] [PBE]HF3C; * **User-Facing for Release Notes**; - [ ] Eventually: let user pass a dict to psi4 with custom functionals? . ## Questions; - [ ] What do you think about the current interface?. ## Status; - [x] Dashparams for functionals need to be migrated too.; - [x] Ready to go - from my PoV at least.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/922
https://github.com/psi4/psi4/pull/922:505,Testability,test,test,505,"## Description; Added a dictionary-based method for implementing density functionals. All non-dispersion versions of original functionals are working with some exceptions, the new definition of functionals has ""TEST-"" prefix for now. Not working functionals are: HF+D and HJS-B88 which do not run, HF3C for unknown reason, B97-D which should be -D2 not -D3 corrected in master. Some dispersion corrected methods already implemented - all BLYP functionals, for example. Script used for testing attached:; [test.dat.txt](https://github.com/psi4/psi4/files/1735039/test.dat.txt). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for Issue #920 ; - [x] Easy implementation of new functionals; - [x] LibXC parameters (ALPHA, BETA, OMEGA) now exposed to python; - [x] Check functionals against Q-Chem; - [ ] oPBE-D, oTPSS-D, oPWLYP-D ,oBLYP-D, TPSSh-D3BJ - not included in PR #880 ; - [x] B97-D; - [x] wB97X-D3 - needs tweaks - was disabled.; - [x] DSD-***; - [x] [PBE]HF3C; * **User-Facing for Release Notes**; - [ ] Eventually: let user pass a dict to psi4 with custom functionals? . ## Questions; - [ ] What do you think about the current interface?. ## Status; - [x] Dashparams for functionals need to be migrated too.; - [x] Ready to go - from my PoV at least.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/922
https://github.com/psi4/psi4/pull/922:562,Testability,test,test,562,"## Description; Added a dictionary-based method for implementing density functionals. All non-dispersion versions of original functionals are working with some exceptions, the new definition of functionals has ""TEST-"" prefix for now. Not working functionals are: HF+D and HJS-B88 which do not run, HF3C for unknown reason, B97-D which should be -D2 not -D3 corrected in master. Some dispersion corrected methods already implemented - all BLYP functionals, for example. Script used for testing attached:; [test.dat.txt](https://github.com/psi4/psi4/files/1735039/test.dat.txt). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for Issue #920 ; - [x] Easy implementation of new functionals; - [x] LibXC parameters (ALPHA, BETA, OMEGA) now exposed to python; - [x] Check functionals against Q-Chem; - [ ] oPBE-D, oTPSS-D, oPWLYP-D ,oBLYP-D, TPSSh-D3BJ - not included in PR #880 ; - [x] B97-D; - [x] wB97X-D3 - needs tweaks - was disabled.; - [x] DSD-***; - [x] [PBE]HF3C; * **User-Facing for Release Notes**; - [ ] Eventually: let user pass a dict to psi4 with custom functionals? . ## Questions; - [ ] What do you think about the current interface?. ## Status; - [x] Dashparams for functionals need to be migrated too.; - [x] Ready to go - from my PoV at least.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/922
https://github.com/psi4/psi4/issues/923:203,Availability,down,down,203,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/923
https://github.com/psi4/psi4/issues/923:322,Availability,error,error,322,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/923
https://github.com/psi4/psi4/issues/923:581,Availability,Error,Error,581,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/923
https://github.com/psi4/psi4/issues/923:643,Availability,Error,Error,643,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/923
https://github.com/psi4/psi4/issues/923:730,Availability,error,error,730,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/923
https://github.com/psi4/psi4/issues/923:747,Availability,down,down,747,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/923
https://github.com/psi4/psi4/issues/923:1032,Integrability,message,message,1032,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/923
https://github.com/psi4/psi4/issues/923:185,Performance,optimiz,optimization,185,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/923
https://github.com/psi4/psi4/issues/923:756,Performance,optimiz,optimization,756,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/923
https://github.com/psi4/psi4/issues/923:1124,Performance,optimiz,optimization,1124,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/923
https://github.com/psi4/psi4/issues/923:438,Safety,abort,aborted,438,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/923
https://github.com/psi4/psi4/pull/924:29,Availability,error,error,29,## Description; Fix a little error in conditional statement in driver_nbody.py,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/924
https://github.com/psi4/psi4/pull/925:18,Deployability,patch,patch,18,This adds a CMAke patch to lower the optimization flags for a particular file to work around a compiler crash icc 18.0.1 discussed in #923.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/925
https://github.com/psi4/psi4/pull/925:37,Performance,optimiz,optimization,37,This adds a CMAke patch to lower the optimization flags for a particular file to work around a compiler crash icc 18.0.1 discussed in #923.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/925
https://github.com/psi4/psi4/issues/926:791,Energy Efficiency,energy,energy,791,"Further to our discussion at Slack and e-mail, I made some tests on molecules with ECP's. Please see the attached G09 and psi4 input and log files. To obtain the psi4 results, the g- and h- shell coefficient of 0.000 in the Xe/Hg ECP has been replaced with 1D-10. A simple trapping of `tsum==0` in `erd_normalize_shell()` in `libmintsgshell.py` doesn't work properly - the term has to be sanity-checked in the loop before on lines 241-252. . For Hg, the `libmintsbasissetparser.py` had to be extended at line 202 to include the H-shell (thanks, Jesse). ![image](https://user-images.githubusercontent.com/5336995/36932575-1957f002-1ecb-11e8-84dc-b365f16b84b3.png). As can be seen from the table above, the absolute energies of the dimers are fine when compared to G09. The `nocp` interaction energy is also OK, however when CP-correction is involved, the results are not good - I imagine the ECP doesn't get properly ghosted. Finally, the psi4 calculations crash as `libmintsbasisset.py` is not able to find the basis sets for some reason - perhaps the basis set file is not passed into the routine properly? This also occurs when the basis set is defined in the job file using `basis { ... }`. [ECP-test.zip](https://github.com/psi4/psi4/files/1777311/ECP-test.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/926
https://github.com/psi4/psi4/issues/926:1090,Integrability,rout,routine,1090,"Further to our discussion at Slack and e-mail, I made some tests on molecules with ECP's. Please see the attached G09 and psi4 input and log files. To obtain the psi4 results, the g- and h- shell coefficient of 0.000 in the Xe/Hg ECP has been replaced with 1D-10. A simple trapping of `tsum==0` in `erd_normalize_shell()` in `libmintsgshell.py` doesn't work properly - the term has to be sanity-checked in the loop before on lines 241-252. . For Hg, the `libmintsbasissetparser.py` had to be extended at line 202 to include the H-shell (thanks, Jesse). ![image](https://user-images.githubusercontent.com/5336995/36932575-1957f002-1ecb-11e8-84dc-b365f16b84b3.png). As can be seen from the table above, the absolute energies of the dimers are fine when compared to G09. The `nocp` interaction energy is also OK, however when CP-correction is involved, the results are not good - I imagine the ECP doesn't get properly ghosted. Finally, the psi4 calculations crash as `libmintsbasisset.py` is not able to find the basis sets for some reason - perhaps the basis set file is not passed into the routine properly? This also occurs when the basis set is defined in the job file using `basis { ... }`. [ECP-test.zip](https://github.com/psi4/psi4/files/1777311/ECP-test.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/926
https://github.com/psi4/psi4/issues/926:492,Modifiability,extend,extended,492,"Further to our discussion at Slack and e-mail, I made some tests on molecules with ECP's. Please see the attached G09 and psi4 input and log files. To obtain the psi4 results, the g- and h- shell coefficient of 0.000 in the Xe/Hg ECP has been replaced with 1D-10. A simple trapping of `tsum==0` in `erd_normalize_shell()` in `libmintsgshell.py` doesn't work properly - the term has to be sanity-checked in the loop before on lines 241-252. . For Hg, the `libmintsbasissetparser.py` had to be extended at line 202 to include the H-shell (thanks, Jesse). ![image](https://user-images.githubusercontent.com/5336995/36932575-1957f002-1ecb-11e8-84dc-b365f16b84b3.png). As can be seen from the table above, the absolute energies of the dimers are fine when compared to G09. The `nocp` interaction energy is also OK, however when CP-correction is involved, the results are not good - I imagine the ECP doesn't get properly ghosted. Finally, the psi4 calculations crash as `libmintsbasisset.py` is not able to find the basis sets for some reason - perhaps the basis set file is not passed into the routine properly? This also occurs when the basis set is defined in the job file using `basis { ... }`. [ECP-test.zip](https://github.com/psi4/psi4/files/1777311/ECP-test.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/926
https://github.com/psi4/psi4/issues/926:59,Testability,test,tests,59,"Further to our discussion at Slack and e-mail, I made some tests on molecules with ECP's. Please see the attached G09 and psi4 input and log files. To obtain the psi4 results, the g- and h- shell coefficient of 0.000 in the Xe/Hg ECP has been replaced with 1D-10. A simple trapping of `tsum==0` in `erd_normalize_shell()` in `libmintsgshell.py` doesn't work properly - the term has to be sanity-checked in the loop before on lines 241-252. . For Hg, the `libmintsbasissetparser.py` had to be extended at line 202 to include the H-shell (thanks, Jesse). ![image](https://user-images.githubusercontent.com/5336995/36932575-1957f002-1ecb-11e8-84dc-b365f16b84b3.png). As can be seen from the table above, the absolute energies of the dimers are fine when compared to G09. The `nocp` interaction energy is also OK, however when CP-correction is involved, the results are not good - I imagine the ECP doesn't get properly ghosted. Finally, the psi4 calculations crash as `libmintsbasisset.py` is not able to find the basis sets for some reason - perhaps the basis set file is not passed into the routine properly? This also occurs when the basis set is defined in the job file using `basis { ... }`. [ECP-test.zip](https://github.com/psi4/psi4/files/1777311/ECP-test.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/926
https://github.com/psi4/psi4/issues/926:137,Testability,log,log,137,"Further to our discussion at Slack and e-mail, I made some tests on molecules with ECP's. Please see the attached G09 and psi4 input and log files. To obtain the psi4 results, the g- and h- shell coefficient of 0.000 in the Xe/Hg ECP has been replaced with 1D-10. A simple trapping of `tsum==0` in `erd_normalize_shell()` in `libmintsgshell.py` doesn't work properly - the term has to be sanity-checked in the loop before on lines 241-252. . For Hg, the `libmintsbasissetparser.py` had to be extended at line 202 to include the H-shell (thanks, Jesse). ![image](https://user-images.githubusercontent.com/5336995/36932575-1957f002-1ecb-11e8-84dc-b365f16b84b3.png). As can be seen from the table above, the absolute energies of the dimers are fine when compared to G09. The `nocp` interaction energy is also OK, however when CP-correction is involved, the results are not good - I imagine the ECP doesn't get properly ghosted. Finally, the psi4 calculations crash as `libmintsbasisset.py` is not able to find the basis sets for some reason - perhaps the basis set file is not passed into the routine properly? This also occurs when the basis set is defined in the job file using `basis { ... }`. [ECP-test.zip](https://github.com/psi4/psi4/files/1777311/ECP-test.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/926
https://github.com/psi4/psi4/issues/926:1199,Testability,test,test,1199,"Further to our discussion at Slack and e-mail, I made some tests on molecules with ECP's. Please see the attached G09 and psi4 input and log files. To obtain the psi4 results, the g- and h- shell coefficient of 0.000 in the Xe/Hg ECP has been replaced with 1D-10. A simple trapping of `tsum==0` in `erd_normalize_shell()` in `libmintsgshell.py` doesn't work properly - the term has to be sanity-checked in the loop before on lines 241-252. . For Hg, the `libmintsbasissetparser.py` had to be extended at line 202 to include the H-shell (thanks, Jesse). ![image](https://user-images.githubusercontent.com/5336995/36932575-1957f002-1ecb-11e8-84dc-b365f16b84b3.png). As can be seen from the table above, the absolute energies of the dimers are fine when compared to G09. The `nocp` interaction energy is also OK, however when CP-correction is involved, the results are not good - I imagine the ECP doesn't get properly ghosted. Finally, the psi4 calculations crash as `libmintsbasisset.py` is not able to find the basis sets for some reason - perhaps the basis set file is not passed into the routine properly? This also occurs when the basis set is defined in the job file using `basis { ... }`. [ECP-test.zip](https://github.com/psi4/psi4/files/1777311/ECP-test.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/926
https://github.com/psi4/psi4/issues/926:1256,Testability,test,test,1256,"Further to our discussion at Slack and e-mail, I made some tests on molecules with ECP's. Please see the attached G09 and psi4 input and log files. To obtain the psi4 results, the g- and h- shell coefficient of 0.000 in the Xe/Hg ECP has been replaced with 1D-10. A simple trapping of `tsum==0` in `erd_normalize_shell()` in `libmintsgshell.py` doesn't work properly - the term has to be sanity-checked in the loop before on lines 241-252. . For Hg, the `libmintsbasissetparser.py` had to be extended at line 202 to include the H-shell (thanks, Jesse). ![image](https://user-images.githubusercontent.com/5336995/36932575-1957f002-1ecb-11e8-84dc-b365f16b84b3.png). As can be seen from the table above, the absolute energies of the dimers are fine when compared to G09. The `nocp` interaction energy is also OK, however when CP-correction is involved, the results are not good - I imagine the ECP doesn't get properly ghosted. Finally, the psi4 calculations crash as `libmintsbasisset.py` is not able to find the basis sets for some reason - perhaps the basis set file is not passed into the routine properly? This also occurs when the basis set is defined in the job file using `basis { ... }`. [ECP-test.zip](https://github.com/psi4/psi4/files/1777311/ECP-test.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/926
https://github.com/psi4/psi4/issues/926:266,Usability,simpl,simple,266,"Further to our discussion at Slack and e-mail, I made some tests on molecules with ECP's. Please see the attached G09 and psi4 input and log files. To obtain the psi4 results, the g- and h- shell coefficient of 0.000 in the Xe/Hg ECP has been replaced with 1D-10. A simple trapping of `tsum==0` in `erd_normalize_shell()` in `libmintsgshell.py` doesn't work properly - the term has to be sanity-checked in the loop before on lines 241-252. . For Hg, the `libmintsbasissetparser.py` had to be extended at line 202 to include the H-shell (thanks, Jesse). ![image](https://user-images.githubusercontent.com/5336995/36932575-1957f002-1ecb-11e8-84dc-b365f16b84b3.png). As can be seen from the table above, the absolute energies of the dimers are fine when compared to G09. The `nocp` interaction energy is also OK, however when CP-correction is involved, the results are not good - I imagine the ECP doesn't get properly ghosted. Finally, the psi4 calculations crash as `libmintsbasisset.py` is not able to find the basis sets for some reason - perhaps the basis set file is not passed into the routine properly? This also occurs when the basis set is defined in the job file using `basis { ... }`. [ECP-test.zip](https://github.com/psi4/psi4/files/1777311/ECP-test.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/926
https://github.com/psi4/psi4/issues/927:23,Energy Efficiency,energy,energy,23,"Hi!. there is a bug in energy() function: both; energy('scf') ; and; energy('scf', dft_functional='b3lyp'); produce exactly the same results in psi4conda. This fact is inconsistent with http://www.psicode.org/psi4manual/master/dft.html where it is said that the latter syntax is absolutely valid.; See attached archieves for complete input and output files.; [1cc1.z437604.hippodrome.zip](https://github.com/psi4/psi4/files/1777480/1cc1.z437604.hippodrome.zip); [1cc1.z437605.hippodrome.zip](https://github.com/psi4/psi4/files/1777481/1cc1.z437605.hippodrome.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/927
https://github.com/psi4/psi4/issues/927:48,Energy Efficiency,energy,energy,48,"Hi!. there is a bug in energy() function: both; energy('scf') ; and; energy('scf', dft_functional='b3lyp'); produce exactly the same results in psi4conda. This fact is inconsistent with http://www.psicode.org/psi4manual/master/dft.html where it is said that the latter syntax is absolutely valid.; See attached archieves for complete input and output files.; [1cc1.z437604.hippodrome.zip](https://github.com/psi4/psi4/files/1777480/1cc1.z437604.hippodrome.zip); [1cc1.z437605.hippodrome.zip](https://github.com/psi4/psi4/files/1777481/1cc1.z437605.hippodrome.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/927
https://github.com/psi4/psi4/issues/927:69,Energy Efficiency,energy,energy,69,"Hi!. there is a bug in energy() function: both; energy('scf') ; and; energy('scf', dft_functional='b3lyp'); produce exactly the same results in psi4conda. This fact is inconsistent with http://www.psicode.org/psi4manual/master/dft.html where it is said that the latter syntax is absolutely valid.; See attached archieves for complete input and output files.; [1cc1.z437604.hippodrome.zip](https://github.com/psi4/psi4/files/1777480/1cc1.z437604.hippodrome.zip); [1cc1.z437605.hippodrome.zip](https://github.com/psi4/psi4/files/1777481/1cc1.z437605.hippodrome.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/927
https://github.com/psi4/psi4/pull/930:66,Deployability,update,updated,66,## Description; Switches off a few dependancies until they can be updated on the conda channel. Travis CI is hitting time limits fairly frequently when building these. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/930
https://github.com/psi4/psi4/pull/930:35,Integrability,depend,dependancies,35,## Description; Switches off a few dependancies until they can be updated on the conda channel. Travis CI is hitting time limits fairly frequently when building these. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/930
https://github.com/psi4/psi4/issues/932:704,Deployability,install,installed,704,"Hi!. An issue: different results are printed when running the attached files: ; a) python tst.py; It prints [ 2.00000335e+00 2.00000331e+00 ..... -6.65828772e-04 -2.38015245e-03]; for the custom output which I request; (notice that tst.py is attached as tst.py.txt); [tst.py.txt](https://github.com/psi4/psi4/files/1790987/tst.py.txt). b) /opt/anaconda3/bin/psi4 file.dat; which prints; [ 1.99922250e+00 1.99922249e+00 ....... -6.83682794e-04 -2.43598746e-03] ; (notice that file.dat is attached as file.dat.txt); [file.dat.txt](https://github.com/psi4/psi4/files/1790991/file.dat.txt). There is a clear difference in first two values, although tst.py is almost **identical** to file.dat !. PS. Psi4 was installed via Anaconda. Now I'm using a 64-bit Anaconda Python 3.6.3 with the following modules:; [root@*** ***]# conda list | grep ""psi""; chemps2 1.8.4 0 psi4/label/dev; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gau2grid 0.1 0 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; libefp 1.5b1 0 psi4/label/dev; libint 1.2.1 1 psi4/label/dev; libxc 3.0.0 6 psi4/label/dev; pcmsolver 1.1.10 py36_1 psi4/label/dev; psi4 1.2a1.dev781+837e345 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev5 py36_0 psi4/label/dev; simint 0.7 0 psi4. PPS. I've previously followed advices to solve the https://github.com/psi4/psi4/issues/927#issuecomment-370240121 issue which I encountered earlier. Could I have not updated anything ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/932
https://github.com/psi4/psi4/issues/932:1481,Deployability,update,updated,1481,"Hi!. An issue: different results are printed when running the attached files: ; a) python tst.py; It prints [ 2.00000335e+00 2.00000331e+00 ..... -6.65828772e-04 -2.38015245e-03]; for the custom output which I request; (notice that tst.py is attached as tst.py.txt); [tst.py.txt](https://github.com/psi4/psi4/files/1790987/tst.py.txt). b) /opt/anaconda3/bin/psi4 file.dat; which prints; [ 1.99922250e+00 1.99922249e+00 ....... -6.83682794e-04 -2.43598746e-03] ; (notice that file.dat is attached as file.dat.txt); [file.dat.txt](https://github.com/psi4/psi4/files/1790991/file.dat.txt). There is a clear difference in first two values, although tst.py is almost **identical** to file.dat !. PS. Psi4 was installed via Anaconda. Now I'm using a 64-bit Anaconda Python 3.6.3 with the following modules:; [root@*** ***]# conda list | grep ""psi""; chemps2 1.8.4 0 psi4/label/dev; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gau2grid 0.1 0 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; libefp 1.5b1 0 psi4/label/dev; libint 1.2.1 1 psi4/label/dev; libxc 3.0.0 6 psi4/label/dev; pcmsolver 1.1.10 py36_1 psi4/label/dev; psi4 1.2a1.dev781+837e345 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev5 py36_0 psi4/label/dev; simint 0.7 0 psi4. PPS. I've previously followed advices to solve the https://github.com/psi4/psi4/issues/927#issuecomment-370240121 issue which I encountered earlier. Could I have not updated anything ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/932
https://github.com/psi4/psi4/issues/932:598,Usability,clear,clear,598,"Hi!. An issue: different results are printed when running the attached files: ; a) python tst.py; It prints [ 2.00000335e+00 2.00000331e+00 ..... -6.65828772e-04 -2.38015245e-03]; for the custom output which I request; (notice that tst.py is attached as tst.py.txt); [tst.py.txt](https://github.com/psi4/psi4/files/1790987/tst.py.txt). b) /opt/anaconda3/bin/psi4 file.dat; which prints; [ 1.99922250e+00 1.99922249e+00 ....... -6.83682794e-04 -2.43598746e-03] ; (notice that file.dat is attached as file.dat.txt); [file.dat.txt](https://github.com/psi4/psi4/files/1790991/file.dat.txt). There is a clear difference in first two values, although tst.py is almost **identical** to file.dat !. PS. Psi4 was installed via Anaconda. Now I'm using a 64-bit Anaconda Python 3.6.3 with the following modules:; [root@*** ***]# conda list | grep ""psi""; chemps2 1.8.4 0 psi4/label/dev; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gau2grid 0.1 0 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; libefp 1.5b1 0 psi4/label/dev; libint 1.2.1 1 psi4/label/dev; libxc 3.0.0 6 psi4/label/dev; pcmsolver 1.1.10 py36_1 psi4/label/dev; psi4 1.2a1.dev781+837e345 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev5 py36_0 psi4/label/dev; simint 0.7 0 psi4. PPS. I've previously followed advices to solve the https://github.com/psi4/psi4/issues/927#issuecomment-370240121 issue which I encountered earlier. Could I have not updated anything ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/932
https://github.com/psi4/psi4/issues/933:129,Energy Efficiency,Power,PowerShell,129,"I have did a quick research and I couldn't find anything relevant. Are you planning on supporting Windows? Without using Windows PowerShell. Thanks,; João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/933
https://github.com/psi4/psi4/issues/934:766,Availability,avail,available,766,"The following input:. ```; import psi4. mol = psi4.geometry(""""""; He 0 0 0; """"""). wfn = psi4.properties('scf/sto-3g'); ```. fails with the following exception:; ```; Traceback (most recent call last):; File ""/Users/daniel/Gits/psi4/psi4/run_psi4.py"", line 259, in <module>; exec(content); File ""<string>"", line 23, in <module>; File ""/Users/daniel/Gits/psi4/psi4/driver/driver.py"", line 826, in properties; optstash = driver_util._set_convergence_criterion('properties', lowername, 6, 10, 6, 10, 8); File ""/Users/daniel/Gits/psi4/psi4/driver/driver_util.py"", line 78, in _set_convergence_criterion; _method_exists(ptype, method_name); File ""/Users/daniel/Gits/psi4/psi4/driver/driver_util.py"", line 50, in _method_exists; raise ValidationError('%s method ""%s"" is not available.%s' % (Cptype, method_name, alternatives)). ValidationError: Properties method ""scf/sto-3g"" is not available.; ```. How `frequency` uses the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1674) to overcome the issue. The `properties` call in Psi4 is located [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L754) and could use a similar fix (or a nice little function to prevent duplication with `frequency`).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/934
https://github.com/psi4/psi4/issues/934:875,Availability,avail,available,875,"The following input:. ```; import psi4. mol = psi4.geometry(""""""; He 0 0 0; """"""). wfn = psi4.properties('scf/sto-3g'); ```. fails with the following exception:; ```; Traceback (most recent call last):; File ""/Users/daniel/Gits/psi4/psi4/run_psi4.py"", line 259, in <module>; exec(content); File ""<string>"", line 23, in <module>; File ""/Users/daniel/Gits/psi4/psi4/driver/driver.py"", line 826, in properties; optstash = driver_util._set_convergence_criterion('properties', lowername, 6, 10, 6, 10, 8); File ""/Users/daniel/Gits/psi4/psi4/driver/driver_util.py"", line 78, in _set_convergence_criterion; _method_exists(ptype, method_name); File ""/Users/daniel/Gits/psi4/psi4/driver/driver_util.py"", line 50, in _method_exists; raise ValidationError('%s method ""%s"" is not available.%s' % (Cptype, method_name, alternatives)). ValidationError: Properties method ""scf/sto-3g"" is not available.; ```. How `frequency` uses the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1674) to overcome the issue. The `properties` call in Psi4 is located [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L754) and could use a similar fix (or a nice little function to prevent duplication with `frequency`).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/934
https://github.com/psi4/psi4/issues/934:727,Security,Validat,ValidationError,727,"The following input:. ```; import psi4. mol = psi4.geometry(""""""; He 0 0 0; """"""). wfn = psi4.properties('scf/sto-3g'); ```. fails with the following exception:; ```; Traceback (most recent call last):; File ""/Users/daniel/Gits/psi4/psi4/run_psi4.py"", line 259, in <module>; exec(content); File ""<string>"", line 23, in <module>; File ""/Users/daniel/Gits/psi4/psi4/driver/driver.py"", line 826, in properties; optstash = driver_util._set_convergence_criterion('properties', lowername, 6, 10, 6, 10, 8); File ""/Users/daniel/Gits/psi4/psi4/driver/driver_util.py"", line 78, in _set_convergence_criterion; _method_exists(ptype, method_name); File ""/Users/daniel/Gits/psi4/psi4/driver/driver_util.py"", line 50, in _method_exists; raise ValidationError('%s method ""%s"" is not available.%s' % (Cptype, method_name, alternatives)). ValidationError: Properties method ""scf/sto-3g"" is not available.; ```. How `frequency` uses the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1674) to overcome the issue. The `properties` call in Psi4 is located [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L754) and could use a similar fix (or a nice little function to prevent duplication with `frequency`).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/934
https://github.com/psi4/psi4/issues/934:820,Security,Validat,ValidationError,820,"The following input:. ```; import psi4. mol = psi4.geometry(""""""; He 0 0 0; """"""). wfn = psi4.properties('scf/sto-3g'); ```. fails with the following exception:; ```; Traceback (most recent call last):; File ""/Users/daniel/Gits/psi4/psi4/run_psi4.py"", line 259, in <module>; exec(content); File ""<string>"", line 23, in <module>; File ""/Users/daniel/Gits/psi4/psi4/driver/driver.py"", line 826, in properties; optstash = driver_util._set_convergence_criterion('properties', lowername, 6, 10, 6, 10, 8); File ""/Users/daniel/Gits/psi4/psi4/driver/driver_util.py"", line 78, in _set_convergence_criterion; _method_exists(ptype, method_name); File ""/Users/daniel/Gits/psi4/psi4/driver/driver_util.py"", line 50, in _method_exists; raise ValidationError('%s method ""%s"" is not available.%s' % (Cptype, method_name, alternatives)). ValidationError: Properties method ""scf/sto-3g"" is not available.; ```. How `frequency` uses the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1674) to overcome the issue. The `properties` call in Psi4 is located [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L754) and could use a similar fix (or a nice little function to prevent duplication with `frequency`).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/934
https://github.com/psi4/psi4/pull/935:302,Availability,fault,fault,302,## Description; Added missing existence check for each symmetry sub matrix in the advanced Matrix::gemm. (The first Matrix::gemm in matrix.cc). . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Function no longer triggers segmentation fault for empty submatrix. ## Questions; - [ ] Question1. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/935
https://github.com/psi4/psi4/issues/936:137,Availability,error,error,137,"Dear all,. I am new at psi4, and I want to run sapt using the mid-bonds. I pick up the sapt3 example to test it, but I got the following error . Memory set to 953.674 MiB by Python driver.; SAPT does not make use of molecular symmetry, further calculations in C1 point group. Traceback (most recent call last):; File ""/opt/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 3151, in run_sapt; raise ValidationError('SAPT requires active molecule to have 2 fragments, not %s.' % (nfrag)). ValidationError: SAPT requires active molecule to have 2 fragments, not 3. Can somebody tell me what I am doing wrong?. Thanks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/936
https://github.com/psi4/psi4/issues/936:498,Energy Efficiency,energy,energy,498,"Dear all,. I am new at psi4, and I want to run sapt using the mid-bonds. I pick up the sapt3 example to test it, but I got the following error . Memory set to 953.674 MiB by Python driver.; SAPT does not make use of molecular symmetry, further calculations in C1 point group. Traceback (most recent call last):; File ""/opt/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 3151, in run_sapt; raise ValidationError('SAPT requires active molecule to have 2 fragments, not %s.' % (nfrag)). ValidationError: SAPT requires active molecule to have 2 fragments, not 3. Can somebody tell me what I am doing wrong?. Thanks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/936
https://github.com/psi4/psi4/issues/936:524,Energy Efficiency,energy,energy,524,"Dear all,. I am new at psi4, and I want to run sapt using the mid-bonds. I pick up the sapt3 example to test it, but I got the following error . Memory set to 953.674 MiB by Python driver.; SAPT does not make use of molecular symmetry, further calculations in C1 point group. Traceback (most recent call last):; File ""/opt/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 3151, in run_sapt; raise ValidationError('SAPT requires active molecule to have 2 fragments, not %s.' % (nfrag)). ValidationError: SAPT requires active molecule to have 2 fragments, not 3. Can somebody tell me what I am doing wrong?. Thanks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/936
https://github.com/psi4/psi4/issues/936:694,Security,Validat,ValidationError,694,"Dear all,. I am new at psi4, and I want to run sapt using the mid-bonds. I pick up the sapt3 example to test it, but I got the following error . Memory set to 953.674 MiB by Python driver.; SAPT does not make use of molecular symmetry, further calculations in C1 point group. Traceback (most recent call last):; File ""/opt/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 3151, in run_sapt; raise ValidationError('SAPT requires active molecule to have 2 fragments, not %s.' % (nfrag)). ValidationError: SAPT requires active molecule to have 2 fragments, not 3. Can somebody tell me what I am doing wrong?. Thanks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/936
https://github.com/psi4/psi4/issues/936:783,Security,Validat,ValidationError,783,"Dear all,. I am new at psi4, and I want to run sapt using the mid-bonds. I pick up the sapt3 example to test it, but I got the following error . Memory set to 953.674 MiB by Python driver.; SAPT does not make use of molecular symmetry, further calculations in C1 point group. Traceback (most recent call last):; File ""/opt/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 3151, in run_sapt; raise ValidationError('SAPT requires active molecule to have 2 fragments, not %s.' % (nfrag)). ValidationError: SAPT requires active molecule to have 2 fragments, not 3. Can somebody tell me what I am doing wrong?. Thanks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/936
https://github.com/psi4/psi4/issues/936:104,Testability,test,test,104,"Dear all,. I am new at psi4, and I want to run sapt using the mid-bonds. I pick up the sapt3 example to test it, but I got the following error . Memory set to 953.674 MiB by Python driver.; SAPT does not make use of molecular symmetry, further calculations in C1 point group. Traceback (most recent call last):; File ""/opt/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 3151, in run_sapt; raise ValidationError('SAPT requires active molecule to have 2 fragments, not %s.' % (nfrag)). ValidationError: SAPT requires active molecule to have 2 fragments, not 3. Can somebody tell me what I am doing wrong?. Thanks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/936
https://github.com/psi4/psi4/pull/937:346,Integrability,contract,contraction,346,"## Description; Minor ECP fixes, so that more ECP's from EMSL Basis set exchange work out of the box. See issue #926 . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Extended naming tables to include H-shell (Stuttgart-Cologne ECP's eg. for Hg need it); - [x] Trapping ""0.0"" in contraction coefficients. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/937
https://github.com/psi4/psi4/pull/937:234,Modifiability,Extend,Extended,234,"## Description; Minor ECP fixes, so that more ECP's from EMSL Basis set exchange work out of the box. See issue #926 . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Extended naming tables to include H-shell (Stuttgart-Cologne ECP's eg. for Hg need it); - [x] Trapping ""0.0"" in contraction coefficients. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/937
https://github.com/psi4/psi4/issues/938:267,Energy Efficiency,energy,energy,267,"Dear all, . I started to use psi4 last week, to run the sapt calculation, but maybe I am doing something wrong because the results are not what I expected. I run the system H2O-H2 using the following input:. #! SAPT0 aug-cc-pVQZ computation of the h2o-h2 interaction energy,. molecule {; 0 1; O	-0.00497112320277 0.00000000000 -0.00324242498004 ; H	-0.00635802533704 0.00000000000 1.80786893363963 ; H	1.74732087529567 0.00000000000 -0.46100056491475 ; --; 0 1; H	-5.31435149256189 0.00000000000 -3.57188290957646 ; H	-4.14192596170216 0.00000000000 -2.81859073952601 ; units angstrom; }. set {; basis aug-cc-pvqz; guess sad; scf_type df; puream true; print 1; basis_guess true; }. energy('sapt2+3(ccd)'). Eelst = psi4.get_variable(""SAPT ELST ENERGY""); Eexch = psi4.get_variable(""SAPT EXCH ENERGY""); Eind = psi4.get_variable(""SAPT IND ENERGY""); Edisp = psi4.get_variable(""SAPT DISP ENERGY""); ET = psi4.get_variable(""SAPT0 TOTAL ENERGY""). And I got the following results:. Total HF -0.23285527 [mEh] -0.14611889 [kcal/mol] -0.61136150 [kJ/mol]; Total SAPT0 -0.31237291 [mEh] -0.19601697 [kcal/mol] -0.82013509 [kJ/mol]; Total SAPT2 -0.22375789 [mEh] -0.14041020 [kcal/mol] -0.58747633 [kJ/mol]; Total SAPT2+ -0.21063053 [mEh] -0.13217266 [kcal/mol] -0.55301046 [kJ/mol]; Total SAPT2+(3) -0.18566214 [mEh] -0.11650476 [kcal/mol] -0.48745596 [kJ/mol]; Total SAPT2+3 -0.18495027 [mEh] -0.11605805 [kcal/mol] -0.48558693 [kJ/mol]; Total SAPT2+(CCD) -0.19261506 [mEh] -0.12086778 [kcal/mol] -0.50571084 [kJ/mol]; Total SAPT2+(3)(CCD) -0.16764667 [mEh] -0.10519988 [kcal/mol] -0.44015633 [kJ/mol]; Total SAPT2+3(CCD) -0.16693480 [mEh] -0.10475317 [kcal/mol] -0.43828731 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.21426853 [mEh] -0.13445554 [kcal/mol] -0.56256203 [kJ/mol]; Exchange sSAPT0 0.00071398 [mEh] 0.00044803 [kcal/mol] 0.00187454 [kJ/mol]; Induction sSAPT0 -0.01930071 [mEh] -0.01211138 [kcal/mol] -0.05067402 [kJ/mol]; Dispersion sSAPT0 -0.07951765 [mEh] -0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/938
https://github.com/psi4/psi4/issues/938:682,Energy Efficiency,energy,energy,682,"Dear all, . I started to use psi4 last week, to run the sapt calculation, but maybe I am doing something wrong because the results are not what I expected. I run the system H2O-H2 using the following input:. #! SAPT0 aug-cc-pVQZ computation of the h2o-h2 interaction energy,. molecule {; 0 1; O	-0.00497112320277 0.00000000000 -0.00324242498004 ; H	-0.00635802533704 0.00000000000 1.80786893363963 ; H	1.74732087529567 0.00000000000 -0.46100056491475 ; --; 0 1; H	-5.31435149256189 0.00000000000 -3.57188290957646 ; H	-4.14192596170216 0.00000000000 -2.81859073952601 ; units angstrom; }. set {; basis aug-cc-pvqz; guess sad; scf_type df; puream true; print 1; basis_guess true; }. energy('sapt2+3(ccd)'). Eelst = psi4.get_variable(""SAPT ELST ENERGY""); Eexch = psi4.get_variable(""SAPT EXCH ENERGY""); Eind = psi4.get_variable(""SAPT IND ENERGY""); Edisp = psi4.get_variable(""SAPT DISP ENERGY""); ET = psi4.get_variable(""SAPT0 TOTAL ENERGY""). And I got the following results:. Total HF -0.23285527 [mEh] -0.14611889 [kcal/mol] -0.61136150 [kJ/mol]; Total SAPT0 -0.31237291 [mEh] -0.19601697 [kcal/mol] -0.82013509 [kJ/mol]; Total SAPT2 -0.22375789 [mEh] -0.14041020 [kcal/mol] -0.58747633 [kJ/mol]; Total SAPT2+ -0.21063053 [mEh] -0.13217266 [kcal/mol] -0.55301046 [kJ/mol]; Total SAPT2+(3) -0.18566214 [mEh] -0.11650476 [kcal/mol] -0.48745596 [kJ/mol]; Total SAPT2+3 -0.18495027 [mEh] -0.11605805 [kcal/mol] -0.48558693 [kJ/mol]; Total SAPT2+(CCD) -0.19261506 [mEh] -0.12086778 [kcal/mol] -0.50571084 [kJ/mol]; Total SAPT2+(3)(CCD) -0.16764667 [mEh] -0.10519988 [kcal/mol] -0.44015633 [kJ/mol]; Total SAPT2+3(CCD) -0.16693480 [mEh] -0.10475317 [kcal/mol] -0.43828731 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.21426853 [mEh] -0.13445554 [kcal/mol] -0.56256203 [kJ/mol]; Exchange sSAPT0 0.00071398 [mEh] 0.00044803 [kcal/mol] 0.00187454 [kJ/mol]; Induction sSAPT0 -0.01930071 [mEh] -0.01211138 [kcal/mol] -0.05067402 [kJ/mol]; Dispersion sSAPT0 -0.07951765 [mEh] -0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/938
https://github.com/psi4/psi4/issues/938:743,Energy Efficiency,ENERGY,ENERGY,743,"Dear all, . I started to use psi4 last week, to run the sapt calculation, but maybe I am doing something wrong because the results are not what I expected. I run the system H2O-H2 using the following input:. #! SAPT0 aug-cc-pVQZ computation of the h2o-h2 interaction energy,. molecule {; 0 1; O	-0.00497112320277 0.00000000000 -0.00324242498004 ; H	-0.00635802533704 0.00000000000 1.80786893363963 ; H	1.74732087529567 0.00000000000 -0.46100056491475 ; --; 0 1; H	-5.31435149256189 0.00000000000 -3.57188290957646 ; H	-4.14192596170216 0.00000000000 -2.81859073952601 ; units angstrom; }. set {; basis aug-cc-pvqz; guess sad; scf_type df; puream true; print 1; basis_guess true; }. energy('sapt2+3(ccd)'). Eelst = psi4.get_variable(""SAPT ELST ENERGY""); Eexch = psi4.get_variable(""SAPT EXCH ENERGY""); Eind = psi4.get_variable(""SAPT IND ENERGY""); Edisp = psi4.get_variable(""SAPT DISP ENERGY""); ET = psi4.get_variable(""SAPT0 TOTAL ENERGY""). And I got the following results:. Total HF -0.23285527 [mEh] -0.14611889 [kcal/mol] -0.61136150 [kJ/mol]; Total SAPT0 -0.31237291 [mEh] -0.19601697 [kcal/mol] -0.82013509 [kJ/mol]; Total SAPT2 -0.22375789 [mEh] -0.14041020 [kcal/mol] -0.58747633 [kJ/mol]; Total SAPT2+ -0.21063053 [mEh] -0.13217266 [kcal/mol] -0.55301046 [kJ/mol]; Total SAPT2+(3) -0.18566214 [mEh] -0.11650476 [kcal/mol] -0.48745596 [kJ/mol]; Total SAPT2+3 -0.18495027 [mEh] -0.11605805 [kcal/mol] -0.48558693 [kJ/mol]; Total SAPT2+(CCD) -0.19261506 [mEh] -0.12086778 [kcal/mol] -0.50571084 [kJ/mol]; Total SAPT2+(3)(CCD) -0.16764667 [mEh] -0.10519988 [kcal/mol] -0.44015633 [kJ/mol]; Total SAPT2+3(CCD) -0.16693480 [mEh] -0.10475317 [kcal/mol] -0.43828731 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.21426853 [mEh] -0.13445554 [kcal/mol] -0.56256203 [kJ/mol]; Exchange sSAPT0 0.00071398 [mEh] 0.00044803 [kcal/mol] 0.00187454 [kJ/mol]; Induction sSAPT0 -0.01930071 [mEh] -0.01211138 [kcal/mol] -0.05067402 [kJ/mol]; Dispersion sSAPT0 -0.07951765 [mEh] -0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/938
https://github.com/psi4/psi4/issues/938:790,Energy Efficiency,ENERGY,ENERGY,790,"Dear all, . I started to use psi4 last week, to run the sapt calculation, but maybe I am doing something wrong because the results are not what I expected. I run the system H2O-H2 using the following input:. #! SAPT0 aug-cc-pVQZ computation of the h2o-h2 interaction energy,. molecule {; 0 1; O	-0.00497112320277 0.00000000000 -0.00324242498004 ; H	-0.00635802533704 0.00000000000 1.80786893363963 ; H	1.74732087529567 0.00000000000 -0.46100056491475 ; --; 0 1; H	-5.31435149256189 0.00000000000 -3.57188290957646 ; H	-4.14192596170216 0.00000000000 -2.81859073952601 ; units angstrom; }. set {; basis aug-cc-pvqz; guess sad; scf_type df; puream true; print 1; basis_guess true; }. energy('sapt2+3(ccd)'). Eelst = psi4.get_variable(""SAPT ELST ENERGY""); Eexch = psi4.get_variable(""SAPT EXCH ENERGY""); Eind = psi4.get_variable(""SAPT IND ENERGY""); Edisp = psi4.get_variable(""SAPT DISP ENERGY""); ET = psi4.get_variable(""SAPT0 TOTAL ENERGY""). And I got the following results:. Total HF -0.23285527 [mEh] -0.14611889 [kcal/mol] -0.61136150 [kJ/mol]; Total SAPT0 -0.31237291 [mEh] -0.19601697 [kcal/mol] -0.82013509 [kJ/mol]; Total SAPT2 -0.22375789 [mEh] -0.14041020 [kcal/mol] -0.58747633 [kJ/mol]; Total SAPT2+ -0.21063053 [mEh] -0.13217266 [kcal/mol] -0.55301046 [kJ/mol]; Total SAPT2+(3) -0.18566214 [mEh] -0.11650476 [kcal/mol] -0.48745596 [kJ/mol]; Total SAPT2+3 -0.18495027 [mEh] -0.11605805 [kcal/mol] -0.48558693 [kJ/mol]; Total SAPT2+(CCD) -0.19261506 [mEh] -0.12086778 [kcal/mol] -0.50571084 [kJ/mol]; Total SAPT2+(3)(CCD) -0.16764667 [mEh] -0.10519988 [kcal/mol] -0.44015633 [kJ/mol]; Total SAPT2+3(CCD) -0.16693480 [mEh] -0.10475317 [kcal/mol] -0.43828731 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.21426853 [mEh] -0.13445554 [kcal/mol] -0.56256203 [kJ/mol]; Exchange sSAPT0 0.00071398 [mEh] 0.00044803 [kcal/mol] 0.00187454 [kJ/mol]; Induction sSAPT0 -0.01930071 [mEh] -0.01211138 [kcal/mol] -0.05067402 [kJ/mol]; Dispersion sSAPT0 -0.07951765 [mEh] -0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/938
https://github.com/psi4/psi4/issues/938:835,Energy Efficiency,ENERGY,ENERGY,835,"Dear all, . I started to use psi4 last week, to run the sapt calculation, but maybe I am doing something wrong because the results are not what I expected. I run the system H2O-H2 using the following input:. #! SAPT0 aug-cc-pVQZ computation of the h2o-h2 interaction energy,. molecule {; 0 1; O	-0.00497112320277 0.00000000000 -0.00324242498004 ; H	-0.00635802533704 0.00000000000 1.80786893363963 ; H	1.74732087529567 0.00000000000 -0.46100056491475 ; --; 0 1; H	-5.31435149256189 0.00000000000 -3.57188290957646 ; H	-4.14192596170216 0.00000000000 -2.81859073952601 ; units angstrom; }. set {; basis aug-cc-pvqz; guess sad; scf_type df; puream true; print 1; basis_guess true; }. energy('sapt2+3(ccd)'). Eelst = psi4.get_variable(""SAPT ELST ENERGY""); Eexch = psi4.get_variable(""SAPT EXCH ENERGY""); Eind = psi4.get_variable(""SAPT IND ENERGY""); Edisp = psi4.get_variable(""SAPT DISP ENERGY""); ET = psi4.get_variable(""SAPT0 TOTAL ENERGY""). And I got the following results:. Total HF -0.23285527 [mEh] -0.14611889 [kcal/mol] -0.61136150 [kJ/mol]; Total SAPT0 -0.31237291 [mEh] -0.19601697 [kcal/mol] -0.82013509 [kJ/mol]; Total SAPT2 -0.22375789 [mEh] -0.14041020 [kcal/mol] -0.58747633 [kJ/mol]; Total SAPT2+ -0.21063053 [mEh] -0.13217266 [kcal/mol] -0.55301046 [kJ/mol]; Total SAPT2+(3) -0.18566214 [mEh] -0.11650476 [kcal/mol] -0.48745596 [kJ/mol]; Total SAPT2+3 -0.18495027 [mEh] -0.11605805 [kcal/mol] -0.48558693 [kJ/mol]; Total SAPT2+(CCD) -0.19261506 [mEh] -0.12086778 [kcal/mol] -0.50571084 [kJ/mol]; Total SAPT2+(3)(CCD) -0.16764667 [mEh] -0.10519988 [kcal/mol] -0.44015633 [kJ/mol]; Total SAPT2+3(CCD) -0.16693480 [mEh] -0.10475317 [kcal/mol] -0.43828731 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.21426853 [mEh] -0.13445554 [kcal/mol] -0.56256203 [kJ/mol]; Exchange sSAPT0 0.00071398 [mEh] 0.00044803 [kcal/mol] 0.00187454 [kJ/mol]; Induction sSAPT0 -0.01930071 [mEh] -0.01211138 [kcal/mol] -0.05067402 [kJ/mol]; Dispersion sSAPT0 -0.07951765 [mEh] -0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/938
https://github.com/psi4/psi4/issues/938:882,Energy Efficiency,ENERGY,ENERGY,882,"Dear all, . I started to use psi4 last week, to run the sapt calculation, but maybe I am doing something wrong because the results are not what I expected. I run the system H2O-H2 using the following input:. #! SAPT0 aug-cc-pVQZ computation of the h2o-h2 interaction energy,. molecule {; 0 1; O	-0.00497112320277 0.00000000000 -0.00324242498004 ; H	-0.00635802533704 0.00000000000 1.80786893363963 ; H	1.74732087529567 0.00000000000 -0.46100056491475 ; --; 0 1; H	-5.31435149256189 0.00000000000 -3.57188290957646 ; H	-4.14192596170216 0.00000000000 -2.81859073952601 ; units angstrom; }. set {; basis aug-cc-pvqz; guess sad; scf_type df; puream true; print 1; basis_guess true; }. energy('sapt2+3(ccd)'). Eelst = psi4.get_variable(""SAPT ELST ENERGY""); Eexch = psi4.get_variable(""SAPT EXCH ENERGY""); Eind = psi4.get_variable(""SAPT IND ENERGY""); Edisp = psi4.get_variable(""SAPT DISP ENERGY""); ET = psi4.get_variable(""SAPT0 TOTAL ENERGY""). And I got the following results:. Total HF -0.23285527 [mEh] -0.14611889 [kcal/mol] -0.61136150 [kJ/mol]; Total SAPT0 -0.31237291 [mEh] -0.19601697 [kcal/mol] -0.82013509 [kJ/mol]; Total SAPT2 -0.22375789 [mEh] -0.14041020 [kcal/mol] -0.58747633 [kJ/mol]; Total SAPT2+ -0.21063053 [mEh] -0.13217266 [kcal/mol] -0.55301046 [kJ/mol]; Total SAPT2+(3) -0.18566214 [mEh] -0.11650476 [kcal/mol] -0.48745596 [kJ/mol]; Total SAPT2+3 -0.18495027 [mEh] -0.11605805 [kcal/mol] -0.48558693 [kJ/mol]; Total SAPT2+(CCD) -0.19261506 [mEh] -0.12086778 [kcal/mol] -0.50571084 [kJ/mol]; Total SAPT2+(3)(CCD) -0.16764667 [mEh] -0.10519988 [kcal/mol] -0.44015633 [kJ/mol]; Total SAPT2+3(CCD) -0.16693480 [mEh] -0.10475317 [kcal/mol] -0.43828731 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.21426853 [mEh] -0.13445554 [kcal/mol] -0.56256203 [kJ/mol]; Exchange sSAPT0 0.00071398 [mEh] 0.00044803 [kcal/mol] 0.00187454 [kJ/mol]; Induction sSAPT0 -0.01930071 [mEh] -0.01211138 [kcal/mol] -0.05067402 [kJ/mol]; Dispersion sSAPT0 -0.07951765 [mEh] -0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/938
https://github.com/psi4/psi4/issues/938:928,Energy Efficiency,ENERGY,ENERGY,928,"Dear all, . I started to use psi4 last week, to run the sapt calculation, but maybe I am doing something wrong because the results are not what I expected. I run the system H2O-H2 using the following input:. #! SAPT0 aug-cc-pVQZ computation of the h2o-h2 interaction energy,. molecule {; 0 1; O	-0.00497112320277 0.00000000000 -0.00324242498004 ; H	-0.00635802533704 0.00000000000 1.80786893363963 ; H	1.74732087529567 0.00000000000 -0.46100056491475 ; --; 0 1; H	-5.31435149256189 0.00000000000 -3.57188290957646 ; H	-4.14192596170216 0.00000000000 -2.81859073952601 ; units angstrom; }. set {; basis aug-cc-pvqz; guess sad; scf_type df; puream true; print 1; basis_guess true; }. energy('sapt2+3(ccd)'). Eelst = psi4.get_variable(""SAPT ELST ENERGY""); Eexch = psi4.get_variable(""SAPT EXCH ENERGY""); Eind = psi4.get_variable(""SAPT IND ENERGY""); Edisp = psi4.get_variable(""SAPT DISP ENERGY""); ET = psi4.get_variable(""SAPT0 TOTAL ENERGY""). And I got the following results:. Total HF -0.23285527 [mEh] -0.14611889 [kcal/mol] -0.61136150 [kJ/mol]; Total SAPT0 -0.31237291 [mEh] -0.19601697 [kcal/mol] -0.82013509 [kJ/mol]; Total SAPT2 -0.22375789 [mEh] -0.14041020 [kcal/mol] -0.58747633 [kJ/mol]; Total SAPT2+ -0.21063053 [mEh] -0.13217266 [kcal/mol] -0.55301046 [kJ/mol]; Total SAPT2+(3) -0.18566214 [mEh] -0.11650476 [kcal/mol] -0.48745596 [kJ/mol]; Total SAPT2+3 -0.18495027 [mEh] -0.11605805 [kcal/mol] -0.48558693 [kJ/mol]; Total SAPT2+(CCD) -0.19261506 [mEh] -0.12086778 [kcal/mol] -0.50571084 [kJ/mol]; Total SAPT2+(3)(CCD) -0.16764667 [mEh] -0.10519988 [kcal/mol] -0.44015633 [kJ/mol]; Total SAPT2+3(CCD) -0.16693480 [mEh] -0.10475317 [kcal/mol] -0.43828731 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.21426853 [mEh] -0.13445554 [kcal/mol] -0.56256203 [kJ/mol]; Exchange sSAPT0 0.00071398 [mEh] 0.00044803 [kcal/mol] 0.00187454 [kJ/mol]; Induction sSAPT0 -0.01930071 [mEh] -0.01211138 [kcal/mol] -0.05067402 [kJ/mol]; Dispersion sSAPT0 -0.07951765 [mEh] -0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/938
https://github.com/psi4/psi4/issues/938:2126,Energy Efficiency,energy,energy,2126,"al/mol] -0.58747633 [kJ/mol]; Total SAPT2+ -0.21063053 [mEh] -0.13217266 [kcal/mol] -0.55301046 [kJ/mol]; Total SAPT2+(3) -0.18566214 [mEh] -0.11650476 [kcal/mol] -0.48745596 [kJ/mol]; Total SAPT2+3 -0.18495027 [mEh] -0.11605805 [kcal/mol] -0.48558693 [kJ/mol]; Total SAPT2+(CCD) -0.19261506 [mEh] -0.12086778 [kcal/mol] -0.50571084 [kJ/mol]; Total SAPT2+(3)(CCD) -0.16764667 [mEh] -0.10519988 [kcal/mol] -0.44015633 [kJ/mol]; Total SAPT2+3(CCD) -0.16693480 [mEh] -0.10475317 [kcal/mol] -0.43828731 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.21426853 [mEh] -0.13445554 [kcal/mol] -0.56256203 [kJ/mol]; Exchange sSAPT0 0.00071398 [mEh] 0.00044803 [kcal/mol] 0.00187454 [kJ/mol]; Induction sSAPT0 -0.01930071 [mEh] -0.01211138 [kcal/mol] -0.05067402 [kJ/mol]; Dispersion sSAPT0 -0.07951765 [mEh] -0.04989808 [kcal/mol] -0.20877358 [kJ/mol]; Total sSAPT0 -0.31237291 [mEh] -0.19601697 [kcal/mol] -0.82013509 [kJ/mol]. But the energy should the higher, then I include the mid-bond to try to solve this problema . @He -2.068477419249695 0.0 -1.410916582253025 . and the results are, almost, the same:. Total HF -0.24001137 [mEh] -0.15060942 [kcal/mol] -0.63014986 [kJ/mol]; Total SAPT0 -0.31952707 [mEh] -0.20050627 [kcal/mol] -0.83891833 [kJ/mol]; Total SAPT2 -0.23090246 [mEh] -0.14489348 [kcal/mol] -0.60623440 [kJ/mol]; Total SAPT2+ -0.21777522 [mEh] -0.13665602 [kcal/mol] -0.57176884 [kJ/mol]; Total SAPT2+(3) -0.19281865 [mEh] -0.12099553 [kcal/mol] -0.50624536 [kJ/mol]; Total SAPT2+3 -0.19210713 [mEh] -0.12054905 [kcal/mol] -0.50437726 [kJ/mol]; Total SAPT2+(CCD) -0.19975973 [mEh] -0.12535113 [kcal/mol] -0.52446918 [kJ/mol]; Total SAPT2+(3)(CCD) -0.17480316 [mEh] -0.10969064 [kcal/mol] -0.45894570 [kJ/mol]; Total SAPT2+3(CCD) -0.17409164 [mEh] -0.10924416 [kcal/mol] -0.45707760 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.21424647 [mEh] -0.13444170 [kcal/mol] -0.56250411 [kJ/mol]; Exchange sSAPT0 0.00070499 [mEh",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/938
https://github.com/psi4/psi4/issues/939:308,Security,access,accessible,308,"Hi Daniel, ; It would be a good idea to allow SAPT(DFT) calculations without the AC, but this does not seem to be a possibility at the moment as the GRAC shifts are needed and they need to be non-zero. . GRAC should be an optional part of the SAPT(DFT) calculation. And all parameters in GRAC should be user accessible (this is normally the case in other codes) so the way the splicing is done can be altered if needed. At present only the shifts are user-defined. This would allow range-separated functionals to be used in SAPT(DFT). Right now it does not seem like they can. ; Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/939
https://github.com/psi4/psi4/issues/940:0,Performance,Optimiz,Optimize,0,"Optimize and compute vibrational frequencies of a molecule: ; ```python; # test.py; import psi4. print(psi4.__version__). psi4.geometry('H -0.4 0 0\nH 0.4 0 0'); psi4.opt('HF/3-21G'); _, wfn = psi4.freq('HF/3-21G', return_wfn=True). print(wfn.hessian().to_array()); print(wfn.frequencies().to_array()); print(wfn.normalmodes()); ```. The hessian matrix and frequencies are in `Wafefucntion` object, as expected, but the normal mode vectors are missing, i.e. `wfn.normalmodes()` return `None`. ```bash; $ python test.py ; 1.2a1.dev781. ... skipped ... [[ 4.13907957e-01 -1.38565530e-17 -9.84797134e-18 -4.13907957e-01; 1.38565530e-17 9.84797134e-18]; [-1.38565530e-17 -7.17030485e-05 5.29623161e-18 1.38565530e-17; 7.17030485e-05 -5.29623161e-18]; [-9.84797134e-18 5.29623161e-18 -7.17030485e-05 9.84797134e-18; -5.29623161e-18 7.17030485e-05]; [-4.13907957e-01 1.38565530e-17 9.84797134e-18 4.13907957e-01; -1.38565530e-17 -9.84797134e-18]; [ 1.38565530e-17 7.17030485e-05 -5.29623161e-18 -1.38565530e-17; -7.17030485e-05 5.29623161e-18]; [ 9.84797134e-18 -5.29623161e-18 7.17030485e-05 -9.84797134e-18; 5.29623161e-18 -7.17030485e-05]]; [4658.84858151]; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/940
https://github.com/psi4/psi4/issues/940:75,Testability,test,test,75,"Optimize and compute vibrational frequencies of a molecule: ; ```python; # test.py; import psi4. print(psi4.__version__). psi4.geometry('H -0.4 0 0\nH 0.4 0 0'); psi4.opt('HF/3-21G'); _, wfn = psi4.freq('HF/3-21G', return_wfn=True). print(wfn.hessian().to_array()); print(wfn.frequencies().to_array()); print(wfn.normalmodes()); ```. The hessian matrix and frequencies are in `Wafefucntion` object, as expected, but the normal mode vectors are missing, i.e. `wfn.normalmodes()` return `None`. ```bash; $ python test.py ; 1.2a1.dev781. ... skipped ... [[ 4.13907957e-01 -1.38565530e-17 -9.84797134e-18 -4.13907957e-01; 1.38565530e-17 9.84797134e-18]; [-1.38565530e-17 -7.17030485e-05 5.29623161e-18 1.38565530e-17; 7.17030485e-05 -5.29623161e-18]; [-9.84797134e-18 5.29623161e-18 -7.17030485e-05 9.84797134e-18; -5.29623161e-18 7.17030485e-05]; [-4.13907957e-01 1.38565530e-17 9.84797134e-18 4.13907957e-01; -1.38565530e-17 -9.84797134e-18]; [ 1.38565530e-17 7.17030485e-05 -5.29623161e-18 -1.38565530e-17; -7.17030485e-05 5.29623161e-18]; [ 9.84797134e-18 -5.29623161e-18 7.17030485e-05 -9.84797134e-18; 5.29623161e-18 -7.17030485e-05]]; [4658.84858151]; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/940
https://github.com/psi4/psi4/issues/940:511,Testability,test,test,511,"Optimize and compute vibrational frequencies of a molecule: ; ```python; # test.py; import psi4. print(psi4.__version__). psi4.geometry('H -0.4 0 0\nH 0.4 0 0'); psi4.opt('HF/3-21G'); _, wfn = psi4.freq('HF/3-21G', return_wfn=True). print(wfn.hessian().to_array()); print(wfn.frequencies().to_array()); print(wfn.normalmodes()); ```. The hessian matrix and frequencies are in `Wafefucntion` object, as expected, but the normal mode vectors are missing, i.e. `wfn.normalmodes()` return `None`. ```bash; $ python test.py ; 1.2a1.dev781. ... skipped ... [[ 4.13907957e-01 -1.38565530e-17 -9.84797134e-18 -4.13907957e-01; 1.38565530e-17 9.84797134e-18]; [-1.38565530e-17 -7.17030485e-05 5.29623161e-18 1.38565530e-17; 7.17030485e-05 -5.29623161e-18]; [-9.84797134e-18 5.29623161e-18 -7.17030485e-05 9.84797134e-18; -5.29623161e-18 7.17030485e-05]; [-4.13907957e-01 1.38565530e-17 9.84797134e-18 4.13907957e-01; -1.38565530e-17 -9.84797134e-18]; [ 1.38565530e-17 7.17030485e-05 -5.29623161e-18 -1.38565530e-17; -7.17030485e-05 5.29623161e-18]; [ 9.84797134e-18 -5.29623161e-18 7.17030485e-05 -9.84797134e-18; 5.29623161e-18 -7.17030485e-05]]; [4658.84858151]; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/940
https://github.com/psi4/psi4/pull/942:49,Modifiability,flexible,flexible,49,"## Description; Makes SAPT(DFT) quite a bit more flexible by allowing a potential user to build SCF wavefunctions (any will work, HF or DFT). An example can be found in `tests/sapt-dft-api`. I have also added LRC references with SAPT(DFT). @ajmisquitta please checkout `tests/sapt-dft-lrc` and verify these are working as expected. Closes #939 . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Users can now call SAPT(DFT) directly with reference wave functions. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/942
https://github.com/psi4/psi4/pull/942:170,Testability,test,tests,170,"## Description; Makes SAPT(DFT) quite a bit more flexible by allowing a potential user to build SCF wavefunctions (any will work, HF or DFT). An example can be found in `tests/sapt-dft-api`. I have also added LRC references with SAPT(DFT). @ajmisquitta please checkout `tests/sapt-dft-lrc` and verify these are working as expected. Closes #939 . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Users can now call SAPT(DFT) directly with reference wave functions. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/942
https://github.com/psi4/psi4/pull/942:270,Testability,test,tests,270,"## Description; Makes SAPT(DFT) quite a bit more flexible by allowing a potential user to build SCF wavefunctions (any will work, HF or DFT). An example can be found in `tests/sapt-dft-api`. I have also added LRC references with SAPT(DFT). @ajmisquitta please checkout `tests/sapt-dft-lrc` and verify these are working as expected. Closes #939 . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Users can now call SAPT(DFT) directly with reference wave functions. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/942
https://github.com/psi4/psi4/issues/943:693,Deployability,install,installed,693,"Presently, there are rather few `compare_values()` statements in the `tests/cc*/input.dat` test cases. This is because there's a very thorough [perl script](https://github.com/psi4/psi4/blob/master/tests/psitest.pl) that parses the output file and parses the alongside `reference.dat` file and compares everything in sight to a sensible number of decimal places. Works great (except when we accidentally break its arrangements and then everything trivially passes for months at a time until someone notices) in Make or CMake testing framework for checking CC. _Doesn't_ work great to check that psivar coverage is good for the cc* modules or independently of the ctest testing macros or in an installed (as opposed to source) testing env w/o reference.dat files or without perl. I think the in-file compare_values() testing is an idea that has proven its worth. I suggest that:; 1. the key reference values from each `reference.dat` be collected into the various `cc*/input.dat` tests,; 2. more psivars be defined as needed in the `psi4/src/psi4/cc*` modules, ; 3. a `compare_coupledcluster()` be written to take in a wfn and a structure of reference values and apply all the checks that the perl script currently does through compare_values(), compare_arrays(), etc. (3) is negotiable; it's just my current idea on how to move toward compare_values() without losing coverage. Primary aims are to make coupled-cluster tests suitable for installed testing (`assert compare_values(...)` works great in pytest) and increase coupled-cluster psivar usage (@amjames already did one follow-up pass) for the QCSchema project. Further note that in the near future, psivars need to be on Wfn, *not* `P::e`. Might be worth multiple ppl working to spread the pain. This hasn't been run by @lothian, so he may have other ideas.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/943
https://github.com/psi4/psi4/issues/943:1437,Deployability,install,installed,1437,"Presently, there are rather few `compare_values()` statements in the `tests/cc*/input.dat` test cases. This is because there's a very thorough [perl script](https://github.com/psi4/psi4/blob/master/tests/psitest.pl) that parses the output file and parses the alongside `reference.dat` file and compares everything in sight to a sensible number of decimal places. Works great (except when we accidentally break its arrangements and then everything trivially passes for months at a time until someone notices) in Make or CMake testing framework for checking CC. _Doesn't_ work great to check that psivar coverage is good for the cc* modules or independently of the ctest testing macros or in an installed (as opposed to source) testing env w/o reference.dat files or without perl. I think the in-file compare_values() testing is an idea that has proven its worth. I suggest that:; 1. the key reference values from each `reference.dat` be collected into the various `cc*/input.dat` tests,; 2. more psivars be defined as needed in the `psi4/src/psi4/cc*` modules, ; 3. a `compare_coupledcluster()` be written to take in a wfn and a structure of reference values and apply all the checks that the perl script currently does through compare_values(), compare_arrays(), etc. (3) is negotiable; it's just my current idea on how to move toward compare_values() without losing coverage. Primary aims are to make coupled-cluster tests suitable for installed testing (`assert compare_values(...)` works great in pytest) and increase coupled-cluster psivar usage (@amjames already did one follow-up pass) for the QCSchema project. Further note that in the near future, psivars need to be on Wfn, *not* `P::e`. Might be worth multiple ppl working to spread the pain. This hasn't been run by @lothian, so he may have other ideas.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/943
https://github.com/psi4/psi4/issues/943:70,Testability,test,tests,70,"Presently, there are rather few `compare_values()` statements in the `tests/cc*/input.dat` test cases. This is because there's a very thorough [perl script](https://github.com/psi4/psi4/blob/master/tests/psitest.pl) that parses the output file and parses the alongside `reference.dat` file and compares everything in sight to a sensible number of decimal places. Works great (except when we accidentally break its arrangements and then everything trivially passes for months at a time until someone notices) in Make or CMake testing framework for checking CC. _Doesn't_ work great to check that psivar coverage is good for the cc* modules or independently of the ctest testing macros or in an installed (as opposed to source) testing env w/o reference.dat files or without perl. I think the in-file compare_values() testing is an idea that has proven its worth. I suggest that:; 1. the key reference values from each `reference.dat` be collected into the various `cc*/input.dat` tests,; 2. more psivars be defined as needed in the `psi4/src/psi4/cc*` modules, ; 3. a `compare_coupledcluster()` be written to take in a wfn and a structure of reference values and apply all the checks that the perl script currently does through compare_values(), compare_arrays(), etc. (3) is negotiable; it's just my current idea on how to move toward compare_values() without losing coverage. Primary aims are to make coupled-cluster tests suitable for installed testing (`assert compare_values(...)` works great in pytest) and increase coupled-cluster psivar usage (@amjames already did one follow-up pass) for the QCSchema project. Further note that in the near future, psivars need to be on Wfn, *not* `P::e`. Might be worth multiple ppl working to spread the pain. This hasn't been run by @lothian, so he may have other ideas.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/943
https://github.com/psi4/psi4/issues/943:91,Testability,test,test,91,"Presently, there are rather few `compare_values()` statements in the `tests/cc*/input.dat` test cases. This is because there's a very thorough [perl script](https://github.com/psi4/psi4/blob/master/tests/psitest.pl) that parses the output file and parses the alongside `reference.dat` file and compares everything in sight to a sensible number of decimal places. Works great (except when we accidentally break its arrangements and then everything trivially passes for months at a time until someone notices) in Make or CMake testing framework for checking CC. _Doesn't_ work great to check that psivar coverage is good for the cc* modules or independently of the ctest testing macros or in an installed (as opposed to source) testing env w/o reference.dat files or without perl. I think the in-file compare_values() testing is an idea that has proven its worth. I suggest that:; 1. the key reference values from each `reference.dat` be collected into the various `cc*/input.dat` tests,; 2. more psivars be defined as needed in the `psi4/src/psi4/cc*` modules, ; 3. a `compare_coupledcluster()` be written to take in a wfn and a structure of reference values and apply all the checks that the perl script currently does through compare_values(), compare_arrays(), etc. (3) is negotiable; it's just my current idea on how to move toward compare_values() without losing coverage. Primary aims are to make coupled-cluster tests suitable for installed testing (`assert compare_values(...)` works great in pytest) and increase coupled-cluster psivar usage (@amjames already did one follow-up pass) for the QCSchema project. Further note that in the near future, psivars need to be on Wfn, *not* `P::e`. Might be worth multiple ppl working to spread the pain. This hasn't been run by @lothian, so he may have other ideas.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/943
https://github.com/psi4/psi4/issues/943:198,Testability,test,tests,198,"Presently, there are rather few `compare_values()` statements in the `tests/cc*/input.dat` test cases. This is because there's a very thorough [perl script](https://github.com/psi4/psi4/blob/master/tests/psitest.pl) that parses the output file and parses the alongside `reference.dat` file and compares everything in sight to a sensible number of decimal places. Works great (except when we accidentally break its arrangements and then everything trivially passes for months at a time until someone notices) in Make or CMake testing framework for checking CC. _Doesn't_ work great to check that psivar coverage is good for the cc* modules or independently of the ctest testing macros or in an installed (as opposed to source) testing env w/o reference.dat files or without perl. I think the in-file compare_values() testing is an idea that has proven its worth. I suggest that:; 1. the key reference values from each `reference.dat` be collected into the various `cc*/input.dat` tests,; 2. more psivars be defined as needed in the `psi4/src/psi4/cc*` modules, ; 3. a `compare_coupledcluster()` be written to take in a wfn and a structure of reference values and apply all the checks that the perl script currently does through compare_values(), compare_arrays(), etc. (3) is negotiable; it's just my current idea on how to move toward compare_values() without losing coverage. Primary aims are to make coupled-cluster tests suitable for installed testing (`assert compare_values(...)` works great in pytest) and increase coupled-cluster psivar usage (@amjames already did one follow-up pass) for the QCSchema project. Further note that in the near future, psivars need to be on Wfn, *not* `P::e`. Might be worth multiple ppl working to spread the pain. This hasn't been run by @lothian, so he may have other ideas.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/943
https://github.com/psi4/psi4/issues/943:525,Testability,test,testing,525,"Presently, there are rather few `compare_values()` statements in the `tests/cc*/input.dat` test cases. This is because there's a very thorough [perl script](https://github.com/psi4/psi4/blob/master/tests/psitest.pl) that parses the output file and parses the alongside `reference.dat` file and compares everything in sight to a sensible number of decimal places. Works great (except when we accidentally break its arrangements and then everything trivially passes for months at a time until someone notices) in Make or CMake testing framework for checking CC. _Doesn't_ work great to check that psivar coverage is good for the cc* modules or independently of the ctest testing macros or in an installed (as opposed to source) testing env w/o reference.dat files or without perl. I think the in-file compare_values() testing is an idea that has proven its worth. I suggest that:; 1. the key reference values from each `reference.dat` be collected into the various `cc*/input.dat` tests,; 2. more psivars be defined as needed in the `psi4/src/psi4/cc*` modules, ; 3. a `compare_coupledcluster()` be written to take in a wfn and a structure of reference values and apply all the checks that the perl script currently does through compare_values(), compare_arrays(), etc. (3) is negotiable; it's just my current idea on how to move toward compare_values() without losing coverage. Primary aims are to make coupled-cluster tests suitable for installed testing (`assert compare_values(...)` works great in pytest) and increase coupled-cluster psivar usage (@amjames already did one follow-up pass) for the QCSchema project. Further note that in the near future, psivars need to be on Wfn, *not* `P::e`. Might be worth multiple ppl working to spread the pain. This hasn't been run by @lothian, so he may have other ideas.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/943
https://github.com/psi4/psi4/issues/943:669,Testability,test,testing,669,"Presently, there are rather few `compare_values()` statements in the `tests/cc*/input.dat` test cases. This is because there's a very thorough [perl script](https://github.com/psi4/psi4/blob/master/tests/psitest.pl) that parses the output file and parses the alongside `reference.dat` file and compares everything in sight to a sensible number of decimal places. Works great (except when we accidentally break its arrangements and then everything trivially passes for months at a time until someone notices) in Make or CMake testing framework for checking CC. _Doesn't_ work great to check that psivar coverage is good for the cc* modules or independently of the ctest testing macros or in an installed (as opposed to source) testing env w/o reference.dat files or without perl. I think the in-file compare_values() testing is an idea that has proven its worth. I suggest that:; 1. the key reference values from each `reference.dat` be collected into the various `cc*/input.dat` tests,; 2. more psivars be defined as needed in the `psi4/src/psi4/cc*` modules, ; 3. a `compare_coupledcluster()` be written to take in a wfn and a structure of reference values and apply all the checks that the perl script currently does through compare_values(), compare_arrays(), etc. (3) is negotiable; it's just my current idea on how to move toward compare_values() without losing coverage. Primary aims are to make coupled-cluster tests suitable for installed testing (`assert compare_values(...)` works great in pytest) and increase coupled-cluster psivar usage (@amjames already did one follow-up pass) for the QCSchema project. Further note that in the near future, psivars need to be on Wfn, *not* `P::e`. Might be worth multiple ppl working to spread the pain. This hasn't been run by @lothian, so he may have other ideas.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/943
https://github.com/psi4/psi4/issues/943:726,Testability,test,testing,726,"Presently, there are rather few `compare_values()` statements in the `tests/cc*/input.dat` test cases. This is because there's a very thorough [perl script](https://github.com/psi4/psi4/blob/master/tests/psitest.pl) that parses the output file and parses the alongside `reference.dat` file and compares everything in sight to a sensible number of decimal places. Works great (except when we accidentally break its arrangements and then everything trivially passes for months at a time until someone notices) in Make or CMake testing framework for checking CC. _Doesn't_ work great to check that psivar coverage is good for the cc* modules or independently of the ctest testing macros or in an installed (as opposed to source) testing env w/o reference.dat files or without perl. I think the in-file compare_values() testing is an idea that has proven its worth. I suggest that:; 1. the key reference values from each `reference.dat` be collected into the various `cc*/input.dat` tests,; 2. more psivars be defined as needed in the `psi4/src/psi4/cc*` modules, ; 3. a `compare_coupledcluster()` be written to take in a wfn and a structure of reference values and apply all the checks that the perl script currently does through compare_values(), compare_arrays(), etc. (3) is negotiable; it's just my current idea on how to move toward compare_values() without losing coverage. Primary aims are to make coupled-cluster tests suitable for installed testing (`assert compare_values(...)` works great in pytest) and increase coupled-cluster psivar usage (@amjames already did one follow-up pass) for the QCSchema project. Further note that in the near future, psivars need to be on Wfn, *not* `P::e`. Might be worth multiple ppl working to spread the pain. This hasn't been run by @lothian, so he may have other ideas.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/943
https://github.com/psi4/psi4/issues/943:816,Testability,test,testing,816,"Presently, there are rather few `compare_values()` statements in the `tests/cc*/input.dat` test cases. This is because there's a very thorough [perl script](https://github.com/psi4/psi4/blob/master/tests/psitest.pl) that parses the output file and parses the alongside `reference.dat` file and compares everything in sight to a sensible number of decimal places. Works great (except when we accidentally break its arrangements and then everything trivially passes for months at a time until someone notices) in Make or CMake testing framework for checking CC. _Doesn't_ work great to check that psivar coverage is good for the cc* modules or independently of the ctest testing macros or in an installed (as opposed to source) testing env w/o reference.dat files or without perl. I think the in-file compare_values() testing is an idea that has proven its worth. I suggest that:; 1. the key reference values from each `reference.dat` be collected into the various `cc*/input.dat` tests,; 2. more psivars be defined as needed in the `psi4/src/psi4/cc*` modules, ; 3. a `compare_coupledcluster()` be written to take in a wfn and a structure of reference values and apply all the checks that the perl script currently does through compare_values(), compare_arrays(), etc. (3) is negotiable; it's just my current idea on how to move toward compare_values() without losing coverage. Primary aims are to make coupled-cluster tests suitable for installed testing (`assert compare_values(...)` works great in pytest) and increase coupled-cluster psivar usage (@amjames already did one follow-up pass) for the QCSchema project. Further note that in the near future, psivars need to be on Wfn, *not* `P::e`. Might be worth multiple ppl working to spread the pain. This hasn't been run by @lothian, so he may have other ideas.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/943
https://github.com/psi4/psi4/issues/943:979,Testability,test,tests,979,"Presently, there are rather few `compare_values()` statements in the `tests/cc*/input.dat` test cases. This is because there's a very thorough [perl script](https://github.com/psi4/psi4/blob/master/tests/psitest.pl) that parses the output file and parses the alongside `reference.dat` file and compares everything in sight to a sensible number of decimal places. Works great (except when we accidentally break its arrangements and then everything trivially passes for months at a time until someone notices) in Make or CMake testing framework for checking CC. _Doesn't_ work great to check that psivar coverage is good for the cc* modules or independently of the ctest testing macros or in an installed (as opposed to source) testing env w/o reference.dat files or without perl. I think the in-file compare_values() testing is an idea that has proven its worth. I suggest that:; 1. the key reference values from each `reference.dat` be collected into the various `cc*/input.dat` tests,; 2. more psivars be defined as needed in the `psi4/src/psi4/cc*` modules, ; 3. a `compare_coupledcluster()` be written to take in a wfn and a structure of reference values and apply all the checks that the perl script currently does through compare_values(), compare_arrays(), etc. (3) is negotiable; it's just my current idea on how to move toward compare_values() without losing coverage. Primary aims are to make coupled-cluster tests suitable for installed testing (`assert compare_values(...)` works great in pytest) and increase coupled-cluster psivar usage (@amjames already did one follow-up pass) for the QCSchema project. Further note that in the near future, psivars need to be on Wfn, *not* `P::e`. Might be worth multiple ppl working to spread the pain. This hasn't been run by @lothian, so he may have other ideas.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/943
https://github.com/psi4/psi4/issues/943:1418,Testability,test,tests,1418,"Presently, there are rather few `compare_values()` statements in the `tests/cc*/input.dat` test cases. This is because there's a very thorough [perl script](https://github.com/psi4/psi4/blob/master/tests/psitest.pl) that parses the output file and parses the alongside `reference.dat` file and compares everything in sight to a sensible number of decimal places. Works great (except when we accidentally break its arrangements and then everything trivially passes for months at a time until someone notices) in Make or CMake testing framework for checking CC. _Doesn't_ work great to check that psivar coverage is good for the cc* modules or independently of the ctest testing macros or in an installed (as opposed to source) testing env w/o reference.dat files or without perl. I think the in-file compare_values() testing is an idea that has proven its worth. I suggest that:; 1. the key reference values from each `reference.dat` be collected into the various `cc*/input.dat` tests,; 2. more psivars be defined as needed in the `psi4/src/psi4/cc*` modules, ; 3. a `compare_coupledcluster()` be written to take in a wfn and a structure of reference values and apply all the checks that the perl script currently does through compare_values(), compare_arrays(), etc. (3) is negotiable; it's just my current idea on how to move toward compare_values() without losing coverage. Primary aims are to make coupled-cluster tests suitable for installed testing (`assert compare_values(...)` works great in pytest) and increase coupled-cluster psivar usage (@amjames already did one follow-up pass) for the QCSchema project. Further note that in the near future, psivars need to be on Wfn, *not* `P::e`. Might be worth multiple ppl working to spread the pain. This hasn't been run by @lothian, so he may have other ideas.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/943
https://github.com/psi4/psi4/issues/943:1447,Testability,test,testing,1447,"Presently, there are rather few `compare_values()` statements in the `tests/cc*/input.dat` test cases. This is because there's a very thorough [perl script](https://github.com/psi4/psi4/blob/master/tests/psitest.pl) that parses the output file and parses the alongside `reference.dat` file and compares everything in sight to a sensible number of decimal places. Works great (except when we accidentally break its arrangements and then everything trivially passes for months at a time until someone notices) in Make or CMake testing framework for checking CC. _Doesn't_ work great to check that psivar coverage is good for the cc* modules or independently of the ctest testing macros or in an installed (as opposed to source) testing env w/o reference.dat files or without perl. I think the in-file compare_values() testing is an idea that has proven its worth. I suggest that:; 1. the key reference values from each `reference.dat` be collected into the various `cc*/input.dat` tests,; 2. more psivars be defined as needed in the `psi4/src/psi4/cc*` modules, ; 3. a `compare_coupledcluster()` be written to take in a wfn and a structure of reference values and apply all the checks that the perl script currently does through compare_values(), compare_arrays(), etc. (3) is negotiable; it's just my current idea on how to move toward compare_values() without losing coverage. Primary aims are to make coupled-cluster tests suitable for installed testing (`assert compare_values(...)` works great in pytest) and increase coupled-cluster psivar usage (@amjames already did one follow-up pass) for the QCSchema project. Further note that in the near future, psivars need to be on Wfn, *not* `P::e`. Might be worth multiple ppl working to spread the pain. This hasn't been run by @lothian, so he may have other ideas.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/943
https://github.com/psi4/psi4/issues/943:1457,Testability,assert,assert,1457,"Presently, there are rather few `compare_values()` statements in the `tests/cc*/input.dat` test cases. This is because there's a very thorough [perl script](https://github.com/psi4/psi4/blob/master/tests/psitest.pl) that parses the output file and parses the alongside `reference.dat` file and compares everything in sight to a sensible number of decimal places. Works great (except when we accidentally break its arrangements and then everything trivially passes for months at a time until someone notices) in Make or CMake testing framework for checking CC. _Doesn't_ work great to check that psivar coverage is good for the cc* modules or independently of the ctest testing macros or in an installed (as opposed to source) testing env w/o reference.dat files or without perl. I think the in-file compare_values() testing is an idea that has proven its worth. I suggest that:; 1. the key reference values from each `reference.dat` be collected into the various `cc*/input.dat` tests,; 2. more psivars be defined as needed in the `psi4/src/psi4/cc*` modules, ; 3. a `compare_coupledcluster()` be written to take in a wfn and a structure of reference values and apply all the checks that the perl script currently does through compare_values(), compare_arrays(), etc. (3) is negotiable; it's just my current idea on how to move toward compare_values() without losing coverage. Primary aims are to make coupled-cluster tests suitable for installed testing (`assert compare_values(...)` works great in pytest) and increase coupled-cluster psivar usage (@amjames already did one follow-up pass) for the QCSchema project. Further note that in the near future, psivars need to be on Wfn, *not* `P::e`. Might be worth multiple ppl working to spread the pain. This hasn't been run by @lothian, so he may have other ideas.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/943
https://github.com/psi4/psi4/issues/944:313,Availability,error,error,313,"I'm running psi4 via JSON inputs using `psi4.json_wrapper.run_json(json_data)`. The script I'm running is [here](https://github.com/ChayaSt/torsionfit_examples/blob/wbo/kinase_inhibitors/bond_order/run_psi4.py). ; I'm using psi4 version `1.2a1.dev781`. ; When I try to run this on the cluster I get the following error:; ```; Traceback (most recent call last):; File ""run_psi4.py"", line 14, in <module>; psi4.json_wrapper.run_json(json_data); File ""/home/chayas/miniconda3/envs/p4dev/lib/python3.6/site-packages/psi4/driver/json_wrapper.py"", line 234, in run_json; with open(outfile, 'r') as f:; FileNotFoundError: [Errno 2] No such file or directory: '817ec146-d766-49a6-828c-8758bd88af3d.json_out'; ```; I added `print(os.getcwd()), print(outfile)` after [this line](https://github.com/psi4/psi4/blob/master/psi4/driver/json_wrapper.py#L233) in `json_wrapper.py` and it printed out:; ```; current directory: /tmp/psi.50867..dftd3.a3e40a77; outfile: 9eab12bc-82e2-47aa-b29f-eb58db83bf22.json_out; ```; When I set `json_data[""scratch_location""]: ""absolute/path/to/current/directory""` where the current directory is the directory I launch psi4 from, I get the following print out:. ```; current directory: /lila/home/chayas/src/ChayaSt/torsionfit_examples/kinase_inhibitors/bond_order/Axitinib/psi.52714..dftd3.cb5f92ab; outfile: 45d87c61-c859-4e40-9a96-419f3b0888ad.json_out; ```; The tmp directory `psi.57214..dftd3.cb5f92ab` gets written to the directory I specified and some scratch files get written there too. But `45d87c61-c859-4e40-9a96-419f3b0888ad.json_out` is written to `/lila/home/chayas/src/ChayaSt/torsionfit_examples/kinase_inhibitors/bond_order/Axitinib/`, not to the tmp directory no matter if I specify where the scratch files should be written. . @dgasmith suggested I add `outfile = core.IOManager.shared_object().get_default_path() +str(uuid.uuid4()) + "".json_out""` to [here](https://github.com/psi4/psi4/blob/master/psi4/driver/json_wrapper.py#L188). When I do this, `json_wrappe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/944
https://github.com/psi4/psi4/pull/945:118,Testability,test,tested,118,## Description; DSD-BLYP and DSD-PBE-PBE86 subtests in dft-custom-dhdf are failing. This is the easiest way to get it tested externally.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/945
https://github.com/psi4/psi4/pull/946:62,Testability,test,tests,62,"## Todos; * **Developer Interest**; - [x] Some of the new DFT tests require dftd3 or gcp, which properly belong in the subdirs since we can't control `cmake` test running on a per-test basis as we can `pytest`. This fixes up 3 of them. ~`dft-smoke` still needs attention~; - [x] Cheated on dft-smoke and just don't run the dsd-d if dftd3 exe not around.; - [x] Added some stuff to the PR template; - [x] Fixed DSD-BLYP & DSD-PBEP86 in `dft-custom-dhdf` via Orca check; - [x] @robertodr I temporarily disabled the fcidump test so I can get a full ctest pass for conda; - [x] @PeterKraus added DSD-PBE[P86|B95|PBE] fctls to dictfuncs and tests. ## Questions; - [x] ~I can't get the ammonia dimer to match Orca for DSD-PBEP86 (no disp.) in `dft-custom-dhdf`. Any idea where the ref val came from @dgasmith or what's wrong with the orca cmd (below), @PeterKraus? If we fix that one up, then only fcidump is left.~. ```; ! B2PLYP GRID7 cc-pVTZ TightSCF cc-pVTZ/C; %method; FrozenCore 0; Exchange x_PBE; Correlation c_P86; ScalHFX = 0.72; ScalDFX = 0.28; ScalGGAC = 0.44; ScalLDAC = 0.44; ScalMP2C = 1.0; end; %mp2; RI on; DoSCS true; Ps 0.51; Pt 0.36; MaxCore 1000; end; *xyz 0 1; N -1.578718 -0.046611 0.000000; H -2.158621 0.136396 -0.809565; H -2.158621 0.136396 0.809565; H -0.849471 0.658193 0.000000; N 1.578718 0.046611 0.000000; H 2.158621 -0.136396 -0.809565; H 0.849471 -0.658193 0.000000; H 2.158621 -0.136396 0.809565; *; ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/946
https://github.com/psi4/psi4/pull/946:158,Testability,test,test,158,"## Todos; * **Developer Interest**; - [x] Some of the new DFT tests require dftd3 or gcp, which properly belong in the subdirs since we can't control `cmake` test running on a per-test basis as we can `pytest`. This fixes up 3 of them. ~`dft-smoke` still needs attention~; - [x] Cheated on dft-smoke and just don't run the dsd-d if dftd3 exe not around.; - [x] Added some stuff to the PR template; - [x] Fixed DSD-BLYP & DSD-PBEP86 in `dft-custom-dhdf` via Orca check; - [x] @robertodr I temporarily disabled the fcidump test so I can get a full ctest pass for conda; - [x] @PeterKraus added DSD-PBE[P86|B95|PBE] fctls to dictfuncs and tests. ## Questions; - [x] ~I can't get the ammonia dimer to match Orca for DSD-PBEP86 (no disp.) in `dft-custom-dhdf`. Any idea where the ref val came from @dgasmith or what's wrong with the orca cmd (below), @PeterKraus? If we fix that one up, then only fcidump is left.~. ```; ! B2PLYP GRID7 cc-pVTZ TightSCF cc-pVTZ/C; %method; FrozenCore 0; Exchange x_PBE; Correlation c_P86; ScalHFX = 0.72; ScalDFX = 0.28; ScalGGAC = 0.44; ScalLDAC = 0.44; ScalMP2C = 1.0; end; %mp2; RI on; DoSCS true; Ps 0.51; Pt 0.36; MaxCore 1000; end; *xyz 0 1; N -1.578718 -0.046611 0.000000; H -2.158621 0.136396 -0.809565; H -2.158621 0.136396 0.809565; H -0.849471 0.658193 0.000000; N 1.578718 0.046611 0.000000; H 2.158621 -0.136396 -0.809565; H 0.849471 -0.658193 0.000000; H 2.158621 -0.136396 0.809565; *; ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/946
https://github.com/psi4/psi4/pull/946:180,Testability,test,test,180,"## Todos; * **Developer Interest**; - [x] Some of the new DFT tests require dftd3 or gcp, which properly belong in the subdirs since we can't control `cmake` test running on a per-test basis as we can `pytest`. This fixes up 3 of them. ~`dft-smoke` still needs attention~; - [x] Cheated on dft-smoke and just don't run the dsd-d if dftd3 exe not around.; - [x] Added some stuff to the PR template; - [x] Fixed DSD-BLYP & DSD-PBEP86 in `dft-custom-dhdf` via Orca check; - [x] @robertodr I temporarily disabled the fcidump test so I can get a full ctest pass for conda; - [x] @PeterKraus added DSD-PBE[P86|B95|PBE] fctls to dictfuncs and tests. ## Questions; - [x] ~I can't get the ammonia dimer to match Orca for DSD-PBEP86 (no disp.) in `dft-custom-dhdf`. Any idea where the ref val came from @dgasmith or what's wrong with the orca cmd (below), @PeterKraus? If we fix that one up, then only fcidump is left.~. ```; ! B2PLYP GRID7 cc-pVTZ TightSCF cc-pVTZ/C; %method; FrozenCore 0; Exchange x_PBE; Correlation c_P86; ScalHFX = 0.72; ScalDFX = 0.28; ScalGGAC = 0.44; ScalLDAC = 0.44; ScalMP2C = 1.0; end; %mp2; RI on; DoSCS true; Ps 0.51; Pt 0.36; MaxCore 1000; end; *xyz 0 1; N -1.578718 -0.046611 0.000000; H -2.158621 0.136396 -0.809565; H -2.158621 0.136396 0.809565; H -0.849471 0.658193 0.000000; N 1.578718 0.046611 0.000000; H 2.158621 -0.136396 -0.809565; H 0.849471 -0.658193 0.000000; H 2.158621 -0.136396 0.809565; *; ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/946
https://github.com/psi4/psi4/pull/946:521,Testability,test,test,521,"## Todos; * **Developer Interest**; - [x] Some of the new DFT tests require dftd3 or gcp, which properly belong in the subdirs since we can't control `cmake` test running on a per-test basis as we can `pytest`. This fixes up 3 of them. ~`dft-smoke` still needs attention~; - [x] Cheated on dft-smoke and just don't run the dsd-d if dftd3 exe not around.; - [x] Added some stuff to the PR template; - [x] Fixed DSD-BLYP & DSD-PBEP86 in `dft-custom-dhdf` via Orca check; - [x] @robertodr I temporarily disabled the fcidump test so I can get a full ctest pass for conda; - [x] @PeterKraus added DSD-PBE[P86|B95|PBE] fctls to dictfuncs and tests. ## Questions; - [x] ~I can't get the ammonia dimer to match Orca for DSD-PBEP86 (no disp.) in `dft-custom-dhdf`. Any idea where the ref val came from @dgasmith or what's wrong with the orca cmd (below), @PeterKraus? If we fix that one up, then only fcidump is left.~. ```; ! B2PLYP GRID7 cc-pVTZ TightSCF cc-pVTZ/C; %method; FrozenCore 0; Exchange x_PBE; Correlation c_P86; ScalHFX = 0.72; ScalDFX = 0.28; ScalGGAC = 0.44; ScalLDAC = 0.44; ScalMP2C = 1.0; end; %mp2; RI on; DoSCS true; Ps 0.51; Pt 0.36; MaxCore 1000; end; *xyz 0 1; N -1.578718 -0.046611 0.000000; H -2.158621 0.136396 -0.809565; H -2.158621 0.136396 0.809565; H -0.849471 0.658193 0.000000; N 1.578718 0.046611 0.000000; H 2.158621 -0.136396 -0.809565; H 0.849471 -0.658193 0.000000; H 2.158621 -0.136396 0.809565; *; ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/946
https://github.com/psi4/psi4/pull/946:636,Testability,test,tests,636,"## Todos; * **Developer Interest**; - [x] Some of the new DFT tests require dftd3 or gcp, which properly belong in the subdirs since we can't control `cmake` test running on a per-test basis as we can `pytest`. This fixes up 3 of them. ~`dft-smoke` still needs attention~; - [x] Cheated on dft-smoke and just don't run the dsd-d if dftd3 exe not around.; - [x] Added some stuff to the PR template; - [x] Fixed DSD-BLYP & DSD-PBEP86 in `dft-custom-dhdf` via Orca check; - [x] @robertodr I temporarily disabled the fcidump test so I can get a full ctest pass for conda; - [x] @PeterKraus added DSD-PBE[P86|B95|PBE] fctls to dictfuncs and tests. ## Questions; - [x] ~I can't get the ammonia dimer to match Orca for DSD-PBEP86 (no disp.) in `dft-custom-dhdf`. Any idea where the ref val came from @dgasmith or what's wrong with the orca cmd (below), @PeterKraus? If we fix that one up, then only fcidump is left.~. ```; ! B2PLYP GRID7 cc-pVTZ TightSCF cc-pVTZ/C; %method; FrozenCore 0; Exchange x_PBE; Correlation c_P86; ScalHFX = 0.72; ScalDFX = 0.28; ScalGGAC = 0.44; ScalLDAC = 0.44; ScalMP2C = 1.0; end; %mp2; RI on; DoSCS true; Ps 0.51; Pt 0.36; MaxCore 1000; end; *xyz 0 1; N -1.578718 -0.046611 0.000000; H -2.158621 0.136396 -0.809565; H -2.158621 0.136396 0.809565; H -0.849471 0.658193 0.000000; N 1.578718 0.046611 0.000000; H 2.158621 -0.136396 -0.809565; H 0.849471 -0.658193 0.000000; H 2.158621 -0.136396 0.809565; *; ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/946
https://github.com/psi4/psi4/pull/947:115,Availability,failure,failure,115,"## Description; Adds hostname printing to output file header, and stop time to output file ""footer"" before success/failure beer/coffee message. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/947
https://github.com/psi4/psi4/pull/947:135,Integrability,message,message,135,"## Description; Adds hostname printing to output file header, and stop time to output file ""footer"" before success/failure beer/coffee message. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/947
https://github.com/psi4/psi4/issues/948:3237,Availability,error,errors,3237,"000000 -0.170000; C 0.007000 1.210000 0.523000; C 0.000000 1.205000 1.904000; C 0.000000 0.000000 2.592000; C 0.000000 -1.205000 1.904000; C -0.007000 -1.210000 0.523000; C 0.000000 0.000000 -1.643000; H -0.019000 2.146000 -0.006000; H -0.011000 2.134000 2.442000; H 0.000000 0.000000 3.666000; H 0.011000 -2.134000 2.442000; H 0.019000 -2.146000 -0.006000; N -0.741000 -0.864000 -2.296000; N 0.741000 0.864000 -2.296000; H 0.721000 0.947000 -3.291000; H 1.404000 1.427000 -1.808000; H -1.404000 -1.427000 -1.808000; H -0.721000 -0.947000 -3.291000; }. set optking { dynamic_level = 1; geom_maxiter = 250; print_trajectory_xyz_file = True }. set { scf_type direct }; energy, wfn = optimize('SCF', dft_functional='wB97X-D', dertype='gradient', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('18 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```. This errors with:. ```; Traceback (most recent call last):; File ""/home/damasj02/software/psi4dev/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 55, in <module>; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1054, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2051, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1989, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/948
https://github.com/psi4/psi4/issues/948:69,Deployability,install,installed,69,"Hi,. @raimis and I are working with a development version of psi4. I installed a fresh conda directory (python 3.6) where I ran `conda install psi4=1.2a1.dev611 -c psi4/label/dev -c psi4`. Here's what's installed:. ```; -bash-4.2$ conda list; # packages in environment at /home/damasj02/software/psi4dev:; #; # Name Version Build Channel; asn1crypto 0.24.0 py36_0; attrs 17.4.0 py36_0; ca-certificates 2018.03.07 0; certifi 2018.1.18 py36_0; cffi 1.11.4 py36h9745a5d_0; chardet 3.0.4 py36h0f667ec_1; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0; conda 4.4.10 py36_0; conda-env 2.6.0 h36134e3_1; cryptography 2.1.4 py36hd09be54_0; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gdma 2.2.6 3 psi4/label/dev; gmp 6.1.2 h6c8ec71_1; hdf5 1.8.17 2; idna 2.6 py36h82fb2a8_1; intel-openmp 2018.0.0 8; isl 0.12.2 0; libedit 3.1 heed3624_0; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4; libgcc-ng 7.2.0 h7cc24e2_2; libgfortran-ng 7.2.0 hdf63c60_3; libint 1.2.1 1 psi4/label/dev; libstdcxx-ng 7.2.0 h7a57d05_2; libxc 3.0.0 6 psi4/label/dev; mkl 2018.0.2 1; mkl_fft 1.0.1 py36h3010b51_0; mkl_random 1.0.1 py36h629b387_0; more-itertools 4.1.0 py36_0; mpc 1.0.1 0; mpfr 3.1.2 0; ncurses 6.0 h9df7e31_2; numpy 1.14.2 py36hdbf6ddf_1; openssl 1.0.2o h20670df_0; pcmsolver 1.1.10 py36_1 psi4/label/dev; pip 9.0.1 py36h6c6f9ce_4; pluggy 0.6.0 py36hb689045_0; psi4 1.2a1.dev611+8fe3513 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev3 py36_0 psi4/label/dev; py 1.5.3 py36_0; pycosat 0.6.3 py36h0a5515d_0; pycparser 2.18 py36hf9f622e_1; pyopenssl 17.5.0 py36h20ba746_0; pysocks 1.6.7 py36hd97a5b1_1; pytest 3.5.0 py36_0; python 3.6.4 hc3d631a_1; readline 7.0 ha6073c6_4; requests 2.18.4 py36he2e5f8d_1; ruamel_yaml 0.15.35 py36h14c3975_1; setuptools 38.4.0 py36_0; simint 0.7 0 psi4; six 1.11.0 py36h372c433_1; sqlite 3.22.0 h1bed415_0; tk 8.6.7 hc745277_3; urllib3 1.22 py36hbe7ace6_0; wheel 0.30.0 py36hfd4bba0_1; xz 5.2.3 h55aa19d_2; yaml 0.1.7 had09818_2; zlib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/948
https://github.com/psi4/psi4/issues/948:135,Deployability,install,install,135,"Hi,. @raimis and I are working with a development version of psi4. I installed a fresh conda directory (python 3.6) where I ran `conda install psi4=1.2a1.dev611 -c psi4/label/dev -c psi4`. Here's what's installed:. ```; -bash-4.2$ conda list; # packages in environment at /home/damasj02/software/psi4dev:; #; # Name Version Build Channel; asn1crypto 0.24.0 py36_0; attrs 17.4.0 py36_0; ca-certificates 2018.03.07 0; certifi 2018.1.18 py36_0; cffi 1.11.4 py36h9745a5d_0; chardet 3.0.4 py36h0f667ec_1; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0; conda 4.4.10 py36_0; conda-env 2.6.0 h36134e3_1; cryptography 2.1.4 py36hd09be54_0; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gdma 2.2.6 3 psi4/label/dev; gmp 6.1.2 h6c8ec71_1; hdf5 1.8.17 2; idna 2.6 py36h82fb2a8_1; intel-openmp 2018.0.0 8; isl 0.12.2 0; libedit 3.1 heed3624_0; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4; libgcc-ng 7.2.0 h7cc24e2_2; libgfortran-ng 7.2.0 hdf63c60_3; libint 1.2.1 1 psi4/label/dev; libstdcxx-ng 7.2.0 h7a57d05_2; libxc 3.0.0 6 psi4/label/dev; mkl 2018.0.2 1; mkl_fft 1.0.1 py36h3010b51_0; mkl_random 1.0.1 py36h629b387_0; more-itertools 4.1.0 py36_0; mpc 1.0.1 0; mpfr 3.1.2 0; ncurses 6.0 h9df7e31_2; numpy 1.14.2 py36hdbf6ddf_1; openssl 1.0.2o h20670df_0; pcmsolver 1.1.10 py36_1 psi4/label/dev; pip 9.0.1 py36h6c6f9ce_4; pluggy 0.6.0 py36hb689045_0; psi4 1.2a1.dev611+8fe3513 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev3 py36_0 psi4/label/dev; py 1.5.3 py36_0; pycosat 0.6.3 py36h0a5515d_0; pycparser 2.18 py36hf9f622e_1; pyopenssl 17.5.0 py36h20ba746_0; pysocks 1.6.7 py36hd97a5b1_1; pytest 3.5.0 py36_0; python 3.6.4 hc3d631a_1; readline 7.0 ha6073c6_4; requests 2.18.4 py36he2e5f8d_1; ruamel_yaml 0.15.35 py36h14c3975_1; setuptools 38.4.0 py36_0; simint 0.7 0 psi4; six 1.11.0 py36h372c433_1; sqlite 3.22.0 h1bed415_0; tk 8.6.7 hc745277_3; urllib3 1.22 py36hbe7ace6_0; wheel 0.30.0 py36hfd4bba0_1; xz 5.2.3 h55aa19d_2; yaml 0.1.7 had09818_2; zlib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/948
https://github.com/psi4/psi4/issues/948:203,Deployability,install,installed,203,"Hi,. @raimis and I are working with a development version of psi4. I installed a fresh conda directory (python 3.6) where I ran `conda install psi4=1.2a1.dev611 -c psi4/label/dev -c psi4`. Here's what's installed:. ```; -bash-4.2$ conda list; # packages in environment at /home/damasj02/software/psi4dev:; #; # Name Version Build Channel; asn1crypto 0.24.0 py36_0; attrs 17.4.0 py36_0; ca-certificates 2018.03.07 0; certifi 2018.1.18 py36_0; cffi 1.11.4 py36h9745a5d_0; chardet 3.0.4 py36h0f667ec_1; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0; conda 4.4.10 py36_0; conda-env 2.6.0 h36134e3_1; cryptography 2.1.4 py36hd09be54_0; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gdma 2.2.6 3 psi4/label/dev; gmp 6.1.2 h6c8ec71_1; hdf5 1.8.17 2; idna 2.6 py36h82fb2a8_1; intel-openmp 2018.0.0 8; isl 0.12.2 0; libedit 3.1 heed3624_0; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4; libgcc-ng 7.2.0 h7cc24e2_2; libgfortran-ng 7.2.0 hdf63c60_3; libint 1.2.1 1 psi4/label/dev; libstdcxx-ng 7.2.0 h7a57d05_2; libxc 3.0.0 6 psi4/label/dev; mkl 2018.0.2 1; mkl_fft 1.0.1 py36h3010b51_0; mkl_random 1.0.1 py36h629b387_0; more-itertools 4.1.0 py36_0; mpc 1.0.1 0; mpfr 3.1.2 0; ncurses 6.0 h9df7e31_2; numpy 1.14.2 py36hdbf6ddf_1; openssl 1.0.2o h20670df_0; pcmsolver 1.1.10 py36_1 psi4/label/dev; pip 9.0.1 py36h6c6f9ce_4; pluggy 0.6.0 py36hb689045_0; psi4 1.2a1.dev611+8fe3513 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev3 py36_0 psi4/label/dev; py 1.5.3 py36_0; pycosat 0.6.3 py36h0a5515d_0; pycparser 2.18 py36hf9f622e_1; pyopenssl 17.5.0 py36h20ba746_0; pysocks 1.6.7 py36hd97a5b1_1; pytest 3.5.0 py36_0; python 3.6.4 hc3d631a_1; readline 7.0 ha6073c6_4; requests 2.18.4 py36he2e5f8d_1; ruamel_yaml 0.15.35 py36h14c3975_1; setuptools 38.4.0 py36_0; simint 0.7 0 psi4; six 1.11.0 py36h372c433_1; sqlite 3.22.0 h1bed415_0; tk 8.6.7 hc745277_3; urllib3 1.22 py36hbe7ace6_0; wheel 0.30.0 py36hfd4bba0_1; xz 5.2.3 h55aa19d_2; yaml 0.1.7 had09818_2; zlib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/948
https://github.com/psi4/psi4/issues/948:6764,Deployability,install,installation,6764,"ol) # D2h subgroup; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2532, in find_highest_point_group; return PointGroup(pg_bits); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1533, in __init__; self.constructor_bits(*args); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1576, in constructor_bits; self.symb = self.bits_to_basic_name(self.PYbits); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1754, in bits_to_basic_name; raise ValidationError('Unrecognized point group bits: %d\n' % (bits)). ValidationError: Unrecognized point group bits: 96; ```. If I switch to B3LYP functional, there's no problem. And we're also able to run it on another site (different resources). Maybe we're missing some installation or the local machine libraries are not the right versions? I also paste here an `ldd` of the `core.so`. ```; linux-vdso.so.1 => (0x00007ffddc916000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00002ac921db4000); libc.so.6 => /lib64/libc.so.6 (0x00002ac921fd0000); libpcm.so.1 => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00002ac922391000); libxc.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libxc.so (0x00002ac928dfa000); libdl.so.2 => /lib64/libdl.so.2 (0x00002ac92920a000); libgdma.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libgdma.so (0x00002ac92940e000); libderiv.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libderiv.so (0x00002ac92987b000); libint.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libint.so (0x00002ac92d840000); libdkh.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libdkh.so (0x00002ac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/948
https://github.com/psi4/psi4/issues/948:2907,Energy Efficiency,energy,energy,2907,"6hfd4bba0_1; xz 5.2.3 h55aa19d_2; yaml 0.1.7 had09818_2; zlib 1.2.11 ha838bed_2; ```. Our input is:. ```; set_num_threads(4); set_memory('16000 MB'). set { scf_mem_safety_factor 0.7 }. set { reference rks }; set { basis 6-311++G** }. molecule MOL {; 1 1; noreorient; nocom; symmetry c1; C 0.000000 0.000000 -0.170000; C 0.007000 1.210000 0.523000; C 0.000000 1.205000 1.904000; C 0.000000 0.000000 2.592000; C 0.000000 -1.205000 1.904000; C -0.007000 -1.210000 0.523000; C 0.000000 0.000000 -1.643000; H -0.019000 2.146000 -0.006000; H -0.011000 2.134000 2.442000; H 0.000000 0.000000 3.666000; H 0.011000 -2.134000 2.442000; H 0.019000 -2.146000 -0.006000; N -0.741000 -0.864000 -2.296000; N 0.741000 0.864000 -2.296000; H 0.721000 0.947000 -3.291000; H 1.404000 1.427000 -1.808000; H -1.404000 -1.427000 -1.808000; H -0.721000 -0.947000 -3.291000; }. set optking { dynamic_level = 1; geom_maxiter = 250; print_trajectory_xyz_file = True }. set { scf_type direct }; energy, wfn = optimize('SCF', dft_functional='wB97X-D', dertype='gradient', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('18 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```. This errors with:. ```; Traceback (most recent call last):; File ""/home/damasj02/software/psi4dev/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 55, in <module>; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1054, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2051, in run_scf_gradient;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/948
https://github.com/psi4/psi4/issues/948:3186,Energy Efficiency,energy,energy,3186,"{; 1 1; noreorient; nocom; symmetry c1; C 0.000000 0.000000 -0.170000; C 0.007000 1.210000 0.523000; C 0.000000 1.205000 1.904000; C 0.000000 0.000000 2.592000; C 0.000000 -1.205000 1.904000; C -0.007000 -1.210000 0.523000; C 0.000000 0.000000 -1.643000; H -0.019000 2.146000 -0.006000; H -0.011000 2.134000 2.442000; H 0.000000 0.000000 3.666000; H 0.011000 -2.134000 2.442000; H 0.019000 -2.146000 -0.006000; N -0.741000 -0.864000 -2.296000; N 0.741000 0.864000 -2.296000; H 0.721000 0.947000 -3.291000; H 1.404000 1.427000 -1.808000; H -1.404000 -1.427000 -1.808000; H -0.721000 -0.947000 -3.291000; }. set optking { dynamic_level = 1; geom_maxiter = 250; print_trajectory_xyz_file = True }. set { scf_type direct }; energy, wfn = optimize('SCF', dft_functional='wB97X-D', dertype='gradient', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('18 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```. This errors with:. ```; Traceback (most recent call last):; File ""/home/damasj02/software/psi4dev/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 55, in <module>; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1054, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2051, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1989, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/damasj02/software/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/948
https://github.com/psi4/psi4/issues/948:2921,Performance,optimiz,optimize,2921,"6hfd4bba0_1; xz 5.2.3 h55aa19d_2; yaml 0.1.7 had09818_2; zlib 1.2.11 ha838bed_2; ```. Our input is:. ```; set_num_threads(4); set_memory('16000 MB'). set { scf_mem_safety_factor 0.7 }. set { reference rks }; set { basis 6-311++G** }. molecule MOL {; 1 1; noreorient; nocom; symmetry c1; C 0.000000 0.000000 -0.170000; C 0.007000 1.210000 0.523000; C 0.000000 1.205000 1.904000; C 0.000000 0.000000 2.592000; C 0.000000 -1.205000 1.904000; C -0.007000 -1.210000 0.523000; C 0.000000 0.000000 -1.643000; H -0.019000 2.146000 -0.006000; H -0.011000 2.134000 2.442000; H 0.000000 0.000000 3.666000; H 0.011000 -2.134000 2.442000; H 0.019000 -2.146000 -0.006000; N -0.741000 -0.864000 -2.296000; N 0.741000 0.864000 -2.296000; H 0.721000 0.947000 -3.291000; H 1.404000 1.427000 -1.808000; H -1.404000 -1.427000 -1.808000; H -0.721000 -0.947000 -3.291000; }. set optking { dynamic_level = 1; geom_maxiter = 250; print_trajectory_xyz_file = True }. set { scf_type direct }; energy, wfn = optimize('SCF', dft_functional='wB97X-D', dertype='gradient', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('18 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```. This errors with:. ```; Traceback (most recent call last):; File ""/home/damasj02/software/psi4dev/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 55, in <module>; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1054, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2051, in run_scf_gradient;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/948
https://github.com/psi4/psi4/issues/948:3523,Performance,optimiz,optimize,3523,"00 -0.006000; N -0.741000 -0.864000 -2.296000; N 0.741000 0.864000 -2.296000; H 0.721000 0.947000 -3.291000; H 1.404000 1.427000 -1.808000; H -1.404000 -1.427000 -1.808000; H -0.721000 -0.947000 -3.291000; }. set optking { dynamic_level = 1; geom_maxiter = 250; print_trajectory_xyz_file = True }. set { scf_type direct }; energy, wfn = optimize('SCF', dft_functional='wB97X-D', dertype='gradient', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('18 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```. This errors with:. ```; Traceback (most recent call last):; File ""/home/damasj02/software/psi4dev/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 55, in <module>; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1054, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2051, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1989, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1279, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 103, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/damasj02/softwa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/948
https://github.com/psi4/psi4/issues/948:389,Security,certificate,certificates,389,"Hi,. @raimis and I are working with a development version of psi4. I installed a fresh conda directory (python 3.6) where I ran `conda install psi4=1.2a1.dev611 -c psi4/label/dev -c psi4`. Here's what's installed:. ```; -bash-4.2$ conda list; # packages in environment at /home/damasj02/software/psi4dev:; #; # Name Version Build Channel; asn1crypto 0.24.0 py36_0; attrs 17.4.0 py36_0; ca-certificates 2018.03.07 0; certifi 2018.1.18 py36_0; cffi 1.11.4 py36h9745a5d_0; chardet 3.0.4 py36h0f667ec_1; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0; conda 4.4.10 py36_0; conda-env 2.6.0 h36134e3_1; cryptography 2.1.4 py36hd09be54_0; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gdma 2.2.6 3 psi4/label/dev; gmp 6.1.2 h6c8ec71_1; hdf5 1.8.17 2; idna 2.6 py36h82fb2a8_1; intel-openmp 2018.0.0 8; isl 0.12.2 0; libedit 3.1 heed3624_0; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4; libgcc-ng 7.2.0 h7cc24e2_2; libgfortran-ng 7.2.0 hdf63c60_3; libint 1.2.1 1 psi4/label/dev; libstdcxx-ng 7.2.0 h7a57d05_2; libxc 3.0.0 6 psi4/label/dev; mkl 2018.0.2 1; mkl_fft 1.0.1 py36h3010b51_0; mkl_random 1.0.1 py36h629b387_0; more-itertools 4.1.0 py36_0; mpc 1.0.1 0; mpfr 3.1.2 0; ncurses 6.0 h9df7e31_2; numpy 1.14.2 py36hdbf6ddf_1; openssl 1.0.2o h20670df_0; pcmsolver 1.1.10 py36_1 psi4/label/dev; pip 9.0.1 py36h6c6f9ce_4; pluggy 0.6.0 py36hb689045_0; psi4 1.2a1.dev611+8fe3513 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev3 py36_0 psi4/label/dev; py 1.5.3 py36_0; pycosat 0.6.3 py36h0a5515d_0; pycparser 2.18 py36hf9f622e_1; pyopenssl 17.5.0 py36h20ba746_0; pysocks 1.6.7 py36hd97a5b1_1; pytest 3.5.0 py36_0; python 3.6.4 hc3d631a_1; readline 7.0 ha6073c6_4; requests 2.18.4 py36he2e5f8d_1; ruamel_yaml 0.15.35 py36h14c3975_1; setuptools 38.4.0 py36_0; simint 0.7 0 psi4; six 1.11.0 py36h372c433_1; sqlite 3.22.0 h1bed415_0; tk 8.6.7 hc745277_3; urllib3 1.22 py36hbe7ace6_0; wheel 0.30.0 py36hfd4bba0_1; xz 5.2.3 h55aa19d_2; yaml 0.1.7 had09818_2; zlib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/948
https://github.com/psi4/psi4/issues/948:6495,Security,Validat,ValidationError,6495,"te-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1604, in update_geometry; self.set_point_group(self.find_point_group()); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2432, in find_point_group; pg = self.find_highest_point_group(tol) # D2h subgroup; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2532, in find_highest_point_group; return PointGroup(pg_bits); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1533, in __init__; self.constructor_bits(*args); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1576, in constructor_bits; self.symb = self.bits_to_basic_name(self.PYbits); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1754, in bits_to_basic_name; raise ValidationError('Unrecognized point group bits: %d\n' % (bits)). ValidationError: Unrecognized point group bits: 96; ```. If I switch to B3LYP functional, there's no problem. And we're also able to run it on another site (different resources). Maybe we're missing some installation or the local machine libraries are not the right versions? I also paste here an `ldd` of the `core.so`. ```; linux-vdso.so.1 => (0x00007ffddc916000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00002ac921db4000); libc.so.6 => /lib64/libc.so.6 (0x00002ac921fd0000); libpcm.so.1 => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00002ac922391000); libxc.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libxc.so (0x00002ac928dfa000); libdl.so.2 => /lib64/libdl.so.2 (0x00002ac92920a000); libgdma.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libgdma.so (0x00002ac92940e000); libderiv.so => /home/damasj02/software/psi4dev/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/948
https://github.com/psi4/psi4/issues/948:6560,Security,Validat,ValidationError,6560,"elf.set_point_group(self.find_point_group()); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2432, in find_point_group; pg = self.find_highest_point_group(tol) # D2h subgroup; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2532, in find_highest_point_group; return PointGroup(pg_bits); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1533, in __init__; self.constructor_bits(*args); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1576, in constructor_bits; self.symb = self.bits_to_basic_name(self.PYbits); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1754, in bits_to_basic_name; raise ValidationError('Unrecognized point group bits: %d\n' % (bits)). ValidationError: Unrecognized point group bits: 96; ```. If I switch to B3LYP functional, there's no problem. And we're also able to run it on another site (different resources). Maybe we're missing some installation or the local machine libraries are not the right versions? I also paste here an `ldd` of the `core.so`. ```; linux-vdso.so.1 => (0x00007ffddc916000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00002ac921db4000); libc.so.6 => /lib64/libc.so.6 (0x00002ac921fd0000); libpcm.so.1 => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00002ac922391000); libxc.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libxc.so (0x00002ac928dfa000); libdl.so.2 => /lib64/libdl.so.2 (0x00002ac92920a000); libgdma.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libgdma.so (0x00002ac92940e000); libderiv.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libderiv.so (0x00002ac92987b000); libint.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/948
https://github.com/psi4/psi4/pull/949:97,Energy Efficiency,energy,energy,97,"Standardized handling of ""/"" in method name between frequency, hessian, gradient, properties and energy. ## Description; - Use of `_cbs_gufunc` helper function consistently across `energy`, `hessian`, `gradient`, `frequency` and `properties`; - `_cbs_gufunc` throws an exception for unsupported ""true"" CBS calls to `frequency` and `properties`, ""method/basis"" syntax works; - all relevant tests pass, see below; - modified regex in `_parse_cbs_gufunc_string()` to correctly handle `sapt2+(3)/basis` calls or `method/6-311++G` calls; splitting now only happens on variants of `+ D:`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for #934 . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/949
https://github.com/psi4/psi4/pull/949:181,Energy Efficiency,energy,energy,181,"Standardized handling of ""/"" in method name between frequency, hessian, gradient, properties and energy. ## Description; - Use of `_cbs_gufunc` helper function consistently across `energy`, `hessian`, `gradient`, `frequency` and `properties`; - `_cbs_gufunc` throws an exception for unsupported ""true"" CBS calls to `frequency` and `properties`, ""method/basis"" syntax works; - all relevant tests pass, see below; - modified regex in `_parse_cbs_gufunc_string()` to correctly handle `sapt2+(3)/basis` calls or `method/6-311++G` calls; splitting now only happens on variants of `+ D:`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for #934 . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/949
https://github.com/psi4/psi4/pull/949:389,Testability,test,tests,389,"Standardized handling of ""/"" in method name between frequency, hessian, gradient, properties and energy. ## Description; - Use of `_cbs_gufunc` helper function consistently across `energy`, `hessian`, `gradient`, `frequency` and `properties`; - `_cbs_gufunc` throws an exception for unsupported ""true"" CBS calls to `frequency` and `properties`, ""method/basis"" syntax works; - all relevant tests pass, see below; - modified regex in `_parse_cbs_gufunc_string()` to correctly handle `sapt2+(3)/basis` calls or `method/6-311++G` calls; splitting now only happens on variants of `+ D:`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for #934 . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/949
https://github.com/psi4/psi4/pull/950:428,Deployability,Release,Release,428,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Bump CheMPS2 to v1.8.4; - [x] Bump Libint to Ninja-able version, v1.2.1+2; - [x] Bump Pybind11 to v2.2.2. Note that this invokes symbol hiding, so ...; - [x] Include Jet's `PSI_API` macro to re-expose classes for plugins.; * **User-Facing for Release Notes**; - [x] Note that anyone wanting to re-use an `objdir` will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; - `<objdir> rm -rf external/upstream/pybind11`. ## Status; - [x] Ready for review; - [x] Ready for merge. @psi4/editors, these should be quick and uncontroversial. Getting this in would help the PR assembly line.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/950
https://github.com/psi4/psi4/pull/950:398,Modifiability,plugin,plugins,398,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Bump CheMPS2 to v1.8.4; - [x] Bump Libint to Ninja-able version, v1.2.1+2; - [x] Bump Pybind11 to v2.2.2. Note that this invokes symbol hiding, so ...; - [x] Include Jet's `PSI_API` macro to re-expose classes for plugins.; * **User-Facing for Release Notes**; - [x] Note that anyone wanting to re-use an `objdir` will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; - `<objdir> rm -rf external/upstream/pybind11`. ## Status; - [x] Ready for review; - [x] Ready for merge. @psi4/editors, these should be quick and uncontroversial. Getting this in would help the PR assembly line.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/950
https://github.com/psi4/psi4/pull/950:562,Safety,detect,detectability,562,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Bump CheMPS2 to v1.8.4; - [x] Bump Libint to Ninja-able version, v1.2.1+2; - [x] Bump Pybind11 to v2.2.2. Note that this invokes symbol hiding, so ...; - [x] Include Jet's `PSI_API` macro to re-expose classes for plugins.; * **User-Facing for Release Notes**; - [x] Note that anyone wanting to re-use an `objdir` will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; - `<objdir> rm -rf external/upstream/pybind11`. ## Status; - [x] Ready for review; - [x] Ready for merge. @psi4/editors, these should be quick and uncontroversial. Getting this in would help the PR assembly line.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/950
https://github.com/psi4/psi4/pull/950:379,Security,expose,expose,379,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Bump CheMPS2 to v1.8.4; - [x] Bump Libint to Ninja-able version, v1.2.1+2; - [x] Bump Pybind11 to v2.2.2. Note that this invokes symbol hiding, so ...; - [x] Include Jet's `PSI_API` macro to re-expose classes for plugins.; * **User-Facing for Release Notes**; - [x] Note that anyone wanting to re-use an `objdir` will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; - `<objdir> rm -rf external/upstream/pybind11`. ## Status; - [x] Ready for review; - [x] Ready for merge. @psi4/editors, these should be quick and uncontroversial. Getting this in would help the PR assembly line.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/950
https://github.com/psi4/psi4/pull/951:103,Availability,fault,faults,103,"## Description; When running a simple RHF calculation and computing cube files, I was experiencing seg faults or orbitals that look like:; ![image](https://user-images.githubusercontent.com/9198329/38570936-0b5815e4-3cbd-11e8-93ce-f7cf4a57b46e.png); after updating my Psi for the first time in a while. After a bit of digging, I think I've tracked the problem--no more seg faults and my orbitals look like:; ![image](https://user-images.githubusercontent.com/9198329/38570995-3f7b156a-3cbd-11e8-8dbd-b8a2423033be.png). Not sure why the cubeprop test (which was passing) didn't catch this. ## Todos; - [X] Fix copy call in points.cc. ## Questions; - [x] Should I add another cubeprop test?. ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/951
https://github.com/psi4/psi4/pull/951:373,Availability,fault,faults,373,"## Description; When running a simple RHF calculation and computing cube files, I was experiencing seg faults or orbitals that look like:; ![image](https://user-images.githubusercontent.com/9198329/38570936-0b5815e4-3cbd-11e8-93ce-f7cf4a57b46e.png); after updating my Psi for the first time in a while. After a bit of digging, I think I've tracked the problem--no more seg faults and my orbitals look like:; ![image](https://user-images.githubusercontent.com/9198329/38570995-3f7b156a-3cbd-11e8-8dbd-b8a2423033be.png). Not sure why the cubeprop test (which was passing) didn't catch this. ## Todos; - [X] Fix copy call in points.cc. ## Questions; - [x] Should I add another cubeprop test?. ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/951
https://github.com/psi4/psi4/pull/951:545,Testability,test,test,545,"## Description; When running a simple RHF calculation and computing cube files, I was experiencing seg faults or orbitals that look like:; ![image](https://user-images.githubusercontent.com/9198329/38570936-0b5815e4-3cbd-11e8-93ce-f7cf4a57b46e.png); after updating my Psi for the first time in a while. After a bit of digging, I think I've tracked the problem--no more seg faults and my orbitals look like:; ![image](https://user-images.githubusercontent.com/9198329/38570995-3f7b156a-3cbd-11e8-8dbd-b8a2423033be.png). Not sure why the cubeprop test (which was passing) didn't catch this. ## Todos; - [X] Fix copy call in points.cc. ## Questions; - [x] Should I add another cubeprop test?. ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/951
https://github.com/psi4/psi4/pull/951:683,Testability,test,test,683,"## Description; When running a simple RHF calculation and computing cube files, I was experiencing seg faults or orbitals that look like:; ![image](https://user-images.githubusercontent.com/9198329/38570936-0b5815e4-3cbd-11e8-93ce-f7cf4a57b46e.png); after updating my Psi for the first time in a while. After a bit of digging, I think I've tracked the problem--no more seg faults and my orbitals look like:; ![image](https://user-images.githubusercontent.com/9198329/38570995-3f7b156a-3cbd-11e8-8dbd-b8a2423033be.png). Not sure why the cubeprop test (which was passing) didn't catch this. ## Todos; - [X] Fix copy call in points.cc. ## Questions; - [x] Should I add another cubeprop test?. ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/951
https://github.com/psi4/psi4/pull/951:31,Usability,simpl,simple,31,"## Description; When running a simple RHF calculation and computing cube files, I was experiencing seg faults or orbitals that look like:; ![image](https://user-images.githubusercontent.com/9198329/38570936-0b5815e4-3cbd-11e8-93ce-f7cf4a57b46e.png); after updating my Psi for the first time in a while. After a bit of digging, I think I've tracked the problem--no more seg faults and my orbitals look like:; ![image](https://user-images.githubusercontent.com/9198329/38570995-3f7b156a-3cbd-11e8-8dbd-b8a2423033be.png). Not sure why the cubeprop test (which was passing) didn't catch this. ## Todos; - [X] Fix copy call in points.cc. ## Questions; - [x] Should I add another cubeprop test?. ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/951
https://github.com/psi4/psi4/pull/952:935,Deployability,Release,Release,935,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/952
https://github.com/psi4/psi4/pull/952:1020,Deployability,integrat,integration,1020,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/952
https://github.com/psi4/psi4/pull/952:126,Energy Efficiency,ENERGY,ENERGY,126,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/952
https://github.com/psi4/psi4/pull/952:619,Energy Efficiency,ENERGY,ENERGY,619,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/952
https://github.com/psi4/psi4/pull/952:679,Energy Efficiency,energy,energy,679,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/952
https://github.com/psi4/psi4/pull/952:1020,Integrability,integrat,integration,1020,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/952
https://github.com/psi4/psi4/pull/952:768,Modifiability,Variab,Variable,768,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/952
https://github.com/psi4/psi4/pull/952:1287,Testability,Test,Tests,1287,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/952
https://github.com/psi4/psi4/pull/952:1361,Testability,test,tests,1361,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/952
https://github.com/psi4/psi4/pull/952:1452,Testability,test,tests,1452,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/952
https://github.com/psi4/psi4/pull/952:1115,Usability,intuit,intuitive,1115,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/952
https://github.com/psi4/psi4/pull/953:1675,Integrability,interface,interface,1675,"last sequence PR before splitting away qcdb. I suggest it form the start of `v1.3` . ~Since originally posted (+27k/–10k), this PR has had #834 subtracted from it (now +13k/–7k). It is built atop #965, so I wouldn't review until that gets pulled in and subtracted from this. What does need answering soonish is whether for 1.2/1.3 purposes, the remaining commits of this PR should be separated further.~. ~Now this has had #965 rebased through, it should be stable for a good while. It now has size (+9k/–6k). There doesn't seem much interest in promoting the below to 1.2, so no need for further subdivision.~. This has now had **v1.2 rebased through** so I sincerely hope it's been kneaded for the last time. ## Todos: Py-side SCF/PCM/EFP (1.3); * **Developer Interest**; - [x] SCF iterations moved py-side; - [x] includes control of MOM, DIIS, damping, soscf, frac, efp; - [x] SCF finalize, stability, post-iterations, printing moved py-side; - [x] Rework a good bit of Wfn::HF::common_init() to minimize the convergence helper controllers that are c-side; - [x] A couple export/def bugs fixed in Wfn::HF and more fns exported and moved to public in class; - [x] PCMSolver interface reworked for py-side; - [x] libefp EFP object moved from c-side `P::e.EFP` to a py-side attached EFP attribute on the `psi4.core.Molecule` object.; - [x] Psi4 forgot about the c-side EFP object in bin, lib, globals, exports (still in options); - [x] EFP/EFP calcs moved purely py-side; - [x] SCF/EFP calcs carry out operations on the EFP object py-side; - [x] efp_torque no longer in `P::e` but `EFP TORQUE` in `P::e:arrays`. ## Todos: Py-side Mol Parsing (could be split out for 1.2); * **User Interest**; - [x] `molecule {...}` will take xyz (element symbol _or_ atomic number) or psi4 formats.; - [x] overall chgmult now specifiable through `1 3\n--` before any fragments.; - [x] can specify atomic number, mass number, mass, ghosting, extra-label in mol spec.; * **Developer Interest**; - [x] `*.Molecule` forg",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/953
https://github.com/psi4/psi4/pull/953:3371,Security,access,accessed,3371,"ber, mass, ghosting, extra-label in mol spec.; * **Developer Interest**; - [x] `*.Molecule` forgot `charge_specified` and `multiplicity_specified` attributes. They were only used once in deciding mult defaulting in the SCF and that logic is now handled at mol parsing time.; - [x] `*.Molecule` forgot `create_molecule_from_string()` and good riddance. Also `*.Molecule` `init_with_xyz` (all the format variations can be handled by plain `from_string`. There's an optional `dtype` if you want to be specific.; - [x] Remove singlet/doublet defaulting logic in `Wavefunction::common_init()`, as this is taken care of by mol init; - [x] In keywords (`read_options`), `EFP_POL`, `QMEFP_POL`, `EFP_POL_DAMPING`, all `POL` --> `IND`.; - [x] Main `molutil.set_geometry()` that all psithon and psiapi calls use to process user molecule switch from c-side parsing to `qcdb.molparse.from_string()` parsing. This fn handles QM mol, EFP frag, and PubChem contents.; - [x] `libefp` accessed through `PylibEFP` and `-DENABLE_libefp=ON` activates both; - [x] `psi4.core.Molecule.molecule_from_string(string)` constructor calls py-side parsing. Can override string contents with `fix_com`, `fix_orientation`, `fix_symmetry` args. `string` can have QM mol, EFP frag, and pubchem contents. ## Questions; - [ ] @robertodr, feel free to elaborate PCMSolver changes; - [x] ~**Everyone** the previous PR #965 gets both Mol classes to a point where they _can_ be instantiated by py-side parsing (or arrays, or dict). Do we want the second set of changes above where inputparser is calling py-side parsing into 1.2? It will require PylibEFP. SCF/EFP will remain c-side.~; - [x] @robertodr https://github.com/psi4/psi4/pull/953#discussion_r203921398 full test suite (incl. pcm) passes with form_F commented out. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] symmetrize pubc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/953
https://github.com/psi4/psi4/pull/953:219,Testability,test,tests,219,"## Description; ~This replaces #919, which I don't want to overwrite just yet b/c it has history and some review comments. This is up-to-date wrt master (10 Apr) and has had a recent pyvib2 rebased through (9 Apr). All tests pass. This is **not** ready to look at b/c it still includes #834 . When that makes it into master, I'll rebase it through again and then~ this PR should only include fully-working py-side scf and mol parsing (`create_molecule_from_string` is gone in this code). This is my last sequence PR before splitting away qcdb. I suggest it form the start of `v1.3` . ~Since originally posted (+27k/–10k), this PR has had #834 subtracted from it (now +13k/–7k). It is built atop #965, so I wouldn't review until that gets pulled in and subtracted from this. What does need answering soonish is whether for 1.2/1.3 purposes, the remaining commits of this PR should be separated further.~. ~Now this has had #965 rebased through, it should be stable for a good while. It now has size (+9k/–6k). There doesn't seem much interest in promoting the below to 1.2, so no need for further subdivision.~. This has now had **v1.2 rebased through** so I sincerely hope it's been kneaded for the last time. ## Todos: Py-side SCF/PCM/EFP (1.3); * **Developer Interest**; - [x] SCF iterations moved py-side; - [x] includes control of MOM, DIIS, damping, soscf, frac, efp; - [x] SCF finalize, stability, post-iterations, printing moved py-side; - [x] Rework a good bit of Wfn::HF::common_init() to minimize the convergence helper controllers that are c-side; - [x] A couple export/def bugs fixed in Wfn::HF and more fns exported and moved to public in class; - [x] PCMSolver interface reworked for py-side; - [x] libefp EFP object moved from c-side `P::e.EFP` to a py-side attached EFP attribute on the `psi4.core.Molecule` object.; - [x] Psi4 forgot about the c-side EFP object in bin, lib, globals, exports (still in options); - [x] EFP/EFP calcs moved purely py-side; - [x] SCF/EFP calcs carry out ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/953
https://github.com/psi4/psi4/pull/953:2635,Testability,log,logic,2635,"s exported and moved to public in class; - [x] PCMSolver interface reworked for py-side; - [x] libefp EFP object moved from c-side `P::e.EFP` to a py-side attached EFP attribute on the `psi4.core.Molecule` object.; - [x] Psi4 forgot about the c-side EFP object in bin, lib, globals, exports (still in options); - [x] EFP/EFP calcs moved purely py-side; - [x] SCF/EFP calcs carry out operations on the EFP object py-side; - [x] efp_torque no longer in `P::e` but `EFP TORQUE` in `P::e:arrays`. ## Todos: Py-side Mol Parsing (could be split out for 1.2); * **User Interest**; - [x] `molecule {...}` will take xyz (element symbol _or_ atomic number) or psi4 formats.; - [x] overall chgmult now specifiable through `1 3\n--` before any fragments.; - [x] can specify atomic number, mass number, mass, ghosting, extra-label in mol spec.; * **Developer Interest**; - [x] `*.Molecule` forgot `charge_specified` and `multiplicity_specified` attributes. They were only used once in deciding mult defaulting in the SCF and that logic is now handled at mol parsing time.; - [x] `*.Molecule` forgot `create_molecule_from_string()` and good riddance. Also `*.Molecule` `init_with_xyz` (all the format variations can be handled by plain `from_string`. There's an optional `dtype` if you want to be specific.; - [x] Remove singlet/doublet defaulting logic in `Wavefunction::common_init()`, as this is taken care of by mol init; - [x] In keywords (`read_options`), `EFP_POL`, `QMEFP_POL`, `EFP_POL_DAMPING`, all `POL` --> `IND`.; - [x] Main `molutil.set_geometry()` that all psithon and psiapi calls use to process user molecule switch from c-side parsing to `qcdb.molparse.from_string()` parsing. This fn handles QM mol, EFP frag, and PubChem contents.; - [x] `libefp` accessed through `PylibEFP` and `-DENABLE_libefp=ON` activates both; - [x] `psi4.core.Molecule.molecule_from_string(string)` constructor calls py-side parsing. Can override string contents with `fix_com`, `fix_orientation`, `fix_symmetry` args. `st",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/953
https://github.com/psi4/psi4/pull/953:2952,Testability,log,logic,2952,"EFP object py-side; - [x] efp_torque no longer in `P::e` but `EFP TORQUE` in `P::e:arrays`. ## Todos: Py-side Mol Parsing (could be split out for 1.2); * **User Interest**; - [x] `molecule {...}` will take xyz (element symbol _or_ atomic number) or psi4 formats.; - [x] overall chgmult now specifiable through `1 3\n--` before any fragments.; - [x] can specify atomic number, mass number, mass, ghosting, extra-label in mol spec.; * **Developer Interest**; - [x] `*.Molecule` forgot `charge_specified` and `multiplicity_specified` attributes. They were only used once in deciding mult defaulting in the SCF and that logic is now handled at mol parsing time.; - [x] `*.Molecule` forgot `create_molecule_from_string()` and good riddance. Also `*.Molecule` `init_with_xyz` (all the format variations can be handled by plain `from_string`. There's an optional `dtype` if you want to be specific.; - [x] Remove singlet/doublet defaulting logic in `Wavefunction::common_init()`, as this is taken care of by mol init; - [x] In keywords (`read_options`), `EFP_POL`, `QMEFP_POL`, `EFP_POL_DAMPING`, all `POL` --> `IND`.; - [x] Main `molutil.set_geometry()` that all psithon and psiapi calls use to process user molecule switch from c-side parsing to `qcdb.molparse.from_string()` parsing. This fn handles QM mol, EFP frag, and PubChem contents.; - [x] `libefp` accessed through `PylibEFP` and `-DENABLE_libefp=ON` activates both; - [x] `psi4.core.Molecule.molecule_from_string(string)` constructor calls py-side parsing. Can override string contents with `fix_com`, `fix_orientation`, `fix_symmetry` args. `string` can have QM mol, EFP frag, and pubchem contents. ## Questions; - [ ] @robertodr, feel free to elaborate PCMSolver changes; - [x] ~**Everyone** the previous PR #965 gets both Mol classes to a point where they _can_ be instantiated by py-side parsing (or arrays, or dict). Do we want the second set of changes above where inputparser is calling py-side parsing into 1.2? It will require PylibEFP. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/953
https://github.com/psi4/psi4/pull/953:4132,Testability,test,test,4132,"g mult defaulting in the SCF and that logic is now handled at mol parsing time.; - [x] `*.Molecule` forgot `create_molecule_from_string()` and good riddance. Also `*.Molecule` `init_with_xyz` (all the format variations can be handled by plain `from_string`. There's an optional `dtype` if you want to be specific.; - [x] Remove singlet/doublet defaulting logic in `Wavefunction::common_init()`, as this is taken care of by mol init; - [x] In keywords (`read_options`), `EFP_POL`, `QMEFP_POL`, `EFP_POL_DAMPING`, all `POL` --> `IND`.; - [x] Main `molutil.set_geometry()` that all psithon and psiapi calls use to process user molecule switch from c-side parsing to `qcdb.molparse.from_string()` parsing. This fn handles QM mol, EFP frag, and PubChem contents.; - [x] `libefp` accessed through `PylibEFP` and `-DENABLE_libefp=ON` activates both; - [x] `psi4.core.Molecule.molecule_from_string(string)` constructor calls py-side parsing. Can override string contents with `fix_com`, `fix_orientation`, `fix_symmetry` args. `string` can have QM mol, EFP frag, and pubchem contents. ## Questions; - [ ] @robertodr, feel free to elaborate PCMSolver changes; - [x] ~**Everyone** the previous PR #965 gets both Mol classes to a point where they _can_ be instantiated by py-side parsing (or arrays, or dict). Do we want the second set of changes above where inputparser is calling py-side parsing into 1.2? It will require PylibEFP. SCF/EFP will remain c-side.~; - [x] @robertodr https://github.com/psi4/psi4/pull/953#discussion_r203921398 full test suite (incl. pcm) passes with form_F commented out. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] symmetrize pubchem inputs, see https://github.com/psi4/psi4/pull/965#issuecomment-382854005; - [ ] max_attempts for instability following isn't through. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/953
https://github.com/psi4/psi4/pull/953:4209,Testability,Test,Tests,4209,"g mult defaulting in the SCF and that logic is now handled at mol parsing time.; - [x] `*.Molecule` forgot `create_molecule_from_string()` and good riddance. Also `*.Molecule` `init_with_xyz` (all the format variations can be handled by plain `from_string`. There's an optional `dtype` if you want to be specific.; - [x] Remove singlet/doublet defaulting logic in `Wavefunction::common_init()`, as this is taken care of by mol init; - [x] In keywords (`read_options`), `EFP_POL`, `QMEFP_POL`, `EFP_POL_DAMPING`, all `POL` --> `IND`.; - [x] Main `molutil.set_geometry()` that all psithon and psiapi calls use to process user molecule switch from c-side parsing to `qcdb.molparse.from_string()` parsing. This fn handles QM mol, EFP frag, and PubChem contents.; - [x] `libefp` accessed through `PylibEFP` and `-DENABLE_libefp=ON` activates both; - [x] `psi4.core.Molecule.molecule_from_string(string)` constructor calls py-side parsing. Can override string contents with `fix_com`, `fix_orientation`, `fix_symmetry` args. `string` can have QM mol, EFP frag, and pubchem contents. ## Questions; - [ ] @robertodr, feel free to elaborate PCMSolver changes; - [x] ~**Everyone** the previous PR #965 gets both Mol classes to a point where they _can_ be instantiated by py-side parsing (or arrays, or dict). Do we want the second set of changes above where inputparser is calling py-side parsing into 1.2? It will require PylibEFP. SCF/EFP will remain c-side.~; - [x] @robertodr https://github.com/psi4/psi4/pull/953#discussion_r203921398 full test suite (incl. pcm) passes with form_F commented out. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] symmetrize pubchem inputs, see https://github.com/psi4/psi4/pull/965#issuecomment-382854005; - [ ] max_attempts for instability following isn't through. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/953
https://github.com/psi4/psi4/pull/953:4283,Testability,test,tests,4283,"g mult defaulting in the SCF and that logic is now handled at mol parsing time.; - [x] `*.Molecule` forgot `create_molecule_from_string()` and good riddance. Also `*.Molecule` `init_with_xyz` (all the format variations can be handled by plain `from_string`. There's an optional `dtype` if you want to be specific.; - [x] Remove singlet/doublet defaulting logic in `Wavefunction::common_init()`, as this is taken care of by mol init; - [x] In keywords (`read_options`), `EFP_POL`, `QMEFP_POL`, `EFP_POL_DAMPING`, all `POL` --> `IND`.; - [x] Main `molutil.set_geometry()` that all psithon and psiapi calls use to process user molecule switch from c-side parsing to `qcdb.molparse.from_string()` parsing. This fn handles QM mol, EFP frag, and PubChem contents.; - [x] `libefp` accessed through `PylibEFP` and `-DENABLE_libefp=ON` activates both; - [x] `psi4.core.Molecule.molecule_from_string(string)` constructor calls py-side parsing. Can override string contents with `fix_com`, `fix_orientation`, `fix_symmetry` args. `string` can have QM mol, EFP frag, and pubchem contents. ## Questions; - [ ] @robertodr, feel free to elaborate PCMSolver changes; - [x] ~**Everyone** the previous PR #965 gets both Mol classes to a point where they _can_ be instantiated by py-side parsing (or arrays, or dict). Do we want the second set of changes above where inputparser is calling py-side parsing into 1.2? It will require PylibEFP. SCF/EFP will remain c-side.~; - [x] @robertodr https://github.com/psi4/psi4/pull/953#discussion_r203921398 full test suite (incl. pcm) passes with form_F commented out. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] symmetrize pubchem inputs, see https://github.com/psi4/psi4/pull/965#issuecomment-382854005; - [ ] max_attempts for instability following isn't through. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/953
https://github.com/psi4/psi4/pull/953:4374,Testability,test,tests,4374,"g mult defaulting in the SCF and that logic is now handled at mol parsing time.; - [x] `*.Molecule` forgot `create_molecule_from_string()` and good riddance. Also `*.Molecule` `init_with_xyz` (all the format variations can be handled by plain `from_string`. There's an optional `dtype` if you want to be specific.; - [x] Remove singlet/doublet defaulting logic in `Wavefunction::common_init()`, as this is taken care of by mol init; - [x] In keywords (`read_options`), `EFP_POL`, `QMEFP_POL`, `EFP_POL_DAMPING`, all `POL` --> `IND`.; - [x] Main `molutil.set_geometry()` that all psithon and psiapi calls use to process user molecule switch from c-side parsing to `qcdb.molparse.from_string()` parsing. This fn handles QM mol, EFP frag, and PubChem contents.; - [x] `libefp` accessed through `PylibEFP` and `-DENABLE_libefp=ON` activates both; - [x] `psi4.core.Molecule.molecule_from_string(string)` constructor calls py-side parsing. Can override string contents with `fix_com`, `fix_orientation`, `fix_symmetry` args. `string` can have QM mol, EFP frag, and pubchem contents. ## Questions; - [ ] @robertodr, feel free to elaborate PCMSolver changes; - [x] ~**Everyone** the previous PR #965 gets both Mol classes to a point where they _can_ be instantiated by py-side parsing (or arrays, or dict). Do we want the second set of changes above where inputparser is calling py-side parsing into 1.2? It will require PylibEFP. SCF/EFP will remain c-side.~; - [x] @robertodr https://github.com/psi4/psi4/pull/953#discussion_r203921398 full test suite (incl. pcm) passes with form_F commented out. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] symmetrize pubchem inputs, see https://github.com/psi4/psi4/pull/965#issuecomment-382854005; - [ ] max_attempts for instability following isn't through. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/953
https://github.com/psi4/psi4/issues/954:135,Availability,error,error,135,"I would like to use the program from source (rather than the conda distribution), but attempting to build CMake gives me the following error:; ```; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external LAPACK library found (have you set the MATH_ROOT environment variable?); ```. However, when performing `locate lapack`, I get this:; ```; /usr/include/clapack.h; /usr/lib64/liblapack.so.3; /usr/lib64/liblapack.so.3.4; /usr/lib64/liblapack.so.3.4.2; /usr/lib64/liblapacke.so.3; /usr/lib64/liblapacke.so.3.4; /usr/lib64/liblapacke.so.3.4.2; /usr/lib64/python2.7/site-packages/numpy/linalg/lapack_lite.so; /usr/share/doc/lapack-3.4.2; /usr/share/doc/atlas-devel-3.10.1/doc/lapackqref.pdf; /usr/share/doc/lapack-3.4.2/LICENSE; /usr/share/doc/lapack-3.4.2/README; /usr/share/doc/lapack-3.4.2/lapackqref.ps; ```; I am not sure if the required library is here. Doing `MATH_ROOT=\usr\ cmake3 -H. -Bobjdir` did not help either.; Is there any possible idea how the error could have occurred? I have also tried to instal MKL from conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/954
https://github.com/psi4/psi4/issues/954:154,Availability,Error,Error,154,"I would like to use the program from source (rather than the conda distribution), but attempting to build CMake gives me the following error:; ```; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external LAPACK library found (have you set the MATH_ROOT environment variable?); ```. However, when performing `locate lapack`, I get this:; ```; /usr/include/clapack.h; /usr/lib64/liblapack.so.3; /usr/lib64/liblapack.so.3.4; /usr/lib64/liblapack.so.3.4.2; /usr/lib64/liblapacke.so.3; /usr/lib64/liblapacke.so.3.4; /usr/lib64/liblapacke.so.3.4.2; /usr/lib64/python2.7/site-packages/numpy/linalg/lapack_lite.so; /usr/share/doc/lapack-3.4.2; /usr/share/doc/atlas-devel-3.10.1/doc/lapackqref.pdf; /usr/share/doc/lapack-3.4.2/LICENSE; /usr/share/doc/lapack-3.4.2/README; /usr/share/doc/lapack-3.4.2/lapackqref.ps; ```; I am not sure if the required library is here. Doing `MATH_ROOT=\usr\ cmake3 -H. -Bobjdir` did not help either.; Is there any possible idea how the error could have occurred? I have also tried to instal MKL from conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/954
https://github.com/psi4/psi4/issues/954:984,Availability,error,error,984,"I would like to use the program from source (rather than the conda distribution), but attempting to build CMake gives me the following error:; ```; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external LAPACK library found (have you set the MATH_ROOT environment variable?); ```. However, when performing `locate lapack`, I get this:; ```; /usr/include/clapack.h; /usr/lib64/liblapack.so.3; /usr/lib64/liblapack.so.3.4; /usr/lib64/liblapack.so.3.4.2; /usr/lib64/liblapacke.so.3; /usr/lib64/liblapacke.so.3.4; /usr/lib64/liblapacke.so.3.4.2; /usr/lib64/python2.7/site-packages/numpy/linalg/lapack_lite.so; /usr/share/doc/lapack-3.4.2; /usr/share/doc/atlas-devel-3.10.1/doc/lapackqref.pdf; /usr/share/doc/lapack-3.4.2/LICENSE; /usr/share/doc/lapack-3.4.2/README; /usr/share/doc/lapack-3.4.2/lapackqref.ps; ```; I am not sure if the required library is here. Doing `MATH_ROOT=\usr\ cmake3 -H. -Bobjdir` did not help either.; Is there any possible idea how the error could have occurred? I have also tried to instal MKL from conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/954
https://github.com/psi4/psi4/issues/954:203,Integrability,message,message,203,"I would like to use the program from source (rather than the conda distribution), but attempting to build CMake gives me the following error:; ```; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external LAPACK library found (have you set the MATH_ROOT environment variable?); ```. However, when performing `locate lapack`, I get this:; ```; /usr/include/clapack.h; /usr/lib64/liblapack.so.3; /usr/lib64/liblapack.so.3.4; /usr/lib64/liblapack.so.3.4.2; /usr/lib64/liblapacke.so.3; /usr/lib64/liblapacke.so.3.4; /usr/lib64/liblapacke.so.3.4.2; /usr/lib64/python2.7/site-packages/numpy/linalg/lapack_lite.so; /usr/share/doc/lapack-3.4.2; /usr/share/doc/atlas-devel-3.10.1/doc/lapackqref.pdf; /usr/share/doc/lapack-3.4.2/LICENSE; /usr/share/doc/lapack-3.4.2/README; /usr/share/doc/lapack-3.4.2/lapackqref.ps; ```; I am not sure if the required library is here. Doing `MATH_ROOT=\usr\ cmake3 -H. -Bobjdir` did not help either.; Is there any possible idea how the error could have occurred? I have also tried to instal MKL from conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/954
https://github.com/psi4/psi4/issues/954:290,Modifiability,variab,variable,290,"I would like to use the program from source (rather than the conda distribution), but attempting to build CMake gives me the following error:; ```; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external LAPACK library found (have you set the MATH_ROOT environment variable?); ```. However, when performing `locate lapack`, I get this:; ```; /usr/include/clapack.h; /usr/lib64/liblapack.so.3; /usr/lib64/liblapack.so.3.4; /usr/lib64/liblapack.so.3.4.2; /usr/lib64/liblapacke.so.3; /usr/lib64/liblapacke.so.3.4; /usr/lib64/liblapacke.so.3.4.2; /usr/lib64/python2.7/site-packages/numpy/linalg/lapack_lite.so; /usr/share/doc/lapack-3.4.2; /usr/share/doc/atlas-devel-3.10.1/doc/lapackqref.pdf; /usr/share/doc/lapack-3.4.2/LICENSE; /usr/share/doc/lapack-3.4.2/README; /usr/share/doc/lapack-3.4.2/lapackqref.ps; ```; I am not sure if the required library is here. Doing `MATH_ROOT=\usr\ cmake3 -H. -Bobjdir` did not help either.; Is there any possible idea how the error could have occurred? I have also tried to instal MKL from conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/954
https://github.com/psi4/psi4/issues/954:321,Performance,perform,performing,321,"I would like to use the program from source (rather than the conda distribution), but attempting to build CMake gives me the following error:; ```; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external LAPACK library found (have you set the MATH_ROOT environment variable?); ```. However, when performing `locate lapack`, I get this:; ```; /usr/include/clapack.h; /usr/lib64/liblapack.so.3; /usr/lib64/liblapack.so.3.4; /usr/lib64/liblapack.so.3.4.2; /usr/lib64/liblapacke.so.3; /usr/lib64/liblapacke.so.3.4; /usr/lib64/liblapacke.so.3.4.2; /usr/lib64/python2.7/site-packages/numpy/linalg/lapack_lite.so; /usr/share/doc/lapack-3.4.2; /usr/share/doc/atlas-devel-3.10.1/doc/lapackqref.pdf; /usr/share/doc/lapack-3.4.2/LICENSE; /usr/share/doc/lapack-3.4.2/README; /usr/share/doc/lapack-3.4.2/lapackqref.ps; ```; I am not sure if the required library is here. Doing `MATH_ROOT=\usr\ cmake3 -H. -Bobjdir` did not help either.; Is there any possible idea how the error could have occurred? I have also tried to instal MKL from conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/954
https://github.com/psi4/psi4/pull/955:953,Availability,error,error,953,"## Description; Make v2rdm_casscf work with psi in the v2.2.2 pybind11 era. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~half~ done adding `PSI_API` to psi where v2rdm wants it; - [x] corresponding v2rdm repo change is https://github.com/loriab/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff. ## Questions; - [x] @jturney, @edeprince3, I intended to finish this, but I'm confused by `C_DDOT`. `core.so` has the symbol that `v2rdm_casscf.so` wants, but the test file complains about DDOT anyway. Maybe there's some more complicated place that `PSI_API` needs to be inserted that I'm not seeing from simple pattern following. So consider this work a start and a puzzle.; ```; >>> ../hrw-qcdb/objdir/stage/usr/local/psi4/bin/psi4 tests/v2rdm3/input.dat ; H3 / cc-pvdz / D+D3 vs full CI, scf_type = PK; /home/psilocaluser/miniconda3/envs/idp35p4/bin/python: symbol lookup error: /home/psilocaluser/gits/hrw-qcdb/objdir/stage/usr/local/psi4/lib/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZN3psi6C_DDOTEmPdiS0_i; >>> nm v2rdm_casscf.so | grep DDOT; U _ZN3psi6C_DDOTEmPdiS0_i; >>> nm ../hrw-qcdb/objdir/stage/usr/local/psi4/lib/psi4/core.so | grep DDOT; 00000000006013c0 t _ZN3psi6C_DDOTEmPdiS0_i; 00000000017384d0 t _ZN3psi8PSI_DDOTEimSt10shared_ptrINS_6VectorEEiS2_i; ```; - [x] if https://github.com/edeprince3/v2rdm_casscf/pull/26 gets merged quickly, then I should re-point the cmake back to Eugene; - [ ] should we export _all_ lapack in https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libqt/lapack_intfc.cc ?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/955
https://github.com/psi4/psi4/pull/955:541,Testability,test,test,541,"## Description; Make v2rdm_casscf work with psi in the v2.2.2 pybind11 era. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~half~ done adding `PSI_API` to psi where v2rdm wants it; - [x] corresponding v2rdm repo change is https://github.com/loriab/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff. ## Questions; - [x] @jturney, @edeprince3, I intended to finish this, but I'm confused by `C_DDOT`. `core.so` has the symbol that `v2rdm_casscf.so` wants, but the test file complains about DDOT anyway. Maybe there's some more complicated place that `PSI_API` needs to be inserted that I'm not seeing from simple pattern following. So consider this work a start and a puzzle.; ```; >>> ../hrw-qcdb/objdir/stage/usr/local/psi4/bin/psi4 tests/v2rdm3/input.dat ; H3 / cc-pvdz / D+D3 vs full CI, scf_type = PK; /home/psilocaluser/miniconda3/envs/idp35p4/bin/python: symbol lookup error: /home/psilocaluser/gits/hrw-qcdb/objdir/stage/usr/local/psi4/lib/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZN3psi6C_DDOTEmPdiS0_i; >>> nm v2rdm_casscf.so | grep DDOT; U _ZN3psi6C_DDOTEmPdiS0_i; >>> nm ../hrw-qcdb/objdir/stage/usr/local/psi4/lib/psi4/core.so | grep DDOT; 00000000006013c0 t _ZN3psi6C_DDOTEmPdiS0_i; 00000000017384d0 t _ZN3psi8PSI_DDOTEimSt10shared_ptrINS_6VectorEEiS2_i; ```; - [x] if https://github.com/edeprince3/v2rdm_casscf/pull/26 gets merged quickly, then I should re-point the cmake back to Eugene; - [ ] should we export _all_ lapack in https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libqt/lapack_intfc.cc ?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/955
https://github.com/psi4/psi4/pull/955:812,Testability,test,tests,812,"## Description; Make v2rdm_casscf work with psi in the v2.2.2 pybind11 era. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~half~ done adding `PSI_API` to psi where v2rdm wants it; - [x] corresponding v2rdm repo change is https://github.com/loriab/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff. ## Questions; - [x] @jturney, @edeprince3, I intended to finish this, but I'm confused by `C_DDOT`. `core.so` has the symbol that `v2rdm_casscf.so` wants, but the test file complains about DDOT anyway. Maybe there's some more complicated place that `PSI_API` needs to be inserted that I'm not seeing from simple pattern following. So consider this work a start and a puzzle.; ```; >>> ../hrw-qcdb/objdir/stage/usr/local/psi4/bin/psi4 tests/v2rdm3/input.dat ; H3 / cc-pvdz / D+D3 vs full CI, scf_type = PK; /home/psilocaluser/miniconda3/envs/idp35p4/bin/python: symbol lookup error: /home/psilocaluser/gits/hrw-qcdb/objdir/stage/usr/local/psi4/lib/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZN3psi6C_DDOTEmPdiS0_i; >>> nm v2rdm_casscf.so | grep DDOT; U _ZN3psi6C_DDOTEmPdiS0_i; >>> nm ../hrw-qcdb/objdir/stage/usr/local/psi4/lib/psi4/core.so | grep DDOT; 00000000006013c0 t _ZN3psi6C_DDOTEmPdiS0_i; 00000000017384d0 t _ZN3psi8PSI_DDOTEimSt10shared_ptrINS_6VectorEEiS2_i; ```; - [x] if https://github.com/edeprince3/v2rdm_casscf/pull/26 gets merged quickly, then I should re-point the cmake back to Eugene; - [ ] should we export _all_ lapack in https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libqt/lapack_intfc.cc ?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/955
https://github.com/psi4/psi4/pull/955:683,Usability,simpl,simple,683,"## Description; Make v2rdm_casscf work with psi in the v2.2.2 pybind11 era. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~half~ done adding `PSI_API` to psi where v2rdm wants it; - [x] corresponding v2rdm repo change is https://github.com/loriab/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff. ## Questions; - [x] @jturney, @edeprince3, I intended to finish this, but I'm confused by `C_DDOT`. `core.so` has the symbol that `v2rdm_casscf.so` wants, but the test file complains about DDOT anyway. Maybe there's some more complicated place that `PSI_API` needs to be inserted that I'm not seeing from simple pattern following. So consider this work a start and a puzzle.; ```; >>> ../hrw-qcdb/objdir/stage/usr/local/psi4/bin/psi4 tests/v2rdm3/input.dat ; H3 / cc-pvdz / D+D3 vs full CI, scf_type = PK; /home/psilocaluser/miniconda3/envs/idp35p4/bin/python: symbol lookup error: /home/psilocaluser/gits/hrw-qcdb/objdir/stage/usr/local/psi4/lib/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZN3psi6C_DDOTEmPdiS0_i; >>> nm v2rdm_casscf.so | grep DDOT; U _ZN3psi6C_DDOTEmPdiS0_i; >>> nm ../hrw-qcdb/objdir/stage/usr/local/psi4/lib/psi4/core.so | grep DDOT; 00000000006013c0 t _ZN3psi6C_DDOTEmPdiS0_i; 00000000017384d0 t _ZN3psi8PSI_DDOTEimSt10shared_ptrINS_6VectorEEiS2_i; ```; - [x] if https://github.com/edeprince3/v2rdm_casscf/pull/26 gets merged quickly, then I should re-point the cmake back to Eugene; - [ ] should we export _all_ lapack in https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libqt/lapack_intfc.cc ?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/955
https://github.com/psi4/psi4/pull/957:287,Availability,down,down,287,"## Description; FIxes the `fcidump` function for C1 symmetry. The looping over irreps was done incorrectly and the tests did not catch it. ; As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. ~I am tracking down the problem in issue #980 This PR disables the generation of integral dumps from UHF references.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix `fcidump` function for C1 symmetry.; - [x] More robust testing facilities for FCIDUMP. Headers are compared and integrals are used to recompute the SCF one-, two-electron, total electronic and MP2 correlation energies. These are compared to the values computed by Psi4. This also fixes #980 Thanks @dgasmith!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/957
https://github.com/psi4/psi4/pull/957:558,Availability,robust,robust,558,"## Description; FIxes the `fcidump` function for C1 symmetry. The looping over irreps was done incorrectly and the tests did not catch it. ; As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. ~I am tracking down the problem in issue #980 This PR disables the generation of integral dumps from UHF references.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix `fcidump` function for C1 symmetry.; - [x] More robust testing facilities for FCIDUMP. Headers are compared and integrals are used to recompute the SCF one-, two-electron, total electronic and MP2 correlation energies. These are compared to the values computed by Psi4. This also fixes #980 Thanks @dgasmith!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/957
https://github.com/psi4/psi4/pull/957:115,Testability,test,tests,115,"## Description; FIxes the `fcidump` function for C1 symmetry. The looping over irreps was done incorrectly and the tests did not catch it. ; As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. ~I am tracking down the problem in issue #980 This PR disables the generation of integral dumps from UHF references.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix `fcidump` function for C1 symmetry.; - [x] More robust testing facilities for FCIDUMP. Headers are compared and integrals are used to recompute the SCF one-, two-electron, total electronic and MP2 correlation energies. These are compared to the values computed by Psi4. This also fixes #980 Thanks @dgasmith!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/957
https://github.com/psi4/psi4/pull/957:565,Testability,test,testing,565,"## Description; FIxes the `fcidump` function for C1 symmetry. The looping over irreps was done incorrectly and the tests did not catch it. ; As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. ~I am tracking down the problem in issue #980 This PR disables the generation of integral dumps from UHF references.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix `fcidump` function for C1 symmetry.; - [x] More robust testing facilities for FCIDUMP. Headers are compared and integrals are used to recompute the SCF one-, two-electron, total electronic and MP2 correlation energies. These are compared to the values computed by Psi4. This also fixes #980 Thanks @dgasmith!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/957
https://github.com/psi4/psi4/pull/957:840,Testability,Test,Tests,840,"## Description; FIxes the `fcidump` function for C1 symmetry. The looping over irreps was done incorrectly and the tests did not catch it. ; As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. ~I am tracking down the problem in issue #980 This PR disables the generation of integral dumps from UHF references.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix `fcidump` function for C1 symmetry.; - [x] More robust testing facilities for FCIDUMP. Headers are compared and integrals are used to recompute the SCF one-, two-electron, total electronic and MP2 correlation energies. These are compared to the values computed by Psi4. This also fixes #980 Thanks @dgasmith!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/957
https://github.com/psi4/psi4/pull/957:914,Testability,test,tests,914,"## Description; FIxes the `fcidump` function for C1 symmetry. The looping over irreps was done incorrectly and the tests did not catch it. ; As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. ~I am tracking down the problem in issue #980 This PR disables the generation of integral dumps from UHF references.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix `fcidump` function for C1 symmetry.; - [x] More robust testing facilities for FCIDUMP. Headers are compared and integrals are used to recompute the SCF one-, two-electron, total electronic and MP2 correlation energies. These are compared to the values computed by Psi4. This also fixes #980 Thanks @dgasmith!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/957
https://github.com/psi4/psi4/pull/957:1005,Testability,test,tests,1005,"## Description; FIxes the `fcidump` function for C1 symmetry. The looping over irreps was done incorrectly and the tests did not catch it. ; As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. ~I am tracking down the problem in issue #980 This PR disables the generation of integral dumps from UHF references.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix `fcidump` function for C1 symmetry.; - [x] More robust testing facilities for FCIDUMP. Headers are compared and integrals are used to recompute the SCF one-, two-electron, total electronic and MP2 correlation energies. These are compared to the values computed by Psi4. This also fixes #980 Thanks @dgasmith!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/957
https://github.com/psi4/psi4/pull/958:140,Security,expose,exposes,140,"## Description; Add PSI_API to all functions called by Forte (also see #955, there might be some duplication to address). ## Todos; This PR exposes C++ functions/classes that are required by Forte. . ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/958
https://github.com/psi4/psi4/pull/958:254,Testability,test,tests,254,"## Description; Add PSI_API to all functions called by Forte (also see #955, there might be some duplication to address). ## Todos; This PR exposes C++ functions/classes that are required by Forte. . ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/958
https://github.com/psi4/psi4/pull/958:345,Testability,test,tests,345,"## Description; Add PSI_API to all functions called by Forte (also see #955, there might be some duplication to address). ## Todos; This PR exposes C++ functions/classes that are required by Forte. . ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/958
https://github.com/psi4/psi4/issues/959:3382,Availability,error,errors,3382,"#849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698);",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:18,Deployability,release,release,18,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. ##. # Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Ge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:726,Deployability,install,installers,726,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. ##. # Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Ge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:766,Deployability,install,install,766,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. ##. # Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Ge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:873,Deployability,update,update,873,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. ##. # Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Ge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:953,Deployability,update,update,953,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. ##. # Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Ge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:3015,Deployability,Upgrade,Upgrade,3015,"TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:5298,Deployability,configurat,configuration,5298,"Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:5816,Deployability,Update,Update,5816,"(#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). # Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:7142,Deployability,install,installs,7142,"ew matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). # Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically linked. This saves size (since NumPy also uses `mkl_rt`) and eliminates incorrect results and threading damping associated with multiple programs accessing BLAS/LAPACK from multiple sources (#748, #755).; - Psi4 no longer installs a non-standard gcc5.2 alongside Psi4 on Linux (or gcc feature on Mac). This was necessary when conda's default 4.8.5 was too low for Psi4's c++11 requirements, but since conda's default has leaped to 7.2.0, we use default again. Note that only libraries (e.g., `libstdc++`) are installed alongside Psi4 now, not compilers (e.g., `g++`).; - (generic, not psi4, conda) `conda activate env` works multishell, not just on `bash`. Since conda 4.4 c. Dec 2017. # Known Bugs; - PCM-ROHF is broken. See #999",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:7429,Deployability,install,installed,7429,"ew matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). # Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically linked. This saves size (since NumPy also uses `mkl_rt`) and eliminates incorrect results and threading damping associated with multiple programs accessing BLAS/LAPACK from multiple sources (#748, #755).; - Psi4 no longer installs a non-standard gcc5.2 alongside Psi4 on Linux (or gcc feature on Mac). This was necessary when conda's default 4.8.5 was too low for Psi4's c++11 requirements, but since conda's default has leaped to 7.2.0, we use default again. Note that only libraries (e.g., `libstdc++`) are installed alongside Psi4 now, not compilers (e.g., `g++`).; - (generic, not psi4, conda) `conda activate env` works multishell, not just on `bash`. Since conda 4.4 c. Dec 2017. # Known Bugs; - PCM-ROHF is broken. See #999",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:2786,Energy Efficiency,efficient,efficient,2786,"https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectabili",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:4592,Energy Efficiency,efficient,efficient,4592,t symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698); - DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:1480,Integrability,interface,interface,1480,"s optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:1845,Integrability,interface,interface,1845,"r any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:4647,Integrability,depend,depending,4647,t symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698); - DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:5350,Integrability,rout,routine,5350,"Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:6035,Integrability,wrap,wrapped,6035,"(#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). # Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:526,Modifiability,enhance,enhancement,526,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. ##. # Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Ge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:690,Modifiability,enhance,enhancements,690,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. ##. # Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Ge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:3164,Modifiability,plugin,plugin,3164,"n Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922);",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:3198,Modifiability,plugin,plugin,3198,"n Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922);",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:5298,Modifiability,config,configuration,5298,"Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:491,Performance,optimiz,optimized,491,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. ##. # Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Ge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:678,Performance,perform,performance,678,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. ##. # Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Ge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:2008,Performance,optimiz,optimizations,2008,"dreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Develope",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:2574,Performance,Perform,Performance,2574,"ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just fi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:2586,Performance,Optimiz,Optimizations,2586,"ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just fi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:2872,Performance,cache,cache-level,2872,"e; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:2986,Performance,bottleneck,bottlenecks,2986,"[GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf exte",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:2980,Safety,avoid,avoid,2980,"[GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf exte",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:3099,Safety,avoid,avoid,3099,"49, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#69",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:3768,Safety,detect,detectability,3768,"ed with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698); - DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in P",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:5943,Security,expose,exposed,5943,"(#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). # Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:7066,Security,access,accessing,7066,"ew matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). # Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically linked. This saves size (since NumPy also uses `mkl_rt`) and eliminates incorrect results and threading damping associated with multiple programs accessing BLAS/LAPACK from multiple sources (#748, #755).; - Psi4 no longer installs a non-standard gcc5.2 alongside Psi4 on Linux (or gcc feature on Mac). This was necessary when conda's default 4.8.5 was too low for Psi4's c++11 requirements, but since conda's default has leaped to 7.2.0, we use default again. Note that only libraries (e.g., `libstdc++`) are installed alongside Psi4 now, not compilers (e.g., `g++`).; - (generic, not psi4, conda) `conda activate env` works multishell, not just on `bash`. Since conda 4.4 c. Dec 2017. # Known Bugs; - PCM-ROHF is broken. See #999",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:4813,Testability,test,tests,4813,"pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698); - DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:3023,Usability,Guid,Guide,3023,"TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/959:5759,Usability,simpl,simpler,5759,"(#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). # Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/959
https://github.com/psi4/psi4/issues/960:46,Deployability,release,release,46,A snapshot that will be used as the first 1.2 release candidate will happen on May 1st. On May 1st the master branch will undergo a new feature freeze and will only accept bug fixes. The target release date of Psi4 1.2 is May 18th if no major bugs are found in the intervening period. - The Psi4 Dev Team,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/960
https://github.com/psi4/psi4/issues/960:194,Deployability,release,release,194,A snapshot that will be used as the first 1.2 release candidate will happen on May 1st. On May 1st the master branch will undergo a new feature freeze and will only accept bug fixes. The target release date of Psi4 1.2 is May 18th if no major bugs are found in the intervening period. - The Psi4 Dev Team,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/960
https://github.com/psi4/psi4/pull/961:552,Deployability,update,update,552,"## DESCRIPTION; Using `DF_Helper`'s density fitting technology, both integral and exchange matrix computations can be sped up for in-core investigations. I have created a `JK` derived class, `symm_JK`, which wraps the technology of `DF_Helper` and enables its use for J/K building in Psi4. ## RESULTS; Here are some timing results for entire SCF procedures across various systems, using two different architectures. Notice that relative speedup between `symm_JK` and `DFJK` improves for non-uniform memory access (NUMA) architectures. ![april research update](https://user-images.githubusercontent.com/19575820/38739410-de32a49c-3f02-11e8-9512-c4edc165f259.png). ![april research update-1](https://user-images.githubusercontent.com/19575820/38739454-f5f0a6e2-3f02-11e8-9196-cdcd97cdcd34.png). ## TODO; The new JK building object, `symm_JK`, will be faster than DFJK for in-core implementations. However, it will be slower for disk-based implementations. ; - [x] Add check to figure out which object to use for J/K building. (in-core vs disk)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/961
https://github.com/psi4/psi4/pull/961:680,Deployability,update,update-,680,"## DESCRIPTION; Using `DF_Helper`'s density fitting technology, both integral and exchange matrix computations can be sped up for in-core investigations. I have created a `JK` derived class, `symm_JK`, which wraps the technology of `DF_Helper` and enables its use for J/K building in Psi4. ## RESULTS; Here are some timing results for entire SCF procedures across various systems, using two different architectures. Notice that relative speedup between `symm_JK` and `DFJK` improves for non-uniform memory access (NUMA) architectures. ![april research update](https://user-images.githubusercontent.com/19575820/38739410-de32a49c-3f02-11e8-9512-c4edc165f259.png). ![april research update-1](https://user-images.githubusercontent.com/19575820/38739454-f5f0a6e2-3f02-11e8-9196-cdcd97cdcd34.png). ## TODO; The new JK building object, `symm_JK`, will be faster than DFJK for in-core implementations. However, it will be slower for disk-based implementations. ; - [x] Add check to figure out which object to use for J/K building. (in-core vs disk)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/961
https://github.com/psi4/psi4/pull/961:208,Integrability,wrap,wraps,208,"## DESCRIPTION; Using `DF_Helper`'s density fitting technology, both integral and exchange matrix computations can be sped up for in-core investigations. I have created a `JK` derived class, `symm_JK`, which wraps the technology of `DF_Helper` and enables its use for J/K building in Psi4. ## RESULTS; Here are some timing results for entire SCF procedures across various systems, using two different architectures. Notice that relative speedup between `symm_JK` and `DFJK` improves for non-uniform memory access (NUMA) architectures. ![april research update](https://user-images.githubusercontent.com/19575820/38739410-de32a49c-3f02-11e8-9512-c4edc165f259.png). ![april research update-1](https://user-images.githubusercontent.com/19575820/38739454-f5f0a6e2-3f02-11e8-9196-cdcd97cdcd34.png). ## TODO; The new JK building object, `symm_JK`, will be faster than DFJK for in-core implementations. However, it will be slower for disk-based implementations. ; - [x] Add check to figure out which object to use for J/K building. (in-core vs disk)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/961
https://github.com/psi4/psi4/pull/961:506,Security,access,access,506,"## DESCRIPTION; Using `DF_Helper`'s density fitting technology, both integral and exchange matrix computations can be sped up for in-core investigations. I have created a `JK` derived class, `symm_JK`, which wraps the technology of `DF_Helper` and enables its use for J/K building in Psi4. ## RESULTS; Here are some timing results for entire SCF procedures across various systems, using two different architectures. Notice that relative speedup between `symm_JK` and `DFJK` improves for non-uniform memory access (NUMA) architectures. ![april research update](https://user-images.githubusercontent.com/19575820/38739410-de32a49c-3f02-11e8-9512-c4edc165f259.png). ![april research update-1](https://user-images.githubusercontent.com/19575820/38739454-f5f0a6e2-3f02-11e8-9196-cdcd97cdcd34.png). ## TODO; The new JK building object, `symm_JK`, will be faster than DFJK for in-core implementations. However, it will be slower for disk-based implementations. ; - [x] Add check to figure out which object to use for J/K building. (in-core vs disk)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/961
https://github.com/psi4/psi4/issues/962:653,Availability,error,errors,653,"## Description; During the course of one of my projects, where I was attempting to perform very tight optimizations of nonbonded clusters with DFT, I encountered some very strange noise in the DF-M05-2X analytic gradients with Psi4. The noise actually prevented us from successfully converging several optimizations to `g_convergence interfrag_tight`. I've attached [this file](https://github.com/psi4/psi4/files/1908011/summary.txt) which contains a variety of gradients, computed using a new-ish version of Psi4 (1.2a1), pre-inversion Psi4 (PSI 4.0.0-beta5) and Q-Chem 4.4, but I'll summarize the results here. Modern Psi4 (1.2a1):; - Density fitting errors in M05-2X yield gradient noise of around 10^{-6} in analytic gradients vs. direct; - Increasing the grid density from the standard (72, 302) to (150, 434) can result in differences as large as 10^{-3} for DF-M05-2X vs. 5pt FD; - Neither direct- nor DF-M05-2X match either 3- or 5-point numerical gradients, which match each other to < 10^{-7}; - DF-B97/cc-pVDZ analytic vs. 5-point FD grad match to ~10^{-5}, and DF-RHF/cc-pVDZ, direct-RHF/cc-pVDZ, & FD(5pt)-RHF/cc-pVDZ all match to < 10^{-7}. Psi4 Beta5:; - Analytic DF-M05-2X gradients vs 5pt FD exhibit differences as large as 10^{-4}; - Similarly small density fitting error vs direct as in modern Psi4; - DF-RHF analytic grads match 5pt FD nearly perfectly, density fitting differences of < 10^{-5}. vs. Q-Chem 4.4 (apples-to-apples comparisons):; - Psi4 1.2a1 analytic direct-M05-2X w/ dense grids, analytic direct-RHF both agree w/ Q-Chem to 10^{-5}; - Psi4 Beta5 analytic direct-M05-2X w/ dense grids matches to ~10^{-5}, with direct-RHF matching to 10^{-7}. I'm unsure if this is an issue in the FINDIF code which may be fortuitously resolved by #884 or more of the same strange behavior noted by @CDSherrill in #867, but we thought it strange enough to want to bring it to the greater community's attention.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/962
https://github.com/psi4/psi4/issues/962:1284,Availability,error,error,1284,"## Description; During the course of one of my projects, where I was attempting to perform very tight optimizations of nonbonded clusters with DFT, I encountered some very strange noise in the DF-M05-2X analytic gradients with Psi4. The noise actually prevented us from successfully converging several optimizations to `g_convergence interfrag_tight`. I've attached [this file](https://github.com/psi4/psi4/files/1908011/summary.txt) which contains a variety of gradients, computed using a new-ish version of Psi4 (1.2a1), pre-inversion Psi4 (PSI 4.0.0-beta5) and Q-Chem 4.4, but I'll summarize the results here. Modern Psi4 (1.2a1):; - Density fitting errors in M05-2X yield gradient noise of around 10^{-6} in analytic gradients vs. direct; - Increasing the grid density from the standard (72, 302) to (150, 434) can result in differences as large as 10^{-3} for DF-M05-2X vs. 5pt FD; - Neither direct- nor DF-M05-2X match either 3- or 5-point numerical gradients, which match each other to < 10^{-7}; - DF-B97/cc-pVDZ analytic vs. 5-point FD grad match to ~10^{-5}, and DF-RHF/cc-pVDZ, direct-RHF/cc-pVDZ, & FD(5pt)-RHF/cc-pVDZ all match to < 10^{-7}. Psi4 Beta5:; - Analytic DF-M05-2X gradients vs 5pt FD exhibit differences as large as 10^{-4}; - Similarly small density fitting error vs direct as in modern Psi4; - DF-RHF analytic grads match 5pt FD nearly perfectly, density fitting differences of < 10^{-5}. vs. Q-Chem 4.4 (apples-to-apples comparisons):; - Psi4 1.2a1 analytic direct-M05-2X w/ dense grids, analytic direct-RHF both agree w/ Q-Chem to 10^{-5}; - Psi4 Beta5 analytic direct-M05-2X w/ dense grids matches to ~10^{-5}, with direct-RHF matching to 10^{-7}. I'm unsure if this is an issue in the FINDIF code which may be fortuitously resolved by #884 or more of the same strange behavior noted by @CDSherrill in #867, but we thought it strange enough to want to bring it to the greater community's attention.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/962
https://github.com/psi4/psi4/issues/962:83,Performance,perform,perform,83,"## Description; During the course of one of my projects, where I was attempting to perform very tight optimizations of nonbonded clusters with DFT, I encountered some very strange noise in the DF-M05-2X analytic gradients with Psi4. The noise actually prevented us from successfully converging several optimizations to `g_convergence interfrag_tight`. I've attached [this file](https://github.com/psi4/psi4/files/1908011/summary.txt) which contains a variety of gradients, computed using a new-ish version of Psi4 (1.2a1), pre-inversion Psi4 (PSI 4.0.0-beta5) and Q-Chem 4.4, but I'll summarize the results here. Modern Psi4 (1.2a1):; - Density fitting errors in M05-2X yield gradient noise of around 10^{-6} in analytic gradients vs. direct; - Increasing the grid density from the standard (72, 302) to (150, 434) can result in differences as large as 10^{-3} for DF-M05-2X vs. 5pt FD; - Neither direct- nor DF-M05-2X match either 3- or 5-point numerical gradients, which match each other to < 10^{-7}; - DF-B97/cc-pVDZ analytic vs. 5-point FD grad match to ~10^{-5}, and DF-RHF/cc-pVDZ, direct-RHF/cc-pVDZ, & FD(5pt)-RHF/cc-pVDZ all match to < 10^{-7}. Psi4 Beta5:; - Analytic DF-M05-2X gradients vs 5pt FD exhibit differences as large as 10^{-4}; - Similarly small density fitting error vs direct as in modern Psi4; - DF-RHF analytic grads match 5pt FD nearly perfectly, density fitting differences of < 10^{-5}. vs. Q-Chem 4.4 (apples-to-apples comparisons):; - Psi4 1.2a1 analytic direct-M05-2X w/ dense grids, analytic direct-RHF both agree w/ Q-Chem to 10^{-5}; - Psi4 Beta5 analytic direct-M05-2X w/ dense grids matches to ~10^{-5}, with direct-RHF matching to 10^{-7}. I'm unsure if this is an issue in the FINDIF code which may be fortuitously resolved by #884 or more of the same strange behavior noted by @CDSherrill in #867, but we thought it strange enough to want to bring it to the greater community's attention.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/962
https://github.com/psi4/psi4/issues/962:102,Performance,optimiz,optimizations,102,"## Description; During the course of one of my projects, where I was attempting to perform very tight optimizations of nonbonded clusters with DFT, I encountered some very strange noise in the DF-M05-2X analytic gradients with Psi4. The noise actually prevented us from successfully converging several optimizations to `g_convergence interfrag_tight`. I've attached [this file](https://github.com/psi4/psi4/files/1908011/summary.txt) which contains a variety of gradients, computed using a new-ish version of Psi4 (1.2a1), pre-inversion Psi4 (PSI 4.0.0-beta5) and Q-Chem 4.4, but I'll summarize the results here. Modern Psi4 (1.2a1):; - Density fitting errors in M05-2X yield gradient noise of around 10^{-6} in analytic gradients vs. direct; - Increasing the grid density from the standard (72, 302) to (150, 434) can result in differences as large as 10^{-3} for DF-M05-2X vs. 5pt FD; - Neither direct- nor DF-M05-2X match either 3- or 5-point numerical gradients, which match each other to < 10^{-7}; - DF-B97/cc-pVDZ analytic vs. 5-point FD grad match to ~10^{-5}, and DF-RHF/cc-pVDZ, direct-RHF/cc-pVDZ, & FD(5pt)-RHF/cc-pVDZ all match to < 10^{-7}. Psi4 Beta5:; - Analytic DF-M05-2X gradients vs 5pt FD exhibit differences as large as 10^{-4}; - Similarly small density fitting error vs direct as in modern Psi4; - DF-RHF analytic grads match 5pt FD nearly perfectly, density fitting differences of < 10^{-5}. vs. Q-Chem 4.4 (apples-to-apples comparisons):; - Psi4 1.2a1 analytic direct-M05-2X w/ dense grids, analytic direct-RHF both agree w/ Q-Chem to 10^{-5}; - Psi4 Beta5 analytic direct-M05-2X w/ dense grids matches to ~10^{-5}, with direct-RHF matching to 10^{-7}. I'm unsure if this is an issue in the FINDIF code which may be fortuitously resolved by #884 or more of the same strange behavior noted by @CDSherrill in #867, but we thought it strange enough to want to bring it to the greater community's attention.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/962
https://github.com/psi4/psi4/issues/962:302,Performance,optimiz,optimizations,302,"## Description; During the course of one of my projects, where I was attempting to perform very tight optimizations of nonbonded clusters with DFT, I encountered some very strange noise in the DF-M05-2X analytic gradients with Psi4. The noise actually prevented us from successfully converging several optimizations to `g_convergence interfrag_tight`. I've attached [this file](https://github.com/psi4/psi4/files/1908011/summary.txt) which contains a variety of gradients, computed using a new-ish version of Psi4 (1.2a1), pre-inversion Psi4 (PSI 4.0.0-beta5) and Q-Chem 4.4, but I'll summarize the results here. Modern Psi4 (1.2a1):; - Density fitting errors in M05-2X yield gradient noise of around 10^{-6} in analytic gradients vs. direct; - Increasing the grid density from the standard (72, 302) to (150, 434) can result in differences as large as 10^{-3} for DF-M05-2X vs. 5pt FD; - Neither direct- nor DF-M05-2X match either 3- or 5-point numerical gradients, which match each other to < 10^{-7}; - DF-B97/cc-pVDZ analytic vs. 5-point FD grad match to ~10^{-5}, and DF-RHF/cc-pVDZ, direct-RHF/cc-pVDZ, & FD(5pt)-RHF/cc-pVDZ all match to < 10^{-7}. Psi4 Beta5:; - Analytic DF-M05-2X gradients vs 5pt FD exhibit differences as large as 10^{-4}; - Similarly small density fitting error vs direct as in modern Psi4; - DF-RHF analytic grads match 5pt FD nearly perfectly, density fitting differences of < 10^{-5}. vs. Q-Chem 4.4 (apples-to-apples comparisons):; - Psi4 1.2a1 analytic direct-M05-2X w/ dense grids, analytic direct-RHF both agree w/ Q-Chem to 10^{-5}; - Psi4 Beta5 analytic direct-M05-2X w/ dense grids matches to ~10^{-5}, with direct-RHF matching to 10^{-7}. I'm unsure if this is an issue in the FINDIF code which may be fortuitously resolved by #884 or more of the same strange behavior noted by @CDSherrill in #867, but we thought it strange enough to want to bring it to the greater community's attention.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/962
https://github.com/psi4/psi4/pull/963:338,Deployability,Release,Release,338,"## Description; Allow Alhrichs (`def2-`), Jensen (`pcseg-`) and custom Dunning (`cc-[...]z`) families of basis sets into CBS expansion. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `p4util.kwargs_lower()` no longer mangles floats to True or False; * **User-Facing for Release Notes**; - [x] CBS extrapolation possible with `def2-` bases; - [ ] CBS extrapolation possible with `roos-ano-` bases; - [x] CBS extrapolation possible with `pcseg-` bases; - [x] CBS extrapolation possible with custom `*-cc-pvxz-*` bases; - [x] SCF extrapolations of Truhlar and Kanton and Martin added ; - [x] custom alpha possible for `scf_xtpl_[...]_2` and `corl_xtpl_helgaker_2`; - [x] custom `corl_alpha` as well as `delta_alpha` parsing for eg. `MP2/[TQ] +D: CCSD(T)/[DT]`; - [ ] ~~handle fallbacks for light atoms in `[aug]-cc-pv[dtq]z-PP` bases using non-PP bases~~; - [x] tests for `def2-` extrapolation. ## Checklist; - [x] Tests added for any new features; - [x] All relevant tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/963
https://github.com/psi4/psi4/pull/963:927,Testability,test,tests,927,"## Description; Allow Alhrichs (`def2-`), Jensen (`pcseg-`) and custom Dunning (`cc-[...]z`) families of basis sets into CBS expansion. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `p4util.kwargs_lower()` no longer mangles floats to True or False; * **User-Facing for Release Notes**; - [x] CBS extrapolation possible with `def2-` bases; - [ ] CBS extrapolation possible with `roos-ano-` bases; - [x] CBS extrapolation possible with `pcseg-` bases; - [x] CBS extrapolation possible with custom `*-cc-pvxz-*` bases; - [x] SCF extrapolations of Truhlar and Kanton and Martin added ; - [x] custom alpha possible for `scf_xtpl_[...]_2` and `corl_xtpl_helgaker_2`; - [x] custom `corl_alpha` as well as `delta_alpha` parsing for eg. `MP2/[TQ] +D: CCSD(T)/[DT]`; - [ ] ~~handle fallbacks for light atoms in `[aug]-cc-pv[dtq]z-PP` bases using non-PP bases~~; - [x] tests for `def2-` extrapolation. ## Checklist; - [x] Tests added for any new features; - [x] All relevant tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/963
https://github.com/psi4/psi4/pull/963:980,Testability,Test,Tests,980,"## Description; Allow Alhrichs (`def2-`), Jensen (`pcseg-`) and custom Dunning (`cc-[...]z`) families of basis sets into CBS expansion. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `p4util.kwargs_lower()` no longer mangles floats to True or False; * **User-Facing for Release Notes**; - [x] CBS extrapolation possible with `def2-` bases; - [ ] CBS extrapolation possible with `roos-ano-` bases; - [x] CBS extrapolation possible with `pcseg-` bases; - [x] CBS extrapolation possible with custom `*-cc-pvxz-*` bases; - [x] SCF extrapolations of Truhlar and Kanton and Martin added ; - [x] custom alpha possible for `scf_xtpl_[...]_2` and `corl_xtpl_helgaker_2`; - [x] custom `corl_alpha` as well as `delta_alpha` parsing for eg. `MP2/[TQ] +D: CCSD(T)/[DT]`; - [ ] ~~handle fallbacks for light atoms in `[aug]-cc-pv[dtq]z-PP` bases using non-PP bases~~; - [x] tests for `def2-` extrapolation. ## Checklist; - [x] Tests added for any new features; - [x] All relevant tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/963
https://github.com/psi4/psi4/pull/963:1033,Testability,test,tests,1033,"## Description; Allow Alhrichs (`def2-`), Jensen (`pcseg-`) and custom Dunning (`cc-[...]z`) families of basis sets into CBS expansion. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `p4util.kwargs_lower()` no longer mangles floats to True or False; * **User-Facing for Release Notes**; - [x] CBS extrapolation possible with `def2-` bases; - [ ] CBS extrapolation possible with `roos-ano-` bases; - [x] CBS extrapolation possible with `pcseg-` bases; - [x] CBS extrapolation possible with custom `*-cc-pvxz-*` bases; - [x] SCF extrapolations of Truhlar and Kanton and Martin added ; - [x] custom alpha possible for `scf_xtpl_[...]_2` and `corl_xtpl_helgaker_2`; - [x] custom `corl_alpha` as well as `delta_alpha` parsing for eg. `MP2/[TQ] +D: CCSD(T)/[DT]`; - [ ] ~~handle fallbacks for light atoms in `[aug]-cc-pv[dtq]z-PP` bases using non-PP bases~~; - [x] tests for `def2-` extrapolation. ## Checklist; - [x] Tests added for any new features; - [x] All relevant tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/963
https://github.com/psi4/psi4/pull/965:832,Availability,avail,available,832,"## Description; This separates all the additional Molecule work, including py-side parsing, out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.ht",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/965
https://github.com/psi4/psi4/pull/965:693,Security,validat,validates,693,"## Description; This separates all the additional Molecule work, including py-side parsing, out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.ht",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/965
https://github.com/psi4/psi4/pull/965:1862,Testability,Test,Tests,1862," out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/965
https://github.com/psi4/psi4/pull/965:1936,Testability,test,tests,1936," out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/965
https://github.com/psi4/psi4/pull/965:2027,Testability,test,tests,2027," out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/965
https://github.com/psi4/psi4/pull/965:482,Usability,learn,learned,482,"## Description; This separates all the additional Molecule work, including py-side parsing, out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.ht",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/965
https://github.com/psi4/psi4/pull/965:648,Usability,simpl,simply,648,"## Description; This separates all the additional Molecule work, including py-side parsing, out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.ht",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/965
https://github.com/psi4/psi4/pull/965:1054,Usability,learn,learned,1054,"ditional Molecule work, including py-side parsing, out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Sta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/965
https://github.com/psi4/psi4/pull/965:1208,Usability,learn,learned,1208," out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/965
https://github.com/psi4/psi4/pull/965:1365,Usability,learn,learned,1365," out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/965
https://github.com/psi4/psi4/pull/965:1453,Usability,learn,learned,1453," out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/965
https://github.com/psi4/psi4/pull/966:513,Availability,error,errors,513,"## Description; Adds regression tests which ensure consistency between different `qc_module`s for `cc_type`= `conv`. Should finish off #714?. ## Questions; - [x] What lists should this test be on? Currently listed as `psi;quicktests;cc` because I copied and minimally modified from `CMakeLists.txt` in the mp2-module test. ; - [x] Managed methods [table](http://psicode.org/psi4manual/master/notes_c.html#table-managedmethods) lists DETCI as a possible choice for conventional CCSD with RHF/ROHF reference, but I errors from the driver trying these combinations.; ```python; set qc_module DETCI; energy('ccsd'). RuntimeError:; FatalError: DETCI: The CC module is not currently enabled. ; ```; ## TODO; - [x] ~Add ROHF/RHF CCSD checks against DETCI if they apply (pending feedback about 2nd point above)~ Remove indications that DETCI can do CCSD from the table; - [x] Add checks between fnocc and dfocc; - [x] Add non-frozen-core tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/966
https://github.com/psi4/psi4/pull/966:596,Energy Efficiency,energy,energy,596,"## Description; Adds regression tests which ensure consistency between different `qc_module`s for `cc_type`= `conv`. Should finish off #714?. ## Questions; - [x] What lists should this test be on? Currently listed as `psi;quicktests;cc` because I copied and minimally modified from `CMakeLists.txt` in the mp2-module test. ; - [x] Managed methods [table](http://psicode.org/psi4manual/master/notes_c.html#table-managedmethods) lists DETCI as a possible choice for conventional CCSD with RHF/ROHF reference, but I errors from the driver trying these combinations.; ```python; set qc_module DETCI; energy('ccsd'). RuntimeError:; FatalError: DETCI: The CC module is not currently enabled. ; ```; ## TODO; - [x] ~Add ROHF/RHF CCSD checks against DETCI if they apply (pending feedback about 2nd point above)~ Remove indications that DETCI can do CCSD from the table; - [x] Add checks between fnocc and dfocc; - [x] Add non-frozen-core tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/966
https://github.com/psi4/psi4/pull/966:32,Testability,test,tests,32,"## Description; Adds regression tests which ensure consistency between different `qc_module`s for `cc_type`= `conv`. Should finish off #714?. ## Questions; - [x] What lists should this test be on? Currently listed as `psi;quicktests;cc` because I copied and minimally modified from `CMakeLists.txt` in the mp2-module test. ; - [x] Managed methods [table](http://psicode.org/psi4manual/master/notes_c.html#table-managedmethods) lists DETCI as a possible choice for conventional CCSD with RHF/ROHF reference, but I errors from the driver trying these combinations.; ```python; set qc_module DETCI; energy('ccsd'). RuntimeError:; FatalError: DETCI: The CC module is not currently enabled. ; ```; ## TODO; - [x] ~Add ROHF/RHF CCSD checks against DETCI if they apply (pending feedback about 2nd point above)~ Remove indications that DETCI can do CCSD from the table; - [x] Add checks between fnocc and dfocc; - [x] Add non-frozen-core tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/966
https://github.com/psi4/psi4/pull/966:185,Testability,test,test,185,"## Description; Adds regression tests which ensure consistency between different `qc_module`s for `cc_type`= `conv`. Should finish off #714?. ## Questions; - [x] What lists should this test be on? Currently listed as `psi;quicktests;cc` because I copied and minimally modified from `CMakeLists.txt` in the mp2-module test. ; - [x] Managed methods [table](http://psicode.org/psi4manual/master/notes_c.html#table-managedmethods) lists DETCI as a possible choice for conventional CCSD with RHF/ROHF reference, but I errors from the driver trying these combinations.; ```python; set qc_module DETCI; energy('ccsd'). RuntimeError:; FatalError: DETCI: The CC module is not currently enabled. ; ```; ## TODO; - [x] ~Add ROHF/RHF CCSD checks against DETCI if they apply (pending feedback about 2nd point above)~ Remove indications that DETCI can do CCSD from the table; - [x] Add checks between fnocc and dfocc; - [x] Add non-frozen-core tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/966
https://github.com/psi4/psi4/pull/966:317,Testability,test,test,317,"## Description; Adds regression tests which ensure consistency between different `qc_module`s for `cc_type`= `conv`. Should finish off #714?. ## Questions; - [x] What lists should this test be on? Currently listed as `psi;quicktests;cc` because I copied and minimally modified from `CMakeLists.txt` in the mp2-module test. ; - [x] Managed methods [table](http://psicode.org/psi4manual/master/notes_c.html#table-managedmethods) lists DETCI as a possible choice for conventional CCSD with RHF/ROHF reference, but I errors from the driver trying these combinations.; ```python; set qc_module DETCI; energy('ccsd'). RuntimeError:; FatalError: DETCI: The CC module is not currently enabled. ; ```; ## TODO; - [x] ~Add ROHF/RHF CCSD checks against DETCI if they apply (pending feedback about 2nd point above)~ Remove indications that DETCI can do CCSD from the table; - [x] Add checks between fnocc and dfocc; - [x] Add non-frozen-core tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/966
https://github.com/psi4/psi4/pull/966:930,Testability,test,tests,930,"## Description; Adds regression tests which ensure consistency between different `qc_module`s for `cc_type`= `conv`. Should finish off #714?. ## Questions; - [x] What lists should this test be on? Currently listed as `psi;quicktests;cc` because I copied and minimally modified from `CMakeLists.txt` in the mp2-module test. ; - [x] Managed methods [table](http://psicode.org/psi4manual/master/notes_c.html#table-managedmethods) lists DETCI as a possible choice for conventional CCSD with RHF/ROHF reference, but I errors from the driver trying these combinations.; ```python; set qc_module DETCI; energy('ccsd'). RuntimeError:; FatalError: DETCI: The CC module is not currently enabled. ; ```; ## TODO; - [x] ~Add ROHF/RHF CCSD checks against DETCI if they apply (pending feedback about 2nd point above)~ Remove indications that DETCI can do CCSD from the table; - [x] Add checks between fnocc and dfocc; - [x] Add non-frozen-core tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/966
https://github.com/psi4/psi4/pull/966:771,Usability,feedback,feedback,771,"## Description; Adds regression tests which ensure consistency between different `qc_module`s for `cc_type`= `conv`. Should finish off #714?. ## Questions; - [x] What lists should this test be on? Currently listed as `psi;quicktests;cc` because I copied and minimally modified from `CMakeLists.txt` in the mp2-module test. ; - [x] Managed methods [table](http://psicode.org/psi4manual/master/notes_c.html#table-managedmethods) lists DETCI as a possible choice for conventional CCSD with RHF/ROHF reference, but I errors from the driver trying these combinations.; ```python; set qc_module DETCI; energy('ccsd'). RuntimeError:; FatalError: DETCI: The CC module is not currently enabled. ; ```; ## TODO; - [x] ~Add ROHF/RHF CCSD checks against DETCI if they apply (pending feedback about 2nd point above)~ Remove indications that DETCI can do CCSD from the table; - [x] Add checks between fnocc and dfocc; - [x] Add non-frozen-core tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/966
https://github.com/psi4/psi4/issues/967:148,Testability,test,tests,148,"http://psicode.org/psi4manual/master/pcmsolver.html. The links to the three samples next to ""More examples can be found in the directories with PCM tests"" are broken.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/967
https://github.com/psi4/psi4/pull/968:429,Deployability,Release,Release,429,"## Description; Bump gau2grid to v1.0 and lose `mpmath`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] gau2grid is `v1.0` now, so pointing to that. This drops the `mpmath` requirement.; - Note that bumping the `find_package(gau2grid 1.0)` is only for appearances sake since 0.1 tag worked just fine. ; - [x] Fix pcm test links closes #967; * **User-Facing for Release Notes**. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/968
https://github.com/psi4/psi4/pull/968:385,Testability,test,test,385,"## Description; Bump gau2grid to v1.0 and lose `mpmath`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] gau2grid is `v1.0` now, so pointing to that. This drops the `mpmath` requirement.; - Note that bumping the `find_package(gau2grid 1.0)` is only for appearances sake since 0.1 tag worked just fine. ; - [x] Fix pcm test links closes #967; * **User-Facing for Release Notes**. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/968
https://github.com/psi4/psi4/pull/970:184,Availability,avail,available,184,## Description; Adds NumPy to the psi4-dev environment as it is 1) required to build gau2grid and 2) required to run Psi4. We also need to install deep-diff here as well which is only available on pip/conda-forge. Should this be: `conda create -n p4dev python=x.x psi4-dev numpy deep-diff -c psi4 -c conda-forge`; ; ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/970
https://github.com/psi4/psi4/pull/970:139,Deployability,install,install,139,## Description; Adds NumPy to the psi4-dev environment as it is 1) required to build gau2grid and 2) required to run Psi4. We also need to install deep-diff here as well which is only available on pip/conda-forge. Should this be: `conda create -n p4dev python=x.x psi4-dev numpy deep-diff -c psi4 -c conda-forge`; ; ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/970
https://github.com/psi4/psi4/issues/971:156,Availability,error,errors,156,"I recently updated my copy of psi4, and I'm now having plugin issues. I added ""PSI_API"" where appropriate, and my plugins compile, but I get missing symbol errors for the JK object constructor:. Attention! This SCF may be density-fitted.; dyld: lazy symbol binding failed: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. dyld: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. Abort trap: 6. This error is for a clean plugin that only calls the constructor for PKJK:. extern ""C"" PSI_API; SharedWavefunction does_jk_work(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. /* Your code goes here */. std::shared_ptr<PKJK> jk (new PKJK(ref_wfn->basisset(),options));. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/971
https://github.com/psi4/psi4/issues/971:719,Availability,error,error,719,"I recently updated my copy of psi4, and I'm now having plugin issues. I added ""PSI_API"" where appropriate, and my plugins compile, but I get missing symbol errors for the JK object constructor:. Attention! This SCF may be density-fitted.; dyld: lazy symbol binding failed: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. dyld: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. Abort trap: 6. This error is for a clean plugin that only calls the constructor for PKJK:. extern ""C"" PSI_API; SharedWavefunction does_jk_work(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. /* Your code goes here */. std::shared_ptr<PKJK> jk (new PKJK(ref_wfn->basisset(),options));. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/971
https://github.com/psi4/psi4/issues/971:11,Deployability,update,updated,11,"I recently updated my copy of psi4, and I'm now having plugin issues. I added ""PSI_API"" where appropriate, and my plugins compile, but I get missing symbol errors for the JK object constructor:. Attention! This SCF may be density-fitted.; dyld: lazy symbol binding failed: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. dyld: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. Abort trap: 6. This error is for a clean plugin that only calls the constructor for PKJK:. extern ""C"" PSI_API; SharedWavefunction does_jk_work(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. /* Your code goes here */. std::shared_ptr<PKJK> jk (new PKJK(ref_wfn->basisset(),options));. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/971
https://github.com/psi4/psi4/issues/971:55,Modifiability,plugin,plugin,55,"I recently updated my copy of psi4, and I'm now having plugin issues. I added ""PSI_API"" where appropriate, and my plugins compile, but I get missing symbol errors for the JK object constructor:. Attention! This SCF may be density-fitted.; dyld: lazy symbol binding failed: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. dyld: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. Abort trap: 6. This error is for a clean plugin that only calls the constructor for PKJK:. extern ""C"" PSI_API; SharedWavefunction does_jk_work(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. /* Your code goes here */. std::shared_ptr<PKJK> jk (new PKJK(ref_wfn->basisset(),options));. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/971
https://github.com/psi4/psi4/issues/971:114,Modifiability,plugin,plugins,114,"I recently updated my copy of psi4, and I'm now having plugin issues. I added ""PSI_API"" where appropriate, and my plugins compile, but I get missing symbol errors for the JK object constructor:. Attention! This SCF may be density-fitted.; dyld: lazy symbol binding failed: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. dyld: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. Abort trap: 6. This error is for a clean plugin that only calls the constructor for PKJK:. extern ""C"" PSI_API; SharedWavefunction does_jk_work(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. /* Your code goes here */. std::shared_ptr<PKJK> jk (new PKJK(ref_wfn->basisset(),options));. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/971
https://github.com/psi4/psi4/issues/971:416,Modifiability,plugin,plugins,416,"I recently updated my copy of psi4, and I'm now having plugin issues. I added ""PSI_API"" where appropriate, and my plugins compile, but I get missing symbol errors for the JK object constructor:. Attention! This SCF may be density-fitted.; dyld: lazy symbol binding failed: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. dyld: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. Abort trap: 6. This error is for a clean plugin that only calls the constructor for PKJK:. extern ""C"" PSI_API; SharedWavefunction does_jk_work(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. /* Your code goes here */. std::shared_ptr<PKJK> jk (new PKJK(ref_wfn->basisset(),options));. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/971
https://github.com/psi4/psi4/issues/971:632,Modifiability,plugin,plugins,632,"I recently updated my copy of psi4, and I'm now having plugin issues. I added ""PSI_API"" where appropriate, and my plugins compile, but I get missing symbol errors for the JK object constructor:. Attention! This SCF may be density-fitted.; dyld: lazy symbol binding failed: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. dyld: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. Abort trap: 6. This error is for a clean plugin that only calls the constructor for PKJK:. extern ""C"" PSI_API; SharedWavefunction does_jk_work(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. /* Your code goes here */. std::shared_ptr<PKJK> jk (new PKJK(ref_wfn->basisset(),options));. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/971
https://github.com/psi4/psi4/issues/971:740,Modifiability,plugin,plugin,740,"I recently updated my copy of psi4, and I'm now having plugin issues. I added ""PSI_API"" where appropriate, and my plugins compile, but I get missing symbol errors for the JK object constructor:. Attention! This SCF may be density-fitted.; dyld: lazy symbol binding failed: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. dyld: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. Abort trap: 6. This error is for a clean plugin that only calls the constructor for PKJK:. extern ""C"" PSI_API; SharedWavefunction does_jk_work(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. /* Your code goes here */. std::shared_ptr<PKJK> jk (new PKJK(ref_wfn->basisset(),options));. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/971
https://github.com/psi4/psi4/issues/971:699,Safety,Abort,Abort,699,"I recently updated my copy of psi4, and I'm now having plugin issues. I added ""PSI_API"" where appropriate, and my plugins compile, but I get missing symbol errors for the JK object constructor:. Attention! This SCF may be density-fitted.; dyld: lazy symbol binding failed: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. dyld: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. Abort trap: 6. This error is for a clean plugin that only calls the constructor for PKJK:. extern ""C"" PSI_API; SharedWavefunction does_jk_work(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. /* Your code goes here */. std::shared_ptr<PKJK> jk (new PKJK(ref_wfn->basisset(),options));. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/971
https://github.com/psi4/psi4/issues/972:406,Availability,down,downvotes,406,"A place to stash ""next-release"" items that come up that don't fit elsewhere. Who knows what the next release will be called — ""1.3"" shall be used as placeholder. This is for opinions as well as consensus, so don't read this and consider anything BDFL-PEP-Approved. Similarly, if you're posting for more than yourself, try to convey a notion of the breadth of agreement. Also, separate issues by post so up/downvotes have a chance to mean something.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/972
https://github.com/psi4/psi4/issues/972:23,Deployability,release,release,23,"A place to stash ""next-release"" items that come up that don't fit elsewhere. Who knows what the next release will be called — ""1.3"" shall be used as placeholder. This is for opinions as well as consensus, so don't read this and consider anything BDFL-PEP-Approved. Similarly, if you're posting for more than yourself, try to convey a notion of the breadth of agreement. Also, separate issues by post so up/downvotes have a chance to mean something.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/972
https://github.com/psi4/psi4/issues/972:101,Deployability,release,release,101,"A place to stash ""next-release"" items that come up that don't fit elsewhere. Who knows what the next release will be called — ""1.3"" shall be used as placeholder. This is for opinions as well as consensus, so don't read this and consider anything BDFL-PEP-Approved. Similarly, if you're posting for more than yourself, try to convey a notion of the breadth of agreement. Also, separate issues by post so up/downvotes have a chance to mean something.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/972
https://github.com/psi4/psi4/issues/973:643,Availability,error,error,643,"SCF stability analysis with FOLLOW is currently only implemented for UHF. RHF and ROHF have stability analysis, but do not have the capability to follow the instability. This is not documented at all, as far as I can tell, and what is even worse is that if the user requests a FOLLOW with RHF, it ""fails"" silently.; That is, the SCF and the stability analysis is run, and even if there is an instability Psi4 just carries on. So I propose two short term solutions:; 1. Update the docs to make it clear that FOLLOW is currently an UHF only feature.; 2. Implement checks against the user requesting FOLLOW with RHF or ROHF. I think exiting with error is the reasonable action when the user requests an unavailable feature. Of course the long term solution would be to implement follow for R(O)HF, but that is probably more of a wishlist item, than anything else. I found these issues a while ago and planned to fix them myself, but never got around to actually do so, and will not have the time to work on them before the 1.2 release.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/973
https://github.com/psi4/psi4/issues/973:469,Deployability,Update,Update,469,"SCF stability analysis with FOLLOW is currently only implemented for UHF. RHF and ROHF have stability analysis, but do not have the capability to follow the instability. This is not documented at all, as far as I can tell, and what is even worse is that if the user requests a FOLLOW with RHF, it ""fails"" silently.; That is, the SCF and the stability analysis is run, and even if there is an instability Psi4 just carries on. So I propose two short term solutions:; 1. Update the docs to make it clear that FOLLOW is currently an UHF only feature.; 2. Implement checks against the user requesting FOLLOW with RHF or ROHF. I think exiting with error is the reasonable action when the user requests an unavailable feature. Of course the long term solution would be to implement follow for R(O)HF, but that is probably more of a wishlist item, than anything else. I found these issues a while ago and planned to fix them myself, but never got around to actually do so, and will not have the time to work on them before the 1.2 release.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/973
https://github.com/psi4/psi4/issues/973:1024,Deployability,release,release,1024,"SCF stability analysis with FOLLOW is currently only implemented for UHF. RHF and ROHF have stability analysis, but do not have the capability to follow the instability. This is not documented at all, as far as I can tell, and what is even worse is that if the user requests a FOLLOW with RHF, it ""fails"" silently.; That is, the SCF and the stability analysis is run, and even if there is an instability Psi4 just carries on. So I propose two short term solutions:; 1. Update the docs to make it clear that FOLLOW is currently an UHF only feature.; 2. Implement checks against the user requesting FOLLOW with RHF or ROHF. I think exiting with error is the reasonable action when the user requests an unavailable feature. Of course the long term solution would be to implement follow for R(O)HF, but that is probably more of a wishlist item, than anything else. I found these issues a while ago and planned to fix them myself, but never got around to actually do so, and will not have the time to work on them before the 1.2 release.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/973
https://github.com/psi4/psi4/issues/973:496,Usability,clear,clear,496,"SCF stability analysis with FOLLOW is currently only implemented for UHF. RHF and ROHF have stability analysis, but do not have the capability to follow the instability. This is not documented at all, as far as I can tell, and what is even worse is that if the user requests a FOLLOW with RHF, it ""fails"" silently.; That is, the SCF and the stability analysis is run, and even if there is an instability Psi4 just carries on. So I propose two short term solutions:; 1. Update the docs to make it clear that FOLLOW is currently an UHF only feature.; 2. Implement checks against the user requesting FOLLOW with RHF or ROHF. I think exiting with error is the reasonable action when the user requests an unavailable feature. Of course the long term solution would be to implement follow for R(O)HF, but that is probably more of a wishlist item, than anything else. I found these issues a while ago and planned to fix them myself, but never got around to actually do so, and will not have the time to work on them before the 1.2 release.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/973
https://github.com/psi4/psi4/pull/974:230,Availability,error,errors,230,"## Description; Misc. ## Todos; * **Developer Interest**; - [x] CI: Removes align tests that require hungarian package from quicktests; - [x] Allow basis set blocks to be names ""custom"", ""special"", ""general"" w/o spewing a page of errors at you.; - [x] CMake: upgrade versioner to avoid hard-coded project version. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/974
https://github.com/psi4/psi4/pull/974:259,Deployability,upgrade,upgrade,259,"## Description; Misc. ## Todos; * **Developer Interest**; - [x] CI: Removes align tests that require hungarian package from quicktests; - [x] Allow basis set blocks to be names ""custom"", ""special"", ""general"" w/o spewing a page of errors at you.; - [x] CMake: upgrade versioner to avoid hard-coded project version. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/974
https://github.com/psi4/psi4/pull/974:280,Safety,avoid,avoid,280,"## Description; Misc. ## Todos; * **Developer Interest**; - [x] CI: Removes align tests that require hungarian package from quicktests; - [x] Allow basis set blocks to be names ""custom"", ""special"", ""general"" w/o spewing a page of errors at you.; - [x] CMake: upgrade versioner to avoid hard-coded project version. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/974
https://github.com/psi4/psi4/pull/974:82,Testability,test,tests,82,"## Description; Misc. ## Todos; * **Developer Interest**; - [x] CI: Removes align tests that require hungarian package from quicktests; - [x] Allow basis set blocks to be names ""custom"", ""special"", ""general"" w/o spewing a page of errors at you.; - [x] CMake: upgrade versioner to avoid hard-coded project version. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/974
https://github.com/psi4/psi4/pull/975:679,Deployability,Release,Release,679,"## Description; Addresses #885 by refactoring N-Body driver to three newly independent functions, driven by the existing `nbody_gufunc()`:; - `build_nbody_compute_list()`: Builds list of all N-body computations to be performed; - `compute_nbody_components()`: Performs given N-body computation(s), could be exploited as pleasantly parallel; - `assemble_nbody_components()`: Stitches components back together into _bona fide_ N-body energies (currently standard behavior of N-body driver). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - Opportunity for ""pleasantly parallel"" N-body computations; * **User-Facing for Release Notes**; - UI to N-Body driver unchanged; - Standard N-body calls, e.g., `energy(..., bsse_type='cp')` retain current functionality via `nbody_gufunc()`. ## Questions; - [x] Docstring styleguide: For the new functions, should the docstrings be in NumPy format or should they look more like the docstring in `nbody_gufunc()` so that sphinxman can scrape them for the manual?. ## Checklist; - [x] Tests added for any new features (existing tests sufficient); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/975
https://github.com/psi4/psi4/pull/975:761,Energy Efficiency,energy,energy,761,"## Description; Addresses #885 by refactoring N-Body driver to three newly independent functions, driven by the existing `nbody_gufunc()`:; - `build_nbody_compute_list()`: Builds list of all N-body computations to be performed; - `compute_nbody_components()`: Performs given N-body computation(s), could be exploited as pleasantly parallel; - `assemble_nbody_components()`: Stitches components back together into _bona fide_ N-body energies (currently standard behavior of N-body driver). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - Opportunity for ""pleasantly parallel"" N-body computations; * **User-Facing for Release Notes**; - UI to N-Body driver unchanged; - Standard N-body calls, e.g., `energy(..., bsse_type='cp')` retain current functionality via `nbody_gufunc()`. ## Questions; - [x] Docstring styleguide: For the new functions, should the docstrings be in NumPy format or should they look more like the docstring in `nbody_gufunc()` so that sphinxman can scrape them for the manual?. ## Checklist; - [x] Tests added for any new features (existing tests sufficient); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/975
https://github.com/psi4/psi4/pull/975:34,Modifiability,refactor,refactoring,34,"## Description; Addresses #885 by refactoring N-Body driver to three newly independent functions, driven by the existing `nbody_gufunc()`:; - `build_nbody_compute_list()`: Builds list of all N-body computations to be performed; - `compute_nbody_components()`: Performs given N-body computation(s), could be exploited as pleasantly parallel; - `assemble_nbody_components()`: Stitches components back together into _bona fide_ N-body energies (currently standard behavior of N-body driver). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - Opportunity for ""pleasantly parallel"" N-body computations; * **User-Facing for Release Notes**; - UI to N-Body driver unchanged; - Standard N-body calls, e.g., `energy(..., bsse_type='cp')` retain current functionality via `nbody_gufunc()`. ## Questions; - [x] Docstring styleguide: For the new functions, should the docstrings be in NumPy format or should they look more like the docstring in `nbody_gufunc()` so that sphinxman can scrape them for the manual?. ## Checklist; - [x] Tests added for any new features (existing tests sufficient); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/975
https://github.com/psi4/psi4/pull/975:217,Performance,perform,performed,217,"## Description; Addresses #885 by refactoring N-Body driver to three newly independent functions, driven by the existing `nbody_gufunc()`:; - `build_nbody_compute_list()`: Builds list of all N-body computations to be performed; - `compute_nbody_components()`: Performs given N-body computation(s), could be exploited as pleasantly parallel; - `assemble_nbody_components()`: Stitches components back together into _bona fide_ N-body energies (currently standard behavior of N-body driver). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - Opportunity for ""pleasantly parallel"" N-body computations; * **User-Facing for Release Notes**; - UI to N-Body driver unchanged; - Standard N-body calls, e.g., `energy(..., bsse_type='cp')` retain current functionality via `nbody_gufunc()`. ## Questions; - [x] Docstring styleguide: For the new functions, should the docstrings be in NumPy format or should they look more like the docstring in `nbody_gufunc()` so that sphinxman can scrape them for the manual?. ## Checklist; - [x] Tests added for any new features (existing tests sufficient); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/975
https://github.com/psi4/psi4/pull/975:260,Performance,Perform,Performs,260,"## Description; Addresses #885 by refactoring N-Body driver to three newly independent functions, driven by the existing `nbody_gufunc()`:; - `build_nbody_compute_list()`: Builds list of all N-body computations to be performed; - `compute_nbody_components()`: Performs given N-body computation(s), could be exploited as pleasantly parallel; - `assemble_nbody_components()`: Stitches components back together into _bona fide_ N-body energies (currently standard behavior of N-body driver). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - Opportunity for ""pleasantly parallel"" N-body computations; * **User-Facing for Release Notes**; - UI to N-Body driver unchanged; - Standard N-body calls, e.g., `energy(..., bsse_type='cp')` retain current functionality via `nbody_gufunc()`. ## Questions; - [x] Docstring styleguide: For the new functions, should the docstrings be in NumPy format or should they look more like the docstring in `nbody_gufunc()` so that sphinxman can scrape them for the manual?. ## Checklist; - [x] Tests added for any new features (existing tests sufficient); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/975
https://github.com/psi4/psi4/pull/975:1082,Testability,Test,Tests,1082,"## Description; Addresses #885 by refactoring N-Body driver to three newly independent functions, driven by the existing `nbody_gufunc()`:; - `build_nbody_compute_list()`: Builds list of all N-body computations to be performed; - `compute_nbody_components()`: Performs given N-body computation(s), could be exploited as pleasantly parallel; - `assemble_nbody_components()`: Stitches components back together into _bona fide_ N-body energies (currently standard behavior of N-body driver). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - Opportunity for ""pleasantly parallel"" N-body computations; * **User-Facing for Release Notes**; - UI to N-Body driver unchanged; - Standard N-body calls, e.g., `energy(..., bsse_type='cp')` retain current functionality via `nbody_gufunc()`. ## Questions; - [x] Docstring styleguide: For the new functions, should the docstrings be in NumPy format or should they look more like the docstring in `nbody_gufunc()` so that sphinxman can scrape them for the manual?. ## Checklist; - [x] Tests added for any new features (existing tests sufficient); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/975
https://github.com/psi4/psi4/pull/975:1125,Testability,test,tests,1125,"## Description; Addresses #885 by refactoring N-Body driver to three newly independent functions, driven by the existing `nbody_gufunc()`:; - `build_nbody_compute_list()`: Builds list of all N-body computations to be performed; - `compute_nbody_components()`: Performs given N-body computation(s), could be exploited as pleasantly parallel; - `assemble_nbody_components()`: Stitches components back together into _bona fide_ N-body energies (currently standard behavior of N-body driver). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - Opportunity for ""pleasantly parallel"" N-body computations; * **User-Facing for Release Notes**; - UI to N-Body driver unchanged; - Standard N-body calls, e.g., `energy(..., bsse_type='cp')` retain current functionality via `nbody_gufunc()`. ## Questions; - [x] Docstring styleguide: For the new functions, should the docstrings be in NumPy format or should they look more like the docstring in `nbody_gufunc()` so that sphinxman can scrape them for the manual?. ## Checklist; - [x] Tests added for any new features (existing tests sufficient); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/975
https://github.com/psi4/psi4/pull/975:1184,Testability,test,tests,1184,"## Description; Addresses #885 by refactoring N-Body driver to three newly independent functions, driven by the existing `nbody_gufunc()`:; - `build_nbody_compute_list()`: Builds list of all N-body computations to be performed; - `compute_nbody_components()`: Performs given N-body computation(s), could be exploited as pleasantly parallel; - `assemble_nbody_components()`: Stitches components back together into _bona fide_ N-body energies (currently standard behavior of N-body driver). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - Opportunity for ""pleasantly parallel"" N-body computations; * **User-Facing for Release Notes**; - UI to N-Body driver unchanged; - Standard N-body calls, e.g., `energy(..., bsse_type='cp')` retain current functionality via `nbody_gufunc()`. ## Questions; - [x] Docstring styleguide: For the new functions, should the docstrings be in NumPy format or should they look more like the docstring in `nbody_gufunc()` so that sphinxman can scrape them for the manual?. ## Checklist; - [x] Tests added for any new features (existing tests sufficient); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/975
https://github.com/psi4/psi4/pull/975:1275,Testability,test,tests,1275,"## Description; Addresses #885 by refactoring N-Body driver to three newly independent functions, driven by the existing `nbody_gufunc()`:; - `build_nbody_compute_list()`: Builds list of all N-body computations to be performed; - `compute_nbody_components()`: Performs given N-body computation(s), could be exploited as pleasantly parallel; - `assemble_nbody_components()`: Stitches components back together into _bona fide_ N-body energies (currently standard behavior of N-body driver). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - Opportunity for ""pleasantly parallel"" N-body computations; * **User-Facing for Release Notes**; - UI to N-Body driver unchanged; - Standard N-body calls, e.g., `energy(..., bsse_type='cp')` retain current functionality via `nbody_gufunc()`. ## Questions; - [x] Docstring styleguide: For the new functions, should the docstrings be in NumPy format or should they look more like the docstring in `nbody_gufunc()` so that sphinxman can scrape them for the manual?. ## Checklist; - [x] Tests added for any new features (existing tests sufficient); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/975
https://github.com/psi4/psi4/issues/977:280,Energy Efficiency,energy,energy,280,"Mentioned in PR #975 . The behaviour between the two equivalent CBS modes is inconsistent when passed through nbody driver:. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(E_method_basis, E_cbs, 6, ""Interaction energy"") #TEST ; ``` . In the first case, `name = ""MP2/[...]""` so the sequence is:; ```; energy() -> _nbody_gufunc() -> [-> _cbs_gufunc() -> cbs()] * n => recurse back; ```; In the second case, `name = cbs` which has `__call__`, so:; ```; energy() -> cbs() -> [-> energy() -> _nbody_gufunc()] * x => recurse back; ```; I am not sure what the best way of solving this is: ; - option 1) is to extend the n-body driver to accept `__call__`-able `name`s, ; - option 2) is to bounce out of cbs() when `bsse_type` is passed in, but this would require generating a string-based representation of the cbs method anyway. I don't mind having a go at this once I know which is the preferred solution!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/977
https://github.com/psi4/psi4/issues/977:355,Energy Efficiency,energy,energy,355,"Mentioned in PR #975 . The behaviour between the two equivalent CBS modes is inconsistent when passed through nbody driver:. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(E_method_basis, E_cbs, 6, ""Interaction energy"") #TEST ; ``` . In the first case, `name = ""MP2/[...]""` so the sequence is:; ```; energy() -> _nbody_gufunc() -> [-> _cbs_gufunc() -> cbs()] * n => recurse back; ```; In the second case, `name = cbs` which has `__call__`, so:; ```; energy() -> cbs() -> [-> energy() -> _nbody_gufunc()] * x => recurse back; ```; I am not sure what the best way of solving this is: ; - option 1) is to extend the n-body driver to accept `__call__`-able `name`s, ; - option 2) is to bounce out of cbs() when `bsse_type` is passed in, but this would require generating a string-based representation of the cbs method anyway. I don't mind having a go at this once I know which is the preferred solution!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/977
https://github.com/psi4/psi4/issues/977:529,Energy Efficiency,energy,energy,529,"Mentioned in PR #975 . The behaviour between the two equivalent CBS modes is inconsistent when passed through nbody driver:. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(E_method_basis, E_cbs, 6, ""Interaction energy"") #TEST ; ``` . In the first case, `name = ""MP2/[...]""` so the sequence is:; ```; energy() -> _nbody_gufunc() -> [-> _cbs_gufunc() -> cbs()] * n => recurse back; ```; In the second case, `name = cbs` which has `__call__`, so:; ```; energy() -> cbs() -> [-> energy() -> _nbody_gufunc()] * x => recurse back; ```; I am not sure what the best way of solving this is: ; - option 1) is to extend the n-body driver to accept `__call__`-able `name`s, ; - option 2) is to bounce out of cbs() when `bsse_type` is passed in, but this would require generating a string-based representation of the cbs method anyway. I don't mind having a go at this once I know which is the preferred solution!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/977
https://github.com/psi4/psi4/issues/977:618,Energy Efficiency,energy,energy,618,"Mentioned in PR #975 . The behaviour between the two equivalent CBS modes is inconsistent when passed through nbody driver:. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(E_method_basis, E_cbs, 6, ""Interaction energy"") #TEST ; ``` . In the first case, `name = ""MP2/[...]""` so the sequence is:; ```; energy() -> _nbody_gufunc() -> [-> _cbs_gufunc() -> cbs()] * n => recurse back; ```; In the second case, `name = cbs` which has `__call__`, so:; ```; energy() -> cbs() -> [-> energy() -> _nbody_gufunc()] * x => recurse back; ```; I am not sure what the best way of solving this is: ; - option 1) is to extend the n-body driver to accept `__call__`-able `name`s, ; - option 2) is to bounce out of cbs() when `bsse_type` is passed in, but this would require generating a string-based representation of the cbs method anyway. I don't mind having a go at this once I know which is the preferred solution!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/977
https://github.com/psi4/psi4/issues/977:768,Energy Efficiency,energy,energy,768,"Mentioned in PR #975 . The behaviour between the two equivalent CBS modes is inconsistent when passed through nbody driver:. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(E_method_basis, E_cbs, 6, ""Interaction energy"") #TEST ; ``` . In the first case, `name = ""MP2/[...]""` so the sequence is:; ```; energy() -> _nbody_gufunc() -> [-> _cbs_gufunc() -> cbs()] * n => recurse back; ```; In the second case, `name = cbs` which has `__call__`, so:; ```; energy() -> cbs() -> [-> energy() -> _nbody_gufunc()] * x => recurse back; ```; I am not sure what the best way of solving this is: ; - option 1) is to extend the n-body driver to accept `__call__`-able `name`s, ; - option 2) is to bounce out of cbs() when `bsse_type` is passed in, but this would require generating a string-based representation of the cbs method anyway. I don't mind having a go at this once I know which is the preferred solution!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/977
https://github.com/psi4/psi4/issues/977:793,Energy Efficiency,energy,energy,793,"Mentioned in PR #975 . The behaviour between the two equivalent CBS modes is inconsistent when passed through nbody driver:. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(E_method_basis, E_cbs, 6, ""Interaction energy"") #TEST ; ``` . In the first case, `name = ""MP2/[...]""` so the sequence is:; ```; energy() -> _nbody_gufunc() -> [-> _cbs_gufunc() -> cbs()] * n => recurse back; ```; In the second case, `name = cbs` which has `__call__`, so:; ```; energy() -> cbs() -> [-> energy() -> _nbody_gufunc()] * x => recurse back; ```; I am not sure what the best way of solving this is: ; - option 1) is to extend the n-body driver to accept `__call__`-able `name`s, ; - option 2) is to bounce out of cbs() when `bsse_type` is passed in, but this would require generating a string-based representation of the cbs method anyway. I don't mind having a go at this once I know which is the preferred solution!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/977
https://github.com/psi4/psi4/issues/977:920,Modifiability,extend,extend,920,"Mentioned in PR #975 . The behaviour between the two equivalent CBS modes is inconsistent when passed through nbody driver:. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(E_method_basis, E_cbs, 6, ""Interaction energy"") #TEST ; ``` . In the first case, `name = ""MP2/[...]""` so the sequence is:; ```; energy() -> _nbody_gufunc() -> [-> _cbs_gufunc() -> cbs()] * n => recurse back; ```; In the second case, `name = cbs` which has `__call__`, so:; ```; energy() -> cbs() -> [-> energy() -> _nbody_gufunc()] * x => recurse back; ```; I am not sure what the best way of solving this is: ; - option 1) is to extend the n-body driver to accept `__call__`-able `name`s, ; - option 2) is to bounce out of cbs() when `bsse_type` is passed in, but this would require generating a string-based representation of the cbs method anyway. I don't mind having a go at this once I know which is the preferred solution!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/977
https://github.com/psi4/psi4/issues/977:539,Testability,TEST,TEST,539,"Mentioned in PR #975 . The behaviour between the two equivalent CBS modes is inconsistent when passed through nbody driver:. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(E_method_basis, E_cbs, 6, ""Interaction energy"") #TEST ; ``` . In the first case, `name = ""MP2/[...]""` so the sequence is:; ```; energy() -> _nbody_gufunc() -> [-> _cbs_gufunc() -> cbs()] * n => recurse back; ```; In the second case, `name = cbs` which has `__call__`, so:; ```; energy() -> cbs() -> [-> energy() -> _nbody_gufunc()] * x => recurse back; ```; I am not sure what the best way of solving this is: ; - option 1) is to extend the n-body driver to accept `__call__`-able `name`s, ; - option 2) is to bounce out of cbs() when `bsse_type` is passed in, but this would require generating a string-based representation of the cbs method anyway. I don't mind having a go at this once I know which is the preferred solution!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/977
https://github.com/psi4/psi4/pull/979:336,Security,validat,validation,336,## Description; Adds the ability to consume and produce MolSSI QC JSON Schema. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] A prototype MolSSI QC Schema has been implemented (http://molssi-qc-schema.readthedocs.io/en/latest/index.html). ## Questions; - [x] How much validation do we want?; - [x] A full test suite should like come from the schema itself?; - [x] How we will we handle extra psi vars? Is the current setup sufficient. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/979
https://github.com/psi4/psi4/pull/979:373,Testability,test,test,373,## Description; Adds the ability to consume and produce MolSSI QC JSON Schema. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] A prototype MolSSI QC Schema has been implemented (http://molssi-qc-schema.readthedocs.io/en/latest/index.html). ## Questions; - [x] How much validation do we want?; - [x] A full test suite should like come from the schema itself?; - [x] How we will we handle extra psi vars? Is the current setup sufficient. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/979
https://github.com/psi4/psi4/issues/980:145,Availability,down,down,145,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:256,Availability,avail,available,256,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:203,Modifiability,rewrite,rewrite,203,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:218,Modifiability,plugin,plugin,218,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:485,Modifiability,plugin,plugin,485,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:787,Modifiability,PLUGIN,PLUGINDUMP,787,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:865,Modifiability,PLUGIN,PLUGINDUMP,865,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:711,Testability,log,log,711,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:765,Testability,log,log,765,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:802,Testability,log,log,802,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:880,Testability,log,log,880,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:894,Testability,log,log,894,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:949,Testability,log,log,949,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:1114,Testability,log,log,1114,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:1171,Testability,log,log,1171,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:1201,Testability,log,log,1201,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:1272,Testability,log,log,1272,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:1298,Testability,log,log,1298,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/issues/980:1365,Testability,log,log,1365,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/980
https://github.com/psi4/psi4/pull/981:68,Modifiability,plugin,plugins,68,"## Description; Adds a few classes to the PSI_API list so one of my plugins will run. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] plugins can access DFJK, PKJK, VBase, and BasisFunctions classes. ## Checklist; - [x] passes smoke, quicktests subsets of tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/981
https://github.com/psi4/psi4/pull/981:201,Modifiability,plugin,plugins,201,"## Description; Adds a few classes to the PSI_API list so one of my plugins will run. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] plugins can access DFJK, PKJK, VBase, and BasisFunctions classes. ## Checklist; - [x] passes smoke, quicktests subsets of tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/981
https://github.com/psi4/psi4/pull/981:213,Security,access,access,213,"## Description; Adds a few classes to the PSI_API list so one of my plugins will run. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] plugins can access DFJK, PKJK, VBase, and BasisFunctions classes. ## Checklist; - [x] passes smoke, quicktests subsets of tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/981
https://github.com/psi4/psi4/pull/981:323,Testability,test,tests,323,"## Description; Adds a few classes to the PSI_API list so one of my plugins will run. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] plugins can access DFJK, PKJK, VBase, and BasisFunctions classes. ## Checklist; - [x] passes smoke, quicktests subsets of tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/981
https://github.com/psi4/psi4/pull/983:16,Deployability,Patch,Patch,16,"## Description; Patch up VV10 UKS dispersion. This had been a nagging issue for awhile now, but it turns out the only real issue is that I forgot to add the VV10 energy to the total SCF energy. I had originally started blaming the Fock term as the VV10 energy was spot on and subsequently starting playing with those values. Quite the blooper on my part:. ```; (p4dev) daniel:~/Gits/psi4ds/tests/dft-bench-ionization (vv10_uks)$ python ../../psi4/run_psi4.py --inplace input.dat; 	VSXC: Psi4 vs. Q-Chem.............................................PASSED; 	VV10: Psi4 vs. Q-Chem.............................................PASSED; 	B97M-V: Psi4 vs. Q-Chem...........................................PASSED; 	LC-VV10: Psi4 vs. Q-Chem..........................................PASSED; 	wB97M-V: Psi4 vs. Q-Chem..........................................PASSED; 	wB97X-V: Psi4 vs. Q-Chem..........................................PASSED; ```. This also fixes a small bug in meta-GGA UKS gradients from the original implementation. Fixes #982 and fixes #962. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/983
https://github.com/psi4/psi4/pull/983:162,Energy Efficiency,energy,energy,162,"## Description; Patch up VV10 UKS dispersion. This had been a nagging issue for awhile now, but it turns out the only real issue is that I forgot to add the VV10 energy to the total SCF energy. I had originally started blaming the Fock term as the VV10 energy was spot on and subsequently starting playing with those values. Quite the blooper on my part:. ```; (p4dev) daniel:~/Gits/psi4ds/tests/dft-bench-ionization (vv10_uks)$ python ../../psi4/run_psi4.py --inplace input.dat; 	VSXC: Psi4 vs. Q-Chem.............................................PASSED; 	VV10: Psi4 vs. Q-Chem.............................................PASSED; 	B97M-V: Psi4 vs. Q-Chem...........................................PASSED; 	LC-VV10: Psi4 vs. Q-Chem..........................................PASSED; 	wB97M-V: Psi4 vs. Q-Chem..........................................PASSED; 	wB97X-V: Psi4 vs. Q-Chem..........................................PASSED; ```. This also fixes a small bug in meta-GGA UKS gradients from the original implementation. Fixes #982 and fixes #962. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/983
https://github.com/psi4/psi4/pull/983:186,Energy Efficiency,energy,energy,186,"## Description; Patch up VV10 UKS dispersion. This had been a nagging issue for awhile now, but it turns out the only real issue is that I forgot to add the VV10 energy to the total SCF energy. I had originally started blaming the Fock term as the VV10 energy was spot on and subsequently starting playing with those values. Quite the blooper on my part:. ```; (p4dev) daniel:~/Gits/psi4ds/tests/dft-bench-ionization (vv10_uks)$ python ../../psi4/run_psi4.py --inplace input.dat; 	VSXC: Psi4 vs. Q-Chem.............................................PASSED; 	VV10: Psi4 vs. Q-Chem.............................................PASSED; 	B97M-V: Psi4 vs. Q-Chem...........................................PASSED; 	LC-VV10: Psi4 vs. Q-Chem..........................................PASSED; 	wB97M-V: Psi4 vs. Q-Chem..........................................PASSED; 	wB97X-V: Psi4 vs. Q-Chem..........................................PASSED; ```. This also fixes a small bug in meta-GGA UKS gradients from the original implementation. Fixes #982 and fixes #962. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/983
https://github.com/psi4/psi4/pull/983:253,Energy Efficiency,energy,energy,253,"## Description; Patch up VV10 UKS dispersion. This had been a nagging issue for awhile now, but it turns out the only real issue is that I forgot to add the VV10 energy to the total SCF energy. I had originally started blaming the Fock term as the VV10 energy was spot on and subsequently starting playing with those values. Quite the blooper on my part:. ```; (p4dev) daniel:~/Gits/psi4ds/tests/dft-bench-ionization (vv10_uks)$ python ../../psi4/run_psi4.py --inplace input.dat; 	VSXC: Psi4 vs. Q-Chem.............................................PASSED; 	VV10: Psi4 vs. Q-Chem.............................................PASSED; 	B97M-V: Psi4 vs. Q-Chem...........................................PASSED; 	LC-VV10: Psi4 vs. Q-Chem..........................................PASSED; 	wB97M-V: Psi4 vs. Q-Chem..........................................PASSED; 	wB97X-V: Psi4 vs. Q-Chem..........................................PASSED; ```. This also fixes a small bug in meta-GGA UKS gradients from the original implementation. Fixes #982 and fixes #962. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/983
https://github.com/psi4/psi4/pull/983:390,Testability,test,tests,390,"## Description; Patch up VV10 UKS dispersion. This had been a nagging issue for awhile now, but it turns out the only real issue is that I forgot to add the VV10 energy to the total SCF energy. I had originally started blaming the Fock term as the VV10 energy was spot on and subsequently starting playing with those values. Quite the blooper on my part:. ```; (p4dev) daniel:~/Gits/psi4ds/tests/dft-bench-ionization (vv10_uks)$ python ../../psi4/run_psi4.py --inplace input.dat; 	VSXC: Psi4 vs. Q-Chem.............................................PASSED; 	VV10: Psi4 vs. Q-Chem.............................................PASSED; 	B97M-V: Psi4 vs. Q-Chem...........................................PASSED; 	LC-VV10: Psi4 vs. Q-Chem..........................................PASSED; 	wB97M-V: Psi4 vs. Q-Chem..........................................PASSED; 	wB97X-V: Psi4 vs. Q-Chem..........................................PASSED; ```. This also fixes a small bug in meta-GGA UKS gradients from the original implementation. Fixes #982 and fixes #962. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/983
https://github.com/psi4/psi4/pull/984:16,Deployability,Update,Updates,16,## Description; Updates copyright year range in all license statements from `(c) 2007-2017` to `(c) 2007-2018` for new release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Protects Psi for another year; * **User-Facing for Release Notes**; - [ ] Can't steal code without proper attribution for another year. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/984
https://github.com/psi4/psi4/pull/984:119,Deployability,release,release,119,## Description; Updates copyright year range in all license statements from `(c) 2007-2017` to `(c) 2007-2018` for new release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Protects Psi for another year; * **User-Facing for Release Notes**; - [ ] Can't steal code without proper attribution for another year. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/984
https://github.com/psi4/psi4/pull/984:294,Deployability,Release,Release,294,## Description; Updates copyright year range in all license statements from `(c) 2007-2017` to `(c) 2007-2018` for new release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Protects Psi for another year; * **User-Facing for Release Notes**; - [ ] Can't steal code without proper attribution for another year. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/984
https://github.com/psi4/psi4/pull/986:577,Deployability,Release,Release,577,"## Description; Allow users to provide custom functionals using the new `dict_func` syntax. The following calls are now equivalent:; ```; energy(""PBE""); energy(""SCF"", dft_functional=""PBE""); energy(""SCF"", dft_functional={ ""name"": ""PBE"",; ""x_functionals"": { ""GGA_X_PBE"": {} },; ""c_functionals"": { ""GGA_C_PBE"": {} }, ; } ); ```. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `dict_builder.build_superfunctional_from_dictionary()` now builds superfunctionals from dictionaries, not strings ; * **User-Facing for Release Notes**; - [x] allow users to supply DFT functionals using the new syntax directly. ## Checklist; - [x] Tests added for any new features - modified `dft_smoke`; if that's not appropriate let me know; - [x] original part of `dft_smoke` runs fine. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/986
https://github.com/psi4/psi4/pull/986:138,Energy Efficiency,energy,energy,138,"## Description; Allow users to provide custom functionals using the new `dict_func` syntax. The following calls are now equivalent:; ```; energy(""PBE""); energy(""SCF"", dft_functional=""PBE""); energy(""SCF"", dft_functional={ ""name"": ""PBE"",; ""x_functionals"": { ""GGA_X_PBE"": {} },; ""c_functionals"": { ""GGA_C_PBE"": {} }, ; } ); ```. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `dict_builder.build_superfunctional_from_dictionary()` now builds superfunctionals from dictionaries, not strings ; * **User-Facing for Release Notes**; - [x] allow users to supply DFT functionals using the new syntax directly. ## Checklist; - [x] Tests added for any new features - modified `dft_smoke`; if that's not appropriate let me know; - [x] original part of `dft_smoke` runs fine. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/986
https://github.com/psi4/psi4/pull/986:153,Energy Efficiency,energy,energy,153,"## Description; Allow users to provide custom functionals using the new `dict_func` syntax. The following calls are now equivalent:; ```; energy(""PBE""); energy(""SCF"", dft_functional=""PBE""); energy(""SCF"", dft_functional={ ""name"": ""PBE"",; ""x_functionals"": { ""GGA_X_PBE"": {} },; ""c_functionals"": { ""GGA_C_PBE"": {} }, ; } ); ```. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `dict_builder.build_superfunctional_from_dictionary()` now builds superfunctionals from dictionaries, not strings ; * **User-Facing for Release Notes**; - [x] allow users to supply DFT functionals using the new syntax directly. ## Checklist; - [x] Tests added for any new features - modified `dft_smoke`; if that's not appropriate let me know; - [x] original part of `dft_smoke` runs fine. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/986
https://github.com/psi4/psi4/pull/986:190,Energy Efficiency,energy,energy,190,"## Description; Allow users to provide custom functionals using the new `dict_func` syntax. The following calls are now equivalent:; ```; energy(""PBE""); energy(""SCF"", dft_functional=""PBE""); energy(""SCF"", dft_functional={ ""name"": ""PBE"",; ""x_functionals"": { ""GGA_X_PBE"": {} },; ""c_functionals"": { ""GGA_C_PBE"": {} }, ; } ); ```. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `dict_builder.build_superfunctional_from_dictionary()` now builds superfunctionals from dictionaries, not strings ; * **User-Facing for Release Notes**; - [x] allow users to supply DFT functionals using the new syntax directly. ## Checklist; - [x] Tests added for any new features - modified `dft_smoke`; if that's not appropriate let me know; - [x] original part of `dft_smoke` runs fine. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/986
https://github.com/psi4/psi4/pull/986:689,Testability,Test,Tests,689,"## Description; Allow users to provide custom functionals using the new `dict_func` syntax. The following calls are now equivalent:; ```; energy(""PBE""); energy(""SCF"", dft_functional=""PBE""); energy(""SCF"", dft_functional={ ""name"": ""PBE"",; ""x_functionals"": { ""GGA_X_PBE"": {} },; ""c_functionals"": { ""GGA_C_PBE"": {} }, ; } ); ```. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `dict_builder.build_superfunctional_from_dictionary()` now builds superfunctionals from dictionaries, not strings ; * **User-Facing for Release Notes**; - [x] allow users to supply DFT functionals using the new syntax directly. ## Checklist; - [x] Tests added for any new features - modified `dft_smoke`; if that's not appropriate let me know; - [x] original part of `dft_smoke` runs fine. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/986
https://github.com/psi4/psi4/pull/987:132,Deployability,Release,Release,132,"## Description; Closes #941. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Fixes a bug where the incorrect number of displacements would be reported during a hessian obtained by fintie difference of energies. ## Checklist; - [ ] _Somehow_, I don't think running test cases for this one is necessary. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/987
https://github.com/psi4/psi4/pull/987:342,Testability,test,test,342,"## Description; Closes #941. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Fixes a bug where the incorrect number of displacements would be reported during a hessian obtained by fintie difference of energies. ## Checklist; - [ ] _Somehow_, I don't think running test cases for this one is necessary. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/987
https://github.com/psi4/psi4/pull/988:16,Deployability,Update,Updates,16,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/988
https://github.com/psi4/psi4/pull/988:48,Deployability,release,released,48,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/988
https://github.com/psi4/psi4/pull/988:109,Deployability,update,updated,109,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/988
https://github.com/psi4/psi4/pull/988:681,Deployability,Release,Release,681,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/988
https://github.com/psi4/psi4/pull/988:191,Performance,optimiz,optimization,191,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/988
https://github.com/psi4/psi4/pull/988:93,Testability,test,tests,93,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/988
https://github.com/psi4/psi4/pull/988:149,Testability,test,tested,149,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/988
https://github.com/psi4/psi4/pull/988:204,Testability,test,test,204,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/988
https://github.com/psi4/psi4/pull/988:495,Testability,test,tested,495,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/988
https://github.com/psi4/psi4/pull/988:767,Testability,Test,Tests,767,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/988
https://github.com/psi4/psi4/pull/988:841,Testability,test,tests,841,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/988
https://github.com/psi4/psi4/pull/988:932,Testability,test,tests,932,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/988
https://github.com/psi4/psi4/issues/989:110,Availability,fault,fault,110,"I am trying to do constrained geometry optimizations using the PsiAPI, however this results in a segmentation fault. Here's an example:; ```; import psi4. h2o = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""). psi4.set_options({""frozen_distance"": ""0 1""}); psi4.optimize(""HF/6-31G"", molecule=h2o); ```; I am using psi4 1.2a1.dev1159 installed from source with Anaconda Python 3.6 on macOS 10.13.4.; Thanks for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/989
https://github.com/psi4/psi4/issues/989:339,Deployability,install,installed,339,"I am trying to do constrained geometry optimizations using the PsiAPI, however this results in a segmentation fault. Here's an example:; ```; import psi4. h2o = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""). psi4.set_options({""frozen_distance"": ""0 1""}); psi4.optimize(""HF/6-31G"", molecule=h2o); ```; I am using psi4 1.2a1.dev1159 installed from source with Anaconda Python 3.6 on macOS 10.13.4.; Thanks for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/989
https://github.com/psi4/psi4/issues/989:39,Performance,optimiz,optimizations,39,"I am trying to do constrained geometry optimizations using the PsiAPI, however this results in a segmentation fault. Here's an example:; ```; import psi4. h2o = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""). psi4.set_options({""frozen_distance"": ""0 1""}); psi4.optimize(""HF/6-31G"", molecule=h2o); ```; I am using psi4 1.2a1.dev1159 installed from source with Anaconda Python 3.6 on macOS 10.13.4.; Thanks for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/989
https://github.com/psi4/psi4/issues/989:268,Performance,optimiz,optimize,268,"I am trying to do constrained geometry optimizations using the PsiAPI, however this results in a segmentation fault. Here's an example:; ```; import psi4. h2o = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""). psi4.set_options({""frozen_distance"": ""0 1""}); psi4.optimize(""HF/6-31G"", molecule=h2o); ```; I am using psi4 1.2a1.dev1159 installed from source with Anaconda Python 3.6 on macOS 10.13.4.; Thanks for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/989
https://github.com/psi4/psi4/pull/990:901,Deployability,Release,Release,901,"## Description; Provides a remedy for [#909](https://github.com/psi4/psi4/issues/909). `Molecule::mass` and `Molecule::Z` show inconsistent behavior for ghosts. This PR requires a new argument `bool zero_ghost` on the C++ side and optionally in the Python layer which gives a choice for behavior. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Required C++ argument `bool zero_ghost` for `Molecule::mass`; - [x] Optional python argument `bool zero_ghost` for `Molecule::mass`; - [x] Required argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional python argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional C++ argument `bool zero_ghost` for `Molecule::center_of_mass`; - [x] Optional C++ argument `bool zero_ghost` for `Molecule::inertia_tensor`; - [x] Check all C++ calls for ""intended behavior""; * **User-Facing for Release Notes**; - [x] New optional python arguments for `Molecule.mass()` and `Molecule.Z()`. ## Questions; - Each file changed on the C++ side needs to be passed either `True` or `False`. I'm defaulting to previous behavior in all cases except `optrot.cc` where I know functionality should change. ; - ""Previous behavior"" is that `mass` returns non-zero for ghost atoms (equivalent to `zero_ghost = false`), and `Z` returns zero for ghost atoms (`zero_ghost = true`). This behavior may want to be changed in some places, so this is a good time for a logic pass-through. . ## Checklist; - [x] Add argument for `mass`; - [x] Add argument for `Z`; - [x] Tests; - [x] Docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/990
https://github.com/psi4/psi4/pull/990:1453,Testability,log,logic,1453,"## Description; Provides a remedy for [#909](https://github.com/psi4/psi4/issues/909). `Molecule::mass` and `Molecule::Z` show inconsistent behavior for ghosts. This PR requires a new argument `bool zero_ghost` on the C++ side and optionally in the Python layer which gives a choice for behavior. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Required C++ argument `bool zero_ghost` for `Molecule::mass`; - [x] Optional python argument `bool zero_ghost` for `Molecule::mass`; - [x] Required argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional python argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional C++ argument `bool zero_ghost` for `Molecule::center_of_mass`; - [x] Optional C++ argument `bool zero_ghost` for `Molecule::inertia_tensor`; - [x] Check all C++ calls for ""intended behavior""; * **User-Facing for Release Notes**; - [x] New optional python arguments for `Molecule.mass()` and `Molecule.Z()`. ## Questions; - Each file changed on the C++ side needs to be passed either `True` or `False`. I'm defaulting to previous behavior in all cases except `optrot.cc` where I know functionality should change. ; - ""Previous behavior"" is that `mass` returns non-zero for ghost atoms (equivalent to `zero_ghost = false`), and `Z` returns zero for ghost atoms (`zero_ghost = true`). This behavior may want to be changed in some places, so this is a good time for a logic pass-through. . ## Checklist; - [x] Add argument for `mass`; - [x] Add argument for `Z`; - [x] Tests; - [x] Docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/990
https://github.com/psi4/psi4/pull/990:1554,Testability,Test,Tests,1554,"## Description; Provides a remedy for [#909](https://github.com/psi4/psi4/issues/909). `Molecule::mass` and `Molecule::Z` show inconsistent behavior for ghosts. This PR requires a new argument `bool zero_ghost` on the C++ side and optionally in the Python layer which gives a choice for behavior. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Required C++ argument `bool zero_ghost` for `Molecule::mass`; - [x] Optional python argument `bool zero_ghost` for `Molecule::mass`; - [x] Required argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional python argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional C++ argument `bool zero_ghost` for `Molecule::center_of_mass`; - [x] Optional C++ argument `bool zero_ghost` for `Molecule::inertia_tensor`; - [x] Check all C++ calls for ""intended behavior""; * **User-Facing for Release Notes**; - [x] New optional python arguments for `Molecule.mass()` and `Molecule.Z()`. ## Questions; - Each file changed on the C++ side needs to be passed either `True` or `False`. I'm defaulting to previous behavior in all cases except `optrot.cc` where I know functionality should change. ; - ""Previous behavior"" is that `mass` returns non-zero for ghost atoms (equivalent to `zero_ghost = false`), and `Z` returns zero for ghost atoms (`zero_ghost = true`). This behavior may want to be changed in some places, so this is a good time for a logic pass-through. . ## Checklist; - [x] Add argument for `mass`; - [x] Add argument for `Z`; - [x] Tests; - [x] Docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/990
https://github.com/psi4/psi4/pull/992:113,Deployability,Release,Release,113,"## Description; Exports symbols for my tutorial plugins, some private plugins, and gpu_dfcc. * **User-Facing for Release Notes**; - [x] GPU-DFCC plugin (https://github.com/edeprince3/gpu_dfcc) will compile and run. ## Checklist; - [x] quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/992
https://github.com/psi4/psi4/pull/992:48,Modifiability,plugin,plugins,48,"## Description; Exports symbols for my tutorial plugins, some private plugins, and gpu_dfcc. * **User-Facing for Release Notes**; - [x] GPU-DFCC plugin (https://github.com/edeprince3/gpu_dfcc) will compile and run. ## Checklist; - [x] quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/992
https://github.com/psi4/psi4/pull/992:70,Modifiability,plugin,plugins,70,"## Description; Exports symbols for my tutorial plugins, some private plugins, and gpu_dfcc. * **User-Facing for Release Notes**; - [x] GPU-DFCC plugin (https://github.com/edeprince3/gpu_dfcc) will compile and run. ## Checklist; - [x] quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/992
https://github.com/psi4/psi4/pull/992:145,Modifiability,plugin,plugin,145,"## Description; Exports symbols for my tutorial plugins, some private plugins, and gpu_dfcc. * **User-Facing for Release Notes**; - [x] GPU-DFCC plugin (https://github.com/edeprince3/gpu_dfcc) will compile and run. ## Checklist; - [x] quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/992
https://github.com/psi4/psi4/pull/993:237,Availability,error,error,237,"## Description; Lots o' stuff. **I recommend reviewing commit-by-commit.**. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix ""write() argument must be str, not bytes"" error that occurs in new NumPy; - [x] QCDB: migrate Hungarian alg from hungarian module to hacked scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/993
https://github.com/psi4/psi4/pull/993:649,Availability,fault,faulty,649,"## Description; Lots o' stuff. **I recommend reviewing commit-by-commit.**. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix ""write() argument must be str, not bytes"" error that occurs in new NumPy; - [x] QCDB: migrate Hungarian alg from hungarian module to hacked scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/993
https://github.com/psi4/psi4/pull/993:1610,Modifiability,plugin,plugins,1610,"scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not one unified place, so see if they're right.; - [x] Check the EFP bit is what we want. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/993
https://github.com/psi4/psi4/pull/993:712,Safety,detect,detection,712,"## Description; Lots o' stuff. **I recommend reviewing commit-by-commit.**. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix ""write() argument must be str, not bytes"" error that occurs in new NumPy; - [x] QCDB: migrate Hungarian alg from hungarian module to hacked scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/993
https://github.com/psi4/psi4/pull/993:354,Testability,test,tests,354,"## Description; Lots o' stuff. **I recommend reviewing commit-by-commit.**. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix ""write() argument must be str, not bytes"" error that occurs in new NumPy; - [x] QCDB: migrate Hungarian alg from hungarian module to hacked scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/993
https://github.com/psi4/psi4/pull/993:656,Testability,log,logic,656,"## Description; Lots o' stuff. **I recommend reviewing commit-by-commit.**. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix ""write() argument must be str, not bytes"" error that occurs in new NumPy; - [x] QCDB: migrate Hungarian alg from hungarian module to hacked scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/993
https://github.com/psi4/psi4/pull/993:1714,Testability,test,tests,1714,"scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not one unified place, so see if they're right.; - [x] Check the EFP bit is what we want. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/993
https://github.com/psi4/psi4/pull/993:1753,Testability,test,test,1753,"scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not one unified place, so see if they're right.; - [x] Check the EFP bit is what we want. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/993
https://github.com/psi4/psi4/pull/993:1772,Testability,test,test,1772,"scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not one unified place, so see if they're right.; - [x] Check the EFP bit is what we want. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/993
https://github.com/psi4/psi4/pull/993:1979,Testability,test,tests,1979,"scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not one unified place, so see if they're right.; - [x] Check the EFP bit is what we want. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/993
https://github.com/psi4/psi4/pull/993:2106,Testability,Test,Tests,2106,"scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not one unified place, so see if they're right.; - [x] Check the EFP bit is what we want. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/993
https://github.com/psi4/psi4/pull/993:2180,Testability,test,tests,2180,"scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not one unified place, so see if they're right.; - [x] Check the EFP bit is what we want. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/993
https://github.com/psi4/psi4/pull/993:2271,Testability,test,tests,2271,"scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not one unified place, so see if they're right.; - [x] Check the EFP bit is what we want. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/993
https://github.com/psi4/psi4/pull/995:862,Availability,error,error,862,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/995
https://github.com/psi4/psi4/pull/995:1767,Availability,error,errors,1767,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/995
https://github.com/psi4/psi4/pull/995:551,Deployability,Release,Release,551,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/995
https://github.com/psi4/psi4/pull/995:419,Security,access,access,419,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/995
https://github.com/psi4/psi4/pull/995:851,Security,validat,validation,851,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/995
https://github.com/psi4/psi4/pull/995:1233,Testability,log,logic,1233,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/995
https://github.com/psi4/psi4/pull/995:1548,Testability,Test,Tests,1548,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/995
https://github.com/psi4/psi4/pull/995:1622,Testability,test,tests,1622,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/995
https://github.com/psi4/psi4/pull/995:1713,Testability,test,tests,1713,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/995
https://github.com/psi4/psi4/pull/995:1743,Testability,test,tests,1743,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/995
https://github.com/psi4/psi4/pull/995:1783,Testability,log,logic,1783,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/995
https://github.com/psi4/psi4/issues/996:194,Safety,avoid,avoid,194,perhaps wise to make a test that loops through all names in dashparam to see; if psi4 knows the functional name. Especially the exotic ones that are not regularly used.; Is there a smart way to avoid a calculation? . Just now found these:. - mpwp91 -> mpwpw; - mpw1pw91 -> mpw1pw,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/996
https://github.com/psi4/psi4/issues/996:23,Testability,test,test,23,perhaps wise to make a test that loops through all names in dashparam to see; if psi4 knows the functional name. Especially the exotic ones that are not regularly used.; Is there a smart way to avoid a calculation? . Just now found these:. - mpwp91 -> mpwpw; - mpw1pw91 -> mpw1pw,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/996
https://github.com/psi4/psi4/pull/997:109,Deployability,Release,Release,109,"## Description; Enables plugin gpu_dfcc as external plugin compiled with psi4. ## Todos; * **User-Facing for Release Notes**; - [x] enables GPU-accelerated DF-CCSD. ## Checklist; - [x] tests comparing energies from DF-CCSD and GPU DF-CCSD -- present in psithon and psiapi; - [x] check for NVIDIA compilers and skip compilation if they are missing -- no need since user's `ENABLE_gpu_dfcc=ON` means build-or-die-trying; - [x] For `ENABLE_gpu_dfcc=ON` and built, on a sys w/o GPUs, cmake tests will fail, pytest test will skip. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/997
https://github.com/psi4/psi4/pull/997:24,Modifiability,plugin,plugin,24,"## Description; Enables plugin gpu_dfcc as external plugin compiled with psi4. ## Todos; * **User-Facing for Release Notes**; - [x] enables GPU-accelerated DF-CCSD. ## Checklist; - [x] tests comparing energies from DF-CCSD and GPU DF-CCSD -- present in psithon and psiapi; - [x] check for NVIDIA compilers and skip compilation if they are missing -- no need since user's `ENABLE_gpu_dfcc=ON` means build-or-die-trying; - [x] For `ENABLE_gpu_dfcc=ON` and built, on a sys w/o GPUs, cmake tests will fail, pytest test will skip. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/997
https://github.com/psi4/psi4/pull/997:52,Modifiability,plugin,plugin,52,"## Description; Enables plugin gpu_dfcc as external plugin compiled with psi4. ## Todos; * **User-Facing for Release Notes**; - [x] enables GPU-accelerated DF-CCSD. ## Checklist; - [x] tests comparing energies from DF-CCSD and GPU DF-CCSD -- present in psithon and psiapi; - [x] check for NVIDIA compilers and skip compilation if they are missing -- no need since user's `ENABLE_gpu_dfcc=ON` means build-or-die-trying; - [x] For `ENABLE_gpu_dfcc=ON` and built, on a sys w/o GPUs, cmake tests will fail, pytest test will skip. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/997
https://github.com/psi4/psi4/pull/997:185,Testability,test,tests,185,"## Description; Enables plugin gpu_dfcc as external plugin compiled with psi4. ## Todos; * **User-Facing for Release Notes**; - [x] enables GPU-accelerated DF-CCSD. ## Checklist; - [x] tests comparing energies from DF-CCSD and GPU DF-CCSD -- present in psithon and psiapi; - [x] check for NVIDIA compilers and skip compilation if they are missing -- no need since user's `ENABLE_gpu_dfcc=ON` means build-or-die-trying; - [x] For `ENABLE_gpu_dfcc=ON` and built, on a sys w/o GPUs, cmake tests will fail, pytest test will skip. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/997
https://github.com/psi4/psi4/pull/997:486,Testability,test,tests,486,"## Description; Enables plugin gpu_dfcc as external plugin compiled with psi4. ## Todos; * **User-Facing for Release Notes**; - [x] enables GPU-accelerated DF-CCSD. ## Checklist; - [x] tests comparing energies from DF-CCSD and GPU DF-CCSD -- present in psithon and psiapi; - [x] check for NVIDIA compilers and skip compilation if they are missing -- no need since user's `ENABLE_gpu_dfcc=ON` means build-or-die-trying; - [x] For `ENABLE_gpu_dfcc=ON` and built, on a sys w/o GPUs, cmake tests will fail, pytest test will skip. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/997
https://github.com/psi4/psi4/pull/997:510,Testability,test,test,510,"## Description; Enables plugin gpu_dfcc as external plugin compiled with psi4. ## Todos; * **User-Facing for Release Notes**; - [x] enables GPU-accelerated DF-CCSD. ## Checklist; - [x] tests comparing energies from DF-CCSD and GPU DF-CCSD -- present in psithon and psiapi; - [x] check for NVIDIA compilers and skip compilation if they are missing -- no need since user's `ENABLE_gpu_dfcc=ON` means build-or-die-trying; - [x] For `ENABLE_gpu_dfcc=ON` and built, on a sys w/o GPUs, cmake tests will fail, pytest test will skip. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/997
https://github.com/psi4/psi4/issues/999:46,Deployability,pipeline,pipeline,46,"PCM-ROHF is currently broken. A fix is in the pipeline with #953, but is sufficiently invasive that it **will not make it** to the upcoming 1.2 release.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/999
https://github.com/psi4/psi4/issues/999:144,Deployability,release,release,144,"PCM-ROHF is currently broken. A fix is in the pipeline with #953, but is sufficiently invasive that it **will not make it** to the upcoming 1.2 release.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/999
https://github.com/psi4/psi4/issues/1000:20,Deployability,release,release,20,"With the coming 1.2 release, I decided to test master instead of tags/v1.1 that I use as stable. all ctests fail with what I believe is python2 related.; ```. 315/399 Test: sapt1; Command: ""/usr/bin/python2.7"" ""/media/BIGdisk/psi4/tests/runtest.py"" ""/media/BIGdisk/psi4/tests/sapt1/input.dat"" ""/home/termo/psibuild/testresults.log$; Directory: /home/termo/psibuild/tests/sapt1; ""sapt1"" start time: May 02 20:52 UTC; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/bin/psi4"", line 160, in <module>; import psi4; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/driver/endorsed_plugins.py"", line 44, in <module>; if 'scipy' in e.msg:; AttributeError: 'exceptions.ImportError' object has no attribute 'msg'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>. ```. I use the same setup for cmake as for tags/v1.1, which pass fine ctest. Something I have overseen to pass to cmake in master?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1000
https://github.com/psi4/psi4/issues/1000:42,Testability,test,test,42,"With the coming 1.2 release, I decided to test master instead of tags/v1.1 that I use as stable. all ctests fail with what I believe is python2 related.; ```. 315/399 Test: sapt1; Command: ""/usr/bin/python2.7"" ""/media/BIGdisk/psi4/tests/runtest.py"" ""/media/BIGdisk/psi4/tests/sapt1/input.dat"" ""/home/termo/psibuild/testresults.log$; Directory: /home/termo/psibuild/tests/sapt1; ""sapt1"" start time: May 02 20:52 UTC; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/bin/psi4"", line 160, in <module>; import psi4; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/driver/endorsed_plugins.py"", line 44, in <module>; if 'scipy' in e.msg:; AttributeError: 'exceptions.ImportError' object has no attribute 'msg'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>. ```. I use the same setup for cmake as for tags/v1.1, which pass fine ctest. Something I have overseen to pass to cmake in master?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1000
https://github.com/psi4/psi4/issues/1000:167,Testability,Test,Test,167,"With the coming 1.2 release, I decided to test master instead of tags/v1.1 that I use as stable. all ctests fail with what I believe is python2 related.; ```. 315/399 Test: sapt1; Command: ""/usr/bin/python2.7"" ""/media/BIGdisk/psi4/tests/runtest.py"" ""/media/BIGdisk/psi4/tests/sapt1/input.dat"" ""/home/termo/psibuild/testresults.log$; Directory: /home/termo/psibuild/tests/sapt1; ""sapt1"" start time: May 02 20:52 UTC; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/bin/psi4"", line 160, in <module>; import psi4; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/driver/endorsed_plugins.py"", line 44, in <module>; if 'scipy' in e.msg:; AttributeError: 'exceptions.ImportError' object has no attribute 'msg'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>. ```. I use the same setup for cmake as for tags/v1.1, which pass fine ctest. Something I have overseen to pass to cmake in master?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1000
https://github.com/psi4/psi4/issues/1000:231,Testability,test,tests,231,"With the coming 1.2 release, I decided to test master instead of tags/v1.1 that I use as stable. all ctests fail with what I believe is python2 related.; ```. 315/399 Test: sapt1; Command: ""/usr/bin/python2.7"" ""/media/BIGdisk/psi4/tests/runtest.py"" ""/media/BIGdisk/psi4/tests/sapt1/input.dat"" ""/home/termo/psibuild/testresults.log$; Directory: /home/termo/psibuild/tests/sapt1; ""sapt1"" start time: May 02 20:52 UTC; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/bin/psi4"", line 160, in <module>; import psi4; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/driver/endorsed_plugins.py"", line 44, in <module>; if 'scipy' in e.msg:; AttributeError: 'exceptions.ImportError' object has no attribute 'msg'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>. ```. I use the same setup for cmake as for tags/v1.1, which pass fine ctest. Something I have overseen to pass to cmake in master?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1000
https://github.com/psi4/psi4/issues/1000:270,Testability,test,tests,270,"With the coming 1.2 release, I decided to test master instead of tags/v1.1 that I use as stable. all ctests fail with what I believe is python2 related.; ```. 315/399 Test: sapt1; Command: ""/usr/bin/python2.7"" ""/media/BIGdisk/psi4/tests/runtest.py"" ""/media/BIGdisk/psi4/tests/sapt1/input.dat"" ""/home/termo/psibuild/testresults.log$; Directory: /home/termo/psibuild/tests/sapt1; ""sapt1"" start time: May 02 20:52 UTC; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/bin/psi4"", line 160, in <module>; import psi4; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/driver/endorsed_plugins.py"", line 44, in <module>; if 'scipy' in e.msg:; AttributeError: 'exceptions.ImportError' object has no attribute 'msg'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>. ```. I use the same setup for cmake as for tags/v1.1, which pass fine ctest. Something I have overseen to pass to cmake in master?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1000
https://github.com/psi4/psi4/issues/1000:315,Testability,test,testresults,315,"With the coming 1.2 release, I decided to test master instead of tags/v1.1 that I use as stable. all ctests fail with what I believe is python2 related.; ```. 315/399 Test: sapt1; Command: ""/usr/bin/python2.7"" ""/media/BIGdisk/psi4/tests/runtest.py"" ""/media/BIGdisk/psi4/tests/sapt1/input.dat"" ""/home/termo/psibuild/testresults.log$; Directory: /home/termo/psibuild/tests/sapt1; ""sapt1"" start time: May 02 20:52 UTC; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/bin/psi4"", line 160, in <module>; import psi4; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/driver/endorsed_plugins.py"", line 44, in <module>; if 'scipy' in e.msg:; AttributeError: 'exceptions.ImportError' object has no attribute 'msg'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>. ```. I use the same setup for cmake as for tags/v1.1, which pass fine ctest. Something I have overseen to pass to cmake in master?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1000
https://github.com/psi4/psi4/issues/1000:327,Testability,log,log,327,"With the coming 1.2 release, I decided to test master instead of tags/v1.1 that I use as stable. all ctests fail with what I believe is python2 related.; ```. 315/399 Test: sapt1; Command: ""/usr/bin/python2.7"" ""/media/BIGdisk/psi4/tests/runtest.py"" ""/media/BIGdisk/psi4/tests/sapt1/input.dat"" ""/home/termo/psibuild/testresults.log$; Directory: /home/termo/psibuild/tests/sapt1; ""sapt1"" start time: May 02 20:52 UTC; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/bin/psi4"", line 160, in <module>; import psi4; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/driver/endorsed_plugins.py"", line 44, in <module>; if 'scipy' in e.msg:; AttributeError: 'exceptions.ImportError' object has no attribute 'msg'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>. ```. I use the same setup for cmake as for tags/v1.1, which pass fine ctest. Something I have overseen to pass to cmake in master?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1000
https://github.com/psi4/psi4/issues/1000:365,Testability,test,tests,365,"With the coming 1.2 release, I decided to test master instead of tags/v1.1 that I use as stable. all ctests fail with what I believe is python2 related.; ```. 315/399 Test: sapt1; Command: ""/usr/bin/python2.7"" ""/media/BIGdisk/psi4/tests/runtest.py"" ""/media/BIGdisk/psi4/tests/sapt1/input.dat"" ""/home/termo/psibuild/testresults.log$; Directory: /home/termo/psibuild/tests/sapt1; ""sapt1"" start time: May 02 20:52 UTC; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/bin/psi4"", line 160, in <module>; import psi4; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/home/termo/psibuild/stage/mnt/batch/tasks/shared/BIGdisk/psi4-12/lib//psi4/driver/endorsed_plugins.py"", line 44, in <module>; if 'scipy' in e.msg:; AttributeError: 'exceptions.ImportError' object has no attribute 'msg'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>. ```. I use the same setup for cmake as for tags/v1.1, which pass fine ctest. Something I have overseen to pass to cmake in master?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1000
https://github.com/psi4/psi4/pull/1001:250,Deployability,Release,Release,250,## Description; The user needs not set `dertype='energy'` explicitly anymore when calling `optimize`. The test case has been extended accordingly. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] FInite difference gradient is always forced when using PCM . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1001
https://github.com/psi4/psi4/pull/1001:49,Energy Efficiency,energy,energy,49,## Description; The user needs not set `dertype='energy'` explicitly anymore when calling `optimize`. The test case has been extended accordingly. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] FInite difference gradient is always forced when using PCM . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1001
https://github.com/psi4/psi4/pull/1001:125,Modifiability,extend,extended,125,## Description; The user needs not set `dertype='energy'` explicitly anymore when calling `optimize`. The test case has been extended accordingly. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] FInite difference gradient is always forced when using PCM . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1001
https://github.com/psi4/psi4/pull/1001:91,Performance,optimiz,optimize,91,## Description; The user needs not set `dertype='energy'` explicitly anymore when calling `optimize`. The test case has been extended accordingly. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] FInite difference gradient is always forced when using PCM . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1001
https://github.com/psi4/psi4/pull/1001:106,Testability,test,test,106,## Description; The user needs not set `dertype='energy'` explicitly anymore when calling `optimize`. The test case has been extended accordingly. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] FInite difference gradient is always forced when using PCM . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1001
https://github.com/psi4/psi4/pull/1001:354,Testability,Test,Tests,354,## Description; The user needs not set `dertype='energy'` explicitly anymore when calling `optimize`. The test case has been extended accordingly. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] FInite difference gradient is always forced when using PCM . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1001
https://github.com/psi4/psi4/pull/1001:428,Testability,test,tests,428,## Description; The user needs not set `dertype='energy'` explicitly anymore when calling `optimize`. The test case has been extended accordingly. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] FInite difference gradient is always forced when using PCM . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1001
https://github.com/psi4/psi4/pull/1001:519,Testability,test,tests,519,## Description; The user needs not set `dertype='energy'` explicitly anymore when calling `optimize`. The test case has been extended accordingly. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] FInite difference gradient is always forced when using PCM . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1001
https://github.com/psi4/psi4/pull/1002:189,Deployability,patch,patched,189,"## Description; Removes cc46 from ctest temporarily to keep full tests passing. There is no major bug here, rather a bunch of conflicting logic in the `run_cc_property` driver that will be patched before final release. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1002
https://github.com/psi4/psi4/pull/1002:210,Deployability,release,release,210,"## Description; Removes cc46 from ctest temporarily to keep full tests passing. There is no major bug here, rather a bunch of conflicting logic in the `run_cc_property` driver that will be patched before final release. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1002
https://github.com/psi4/psi4/pull/1002:65,Testability,test,tests,65,"## Description; Removes cc46 from ctest temporarily to keep full tests passing. There is no major bug here, rather a bunch of conflicting logic in the `run_cc_property` driver that will be patched before final release. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1002
https://github.com/psi4/psi4/pull/1002:138,Testability,log,logic,138,"## Description; Removes cc46 from ctest temporarily to keep full tests passing. There is no major bug here, rather a bunch of conflicting logic in the `run_cc_property` driver that will be patched before final release. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1002
https://github.com/psi4/psi4/issues/1004:614,Availability,Error,Error,614,with ENABLE_GENERIC=OFF:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found BLAS: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;/usr/lib/x86_64-linux-gnu/libdl.so); -- LAPACK will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found LAPACK: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so); -- Found LAPACK MKL: /home/termo/intel/mkl/lib/intel64/libmkl_rt.so;... ```; with ENABLE_GENERIC=ON:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external BLAS library found (have you set the MATH_ROOT environment; variable?); Call Stack (most recent call first):; cmake/math/ConfigMath.cmake:105 (config_math_service); external/common/lapack/CMakeLists.txt:12 (include); ```; [CMakeOutput.log](https://pastebin.com/pWwucBCZ),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1004
https://github.com/psi4/psi4/issues/1004:663,Integrability,message,message,663,with ENABLE_GENERIC=OFF:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found BLAS: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;/usr/lib/x86_64-linux-gnu/libdl.so); -- LAPACK will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found LAPACK: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so); -- Found LAPACK MKL: /home/termo/intel/mkl/lib/intel64/libmkl_rt.so;... ```; with ENABLE_GENERIC=ON:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external BLAS library found (have you set the MATH_ROOT environment; variable?); Call Stack (most recent call first):; cmake/math/ConfigMath.cmake:105 (config_math_service); external/common/lapack/CMakeLists.txt:12 (include); ```; [CMakeOutput.log](https://pastebin.com/pWwucBCZ),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1004
https://github.com/psi4/psi4/issues/1004:749,Modifiability,variab,variable,749,with ENABLE_GENERIC=OFF:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found BLAS: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;/usr/lib/x86_64-linux-gnu/libdl.so); -- LAPACK will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found LAPACK: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so); -- Found LAPACK MKL: /home/termo/intel/mkl/lib/intel64/libmkl_rt.so;... ```; with ENABLE_GENERIC=ON:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external BLAS library found (have you set the MATH_ROOT environment; variable?); Call Stack (most recent call first):; cmake/math/ConfigMath.cmake:105 (config_math_service); external/common/lapack/CMakeLists.txt:12 (include); ```; [CMakeOutput.log](https://pastebin.com/pWwucBCZ),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1004
https://github.com/psi4/psi4/issues/1004:810,Modifiability,Config,ConfigMath,810,with ENABLE_GENERIC=OFF:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found BLAS: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;/usr/lib/x86_64-linux-gnu/libdl.so); -- LAPACK will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found LAPACK: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so); -- Found LAPACK MKL: /home/termo/intel/mkl/lib/intel64/libmkl_rt.so;... ```; with ENABLE_GENERIC=ON:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external BLAS library found (have you set the MATH_ROOT environment; variable?); Call Stack (most recent call first):; cmake/math/ConfigMath.cmake:105 (config_math_service); external/common/lapack/CMakeLists.txt:12 (include); ```; [CMakeOutput.log](https://pastebin.com/pWwucBCZ),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1004
https://github.com/psi4/psi4/issues/1004:924,Testability,log,log,924,with ENABLE_GENERIC=OFF:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found BLAS: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;/usr/lib/x86_64-linux-gnu/libdl.so); -- LAPACK will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found LAPACK: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so); -- Found LAPACK MKL: /home/termo/intel/mkl/lib/intel64/libmkl_rt.so;... ```; with ENABLE_GENERIC=ON:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external BLAS library found (have you set the MATH_ROOT environment; variable?); Call Stack (most recent call first):; cmake/math/ConfigMath.cmake:105 (config_math_service); external/common/lapack/CMakeLists.txt:12 (include); ```; [CMakeOutput.log](https://pastebin.com/pWwucBCZ),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1004
https://github.com/psi4/psi4/issues/1005:117,Availability,avail,available,117,RHF/ROHF stability analysis is already implemented but following instabilities (`STABILITY_ANALYSIS=FOLLOW`) is only available with UHF. Once we have the generalized Davidson solver (#886) it will be possible to:; - Add RHF/ROHF root following; - Move the UHF stability analysis code to use the solver and maintain a single interface; ; See #973 for some more information.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1005
https://github.com/psi4/psi4/issues/1005:324,Integrability,interface,interface,324,RHF/ROHF stability analysis is already implemented but following instabilities (`STABILITY_ANALYSIS=FOLLOW`) is only available with UHF. Once we have the generalized Davidson solver (#886) it will be possible to:; - Add RHF/ROHF root following; - Move the UHF stability analysis code to use the solver and maintain a single interface; ; See #973 for some more information.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1005
https://github.com/psi4/psi4/pull/1006:60,Deployability,Release,Release,60,"## Description; closes #973 . ## Todos; * **User-Facing for Release Notes**; - [x] setting `stability_analysis = ""FOLLOW""` will cause a `ValidationError` when used with `REFERENCE` that is not `UHF`; - [x] SCF docs have been updated to include a note that follow is only implemented for UHF, and the stability analysis methods table has been expanded to include a column showing valid `STABILITY_ANALYSIS` values for each reference. #973 Contained the report that RHF stability analysis = follow would silently check for instabilities and then continue on doing nothing about them, and a request to implement FOLLOW for RHF/ROHF. This PR fixes the first part, The feature request has been added under a separate issue (#1005). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1006
https://github.com/psi4/psi4/pull/1006:225,Deployability,update,updated,225,"## Description; closes #973 . ## Todos; * **User-Facing for Release Notes**; - [x] setting `stability_analysis = ""FOLLOW""` will cause a `ValidationError` when used with `REFERENCE` that is not `UHF`; - [x] SCF docs have been updated to include a note that follow is only implemented for UHF, and the stability analysis methods table has been expanded to include a column showing valid `STABILITY_ANALYSIS` values for each reference. #973 Contained the report that RHF stability analysis = follow would silently check for instabilities and then continue on doing nothing about them, and a request to implement FOLLOW for RHF/ROHF. This PR fixes the first part, The feature request has been added under a separate issue (#1005). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1006
https://github.com/psi4/psi4/pull/1006:137,Security,Validat,ValidationError,137,"## Description; closes #973 . ## Todos; * **User-Facing for Release Notes**; - [x] setting `stability_analysis = ""FOLLOW""` will cause a `ValidationError` when used with `REFERENCE` that is not `UHF`; - [x] SCF docs have been updated to include a note that follow is only implemented for UHF, and the stability analysis methods table has been expanded to include a column showing valid `STABILITY_ANALYSIS` values for each reference. #973 Contained the report that RHF stability analysis = follow would silently check for instabilities and then continue on doing nothing about them, and a request to implement FOLLOW for RHF/ROHF. This PR fixes the first part, The feature request has been added under a separate issue (#1005). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1006
https://github.com/psi4/psi4/issues/1007:84,Performance,optimiz,optimization,84,"When running both version 1.1 and 1.2rc1 psi4 compiled with intel compilers a dftd3 optimization (optimize('pbe0-d3bj')) hangs at the SCF grad start, also I can see cpu usage falls from all cpus to only one.; if i set -n 1 it runs fine. . This problem I didn't have with psi4 compiled with gcc. Any ideas as to why this happens, and what I can do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1007
https://github.com/psi4/psi4/issues/1007:98,Performance,optimiz,optimize,98,"When running both version 1.1 and 1.2rc1 psi4 compiled with intel compilers a dftd3 optimization (optimize('pbe0-d3bj')) hangs at the SCF grad start, also I can see cpu usage falls from all cpus to only one.; if i set -n 1 it runs fine. . This problem I didn't have with psi4 compiled with gcc. Any ideas as to why this happens, and what I can do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1007
https://github.com/psi4/psi4/issues/1009:137,Testability,test,test,137,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:453,Testability,test,test,453,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:500,Testability,TEST,TEST,500,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:543,Testability,TEST,TEST,543,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:588,Testability,TEST,TEST,588,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:630,Testability,TEST,TEST,630,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:671,Testability,TEST,TEST,671,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:715,Testability,TEST,TEST,715,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:755,Testability,TEST,TEST,755,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:795,Testability,TEST,TEST,795,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:837,Testability,TEST,TEST,837,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:879,Testability,TEST,TEST,879,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:924,Testability,TEST,TEST,924,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:966,Testability,TEST,TEST,966,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:1006,Testability,TEST,TEST,1006,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:1049,Testability,TEST,TEST,1049,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:1090,Testability,TEST,TEST,1090,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:1132,Testability,TEST,TEST,1132,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:1174,Testability,TEST,TEST,1174,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:1216,Testability,TEST,TEST,1216,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:1257,Testability,TEST,TEST,1257,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:1301,Testability,TEST,TEST,1301,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:1343,Testability,TEST,TEST,1343,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:1387,Testability,TEST,TEST,1387,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:1431,Testability,TEST,TEST,1431,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:1474,Testability,TEST,TEST,1474,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/issues/1009:1517,Testability,TEST,TEST,1517,"So [Matt saw some functionals going wrong](https://github.com/psi4/psi4/pull/961#issuecomment-385090273) in the big dft-bench-ionization test (Intel compilers and presumably MKL). Now I'm seeing it, too, when linking against OpenBLAS instead of MKL for a _lot_ of functionals (see below).; `PWB6K: Psi4 vs. Q-Chem: computed value (0.52376) does not match (0.45357) to 4 digits.`. Anyone who builds Psi against non-MKL, please report the results of this test. ```; #BAD 'PWB6K': 0.45356644150000136, #TEST; #BAD 'wB97X-D': 0.4575912357999954, #TEST; #BAD 'LRC-wPBE': 0.45809929579999675, #TEST; #BAD 'BHHLYP': 0.4474902386999986, #TEST; #BAD 'MPW1K': 0.4527968481999949, #TEST; #BAD'LRC-wPBEh': 0.4549011450999956, #TEST; #BAD 'wB97': 0.4561211940999925, #TEST; #BAD 'M11': 0.45965997109999535, #TEST; #BAD 'M08-HX': 0.4616204211000081, #TEST; #BAD 'wB97X': 0.45647112829999514, #TEST; #BAD 'B5050LYP': 0.45086574249999956, #TEST; #BAD 'M05-2X': 0.4583363492999979, #TEST; #BAD 'BB1K': 0.4523318653999979, #TEST; #BAD 'M06-2X': 0.45840746970000623, #TEST; #BAD 'dlDF': 0.46205070889999433, #TEST; #BAD 'M08-SO': 0.4656227382000111, #TEST; #BAD 'M06-HF': 0.4582368217999999, #TEST; #BAD 'MPWB1K': 0.4525753563999899, #TEST; #BAD 'B97-K': 0.4498949295999921, #TEST; #BAD'SOGGA11-X': 0.4601258852000001, #TEST; #BAD 'PBE50': 0.45096528610000064, #TEST; #BAD'CAM-B3LYP': 0.4568003603999955, #TEST; #BAD 'LC-VV10': 0.45568725450000613, #TEST; #BAD 'wB97M-V': 0.4544676075000069, #TEST; #BAD 'wB97X-V': 0.4553026020000033, #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1009
https://github.com/psi4/psi4/pull/1010:1209,Deployability,Release,Release,1209,"## Description; FINDIF's geometry generator is brought Py-Side, per [#884](https://github.com/psi4/psi4/issues/884). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Geometry generators are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [ ] Computing hessians from energies _will be_ Py-side.; - [ ] Add the banner.; - [ ] Finish renaming the finite difference functions.; - [ ] Review the findif test suite and add any tests as needed. In particular, make sure the functions are agnostic as to psi4 vs. qcdb molecules.; - [ ] Run the entire test suite, to make sure my PyBind'ing hasn't caused any deep problems.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor. ## Questions; - [ ] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1010
https://github.com/psi4/psi4/pull/1010:1273,Security,access,access-by-index,1273,"## Description; FINDIF's geometry generator is brought Py-Side, per [#884](https://github.com/psi4/psi4/issues/884). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Geometry generators are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [ ] Computing hessians from energies _will be_ Py-side.; - [ ] Add the banner.; - [ ] Finish renaming the finite difference functions.; - [ ] Review the findif test suite and add any tests as needed. In particular, make sure the functions are agnostic as to psi4 vs. qcdb molecules.; - [ ] Run the entire test suite, to make sure my PyBind'ing hasn't caused any deep problems.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor. ## Questions; - [ ] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1010
https://github.com/psi4/psi4/pull/1010:1349,Security,access,accessor,1349,"## Description; FINDIF's geometry generator is brought Py-Side, per [#884](https://github.com/psi4/psi4/issues/884). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Geometry generators are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [ ] Computing hessians from energies _will be_ Py-side.; - [ ] Add the banner.; - [ ] Finish renaming the finite difference functions.; - [ ] Review the findif test suite and add any tests as needed. In particular, make sure the functions are agnostic as to psi4 vs. qcdb molecules.; - [ ] Run the entire test suite, to make sure my PyBind'ing hasn't caused any deep problems.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor. ## Questions; - [ ] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1010
https://github.com/psi4/psi4/pull/1010:971,Testability,test,test,971,"## Description; FINDIF's geometry generator is brought Py-Side, per [#884](https://github.com/psi4/psi4/issues/884). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Geometry generators are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [ ] Computing hessians from energies _will be_ Py-side.; - [ ] Add the banner.; - [ ] Finish renaming the finite difference functions.; - [ ] Review the findif test suite and add any tests as needed. In particular, make sure the functions are agnostic as to psi4 vs. qcdb molecules.; - [ ] Run the entire test suite, to make sure my PyBind'ing hasn't caused any deep problems.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor. ## Questions; - [ ] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1010
https://github.com/psi4/psi4/pull/1010:994,Testability,test,tests,994,"## Description; FINDIF's geometry generator is brought Py-Side, per [#884](https://github.com/psi4/psi4/issues/884). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Geometry generators are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [ ] Computing hessians from energies _will be_ Py-side.; - [ ] Add the banner.; - [ ] Finish renaming the finite difference functions.; - [ ] Review the findif test suite and add any tests as needed. In particular, make sure the functions are agnostic as to psi4 vs. qcdb molecules.; - [ ] Run the entire test suite, to make sure my PyBind'ing hasn't caused any deep problems.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor. ## Questions; - [ ] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1010
https://github.com/psi4/psi4/pull/1010:1116,Testability,test,test,1116,"## Description; FINDIF's geometry generator is brought Py-Side, per [#884](https://github.com/psi4/psi4/issues/884). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Geometry generators are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [ ] Computing hessians from energies _will be_ Py-side.; - [ ] Add the banner.; - [ ] Finish renaming the finite difference functions.; - [ ] Review the findif test suite and add any tests as needed. In particular, make sure the functions are agnostic as to psi4 vs. qcdb molecules.; - [ ] Run the entire test suite, to make sure my PyBind'ing hasn't caused any deep problems.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor. ## Questions; - [ ] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1010
https://github.com/psi4/psi4/pull/1011:65,Availability,down,downstream,65,"## Description; - Adds the popular `return_energy` field so that downstream programs can always easily obtain this quantity instead of trying to parse the level of theory and keyword.; - Now correctly updates the geometry of the output result if a molecule orientation is changed by Psi4.; - Psi4 may reorder atoms for non-contiguous fragments, schema input now throws if this is the case. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1011
https://github.com/psi4/psi4/pull/1011:201,Deployability,update,updates,201,"## Description; - Adds the popular `return_energy` field so that downstream programs can always easily obtain this quantity instead of trying to parse the level of theory and keyword.; - Now correctly updates the geometry of the output result if a molecule orientation is changed by Psi4.; - Psi4 may reorder atoms for non-contiguous fragments, schema input now throws if this is the case. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1011
https://github.com/psi4/psi4/issues/1013:176,Availability,error,error,176,"I'm using GCC 8.1.0 and system-provided pybind 2.2.3 on Arch Linux, with latest master (015c10a5581e70c507feb968e87f75954ae0e946).; ```; src_berquist/psi4/src/core.cc:1081:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1013
https://github.com/psi4/psi4/pull/1014:349,Deployability,upgrade,upgrade,349,"## Description; As a side effect of #961, all wavefunctions had to have a density-fitted basis set when doing any energy computations, even if not density-fitted. Any scripts calling `psi4.core.Wavefunction.build` would have to manually set the DF basis to zero. `psi4.core.Wavefunction.build` now automatically sets the DF basis to zero - one less upgrade problem for users to worry about. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `psi4.core.Wavefunction.build` have zero DF basis by default. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1014
https://github.com/psi4/psi4/pull/1014:114,Energy Efficiency,energy,energy,114,"## Description; As a side effect of #961, all wavefunctions had to have a density-fitted basis set when doing any energy computations, even if not density-fitted. Any scripts calling `psi4.core.Wavefunction.build` would have to manually set the DF basis to zero. `psi4.core.Wavefunction.build` now automatically sets the DF basis to zero - one less upgrade problem for users to worry about. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `psi4.core.Wavefunction.build` have zero DF basis by default. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1014
https://github.com/psi4/psi4/pull/1014:622,Testability,test,tests,622,"## Description; As a side effect of #961, all wavefunctions had to have a density-fitted basis set when doing any energy computations, even if not density-fitted. Any scripts calling `psi4.core.Wavefunction.build` would have to manually set the DF basis to zero. `psi4.core.Wavefunction.build` now automatically sets the DF basis to zero - one less upgrade problem for users to worry about. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `psi4.core.Wavefunction.build` have zero DF basis by default. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1014
https://github.com/psi4/psi4/pull/1014:713,Testability,test,tests,713,"## Description; As a side effect of #961, all wavefunctions had to have a density-fitted basis set when doing any energy computations, even if not density-fitted. Any scripts calling `psi4.core.Wavefunction.build` would have to manually set the DF basis to zero. `psi4.core.Wavefunction.build` now automatically sets the DF basis to zero - one less upgrade problem for users to worry about. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `psi4.core.Wavefunction.build` have zero DF basis by default. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1014
https://github.com/psi4/psi4/pull/1017:149,Deployability,patch,patches,149,"## Description; more misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CMake: patches OMP detection for conda GCC, coderefinery/autocmake#247; - [x] Adds a script to probe threading; - [x] Mol: output ghosts from E(Gh) --> Gh(E) closes #1016 ; - [x] Fix up some license headers; - [x] repoints GH:loriab/libxc --> GH:psi4/libxc. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1017
https://github.com/psi4/psi4/pull/1017:161,Safety,detect,detection,161,"## Description; more misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CMake: patches OMP detection for conda GCC, coderefinery/autocmake#247; - [x] Adds a script to probe threading; - [x] Mol: output ghosts from E(Gh) --> Gh(E) closes #1016 ; - [x] Fix up some license headers; - [x] repoints GH:loriab/libxc --> GH:psi4/libxc. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1017
https://github.com/psi4/psi4/issues/1018:143,Availability,Error,Error,143,"Using version 1.2-rc2 from conda psi4/label/dev (and also several previous versions):. The following input crashes with a `RuntimeError: Fatal Error: Not enough memory` (logfile [attached](https://github.com/psi4/psi4/files/2000688/sapt0.txt)):. ```; molecule dimer {; 0 1; HE -3.175580423325 -0.517569032036 0.000000000000; --; 0 1; C -0.047607579372 0.489078465367 0.000000000000; O -0.621270272014 1.491611955637 0.000000000000; S 0.726228977971 -0.864990071157 0.000000000000. no_reorient; no_com; }. memory 20 Gb. dimer.update_geometry(); energy(""sapt0/jun-cc-pvdz"", molecule=dimer); ``` . When the He atom in the above is changed to, say, Ne, the calculation runs fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1018
https://github.com/psi4/psi4/issues/1018:544,Energy Efficiency,energy,energy,544,"Using version 1.2-rc2 from conda psi4/label/dev (and also several previous versions):. The following input crashes with a `RuntimeError: Fatal Error: Not enough memory` (logfile [attached](https://github.com/psi4/psi4/files/2000688/sapt0.txt)):. ```; molecule dimer {; 0 1; HE -3.175580423325 -0.517569032036 0.000000000000; --; 0 1; C -0.047607579372 0.489078465367 0.000000000000; O -0.621270272014 1.491611955637 0.000000000000; S 0.726228977971 -0.864990071157 0.000000000000. no_reorient; no_com; }. memory 20 Gb. dimer.update_geometry(); energy(""sapt0/jun-cc-pvdz"", molecule=dimer); ``` . When the He atom in the above is changed to, say, Ne, the calculation runs fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1018
https://github.com/psi4/psi4/issues/1018:170,Testability,log,logfile,170,"Using version 1.2-rc2 from conda psi4/label/dev (and also several previous versions):. The following input crashes with a `RuntimeError: Fatal Error: Not enough memory` (logfile [attached](https://github.com/psi4/psi4/files/2000688/sapt0.txt)):. ```; molecule dimer {; 0 1; HE -3.175580423325 -0.517569032036 0.000000000000; --; 0 1; C -0.047607579372 0.489078465367 0.000000000000; O -0.621270272014 1.491611955637 0.000000000000; S 0.726228977971 -0.864990071157 0.000000000000. no_reorient; no_com; }. memory 20 Gb. dimer.update_geometry(); energy(""sapt0/jun-cc-pvdz"", molecule=dimer); ``` . When the He atom in the above is changed to, say, Ne, the calculation runs fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1018
https://github.com/psi4/psi4/issues/1019:54,Deployability,update,update-dfocc-requires-scf-type-disk-df,54,"As mentioned [here](http://forum.psicode.org/t/manual-update-dfocc-requires-scf-type-disk-df/904/3), users can set `scf_type` in the SCF local namespace which will really mess with a great deal of our logic. I think this should be extracted and placed in globals only similar to `CC_TYPE` and the like. @loriab any thoughts?. ```; set scf {; scf_type df; }; energy('ccsd(t)/aug-cc-pvtz'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1019
https://github.com/psi4/psi4/issues/1019:358,Energy Efficiency,energy,energy,358,"As mentioned [here](http://forum.psicode.org/t/manual-update-dfocc-requires-scf-type-disk-df/904/3), users can set `scf_type` in the SCF local namespace which will really mess with a great deal of our logic. I think this should be extracted and placed in globals only similar to `CC_TYPE` and the like. @loriab any thoughts?. ```; set scf {; scf_type df; }; energy('ccsd(t)/aug-cc-pvtz'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1019
https://github.com/psi4/psi4/issues/1019:201,Testability,log,logic,201,"As mentioned [here](http://forum.psicode.org/t/manual-update-dfocc-requires-scf-type-disk-df/904/3), users can set `scf_type` in the SCF local namespace which will really mess with a great deal of our logic. I think this should be extracted and placed in globals only similar to `CC_TYPE` and the like. @loriab any thoughts?. ```; set scf {; scf_type df; }; energy('ccsd(t)/aug-cc-pvtz'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1019
https://github.com/psi4/psi4/pull/1020:253,Testability,test,tests,253,"## Todos; * **Developer Interest**; - [x] Moves SCF_TYPE to globals, psi4/psi4#1019; - [x] Change SAPT mem to long int, psi4/psi4#1018. ## Questions; - [ ] someone who knows SAPT & C++ should check over the `long int` business. ## Checklist; - [x] full tests on SCF_TYPE, sapt tests on long int. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1020
https://github.com/psi4/psi4/pull/1020:277,Testability,test,tests,277,"## Todos; * **Developer Interest**; - [x] Moves SCF_TYPE to globals, psi4/psi4#1019; - [x] Change SAPT mem to long int, psi4/psi4#1018. ## Questions; - [ ] someone who knows SAPT & C++ should check over the `long int` business. ## Checklist; - [x] full tests on SCF_TYPE, sapt tests on long int. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1020
https://github.com/psi4/psi4/issues/1021:8,Availability,down,downstream,8,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1021
https://github.com/psi4/psi4/issues/1021:561,Availability,down,downstream,561,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1021
https://github.com/psi4/psi4/issues/1021:675,Availability,error,error,675,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1021
https://github.com/psi4/psi4/issues/1021:745,Availability,error,errors,745,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1021
https://github.com/psi4/psi4/issues/1021:798,Availability,failure,failure,798,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1021
https://github.com/psi4/psi4/issues/1021:868,Availability,error,error,868,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1021
https://github.com/psi4/psi4/issues/1021:268,Energy Efficiency,adapt,adapted,268,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1021
https://github.com/psi4/psi4/issues/1021:681,Integrability,message,messages,681,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1021
https://github.com/psi4/psi4/issues/1021:874,Integrability,message,message,874,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1021
https://github.com/psi4/psi4/issues/1021:268,Modifiability,adapt,adapted,268,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1021
https://github.com/psi4/psi4/issues/1021:261,Testability,test,tests,261,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1021
https://github.com/psi4/psi4/issues/1021:308,Testability,test,test,308,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1021
https://github.com/psi4/psi4/pull/1022:16,Deployability,update,updates,16,## Description; updates the `samples/` directory. spare yourself the diff. first commit is the only non-copy change. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1022
https://github.com/psi4/psi4/pull/1023:97,Availability,error,error,97,## Description; Corrects additional JK logic edge cases found and increases the verbosity of the error messages. At the same time we should continuously discourage users to set a `SCF_TYPE` to anything besides `DF`. `MEM_DF` and `DISK_DF` are truly expert user options and I believe have been marked as such in a variety of places. Also added a throw if someone requests dlDF+D gradients as these have never been implemented. . Fixes #1021. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1023
https://github.com/psi4/psi4/pull/1023:140,Deployability,continuous,continuously,140,## Description; Corrects additional JK logic edge cases found and increases the verbosity of the error messages. At the same time we should continuously discourage users to set a `SCF_TYPE` to anything besides `DF`. `MEM_DF` and `DISK_DF` are truly expert user options and I believe have been marked as such in a variety of places. Also added a throw if someone requests dlDF+D gradients as these have never been implemented. . Fixes #1021. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1023
https://github.com/psi4/psi4/pull/1023:103,Integrability,message,messages,103,## Description; Corrects additional JK logic edge cases found and increases the verbosity of the error messages. At the same time we should continuously discourage users to set a `SCF_TYPE` to anything besides `DF`. `MEM_DF` and `DISK_DF` are truly expert user options and I believe have been marked as such in a variety of places. Also added a throw if someone requests dlDF+D gradients as these have never been implemented. . Fixes #1021. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1023
https://github.com/psi4/psi4/pull/1023:39,Testability,log,logic,39,## Description; Corrects additional JK logic edge cases found and increases the verbosity of the error messages. At the same time we should continuously discourage users to set a `SCF_TYPE` to anything besides `DF`. `MEM_DF` and `DISK_DF` are truly expert user options and I believe have been marked as such in a variety of places. Also added a throw if someone requests dlDF+D gradients as these have never been implemented. . Fixes #1021. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1023
https://github.com/psi4/psi4/pull/1024:1340,Deployability,Release,Release,1340," are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Fixes a bug in vibrational analysis where the zero K enthalpy variable was misspelled.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [x] Computing hessians from energies is now Py-side.; - [x] Finish renaming the finite difference functions.; - [x] Overly picky changes for consistent style and commenting.; - [x] Review the findif test suite and add any tests as needed.; - [x] Add the banner.; - [x] Remove old FINDIF code (after migrating to attic).; - [x] Removed the C-side gradient writer.; - [x] Added several new gradient writing formats.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor.; - [x] Gradients can now be written, even for analytic hessians.; - [x] The .grad file will now only write the latest hessian. ## Questions; - [x] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?; - [x] Since pyvib2 made hessian writing no longer FINDIF's responsibility, shall I make gradient writing no longer FINDIF's responsibility as well? Then `comp_grad_from_hess` could return a Numpy array, like the `comp_hess_from_X` functions. ## Checklist; - [x] Tests added for any new features (or rather, edited in); - [x] [Relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1024
https://github.com/psi4/psi4/pull/1024:686,Modifiability,variab,variable,686,"## Description; FINDIF's geometry generator is brought Py-Side, per [#884](https://github.com/psi4/psi4/issues/884). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Geometry generators are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Fixes a bug in vibrational analysis where the zero K enthalpy variable was misspelled.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [x] Computing hessians from energies is now Py-side.; - [x] Finish renaming the finite difference functions.; - [x] Overly picky changes for consistent style and commenting.; - [x] Review the findif test suite and add any tests as needed.; - [x] Add the banner.; - [x] Remove old FINDIF code (after migrating to attic).; - [x] Removed the C-side gradient writer.; - [x] Added several new gradient writing formats.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor.; - [x] Gradients can now be written, even for analytic hessians.; - [x] The .grad file will now only write the latest hessian. ## Questions; - [x] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?; - [x] Since pyvib2 made hessian writing no longer FINDIF's responsibility, shall I make gradient writing no longer FINDIF's responsibility as well? Then `comp_grad_from_hess` could return a Numpy array, like the `comp_hess_from_X` functions. ## Checklist; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1024
https://github.com/psi4/psi4/pull/1024:1404,Security,access,access-by-index,1404," are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Fixes a bug in vibrational analysis where the zero K enthalpy variable was misspelled.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [x] Computing hessians from energies is now Py-side.; - [x] Finish renaming the finite difference functions.; - [x] Overly picky changes for consistent style and commenting.; - [x] Review the findif test suite and add any tests as needed.; - [x] Add the banner.; - [x] Remove old FINDIF code (after migrating to attic).; - [x] Removed the C-side gradient writer.; - [x] Added several new gradient writing formats.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor.; - [x] Gradients can now be written, even for analytic hessians.; - [x] The .grad file will now only write the latest hessian. ## Questions; - [x] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?; - [x] Since pyvib2 made hessian writing no longer FINDIF's responsibility, shall I make gradient writing no longer FINDIF's responsibility as well? Then `comp_grad_from_hess` could return a Numpy array, like the `comp_hess_from_X` functions. ## Checklist; - [x] Tests added for any new features (or rather, edited in); - [x] [Relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1024
https://github.com/psi4/psi4/pull/1024:1480,Security,access,accessor,1480," are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Fixes a bug in vibrational analysis where the zero K enthalpy variable was misspelled.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [x] Computing hessians from energies is now Py-side.; - [x] Finish renaming the finite difference functions.; - [x] Overly picky changes for consistent style and commenting.; - [x] Review the findif test suite and add any tests as needed.; - [x] Add the banner.; - [x] Remove old FINDIF code (after migrating to attic).; - [x] Removed the C-side gradient writer.; - [x] Added several new gradient writing formats.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor.; - [x] Gradients can now be written, even for analytic hessians.; - [x] The .grad file will now only write the latest hessian. ## Questions; - [x] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?; - [x] Since pyvib2 made hessian writing no longer FINDIF's responsibility, shall I make gradient writing no longer FINDIF's responsibility as well? Then `comp_grad_from_hess` could return a Numpy array, like the `comp_hess_from_X` functions. ## Checklist; - [x] Tests added for any new features (or rather, edited in); - [x] [Relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1024
https://github.com/psi4/psi4/pull/1024:1104,Testability,test,test,1104,"/884). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Geometry generators are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Fixes a bug in vibrational analysis where the zero K enthalpy variable was misspelled.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [x] Computing hessians from energies is now Py-side.; - [x] Finish renaming the finite difference functions.; - [x] Overly picky changes for consistent style and commenting.; - [x] Review the findif test suite and add any tests as needed.; - [x] Add the banner.; - [x] Remove old FINDIF code (after migrating to attic).; - [x] Removed the C-side gradient writer.; - [x] Added several new gradient writing formats.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor.; - [x] Gradients can now be written, even for analytic hessians.; - [x] The .grad file will now only write the latest hessian. ## Questions; - [x] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?; - [x] Since pyvib2 made hessian writing no longer FINDIF's responsibility, shall I make gradient writing no longer FINDIF's responsibility as well? Then `comp_grad_from_hess` could return a Numpy array, like the `comp_hess_from_X` functions. ## Checklist; - [x] Tests added for any new features (or rather, edited in); - [x] [Relevant fraction of full tests run](http",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1024
https://github.com/psi4/psi4/pull/1024:1127,Testability,test,tests,1127,"/884). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Geometry generators are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Fixes a bug in vibrational analysis where the zero K enthalpy variable was misspelled.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [x] Computing hessians from energies is now Py-side.; - [x] Finish renaming the finite difference functions.; - [x] Overly picky changes for consistent style and commenting.; - [x] Review the findif test suite and add any tests as needed.; - [x] Add the banner.; - [x] Remove old FINDIF code (after migrating to attic).; - [x] Removed the C-side gradient writer.; - [x] Added several new gradient writing formats.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor.; - [x] Gradients can now be written, even for analytic hessians.; - [x] The .grad file will now only write the latest hessian. ## Questions; - [x] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?; - [x] Since pyvib2 made hessian writing no longer FINDIF's responsibility, shall I make gradient writing no longer FINDIF's responsibility as well? Then `comp_grad_from_hess` could return a Numpy array, like the `comp_hess_from_X` functions. ## Checklist; - [x] Tests added for any new features (or rather, edited in); - [x] [Relevant fraction of full tests run](http",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1024
https://github.com/psi4/psi4/pull/1024:2006,Testability,Test,Tests,2006," are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Fixes a bug in vibrational analysis where the zero K enthalpy variable was misspelled.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [x] Computing hessians from energies is now Py-side.; - [x] Finish renaming the finite difference functions.; - [x] Overly picky changes for consistent style and commenting.; - [x] Review the findif test suite and add any tests as needed.; - [x] Add the banner.; - [x] Remove old FINDIF code (after migrating to attic).; - [x] Removed the C-side gradient writer.; - [x] Added several new gradient writing formats.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor.; - [x] Gradients can now be written, even for analytic hessians.; - [x] The .grad file will now only write the latest hessian. ## Questions; - [x] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?; - [x] Since pyvib2 made hessian writing no longer FINDIF's responsibility, shall I make gradient writing no longer FINDIF's responsibility as well? Then `comp_grad_from_hess` could return a Numpy array, like the `comp_hess_from_X` functions. ## Checklist; - [x] Tests added for any new features (or rather, edited in); - [x] [Relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1024
https://github.com/psi4/psi4/pull/1024:2096,Testability,test,tests,2096," are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Fixes a bug in vibrational analysis where the zero K enthalpy variable was misspelled.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [x] Computing hessians from energies is now Py-side.; - [x] Finish renaming the finite difference functions.; - [x] Overly picky changes for consistent style and commenting.; - [x] Review the findif test suite and add any tests as needed.; - [x] Add the banner.; - [x] Remove old FINDIF code (after migrating to attic).; - [x] Removed the C-side gradient writer.; - [x] Added several new gradient writing formats.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor.; - [x] Gradients can now be written, even for analytic hessians.; - [x] The .grad file will now only write the latest hessian. ## Questions; - [x] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?; - [x] Since pyvib2 made hessian writing no longer FINDIF's responsibility, shall I make gradient writing no longer FINDIF's responsibility as well? Then `comp_grad_from_hess` could return a Numpy array, like the `comp_hess_from_X` functions. ## Checklist; - [x] Tests added for any new features (or rather, edited in); - [x] [Relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1024
https://github.com/psi4/psi4/pull/1024:2187,Testability,test,tests,2187," are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Fixes a bug in vibrational analysis where the zero K enthalpy variable was misspelled.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [x] Computing hessians from energies is now Py-side.; - [x] Finish renaming the finite difference functions.; - [x] Overly picky changes for consistent style and commenting.; - [x] Review the findif test suite and add any tests as needed.; - [x] Add the banner.; - [x] Remove old FINDIF code (after migrating to attic).; - [x] Removed the C-side gradient writer.; - [x] Added several new gradient writing formats.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor.; - [x] Gradients can now be written, even for analytic hessians.; - [x] The .grad file will now only write the latest hessian. ## Questions; - [x] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?; - [x] Since pyvib2 made hessian writing no longer FINDIF's responsibility, shall I make gradient writing no longer FINDIF's responsibility as well? Then `comp_grad_from_hess` could return a Numpy array, like the `comp_hess_from_X` functions. ## Checklist; - [x] Tests added for any new features (or rather, edited in); - [x] [Relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1024
https://github.com/psi4/psi4/issues/1025:67,Availability,error,error,67,"I was attempting to run an IRC, only to receive a rather confusing error message that `symm_matrix_inv : opt_symm_matrix_eig could not diagonalize`. After spending far too much time trying to figure out why various matrices were filled with NaN, I realized the problem was that I had supplied an energy minimum, not a transition state. (The SI that I was following put in a wrong geometry.) I've attached my input file. The IRC code saw the gradient was about zero and tried to follow the lowest mode... which was a translational mode. If the new PyOptking is given an initial hessian for an IRC, could it double-check that there's actually an imaginary mode?. [input.txt](https://github.com/psi4/psi4/files/2019016/input.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1025
https://github.com/psi4/psi4/issues/1025:296,Energy Efficiency,energy,energy,296,"I was attempting to run an IRC, only to receive a rather confusing error message that `symm_matrix_inv : opt_symm_matrix_eig could not diagonalize`. After spending far too much time trying to figure out why various matrices were filled with NaN, I realized the problem was that I had supplied an energy minimum, not a transition state. (The SI that I was following put in a wrong geometry.) I've attached my input file. The IRC code saw the gradient was about zero and tried to follow the lowest mode... which was a translational mode. If the new PyOptking is given an initial hessian for an IRC, could it double-check that there's actually an imaginary mode?. [input.txt](https://github.com/psi4/psi4/files/2019016/input.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1025
https://github.com/psi4/psi4/issues/1025:73,Integrability,message,message,73,"I was attempting to run an IRC, only to receive a rather confusing error message that `symm_matrix_inv : opt_symm_matrix_eig could not diagonalize`. After spending far too much time trying to figure out why various matrices were filled with NaN, I realized the problem was that I had supplied an energy minimum, not a transition state. (The SI that I was following put in a wrong geometry.) I've attached my input file. The IRC code saw the gradient was about zero and tried to follow the lowest mode... which was a translational mode. If the new PyOptking is given an initial hessian for an IRC, could it double-check that there's actually an imaginary mode?. [input.txt](https://github.com/psi4/psi4/files/2019016/input.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1025
https://github.com/psi4/psi4/pull/1026:46,Modifiability,plugin,plugins,46,"## Description; Exports Boys localization for plugins. ## Checklist; - [X] ""smoke"" tests pass. ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1026
https://github.com/psi4/psi4/pull/1026:83,Testability,test,tests,83,"## Description; Exports Boys localization for plugins. ## Checklist; - [X] ""smoke"" tests pass. ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1026
https://github.com/psi4/psi4/pull/1027:148,Deployability,Release,Release,148,## Description; Adds spin-flip SAPT to Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Adds Spin-Flip SAPT for computing all multiplet interactions between two high-spin monomers. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1027
https://github.com/psi4/psi4/pull/1027:284,Testability,Test,Tests,284,## Description; Adds spin-flip SAPT to Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Adds Spin-Flip SAPT for computing all multiplet interactions between two high-spin monomers. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1027
https://github.com/psi4/psi4/pull/1027:358,Testability,test,tests,358,## Description; Adds spin-flip SAPT to Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Adds Spin-Flip SAPT for computing all multiplet interactions between two high-spin monomers. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1027
https://github.com/psi4/psi4/pull/1027:449,Testability,test,tests,449,## Description; Adds spin-flip SAPT to Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Adds Spin-Flip SAPT for computing all multiplet interactions between two high-spin monomers. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1027
https://github.com/psi4/psi4/pull/1028:98,Modifiability,plugin,plugins,98,"## Description; `Slice` class is used in Forte. However, recent modifications blinds `Slice` from plugins.; This PR expose `Slice` class as `PSI_API` to be called in plugins. ## Modification; - [x] Added `PSI_API` flag for class `Slice`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1028
https://github.com/psi4/psi4/pull/1028:166,Modifiability,plugin,plugins,166,"## Description; `Slice` class is used in Forte. However, recent modifications blinds `Slice` from plugins.; This PR expose `Slice` class as `PSI_API` to be called in plugins. ## Modification; - [x] Added `PSI_API` flag for class `Slice`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1028
https://github.com/psi4/psi4/pull/1028:116,Security,expose,expose,116,"## Description; `Slice` class is used in Forte. However, recent modifications blinds `Slice` from plugins.; This PR expose `Slice` class as `PSI_API` to be called in plugins. ## Modification; - [x] Added `PSI_API` flag for class `Slice`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1028
https://github.com/psi4/psi4/pull/1029:343,Testability,Test,Tests,343,## Description; Adds hierarchical timers to FISAPT for code profiling purposes. Timing info for various F-SAPT terms and HF embedding printed to `timer.dat`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Enables term-wise profiling of F-ISAPT procedure. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1029
https://github.com/psi4/psi4/pull/1029:417,Testability,test,tests,417,## Description; Adds hierarchical timers to FISAPT for code profiling purposes. Timing info for various F-SAPT terms and HF embedding printed to `timer.dat`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Enables term-wise profiling of F-ISAPT procedure. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1029
https://github.com/psi4/psi4/pull/1029:508,Testability,test,tests,508,## Description; Adds hierarchical timers to FISAPT for code profiling purposes. Timing info for various F-SAPT terms and HF embedding printed to `timer.dat`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Enables term-wise profiling of F-ISAPT procedure. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1029
https://github.com/psi4/psi4/pull/1030:57,Deployability,release,release,57,## Description; A few additional tweaks for the Psi4 1.2 release. - Updates gCP alias function testing so that basis sets are applied for aliases.; - Hides DeepDiff import so that *most* of Psi4 is usable without this module.; - Updates the JSON spec to the V1 release.; - Ensures QCSchema input is correctly *copied* and not just updated. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1030
https://github.com/psi4/psi4/pull/1030:68,Deployability,Update,Updates,68,## Description; A few additional tweaks for the Psi4 1.2 release. - Updates gCP alias function testing so that basis sets are applied for aliases.; - Hides DeepDiff import so that *most* of Psi4 is usable without this module.; - Updates the JSON spec to the V1 release.; - Ensures QCSchema input is correctly *copied* and not just updated. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1030
https://github.com/psi4/psi4/pull/1030:229,Deployability,Update,Updates,229,## Description; A few additional tweaks for the Psi4 1.2 release. - Updates gCP alias function testing so that basis sets are applied for aliases.; - Hides DeepDiff import so that *most* of Psi4 is usable without this module.; - Updates the JSON spec to the V1 release.; - Ensures QCSchema input is correctly *copied* and not just updated. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1030
https://github.com/psi4/psi4/pull/1030:261,Deployability,release,release,261,## Description; A few additional tweaks for the Psi4 1.2 release. - Updates gCP alias function testing so that basis sets are applied for aliases.; - Hides DeepDiff import so that *most* of Psi4 is usable without this module.; - Updates the JSON spec to the V1 release.; - Ensures QCSchema input is correctly *copied* and not just updated. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1030
https://github.com/psi4/psi4/pull/1030:331,Deployability,update,updated,331,## Description; A few additional tweaks for the Psi4 1.2 release. - Updates gCP alias function testing so that basis sets are applied for aliases.; - Hides DeepDiff import so that *most* of Psi4 is usable without this module.; - Updates the JSON spec to the V1 release.; - Ensures QCSchema input is correctly *copied* and not just updated. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1030
https://github.com/psi4/psi4/pull/1030:95,Testability,test,testing,95,## Description; A few additional tweaks for the Psi4 1.2 release. - Updates gCP alias function testing so that basis sets are applied for aliases.; - Hides DeepDiff import so that *most* of Psi4 is usable without this module.; - Updates the JSON spec to the V1 release.; - Ensures QCSchema input is correctly *copied* and not just updated. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1030
https://github.com/psi4/psi4/pull/1030:198,Usability,usab,usable,198,## Description; A few additional tweaks for the Psi4 1.2 release. - Updates gCP alias function testing so that basis sets are applied for aliases.; - Hides DeepDiff import so that *most* of Psi4 is usable without this module.; - Updates the JSON spec to the V1 release.; - Ensures QCSchema input is correctly *copied* and not just updated. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1030
https://github.com/psi4/psi4/pull/1031:675,Deployability,Update,Update,675,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * Misc; - [x] Add PR help, as found by DGAS http://makeapullrequest.com; - [x] Add statement of support for https://python3statement.org/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1031:1930,Deployability,release,release,1930," psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops after `mkl_rt` and doesn't add `iomp5;pthread;etc`. Those are still formed into `tgt::lapack` in cmake/common/lapack. But before formation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1031:1271,Integrability,depend,dependencies,1271,"pullrequest.com; - [x] Add statement of support for https://python3statement.org/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1031:2509,Integrability,depend,depending,2509,"s (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops after `mkl_rt` and doesn't add `iomp5;pthread;etc`. Those are still formed into `tgt::lapack` in cmake/common/lapack. But before formation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally va",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1031:2849,Integrability,depend,depending,2849,"g it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops after `mkl_rt` and doesn't add `iomp5;pthread;etc`. Those are still formed into `tgt::lapack` in cmake/common/lapack. But before formation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally variable in calling pkg.; - Consequence is that psi4/src/core.cc and plugins which have been getting their openmp flag from CMAKE_CXX_FLAGS, now have to be linked to `tgt::lapack` (former) and have ENABLE_OPENMP passed & linked to `tgt::MathOpenMP` (latter).; - Works on Linux GCC & ICPC and cmake 3.3 & 3.11. ## Questions; - [x] @robertodr and @bast, I'd really appreciate your impressio",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1031:501,Modifiability,plugin,plugin,501,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * Misc; - [x] Add PR help, as found by DGAS http://makeapullrequest.com; - [x] Add statement of support for https://python3statement.org/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1031:594,Modifiability,plugin,plugin,594,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * Misc; - [x] Add PR help, as found by DGAS http://makeapullrequest.com; - [x] Add statement of support for https://python3statement.org/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1031:975,Modifiability,plugin,plugin,975,"rief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * Misc; - [x] Add PR help, as found by DGAS http://makeapullrequest.com; - [x] Add statement of support for https://python3statement.org/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1031:1491,Modifiability,plugin,plugins,1491,"l check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops after `mkl_rt` and doesn't add `iomp5;pthread;etc`. Those are still formed into `tgt::lapack` in cmake/common/lapack. But before formati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1031:2008,Modifiability,plugin,plugin,2008," psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops after `mkl_rt` and doesn't add `iomp5;pthread;etc`. Those are still formed into `tgt::lapack` in cmake/common/lapack. But before formation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1031:3516,Modifiability,variab,variable,3516,"rmation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally variable in calling pkg.; - Consequence is that psi4/src/core.cc and plugins which have been getting their openmp flag from CMAKE_CXX_FLAGS, now have to be linked to `tgt::lapack` (former) and have ENABLE_OPENMP passed & linked to `tgt::MathOpenMP` (latter).; - Works on Linux GCC & ICPC and cmake 3.3 & 3.11. ## Questions; - [x] @robertodr and @bast, I'd really appreciate your impressions as to whether this is a good way forward. For reference, here are some target printouts. Intel + MKL + cmake 3.3. ```; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-qopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/home/psilocaluser/toolchainconda/envs/p4dev36/lib/libiomp5.so;/usr/lib64/libpthread.so""; Properties for TARGET tgt::MathOpe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1031:3585,Modifiability,plugin,plugins,3585,"ll return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally variable in calling pkg.; - Consequence is that psi4/src/core.cc and plugins which have been getting their openmp flag from CMAKE_CXX_FLAGS, now have to be linked to `tgt::lapack` (former) and have ENABLE_OPENMP passed & linked to `tgt::MathOpenMP` (latter).; - Works on Linux GCC & ICPC and cmake 3.3 & 3.11. ## Questions; - [x] @robertodr and @bast, I'd really appreciate your impressions as to whether this is a good way forward. For reference, here are some target printouts. Intel + MKL + cmake 3.3. ```; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-qopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/home/psilocaluser/toolchainconda/envs/p4dev36/lib/libiomp5.so;/usr/lib64/libpthread.so""; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""OpenMP::Open",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1031:1315,Safety,detect,detects,1315,"g/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1031:3363,Safety,detect,detected,3363,"rmation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally variable in calling pkg.; - Consequence is that psi4/src/core.cc and plugins which have been getting their openmp flag from CMAKE_CXX_FLAGS, now have to be linked to `tgt::lapack` (former) and have ENABLE_OPENMP passed & linked to `tgt::MathOpenMP` (latter).; - Works on Linux GCC & ICPC and cmake 3.3 & 3.11. ## Questions; - [x] @robertodr and @bast, I'd really appreciate your impressions as to whether this is a good way forward. For reference, here are some target printouts. Intel + MKL + cmake 3.3. ```; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-qopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/home/psilocaluser/toolchainconda/envs/p4dev36/lib/libiomp5.so;/usr/lib64/libpthread.so""; Properties for TARGET tgt::MathOpe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1031:570,Testability,test,tests,570,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * Misc; - [x] Add PR help, as found by DGAS http://makeapullrequest.com; - [x] Add statement of support for https://python3statement.org/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1031:2583,Usability,guid,guide,2583,"s (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops after `mkl_rt` and doesn't add `iomp5;pthread;etc`. Those are still formed into `tgt::lapack` in cmake/common/lapack. But before formation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally va",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1031
https://github.com/psi4/psi4/pull/1032:328,Modifiability,plugin,plugins,328,"## Description; So `psi4.clean_options()` is a mainstay of psiapi mode because it allows you to do two calculations after another both starting from a clean slate of options. Likewise, it is important for testing b/c we do one behind the scenes (in pytest) between each test so that your MP2 doesn't get PCM solvation, etc. For plugins, this has been broken since the `clean_options()` command was invented, in that as soon as you tried to set an option unique to the plugin (as opposed to one that another module in read_options.cc defined) _after_ a options cleanse, it would complain about an invalid option. This PR reloads the plugin options after a cleanse. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1032
https://github.com/psi4/psi4/pull/1032:468,Modifiability,plugin,plugin,468,"## Description; So `psi4.clean_options()` is a mainstay of psiapi mode because it allows you to do two calculations after another both starting from a clean slate of options. Likewise, it is important for testing b/c we do one behind the scenes (in pytest) between each test so that your MP2 doesn't get PCM solvation, etc. For plugins, this has been broken since the `clean_options()` command was invented, in that as soon as you tried to set an option unique to the plugin (as opposed to one that another module in read_options.cc defined) _after_ a options cleanse, it would complain about an invalid option. This PR reloads the plugin options after a cleanse. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1032
https://github.com/psi4/psi4/pull/1032:632,Modifiability,plugin,plugin,632,"## Description; So `psi4.clean_options()` is a mainstay of psiapi mode because it allows you to do two calculations after another both starting from a clean slate of options. Likewise, it is important for testing b/c we do one behind the scenes (in pytest) between each test so that your MP2 doesn't get PCM solvation, etc. For plugins, this has been broken since the `clean_options()` command was invented, in that as soon as you tried to set an option unique to the plugin (as opposed to one that another module in read_options.cc defined) _after_ a options cleanse, it would complain about an invalid option. This PR reloads the plugin options after a cleanse. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1032
https://github.com/psi4/psi4/pull/1032:205,Testability,test,testing,205,"## Description; So `psi4.clean_options()` is a mainstay of psiapi mode because it allows you to do two calculations after another both starting from a clean slate of options. Likewise, it is important for testing b/c we do one behind the scenes (in pytest) between each test so that your MP2 doesn't get PCM solvation, etc. For plugins, this has been broken since the `clean_options()` command was invented, in that as soon as you tried to set an option unique to the plugin (as opposed to one that another module in read_options.cc defined) _after_ a options cleanse, it would complain about an invalid option. This PR reloads the plugin options after a cleanse. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1032
https://github.com/psi4/psi4/pull/1032:270,Testability,test,test,270,"## Description; So `psi4.clean_options()` is a mainstay of psiapi mode because it allows you to do two calculations after another both starting from a clean slate of options. Likewise, it is important for testing b/c we do one behind the scenes (in pytest) between each test so that your MP2 doesn't get PCM solvation, etc. For plugins, this has been broken since the `clean_options()` command was invented, in that as soon as you tried to set an option unique to the plugin (as opposed to one that another module in read_options.cc defined) _after_ a options cleanse, it would complain about an invalid option. This PR reloads the plugin options after a cleanse. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1032
https://github.com/psi4/psi4/issues/1033:378,Energy Efficiency,energy,energy,378,"Hi everyone,. I was testing the ADC(2) code in Psi4 on small molecules and noticed that the results I obtained were significantly different from Q-Chem. The SCF and MP2 energies match very well. For N2 (r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4 1.1:. Q-Chem 4.4.1:; MP2 ground-state energy: -109.2579498247; Excitation energy: 8.385211 eV; Excitation energy: 8.385211 eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My inpu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1033
https://github.com/psi4/psi4/issues/1033:414,Energy Efficiency,energy,energy,414,"Hi everyone,. I was testing the ADC(2) code in Psi4 on small molecules and noticed that the results I obtained were significantly different from Q-Chem. The SCF and MP2 energies match very well. For N2 (r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4 1.1:. Q-Chem 4.4.1:; MP2 ground-state energy: -109.2579498247; Excitation energy: 8.385211 eV; Excitation energy: 8.385211 eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My inpu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1033
https://github.com/psi4/psi4/issues/1033:446,Energy Efficiency,energy,energy,446,"Hi everyone,. I was testing the ADC(2) code in Psi4 on small molecules and noticed that the results I obtained were significantly different from Q-Chem. The SCF and MP2 energies match very well. For N2 (r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4 1.1:. Q-Chem 4.4.1:; MP2 ground-state energy: -109.2579498247; Excitation energy: 8.385211 eV; Excitation energy: 8.385211 eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My inpu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1033
https://github.com/psi4/psi4/issues/1033:478,Energy Efficiency,energy,energy,478,"Hi everyone,. I was testing the ADC(2) code in Psi4 on small molecules and noticed that the results I obtained were significantly different from Q-Chem. The SCF and MP2 energies match very well. For N2 (r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4 1.1:. Q-Chem 4.4.1:; MP2 ground-state energy: -109.2579498247; Excitation energy: 8.385211 eV; Excitation energy: 8.385211 eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My inpu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1033
https://github.com/psi4/psi4/issues/1033:510,Energy Efficiency,energy,energy,510,"Hi everyone,. I was testing the ADC(2) code in Psi4 on small molecules and noticed that the results I obtained were significantly different from Q-Chem. The SCF and MP2 energies match very well. For N2 (r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4 1.1:. Q-Chem 4.4.1:; MP2 ground-state energy: -109.2579498247; Excitation energy: 8.385211 eV; Excitation energy: 8.385211 eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My inpu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1033
https://github.com/psi4/psi4/issues/1033:542,Energy Efficiency,energy,energy,542,"Hi everyone,. I was testing the ADC(2) code in Psi4 on small molecules and noticed that the results I obtained were significantly different from Q-Chem. The SCF and MP2 energies match very well. For N2 (r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4 1.1:. Q-Chem 4.4.1:; MP2 ground-state energy: -109.2579498247; Excitation energy: 8.385211 eV; Excitation energy: 8.385211 eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My inpu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1033
https://github.com/psi4/psi4/issues/1033:574,Energy Efficiency,energy,energy,574,"Hi everyone,. I was testing the ADC(2) code in Psi4 on small molecules and noticed that the results I obtained were significantly different from Q-Chem. The SCF and MP2 energies match very well. For N2 (r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4 1.1:. Q-Chem 4.4.1:; MP2 ground-state energy: -109.2579498247; Excitation energy: 8.385211 eV; Excitation energy: 8.385211 eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My inpu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1033
https://github.com/psi4/psi4/issues/1033:607,Energy Efficiency,energy,energy,607,"Hi everyone,. I was testing the ADC(2) code in Psi4 on small molecules and noticed that the results I obtained were significantly different from Q-Chem. The SCF and MP2 energies match very well. For N2 (r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4 1.1:. Q-Chem 4.4.1:; MP2 ground-state energy: -109.2579498247; Excitation energy: 8.385211 eV; Excitation energy: 8.385211 eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My inpu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1033
https://github.com/psi4/psi4/issues/1033:640,Energy Efficiency,energy,energy,640,"Hi everyone,. I was testing the ADC(2) code in Psi4 on small molecules and noticed that the results I obtained were significantly different from Q-Chem. The SCF and MP2 energies match very well. For N2 (r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4 1.1:. Q-Chem 4.4.1:; MP2 ground-state energy: -109.2579498247; Excitation energy: 8.385211 eV; Excitation energy: 8.385211 eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My inpu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1033
https://github.com/psi4/psi4/issues/1033:691,Energy Efficiency,energy,energy,691,"Hi everyone,. I was testing the ADC(2) code in Psi4 on small molecules and noticed that the results I obtained were significantly different from Q-Chem. The SCF and MP2 energies match very well. For N2 (r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4 1.1:. Q-Chem 4.4.1:; MP2 ground-state energy: -109.2579498247; Excitation energy: 8.385211 eV; Excitation energy: 8.385211 eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My inpu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1033
https://github.com/psi4/psi4/issues/1033:2249,Energy Efficiency,energy,energy,2249," eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My input files for cc-pvdz:. **Psi4:**; molecule { ; 0 1 ; N 0.000000 0.000000 0.000000; N 0.000000 0.000000 1.200000; symmetry c1 ; } ; ; set { ; basis cc-pvdz ; guess sad ; reference rhf ; scf_type pk ; roots_per_irrep [8] ; } ; ; set_num_threads(12) ; energy('adc') . **Q-Chem:**; $molecule ; 0 1 ; N 0.0 0.0 0.0 ; N 0.0 0.0 1.2 ; $end ; ; $rem ; jobtype sp ; method adc(2) ; basis cc-pvdz; mem_total 4000 ; mem_static 100 ; cc_symmetry false ; ee_singlets 8 ; $end",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1033
https://github.com/psi4/psi4/issues/1033:20,Testability,test,testing,20,"Hi everyone,. I was testing the ADC(2) code in Psi4 on small molecules and noticed that the results I obtained were significantly different from Q-Chem. The SCF and MP2 energies match very well. For N2 (r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4 1.1:. Q-Chem 4.4.1:; MP2 ground-state energy: -109.2579498247; Excitation energy: 8.385211 eV; Excitation energy: 8.385211 eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My inpu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1033
https://github.com/psi4/psi4/issues/1033:1193,Usability,simpl,simply,1193,"(r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4 1.1:. Q-Chem 4.4.1:; MP2 ground-state energy: -109.2579498247; Excitation energy: 8.385211 eV; Excitation energy: 8.385211 eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My input files for cc-pvdz:. **Psi4:**; molecule { ; 0 1 ; N 0.000000 0.000000 0.000000; N 0.000000 0.000000 1.200000; symmetry c1 ; } ; ; set { ; basis cc-pvdz ; guess sad ; reference rhf ; scf_type pk ; root",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1033
https://github.com/psi4/psi4/pull/1034:358,Availability,down,downstream,358,"- [x] PSI_API doesn't work for gnu compiler and pointer returning fns whe not at start of decl. Affects `v2rdm_casscf/tests/v2rdm6/input.dat`; - [x] Adds to python module, `psi4.executable` returning the psithon script/binary/executable. Also cleaned up main psi4 namespace by deleting some intermediate strings.; - [x] To the `psi4Config.cmake` consumed by downstream, defines `psi4_SYS_PATH` which is the full path needed to be added to `sys.path` in order to `import psi4`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1034
https://github.com/psi4/psi4/pull/1034:118,Testability,test,tests,118,"- [x] PSI_API doesn't work for gnu compiler and pointer returning fns whe not at start of decl. Affects `v2rdm_casscf/tests/v2rdm6/input.dat`; - [x] Adds to python module, `psi4.executable` returning the psithon script/binary/executable. Also cleaned up main psi4 namespace by deleting some intermediate strings.; - [x] To the `psi4Config.cmake` consumed by downstream, defines `psi4_SYS_PATH` which is the full path needed to be added to `sys.path` in order to `import psi4`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1034
https://github.com/psi4/psi4/pull/1035:336,Safety,detect,detect,336,## Description; gau2grid now provides spherical basis sets in `gaussian` _or_ `cca` ordering. let's make sure we get the right one!. ~**This won't work until a PR comes into g2g and versions/git tags get bumped here.**~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] detect/build the gaussian g2g; - [x] bump min g2g version so the components are there. ## Checklist; - [x] ran quicktests against g2g dgasmith/gau2grid#11; - [x] full tests pass locally. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1035
https://github.com/psi4/psi4/pull/1035:503,Testability,test,tests,503,## Description; gau2grid now provides spherical basis sets in `gaussian` _or_ `cca` ordering. let's make sure we get the right one!. ~**This won't work until a PR comes into g2g and versions/git tags get bumped here.**~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] detect/build the gaussian g2g; - [x] bump min g2g version so the components are there. ## Checklist; - [x] ran quicktests against g2g dgasmith/gau2grid#11; - [x] full tests pass locally. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1035
https://github.com/psi4/psi4/issues/1036:197,Availability,error,error,197,"I installed the latest version of psi4 via conda using the following command: ; ```conda install psi4=1.2rc2 psi4-rt python=3.6 -c psi4/label/dev```. When I try to import psi4, I get the following error:; ```; In [1]: import psi4; ---------------------------------------------------------------------------; ImportError Traceback (most recent call last); ~/anaconda3/lib/python3.6/site-packages/psi4/__init__.py in <module>(); 53 try:; ---> 54 from . import core; 55 except ImportError as err:. ImportError: /home/chayas/anaconda3/lib/python3.6/site-packages/psi4/core.so: undefined symbol: __svml_sincos4_l9. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call last); <ipython-input-1-becb93fbd2ca> in <module>(); ----> 1 import psi4. ~/anaconda3/lib/python3.6/site-packages/psi4/__init__.py in <module>(); 57 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in [DY]LD_LIBRARY_PATH"".format(err)); 58 else:; ---> 59 raise ImportError(""{0}"".format(err)); 60 ; 61 from psi4.core import set_output_file, get_variable, set_variable, get_num_threads, set_num_threads. ImportError: /home/chayas/anaconda3/lib/python3.6/site-packages/psi4/core.so: undefined symbol: __svml_sincos4_l9; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1036
https://github.com/psi4/psi4/issues/1036:2,Deployability,install,installed,2,"I installed the latest version of psi4 via conda using the following command: ; ```conda install psi4=1.2rc2 psi4-rt python=3.6 -c psi4/label/dev```. When I try to import psi4, I get the following error:; ```; In [1]: import psi4; ---------------------------------------------------------------------------; ImportError Traceback (most recent call last); ~/anaconda3/lib/python3.6/site-packages/psi4/__init__.py in <module>(); 53 try:; ---> 54 from . import core; 55 except ImportError as err:. ImportError: /home/chayas/anaconda3/lib/python3.6/site-packages/psi4/core.so: undefined symbol: __svml_sincos4_l9. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call last); <ipython-input-1-becb93fbd2ca> in <module>(); ----> 1 import psi4. ~/anaconda3/lib/python3.6/site-packages/psi4/__init__.py in <module>(); 57 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in [DY]LD_LIBRARY_PATH"".format(err)); 58 else:; ---> 59 raise ImportError(""{0}"".format(err)); 60 ; 61 from psi4.core import set_output_file, get_variable, set_variable, get_num_threads, set_num_threads. ImportError: /home/chayas/anaconda3/lib/python3.6/site-packages/psi4/core.so: undefined symbol: __svml_sincos4_l9; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1036
https://github.com/psi4/psi4/issues/1036:89,Deployability,install,install,89,"I installed the latest version of psi4 via conda using the following command: ; ```conda install psi4=1.2rc2 psi4-rt python=3.6 -c psi4/label/dev```. When I try to import psi4, I get the following error:; ```; In [1]: import psi4; ---------------------------------------------------------------------------; ImportError Traceback (most recent call last); ~/anaconda3/lib/python3.6/site-packages/psi4/__init__.py in <module>(); 53 try:; ---> 54 from . import core; 55 except ImportError as err:. ImportError: /home/chayas/anaconda3/lib/python3.6/site-packages/psi4/core.so: undefined symbol: __svml_sincos4_l9. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call last); <ipython-input-1-becb93fbd2ca> in <module>(); ----> 1 import psi4. ~/anaconda3/lib/python3.6/site-packages/psi4/__init__.py in <module>(); 57 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in [DY]LD_LIBRARY_PATH"".format(err)); 58 else:; ---> 59 raise ImportError(""{0}"".format(err)); 60 ; 61 from psi4.core import set_output_file, get_variable, set_variable, get_num_threads, set_num_threads. ImportError: /home/chayas/anaconda3/lib/python3.6/site-packages/psi4/core.so: undefined symbol: __svml_sincos4_l9; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1036
https://github.com/psi4/psi4/pull/1037:326,Integrability,interface,interface,326,## Description; fix up simint and erd. ~**Contains debug printing which should be removed before final merge**~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] stops if you try to build simint w/Intel2018; - [x] decouples simint and erd to reveal broken erd interface; - [x] passes extra flags the absence of which can lead to empty mangling header; - [ ] fix erd interface. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1037
https://github.com/psi4/psi4/pull/1037:432,Integrability,interface,interface,432,## Description; fix up simint and erd. ~**Contains debug printing which should be removed before final merge**~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] stops if you try to build simint w/Intel2018; - [x] decouples simint and erd to reveal broken erd interface; - [x] passes extra flags the absence of which can lead to empty mangling header; - [ ] fix erd interface. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1037
https://github.com/psi4/psi4/pull/1037:463,Testability,Test,Tests,463,## Description; fix up simint and erd. ~**Contains debug printing which should be removed before final merge**~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] stops if you try to build simint w/Intel2018; - [x] decouples simint and erd to reveal broken erd interface; - [x] passes extra flags the absence of which can lead to empty mangling header; - [ ] fix erd interface. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1037
https://github.com/psi4/psi4/pull/1037:537,Testability,test,tests,537,## Description; fix up simint and erd. ~**Contains debug printing which should be removed before final merge**~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] stops if you try to build simint w/Intel2018; - [x] decouples simint and erd to reveal broken erd interface; - [x] passes extra flags the absence of which can lead to empty mangling header; - [ ] fix erd interface. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1037
https://github.com/psi4/psi4/pull/1037:628,Testability,test,tests,628,## Description; fix up simint and erd. ~**Contains debug printing which should be removed before final merge**~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] stops if you try to build simint w/Intel2018; - [x] decouples simint and erd to reveal broken erd interface; - [x] passes extra flags the absence of which can lead to empty mangling header; - [ ] fix erd interface. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1037
https://github.com/psi4/psi4/issues/1038:1615,Availability,Error,Error,1615,"test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 23.66 sec; ----------------------------------------------------------; Test Failed.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:1652,Availability,Error,Error,1652,"test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 23.66 sec; ----------------------------------------------------------; Test Failed.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:11,Deployability,install,install,11,"Hello, . I install psi4 from github in Ubuntu 16.04 with most recent version of intel MKL library, then I test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of outp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:1212,Energy Efficiency,energy,energy,1212,"test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 23.66 sec; ----------------------------------------------------------; Test Failed.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:1238,Energy Efficiency,energy,energy,1238,"test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 23.66 sec; ----------------------------------------------------------; Test Failed.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:106,Testability,test,test,106,"Hello, . I install psi4 from github in Ubuntu 16.04 with most recent version of intel MKL library, then I test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of outp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:136,Testability,test,test,136,"Hello, . I install psi4 from github in Ubuntu 16.04 with most recent version of intel MKL library, then I test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of outp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:214,Testability,log,log,214,"Hello, . I install psi4 from github in Ubuntu 16.04 with most recent version of intel MKL library, then I test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of outp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:244,Testability,Test,Testing,244,"Hello, . I install psi4 from github in Ubuntu 16.04 with most recent version of intel MKL library, then I test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of outp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:277,Testability,Test,Test,277,"Hello, . I install psi4 from github in Ubuntu 16.04 with most recent version of intel MKL library, then I test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of outp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:341,Testability,test,tests,341,"Hello, . I install psi4 from github in Ubuntu 16.04 with most recent version of intel MKL library, then I test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of outp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:371,Testability,test,tests,371,"Hello, . I install psi4 from github in Ubuntu 16.04 with most recent version of intel MKL library, then I test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of outp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:421,Testability,test,testresults,421,"Hello, . I install psi4 from github in Ubuntu 16.04 with most recent version of intel MKL library, then I test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of outp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:433,Testability,log,log,433,"Hello, . I install psi4 from github in Ubuntu 16.04 with most recent version of intel MKL library, then I test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of outp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:485,Testability,test,tests,485,"Hello, . I install psi4 from github in Ubuntu 16.04 with most recent version of intel MKL library, then I test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of outp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:680,Testability,test,tests,680,"Hello, . I install psi4 from github in Ubuntu 16.04 with most recent version of intel MKL library, then I test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of outp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:2006,Testability,Test,Test,2006,"test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 23.66 sec; ----------------------------------------------------------; Test Failed.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/issues/1038:2089,Testability,Test,Test,2089,"test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 23.66 sec; ----------------------------------------------------------; Test Failed.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1038
https://github.com/psi4/psi4/pull/1039:247,Integrability,depend,depends,247,"## Description; Accumulating changes here. ## Todos; * **Developer Interest**; - [x] AddOns: make resp an endorsed plugin; - [x] CMake: fix OMP option name. add `otool -L` parsing; - [x] CMake: refactoring this to psi4-dev, which it approximately depends on. Current is one layer of templating too many. ## Questions; - [x] Name & home of RESP plugin - shall be GH:cdsgroup/resp and `import resp`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1039
https://github.com/psi4/psi4/pull/1039:115,Modifiability,plugin,plugin,115,"## Description; Accumulating changes here. ## Todos; * **Developer Interest**; - [x] AddOns: make resp an endorsed plugin; - [x] CMake: fix OMP option name. add `otool -L` parsing; - [x] CMake: refactoring this to psi4-dev, which it approximately depends on. Current is one layer of templating too many. ## Questions; - [x] Name & home of RESP plugin - shall be GH:cdsgroup/resp and `import resp`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1039
https://github.com/psi4/psi4/pull/1039:194,Modifiability,refactor,refactoring,194,"## Description; Accumulating changes here. ## Todos; * **Developer Interest**; - [x] AddOns: make resp an endorsed plugin; - [x] CMake: fix OMP option name. add `otool -L` parsing; - [x] CMake: refactoring this to psi4-dev, which it approximately depends on. Current is one layer of templating too many. ## Questions; - [x] Name & home of RESP plugin - shall be GH:cdsgroup/resp and `import resp`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1039
https://github.com/psi4/psi4/pull/1039:344,Modifiability,plugin,plugin,344,"## Description; Accumulating changes here. ## Todos; * **Developer Interest**; - [x] AddOns: make resp an endorsed plugin; - [x] CMake: fix OMP option name. add `otool -L` parsing; - [x] CMake: refactoring this to psi4-dev, which it approximately depends on. Current is one layer of templating too many. ## Questions; - [x] Name & home of RESP plugin - shall be GH:cdsgroup/resp and `import resp`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1039
https://github.com/psi4/psi4/pull/1040:176,Testability,test,tester,176,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] adds additional contributors to header for 1.2; - [x] thread tester script was broken when importing from `__init__.pyc`. warn off py2. ## Questions; - [ ] @schiebermc, @mhlechner, @PeterKraus, @hokru, @robashaw If there any any delicate professional or personal reasons why you don't want to appear on the header, or if you want spelling/initials adjusted, please comment to this PR. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1040
https://github.com/psi4/psi4/issues/1041:2220,Availability,down,download,2220,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:3358,Availability,Error,Error,3358,"psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-confi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:4047,Availability,error,errors,4047," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:4373,Availability,Error,Error,4373," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:4509,Availability,Error,Error,4509," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:4580,Availability,Error,Error,4580," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:4695,Availability,error,error,4695," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:2261,Deployability,update,update,2261,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:2300,Deployability,patch,patch,2300,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:2475,Deployability,Release,Release,2475,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:2131,Integrability,depend,dependencies,2131,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:3438,Integrability,message,message,3438,"e C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:2346,Modifiability,config,configure,2346,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:4023,Modifiability,Config,Configuring,4023," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:4282,Modifiability,config,configure,4282," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:4362,Modifiability,config,configure,4362," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:2335,Performance,Perform,Performing,2335,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:2378,Performance,load,loading,2378,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:2394,Performance,cache,cache,2394,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:2469,Performance,cache,cache-Release,2469,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:4721,Performance,load,load,4721," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:68,Safety,detect,detection,68,"I see a lot of changes have been happening recently with the OpenMP detection (#1031) but it's currently broken for me. For the combination of gcc 7.3.0, cmake 3.11.2, and MKL 2018.3.222 (and also with a 2017 version of MKL), I get the following output from cmake:. ```; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- ; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-fopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so""; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""MathOpenMP_LIBRARIES-NOTFOUND;OpenMP::OpenMP_CXX""; Properties for TARGET blas:; blas.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; blas.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; blas.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:2690,Safety,Detect,Detecting,2690,"hOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/Target",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:2724,Safety,Detect,Detecting,2724,"hOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/Target",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:2765,Safety,Detect,Detecting,2765,"hOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/Target",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:2798,Safety,Detect,Detecting,2798,"hOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/Target",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:2945,Safety,Detect,Detecting,2945,"hOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/Target",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:2981,Safety,Detect,Detecting,2981,"hOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/Target",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:3024,Safety,Detect,Detecting,3024,"hOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/Target",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:3059,Safety,Detect,Detecting,3059,"hOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/Target",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:3168,Safety,Detect,Detecting,3168,"hOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/Target",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:4168,Testability,log,log,4168," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/issues/1041:4799,Testability,test,test,4799," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1041
https://github.com/psi4/psi4/pull/1042:64,Integrability,wrap,wrapper,64,## Description; Allows optking to take gradients from the nbody wrapper. Fix VMFC gradient and Hessian and CP total data. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Connect optking with nbody gradient.; - [x] Add VMFC gradient and Hessian.; - [x] Correct CP-corrected total data.; - [x] Fix a few bugs.; - [x] Add electrostatic embedding.; - [x] Add multi-level many-body expansion. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1042
https://github.com/psi4/psi4/pull/1042:475,Testability,Test,Tests,475,## Description; Allows optking to take gradients from the nbody wrapper. Fix VMFC gradient and Hessian and CP total data. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Connect optking with nbody gradient.; - [x] Add VMFC gradient and Hessian.; - [x] Correct CP-corrected total data.; - [x] Fix a few bugs.; - [x] Add electrostatic embedding.; - [x] Add multi-level many-body expansion. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1042
https://github.com/psi4/psi4/pull/1042:549,Testability,test,tests,549,## Description; Allows optking to take gradients from the nbody wrapper. Fix VMFC gradient and Hessian and CP total data. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Connect optking with nbody gradient.; - [x] Add VMFC gradient and Hessian.; - [x] Correct CP-corrected total data.; - [x] Fix a few bugs.; - [x] Add electrostatic embedding.; - [x] Add multi-level many-body expansion. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1042
https://github.com/psi4/psi4/pull/1042:640,Testability,test,tests,640,## Description; Allows optking to take gradients from the nbody wrapper. Fix VMFC gradient and Hessian and CP total data. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Connect optking with nbody gradient.; - [x] Add VMFC gradient and Hessian.; - [x] Correct CP-corrected total data.; - [x] Fix a few bugs.; - [x] Add electrostatic embedding.; - [x] Add multi-level many-body expansion. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1042
https://github.com/psi4/psi4/pull/1043:353,Availability,error,error,353,"## Description; As it turns out I need these for an upcoming project so I started looking into them. This was quite a hurdle with @andysim rederiving the equations and worked on this in parallel. In the end a simple line fix in `eribase.cc` would have fixed this. There are quite a few simplifications that were due to desperation of trying to find the error. These can be removed, but I think this enhances the clarity of the GradDFJK code. Happy to go either way. Fixes #867 . Psi4NumPy script can be found [here](https://gist.github.com/dgasmith/999f5a100e38968457898ecb1e2c22fe). ## Todos; - [x] UKS Gradients need re-fixing. Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Enables range-seperated gradients for density fitting JK objects. ## Questions; - [x] @andysim @jturney Are the `eribase.cc` tweaks fine?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1043
https://github.com/psi4/psi4/pull/1043:723,Deployability,Release,Release,723,"## Description; As it turns out I need these for an upcoming project so I started looking into them. This was quite a hurdle with @andysim rederiving the equations and worked on this in parallel. In the end a simple line fix in `eribase.cc` would have fixed this. There are quite a few simplifications that were due to desperation of trying to find the error. These can be removed, but I think this enhances the clarity of the GradDFJK code. Happy to go either way. Fixes #867 . Psi4NumPy script can be found [here](https://gist.github.com/dgasmith/999f5a100e38968457898ecb1e2c22fe). ## Todos; - [x] UKS Gradients need re-fixing. Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Enables range-seperated gradients for density fitting JK objects. ## Questions; - [x] @andysim @jturney Are the `eribase.cc` tweaks fine?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1043
https://github.com/psi4/psi4/pull/1043:399,Modifiability,enhance,enhances,399,"## Description; As it turns out I need these for an upcoming project so I started looking into them. This was quite a hurdle with @andysim rederiving the equations and worked on this in parallel. In the end a simple line fix in `eribase.cc` would have fixed this. There are quite a few simplifications that were due to desperation of trying to find the error. These can be removed, but I think this enhances the clarity of the GradDFJK code. Happy to go either way. Fixes #867 . Psi4NumPy script can be found [here](https://gist.github.com/dgasmith/999f5a100e38968457898ecb1e2c22fe). ## Todos; - [x] UKS Gradients need re-fixing. Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Enables range-seperated gradients for density fitting JK objects. ## Questions; - [x] @andysim @jturney Are the `eribase.cc` tweaks fine?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1043
https://github.com/psi4/psi4/pull/1043:209,Usability,simpl,simple,209,"## Description; As it turns out I need these for an upcoming project so I started looking into them. This was quite a hurdle with @andysim rederiving the equations and worked on this in parallel. In the end a simple line fix in `eribase.cc` would have fixed this. There are quite a few simplifications that were due to desperation of trying to find the error. These can be removed, but I think this enhances the clarity of the GradDFJK code. Happy to go either way. Fixes #867 . Psi4NumPy script can be found [here](https://gist.github.com/dgasmith/999f5a100e38968457898ecb1e2c22fe). ## Todos; - [x] UKS Gradients need re-fixing. Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Enables range-seperated gradients for density fitting JK objects. ## Questions; - [x] @andysim @jturney Are the `eribase.cc` tweaks fine?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1043
https://github.com/psi4/psi4/pull/1043:286,Usability,simpl,simplifications,286,"## Description; As it turns out I need these for an upcoming project so I started looking into them. This was quite a hurdle with @andysim rederiving the equations and worked on this in parallel. In the end a simple line fix in `eribase.cc` would have fixed this. There are quite a few simplifications that were due to desperation of trying to find the error. These can be removed, but I think this enhances the clarity of the GradDFJK code. Happy to go either way. Fixes #867 . Psi4NumPy script can be found [here](https://gist.github.com/dgasmith/999f5a100e38968457898ecb1e2c22fe). ## Todos; - [x] UKS Gradients need re-fixing. Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Enables range-seperated gradients for density fitting JK objects. ## Questions; - [x] @andysim @jturney Are the `eribase.cc` tweaks fine?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1043
https://github.com/psi4/psi4/pull/1044:337,Availability,error,errors,337,## Description; Docs cleanup. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] allows building docs w/o psi-sphinx-theme (though you lose psivar indexing); - [x] makes sure all the tests (incl. psiapi/json) get copied to samples; - [x] fixes up misc. options-referencing errors. ## Checklist; - [x] built with alabaster sphinx theme. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1044
https://github.com/psi4/psi4/pull/1044:247,Testability,test,tests,247,## Description; Docs cleanup. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] allows building docs w/o psi-sphinx-theme (though you lose psivar indexing); - [x] makes sure all the tests (incl. psiapi/json) get copied to samples; - [x] fixes up misc. options-referencing errors. ## Checklist; - [x] built with alabaster sphinx theme. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1044
https://github.com/psi4/psi4/pull/1046:308,Deployability,Release,Release,308,"## Description; This change allows F_DGEMV to be called (when using plugins, for example) without modifying the source code in fnocc/blas.cc and recompiling Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1046
https://github.com/psi4/psi4/pull/1046:68,Modifiability,plugin,plugins,68,"## Description; This change allows F_DGEMV to be called (when using plugins, for example) without modifying the source code in fnocc/blas.cc and recompiling Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1046
https://github.com/psi4/psi4/pull/1046:392,Testability,Test,Tests,392,"## Description; This change allows F_DGEMV to be called (when using plugins, for example) without modifying the source code in fnocc/blas.cc and recompiling Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1046
https://github.com/psi4/psi4/pull/1046:466,Testability,test,tests,466,"## Description; This change allows F_DGEMV to be called (when using plugins, for example) without modifying the source code in fnocc/blas.cc and recompiling Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1046
https://github.com/psi4/psi4/pull/1046:557,Testability,test,tests,557,"## Description; This change allows F_DGEMV to be called (when using plugins, for example) without modifying the source code in fnocc/blas.cc and recompiling Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1046
https://github.com/psi4/psi4/pull/1048:196,Deployability,Release,Release,196,## Description; Raises exception to address #1045. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1048
https://github.com/psi4/psi4/pull/1048:280,Testability,Test,Tests,280,## Description; Raises exception to address #1045. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1048
https://github.com/psi4/psi4/pull/1048:354,Testability,test,tests,354,## Description; Raises exception to address #1045. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1048
https://github.com/psi4/psi4/pull/1048:445,Testability,test,tests,445,## Description; Raises exception to address #1045. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1048
https://github.com/psi4/psi4/pull/1049:126,Modifiability,plugin,plugins,126,## Description; PSI_API for eigsort function in libciomr. ## Todos; Nothing notable... just fixes missing symbol in one of my plugins. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1049
https://github.com/psi4/psi4/pull/1050:16,Deployability,Update,Update,16,## Description. Update to new location of the FCHKWriter - now in core. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Reflect new location of writer so that examples work.; * **User-Facing for Release Notes**; - [ ] Updated documentation so that the example code snippets work. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1050
https://github.com/psi4/psi4/pull/1050:262,Deployability,Release,Release,262,## Description. Update to new location of the FCHKWriter - now in core. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Reflect new location of writer so that examples work.; * **User-Facing for Release Notes**; - [ ] Updated documentation so that the example code snippets work. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1050
https://github.com/psi4/psi4/pull/1050:285,Deployability,Update,Updated,285,## Description. Update to new location of the FCHKWriter - now in core. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Reflect new location of writer so that examples work.; * **User-Facing for Release Notes**; - [ ] Updated documentation so that the example code snippets work. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1050
https://github.com/psi4/psi4/issues/1051:75,Availability,error,error,75,"Hi, this is more of a question than an issue (almost certainly due to user error), but I haven't been able to get too far by reading the documentation. . I am trying to achieve the following using the Psi4 Python API: generate a basis set for a molecule, import a predefined grid into Psi4, and evaluate all the basis functions in a basis set on all grid points. Here's a minimal example of that (`wts.npy` and `pts.npy` are in the attached zip file). ```; def minimal_repro():; basis_set = 'cc-pv5z-jkfit'; mol_desc = '''; C 1.54012679 -1.01667266 0.93163498; C 4.07235980 -0.09826576 -0.02267671; H 1.37950007 -0.71809593 2.97064947; H 0.00000000 0.00000000 0.00000000; H 1.31146993 -3.03678988 0.54991030; H 5.61248659 -1.11682814 0.90706854; H 4.30290639 1.92185147 0.36093769; H 4.23298652 -0.39684249 -2.06169120; '''; p4mol = psi4.geometry(mol_desc). # not sure what this parameter should be set to; delta = 0.1. wts = np.load('wts.npy'); pts = np.load('pts.npy'). basis_set = psi4.core.BasisSet.build(p4mol, 'ORBITAL', basis_set); basis_extents = psi4.core.BasisExtents(basis_set, delta). xs = psi4.core.Vector.from_array(pts[:, 0]); ys = psi4.core.Vector.from_array(pts[:, 1]); zs = psi4.core.Vector.from_array(pts[:, 2]); ws = psi4.core.Vector.from_array(wts). blockopoints = psi4.core.BlockOPoints(xs, ys, zs, ws, basis_extents); max_points = blockopoints.npoints(); max_functions = basis_set.nbf(); funcs = psi4.core.BasisFunctions(basis_set, max_points, max_functions); funcs.compute_functions(blockopoints). vals = np.array(funcs.basis_values()['PHI']). all_zeros = []; for col_idx in range(vals.shape[1]):; if np.allclose(vals[:, col_idx], 0.0):; all_zeros.append(col_idx). print('basis fcns that are all zeros', all_zeros); ```. My question is regarding the `delta` parameter to the `BasisExtents` object. Modulating this parameter seems to change the number of basis functions that evaluate to zero at all grid points. For example, at delta = 0.01, I get:. ```; ('basis fcns that are ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1051
https://github.com/psi4/psi4/issues/1051:929,Performance,load,load,929,"Hi, this is more of a question than an issue (almost certainly due to user error), but I haven't been able to get too far by reading the documentation. . I am trying to achieve the following using the Psi4 Python API: generate a basis set for a molecule, import a predefined grid into Psi4, and evaluate all the basis functions in a basis set on all grid points. Here's a minimal example of that (`wts.npy` and `pts.npy` are in the attached zip file). ```; def minimal_repro():; basis_set = 'cc-pv5z-jkfit'; mol_desc = '''; C 1.54012679 -1.01667266 0.93163498; C 4.07235980 -0.09826576 -0.02267671; H 1.37950007 -0.71809593 2.97064947; H 0.00000000 0.00000000 0.00000000; H 1.31146993 -3.03678988 0.54991030; H 5.61248659 -1.11682814 0.90706854; H 4.30290639 1.92185147 0.36093769; H 4.23298652 -0.39684249 -2.06169120; '''; p4mol = psi4.geometry(mol_desc). # not sure what this parameter should be set to; delta = 0.1. wts = np.load('wts.npy'); pts = np.load('pts.npy'). basis_set = psi4.core.BasisSet.build(p4mol, 'ORBITAL', basis_set); basis_extents = psi4.core.BasisExtents(basis_set, delta). xs = psi4.core.Vector.from_array(pts[:, 0]); ys = psi4.core.Vector.from_array(pts[:, 1]); zs = psi4.core.Vector.from_array(pts[:, 2]); ws = psi4.core.Vector.from_array(wts). blockopoints = psi4.core.BlockOPoints(xs, ys, zs, ws, basis_extents); max_points = blockopoints.npoints(); max_functions = basis_set.nbf(); funcs = psi4.core.BasisFunctions(basis_set, max_points, max_functions); funcs.compute_functions(blockopoints). vals = np.array(funcs.basis_values()['PHI']). all_zeros = []; for col_idx in range(vals.shape[1]):; if np.allclose(vals[:, col_idx], 0.0):; all_zeros.append(col_idx). print('basis fcns that are all zeros', all_zeros); ```. My question is regarding the `delta` parameter to the `BasisExtents` object. Modulating this parameter seems to change the number of basis functions that evaluate to zero at all grid points. For example, at delta = 0.01, I get:. ```; ('basis fcns that are ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1051
https://github.com/psi4/psi4/issues/1051:955,Performance,load,load,955,"Hi, this is more of a question than an issue (almost certainly due to user error), but I haven't been able to get too far by reading the documentation. . I am trying to achieve the following using the Psi4 Python API: generate a basis set for a molecule, import a predefined grid into Psi4, and evaluate all the basis functions in a basis set on all grid points. Here's a minimal example of that (`wts.npy` and `pts.npy` are in the attached zip file). ```; def minimal_repro():; basis_set = 'cc-pv5z-jkfit'; mol_desc = '''; C 1.54012679 -1.01667266 0.93163498; C 4.07235980 -0.09826576 -0.02267671; H 1.37950007 -0.71809593 2.97064947; H 0.00000000 0.00000000 0.00000000; H 1.31146993 -3.03678988 0.54991030; H 5.61248659 -1.11682814 0.90706854; H 4.30290639 1.92185147 0.36093769; H 4.23298652 -0.39684249 -2.06169120; '''; p4mol = psi4.geometry(mol_desc). # not sure what this parameter should be set to; delta = 0.1. wts = np.load('wts.npy'); pts = np.load('pts.npy'). basis_set = psi4.core.BasisSet.build(p4mol, 'ORBITAL', basis_set); basis_extents = psi4.core.BasisExtents(basis_set, delta). xs = psi4.core.Vector.from_array(pts[:, 0]); ys = psi4.core.Vector.from_array(pts[:, 1]); zs = psi4.core.Vector.from_array(pts[:, 2]); ws = psi4.core.Vector.from_array(wts). blockopoints = psi4.core.BlockOPoints(xs, ys, zs, ws, basis_extents); max_points = blockopoints.npoints(); max_functions = basis_set.nbf(); funcs = psi4.core.BasisFunctions(basis_set, max_points, max_functions); funcs.compute_functions(blockopoints). vals = np.array(funcs.basis_values()['PHI']). all_zeros = []; for col_idx in range(vals.shape[1]):; if np.allclose(vals[:, col_idx], 0.0):; all_zeros.append(col_idx). print('basis fcns that are all zeros', all_zeros); ```. My question is regarding the `delta` parameter to the `BasisExtents` object. Modulating this parameter seems to change the number of basis functions that evaluate to zero at all grid points. For example, at delta = 0.01, I get:. ```; ('basis fcns that are ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1051
https://github.com/psi4/psi4/issues/1052:119,Availability,Error,Error,119,"If a user sets the symmetry explicitly and then attempts to perform a finite difference calculation, Psi raises `Fatal Error: User specified point group is not a subgroup of the highest detected point group.` This problem does not occur if the user does not explicitly provide the symmetry. The problem also occurs if `reset_point_group` is used. Example input below. I don't know enough about Psi's symmetry and molecule tech to tell if this is a problem that needs to be fixed findif side or molecule side. If this needs to be fixed findif side, I'll take it for obvious reasons. If not, then if this isn't fixed by the time findif is done, I'll take this anyways. I've had a vendetta against this bug since November. ```; molecule h2o {; symmetry c2v; O; H 1 0.9894093; H 1 0.9894093 2 100.02688; }. set {; basis sto-3g; d_convergence 11; scf_type pk; }. frequencies('scf', dertype=1, return_wfn=True); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1052
https://github.com/psi4/psi4/issues/1052:60,Performance,perform,perform,60,"If a user sets the symmetry explicitly and then attempts to perform a finite difference calculation, Psi raises `Fatal Error: User specified point group is not a subgroup of the highest detected point group.` This problem does not occur if the user does not explicitly provide the symmetry. The problem also occurs if `reset_point_group` is used. Example input below. I don't know enough about Psi's symmetry and molecule tech to tell if this is a problem that needs to be fixed findif side or molecule side. If this needs to be fixed findif side, I'll take it for obvious reasons. If not, then if this isn't fixed by the time findif is done, I'll take this anyways. I've had a vendetta against this bug since November. ```; molecule h2o {; symmetry c2v; O; H 1 0.9894093; H 1 0.9894093 2 100.02688; }. set {; basis sto-3g; d_convergence 11; scf_type pk; }. frequencies('scf', dertype=1, return_wfn=True); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1052
https://github.com/psi4/psi4/issues/1052:186,Safety,detect,detected,186,"If a user sets the symmetry explicitly and then attempts to perform a finite difference calculation, Psi raises `Fatal Error: User specified point group is not a subgroup of the highest detected point group.` This problem does not occur if the user does not explicitly provide the symmetry. The problem also occurs if `reset_point_group` is used. Example input below. I don't know enough about Psi's symmetry and molecule tech to tell if this is a problem that needs to be fixed findif side or molecule side. If this needs to be fixed findif side, I'll take it for obvious reasons. If not, then if this isn't fixed by the time findif is done, I'll take this anyways. I've had a vendetta against this bug since November. ```; molecule h2o {; symmetry c2v; O; H 1 0.9894093; H 1 0.9894093 2 100.02688; }. set {; basis sto-3g; d_convergence 11; scf_type pk; }. frequencies('scf', dertype=1, return_wfn=True); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1052
https://github.com/psi4/psi4/pull/1053:783,Availability,down,downstream,783,"## Description; Fixes up the OpenMP problems. This still needs some tidying, but you can start to take a look. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Mostly this polishes the new OpenMP/Math interface/detection by expanding it to C/CXX/Fortran (thanks, v2rdm, for playing your persistent role of complicating things) and making sure vars are propagated among the externalprojects. Key cmake option is `OpenMP_LIBRARY_DIRS` which is a `;`-sep PATH-like var to search for omp libs if not naturally found. closes #1041 ; - [x] fix a few DISK_DF in driver and add some long-awaited (really, look at the milestone history for that ticket) freq docs in #350 ; - [x] fatal_error's ERD; - [x] bump various upstream/downstream; - [x] get ambit back (can't readily test it except by building plugin). ## Questions; - [x] Roberto and Radovan should look over the CMake. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1053
https://github.com/psi4/psi4/pull/1053:267,Integrability,interface,interface,267,"## Description; Fixes up the OpenMP problems. This still needs some tidying, but you can start to take a look. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Mostly this polishes the new OpenMP/Math interface/detection by expanding it to C/CXX/Fortran (thanks, v2rdm, for playing your persistent role of complicating things) and making sure vars are propagated among the externalprojects. Key cmake option is `OpenMP_LIBRARY_DIRS` which is a `;`-sep PATH-like var to search for omp libs if not naturally found. closes #1041 ; - [x] fix a few DISK_DF in driver and add some long-awaited (really, look at the milestone history for that ticket) freq docs in #350 ; - [x] fatal_error's ERD; - [x] bump various upstream/downstream; - [x] get ambit back (can't readily test it except by building plugin). ## Questions; - [x] Roberto and Radovan should look over the CMake. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1053
https://github.com/psi4/psi4/pull/1053:858,Modifiability,plugin,plugin,858,"## Description; Fixes up the OpenMP problems. This still needs some tidying, but you can start to take a look. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Mostly this polishes the new OpenMP/Math interface/detection by expanding it to C/CXX/Fortran (thanks, v2rdm, for playing your persistent role of complicating things) and making sure vars are propagated among the externalprojects. Key cmake option is `OpenMP_LIBRARY_DIRS` which is a `;`-sep PATH-like var to search for omp libs if not naturally found. closes #1041 ; - [x] fix a few DISK_DF in driver and add some long-awaited (really, look at the milestone history for that ticket) freq docs in #350 ; - [x] fatal_error's ERD; - [x] bump various upstream/downstream; - [x] get ambit back (can't readily test it except by building plugin). ## Questions; - [x] Roberto and Radovan should look over the CMake. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1053
https://github.com/psi4/psi4/pull/1053:277,Safety,detect,detection,277,"## Description; Fixes up the OpenMP problems. This still needs some tidying, but you can start to take a look. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Mostly this polishes the new OpenMP/Math interface/detection by expanding it to C/CXX/Fortran (thanks, v2rdm, for playing your persistent role of complicating things) and making sure vars are propagated among the externalprojects. Key cmake option is `OpenMP_LIBRARY_DIRS` which is a `;`-sep PATH-like var to search for omp libs if not naturally found. closes #1041 ; - [x] fix a few DISK_DF in driver and add some long-awaited (really, look at the milestone history for that ticket) freq docs in #350 ; - [x] fatal_error's ERD; - [x] bump various upstream/downstream; - [x] get ambit back (can't readily test it except by building plugin). ## Questions; - [x] Roberto and Radovan should look over the CMake. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1053
https://github.com/psi4/psi4/pull/1053:831,Testability,test,test,831,"## Description; Fixes up the OpenMP problems. This still needs some tidying, but you can start to take a look. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Mostly this polishes the new OpenMP/Math interface/detection by expanding it to C/CXX/Fortran (thanks, v2rdm, for playing your persistent role of complicating things) and making sure vars are propagated among the externalprojects. Key cmake option is `OpenMP_LIBRARY_DIRS` which is a `;`-sep PATH-like var to search for omp libs if not naturally found. closes #1041 ; - [x] fix a few DISK_DF in driver and add some long-awaited (really, look at the milestone history for that ticket) freq docs in #350 ; - [x] fatal_error's ERD; - [x] bump various upstream/downstream; - [x] get ambit back (can't readily test it except by building plugin). ## Questions; - [x] Roberto and Radovan should look over the CMake. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1053
https://github.com/psi4/psi4/issues/1054:33,Availability,failure,failure,33,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1054
https://github.com/psi4/psi4/issues/1054:504,Performance,optimiz,optimize,504,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1054
https://github.com/psi4/psi4/issues/1054:555,Performance,optimiz,optimize,555,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1054
https://github.com/psi4/psi4/issues/1054:658,Safety,avoid,avoid,658,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1054
https://github.com/psi4/psi4/issues/1054:121,Testability,test,tested,121,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1054
https://github.com/psi4/psi4/issues/1054:169,Testability,test,tested,169,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1054
https://github.com/psi4/psi4/issues/1054:196,Testability,log,log,196,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1054
https://github.com/psi4/psi4/issues/1054:251,Testability,log,log,251,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1054
https://github.com/psi4/psi4/issues/1054:685,Testability,test,tested,685,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1054
https://github.com/psi4/psi4/issues/1054:6,Usability,simpl,simple,6,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1054
https://github.com/psi4/psi4/issues/1055:66,Energy Efficiency,energy,energy,66,"I have seen folks try the following several times:. ```; e, wfn = energy('MP2', return_wfn=True); oeprop(wfn); ```. which will return the HF properties as MP2 densities are costly to compute, the same is true with CCSD and others. To help alleviate confusion I would add a few lines [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L866) in the OEProp compute call that would highlight the name of the density matrix. A line like the following could be appropriate:. ```; if (title_ == """"){; outfile->Printf(""OEProp: No title given, name of density matrix used for the following properties is %s\n"", Da_so_->name().c_str());; }; ```. This should give folks some hint that things may not be as they appear.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1055
https://github.com/psi4/psi4/pull/1056:62,Usability,learn,learned,62,"## Description; I was browsing some MolSSI-tweeted videos and learned about the `codemeta.json` movement. Didn't sound like a bad idea, so here's a start, reformatted from the 1.1 paper. It potentially needs more authors from psi1-psi3 era. ## Questions; - [ ] Do we want this?. ## Checklist; - [x] I did run it against the schema checker https://github.com/codemeta/codemeta/blob/master/codemeta.jsonld. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1056
https://github.com/psi4/psi4/pull/1057:734,Deployability,Release,Release,734,"## Description; The purpose of this PR is to implement the first bits and pieces to connect psi to [i-pi](https://github.com/i-pi/i-pi) to enable molecular dynamics simulations with psi. For instance, it would be possible to carry out path integral molecular dynamics simulations such as [in this reference](https://doi.org/10.1039/C4CP05192K) with psi. It would be great to get a first review of the basic idea in the code and I can add some documentation of the above infrastructure after that as well. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included in `broker.py`; * **User-Facing for Release Notes**; - [ ] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included (but not yet documented yet). ## Questions; - [ ] Is the dynamic dependency to [i-pi](https://github.com/i-pi/i-pi) to setup the interface on runtime fine? Or would you prefer to have the Client side implementation to have fully here in psi as well? If the latter is the case, this has the disadvantage, that the client side might need adjustments with a new version of i-pi, which is why I left the client implementation in i-pi for now. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1057
https://github.com/psi4/psi4/pull/1057:900,Integrability,depend,dependency,900,"## Description; The purpose of this PR is to implement the first bits and pieces to connect psi to [i-pi](https://github.com/i-pi/i-pi) to enable molecular dynamics simulations with psi. For instance, it would be possible to carry out path integral molecular dynamics simulations such as [in this reference](https://doi.org/10.1039/C4CP05192K) with psi. It would be great to get a first review of the basic idea in the code and I can add some documentation of the above infrastructure after that as well. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included in `broker.py`; * **User-Facing for Release Notes**; - [ ] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included (but not yet documented yet). ## Questions; - [ ] Is the dynamic dependency to [i-pi](https://github.com/i-pi/i-pi) to setup the interface on runtime fine? Or would you prefer to have the Client side implementation to have fully here in psi as well? If the latter is the case, this has the disadvantage, that the client side might need adjustments with a new version of i-pi, which is why I left the client implementation in i-pi for now. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1057
https://github.com/psi4/psi4/pull/1057:964,Integrability,interface,interface,964,"## Description; The purpose of this PR is to implement the first bits and pieces to connect psi to [i-pi](https://github.com/i-pi/i-pi) to enable molecular dynamics simulations with psi. For instance, it would be possible to carry out path integral molecular dynamics simulations such as [in this reference](https://doi.org/10.1039/C4CP05192K) with psi. It would be great to get a first review of the basic idea in the code and I can add some documentation of the above infrastructure after that as well. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included in `broker.py`; * **User-Facing for Release Notes**; - [ ] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included (but not yet documented yet). ## Questions; - [ ] Is the dynamic dependency to [i-pi](https://github.com/i-pi/i-pi) to setup the interface on runtime fine? Or would you prefer to have the Client side implementation to have fully here in psi as well? If the latter is the case, this has the disadvantage, that the client side might need adjustments with a new version of i-pi, which is why I left the client implementation in i-pi for now. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1057
https://github.com/psi4/psi4/pull/1057:1294,Testability,Test,Tests,1294,"## Description; The purpose of this PR is to implement the first bits and pieces to connect psi to [i-pi](https://github.com/i-pi/i-pi) to enable molecular dynamics simulations with psi. For instance, it would be possible to carry out path integral molecular dynamics simulations such as [in this reference](https://doi.org/10.1039/C4CP05192K) with psi. It would be great to get a first review of the basic idea in the code and I can add some documentation of the above infrastructure after that as well. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included in `broker.py`; * **User-Facing for Release Notes**; - [ ] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included (but not yet documented yet). ## Questions; - [ ] Is the dynamic dependency to [i-pi](https://github.com/i-pi/i-pi) to setup the interface on runtime fine? Or would you prefer to have the Client side implementation to have fully here in psi as well? If the latter is the case, this has the disadvantage, that the client side might need adjustments with a new version of i-pi, which is why I left the client implementation in i-pi for now. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1057
https://github.com/psi4/psi4/pull/1057:1368,Testability,test,tests,1368,"## Description; The purpose of this PR is to implement the first bits and pieces to connect psi to [i-pi](https://github.com/i-pi/i-pi) to enable molecular dynamics simulations with psi. For instance, it would be possible to carry out path integral molecular dynamics simulations such as [in this reference](https://doi.org/10.1039/C4CP05192K) with psi. It would be great to get a first review of the basic idea in the code and I can add some documentation of the above infrastructure after that as well. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included in `broker.py`; * **User-Facing for Release Notes**; - [ ] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included (but not yet documented yet). ## Questions; - [ ] Is the dynamic dependency to [i-pi](https://github.com/i-pi/i-pi) to setup the interface on runtime fine? Or would you prefer to have the Client side implementation to have fully here in psi as well? If the latter is the case, this has the disadvantage, that the client side might need adjustments with a new version of i-pi, which is why I left the client implementation in i-pi for now. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1057
https://github.com/psi4/psi4/pull/1057:1459,Testability,test,tests,1459,"## Description; The purpose of this PR is to implement the first bits and pieces to connect psi to [i-pi](https://github.com/i-pi/i-pi) to enable molecular dynamics simulations with psi. For instance, it would be possible to carry out path integral molecular dynamics simulations such as [in this reference](https://doi.org/10.1039/C4CP05192K) with psi. It would be great to get a first review of the basic idea in the code and I can add some documentation of the above infrastructure after that as well. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included in `broker.py`; * **User-Facing for Release Notes**; - [ ] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included (but not yet documented yet). ## Questions; - [ ] Is the dynamic dependency to [i-pi](https://github.com/i-pi/i-pi) to setup the interface on runtime fine? Or would you prefer to have the Client side implementation to have fully here in psi as well? If the latter is the case, this has the disadvantage, that the client side might need adjustments with a new version of i-pi, which is why I left the client implementation in i-pi for now. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1057
https://github.com/psi4/psi4/issues/1058:335,Availability,down,download,335,"It's been noticed that a coefficient has changed in EMSL (a polarization D 6-311G(2d,p) for Fluorine from 2.396 to 3.5) since the psi basis library was formed. It would be good to know if there are others. 1) go to https://bse.pnl.gov/bse/portal and filter on ""polarization""; 2) for the 7 partial basis set starting ""6-31"" or ""Pople"", download them in Gaussian94 format (if their ""Last Modified"" date is after August 2010).; 3) For files in https://github.com/psi4/psi4/tree/master/psi4/share/psi4/basis/primitives starting with ""polarization-631"", find the analogous polarization pattern (e.g., EMSL ""6-311G* Polarization"" matches https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/primitives/polarization-6311g-_d_.gbs) and through `diff` or the script `diff_gbs.py`, check if there are any changes Psi4 needs to make.; - Note: there's more files in basis/primitives than from EMSL. Don't worry about the cross-terms like (3df, p).; - Note: because of how the files are structures, there may be differences of H/He present or absent. So long as exponents/coefficients aren't changing, don't worry about it.; 4) Report changed coeff/exp back here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1058
https://github.com/psi4/psi4/pull/1061:715,Deployability,Release,Release,715,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1061
https://github.com/psi4/psi4/pull/1061:1052,Deployability,release,release,1052,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1061
https://github.com/psi4/psi4/pull/1061:601,Integrability,interface,interface,601,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1061
https://github.com/psi4/psi4/pull/1061:808,Integrability,interface,interface,808,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1061
https://github.com/psi4/psi4/pull/1061:282,Modifiability,inherit,inheritance,282,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1061
https://github.com/psi4/psi4/pull/1061:431,Modifiability,inherit,inherits,431,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1061
https://github.com/psi4/psi4/pull/1061:965,Modifiability,inherit,inheritance,965,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1061
https://github.com/psi4/psi4/pull/1061:45,Security,expose,expose,45,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1061
https://github.com/psi4/psi4/pull/1061:80,Security,access,access,80,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1061
https://github.com/psi4/psi4/pull/1061:495,Security,access,access,495,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1061
https://github.com/psi4/psi4/pull/1061:1203,Testability,Test,Tests,1203,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1061
https://github.com/psi4/psi4/pull/1061:1322,Testability,test,tests,1322,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1061
https://github.com/psi4/psi4/pull/1061:1413,Testability,test,tests,1413,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1061
https://github.com/psi4/psi4/issues/1062:63,Performance,Optimiz,OptimizationConvergenceError,63,"Could you implement a specific SCFConvergenceErrors similar to OptimizationConvergenceError such that the exception provides access to the wfn or the geometry of the input?. This would allow users to catch the exception and retry the SCF with different options.; Something like this:; try:; optE, optWfn = optimize(optMethod, return_wfn=True); except SCFConvergenceError as e:; optWfn = e.wfn; # let try again:; optE, optWfn = optimize(optMethod, return_wfn=True); print(""SCF did not converge"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1062
https://github.com/psi4/psi4/issues/1062:306,Performance,optimiz,optimize,306,"Could you implement a specific SCFConvergenceErrors similar to OptimizationConvergenceError such that the exception provides access to the wfn or the geometry of the input?. This would allow users to catch the exception and retry the SCF with different options.; Something like this:; try:; optE, optWfn = optimize(optMethod, return_wfn=True); except SCFConvergenceError as e:; optWfn = e.wfn; # let try again:; optE, optWfn = optimize(optMethod, return_wfn=True); print(""SCF did not converge"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1062
https://github.com/psi4/psi4/issues/1062:427,Performance,optimiz,optimize,427,"Could you implement a specific SCFConvergenceErrors similar to OptimizationConvergenceError such that the exception provides access to the wfn or the geometry of the input?. This would allow users to catch the exception and retry the SCF with different options.; Something like this:; try:; optE, optWfn = optimize(optMethod, return_wfn=True); except SCFConvergenceError as e:; optWfn = e.wfn; # let try again:; optE, optWfn = optimize(optMethod, return_wfn=True); print(""SCF did not converge"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1062
https://github.com/psi4/psi4/issues/1062:125,Security,access,access,125,"Could you implement a specific SCFConvergenceErrors similar to OptimizationConvergenceError such that the exception provides access to the wfn or the geometry of the input?. This would allow users to catch the exception and retry the SCF with different options.; Something like this:; try:; optE, optWfn = optimize(optMethod, return_wfn=True); except SCFConvergenceError as e:; optWfn = e.wfn; # let try again:; optE, optWfn = optimize(optMethod, return_wfn=True); print(""SCF did not converge"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1062
https://github.com/psi4/psi4/issues/1063:207,Availability,down,downstream,207,(Rather than adding to and probably reopening #1041): v2rdm_casscf suffers from the same problem that gpu_dfcc did.; It needs `-DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}` adding to CMAKE_ARGS in `external/downstream/gpu_dfcc/CMakeLists.txt` for it to build within a psi4 build.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1063
https://github.com/psi4/psi4/issues/1064:727,Deployability,pipeline,pipelines,727,"Psi4 changes directory if **DFT-D3** is used:; ```python; import os; import psi4. print(psi4.__version__). print(os.getcwd()). psi4.set_output_file('/dev/null'); psi4.geometry('He 0 0 0'); psi4.energy('PBE-D3/3-21G'). print(os.getcwd()); ```; ```bash; $ python test1.py ; 1.2rc3; /shared/raimis/debug/psi4; /home/tmp/psi.15136..dftd3.a9f60419; ```; This does not happen if **DFT-D2** is used:; ```python; import os; import psi4. print(psi4.__version__). print(os.getcwd()). psi4.set_output_file('/dev/null'); psi4.geometry('He 0 0 0'); psi4.energy('PBE-D2/3-21G'). print(os.getcwd()); ```; ```bash; $ python test2.py ; 1.2rc3; /shared/raimis/debug/psi4; /shared/raimis/debug/psi4; ```; A small detail, but it is messing up our pipelines. And it is similar to #817.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1064
https://github.com/psi4/psi4/issues/1064:194,Energy Efficiency,energy,energy,194,"Psi4 changes directory if **DFT-D3** is used:; ```python; import os; import psi4. print(psi4.__version__). print(os.getcwd()). psi4.set_output_file('/dev/null'); psi4.geometry('He 0 0 0'); psi4.energy('PBE-D3/3-21G'). print(os.getcwd()); ```; ```bash; $ python test1.py ; 1.2rc3; /shared/raimis/debug/psi4; /home/tmp/psi.15136..dftd3.a9f60419; ```; This does not happen if **DFT-D2** is used:; ```python; import os; import psi4. print(psi4.__version__). print(os.getcwd()). psi4.set_output_file('/dev/null'); psi4.geometry('He 0 0 0'); psi4.energy('PBE-D2/3-21G'). print(os.getcwd()); ```; ```bash; $ python test2.py ; 1.2rc3; /shared/raimis/debug/psi4; /shared/raimis/debug/psi4; ```; A small detail, but it is messing up our pipelines. And it is similar to #817.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1064
https://github.com/psi4/psi4/issues/1064:541,Energy Efficiency,energy,energy,541,"Psi4 changes directory if **DFT-D3** is used:; ```python; import os; import psi4. print(psi4.__version__). print(os.getcwd()). psi4.set_output_file('/dev/null'); psi4.geometry('He 0 0 0'); psi4.energy('PBE-D3/3-21G'). print(os.getcwd()); ```; ```bash; $ python test1.py ; 1.2rc3; /shared/raimis/debug/psi4; /home/tmp/psi.15136..dftd3.a9f60419; ```; This does not happen if **DFT-D2** is used:; ```python; import os; import psi4. print(psi4.__version__). print(os.getcwd()). psi4.set_output_file('/dev/null'); psi4.geometry('He 0 0 0'); psi4.energy('PBE-D2/3-21G'). print(os.getcwd()); ```; ```bash; $ python test2.py ; 1.2rc3; /shared/raimis/debug/psi4; /shared/raimis/debug/psi4; ```; A small detail, but it is messing up our pipelines. And it is similar to #817.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1064
https://github.com/psi4/psi4/pull/1065:372,Testability,Test,Tests,372,"## Description; This is part of *Psi4* porting to *Windows* (https://github.com/psi4/psi4/issues/933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] MSVC does not support non-standard `not`, `and`, `or`, `xor` operators, which are replaced with `!`, `&&`, `||`, `^`, respectively. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1065
https://github.com/psi4/psi4/pull/1065:448,Testability,test,tests,448,"## Description; This is part of *Psi4* porting to *Windows* (https://github.com/psi4/psi4/issues/933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] MSVC does not support non-standard `not`, `and`, `or`, `xor` operators, which are replaced with `!`, `&&`, `||`, `^`, respectively. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1065
https://github.com/psi4/psi4/pull/1065:539,Testability,test,tests,539,"## Description; This is part of *Psi4* porting to *Windows* (https://github.com/psi4/psi4/issues/933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] MSVC does not support non-standard `not`, `and`, `or`, `xor` operators, which are replaced with `!`, `&&`, `||`, `^`, respectively. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1065
https://github.com/psi4/psi4/pull/1066:186,Testability,test,tests,186,## Todos; - [x] fluorine 6-311G polarization exp 2.396 --> 3.5; - [x] add a bit to main README; - [x] fill in missing output.ref-s. ## Checklist; - [x] [All or relevant fraction of full tests run]. ## Status; ### review first two commits. skip the third -- it's `output.ref`s. - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1066
https://github.com/psi4/psi4/pull/1067:301,Modifiability,variab,variables,301,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove unnecessary headers; - [x] Match function signatures; - [x] Add and remove `return`; - [x] Fix uninitialized local variables. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1067
https://github.com/psi4/psi4/pull/1067:334,Testability,Test,Tests,334,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove unnecessary headers; - [x] Match function signatures; - [x] Add and remove `return`; - [x] Fix uninitialized local variables. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1067
https://github.com/psi4/psi4/pull/1067:410,Testability,test,tests,410,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove unnecessary headers; - [x] Match function signatures; - [x] Add and remove `return`; - [x] Fix uninitialized local variables. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1067
https://github.com/psi4/psi4/pull/1067:501,Testability,test,tests,501,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove unnecessary headers; - [x] Match function signatures; - [x] Add and remove `return`; - [x] Fix uninitialized local variables. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1067
https://github.com/psi4/psi4/pull/1068:273,Deployability,Release,Release,273,## Description; Makes print statement more clearly communicate to user which density matrix is being employed. c closes #1055 ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1068
https://github.com/psi4/psi4/pull/1068:357,Testability,Test,Tests,357,## Description; Makes print statement more clearly communicate to user which density matrix is being employed. c closes #1055 ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1068
https://github.com/psi4/psi4/pull/1068:431,Testability,test,tests,431,## Description; Makes print statement more clearly communicate to user which density matrix is being employed. c closes #1055 ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1068
https://github.com/psi4/psi4/pull/1068:522,Testability,test,tests,522,## Description; Makes print statement more clearly communicate to user which density matrix is being employed. c closes #1055 ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1068
https://github.com/psi4/psi4/pull/1068:43,Usability,clear,clearly,43,## Description; Makes print statement more clearly communicate to user which density matrix is being employed. c closes #1055 ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1068
https://github.com/psi4/psi4/pull/1069:343,Testability,Test,Tests,343,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing headers; - [x] Non-constant length arrays replaced with `std::vector`; - [x] Remove a unimplemented method; - [x] `and` --> `&&`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1069
https://github.com/psi4/psi4/pull/1069:419,Testability,test,tests,419,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing headers; - [x] Non-constant length arrays replaced with `std::vector`; - [x] Remove a unimplemented method; - [x] `and` --> `&&`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1069
https://github.com/psi4/psi4/pull/1069:510,Testability,test,tests,510,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing headers; - [x] Non-constant length arrays replaced with `std::vector`; - [x] Remove a unimplemented method; - [x] `and` --> `&&`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1069
https://github.com/psi4/psi4/pull/1070:115,Availability,failure,failure,115,"## Description; Test case cc46 was removed after it was noticed to be failing (#1002 ), it was determined that the failure was not indicating a bug, so it was temporarily removed so pre-release pakages wouldn't be reporting a failure. This PR reactivates the test with modifications so that it is passing again. . * **Developer Interest**; - cc46 checks GS and excited state Dipole/Quadrupole components against reference values generated by psi. ; - Was failing because calling `properties=['oscillator_strength']` prior to #995 was the only way to force ccdensity to make a call to OEProp for each excited state. Post #995 this does not compute one electron properties for excited states so the computed values were all zero.; - Correcting the driver call `properties=['dipole','quadrupole']` is not enough; - The test values were generated using `oscillator_strength` which triggers EOM/Lambda convergence thresholds to be reduced.; - The computed values are 'too good' and comparison with the older reference values fails in the 4th decimal place for some quadrupole components of excited states.; - *Final Solution*; - I dropped the convergence thresholds manually in the test-input to what the were set to by the driver at the time that the reference data was generated. . Side Note:; - Personally I don't think the savings achieved by this over ride of the convergence thresholds are significant enough to justify potentially confusing situations. ; - If a user sets those values manually and requested `oscilator_strength` and/or `rotational_strength` the user-set values are overridden.; - Commenting out the [relevant lines](https://github.com/psi4/psi4/blob/72c30b536201a25171fa6426c8f319e2abdbb1cb/psi4/driver/procrouting/proc.py#L2647-L2649) all cc tests still pass. Including this one (with my changes). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for rev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1070
https://github.com/psi4/psi4/pull/1070:226,Availability,failure,failure,226,"## Description; Test case cc46 was removed after it was noticed to be failing (#1002 ), it was determined that the failure was not indicating a bug, so it was temporarily removed so pre-release pakages wouldn't be reporting a failure. This PR reactivates the test with modifications so that it is passing again. . * **Developer Interest**; - cc46 checks GS and excited state Dipole/Quadrupole components against reference values generated by psi. ; - Was failing because calling `properties=['oscillator_strength']` prior to #995 was the only way to force ccdensity to make a call to OEProp for each excited state. Post #995 this does not compute one electron properties for excited states so the computed values were all zero.; - Correcting the driver call `properties=['dipole','quadrupole']` is not enough; - The test values were generated using `oscillator_strength` which triggers EOM/Lambda convergence thresholds to be reduced.; - The computed values are 'too good' and comparison with the older reference values fails in the 4th decimal place for some quadrupole components of excited states.; - *Final Solution*; - I dropped the convergence thresholds manually in the test-input to what the were set to by the driver at the time that the reference data was generated. . Side Note:; - Personally I don't think the savings achieved by this over ride of the convergence thresholds are significant enough to justify potentially confusing situations. ; - If a user sets those values manually and requested `oscilator_strength` and/or `rotational_strength` the user-set values are overridden.; - Commenting out the [relevant lines](https://github.com/psi4/psi4/blob/72c30b536201a25171fa6426c8f319e2abdbb1cb/psi4/driver/procrouting/proc.py#L2647-L2649) all cc tests still pass. Including this one (with my changes). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for rev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1070
https://github.com/psi4/psi4/pull/1070:186,Deployability,release,release,186,"## Description; Test case cc46 was removed after it was noticed to be failing (#1002 ), it was determined that the failure was not indicating a bug, so it was temporarily removed so pre-release pakages wouldn't be reporting a failure. This PR reactivates the test with modifications so that it is passing again. . * **Developer Interest**; - cc46 checks GS and excited state Dipole/Quadrupole components against reference values generated by psi. ; - Was failing because calling `properties=['oscillator_strength']` prior to #995 was the only way to force ccdensity to make a call to OEProp for each excited state. Post #995 this does not compute one electron properties for excited states so the computed values were all zero.; - Correcting the driver call `properties=['dipole','quadrupole']` is not enough; - The test values were generated using `oscillator_strength` which triggers EOM/Lambda convergence thresholds to be reduced.; - The computed values are 'too good' and comparison with the older reference values fails in the 4th decimal place for some quadrupole components of excited states.; - *Final Solution*; - I dropped the convergence thresholds manually in the test-input to what the were set to by the driver at the time that the reference data was generated. . Side Note:; - Personally I don't think the savings achieved by this over ride of the convergence thresholds are significant enough to justify potentially confusing situations. ; - If a user sets those values manually and requested `oscilator_strength` and/or `rotational_strength` the user-set values are overridden.; - Commenting out the [relevant lines](https://github.com/psi4/psi4/blob/72c30b536201a25171fa6426c8f319e2abdbb1cb/psi4/driver/procrouting/proc.py#L2647-L2649) all cc tests still pass. Including this one (with my changes). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for rev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1070
https://github.com/psi4/psi4/pull/1070:926,Energy Efficiency,reduce,reduced,926,"## Description; Test case cc46 was removed after it was noticed to be failing (#1002 ), it was determined that the failure was not indicating a bug, so it was temporarily removed so pre-release pakages wouldn't be reporting a failure. This PR reactivates the test with modifications so that it is passing again. . * **Developer Interest**; - cc46 checks GS and excited state Dipole/Quadrupole components against reference values generated by psi. ; - Was failing because calling `properties=['oscillator_strength']` prior to #995 was the only way to force ccdensity to make a call to OEProp for each excited state. Post #995 this does not compute one electron properties for excited states so the computed values were all zero.; - Correcting the driver call `properties=['dipole','quadrupole']` is not enough; - The test values were generated using `oscillator_strength` which triggers EOM/Lambda convergence thresholds to be reduced.; - The computed values are 'too good' and comparison with the older reference values fails in the 4th decimal place for some quadrupole components of excited states.; - *Final Solution*; - I dropped the convergence thresholds manually in the test-input to what the were set to by the driver at the time that the reference data was generated. . Side Note:; - Personally I don't think the savings achieved by this over ride of the convergence thresholds are significant enough to justify potentially confusing situations. ; - If a user sets those values manually and requested `oscilator_strength` and/or `rotational_strength` the user-set values are overridden.; - Commenting out the [relevant lines](https://github.com/psi4/psi4/blob/72c30b536201a25171fa6426c8f319e2abdbb1cb/psi4/driver/procrouting/proc.py#L2647-L2649) all cc tests still pass. Including this one (with my changes). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for rev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1070
https://github.com/psi4/psi4/pull/1070:16,Testability,Test,Test,16,"## Description; Test case cc46 was removed after it was noticed to be failing (#1002 ), it was determined that the failure was not indicating a bug, so it was temporarily removed so pre-release pakages wouldn't be reporting a failure. This PR reactivates the test with modifications so that it is passing again. . * **Developer Interest**; - cc46 checks GS and excited state Dipole/Quadrupole components against reference values generated by psi. ; - Was failing because calling `properties=['oscillator_strength']` prior to #995 was the only way to force ccdensity to make a call to OEProp for each excited state. Post #995 this does not compute one electron properties for excited states so the computed values were all zero.; - Correcting the driver call `properties=['dipole','quadrupole']` is not enough; - The test values were generated using `oscillator_strength` which triggers EOM/Lambda convergence thresholds to be reduced.; - The computed values are 'too good' and comparison with the older reference values fails in the 4th decimal place for some quadrupole components of excited states.; - *Final Solution*; - I dropped the convergence thresholds manually in the test-input to what the were set to by the driver at the time that the reference data was generated. . Side Note:; - Personally I don't think the savings achieved by this over ride of the convergence thresholds are significant enough to justify potentially confusing situations. ; - If a user sets those values manually and requested `oscilator_strength` and/or `rotational_strength` the user-set values are overridden.; - Commenting out the [relevant lines](https://github.com/psi4/psi4/blob/72c30b536201a25171fa6426c8f319e2abdbb1cb/psi4/driver/procrouting/proc.py#L2647-L2649) all cc tests still pass. Including this one (with my changes). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for rev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1070
https://github.com/psi4/psi4/pull/1070:259,Testability,test,test,259,"## Description; Test case cc46 was removed after it was noticed to be failing (#1002 ), it was determined that the failure was not indicating a bug, so it was temporarily removed so pre-release pakages wouldn't be reporting a failure. This PR reactivates the test with modifications so that it is passing again. . * **Developer Interest**; - cc46 checks GS and excited state Dipole/Quadrupole components against reference values generated by psi. ; - Was failing because calling `properties=['oscillator_strength']` prior to #995 was the only way to force ccdensity to make a call to OEProp for each excited state. Post #995 this does not compute one electron properties for excited states so the computed values were all zero.; - Correcting the driver call `properties=['dipole','quadrupole']` is not enough; - The test values were generated using `oscillator_strength` which triggers EOM/Lambda convergence thresholds to be reduced.; - The computed values are 'too good' and comparison with the older reference values fails in the 4th decimal place for some quadrupole components of excited states.; - *Final Solution*; - I dropped the convergence thresholds manually in the test-input to what the were set to by the driver at the time that the reference data was generated. . Side Note:; - Personally I don't think the savings achieved by this over ride of the convergence thresholds are significant enough to justify potentially confusing situations. ; - If a user sets those values manually and requested `oscilator_strength` and/or `rotational_strength` the user-set values are overridden.; - Commenting out the [relevant lines](https://github.com/psi4/psi4/blob/72c30b536201a25171fa6426c8f319e2abdbb1cb/psi4/driver/procrouting/proc.py#L2647-L2649) all cc tests still pass. Including this one (with my changes). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for rev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1070
https://github.com/psi4/psi4/pull/1070:816,Testability,test,test,816,"## Description; Test case cc46 was removed after it was noticed to be failing (#1002 ), it was determined that the failure was not indicating a bug, so it was temporarily removed so pre-release pakages wouldn't be reporting a failure. This PR reactivates the test with modifications so that it is passing again. . * **Developer Interest**; - cc46 checks GS and excited state Dipole/Quadrupole components against reference values generated by psi. ; - Was failing because calling `properties=['oscillator_strength']` prior to #995 was the only way to force ccdensity to make a call to OEProp for each excited state. Post #995 this does not compute one electron properties for excited states so the computed values were all zero.; - Correcting the driver call `properties=['dipole','quadrupole']` is not enough; - The test values were generated using `oscillator_strength` which triggers EOM/Lambda convergence thresholds to be reduced.; - The computed values are 'too good' and comparison with the older reference values fails in the 4th decimal place for some quadrupole components of excited states.; - *Final Solution*; - I dropped the convergence thresholds manually in the test-input to what the were set to by the driver at the time that the reference data was generated. . Side Note:; - Personally I don't think the savings achieved by this over ride of the convergence thresholds are significant enough to justify potentially confusing situations. ; - If a user sets those values manually and requested `oscilator_strength` and/or `rotational_strength` the user-set values are overridden.; - Commenting out the [relevant lines](https://github.com/psi4/psi4/blob/72c30b536201a25171fa6426c8f319e2abdbb1cb/psi4/driver/procrouting/proc.py#L2647-L2649) all cc tests still pass. Including this one (with my changes). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for rev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1070
https://github.com/psi4/psi4/pull/1070:1177,Testability,test,test-input,1177,"c46 was removed after it was noticed to be failing (#1002 ), it was determined that the failure was not indicating a bug, so it was temporarily removed so pre-release pakages wouldn't be reporting a failure. This PR reactivates the test with modifications so that it is passing again. . * **Developer Interest**; - cc46 checks GS and excited state Dipole/Quadrupole components against reference values generated by psi. ; - Was failing because calling `properties=['oscillator_strength']` prior to #995 was the only way to force ccdensity to make a call to OEProp for each excited state. Post #995 this does not compute one electron properties for excited states so the computed values were all zero.; - Correcting the driver call `properties=['dipole','quadrupole']` is not enough; - The test values were generated using `oscillator_strength` which triggers EOM/Lambda convergence thresholds to be reduced.; - The computed values are 'too good' and comparison with the older reference values fails in the 4th decimal place for some quadrupole components of excited states.; - *Final Solution*; - I dropped the convergence thresholds manually in the test-input to what the were set to by the driver at the time that the reference data was generated. . Side Note:; - Personally I don't think the savings achieved by this over ride of the convergence thresholds are significant enough to justify potentially confusing situations. ; - If a user sets those values manually and requested `oscilator_strength` and/or `rotational_strength` the user-set values are overridden.; - Commenting out the [relevant lines](https://github.com/psi4/psi4/blob/72c30b536201a25171fa6426c8f319e2abdbb1cb/psi4/driver/procrouting/proc.py#L2647-L2649) all cc tests still pass. Including this one (with my changes). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1070
https://github.com/psi4/psi4/pull/1070:1762,Testability,test,tests,1762,"c46 was removed after it was noticed to be failing (#1002 ), it was determined that the failure was not indicating a bug, so it was temporarily removed so pre-release pakages wouldn't be reporting a failure. This PR reactivates the test with modifications so that it is passing again. . * **Developer Interest**; - cc46 checks GS and excited state Dipole/Quadrupole components against reference values generated by psi. ; - Was failing because calling `properties=['oscillator_strength']` prior to #995 was the only way to force ccdensity to make a call to OEProp for each excited state. Post #995 this does not compute one electron properties for excited states so the computed values were all zero.; - Correcting the driver call `properties=['dipole','quadrupole']` is not enough; - The test values were generated using `oscillator_strength` which triggers EOM/Lambda convergence thresholds to be reduced.; - The computed values are 'too good' and comparison with the older reference values fails in the 4th decimal place for some quadrupole components of excited states.; - *Final Solution*; - I dropped the convergence thresholds manually in the test-input to what the were set to by the driver at the time that the reference data was generated. . Side Note:; - Personally I don't think the savings achieved by this over ride of the convergence thresholds are significant enough to justify potentially confusing situations. ; - If a user sets those values manually and requested `oscilator_strength` and/or `rotational_strength` the user-set values are overridden.; - Commenting out the [relevant lines](https://github.com/psi4/psi4/blob/72c30b536201a25171fa6426c8f319e2abdbb1cb/psi4/driver/procrouting/proc.py#L2647-L2649) all cc tests still pass. Including this one (with my changes). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1070
https://github.com/psi4/psi4/pull/1070:1872,Testability,test,tests,1872,"c46 was removed after it was noticed to be failing (#1002 ), it was determined that the failure was not indicating a bug, so it was temporarily removed so pre-release pakages wouldn't be reporting a failure. This PR reactivates the test with modifications so that it is passing again. . * **Developer Interest**; - cc46 checks GS and excited state Dipole/Quadrupole components against reference values generated by psi. ; - Was failing because calling `properties=['oscillator_strength']` prior to #995 was the only way to force ccdensity to make a call to OEProp for each excited state. Post #995 this does not compute one electron properties for excited states so the computed values were all zero.; - Correcting the driver call `properties=['dipole','quadrupole']` is not enough; - The test values were generated using `oscillator_strength` which triggers EOM/Lambda convergence thresholds to be reduced.; - The computed values are 'too good' and comparison with the older reference values fails in the 4th decimal place for some quadrupole components of excited states.; - *Final Solution*; - I dropped the convergence thresholds manually in the test-input to what the were set to by the driver at the time that the reference data was generated. . Side Note:; - Personally I don't think the savings achieved by this over ride of the convergence thresholds are significant enough to justify potentially confusing situations. ; - If a user sets those values manually and requested `oscilator_strength` and/or `rotational_strength` the user-set values are overridden.; - Commenting out the [relevant lines](https://github.com/psi4/psi4/blob/72c30b536201a25171fa6426c8f319e2abdbb1cb/psi4/driver/procrouting/proc.py#L2647-L2649) all cc tests still pass. Including this one (with my changes). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1070
https://github.com/psi4/psi4/pull/1070:1963,Testability,test,tests,1963,"c46 was removed after it was noticed to be failing (#1002 ), it was determined that the failure was not indicating a bug, so it was temporarily removed so pre-release pakages wouldn't be reporting a failure. This PR reactivates the test with modifications so that it is passing again. . * **Developer Interest**; - cc46 checks GS and excited state Dipole/Quadrupole components against reference values generated by psi. ; - Was failing because calling `properties=['oscillator_strength']` prior to #995 was the only way to force ccdensity to make a call to OEProp for each excited state. Post #995 this does not compute one electron properties for excited states so the computed values were all zero.; - Correcting the driver call `properties=['dipole','quadrupole']` is not enough; - The test values were generated using `oscillator_strength` which triggers EOM/Lambda convergence thresholds to be reduced.; - The computed values are 'too good' and comparison with the older reference values fails in the 4th decimal place for some quadrupole components of excited states.; - *Final Solution*; - I dropped the convergence thresholds manually in the test-input to what the were set to by the driver at the time that the reference data was generated. . Side Note:; - Personally I don't think the savings achieved by this over ride of the convergence thresholds are significant enough to justify potentially confusing situations. ; - If a user sets those values manually and requested `oscilator_strength` and/or `rotational_strength` the user-set values are overridden.; - Commenting out the [relevant lines](https://github.com/psi4/psi4/blob/72c30b536201a25171fa6426c8f319e2abdbb1cb/psi4/driver/procrouting/proc.py#L2647-L2649) all cc tests still pass. Including this one (with my changes). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1070
https://github.com/psi4/psi4/pull/1071:310,Testability,Test,Tests,310,"## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing and remove unnecessary headers; - [x] `and` --> `&&`, `or` --> `||`; - [x] Add missing `return`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1071
https://github.com/psi4/psi4/pull/1071:386,Testability,test,tests,386,"## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing and remove unnecessary headers; - [x] `and` --> `&&`, `or` --> `||`; - [x] Add missing `return`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1071
https://github.com/psi4/psi4/pull/1071:477,Testability,test,tests,477,"## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing and remove unnecessary headers; - [x] `and` --> `&&`, `or` --> `||`; - [x] Add missing `return`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1071
https://github.com/psi4/psi4/pull/1072:291,Testability,Test,Tests,291,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Define cross-platform `SYSTEM_GETPID` ; - [x] Fix incorrect `std::vector::reserve` usage. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1072
https://github.com/psi4/psi4/pull/1072:367,Testability,test,tests,367,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Define cross-platform `SYSTEM_GETPID` ; - [x] Fix incorrect `std::vector::reserve` usage. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1072
https://github.com/psi4/psi4/pull/1072:458,Testability,test,tests,458,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Define cross-platform `SYSTEM_GETPID` ; - [x] Fix incorrect `std::vector::reserve` usage. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1072
https://github.com/psi4/psi4/pull/1073:350,Testability,Test,Tests,350,"## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove unnecessary headers; - [x] Define cross-platform macros and functions, i.e `SYSTEM_GETPID`, etc.; - [x] Replace a system call to move a file. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1073
https://github.com/psi4/psi4/pull/1073:426,Testability,test,tests,426,"## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove unnecessary headers; - [x] Define cross-platform macros and functions, i.e `SYSTEM_GETPID`, etc.; - [x] Replace a system call to move a file. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1073
https://github.com/psi4/psi4/pull/1073:517,Testability,test,tests,517,"## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove unnecessary headers; - [x] Define cross-platform macros and functions, i.e `SYSTEM_GETPID`, etc.; - [x] Replace a system call to move a file. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1073
https://github.com/psi4/psi4/pull/1074:26,Deployability,update,updates,26,## Description; README.md updates. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1074
https://github.com/psi4/psi4/pull/1075:473,Testability,Test,Tests,473,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing headers; - [x] Replace non-constant length arrays with `std::vector`; - [x] Fix `std::string` inicialization; - [x] Match function signatures; - [x] `not` --> `!`; - [x] Define cross-platform `SYSTEM_GETPID`; - [x] Fix multiple definitions of `psi::binomial`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1075
https://github.com/psi4/psi4/pull/1075:549,Testability,test,tests,549,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing headers; - [x] Replace non-constant length arrays with `std::vector`; - [x] Fix `std::string` inicialization; - [x] Match function signatures; - [x] `not` --> `!`; - [x] Define cross-platform `SYSTEM_GETPID`; - [x] Fix multiple definitions of `psi::binomial`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1075
https://github.com/psi4/psi4/pull/1075:640,Testability,test,tests,640,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing headers; - [x] Replace non-constant length arrays with `std::vector`; - [x] Fix `std::string` inicialization; - [x] Match function signatures; - [x] `not` --> `!`; - [x] Define cross-platform `SYSTEM_GETPID`; - [x] Fix multiple definitions of `psi::binomial`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1075
https://github.com/psi4/psi4/pull/1076:342,Testability,Test,Tests,342,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing and remove unnecessary headers; - [x] Fix `PSI_API` usage; - [x] Replace `bzero` with `memset`; - [x] Disable system/user timer. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1076
https://github.com/psi4/psi4/pull/1076:418,Testability,test,tests,418,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing and remove unnecessary headers; - [x] Fix `PSI_API` usage; - [x] Replace `bzero` with `memset`; - [x] Disable system/user timer. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1076
https://github.com/psi4/psi4/pull/1076:509,Testability,test,tests,509,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add missing and remove unnecessary headers; - [x] Fix `PSI_API` usage; - [x] Replace `bzero` with `memset`; - [x] Disable system/user timer. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1076
https://github.com/psi4/psi4/pull/1077:268,Safety,avoid,avoid,268,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replace `bzero` with `memset`; - [x] Match function signatures; - [x] Move a function to avoid a forward-declaration; - [x] Fix PSI_API usage; - [x] Add missing header; - [x] `and` --> `&&`; - [x] Disable system/user timer; - [x] Move `<sys/timers.h>` porting to a separate header (after #1078 merged); ; ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1077
https://github.com/psi4/psi4/pull/1077:506,Testability,Test,Tests,506,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replace `bzero` with `memset`; - [x] Match function signatures; - [x] Move a function to avoid a forward-declaration; - [x] Fix PSI_API usage; - [x] Add missing header; - [x] `and` --> `&&`; - [x] Disable system/user timer; - [x] Move `<sys/timers.h>` porting to a separate header (after #1078 merged); ; ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1077
https://github.com/psi4/psi4/pull/1077:582,Testability,test,tests,582,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replace `bzero` with `memset`; - [x] Match function signatures; - [x] Move a function to avoid a forward-declaration; - [x] Fix PSI_API usage; - [x] Add missing header; - [x] `and` --> `&&`; - [x] Disable system/user timer; - [x] Move `<sys/timers.h>` porting to a separate header (after #1078 merged); ; ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1077
https://github.com/psi4/psi4/pull/1077:673,Testability,test,tests,673,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replace `bzero` with `memset`; - [x] Match function signatures; - [x] Move a function to avoid a forward-declaration; - [x] Fix PSI_API usage; - [x] Add missing header; - [x] `and` --> `&&`; - [x] Disable system/user timer; - [x] Move `<sys/timers.h>` porting to a separate header (after #1078 merged); ; ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1077
https://github.com/psi4/psi4/pull/1078:355,Testability,Test,Tests,355,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix PSI_API; - [x] Add missing and remove unnecessary headers; - [x] Disable system/user timer; - [x] Move `<sys/timers.h>` porting to a separate header. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1078
https://github.com/psi4/psi4/pull/1078:431,Testability,test,tests,431,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix PSI_API; - [x] Add missing and remove unnecessary headers; - [x] Disable system/user timer; - [x] Move `<sys/timers.h>` porting to a separate header. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1078
https://github.com/psi4/psi4/pull/1078:522,Testability,test,tests,522,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix PSI_API; - [x] Add missing and remove unnecessary headers; - [x] Disable system/user timer; - [x] Move `<sys/timers.h>` porting to a separate header. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1078
https://github.com/psi4/psi4/issues/1079:155,Energy Efficiency,energy,energy,155,I would like to run minimizations with an additional harmonic constraint such that the input coordinates are favored. The use case is for computing strain energy against a decreasing force.; I am currently running many of these calculations after modifying the code as described here:; http://forum.psicode.org/t/optimization-with-additional-harmonic-constraints/404/2. In essence we are changing lines 196 and 197 in Molecule.cc to this:; // Increase force constant by 5% of initial value per iteration; k = Opt_params.fixed_coord_force_constant;; H[cnt][cnt] += k;; Note: that the forum post has a minor bug: it is not adding the fc to H but just replacing the element in H. Would it be possible to have this as an option in the official build of Psi4? I think this would be useful for other people. Thanks so much!; Alberto,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1079
https://github.com/psi4/psi4/issues/1079:313,Performance,optimiz,optimization-with-additional-harmonic-constraints,313,I would like to run minimizations with an additional harmonic constraint such that the input coordinates are favored. The use case is for computing strain energy against a decreasing force.; I am currently running many of these calculations after modifying the code as described here:; http://forum.psicode.org/t/optimization-with-additional-harmonic-constraints/404/2. In essence we are changing lines 196 and 197 in Molecule.cc to this:; // Increase force constant by 5% of initial value per iteration; k = Opt_params.fixed_coord_force_constant;; H[cnt][cnt] += k;; Note: that the forum post has a minor bug: it is not adding the fc to H but just replacing the element in H. Would it be possible to have this as an option in the official build of Psi4? I think this would be useful for other people. Thanks so much!; Alberto,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1079
https://github.com/psi4/psi4/pull/1080:228,Availability,toler,tolerance,228,"## Description; Adds a generalized Davidson solver to solvers.py. Issue #886. @dgasmith @amjames . ## Todos; * **Developer Interest**; - [x] General Davidson solver in python, takes an arbitrary number of roots, the convergence tolerance and maximum number of guess vectors. ## Questions; - [ ] Should the solver do all operations with psi4.core.Matrix functions? Currently, I’m using a QR decomposition in numpy to orthogonalize the added guess vectors with respect to the previous guess vectors. - [ ] I also need to change the code to handle a list of psi4.core.Matrix objects. Can I assume that this would be a list of guess vectors, with their second dimension being 1?. - [ ] Since this is a general solver, should I be worrying about irreps?. ## Checklist; - [ ] Currently takes in and returns numpy arrays, needs to take in and return a list of Psi4.core.Matrix objects; - [ ] May implement RHF stability analysis as a test case. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1080
https://github.com/psi4/psi4/pull/1080:927,Testability,test,test,927,"## Description; Adds a generalized Davidson solver to solvers.py. Issue #886. @dgasmith @amjames . ## Todos; * **Developer Interest**; - [x] General Davidson solver in python, takes an arbitrary number of roots, the convergence tolerance and maximum number of guess vectors. ## Questions; - [ ] Should the solver do all operations with psi4.core.Matrix functions? Currently, I’m using a QR decomposition in numpy to orthogonalize the added guess vectors with respect to the previous guess vectors. - [ ] I also need to change the code to handle a list of psi4.core.Matrix objects. Can I assume that this would be a list of guess vectors, with their second dimension being 1?. - [ ] Since this is a general solver, should I be worrying about irreps?. ## Checklist; - [ ] Currently takes in and returns numpy arrays, needs to take in and return a list of Psi4.core.Matrix objects; - [ ] May implement RHF stability analysis as a test case. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1080
https://github.com/psi4/psi4/pull/1081:593,Testability,Test,Tests,593,"## Description; This PR attempts to enable calculations of TD-HF/DFT optical rotations (ORs) with GIAOs, also called as London orbitals. This ensures that the length gauge OR results are independent of the choice of origin used in the geometry. ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] adds the gradients of one and two electron integrals of GIAOs; - [] constructs the modified RHS corresponding to magnetic response vectors. ; - [] implements TD-HF optical rotation in psi4numpy as an example. ; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1081
https://github.com/psi4/psi4/pull/1081:667,Testability,test,tests,667,"## Description; This PR attempts to enable calculations of TD-HF/DFT optical rotations (ORs) with GIAOs, also called as London orbitals. This ensures that the length gauge OR results are independent of the choice of origin used in the geometry. ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] adds the gradients of one and two electron integrals of GIAOs; - [] constructs the modified RHS corresponding to magnetic response vectors. ; - [] implements TD-HF optical rotation in psi4numpy as an example. ; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1081
https://github.com/psi4/psi4/pull/1081:758,Testability,test,tests,758,"## Description; This PR attempts to enable calculations of TD-HF/DFT optical rotations (ORs) with GIAOs, also called as London orbitals. This ensures that the length gauge OR results are independent of the choice of origin used in the geometry. ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] adds the gradients of one and two electron integrals of GIAOs; - [] constructs the modified RHS corresponding to magnetic response vectors. ; - [] implements TD-HF optical rotation in psi4numpy as an example. ; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1081
https://github.com/psi4/psi4/issues/1082:85,Performance,optimiz,optimization,85,"When I use ECP correction basis set like lanl2dz, Optking assign Mn to P in Writting optimization data to binary file step. [Mn2-dzvp.txt](https://github.com/psi4/psi4/files/2177450/Mn2-dzvp.txt); [Mn2-lanl2dz.txt](https://github.com/psi4/psi4/files/2177451/Mn2-lanl2dz.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1082
https://github.com/psi4/psi4/pull/1083:88,Performance,perform,performance,88,## Description; Adds timers for SAPT(DFT) procedure to track bottle-necks for improving performance. Information printed into `timer.dat`. A few other minor modifications are also done (see below). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Added step-wise timers for SAPT(DFT).; - [x] Appended missing dimer SCF step for FISAPT timer.; - [x] Exported timer functions to python-side.; - [x] Fixed a few typos in SAPT(DFT) procedure `sapt_proc.py`.; - [x] Expanded output width for `timer.dat` to avoid overflowing. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Attachment; [timer_dat.txt](https://github.com/psi4/psi4/files/2203735/timer_dat.txt); Seems that github doesn't like .dat files so I renamed it.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1083
https://github.com/psi4/psi4/pull/1083:568,Safety,avoid,avoid,568,## Description; Adds timers for SAPT(DFT) procedure to track bottle-necks for improving performance. Information printed into `timer.dat`. A few other minor modifications are also done (see below). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Added step-wise timers for SAPT(DFT).; - [x] Appended missing dimer SCF step for FISAPT timer.; - [x] Exported timer functions to python-side.; - [x] Fixed a few typos in SAPT(DFT) procedure `sapt_proc.py`.; - [x] Expanded output width for `timer.dat` to avoid overflowing. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Attachment; [timer_dat.txt](https://github.com/psi4/psi4/files/2203735/timer_dat.txt); Seems that github doesn't like .dat files so I renamed it.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1083
https://github.com/psi4/psi4/pull/1083:641,Testability,test,tests,641,## Description; Adds timers for SAPT(DFT) procedure to track bottle-necks for improving performance. Information printed into `timer.dat`. A few other minor modifications are also done (see below). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Added step-wise timers for SAPT(DFT).; - [x] Appended missing dimer SCF step for FISAPT timer.; - [x] Exported timer functions to python-side.; - [x] Fixed a few typos in SAPT(DFT) procedure `sapt_proc.py`.; - [x] Expanded output width for `timer.dat` to avoid overflowing. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Attachment; [timer_dat.txt](https://github.com/psi4/psi4/files/2203735/timer_dat.txt); Seems that github doesn't like .dat files so I renamed it.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1083
https://github.com/psi4/psi4/pull/1083:732,Testability,test,tests,732,## Description; Adds timers for SAPT(DFT) procedure to track bottle-necks for improving performance. Information printed into `timer.dat`. A few other minor modifications are also done (see below). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Added step-wise timers for SAPT(DFT).; - [x] Appended missing dimer SCF step for FISAPT timer.; - [x] Exported timer functions to python-side.; - [x] Fixed a few typos in SAPT(DFT) procedure `sapt_proc.py`.; - [x] Expanded output width for `timer.dat` to avoid overflowing. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Attachment; [timer_dat.txt](https://github.com/psi4/psi4/files/2203735/timer_dat.txt); Seems that github doesn't like .dat files so I renamed it.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1083
https://github.com/psi4/psi4/issues/1084:68,Availability,down,downloads,68,"Hi,. The link to . http://www.thch.uni-bonn.de/tc/index.php?section=downloads&subsection=getd3&lang=english. listed in. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/dftd3.rst. does not lead to an existing page.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1084
https://github.com/psi4/psi4/pull/1085:16,Deployability,Update,Update,16,"## Description. Update links to Grimme's DFT-D3. Note that the link to the parameter source may not be correct - those with knowledge of the source, please chime in. Fixes #1084. ## Questions; - [ ] Is the link to the parameter source correct?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1085
https://github.com/psi4/psi4/pull/1085:265,Testability,Test,Tests,265,"## Description. Update links to Grimme's DFT-D3. Note that the link to the parameter source may not be correct - those with knowledge of the source, please chime in. Fixes #1084. ## Questions; - [ ] Is the link to the parameter source correct?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1085
https://github.com/psi4/psi4/pull/1085:339,Testability,test,tests,339,"## Description. Update links to Grimme's DFT-D3. Note that the link to the parameter source may not be correct - those with knowledge of the source, please chime in. Fixes #1084. ## Questions; - [ ] Is the link to the parameter source correct?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1085
https://github.com/psi4/psi4/pull/1085:430,Testability,test,tests,430,"## Description. Update links to Grimme's DFT-D3. Note that the link to the parameter source may not be correct - those with knowledge of the source, please chime in. Fixes #1084. ## Questions; - [ ] Is the link to the parameter source correct?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1085
https://github.com/psi4/psi4/pull/1086:215,Deployability,Release,Release,215,## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1086
https://github.com/psi4/psi4/pull/1086:299,Testability,Test,Tests,299,## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1086
https://github.com/psi4/psi4/pull/1086:373,Testability,test,tests,373,## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1086
https://github.com/psi4/psi4/pull/1086:464,Testability,test,tests,464,## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1086
https://github.com/psi4/psi4/pull/1087:317,Testability,Test,Tests,317,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Reimplement `psi4::Timer` with `std::chrono`; - [x] Remove unnecessary headers; - [x] Disable stack trace printing. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1087
https://github.com/psi4/psi4/pull/1087:393,Testability,test,tests,393,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Reimplement `psi4::Timer` with `std::chrono`; - [x] Remove unnecessary headers; - [x] Disable stack trace printing. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1087
https://github.com/psi4/psi4/pull/1087:484,Testability,test,tests,484,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Reimplement `psi4::Timer` with `std::chrono`; - [x] Remove unnecessary headers; - [x] Disable stack trace printing. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1087
https://github.com/psi4/psi4/issues/1088:58,Availability,fault,fault,58,"When trying to run Psi4 1.2 I get a straight segmentation fault (instantly). This is on a Rocks 6.1.1 based system using both the installer or conda methods from the download site. The conda install reported the Psi4 version as. > psi4: 1.2+9d4a61c-py36hf231b52_1. I realise this is going to be incredibly tricky to debug. I did try launching the version of python that conda installed (3.6.6-hc3d631a_0), and it seems to work fine. psi4 -v and psi4 -V both also give instant seg faults and no further info.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1088
https://github.com/psi4/psi4/issues/1088:166,Availability,down,download,166,"When trying to run Psi4 1.2 I get a straight segmentation fault (instantly). This is on a Rocks 6.1.1 based system using both the installer or conda methods from the download site. The conda install reported the Psi4 version as. > psi4: 1.2+9d4a61c-py36hf231b52_1. I realise this is going to be incredibly tricky to debug. I did try launching the version of python that conda installed (3.6.6-hc3d631a_0), and it seems to work fine. psi4 -v and psi4 -V both also give instant seg faults and no further info.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1088
https://github.com/psi4/psi4/issues/1088:480,Availability,fault,faults,480,"When trying to run Psi4 1.2 I get a straight segmentation fault (instantly). This is on a Rocks 6.1.1 based system using both the installer or conda methods from the download site. The conda install reported the Psi4 version as. > psi4: 1.2+9d4a61c-py36hf231b52_1. I realise this is going to be incredibly tricky to debug. I did try launching the version of python that conda installed (3.6.6-hc3d631a_0), and it seems to work fine. psi4 -v and psi4 -V both also give instant seg faults and no further info.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1088
https://github.com/psi4/psi4/issues/1088:130,Deployability,install,installer,130,"When trying to run Psi4 1.2 I get a straight segmentation fault (instantly). This is on a Rocks 6.1.1 based system using both the installer or conda methods from the download site. The conda install reported the Psi4 version as. > psi4: 1.2+9d4a61c-py36hf231b52_1. I realise this is going to be incredibly tricky to debug. I did try launching the version of python that conda installed (3.6.6-hc3d631a_0), and it seems to work fine. psi4 -v and psi4 -V both also give instant seg faults and no further info.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1088
https://github.com/psi4/psi4/issues/1088:191,Deployability,install,install,191,"When trying to run Psi4 1.2 I get a straight segmentation fault (instantly). This is on a Rocks 6.1.1 based system using both the installer or conda methods from the download site. The conda install reported the Psi4 version as. > psi4: 1.2+9d4a61c-py36hf231b52_1. I realise this is going to be incredibly tricky to debug. I did try launching the version of python that conda installed (3.6.6-hc3d631a_0), and it seems to work fine. psi4 -v and psi4 -V both also give instant seg faults and no further info.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1088
https://github.com/psi4/psi4/issues/1088:376,Deployability,install,installed,376,"When trying to run Psi4 1.2 I get a straight segmentation fault (instantly). This is on a Rocks 6.1.1 based system using both the installer or conda methods from the download site. The conda install reported the Psi4 version as. > psi4: 1.2+9d4a61c-py36hf231b52_1. I realise this is going to be incredibly tricky to debug. I did try launching the version of python that conda installed (3.6.6-hc3d631a_0), and it seems to work fine. psi4 -v and psi4 -V both also give instant seg faults and no further info.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1088
https://github.com/psi4/psi4/pull/1089:223,Testability,Test,Tests,223,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add pragmas for MSVC. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1089
https://github.com/psi4/psi4/pull/1089:299,Testability,test,tests,299,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add pragmas for MSVC. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1089
https://github.com/psi4/psi4/pull/1089:390,Testability,test,tests,390,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add pragmas for MSVC. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1089
https://github.com/psi4/psi4/pull/1090:300,Testability,Test,Tests,300,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove unnecessary headers; - [x] Fix hard-coded path; - [x] Use `filesystem::path::is_directory`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1090
https://github.com/psi4/psi4/pull/1090:376,Testability,test,tests,376,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove unnecessary headers; - [x] Fix hard-coded path; - [x] Use `filesystem::path::is_directory`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1090
https://github.com/psi4/psi4/pull/1090:467,Testability,test,tests,467,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove unnecessary headers; - [x] Fix hard-coded path; - [x] Use `filesystem::path::is_directory`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1090
https://github.com/psi4/psi4/pull/1091:234,Availability,avail,available,234,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix hard-code paths; - [x] Guard against importing not available packages . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1091
https://github.com/psi4/psi4/pull/1091:277,Testability,Test,Tests,277,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix hard-code paths; - [x] Guard against importing not available packages . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1091
https://github.com/psi4/psi4/pull/1091:353,Testability,test,tests,353,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix hard-code paths; - [x] Guard against importing not available packages . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1091
https://github.com/psi4/psi4/pull/1091:444,Testability,test,tests,444,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix hard-code paths; - [x] Guard against importing not available packages . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1091
https://github.com/psi4/psi4/pull/1092:216,Testability,Test,Tests,216,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix `PSI_API`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1092
https://github.com/psi4/psi4/pull/1092:292,Testability,test,tests,292,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix `PSI_API`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1092
https://github.com/psi4/psi4/pull/1092:383,Testability,test,tests,383,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix `PSI_API`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1092
https://github.com/psi4/psi4/issues/1093:753,Availability,error,error,753,"Any computation that attempts to compute frequencies of a density fitted method will crash unless the symmetry is explicitly set to c1. Gradients do not have this problem. The below input file demonstrates the problem and has been taken from the test cases. The only modifications are changing gradients to frequencies and CCSD(T) to MP2. The bug is there with both methods, and also CCSD. I haven't checked other DF methods. ```; #! DF-MP2 cc-pVDZ energy for the H2O molecule. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1093
https://github.com/psi4/psi4/issues/1093:2105,Availability,Error,Error,2105,"nmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybuild_basis; psibasis = core.BasisSet.construct_from_pydict(mol, basisdict, puream). RuntimeError: ; Fatal Error: CoordEntry::basisset: Basisset not set for O and type of DF_BASIS_CC; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 134; ```; My own investigations have partially uncovered the cause of this. During basis set construction, [basis set labels are set on all atoms](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L101). This occurs by [iterating over all atoms in full_atoms_](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L2879) and [setting basis set labels for them.](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L2880) However, there is a very subtle problem. The basis set is constructed from this labels [here](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L173). The [constructor](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/basisset.cc#L567) sets the basis by [calling atom_entry](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/basisset.cc#L651). The problem is that a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1093
https://github.com/psi4/psi4/issues/1093:2182,Availability,Error,Error,2182,"nmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybuild_basis; psibasis = core.BasisSet.construct_from_pydict(mol, basisdict, puream). RuntimeError: ; Fatal Error: CoordEntry::basisset: Basisset not set for O and type of DF_BASIS_CC; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 134; ```; My own investigations have partially uncovered the cause of this. During basis set construction, [basis set labels are set on all atoms](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L101). This occurs by [iterating over all atoms in full_atoms_](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L2879) and [setting basis set labels for them.](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L2880) However, there is a very subtle problem. The basis set is constructed from this labels [here](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L173). The [constructor](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/basisset.cc#L567) sets the basis by [calling atom_entry](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/basisset.cc#L651). The problem is that a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1093
https://github.com/psi4/psi4/issues/1093:3411,Availability,error,error,3411,"lpers.py"", line 99, in pybuild_basis; psibasis = core.BasisSet.construct_from_pydict(mol, basisdict, puream). RuntimeError: ; Fatal Error: CoordEntry::basisset: Basisset not set for O and type of DF_BASIS_CC; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 134; ```; My own investigations have partially uncovered the cause of this. During basis set construction, [basis set labels are set on all atoms](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L101). This occurs by [iterating over all atoms in full_atoms_](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L2879) and [setting basis set labels for them.](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L2880) However, there is a very subtle problem. The basis set is constructed from this labels [here](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L173). The [constructor](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/basisset.cc#L567) sets the basis by [calling atom_entry](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/basisset.cc#L651). The problem is that atom_entry is [tied not to full_atoms_ but to atoms_](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L2912). Setting the basis set labels for full_atoms_ atoms never set them for the atoms_ atoms, hence the error. I've confirmed directly this code sets the basis set label for the first atom of atoms_ in the non-bugged case of a gradient computation, but not in the case of a bugged frequency computation. In both cases, the first atom of full_atoms_ has its basis set labels properly submitted. My hunch is that these two arrays are supposed to be synced up, modulo ghosts and dummies, so there was probably a problem with pointers somewhere that caused the objects in the two arrays to not be the same. Core devs, am I understanding atoms_ and full_atoms_ correctly?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1093
https://github.com/psi4/psi4/issues/1093:449,Energy Efficiency,energy,energy,449,"Any computation that attempts to compute frequencies of a density fitted method will crash unless the symmetry is explicitly set to c1. Gradients do not have this problem. The below input file demonstrates the problem and has been taken from the test cases. The only modifications are changing gradients to frequencies and CCSD(T) to MP2. The bug is there with both methods, and also CCSD. I haven't checked other DF methods. ```; #! DF-MP2 cc-pVDZ energy for the H2O molecule. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1093
https://github.com/psi4/psi4/issues/1093:1281,Energy Efficiency,energy,energy,1281,"e bug is there with both methods, and also CCSD. I haven't checked other DF methods. ```; #! DF-MP2 cc-pVDZ energy for the H2O molecule. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybuild_basis; psibasis = core.BasisSet.construct_from_pydict(mol, basisdict, puream). RuntimeError: ; Fatal Error: CoordEntry::basisset: Basisset not set for O and type of DF_BASIS_CC; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 134; ```; My own investigations have partially uncovered the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1093
https://github.com/psi4/psi4/issues/1093:1457,Energy Efficiency,energy,energy,1457,"et {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybuild_basis; psibasis = core.BasisSet.construct_from_pydict(mol, basisdict, puream). RuntimeError: ; Fatal Error: CoordEntry::basisset: Basisset not set for O and type of DF_BASIS_CC; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 134; ```; My own investigations have partially uncovered the cause of this. During basis set construction, [basis set labels are set on all atoms](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L101). This occurs by [iterating over all atom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1093
https://github.com/psi4/psi4/issues/1093:1483,Energy Efficiency,energy,energy,1483,"et {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybuild_basis; psibasis = core.BasisSet.construct_from_pydict(mol, basisdict, puream). RuntimeError: ; Fatal Error: CoordEntry::basisset: Basisset not set for O and type of DF_BASIS_CC; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 134; ```; My own investigations have partially uncovered the cause of this. During basis set construction, [basis set labels are set on all atoms](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L101). This occurs by [iterating over all atom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1093
https://github.com/psi4/psi4/issues/1093:759,Integrability,message,message,759,"Any computation that attempts to compute frequencies of a density fitted method will crash unless the symmetry is explicitly set to c1. Gradients do not have this problem. The below input file demonstrates the problem and has been taken from the test cases. The only modifications are changing gradients to frequencies and CCSD(T) to MP2. The bug is there with both methods, and also CCSD. I haven't checked other DF methods. ```; #! DF-MP2 cc-pVDZ energy for the H2O molecule. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1093
https://github.com/psi4/psi4/issues/1093:246,Testability,test,test,246,"Any computation that attempts to compute frequencies of a density fitted method will crash unless the symmetry is explicitly set to c1. Gradients do not have this problem. The below input file demonstrates the problem and has been taken from the test cases. The only modifications are changing gradients to frequencies and CCSD(T) to MP2. The bug is there with both methods, and also CCSD. I haven't checked other DF methods. ```; #! DF-MP2 cc-pVDZ energy for the H2O molecule. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1093
https://github.com/psi4/psi4/issues/1094:1871,Energy Efficiency,Energy,Energy,1871,"04262 0.5746382727 -0.0668232062; C 2.9322291027 -0.5491503715 -0.0253808964; C 3.2949719214 -1.8954547342 0.0021456089; C 2.3774158668 -2.9661063312 0.0421948956; C 0.9910962887 -2.8134295526 0.0516412719; C 0.0065004625 -3.8005717170 0.0933574064; C -1.3797668642 -3.5408136100 0.1034400320; C -1.9409778357 -2.2639998084 0.0835635290; C -3.2884679268 -1.9048573146 0.0867443596; C -3.7572441300 -0.5746153801 0.0624966242; C -2.9322699356 0.5491764124 0.0248765082; C -3.2951262899 1.8957129852 0.0016465100; C -2.3775183237 2.9662393715 -0.0357709805; H 0.6306894251 -1.7913750813 0.0208596131; H 2.7841508221 -3.9758109969 0.0667744946; H 4.3553844319 -2.1428427854 -0.0063594220; H 1.8668978587 -0.3494271067 -0.0121498700; H 0.3228373264 -4.8420256607 0.1188602273; H -2.0511468159 -4.3975325285 0.1300589689; H -1.2357730759 -1.4410348629 0.0655215046; H 4.8351452690 0.4211590359 -0.0805349766; H 4.0326489552 2.6988346470 -0.1263761210; H 1.2360000160 1.4415822577 -0.0454433027; H 2.0511633898 4.3973662877 -0.1345195235; H -0.3226761608 4.8421262640 -0.1059899081; H -0.6312244278 1.7907842456 -0.0464818848; H -2.7838455263 3.9761404520 -0.0477059840; H -4.3553303919 2.1429676321 0.0149903516; H -1.8669715938 0.3495233958 0.0124287296; H -4.8350335200 -0.4213578612 0.0728297413; H -4.0325261304 -2.6992664259 0.1093084921; }; E,wfn = optimize('b3lyp5',return_wfn=True). When I run this file with psi4 1.1 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp . Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o . 1 -696.23196743 -6.96e+02 6.60e-04 2.45e-04 o 3.67e-03 1.31e-03 o ~. But I run this file with psi4 1.2 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~. Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~. 1 -696.23196742 -6.96e+02 6.43e-02 1.88e-02 o 2.04e-02 6.09e-03 o ~. And psi4 1.2 failed to optimize geometry but psi4 1.1 successfully optimize geometry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1094
https://github.com/psi4/psi4/issues/1094:2134,Energy Efficiency,Energy,Energy,2134,"04262 0.5746382727 -0.0668232062; C 2.9322291027 -0.5491503715 -0.0253808964; C 3.2949719214 -1.8954547342 0.0021456089; C 2.3774158668 -2.9661063312 0.0421948956; C 0.9910962887 -2.8134295526 0.0516412719; C 0.0065004625 -3.8005717170 0.0933574064; C -1.3797668642 -3.5408136100 0.1034400320; C -1.9409778357 -2.2639998084 0.0835635290; C -3.2884679268 -1.9048573146 0.0867443596; C -3.7572441300 -0.5746153801 0.0624966242; C -2.9322699356 0.5491764124 0.0248765082; C -3.2951262899 1.8957129852 0.0016465100; C -2.3775183237 2.9662393715 -0.0357709805; H 0.6306894251 -1.7913750813 0.0208596131; H 2.7841508221 -3.9758109969 0.0667744946; H 4.3553844319 -2.1428427854 -0.0063594220; H 1.8668978587 -0.3494271067 -0.0121498700; H 0.3228373264 -4.8420256607 0.1188602273; H -2.0511468159 -4.3975325285 0.1300589689; H -1.2357730759 -1.4410348629 0.0655215046; H 4.8351452690 0.4211590359 -0.0805349766; H 4.0326489552 2.6988346470 -0.1263761210; H 1.2360000160 1.4415822577 -0.0454433027; H 2.0511633898 4.3973662877 -0.1345195235; H -0.3226761608 4.8421262640 -0.1059899081; H -0.6312244278 1.7907842456 -0.0464818848; H -2.7838455263 3.9761404520 -0.0477059840; H -4.3553303919 2.1429676321 0.0149903516; H -1.8669715938 0.3495233958 0.0124287296; H -4.8350335200 -0.4213578612 0.0728297413; H -4.0325261304 -2.6992664259 0.1093084921; }; E,wfn = optimize('b3lyp5',return_wfn=True). When I run this file with psi4 1.1 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp . Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o . 1 -696.23196743 -6.96e+02 6.60e-04 2.45e-04 o 3.67e-03 1.31e-03 o ~. But I run this file with psi4 1.2 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~. Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~. 1 -696.23196742 -6.96e+02 6.43e-02 1.88e-02 o 2.04e-02 6.09e-03 o ~. And psi4 1.2 failed to optimize geometry but psi4 1.1 successfully optimize geometry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1094
https://github.com/psi4/psi4/issues/1094:1755,Performance,optimiz,optimize,1755,"04262 0.5746382727 -0.0668232062; C 2.9322291027 -0.5491503715 -0.0253808964; C 3.2949719214 -1.8954547342 0.0021456089; C 2.3774158668 -2.9661063312 0.0421948956; C 0.9910962887 -2.8134295526 0.0516412719; C 0.0065004625 -3.8005717170 0.0933574064; C -1.3797668642 -3.5408136100 0.1034400320; C -1.9409778357 -2.2639998084 0.0835635290; C -3.2884679268 -1.9048573146 0.0867443596; C -3.7572441300 -0.5746153801 0.0624966242; C -2.9322699356 0.5491764124 0.0248765082; C -3.2951262899 1.8957129852 0.0016465100; C -2.3775183237 2.9662393715 -0.0357709805; H 0.6306894251 -1.7913750813 0.0208596131; H 2.7841508221 -3.9758109969 0.0667744946; H 4.3553844319 -2.1428427854 -0.0063594220; H 1.8668978587 -0.3494271067 -0.0121498700; H 0.3228373264 -4.8420256607 0.1188602273; H -2.0511468159 -4.3975325285 0.1300589689; H -1.2357730759 -1.4410348629 0.0655215046; H 4.8351452690 0.4211590359 -0.0805349766; H 4.0326489552 2.6988346470 -0.1263761210; H 1.2360000160 1.4415822577 -0.0454433027; H 2.0511633898 4.3973662877 -0.1345195235; H -0.3226761608 4.8421262640 -0.1059899081; H -0.6312244278 1.7907842456 -0.0464818848; H -2.7838455263 3.9761404520 -0.0477059840; H -4.3553303919 2.1429676321 0.0149903516; H -1.8669715938 0.3495233958 0.0124287296; H -4.8350335200 -0.4213578612 0.0728297413; H -4.0325261304 -2.6992664259 0.1093084921; }; E,wfn = optimize('b3lyp5',return_wfn=True). When I run this file with psi4 1.1 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp . Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o . 1 -696.23196743 -6.96e+02 6.60e-04 2.45e-04 o 3.67e-03 1.31e-03 o ~. But I run this file with psi4 1.2 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~. Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~. 1 -696.23196742 -6.96e+02 6.43e-02 1.88e-02 o 2.04e-02 6.09e-03 o ~. And psi4 1.2 failed to optimize geometry but psi4 1.1 successfully optimize geometry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1094
https://github.com/psi4/psi4/issues/1094:2343,Performance,optimiz,optimize,2343,"04262 0.5746382727 -0.0668232062; C 2.9322291027 -0.5491503715 -0.0253808964; C 3.2949719214 -1.8954547342 0.0021456089; C 2.3774158668 -2.9661063312 0.0421948956; C 0.9910962887 -2.8134295526 0.0516412719; C 0.0065004625 -3.8005717170 0.0933574064; C -1.3797668642 -3.5408136100 0.1034400320; C -1.9409778357 -2.2639998084 0.0835635290; C -3.2884679268 -1.9048573146 0.0867443596; C -3.7572441300 -0.5746153801 0.0624966242; C -2.9322699356 0.5491764124 0.0248765082; C -3.2951262899 1.8957129852 0.0016465100; C -2.3775183237 2.9662393715 -0.0357709805; H 0.6306894251 -1.7913750813 0.0208596131; H 2.7841508221 -3.9758109969 0.0667744946; H 4.3553844319 -2.1428427854 -0.0063594220; H 1.8668978587 -0.3494271067 -0.0121498700; H 0.3228373264 -4.8420256607 0.1188602273; H -2.0511468159 -4.3975325285 0.1300589689; H -1.2357730759 -1.4410348629 0.0655215046; H 4.8351452690 0.4211590359 -0.0805349766; H 4.0326489552 2.6988346470 -0.1263761210; H 1.2360000160 1.4415822577 -0.0454433027; H 2.0511633898 4.3973662877 -0.1345195235; H -0.3226761608 4.8421262640 -0.1059899081; H -0.6312244278 1.7907842456 -0.0464818848; H -2.7838455263 3.9761404520 -0.0477059840; H -4.3553303919 2.1429676321 0.0149903516; H -1.8669715938 0.3495233958 0.0124287296; H -4.8350335200 -0.4213578612 0.0728297413; H -4.0325261304 -2.6992664259 0.1093084921; }; E,wfn = optimize('b3lyp5',return_wfn=True). When I run this file with psi4 1.1 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp . Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o . 1 -696.23196743 -6.96e+02 6.60e-04 2.45e-04 o 3.67e-03 1.31e-03 o ~. But I run this file with psi4 1.2 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~. Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~. 1 -696.23196742 -6.96e+02 6.43e-02 1.88e-02 o 2.04e-02 6.09e-03 o ~. And psi4 1.2 failed to optimize geometry but psi4 1.1 successfully optimize geometry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1094
https://github.com/psi4/psi4/issues/1094:2387,Performance,optimiz,optimize,2387,"04262 0.5746382727 -0.0668232062; C 2.9322291027 -0.5491503715 -0.0253808964; C 3.2949719214 -1.8954547342 0.0021456089; C 2.3774158668 -2.9661063312 0.0421948956; C 0.9910962887 -2.8134295526 0.0516412719; C 0.0065004625 -3.8005717170 0.0933574064; C -1.3797668642 -3.5408136100 0.1034400320; C -1.9409778357 -2.2639998084 0.0835635290; C -3.2884679268 -1.9048573146 0.0867443596; C -3.7572441300 -0.5746153801 0.0624966242; C -2.9322699356 0.5491764124 0.0248765082; C -3.2951262899 1.8957129852 0.0016465100; C -2.3775183237 2.9662393715 -0.0357709805; H 0.6306894251 -1.7913750813 0.0208596131; H 2.7841508221 -3.9758109969 0.0667744946; H 4.3553844319 -2.1428427854 -0.0063594220; H 1.8668978587 -0.3494271067 -0.0121498700; H 0.3228373264 -4.8420256607 0.1188602273; H -2.0511468159 -4.3975325285 0.1300589689; H -1.2357730759 -1.4410348629 0.0655215046; H 4.8351452690 0.4211590359 -0.0805349766; H 4.0326489552 2.6988346470 -0.1263761210; H 1.2360000160 1.4415822577 -0.0454433027; H 2.0511633898 4.3973662877 -0.1345195235; H -0.3226761608 4.8421262640 -0.1059899081; H -0.6312244278 1.7907842456 -0.0464818848; H -2.7838455263 3.9761404520 -0.0477059840; H -4.3553303919 2.1429676321 0.0149903516; H -1.8669715938 0.3495233958 0.0124287296; H -4.8350335200 -0.4213578612 0.0728297413; H -4.0325261304 -2.6992664259 0.1093084921; }; E,wfn = optimize('b3lyp5',return_wfn=True). When I run this file with psi4 1.1 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp . Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o . 1 -696.23196743 -6.96e+02 6.60e-04 2.45e-04 o 3.67e-03 1.31e-03 o ~. But I run this file with psi4 1.2 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~. Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~. 1 -696.23196742 -6.96e+02 6.43e-02 1.88e-02 o 2.04e-02 6.09e-03 o ~. And psi4 1.2 failed to optimize geometry but psi4 1.1 successfully optimize geometry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1094
https://github.com/psi4/psi4/issues/1095:1085,Availability,fault,faulty,1085,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1095
https://github.com/psi4/psi4/issues/1095:1830,Deployability,release,release,1830,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1095
https://github.com/psi4/psi4/issues/1095:1870,Deployability,install,install,1870,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1095
https://github.com/psi4/psi4/issues/1095:744,Energy Efficiency,energy,energy,744,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1095
https://github.com/psi4/psi4/issues/1095:1401,Energy Efficiency,energy,energy,1401,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1095
https://github.com/psi4/psi4/issues/1095:10,Performance,optimiz,optimize,10,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1095
https://github.com/psi4/psi4/issues/1095:62,Performance,optimiz,optimization,62,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1095
https://github.com/psi4/psi4/issues/1095:122,Performance,optimiz,optimization,122,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1095
https://github.com/psi4/psi4/issues/1095:243,Performance,optimiz,optimizer,243,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1095
https://github.com/psi4/psi4/issues/1095:713,Performance,optimiz,optimizer,713,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1095
https://github.com/psi4/psi4/issues/1095:998,Performance,optimiz,optimizer,998,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1095
https://github.com/psi4/psi4/pull/1096:286,Testability,test,test,286,## Description; Fixes a bug in the DFJK gradient algorithm when using disk paging. On top of drawing similarities to Python and C++ one should be very aware of their differences as well. Bit me here. Fixes #1094 and Fixes #1095. As a note it is not possible to ensure that the provided test continues to check the paging algorithms as circumstance may change. Is there a good way to encode this thought into the test?. Something to back port quickly. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1096
https://github.com/psi4/psi4/pull/1096:412,Testability,test,test,412,## Description; Fixes a bug in the DFJK gradient algorithm when using disk paging. On top of drawing similarities to Python and C++ one should be very aware of their differences as well. Bit me here. Fixes #1094 and Fixes #1095. As a note it is not possible to ensure that the provided test continues to check the paging algorithms as circumstance may change. Is there a good way to encode this thought into the test?. Something to back port quickly. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1096
https://github.com/psi4/psi4/pull/1097:151,Availability,avail,availability,151,## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Feature1; Added printout for memory availability in DFHelper; ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1097
https://github.com/psi4/psi4/pull/1097:231,Testability,test,tests,231,## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Feature1; Added printout for memory availability in DFHelper; ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1097
https://github.com/psi4/psi4/pull/1097:322,Testability,test,tests,322,## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Feature1; Added printout for memory availability in DFHelper; ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1097
https://github.com/psi4/psi4/pull/1098:892,Availability,error,error,892,"## Description; avoid Win/Linux filesystem conventions by moving selected operations to python. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves fisapt driver py-side; - [x] Moves writing arrays and filesystem parts of fisapt py-side; - [x] There were some options with names `sSAPT`. There's machinery that thinks all option names are all-caps, so that wasn't good.; - [x] Moves filesys in libcubeprop/cubeprop.cc py-side; - [x] ~Currently can't run cmake multiple times w/o hitting `fsapt/` dir exists~ Now just overwrites existing dirs; - [x] Adds Molecule docstrings and fixes spelling mistakes. ## Questions; - [x] @jturney what’s this supposed to do when directory already exists? https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfilesystem/path.cc#L53 According to `mkdir` docs, it should throw `EEXIST` error? that’s the behavior i’ve imitated in python. but if that’s the case, how has ctest be working on re-run all this time.; - [ ] Rob was exporting `FISAPT.scalars()` as direct map. I changed to map& to match FISAPTSCF. Rob was never using this in code, but since it was exported to python, possibly scirpts are affected?. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1098
https://github.com/psi4/psi4/pull/1098:16,Safety,avoid,avoid,16,"## Description; avoid Win/Linux filesystem conventions by moving selected operations to python. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves fisapt driver py-side; - [x] Moves writing arrays and filesystem parts of fisapt py-side; - [x] There were some options with names `sSAPT`. There's machinery that thinks all option names are all-caps, so that wasn't good.; - [x] Moves filesys in libcubeprop/cubeprop.cc py-side; - [x] ~Currently can't run cmake multiple times w/o hitting `fsapt/` dir exists~ Now just overwrites existing dirs; - [x] Adds Molecule docstrings and fixes spelling mistakes. ## Questions; - [x] @jturney what’s this supposed to do when directory already exists? https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfilesystem/path.cc#L53 According to `mkdir` docs, it should throw `EEXIST` error? that’s the behavior i’ve imitated in python. but if that’s the case, how has ctest be working on re-run all this time.; - [ ] Rob was exporting `FISAPT.scalars()` as direct map. I changed to map& to match FISAPTSCF. Rob was never using this in code, but since it was exported to python, possibly scirpts are affected?. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1098
https://github.com/psi4/psi4/pull/1098:1272,Testability,test,tests,1272,"## Description; avoid Win/Linux filesystem conventions by moving selected operations to python. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves fisapt driver py-side; - [x] Moves writing arrays and filesystem parts of fisapt py-side; - [x] There were some options with names `sSAPT`. There's machinery that thinks all option names are all-caps, so that wasn't good.; - [x] Moves filesys in libcubeprop/cubeprop.cc py-side; - [x] ~Currently can't run cmake multiple times w/o hitting `fsapt/` dir exists~ Now just overwrites existing dirs; - [x] Adds Molecule docstrings and fixes spelling mistakes. ## Questions; - [x] @jturney what’s this supposed to do when directory already exists? https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfilesystem/path.cc#L53 According to `mkdir` docs, it should throw `EEXIST` error? that’s the behavior i’ve imitated in python. but if that’s the case, how has ctest be working on re-run all this time.; - [ ] Rob was exporting `FISAPT.scalars()` as direct map. I changed to map& to match FISAPTSCF. Rob was never using this in code, but since it was exported to python, possibly scirpts are affected?. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1098
https://github.com/psi4/psi4/pull/1098:1363,Testability,test,tests,1363,"## Description; avoid Win/Linux filesystem conventions by moving selected operations to python. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves fisapt driver py-side; - [x] Moves writing arrays and filesystem parts of fisapt py-side; - [x] There were some options with names `sSAPT`. There's machinery that thinks all option names are all-caps, so that wasn't good.; - [x] Moves filesys in libcubeprop/cubeprop.cc py-side; - [x] ~Currently can't run cmake multiple times w/o hitting `fsapt/` dir exists~ Now just overwrites existing dirs; - [x] Adds Molecule docstrings and fixes spelling mistakes. ## Questions; - [x] @jturney what’s this supposed to do when directory already exists? https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfilesystem/path.cc#L53 According to `mkdir` docs, it should throw `EEXIST` error? that’s the behavior i’ve imitated in python. but if that’s the case, how has ctest be working on re-run all this time.; - [ ] Rob was exporting `FISAPT.scalars()` as direct map. I changed to map& to match FISAPTSCF. Rob was never using this in code, but since it was exported to python, possibly scirpts are affected?. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1098
https://github.com/psi4/psi4/pull/1099:70,Testability,test,testing,70,"## Description; I don't want to fix py27 bug in #1098, so this evades testing it. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CI: stop testing py27. insufficient conda pkgs to add py37. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1099
https://github.com/psi4/psi4/pull/1099:206,Testability,test,testing,206,"## Description; I don't want to fix py27 bug in #1098, so this evades testing it. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CI: stop testing py27. insufficient conda pkgs to add py37. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1099
https://github.com/psi4/psi4/pull/1100:219,Testability,test,tests,219,## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] fix direct_iaq memory estimate in AO_core module. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1100
https://github.com/psi4/psi4/pull/1100:310,Testability,test,tests,310,## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] fix direct_iaq memory estimate in AO_core module. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1100
https://github.com/psi4/psi4/pull/1101:408,Deployability,release,released,408,"## Description; At long last, kill the Fork!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adjust LibxcFunctional for new tweakers interface. Have to pad tweakers array sometimes; - [x] ~Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block~. ## Questions; - [ ] Need to find out from M. Oliveira if there's a released version with this interface. tagged 5.0.0; - [ ] https://gitlab.com/libxc/libxc/issues/61. ## Checklist; - [ ] ~Tests added for any new features~; - [x] Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block; ```; 	372 - dft-custom-dhdf (Failed); 	373 - dft-custom-hybrid (Failed); 	376 - dft-bench-ionization (Failed); 	377 - dft-bench-interaction (Failed); ```; - [x] All tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge. closes #2057",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1101
https://github.com/psi4/psi4/pull/1101:201,Integrability,interface,interface,201,"## Description; At long last, kill the Fork!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adjust LibxcFunctional for new tweakers interface. Have to pad tweakers array sometimes; - [x] ~Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block~. ## Questions; - [ ] Need to find out from M. Oliveira if there's a released version with this interface. tagged 5.0.0; - [ ] https://gitlab.com/libxc/libxc/issues/61. ## Checklist; - [ ] ~Tests added for any new features~; - [x] Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block; ```; 	372 - dft-custom-dhdf (Failed); 	373 - dft-custom-hybrid (Failed); 	376 - dft-bench-ionization (Failed); 	377 - dft-bench-interaction (Failed); ```; - [x] All tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge. closes #2057",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1101
https://github.com/psi4/psi4/pull/1101:435,Integrability,interface,interface,435,"## Description; At long last, kill the Fork!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adjust LibxcFunctional for new tweakers interface. Have to pad tweakers array sometimes; - [x] ~Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block~. ## Questions; - [ ] Need to find out from M. Oliveira if there's a released version with this interface. tagged 5.0.0; - [ ] https://gitlab.com/libxc/libxc/issues/61. ## Checklist; - [ ] ~Tests added for any new features~; - [x] Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block; ```; 	372 - dft-custom-dhdf (Failed); 	373 - dft-custom-hybrid (Failed); 	376 - dft-bench-ionization (Failed); 	377 - dft-bench-interaction (Failed); ```; - [x] All tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge. closes #2057",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1101
https://github.com/psi4/psi4/pull/1101:529,Testability,Test,Tests,529,"## Description; At long last, kill the Fork!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adjust LibxcFunctional for new tweakers interface. Have to pad tweakers array sometimes; - [x] ~Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block~. ## Questions; - [ ] Need to find out from M. Oliveira if there's a released version with this interface. tagged 5.0.0; - [ ] https://gitlab.com/libxc/libxc/issues/61. ## Checklist; - [ ] ~Tests added for any new features~; - [x] Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block; ```; 	372 - dft-custom-dhdf (Failed); 	373 - dft-custom-hybrid (Failed); 	376 - dft-bench-ionization (Failed); 	377 - dft-bench-interaction (Failed); ```; - [x] All tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge. closes #2057",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1101
https://github.com/psi4/psi4/pull/1101:818,Testability,test,tests,818,"## Description; At long last, kill the Fork!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adjust LibxcFunctional for new tweakers interface. Have to pad tweakers array sometimes; - [x] ~Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block~. ## Questions; - [ ] Need to find out from M. Oliveira if there's a released version with this interface. tagged 5.0.0; - [ ] https://gitlab.com/libxc/libxc/issues/61. ## Checklist; - [ ] ~Tests added for any new features~; - [x] Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block; ```; 	372 - dft-custom-dhdf (Failed); 	373 - dft-custom-hybrid (Failed); 	376 - dft-bench-ionization (Failed); 	377 - dft-bench-interaction (Failed); ```; - [x] All tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge. closes #2057",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1101
https://github.com/psi4/psi4/issues/1102:1755,Testability,log,logfile,1755,"When trying to compute counterpoise-corrected energies of complexes with atoms including ECPs, and frozen core applied, the results are incorrect. I believe it is due to incorrect assignment of frozen core orbitals (yet again). See attached input and output files. The relevant part is quoted below. ```; $: grep frozen bug.out ; Use frozen natural orbitals? no; Number of frozen core orbitals: 4 (Kr + OCS ghost); Number of frozen virtual orbitals: 0; Use frozen natural orbitals? no; Number of frozen core orbitals: 4; Number of frozen virtual orbitals: 0; Use frozen natural orbitals? no; Number of frozen core orbitals: 3 (Kr ghost + OCS); Number of frozen virtual orbitals: 0; Use frozen natural orbitals? no; Number of frozen core orbitals: 3; Number of frozen virtual orbitals: 0; Use frozen natural orbitals? no; Number of frozen core orbitals: 11 (Kr + OCS); Number of frozen virtual orbitals: 0; Use frozen natural orbitals? no; Number of frozen core orbitals: 11; Number of frozen virtual orbitals: 0; ```. For the Kr + OCS(Gh) combination, we want to freeze the [Ar] shell, ie 18 electrons. Part of them is frozen using the ECP (10e-), and the remaining 4 pairs are frozen correctly. For the Kr(Gh) + OCS combination, we want to freeze the [He] electrons on O and C, and the [Ne] electrons on S, ie. 14 electrons. But we freeze only 3 orbitals, we are 8 electrons short. For Kr + OCS, we want to freeze 2x[He], 1x[Ne] and 1x[Ar] shells, ie. 32 electrons. As above, 10 are in Kr's ECP, and the additional 22 are correctly ghosted by the 11 frozen orbitals. The problem seems to be happening when an ECP-containing atom is ghosted. I think it happened both with explicit ghosting using `(Gh)` and with `extract_subsets`; I didn't keep the other logfile. [bug_inp.txt](https://github.com/psi4/psi4/files/2219016/bug_inp.txt); [bug_out.txt](https://github.com/psi4/psi4/files/2219017/bug_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1102
https://github.com/psi4/psi4/pull/1103:488,Testability,test,tests,488,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] I still had ints printing as floats and `int/int` printing as float, etc. Plus what used to take 3 lines now takes 1.; - [x] `[GiB]` throughout DFHelper.cc. Now; ```; ==> Integral Setup <==. DFHelper Memory: AOs need 0.001 [GiB]; got 0.419 [GiB] so using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==; ```. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1103
https://github.com/psi4/psi4/pull/1103:579,Testability,test,tests,579,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] I still had ints printing as floats and `int/int` printing as float, etc. Plus what used to take 3 lines now takes 1.; - [x] `[GiB]` throughout DFHelper.cc. Now; ```; ==> Integral Setup <==. DFHelper Memory: AOs need 0.001 [GiB]; got 0.419 [GiB] so using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==; ```. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1103
https://github.com/psi4/psi4/pull/1104:523,Testability,test,tests,523,## Description; How many PRs does it take to correctly and conveniently print JK memory? This is the fourth. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SAD guess was printing a dfh memory announcement for every atom type of the SAD guess ever since we starting printing for both sufficient and insufficient AO in-core memory in #1097. This adds a `print_lvl` to DFHelper and sets it to 0 for SAD. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1104
https://github.com/psi4/psi4/pull/1104:614,Testability,test,tests,614,## Description; How many PRs does it take to correctly and conveniently print JK memory? This is the fourth. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SAD guess was printing a dfh memory announcement for every atom type of the SAD guess ever since we starting printing for both sufficient and insufficient AO in-core memory in #1097. This adds a `print_lvl` to DFHelper and sets it to 0 for SAD. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1104
https://github.com/psi4/psi4/issues/1106:867,Energy Efficiency,energy,energy,867,"If you supply two fragments to Psi4, it will assume the multiplicity of the combined system is the multiplicity of the first fragment, not the multiplicity of the high spin combination. For instance, Psi will attempt to treat the following molecule as a singlet rather than a triplet. Switching the order of the fragments will make Psi look for the triplet. Switching both to be triplets, where the high spin combination is a quintet, will have Psi look for triplets. I haven't tested how it handles more than two fragments. ```; molecule {; 0 1 ; H -0.7589216703 0.0000000000 3.1082565820; H 0.7589216703 0.0000000000 3.1082565820; O 0.0000000000 0.0000000000 2.5216012101; -- ; 0 3 ; S 0.0000000000 0.0000000000 -0.4748174225; O 0.0000000000 0.0000000000 -1.9641940526; symmetry c1; no_reorient; no_com; }. set {; reference uhf ; scf_type direct; basis cc-pVDZ; }. energy('scf'); ```; Attempted on `Git: Rev {master} 9994682`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1106
https://github.com/psi4/psi4/issues/1106:478,Testability,test,tested,478,"If you supply two fragments to Psi4, it will assume the multiplicity of the combined system is the multiplicity of the first fragment, not the multiplicity of the high spin combination. For instance, Psi will attempt to treat the following molecule as a singlet rather than a triplet. Switching the order of the fragments will make Psi look for the triplet. Switching both to be triplets, where the high spin combination is a quintet, will have Psi look for triplets. I haven't tested how it handles more than two fragments. ```; molecule {; 0 1 ; H -0.7589216703 0.0000000000 3.1082565820; H 0.7589216703 0.0000000000 3.1082565820; O 0.0000000000 0.0000000000 2.5216012101; -- ; 0 3 ; S 0.0000000000 0.0000000000 -0.4748174225; O 0.0000000000 0.0000000000 -1.9641940526; symmetry c1; no_reorient; no_com; }. set {; reference uhf ; scf_type direct; basis cc-pVDZ; }. energy('scf'); ```; Attempted on `Git: Rev {master} 9994682`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1106
https://github.com/psi4/psi4/pull/1108:555,Availability,error,error,555,"## Description; Fixes issue #1093, where the use of density fitting caused a crash when computing frequencies. As for why these fixes are necessary:. Previously, the clone function would have separate memory addresses for elements of the two lists, which would be fixed by update_geometry assuming that coordinate reinterpretation was allowed. This is precisely what the driver does not allow when getting a findif hessian. The basis set setting code assumed that the memory addresses were the same. This assumption failing led to the originally reported error with setting basis sets. As this seems a rather sane assumption to me, it is Now enforced. This uncovered a second error when ZMAT coordinates were used: energies at displacements would be off by ~4 hartrees. When the molecule is cloned in the process of getting a c1 wavefunction, I found that the coordinates of the cloned molecules differed from those of the original molecule, right before the basis sets were set. Telling the basis sets that the atoms are not what they actually are seems like the kind of thing that would lead to garbage energies, though I didn't get a detailed mechanism for this. To get the geometries consistent, I had to change the atom cloning procedure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Molecule clone now guarantees that each elements of the atom_ list is identical to some element of the full_atom_ list.; - [x] Atom clone now guarantees that ZMATs with computed coordinates carry the computed coordinates over to the clone.; * **User-Facing for Release Notes**; - [x] Fixed a bug where using density fitting for a frequency computation would cause an error unless the symmetry was explicitly set to c1. ## Questions; - [x] Symmetry is used for the purposes of generating displacements, but not for labeling normal modes. Even if we can't take advantage of symmetry for the energetics, we should be able to use symmetry for dis",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1108
https://github.com/psi4/psi4/pull/1108:676,Availability,error,error,676,"## Description; Fixes issue #1093, where the use of density fitting caused a crash when computing frequencies. As for why these fixes are necessary:. Previously, the clone function would have separate memory addresses for elements of the two lists, which would be fixed by update_geometry assuming that coordinate reinterpretation was allowed. This is precisely what the driver does not allow when getting a findif hessian. The basis set setting code assumed that the memory addresses were the same. This assumption failing led to the originally reported error with setting basis sets. As this seems a rather sane assumption to me, it is Now enforced. This uncovered a second error when ZMAT coordinates were used: energies at displacements would be off by ~4 hartrees. When the molecule is cloned in the process of getting a c1 wavefunction, I found that the coordinates of the cloned molecules differed from those of the original molecule, right before the basis sets were set. Telling the basis sets that the atoms are not what they actually are seems like the kind of thing that would lead to garbage energies, though I didn't get a detailed mechanism for this. To get the geometries consistent, I had to change the atom cloning procedure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Molecule clone now guarantees that each elements of the atom_ list is identical to some element of the full_atom_ list.; - [x] Atom clone now guarantees that ZMATs with computed coordinates carry the computed coordinates over to the clone.; * **User-Facing for Release Notes**; - [x] Fixed a bug where using density fitting for a frequency computation would cause an error unless the symmetry was explicitly set to c1. ## Questions; - [x] Symmetry is used for the purposes of generating displacements, but not for labeling normal modes. Even if we can't take advantage of symmetry for the energetics, we should be able to use symmetry for dis",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1108
https://github.com/psi4/psi4/pull/1108:1726,Availability,error,error,1726," reported error with setting basis sets. As this seems a rather sane assumption to me, it is Now enforced. This uncovered a second error when ZMAT coordinates were used: energies at displacements would be off by ~4 hartrees. When the molecule is cloned in the process of getting a c1 wavefunction, I found that the coordinates of the cloned molecules differed from those of the original molecule, right before the basis sets were set. Telling the basis sets that the atoms are not what they actually are seems like the kind of thing that would lead to garbage energies, though I didn't get a detailed mechanism for this. To get the geometries consistent, I had to change the atom cloning procedure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Molecule clone now guarantees that each elements of the atom_ list is identical to some element of the full_atom_ list.; - [x] Atom clone now guarantees that ZMATs with computed coordinates carry the computed coordinates over to the clone.; * **User-Facing for Release Notes**; - [x] Fixed a bug where using density fitting for a frequency computation would cause an error unless the symmetry was explicitly set to c1. ## Questions; - [x] Symmetry is used for the purposes of generating displacements, but not for labeling normal modes. Even if we can't take advantage of symmetry for the energetics, we should be able to use symmetry for displacements and normal modes. My hunch is that this is a problem with changing the symmetry of the molecule between the two findif calls, but I'd like Py-side findif to be accepted before looking into this, just in case. Sound good?. ## Checklist; - [x] Tests added for any newly functional features; - [x] [All of full tests run, modulo DFT benchmarks and plugins](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge (as soon as the last review is in)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1108
https://github.com/psi4/psi4/pull/1108:1620,Deployability,Release,Release,1620," reported error with setting basis sets. As this seems a rather sane assumption to me, it is Now enforced. This uncovered a second error when ZMAT coordinates were used: energies at displacements would be off by ~4 hartrees. When the molecule is cloned in the process of getting a c1 wavefunction, I found that the coordinates of the cloned molecules differed from those of the original molecule, right before the basis sets were set. Telling the basis sets that the atoms are not what they actually are seems like the kind of thing that would lead to garbage energies, though I didn't get a detailed mechanism for this. To get the geometries consistent, I had to change the atom cloning procedure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Molecule clone now guarantees that each elements of the atom_ list is identical to some element of the full_atom_ list.; - [x] Atom clone now guarantees that ZMATs with computed coordinates carry the computed coordinates over to the clone.; * **User-Facing for Release Notes**; - [x] Fixed a bug where using density fitting for a frequency computation would cause an error unless the symmetry was explicitly set to c1. ## Questions; - [x] Symmetry is used for the purposes of generating displacements, but not for labeling normal modes. Even if we can't take advantage of symmetry for the energetics, we should be able to use symmetry for displacements and normal modes. My hunch is that this is a problem with changing the symmetry of the molecule between the two findif calls, but I'd like Py-side findif to be accepted before looking into this, just in case. Sound good?. ## Checklist; - [x] Tests added for any newly functional features; - [x] [All of full tests run, modulo DFT benchmarks and plugins](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge (as soon as the last review is in)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1108
https://github.com/psi4/psi4/pull/1108:2357,Modifiability,plugin,plugins,2357," reported error with setting basis sets. As this seems a rather sane assumption to me, it is Now enforced. This uncovered a second error when ZMAT coordinates were used: energies at displacements would be off by ~4 hartrees. When the molecule is cloned in the process of getting a c1 wavefunction, I found that the coordinates of the cloned molecules differed from those of the original molecule, right before the basis sets were set. Telling the basis sets that the atoms are not what they actually are seems like the kind of thing that would lead to garbage energies, though I didn't get a detailed mechanism for this. To get the geometries consistent, I had to change the atom cloning procedure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Molecule clone now guarantees that each elements of the atom_ list is identical to some element of the full_atom_ list.; - [x] Atom clone now guarantees that ZMATs with computed coordinates carry the computed coordinates over to the clone.; * **User-Facing for Release Notes**; - [x] Fixed a bug where using density fitting for a frequency computation would cause an error unless the symmetry was explicitly set to c1. ## Questions; - [x] Symmetry is used for the purposes of generating displacements, but not for labeling normal modes. Even if we can't take advantage of symmetry for the energetics, we should be able to use symmetry for displacements and normal modes. My hunch is that this is a problem with changing the symmetry of the molecule between the two findif calls, but I'd like Py-side findif to be accepted before looking into this, just in case. Sound good?. ## Checklist; - [x] Tests added for any newly functional features; - [x] [All of full tests run, modulo DFT benchmarks and plugins](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge (as soon as the last review is in)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1108
https://github.com/psi4/psi4/pull/1108:2254,Testability,Test,Tests,2254," reported error with setting basis sets. As this seems a rather sane assumption to me, it is Now enforced. This uncovered a second error when ZMAT coordinates were used: energies at displacements would be off by ~4 hartrees. When the molecule is cloned in the process of getting a c1 wavefunction, I found that the coordinates of the cloned molecules differed from those of the original molecule, right before the basis sets were set. Telling the basis sets that the atoms are not what they actually are seems like the kind of thing that would lead to garbage energies, though I didn't get a detailed mechanism for this. To get the geometries consistent, I had to change the atom cloning procedure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Molecule clone now guarantees that each elements of the atom_ list is identical to some element of the full_atom_ list.; - [x] Atom clone now guarantees that ZMATs with computed coordinates carry the computed coordinates over to the clone.; * **User-Facing for Release Notes**; - [x] Fixed a bug where using density fitting for a frequency computation would cause an error unless the symmetry was explicitly set to c1. ## Questions; - [x] Symmetry is used for the purposes of generating displacements, but not for labeling normal modes. Even if we can't take advantage of symmetry for the energetics, we should be able to use symmetry for displacements and normal modes. My hunch is that this is a problem with changing the symmetry of the molecule between the two findif calls, but I'd like Py-side findif to be accepted before looking into this, just in case. Sound good?. ## Checklist; - [x] Tests added for any newly functional features; - [x] [All of full tests run, modulo DFT benchmarks and plugins](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge (as soon as the last review is in)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1108
https://github.com/psi4/psi4/pull/1108:2320,Testability,test,tests,2320," reported error with setting basis sets. As this seems a rather sane assumption to me, it is Now enforced. This uncovered a second error when ZMAT coordinates were used: energies at displacements would be off by ~4 hartrees. When the molecule is cloned in the process of getting a c1 wavefunction, I found that the coordinates of the cloned molecules differed from those of the original molecule, right before the basis sets were set. Telling the basis sets that the atoms are not what they actually are seems like the kind of thing that would lead to garbage energies, though I didn't get a detailed mechanism for this. To get the geometries consistent, I had to change the atom cloning procedure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Molecule clone now guarantees that each elements of the atom_ list is identical to some element of the full_atom_ list.; - [x] Atom clone now guarantees that ZMATs with computed coordinates carry the computed coordinates over to the clone.; * **User-Facing for Release Notes**; - [x] Fixed a bug where using density fitting for a frequency computation would cause an error unless the symmetry was explicitly set to c1. ## Questions; - [x] Symmetry is used for the purposes of generating displacements, but not for labeling normal modes. Even if we can't take advantage of symmetry for the energetics, we should be able to use symmetry for displacements and normal modes. My hunch is that this is a problem with changing the symmetry of the molecule between the two findif calls, but I'd like Py-side findif to be accepted before looking into this, just in case. Sound good?. ## Checklist; - [x] Tests added for any newly functional features; - [x] [All of full tests run, modulo DFT benchmarks and plugins](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge (as soon as the last review is in)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1108
https://github.com/psi4/psi4/pull/1108:2342,Testability,benchmark,benchmarks,2342," reported error with setting basis sets. As this seems a rather sane assumption to me, it is Now enforced. This uncovered a second error when ZMAT coordinates were used: energies at displacements would be off by ~4 hartrees. When the molecule is cloned in the process of getting a c1 wavefunction, I found that the coordinates of the cloned molecules differed from those of the original molecule, right before the basis sets were set. Telling the basis sets that the atoms are not what they actually are seems like the kind of thing that would lead to garbage energies, though I didn't get a detailed mechanism for this. To get the geometries consistent, I had to change the atom cloning procedure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Molecule clone now guarantees that each elements of the atom_ list is identical to some element of the full_atom_ list.; - [x] Atom clone now guarantees that ZMATs with computed coordinates carry the computed coordinates over to the clone.; * **User-Facing for Release Notes**; - [x] Fixed a bug where using density fitting for a frequency computation would cause an error unless the symmetry was explicitly set to c1. ## Questions; - [x] Symmetry is used for the purposes of generating displacements, but not for labeling normal modes. Even if we can't take advantage of symmetry for the energetics, we should be able to use symmetry for displacements and normal modes. My hunch is that this is a problem with changing the symmetry of the molecule between the two findif calls, but I'd like Py-side findif to be accepted before looking into this, just in case. Sound good?. ## Checklist; - [x] Tests added for any newly functional features; - [x] [All of full tests run, modulo DFT benchmarks and plugins](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge (as soon as the last review is in)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1108
https://github.com/psi4/psi4/pull/1108:2446,Testability,test,tests,2446," reported error with setting basis sets. As this seems a rather sane assumption to me, it is Now enforced. This uncovered a second error when ZMAT coordinates were used: energies at displacements would be off by ~4 hartrees. When the molecule is cloned in the process of getting a c1 wavefunction, I found that the coordinates of the cloned molecules differed from those of the original molecule, right before the basis sets were set. Telling the basis sets that the atoms are not what they actually are seems like the kind of thing that would lead to garbage energies, though I didn't get a detailed mechanism for this. To get the geometries consistent, I had to change the atom cloning procedure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Molecule clone now guarantees that each elements of the atom_ list is identical to some element of the full_atom_ list.; - [x] Atom clone now guarantees that ZMATs with computed coordinates carry the computed coordinates over to the clone.; * **User-Facing for Release Notes**; - [x] Fixed a bug where using density fitting for a frequency computation would cause an error unless the symmetry was explicitly set to c1. ## Questions; - [x] Symmetry is used for the purposes of generating displacements, but not for labeling normal modes. Even if we can't take advantage of symmetry for the energetics, we should be able to use symmetry for displacements and normal modes. My hunch is that this is a problem with changing the symmetry of the molecule between the two findif calls, but I'd like Py-side findif to be accepted before looking into this, just in case. Sound good?. ## Checklist; - [x] Tests added for any newly functional features; - [x] [All of full tests run, modulo DFT benchmarks and plugins](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge (as soon as the last review is in)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1108
https://github.com/psi4/psi4/pull/1109:271,Testability,test,tests,271,"## Description; Fix for #1102. We were subtracting ECP's, as (Z + ECP) was > 0 (usually around 10), even when the atom was ghosted (Z == 0). ## Questions; - [x] Should this be applied against master or against #953?. ## Checklist; - [x] [All or relevant fraction of full tests run.](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) Test `dfmp2-ecp` modified to check for correct behaviour.; - [x] Fix #843. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1109
https://github.com/psi4/psi4/pull/1109:363,Testability,test,tests,363,"## Description; Fix for #1102. We were subtracting ECP's, as (Z + ECP) was > 0 (usually around 10), even when the atom was ghosted (Z == 0). ## Questions; - [x] Should this be applied against master or against #953?. ## Checklist; - [x] [All or relevant fraction of full tests run.](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) Test `dfmp2-ecp` modified to check for correct behaviour.; - [x] Fix #843. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1109
https://github.com/psi4/psi4/pull/1109:370,Testability,Test,Test,370,"## Description; Fix for #1102. We were subtracting ECP's, as (Z + ECP) was > 0 (usually around 10), even when the atom was ghosted (Z == 0). ## Questions; - [x] Should this be applied against master or against #953?. ## Checklist; - [x] [All or relevant fraction of full tests run.](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) Test `dfmp2-ecp` modified to check for correct behaviour.; - [x] Fix #843. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1109
https://github.com/psi4/psi4/issues/1110:834,Availability,fault,faulting,834,"conda release: py36hf231b52_0 ; Psi4 1.2.1 ; Rev {HEAD} 406f4de . The DF-CCSD iterations with the FNOCC and DFOCC modules diverge for a repulsive, C2-symmetric methanol dimer depending on how I read the geometry (it seems).; The first CCSD energy is already completely wrong. ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 28.8732411379 28.8732411379 7.9419493294 0; 1 1 1 -305.0567532225 -333.9299943603 62248.5081330950 2; 2 2 1 -392.6124818532 -87.5557286307 1852579.6071174063 3; 3 3 1 -337.1095996214 55.5028822317 1639881736.6452949047 2; ```. The conventional CCSD shows no problems (fnocc/ccenergy tested). The (assumed) dependence on the input revealed itself while making a clean input for reporting.; The SCF part does not show anything odd. Geometry is correctly recognized. Attached tgz file contains the working and faulting input/output.; [tball.tar.gz](https://github.com/psi4/psi4/files/2240627/tball.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1110
https://github.com/psi4/psi4/issues/1110:6,Deployability,release,release,6,"conda release: py36hf231b52_0 ; Psi4 1.2.1 ; Rev {HEAD} 406f4de . The DF-CCSD iterations with the FNOCC and DFOCC modules diverge for a repulsive, C2-symmetric methanol dimer depending on how I read the geometry (it seems).; The first CCSD energy is already completely wrong. ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 28.8732411379 28.8732411379 7.9419493294 0; 1 1 1 -305.0567532225 -333.9299943603 62248.5081330950 2; 2 2 1 -392.6124818532 -87.5557286307 1852579.6071174063 3; 3 3 1 -337.1095996214 55.5028822317 1639881736.6452949047 2; ```. The conventional CCSD shows no problems (fnocc/ccenergy tested). The (assumed) dependence on the input revealed itself while making a clean input for reporting.; The SCF part does not show anything odd. Geometry is correctly recognized. Attached tgz file contains the working and faulting input/output.; [tball.tar.gz](https://github.com/psi4/psi4/files/2240627/tball.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1110
https://github.com/psi4/psi4/issues/1110:240,Energy Efficiency,energy,energy,240,"conda release: py36hf231b52_0 ; Psi4 1.2.1 ; Rev {HEAD} 406f4de . The DF-CCSD iterations with the FNOCC and DFOCC modules diverge for a repulsive, C2-symmetric methanol dimer depending on how I read the geometry (it seems).; The first CCSD energy is already completely wrong. ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 28.8732411379 28.8732411379 7.9419493294 0; 1 1 1 -305.0567532225 -333.9299943603 62248.5081330950 2; 2 2 1 -392.6124818532 -87.5557286307 1852579.6071174063 3; 3 3 1 -337.1095996214 55.5028822317 1639881736.6452949047 2; ```. The conventional CCSD shows no problems (fnocc/ccenergy tested). The (assumed) dependence on the input revealed itself while making a clean input for reporting.; The SCF part does not show anything odd. Geometry is correctly recognized. Attached tgz file contains the working and faulting input/output.; [tball.tar.gz](https://github.com/psi4/psi4/files/2240627/tball.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1110
https://github.com/psi4/psi4/issues/1110:291,Energy Efficiency,Energy,Energy,291,"conda release: py36hf231b52_0 ; Psi4 1.2.1 ; Rev {HEAD} 406f4de . The DF-CCSD iterations with the FNOCC and DFOCC modules diverge for a repulsive, C2-symmetric methanol dimer depending on how I read the geometry (it seems).; The first CCSD energy is already completely wrong. ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 28.8732411379 28.8732411379 7.9419493294 0; 1 1 1 -305.0567532225 -333.9299943603 62248.5081330950 2; 2 2 1 -392.6124818532 -87.5557286307 1852579.6071174063 3; 3 3 1 -337.1095996214 55.5028822317 1639881736.6452949047 2; ```. The conventional CCSD shows no problems (fnocc/ccenergy tested). The (assumed) dependence on the input revealed itself while making a clean input for reporting.; The SCF part does not show anything odd. Geometry is correctly recognized. Attached tgz file contains the working and faulting input/output.; [tball.tar.gz](https://github.com/psi4/psi4/files/2240627/tball.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1110
https://github.com/psi4/psi4/issues/1110:300,Energy Efficiency,Energy,Energy,300,"conda release: py36hf231b52_0 ; Psi4 1.2.1 ; Rev {HEAD} 406f4de . The DF-CCSD iterations with the FNOCC and DFOCC modules diverge for a repulsive, C2-symmetric methanol dimer depending on how I read the geometry (it seems).; The first CCSD energy is already completely wrong. ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 28.8732411379 28.8732411379 7.9419493294 0; 1 1 1 -305.0567532225 -333.9299943603 62248.5081330950 2; 2 2 1 -392.6124818532 -87.5557286307 1852579.6071174063 3; 3 3 1 -337.1095996214 55.5028822317 1639881736.6452949047 2; ```. The conventional CCSD shows no problems (fnocc/ccenergy tested). The (assumed) dependence on the input revealed itself while making a clean input for reporting.; The SCF part does not show anything odd. Geometry is correctly recognized. Attached tgz file contains the working and faulting input/output.; [tball.tar.gz](https://github.com/psi4/psi4/files/2240627/tball.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1110
https://github.com/psi4/psi4/issues/1110:175,Integrability,depend,depending,175,"conda release: py36hf231b52_0 ; Psi4 1.2.1 ; Rev {HEAD} 406f4de . The DF-CCSD iterations with the FNOCC and DFOCC modules diverge for a repulsive, C2-symmetric methanol dimer depending on how I read the geometry (it seems).; The first CCSD energy is already completely wrong. ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 28.8732411379 28.8732411379 7.9419493294 0; 1 1 1 -305.0567532225 -333.9299943603 62248.5081330950 2; 2 2 1 -392.6124818532 -87.5557286307 1852579.6071174063 3; 3 3 1 -337.1095996214 55.5028822317 1639881736.6452949047 2; ```. The conventional CCSD shows no problems (fnocc/ccenergy tested). The (assumed) dependence on the input revealed itself while making a clean input for reporting.; The SCF part does not show anything odd. Geometry is correctly recognized. Attached tgz file contains the working and faulting input/output.; [tball.tar.gz](https://github.com/psi4/psi4/files/2240627/tball.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1110
https://github.com/psi4/psi4/issues/1110:633,Integrability,depend,dependence,633,"conda release: py36hf231b52_0 ; Psi4 1.2.1 ; Rev {HEAD} 406f4de . The DF-CCSD iterations with the FNOCC and DFOCC modules diverge for a repulsive, C2-symmetric methanol dimer depending on how I read the geometry (it seems).; The first CCSD energy is already completely wrong. ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 28.8732411379 28.8732411379 7.9419493294 0; 1 1 1 -305.0567532225 -333.9299943603 62248.5081330950 2; 2 2 1 -392.6124818532 -87.5557286307 1852579.6071174063 3; 3 3 1 -337.1095996214 55.5028822317 1639881736.6452949047 2; ```. The conventional CCSD shows no problems (fnocc/ccenergy tested). The (assumed) dependence on the input revealed itself while making a clean input for reporting.; The SCF part does not show anything odd. Geometry is correctly recognized. Attached tgz file contains the working and faulting input/output.; [tball.tar.gz](https://github.com/psi4/psi4/files/2240627/tball.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1110
https://github.com/psi4/psi4/issues/1110:610,Testability,test,tested,610,"conda release: py36hf231b52_0 ; Psi4 1.2.1 ; Rev {HEAD} 406f4de . The DF-CCSD iterations with the FNOCC and DFOCC modules diverge for a repulsive, C2-symmetric methanol dimer depending on how I read the geometry (it seems).; The first CCSD energy is already completely wrong. ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 28.8732411379 28.8732411379 7.9419493294 0; 1 1 1 -305.0567532225 -333.9299943603 62248.5081330950 2; 2 2 1 -392.6124818532 -87.5557286307 1852579.6071174063 3; 3 3 1 -337.1095996214 55.5028822317 1639881736.6452949047 2; ```. The conventional CCSD shows no problems (fnocc/ccenergy tested). The (assumed) dependence on the input revealed itself while making a clean input for reporting.; The SCF part does not show anything odd. Geometry is correctly recognized. Attached tgz file contains the working and faulting input/output.; [tball.tar.gz](https://github.com/psi4/psi4/files/2240627/tball.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1110
https://github.com/psi4/psi4/pull/1112:290,Testability,Test,Tests,290,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Handle different system functions; - [x] Handle different path structure and separators. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1112
https://github.com/psi4/psi4/pull/1112:366,Testability,test,tests,366,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Handle different system functions; - [x] Handle different path structure and separators. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1112
https://github.com/psi4/psi4/pull/1112:457,Testability,test,tests,457,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Handle different system functions; - [x] Handle different path structure and separators. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1112
https://github.com/psi4/psi4/issues/1113:322,Energy Efficiency,energy,energy,322,"If I have Iodine in a molecule I get wrong atom (from I[53] to Mn[25]) in header in cube file:. example:; ```; molecule mol {; 0 1; I 1.05590 0.00000 0.00000; C -1.05590 0.00000 0.00000; H -1.44970 -1.02090 0.00000; H -1.44980 0.51040 0.88420; H -1.44970 0.51050 -0.88410; }. set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True); set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.17, 0.17, 0.17]; cubeprop(wfn). ```. cube header:; ```. Psi4 Gaussian Cube File.; Property: Dt [e/a0^3]. Isocontour range for 85% of the density: (0.0575417,0); 5 -12.299260 -10.002258 -9.689907; 123 0.170000 0.000000 0.000000; 113 0.000000 0.170000 0.000000; 115 0.000000 0.000000 0.170000; 25 0.000000 0.438284 -0.000000 -0.000001; 6 0.000000 -3.552440 -0.000000 -0.000001; 1 0.000000 -4.296614 -1.929221 -0.000001; 1 0.000000 -4.296803 0.964516 1.670895; 1 0.000000 -4.296614 0.964705 -1.670708; ```; [CH3I.log](https://github.com/psi4/psi4/files/2245612/CH3I.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1113
https://github.com/psi4/psi4/issues/1113:961,Testability,log,log,961,"If I have Iodine in a molecule I get wrong atom (from I[53] to Mn[25]) in header in cube file:. example:; ```; molecule mol {; 0 1; I 1.05590 0.00000 0.00000; C -1.05590 0.00000 0.00000; H -1.44970 -1.02090 0.00000; H -1.44980 0.51040 0.88420; H -1.44970 0.51050 -0.88410; }. set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True); set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.17, 0.17, 0.17]; cubeprop(wfn). ```. cube header:; ```. Psi4 Gaussian Cube File.; Property: Dt [e/a0^3]. Isocontour range for 85% of the density: (0.0575417,0); 5 -12.299260 -10.002258 -9.689907; 123 0.170000 0.000000 0.000000; 113 0.000000 0.170000 0.000000; 115 0.000000 0.000000 0.170000; 25 0.000000 0.438284 -0.000000 -0.000001; 6 0.000000 -3.552440 -0.000000 -0.000001; 1 0.000000 -4.296614 -1.929221 -0.000001; 1 0.000000 -4.296803 0.964516 1.670895; 1 0.000000 -4.296614 0.964705 -1.670708; ```; [CH3I.log](https://github.com/psi4/psi4/files/2245612/CH3I.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1113
https://github.com/psi4/psi4/issues/1113:1014,Testability,log,log,1014,"If I have Iodine in a molecule I get wrong atom (from I[53] to Mn[25]) in header in cube file:. example:; ```; molecule mol {; 0 1; I 1.05590 0.00000 0.00000; C -1.05590 0.00000 0.00000; H -1.44970 -1.02090 0.00000; H -1.44980 0.51040 0.88420; H -1.44970 0.51050 -0.88410; }. set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True); set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.17, 0.17, 0.17]; cubeprop(wfn). ```. cube header:; ```. Psi4 Gaussian Cube File.; Property: Dt [e/a0^3]. Isocontour range for 85% of the density: (0.0575417,0); 5 -12.299260 -10.002258 -9.689907; 123 0.170000 0.000000 0.000000; 113 0.000000 0.170000 0.000000; 115 0.000000 0.000000 0.170000; 25 0.000000 0.438284 -0.000000 -0.000001; 6 0.000000 -3.552440 -0.000000 -0.000001; 1 0.000000 -4.296614 -1.929221 -0.000001; 1 0.000000 -4.296803 0.964516 1.670895; 1 0.000000 -4.296614 0.964705 -1.670708; ```; [CH3I.log](https://github.com/psi4/psi4/files/2245612/CH3I.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1113
https://github.com/psi4/psi4/issues/1114:296,Energy Efficiency,energy,energy,296,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1114
https://github.com/psi4/psi4/issues/1114:881,Energy Efficiency,charge,charge,881,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1114
https://github.com/psi4/psi4/issues/1114:1316,Energy Efficiency,energy,energy,1316,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1114
https://github.com/psi4/psi4/issues/1114:794,Modifiability,variab,variables,794,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1114
https://github.com/psi4/psi4/issues/1114:188,Performance,optimiz,optimize,188,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1114
https://github.com/psi4/psi4/issues/1114:255,Performance,optimiz,optimization,255,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1114
https://github.com/psi4/psi4/issues/1114:656,Performance,optimiz,optimization,656,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1114
https://github.com/psi4/psi4/issues/1114:771,Performance,optimiz,optimized,771,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1114
https://github.com/psi4/psi4/issues/1114:1051,Performance,optimiz,optimization,1051,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1114
https://github.com/psi4/psi4/issues/1114:1085,Performance,optimiz,optimization,1085,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1114
https://github.com/psi4/psi4/pull/1115:345,Deployability,install,installation,345,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Change staging path; - [x] Remove direct calls to `make`; - [x] Remove `DESTDIR`; - [x] Change `cmake` to `${CMAKE_COMMAND}`; - [x] Fix `pthreads` linking; - [x] Fix installation path of `core.pyd`; - [x] Remove hardcoded `.so`; - [x] Processor-specific optimisation flags; - [x] Set minimum MSVC toolset version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1115
https://github.com/psi4/psi4/pull/1115:515,Testability,Test,Tests,515,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Change staging path; - [x] Remove direct calls to `make`; - [x] Remove `DESTDIR`; - [x] Change `cmake` to `${CMAKE_COMMAND}`; - [x] Fix `pthreads` linking; - [x] Fix installation path of `core.pyd`; - [x] Remove hardcoded `.so`; - [x] Processor-specific optimisation flags; - [x] Set minimum MSVC toolset version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1115
https://github.com/psi4/psi4/pull/1115:591,Testability,test,tests,591,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Change staging path; - [x] Remove direct calls to `make`; - [x] Remove `DESTDIR`; - [x] Change `cmake` to `${CMAKE_COMMAND}`; - [x] Fix `pthreads` linking; - [x] Fix installation path of `core.pyd`; - [x] Remove hardcoded `.so`; - [x] Processor-specific optimisation flags; - [x] Set minimum MSVC toolset version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1115
https://github.com/psi4/psi4/pull/1115:682,Testability,test,tests,682,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Change staging path; - [x] Remove direct calls to `make`; - [x] Remove `DESTDIR`; - [x] Change `cmake` to `${CMAKE_COMMAND}`; - [x] Fix `pthreads` linking; - [x] Fix installation path of `core.pyd`; - [x] Remove hardcoded `.so`; - [x] Processor-specific optimisation flags; - [x] Set minimum MSVC toolset version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1115
https://github.com/psi4/psi4/issues/1116:465,Energy Efficiency,power,power,465,"I would like to implement a faster way to do ESP fits than what is found here:; https://github.com/psi4/psi4numpy/tree/master/One-Electron-Property/Restrained-Electrostatic-Potential. The solution above is writing multiple grids on disk, yet the strength of the python and C++ APIs of Psi4 should be to have these in memory and allow for fast multithreaded evaluations. My development proposal would be a little more involved, but also give the Psi4 API a lot more power. I would split the whole OEProp class into:. OEPropCalc; This class will get all currently existing logic to calculate the requested properties. Most properties are already calculated as SharedMatrix. This class will not be allowed to have any kind of output, unless a bulk property is requested (such as a grid).; OEProp; This class gets all output handling, it will only call the respective OEPropCalc functions and then use the existing code for output. Data will be passed between OEPropCalc and OEProp as SharedPointer and therefore not cost overhead. Exception to this rule would be the functions writing grids, which will get an in-memory and a direct write solution.; Reason:; Currently OEProp sometimes exposes data in memory (such as Mulliken charges using wfn.set_array) and sometimes not (such as Multipoles only via stdout or outfile). The approach above would allow internal code use of SharedMatrices directly (OEPropCalc would get a public python API) and keep existing functionality untouched. Once the split is done, I would also split the GridEvaluation routines to either write a grid-XXX.dat (the existing functionality) or to keep the grids in memory (new functionality) and generate them with a grid taken from memory using the existing GridIterator interface. Are there any objections or is somebody else currently working on this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1116
https://github.com/psi4/psi4/issues/1116:1224,Energy Efficiency,charge,charges,1224,"I would like to implement a faster way to do ESP fits than what is found here:; https://github.com/psi4/psi4numpy/tree/master/One-Electron-Property/Restrained-Electrostatic-Potential. The solution above is writing multiple grids on disk, yet the strength of the python and C++ APIs of Psi4 should be to have these in memory and allow for fast multithreaded evaluations. My development proposal would be a little more involved, but also give the Psi4 API a lot more power. I would split the whole OEProp class into:. OEPropCalc; This class will get all currently existing logic to calculate the requested properties. Most properties are already calculated as SharedMatrix. This class will not be allowed to have any kind of output, unless a bulk property is requested (such as a grid).; OEProp; This class gets all output handling, it will only call the respective OEPropCalc functions and then use the existing code for output. Data will be passed between OEPropCalc and OEProp as SharedPointer and therefore not cost overhead. Exception to this rule would be the functions writing grids, which will get an in-memory and a direct write solution.; Reason:; Currently OEProp sometimes exposes data in memory (such as Mulliken charges using wfn.set_array) and sometimes not (such as Multipoles only via stdout or outfile). The approach above would allow internal code use of SharedMatrices directly (OEPropCalc would get a public python API) and keep existing functionality untouched. Once the split is done, I would also split the GridEvaluation routines to either write a grid-XXX.dat (the existing functionality) or to keep the grids in memory (new functionality) and generate them with a grid taken from memory using the existing GridIterator interface. Are there any objections or is somebody else currently working on this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1116
https://github.com/psi4/psi4/issues/1116:1544,Integrability,rout,routines,1544,"I would like to implement a faster way to do ESP fits than what is found here:; https://github.com/psi4/psi4numpy/tree/master/One-Electron-Property/Restrained-Electrostatic-Potential. The solution above is writing multiple grids on disk, yet the strength of the python and C++ APIs of Psi4 should be to have these in memory and allow for fast multithreaded evaluations. My development proposal would be a little more involved, but also give the Psi4 API a lot more power. I would split the whole OEProp class into:. OEPropCalc; This class will get all currently existing logic to calculate the requested properties. Most properties are already calculated as SharedMatrix. This class will not be allowed to have any kind of output, unless a bulk property is requested (such as a grid).; OEProp; This class gets all output handling, it will only call the respective OEPropCalc functions and then use the existing code for output. Data will be passed between OEPropCalc and OEProp as SharedPointer and therefore not cost overhead. Exception to this rule would be the functions writing grids, which will get an in-memory and a direct write solution.; Reason:; Currently OEProp sometimes exposes data in memory (such as Mulliken charges using wfn.set_array) and sometimes not (such as Multipoles only via stdout or outfile). The approach above would allow internal code use of SharedMatrices directly (OEPropCalc would get a public python API) and keep existing functionality untouched. Once the split is done, I would also split the GridEvaluation routines to either write a grid-XXX.dat (the existing functionality) or to keep the grids in memory (new functionality) and generate them with a grid taken from memory using the existing GridIterator interface. Are there any objections or is somebody else currently working on this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1116
https://github.com/psi4/psi4/issues/1116:1744,Integrability,interface,interface,1744,"I would like to implement a faster way to do ESP fits than what is found here:; https://github.com/psi4/psi4numpy/tree/master/One-Electron-Property/Restrained-Electrostatic-Potential. The solution above is writing multiple grids on disk, yet the strength of the python and C++ APIs of Psi4 should be to have these in memory and allow for fast multithreaded evaluations. My development proposal would be a little more involved, but also give the Psi4 API a lot more power. I would split the whole OEProp class into:. OEPropCalc; This class will get all currently existing logic to calculate the requested properties. Most properties are already calculated as SharedMatrix. This class will not be allowed to have any kind of output, unless a bulk property is requested (such as a grid).; OEProp; This class gets all output handling, it will only call the respective OEPropCalc functions and then use the existing code for output. Data will be passed between OEPropCalc and OEProp as SharedPointer and therefore not cost overhead. Exception to this rule would be the functions writing grids, which will get an in-memory and a direct write solution.; Reason:; Currently OEProp sometimes exposes data in memory (such as Mulliken charges using wfn.set_array) and sometimes not (such as Multipoles only via stdout or outfile). The approach above would allow internal code use of SharedMatrices directly (OEPropCalc would get a public python API) and keep existing functionality untouched. Once the split is done, I would also split the GridEvaluation routines to either write a grid-XXX.dat (the existing functionality) or to keep the grids in memory (new functionality) and generate them with a grid taken from memory using the existing GridIterator interface. Are there any objections or is somebody else currently working on this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1116
https://github.com/psi4/psi4/issues/1116:1183,Security,expose,exposes,1183,"I would like to implement a faster way to do ESP fits than what is found here:; https://github.com/psi4/psi4numpy/tree/master/One-Electron-Property/Restrained-Electrostatic-Potential. The solution above is writing multiple grids on disk, yet the strength of the python and C++ APIs of Psi4 should be to have these in memory and allow for fast multithreaded evaluations. My development proposal would be a little more involved, but also give the Psi4 API a lot more power. I would split the whole OEProp class into:. OEPropCalc; This class will get all currently existing logic to calculate the requested properties. Most properties are already calculated as SharedMatrix. This class will not be allowed to have any kind of output, unless a bulk property is requested (such as a grid).; OEProp; This class gets all output handling, it will only call the respective OEPropCalc functions and then use the existing code for output. Data will be passed between OEPropCalc and OEProp as SharedPointer and therefore not cost overhead. Exception to this rule would be the functions writing grids, which will get an in-memory and a direct write solution.; Reason:; Currently OEProp sometimes exposes data in memory (such as Mulliken charges using wfn.set_array) and sometimes not (such as Multipoles only via stdout or outfile). The approach above would allow internal code use of SharedMatrices directly (OEPropCalc would get a public python API) and keep existing functionality untouched. Once the split is done, I would also split the GridEvaluation routines to either write a grid-XXX.dat (the existing functionality) or to keep the grids in memory (new functionality) and generate them with a grid taken from memory using the existing GridIterator interface. Are there any objections or is somebody else currently working on this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1116
https://github.com/psi4/psi4/issues/1116:571,Testability,log,logic,571,"I would like to implement a faster way to do ESP fits than what is found here:; https://github.com/psi4/psi4numpy/tree/master/One-Electron-Property/Restrained-Electrostatic-Potential. The solution above is writing multiple grids on disk, yet the strength of the python and C++ APIs of Psi4 should be to have these in memory and allow for fast multithreaded evaluations. My development proposal would be a little more involved, but also give the Psi4 API a lot more power. I would split the whole OEProp class into:. OEPropCalc; This class will get all currently existing logic to calculate the requested properties. Most properties are already calculated as SharedMatrix. This class will not be allowed to have any kind of output, unless a bulk property is requested (such as a grid).; OEProp; This class gets all output handling, it will only call the respective OEPropCalc functions and then use the existing code for output. Data will be passed between OEPropCalc and OEProp as SharedPointer and therefore not cost overhead. Exception to this rule would be the functions writing grids, which will get an in-memory and a direct write solution.; Reason:; Currently OEProp sometimes exposes data in memory (such as Mulliken charges using wfn.set_array) and sometimes not (such as Multipoles only via stdout or outfile). The approach above would allow internal code use of SharedMatrices directly (OEPropCalc would get a public python API) and keep existing functionality untouched. Once the split is done, I would also split the GridEvaluation routines to either write a grid-XXX.dat (the existing functionality) or to keep the grids in memory (new functionality) and generate them with a grid taken from memory using the existing GridIterator interface. Are there any objections or is somebody else currently working on this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1116
https://github.com/psi4/psi4/issues/1117:270,Availability,recover,recover,270,"While attempting to run an ODC-12 computation, the correlation correction to the 1RDM (tau) didn't converge. I can't quite tell what ODC-12 did in response to this, but the effect was to zero the orbital gradient and make the energy negative NaN. The code should either recover gracefully if possible or, if not possible, quit ASAP. For the benefit of @mdav2 and @mlestep there's a side problem with the SCF converging to the wrong state. I'll add this as a post to the SCF topic when I've investigated further. I can tell you now that the ""true"" ground state seems to break CFOUR. [odc12_nan.txt](https://github.com/psi4/psi4/files/2254898/odc12_nan.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1117
https://github.com/psi4/psi4/issues/1117:226,Energy Efficiency,energy,energy,226,"While attempting to run an ODC-12 computation, the correlation correction to the 1RDM (tau) didn't converge. I can't quite tell what ODC-12 did in response to this, but the effect was to zero the orbital gradient and make the energy negative NaN. The code should either recover gracefully if possible or, if not possible, quit ASAP. For the benefit of @mdav2 and @mlestep there's a side problem with the SCF converging to the wrong state. I'll add this as a post to the SCF topic when I've investigated further. I can tell you now that the ""true"" ground state seems to break CFOUR. [odc12_nan.txt](https://github.com/psi4/psi4/files/2254898/odc12_nan.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1117
https://github.com/psi4/psi4/issues/1117:270,Safety,recover,recover,270,"While attempting to run an ODC-12 computation, the correlation correction to the 1RDM (tau) didn't converge. I can't quite tell what ODC-12 did in response to this, but the effect was to zero the orbital gradient and make the energy negative NaN. The code should either recover gracefully if possible or, if not possible, quit ASAP. For the benefit of @mdav2 and @mlestep there's a side problem with the SCF converging to the wrong state. I'll add this as a post to the SCF topic when I've investigated further. I can tell you now that the ""true"" ground state seems to break CFOUR. [odc12_nan.txt](https://github.com/psi4/psi4/files/2254898/odc12_nan.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1117
https://github.com/psi4/psi4/issues/1118:1169,Availability,error,errors,1169,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1118
https://github.com/psi4/psi4/issues/1118:1408,Availability,error,error,1408,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1118
https://github.com/psi4/psi4/issues/1118:1514,Availability,down,down,1514,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1118
https://github.com/psi4/psi4/issues/1118:1522,Availability,error,error,1522,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1118
https://github.com/psi4/psi4/issues/1118:18,Deployability,update,updated,18,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1118
https://github.com/psi4/psi4/issues/1118:1667,Deployability,install,installation,1667,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1118
https://github.com/psi4/psi4/issues/1118:280,Integrability,message,message,280,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1118
https://github.com/psi4/psi4/issues/1118:1414,Integrability,message,message,1414,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1118
https://github.com/psi4/psi4/issues/1118:221,Modifiability,config,configure,221,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1118
https://github.com/psi4/psi4/issues/1118:1564,Modifiability,config,configure,1564,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1118
https://github.com/psi4/psi4/pull/1119:40,Energy Efficiency,energy,energy,40,"This fixes #977 . ## Description; Make `energy(cbs, ..., bsse_type=[...])` calls work the expected way - calculating and returning overall interaction energies. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for #977. ## Questions; - [ ] Do we need a test for this?. ## Checklist; - [ ] Tests added for any new features; - [x] [All tests (with the exception of 179, 376, 377 which t/o) run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1119
https://github.com/psi4/psi4/pull/1119:325,Testability,test,test,325,"This fixes #977 . ## Description; Make `energy(cbs, ..., bsse_type=[...])` calls work the expected way - calculating and returning overall interaction energies. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for #977. ## Questions; - [ ] Do we need a test for this?. ## Checklist; - [ ] Tests added for any new features; - [x] [All tests (with the exception of 179, 376, 377 which t/o) run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1119
https://github.com/psi4/psi4/pull/1119:361,Testability,Test,Tests,361,"This fixes #977 . ## Description; Make `energy(cbs, ..., bsse_type=[...])` calls work the expected way - calculating and returning overall interaction energies. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for #977. ## Questions; - [ ] Do we need a test for this?. ## Checklist; - [ ] Tests added for any new features; - [x] [All tests (with the exception of 179, 376, 377 which t/o) run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1119
https://github.com/psi4/psi4/pull/1119:406,Testability,test,tests,406,"This fixes #977 . ## Description; Make `energy(cbs, ..., bsse_type=[...])` calls work the expected way - calculating and returning overall interaction energies. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for #977. ## Questions; - [ ] Do we need a test for this?. ## Checklist; - [ ] Tests added for any new features; - [x] [All tests (with the exception of 179, 376, 377 which t/o) run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1119
https://github.com/psi4/psi4/pull/1119:545,Testability,test,tests,545,"This fixes #977 . ## Description; Make `energy(cbs, ..., bsse_type=[...])` calls work the expected way - calculating and returning overall interaction energies. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for #977. ## Questions; - [ ] Do we need a test for this?. ## Checklist; - [ ] Tests added for any new features; - [x] [All tests (with the exception of 179, 376, 377 which t/o) run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1119
https://github.com/psi4/psi4/pull/1120:46,Integrability,interface,interface,46,## Description; First look at psi4-optking3.0 interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] replaces optking 2.0 call with optking 3.0 (python). ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1120
https://github.com/psi4/psi4/pull/1120:259,Testability,Test,Tests,259,## Description; First look at psi4-optking3.0 interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] replaces optking 2.0 call with optking 3.0 (python). ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1120
https://github.com/psi4/psi4/pull/1120:333,Testability,test,tests,333,## Description; First look at psi4-optking3.0 interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] replaces optking 2.0 call with optking 3.0 (python). ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1120
https://github.com/psi4/psi4/pull/1120:424,Testability,test,tests,424,## Description; First look at psi4-optking3.0 interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] replaces optking 2.0 call with optking 3.0 (python). ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1120
https://github.com/psi4/psi4/pull/1122:50,Availability,error,error,50,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1122
https://github.com/psi4/psi4/pull/1122:190,Availability,down,down,190,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1122
https://github.com/psi4/psi4/pull/1122:469,Availability,error,errors,469,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1122
https://github.com/psi4/psi4/pull/1122:731,Deployability,update,update,731,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1122
