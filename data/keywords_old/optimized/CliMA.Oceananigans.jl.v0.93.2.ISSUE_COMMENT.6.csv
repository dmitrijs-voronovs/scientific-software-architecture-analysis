quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"I have added some tests, and everything is passing, including some tests for distributed immersed boundary grids that compare `active_cells_map = true` solutions with `active_cells_map = false` solutions in the serial version so I am quite confident the implementation works.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3690#issuecomment-2356982852:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3690#issuecomment-2356982852,2,['test'],['tests']
Testability,"I have included `closure` in `ShallowWaterModel` and I believe that is working correctly. However, when I try running `examples/test_advection_shallow_water.jl` I find that I get `NaN` after the first time step. . I know that the operator `∇_κ_∇c` does work with `Flat` as I have changed the one-dimensinal-diffusion-example and that does not have a problem. I guess I need to figure out what is not compatable with this operator and shallow water. If anyone has any idea what's wrong please let me know. All tests pass and I could merge but I think I will wait to get this sorted out before I merge. Might be good to add in a test afterwards to make sure that `ShallowWaterModel` can diffuse tracers without a problem.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1510#issuecomment-808801571:509,test,tests,509,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1510#issuecomment-808801571,2,['test'],"['test', 'tests']"
Testability,"I have incurred a problem with our `ScalarDiffusivity`, which is exposed in enzyme tests. . The `N` parameter of `ScalarDiffusivity` and `ScalarBiharmonicDiffusivity`, which tells us how large the halo size has to be, was in the wrong position. I tried to fix this problem by switching a couple of parameters around (I need to add a unit test for that before this PR is merged), but this exposed a problem with the constructor that is not type-stable. We can pass any `required_halo_size,` and the resulting type will differ (which is quite fine code-wise but not for auto diff). I have changed the constructor to accept `Val(halo_size_required)` instead of an integer, and this fixes the tests, but I am not completely convinced with this solution (Why would we need to pass `Val(Int)` instead of an integer?). What would the options be here? Completely change where we store the buffer size (quite annoying because it is nice to abstract it away in the parameters of the type)? Is there a way to stabilize the constructor type without doing this hacky change to the UI?. I should probably open an issue so we can discuss this topic. We should not merge this PR until this is solved.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2327763947:83,test,tests,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2327763947,3,['test'],"['test', 'tests']"
Testability,I have never tried benchmarking this. maybe the gain in performance is negligible. I guess it will depend on the number of particles and the size of the grid.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3356#issuecomment-1775560431:19,benchmark,benchmarking,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3356#issuecomment-1775560431,1,['benchmark'],['benchmarking']
Testability,"I have written a script, with much help from @ali-ramadhan and @glwagner , that computes the rates of convergence for the one dimensinal constant advection case using two approaches: the 1st to 6th order schemes that I mentioned before, and the 2nd to 5th order schemes that are in Oceananigans. The results are shown below. ![convergence_rates_all](https://user-images.githubusercontent.com/8239041/102648898-511fa580-4136-11eb-99c9-a02b85465c96.png). ![convergence_rates_Oceananigans](https://user-images.githubusercontent.com/8239041/102648908-5381ff80-4136-11eb-8feb-de736ec30438.png). **Good news:** Oceananigams produces the correct slopes within error for all the cases. **Next problem:** Figure out why we didn't get the right slope in the other calculation from before and fix whatever the bug might be. You can find the code [here](https://github.com/CliMA/Oceananigans.jl/blob/fjp/update-convergence-tests/validation/new_framework/rates_of_convergence.jl)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-748252029:911,test,tests,911,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-748252029,1,['test'],['tests']
Testability,I haven't done any profiling --- just simple benchmarks. (Short example coming soon),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481266449:45,benchmark,benchmarks,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481266449,2,['benchmark'],['benchmarks']
Testability,I haven't looked at performance / GPU compilation in detail. I do think there is a type inference issue somewhere in this PR now because the flow over hills experiment is 7-8x slower on my laptop even without any immersed boundary condition. This likely indicates a problem with type inference in the flux divergence function (might also prevent GPU compilation). So we'll have to solve that and also add tests for CPU + GPU...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100751806:405,test,tests,405,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100751806,1,['test'],['tests']
Testability,"I implemented a simple new validation test that runs a two-dimensional barotropic turbulence problem with `ExplicitFreeSurface`: https://github.com/CliMA/Oceananigans.jl/blob/ss/multi_region/validation/multi_region/multi_region_turbulence.jl. Here's some miscellaneous notes:. * `WENO5(vector_invariant=VelocityStencil())` is faster than `WENO5()`. Note that when we write ""WENO5(vector_invariant=stencil)"" we mean that we are using the vector invariant formulation of momentum with a WENO reconstruction for vorticity, using either ""velocity"" or ""vorticity"" in the WENO smoothness metric. The ""WENO, Vector Invariant"" scheme is probably faster because it has fewer WENO interpolations (just one per momentum component rather than 2).; * `WENO5(vector_invariant=VelocityStencil())` blows up with `MultiRegionGrid`. Some timings:. | Resolution | Grid | Advection scheme | Wall time for 1000 time steps |; | ------------- | ------------- | -- | -- |; | 128^2 | `RegularRectilinearGrid` | `WENO5()` | 3.9 s |; | 128^2 | `MultiRegionGrid` | `WENO5()` | 7.4 s |; | 128^2 | `RegularRectilinearGrid` | `WENO5(vector_invariant=VelocityStencil())` | 2.8 s |; | 256^2 | `RegularRectilinearGrid` | `WENO5()` | 14.3 s |; | 256^2 | `MultiRegionGrid ` | `WENO5()` | 18.9 s |; | 256^2 | `RegularRectilinearGrid` | `WENO5(vector_invariant=VelocityStencil())` | 10.3 s |; | 512^2 | `RegularRectilinearGrid` | `WENO5()` | 56.3 s |; | 512^2 | `MultiRegionGrid ` | `WENO5()` | 62.3 s |; | 512^2 | `RegularRectilinearGrid` | `WENO5(vector_invariant=VelocityStencil())` | 40.3 s |. I propose that we. 1) Close the gap between multi-region and single-region performance?; 2) Understand why WENO vector invariant blows up on a multi region grid.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1107942730:38,test,test,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1107942730,2,['test'],['test']
Testability,"I implemented the clamping from #3787 and it seems to have fixed the issue:. # GridFittedBottom. https://github.com/user-attachments/assets/1c6e4be4-ae80-42b3-9489-fe8edfb24d34. # PartialCellBottom. https://github.com/user-attachments/assets/91aa2bce-fd9e-4d74-b261-668b36cf786c. I'm not sure I really understand why it would make a difference. I'm wondering @simone-silvestri are you sure that your test was using this code?. Either way I see no reason not to merge this. Perhaps we will continue to find improvements for PartialCellBottom but I think this is ready to be used in an example. Note that in the internal tide case the partial cells have the interesting effect of weakening the vertical velocity. That could make sense if the topography is somehow ""less effectively steep"" than in the full cell case.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3682#issuecomment-2373911278:400,test,test,400,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3682#issuecomment-2373911278,1,['test'],['test']
Testability,"I installed Julia and set up Oceananigans on my laptop and when I try running `test_shallow_water_mode.jl` I get an error. I suspect this is because of my laptop more than the PR but any ideas what's going on here? . ```[2021/01/07 11:52:45.500] INFO Testing time-stepping ShallowWaterModels [CPU(), (Periodic, Periodic, Bounded)]...; Time-stepping ShallowWaterModels [CPU(), (Periodic, Periodic, Bounded)]: Error During Test at /home/fpoulin/software/Oceananigans.jl/test/test_shallow_water_models.jl:82; Test threw exception; Expression: time_stepping_shallow_water_model_works(arch, topo, nothing); TaskFailedException:; BoundsError; Stacktrace:; [1] getindex at ./number.jl:83 [inlined]; [2] advective_tracer_flux_x at /home/fpoulin/software/Oceananigans.jl/src/Advection/upwind_biased_advective_fluxes.jl:105 [inlined]; [3] h_solution_tendency at /home/fpoulin/software/Oceananigans.jl/src/Models/ShallowWaterModels/solution_and_tracer_tendencies.jl:71 [inlined]; [4] cpu_calculate_Gh! at /home/fpoulin/.julia/packages/KernelAbstractions/jAutM/src/macros.jl:230 [inlined]; [5] __thread_run(::Int64, ::Int64, ::Int64, ::KernelAbstractions.Kernel{KernelAbstractions.CPU,KernelAbstractions.NDIterat```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-756242376:251,Test,Testing,251,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-756242376,4,"['Test', 'test']","['Test', 'Testing', 'test']"
Testability,"I just copied it from the bc which require a minus sign because of our sign convention (forcing do not). (remove the minus in lines 104 and 105) That might also help with the western boundary currents....; > . Yes, I agree that the ACC is going in the wrong direction, which suggests there is a sign error. When I look in `solution_and_tracer_tendencies.jl`, I see a `+` in front of forcings, so that looks right. Maybe there is a problem with how the wind stress is specified? . Is it easy to plot the wind stress? I imagine that would clarify what's going on. > It is also true that there is no density/salinity structure here... And the hydrostatic model is initialized with stratified ocean (maybe you want to play with the initial condition of `h`?). Also bathymetry is absent (which nucleates the eddies in the southern ocean during spinup).; > . I think starting off with `h` as constant, is a good choice. Certainly bathymetry would have an impact, but it should give us western boundary currents in the big oceans. > We should probably discuss how to implement bathymetry correctly, because I am not completely sure that what is done here is correct. On the other hand, I can also provide a spectrally ""smoothed"" bathymetry which might help with stability. @francispoulin let me know if that could be a good idea; > . I agree that it is important to do the bathymetry correctly. Smoothing it certainly would help. My first thought was to try it with the topography with 1/10 or 1/100 the magntiude, to see if that would run with the same time step. However, maybe we should confirm that the wind stress is correct?. > To color the continents in black you can set to `NaN` all the vorticity points identically equal to zero and then `heatmap(vorticity, nan_color=:black)`. I tried the following but with no difference Did you mean something else?. ```heatmap!(ax, x, y, ζ′, colormap=:balance, colorrange=(-2e-5, 2e-5), nan_color=:black)```. Also, I noticed the tests pass. That's nice to see!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1128050024:2473,test,tests,2473,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1128050024,1,['test'],['tests']
Testability,"I just edited an old benchmarkable incompressible model script to only have the model setup and time stepping. I did not profile from the start, and only profiled the time_step! function line.; I feel like the profiles are more dependent on which system have which profiler, so it might make sense to just add a few simple scripts in `benchmark` that just consist of model setup and timestep and those can be called profiliables/benchmarkables.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890004382:21,benchmark,benchmarkable,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890004382,6,['benchmark'],"['benchmark', 'benchmarkable', 'benchmarkables']"
Testability,I just finished a strong scaling multithreaded benchmark with the nonhydrostatic model with grid size being 256 cubed.; I'll venture a wild guess and say that the weak scaling shallow water model's efficiency change is not monotonic due to smaller grid sizes not saturating the CPUs. Not sure if that's still a possible explanation when the grid size scales proportional to number of threads in weak scaling. Here are the strong scaling nonhydrostatic results. I'm currently working on converting the script to do weak scaling to see if a small grid size with too many threads is what's causing very low efficiencies towards the end.; <html>; <body>; <!--StartFragment-->. size | threads | slowdown | efficiency | memory | allocs; -- | -- | -- | -- | -- | --; 256 | 1 | 1.0 | 1.0 | 1.0 | 1.0; 256 | 2 | 0.992966 | 0.503542 | 4.14014 | 152.109; 256 | 4 | 0.501089 | 0.498913 | 2.17724 | 50.2532; 256 | 8 | 0.324366 | 0.385367 | 1.94899 | 29.191; 256 | 16 | 0.244788 | 0.255323 | 2.12262 | 18.2106; 256 | 32 | 0.263339 | 0.118668 | 2.87624 | 16.3167. <!--EndFragment-->; </body>; </html>,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-890008703:47,benchmark,benchmark,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-890008703,1,['benchmark'],['benchmark']
Testability,"I just pushed the branch _exactly_ the way I just tested them here (i.e. with a bunch of things in `docs/make.jl` commented out). The docs were successfully built for me in about 30 min, so it'd be a red flag if it takes much longer than that to build it on buildkite.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1478525922:50,test,tested,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1478525922,1,['test'],['tested']
Testability,"I just tested `DiscreteForcing` and I have almost the same slowdown (I completed 0.20% of the simulation, compared to 0.15% using `ContinuousForcing`). Here's what I used:. ```julia; Z(k) = @inbounds -grid.Lz + grid.Δz*(k-1/2); bottom_mask(k) = @inbounds exp(-(Z(k)+80)^2 / ((2*8)^2)). sponge_u_disc(i, j, k, grid, clock, model_fields) = @inbounds - rate * bottom_mask(k) * (model_fields.u[i, j, k] -0); sponge_v_disc(i, j, k, grid, clock, model_fields) = @inbounds - rate * bottom_mask(k) * (model_fields.v[i, j, k] -0); sponge_w_disc(i, j, k, grid, clock, model_fields) = @inbounds - rate * bottom_mask(k) * (model_fields.w[i, j, k] -0). forc_u = Forcing(sponge_u_disc, discrete_form=true); forc_v = Forcing(sponge_v_disc, discrete_form=true); forc_w = Forcing(sponge_w_disc, discrete_form=true). forcing = (u=forc_u, v=forc_v, w=forc_w); ```. I may have made rookie errors here as well since this is my first time using `DiscreteForcing`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875667870:7,test,tested,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875667870,1,['test'],['tested']
Testability,"I just tested this with Julia v1.10 and Oceananigans v0.90.11 and the problem seems to have gone away. A simulation that had taken 18 minutes to initialize now takes about 20 seconds! I think we can close this issue now, but I'm still not sure what the underlying issue was, so something to keep in mind as @glwagner says above.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-2009053457:7,test,tested,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-2009053457,1,['test'],['tested']
Testability,I like @glwagner 's suggestions. . One question: if we remove examples can they still reside in tests of somewhere else where people can dig them up if they want to see them or will they disappear?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2326#issuecomment-1062848647:96,test,tests,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2326#issuecomment-1062848647,1,['test'],['tests']
Testability,"I ll go ahead and merge this, in the end this PR calculates the tapering factor as the minimum of the tapering at `fcc`, `cfc` and `ccf`. Haven't really tested for stability but I guess @sandreza will run 1 degree simulations which will give us an answer. If this method is less stable we can always revert to calculating the tapering _inside_ the tensor although that gives us a flux which is not formally adiabatic",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2664#issuecomment-1191619763:153,test,tested,153,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2664#issuecomment-1191619763,1,['test'],['tested']
Testability,"I ll take a look. weird, the test that fails passes on my computer, I ll try on tartarus",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2175#issuecomment-1020261606:29,test,test,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2175#issuecomment-1020261606,1,['test'],['test']
Testability,"I looked at one of the errors and saw the message below. I think this means we need to restart the tests. ```; ERROR: LoadError: LoadError: SystemError: opening file ""/data5/glwagner/.julia-8057/compiled/v1.6/Oceananigans/hU93i_xHskz.ji"": No such file or directory;  ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2645#issuecomment-1178207246:99,test,tests,99,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2645#issuecomment-1178207246,1,['test'],['tests']
Testability,"I looked at one of the failed tests in shallow water model and it seems to be at these lines below. ```; @testset ""Must be Flat in the vertical"" begin; grid = RectilinearGrid(size=(1, 1, 1), extent=(1, 1, 1), topology=(Periodic,Periodic,Bounded)); @test_throws AssertionError ShallowWaterModel(grid=grid, gravitational_acceleration=1) ; ```; I tried it locally and the test passes, so I'm a bit confused as to the problem.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144196914:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144196914,4,"['Assert', 'test']","['AssertionError', 'test', 'tests', 'testset']"
Testability,I looked at the error and see this but don't pretend to know why this has happened. ``` ; Checkpointer [GPU]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_checkpointer.jl:19;   | Expression: all(test_model.timestepper.G⁻.w.data .≈ true_model.timestepper.G⁻.w.data);  ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-921755394:110,Test,Test,110,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-921755394,2,"['Test', 'test']","['Test', 'test']"
Testability,"I made a simple script for testing, and it takes 3 minutes to run on my PC \(on either CPU or GPU\). This is a 2D simulation initialized with a lateral buoyancy gradient. The top is tilted. The figure shows the comparison between the default solver and the `HeptadiagonalIterativeSolver`. The default FFT solver produces pixelated patterns near the top boundary and deep zonal jets in the ocean interior. Besides, I tired the `HeptadiagonalIterativeSolver` with the FFT-based solver as a preconditioner. It did not crash for this script and produced almost the same as the `HeptadiagonalIterativeSolver` with no preconditioner. ![u](https://github.com/CliMA/Oceananigans.jl/assets/49335616/104a8b9b-4b09-4d36-a24d-64625320e0ba). ```Julia; using Printf; using Oceananigans; using Oceananigans.Models.NonhydrostaticModels: ImmersedPoissonSolver. # ---------------------------------------------------------------------- #; # Define Parameters. # Numerical Technic; const arch = CPU(); const time_stepper = :RungeKutta3; const advection = WENO(). # Grid; const Nx = 1; const Ny = 200; const Nz = 50; const Lx = 100.0e3; const Ly = 200.0e3; const Lz = 50.0e3. const Δz = Lz / 2 # elevation difference at the top. # Time Stepping; const Δt = 1800.0. # Physical Parameters; const diffusivity = 1.0e-4; const Pr = 1.0; const f₀ = 1.0e-4; const Δb = 1.0e-6 # buoyancy difference at the top. # Output; const output_interval = 1; const deflatelevel = 4. # ---------------------------------------------------------------------- #; # Define Utils. # Height at Top; @inline function z_top(y::R) where {R<:Real}; return Lz - (Δz / Ly) * y; end. # Viscosity; const viscosity = Pr * diffusivity. # Initial Fields; @inline function b_initial(x::R, y::R, z::R) where {R<:Real}; ϵ = 100 * eps(R); return (Δb / Ly) * y + randn() * ϵ; end. # ---------------------------------------------------------------------- #; # Define the Simulation. # Grid; ib_grid = begin; underlying_grid = RectilinearGrid(; arch,; size = (Nx, Ny",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3552#issuecomment-2070993577:27,test,testing,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3552#issuecomment-2070993577,2,['test'],['testing']
Testability,I made an attempt in #2701 to put the `allowscalar` in the places that the tests required them and remove the general allowscalar statement that @simone-silvestri points out above. But I couldn't finish the attempt... I was getting so many tests failing and I admit I got worn out in the end and stopped that effort......,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3039#issuecomment-1492734079:75,test,tests,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3039#issuecomment-1492734079,2,['test'],['tests']
Testability,"I mean the new user interface for `ImmersedBoundaryCondtion`. Previously, I tried to do a simulation with heating distributed on an irregular bottom, and I found that I had to use `ImmersedBoundaryCondition(top = the_bottom_heating)` instead of `ImmersedBoundaryCondition(bottom = the_bottom_heating)` after some testing. I felt this strange and reported this behavior to Simone. Then he opened this issue, because it affects his simulations as well. I am sorry for confusing you, since you did not know Simone and I had some discussion on issue before.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3141#issuecomment-1583286782:313,test,testing,313,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3141#issuecomment-1583286782,1,['test'],['testing']
Testability,I meant generating it on main and testing it on 0.76.5 or 0.76.8. I guess it will not make a difference though,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439363214:34,test,testing,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439363214,1,['test'],['testing']
Testability,I merged main but cancelled the CI to avoid clutter. We should restart the CI when there is no other PR running CI tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2147#issuecomment-1013760179:115,test,tests,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2147#issuecomment-1013760179,1,['test'],['tests']
Testability,"I might have been a bit too quick to merge as it seems that some tests are failing on master, and I presume as a result, is why we are not getting the new example in the docs. . @navidcy do you happen to know what's gone wrong? . I see that `align` is still in the example so I wonder if we got confuses in our updates and don't have the latest and greatest version?. ```; # ```math; # \begin{align}; # \overline{\eta}(y) & = - Δη \tanh(y) ,; # \overline{u}(y) & = U \sech^2(y) .; # \end{align}; # ```; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-798925559:65,test,tests,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-798925559,1,['test'],['tests']
Testability,I missed the previous comments. This can occur if SpecialFunctions is available in the global environment. You need to delete the global environment and then test.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1707#issuecomment-849301841:158,test,test,158,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1707#issuecomment-849301841,1,['test'],['test']
Testability,"I noticed there was a problem with the halos so I hard coded it to be `(3,3)`, which is appropriate for the default advection scheme. Now the example seems to yield `NaNs`, which is another mystery. Maybe the halos are not set correctly?. ```; Time stepping ShallowWaterModel: Time stepping ShallowWaterModel: Error During Test at Error During Test at Time stepping ShallowWaterModel: /storage7/buildkite-agent/builds/tartarus-mit-edu-11/clima/oceananigans/test/test_distributed_models.jl:496; --; &nbsp; | Got exception outside of a @test; &nbsp; | Time stepping ShallowWaterModel: time = 1.9999999999999998, iteration = 2: NaN found in field uh. Aborting simulation.; &nbsp; | Stacktrace:; &nbsp; | [1] error(::String) at ./error.jl:33; &nbsp; | [2] error_if_nan_in_field at /storage7/buildkite-agent/builds/tartarus-mit-edu-11/clima/oceananigans/src/Diagnostics/nan_checker.jl:22 [inlined]; &nbsp; | [3] run_diagnostic!(::NaNChecker{IterationInterval,NamedTuple{(:uh,),Tuple{Field{Face,Center,Center,CPU,OffsetArray{Float64,3,Array{Float64,3}},RegularRectilinearGrid{Float64,Periodic,Periodic,Flat,OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},Float64,NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{HaloCommunication,Oceananigans.Distributed.HaloCommunicationRanks{Int64,Int64}},BoundaryCondition{HaloCommunication,Oceananigans.Distributed.HaloCommunicationRanks{Int64,Int64}}},CoordinateBoundaryConditions{Nothing,Nothing}}}}}}}, ::ShallowWaterModel{RegularRectilinearGrid{Float64,Periodic,Periodic,Flat,OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},MultiCPU{RegularRectilinearGrid{Float64,Periodic,Periodic,Flat,OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843222534:323,Test,Test,323,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843222534,4,"['Test', 'test']","['Test', 'test']"
Testability,I only saw the problem in Single Column models. In #2786 I added tests for Slice XY models + Ensembles of those and was not seeing this same issue there.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308122540:65,test,tests,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308122540,1,['test'],['tests']
Testability,"I prefer to have passing tests before a merge to master, even in cases where we ""think"" it's fine.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1844#issuecomment-877447072:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1844#issuecomment-877447072,1,['test'],['tests']
Testability,"I presume the time step wizard would use this new function? If yes, then maybe we could add a test that uses the wizard for one time step.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1751#issuecomment-866089434:94,test,test,94,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1751#issuecomment-866089434,1,['test'],['test']
Testability,"I propose we merge this and add a convergence test later, since the convergence test work will take time to complete and we are reasonably sure this PR is correct.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1806#issuecomment-872654930:46,test,test,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1806#issuecomment-872654930,2,['test'],['test']
Testability,"I put a ton of effort into making it so that we could include one file and run the tests. So if its broken or wasn't a complete solution hopefully we can fix it, or make it work more generally. It's more annoying to have to include the filename as a global variable. I don't like that workflow as much. When we can include a file, we can rapidly iterate because we don't have to wait for things to recompile.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1997573228:83,test,tests,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1997573228,1,['test'],['tests']
Testability,I put together some utilities for testing multithreading versus Base.threads for a simple kernel:. https://github.com/glwagner/multithreaded-stencils. I've used a new repo because it might be worthwhile to test threaded computations in other programming languages.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-885981005:34,test,testing,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-885981005,4,['test'],"['test', 'testing']"
Testability,"I ran a few tests using the [Bickley Jet](https://github.com/CliMA/Oceananigans.jl/blob/glw-vw/grid-fitted-incompressible-model/validation/immersed_boundaries/immersed_bickley_jet.jl) with an immersed top wall from the validation script. . ### Surface Normal Velocity; We can easily look at the surface normal velocity of the immersed wall (which should be zero) with increased resolution and see that it is converging nicely, as this method should be exact except for the pressure correction, which will scale. ![Bickley_normal](https://user-images.githubusercontent.com/67593861/122986244-2e807a80-d36d-11eb-924a-074ca0ad127c.png). ### Tracer Conservation; We can also look at tracer conservation. The initial concentration is sinusoidal, so the area integrated concentration is zero over the domain initially. I've plotted both the IBM and non-IBM (lighter colors) results to see the differences. This one is on a log plot. You can see that leakage is happening in the IBM versions. It's hard to say how bad the leakage is here, and it'll probably be better to consider an initial constant concentration rather than sinusoidal to see how much leakage is occurring due to the immersed solid. ![volint_Concentration_log](https://user-images.githubusercontent.com/67593861/122986580-a058c400-d36d-11eb-9a7c-e3e8d2a7367e.png). It might be easier to see what is going on in the IBM cases without the log scaling:. ![volint_Concentration](https://user-images.githubusercontent.com/67593861/122989251-984e5380-d370-11eb-88cc-ccf4444fb331.png). ### Integrated Boundary Stress; Finally, I looked at the integrated boundary stress along the top wall. The error between the nonIBM and IBM versions at these same grid sizes are below. Unfortunately this is not getting better with increased resolution. This could be due to base state changes causing the stress to change and not necessarily something wrong with the method. It might take better refinement than 256 x 256 to really see a trend here. ![Bickley_",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866285588:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866285588,2,"['log', 'test']","['log', 'tests']"
Testability,"I ran the advection scheme benchmarks and comparing with some older Julia 1.5 results it definitely is slower on the GPU. WENO5 used to only be ~3x slower than CenteredSecondOrder, but now it's 26x slower. All other advection schemes are just as fast as they used to be. Not slow enough to be CUDA scalar operations so maybe the GPU compiler changed in some way that kernels calling/using WENO5 are compiling into suboptimal machine code?. @maleadt might have some ideas/suggestions but maybe we just have to profile and find the new bottleneck?. ---. ```; Advection schemes relative performance (GPU); ┌───────────────┬────────────────────────┬──────────┬─────────┬─────────┐; │ Architectures │ Schemes │ slowdown │ memory │ allocs │; ├───────────────┼────────────────────────┼──────────┼─────────┼─────────┤; │ GPU │ CenteredFourthOrder │ 1.38356 │ 1.05911 │ 1.60067 │; │ GPU │ CenteredSecondOrder │ 1.0 │ 1.0 │ 1.0 │; │ GPU │ UpwindBiasedFifthOrder │ 1.53145 │ 1.0868 │ 1.88203 │; │ GPU │ UpwindBiasedThirdOrder │ 1.30611 │ 1.04135 │ 1.42012 │; │ GPU │ WENO5 │ 26.1429 │ 4.68526 │ 38.4468 │; └───────────────┴────────────────────────┴──────────┴─────────┴─────────┘; ```. Compare with: https://github.com/CliMA/Oceananigans.jl/pull/1169#issuecomment-725471594",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868093699:27,benchmark,benchmarks,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868093699,1,['benchmark'],['benchmarks']
Testability,"I ran the benchmark again with triply periodic but it's still much slower so the issue might be deeper than the logic in `topologically_conditional_interpolation.jl`. ```; Advection schemes relative performance (GPU); ┌───────────────┬────────────────────────┬──────────┬─────────┬─────────┐; │ Architectures │ Schemes │ slowdown │ memory │ allocs │; ├───────────────┼────────────────────────┼──────────┼─────────┼─────────┤; │ GPU │ CenteredFourthOrder │ 1.50326 │ 1.06836 │ 1.69674 │; │ GPU │ CenteredSecondOrder │ 1.0 │ 1.0 │ 1.0 │; │ GPU │ UpwindBiasedFifthOrder │ 1.69787 │ 1.09472 │ 1.96539 │; │ GPU │ UpwindBiasedThirdOrder │ 1.39899 │ 1.05598 │ 1.57057 │; │ GPU │ WENO5 │ 33.2728 │ 5.21273 │ 43.9286 │; └───────────────┴────────────────────────┴──────────┴─────────┴─────────┘; ```. ```diff; diff --git a/benchmark/benchmark_advection_schemes.jl b/benchmark/benchmark_advection_schemes.jl; index 81b083e1..e6ba8cd6 100644; --- a/benchmark/benchmark_advection_schemes.jl; +++ b/benchmark/benchmark_advection_schemes.jl; @@ -7,7 +7,8 @@ using Benchmarks; # Benchmark function. function benchmark_advection_scheme(Arch, Scheme); - grid = RegularRectilinearGrid(size=(192, 192, 192), extent=(1, 1, 1)); + topo = (Periodic, Periodic, Periodic); + grid = RegularRectilinearGrid(topology=topo, size=(192, 192, 192), extent=(1, 1, 1)); model = IncompressibleModel(architecture=Arch(), grid=grid, advection=Scheme()); ; time_step!(model, 1) # warmup; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868122855:10,benchmark,benchmark,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868122855,8,"['Benchmark', 'benchmark', 'log']","['Benchmark', 'Benchmarks', 'benchmark', 'logic']"
Testability,"I ran. ```julia; using Oceananigans; using NCDatasets. Nx = Ny = Nz = 16; grid = RectilinearGrid(size=(Nx, Ny, Nz), extent=(1, 1, 1)). tracer_names = Tuple(Symbol(:τ, n) for n = 1:6); model = NonhydrostaticModel(; grid, tracers=tracer_names). uᵢ(x, y, z) = randn(); cᵢ(x, y, z) = sin(2π * z / grid.Lz); kw = NamedTuple(c => cᵢ for c in tracer_names); set!(model; u=uᵢ, v=uᵢ, w=uᵢ, kw...). simulation = Simulation(model, Δt=0.1/Nx, stop_iteration=100). u, v, w = model.velocities; fluxes = NamedTuple(Symbol(""wτ$n"") => Field(w*c) for (n, c) in enumerate(model.tracers)); averaged_fluxes = NamedTuple(Symbol(""avg_wτ$n"") => Average(flux, dims=2) for (n, flux) in enumerate(fluxes)). jld2_filename = ""test.jld2""; nc_filename = ""test.nc""; kwargs = (schedule = IterationInterval(1),; verbose = true,; indices = (:, 1, :),; overwrite_existing = true). simulation.output_writers[:jld2] = JLD2OutputWriter(model, merge(fluxes, averaged_fluxes);; filename = jld2_filename,; kwargs...). simulation.output_writers[:nc] = NetCDFOutputWriter(model, merge(fluxes, averaged_fluxes);; filename = nc_filename,; kwargs...). run!(simulation). ds = Dataset(nc_filename). Ntracers = length(tracer_names); flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(filename, ""wτ$n"") for n = 1:Ntracers); average_flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(filename, ""avg_wτ$n"") for n = 1:Ntracers). flux_1_nc = ds[""wτ1""]; avg_flux_1_nc = ds[""avg_wτ1""]; flux_1 = flux_timeseries[""wτ1""]; avg_flux_1 = average_flux_timeseries[""wτ1""]. for n = 2:Ntracers; flux_n = flux_timeseries[""wτ$n""]; avg_flux_n = average_flux_timeseries[""wτ$n""]. @show ""Fluxes for tracer $n:""; @show all(flux_1[:, 1, :, :] .≈ flux_n[:, 1, :, :]); @show all(avg_flux_1[:, 1, :, :] .≈ avg_flux_n[:, 1, :, :]); @show all(flux_1_nc .≈ ds[""wτ$n""]); @show all(avg_flux_1_nc .≈ ds[""avg_wτ$n""]); end. close(ds); ```. and all the fluxes and averaged fluxes are identical for both JLD2 and NetCDF output writers.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436113039:697,test,test,697,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436113039,2,['test'],['test']
Testability,I re-ran the benchmarks and included the matrix solver with no preconditioner. Recording the results here for posterity:. ```; Hydrostatic model benchmarks; ┌───────────────┬─────────────────┬───────────────────────────────────────────────┬───────────┬───────────┬───────────┬────────────┬────────────┬─────────┬─────────┐; │ architectures │ grid_types │ free_surface_types │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────────┼───────────────────────────────────────────────┼───────────┼───────────┼───────────┼────────────┼────────────┼─────────┼─────────┤; │ CPU │ RectilinearGrid │ PCGImplicitFreeSurfaceNoPreconditioner │ 61.099 ms │ 70.657 ms │ 91.448 ms │ 161.977 ms │ 24.25 MiB │ 29768 │ 10 │; │ GPU │ RectilinearGrid │ PCGImplicitFreeSurfaceNoPreconditioner │ 17.595 ms │ 23.320 ms │ 22.090 ms │ 26.288 ms │ 4.26 MiB │ 43632 │ 10 │; │ CPU │ RectilinearGrid │ PCGImplicitFreeSurface │ 12.473 ms │ 14.323 ms │ 14.833 ms │ 19.016 ms │ 5.50 MiB │ 9866 │ 10 │; │ GPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceNoPreconditioner │ 9.471 ms │ 9.647 ms │ 9.777 ms │ 10.601 ms │ 2.08 MiB │ 18243 │ 10 │; │ CPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceOrd2 │ 29.854 ms │ 38.381 ms │ 43.885 ms │ 69.085 ms │ 5.34 MiB │ 8469 │ 10 │; │ CPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceSparsePreconditioner │ 33.183 ms │ 42.544 ms │ 41.127 ms │ 46.910 ms │ 5.34 MiB │ 8491 │ 10 │; │ GPU │ RectilinearGrid │ PCGImplicitFreeSurface │ 4.380 ms │ 4.709 ms │ 4.824 ms │ 6.626 ms │ 1.89 MiB │ 10256 │ 10 │; │ CPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceNoPreconditioner │ 29.694 ms │ 33.940 ms │ 35.731 ms │ 48.457 ms │ 5.34 MiB │ 8490 │ 10 │; │ GPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceOrd2 │ 5.987 s │ 5.987 s │ 5.987 s │ 5.987 s │ 462.46 MiB │ 8636458 │ 1 │; │ GPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceSparsePreconditioner │ 6.611 ms │ 7.311 ms │ 7.608 ms │ 9.821 ms │ 1.84 MiB │ 12582 │ 10 │; └───────────────┴─────────────────┴──────────────,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2412#issuecomment-1108986503:13,benchmark,benchmarks,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2412#issuecomment-1108986503,2,['benchmark'],['benchmarks']
Testability,"I remember discussing a strategy for working on the _design_ of open boundary conditions, and for that I advocated for finding a simple scheme to implement and focusing on the overall design. The purpose of that is to allow us to think clearly and logically about the software design without getting tangled up in numerics. Once we have a good design (I'm not sure that we do unfortunately...) then the door is open to work on numerics, hopefully without being hindered too much (the point of a good design). Then we can make rapid progress. But this sort of strategy to focus on ""one thing at a time"" is not a comment about whether we should put numerics in the source code or not. It's a strategy for software development, not a comment about package organization.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2391355404:248,log,logically,248,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2391355404,2,['log'],['logically']
Testability,"I removed the `.julia` file on my computer with a GPU and then it passed all 4 regression tests: `CPU/GPU` and `VectorInvariant/Conservative`. Maybe this needs to be done on the other servers to get the test to pass?. I will point out that for the `VectorInvariantFormulation` the absmean and std are identical to four or more decimals for GPU and CPU. However, for the `ConservativeFormulation`, the values for `v` and `h` are as good but the `u` value for absmean and std off by about 100. Maybe this is a concern, even though the tests pass?. ```; julia> include(""test/test_shallow_water_regression.jl""); [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:23.118] INFO Running shallow water regression tests...; FJP: arch and formulation = CPU()VectorInvariantFormulation(); [2023/02/27 18:57:23.119] INFO Testing shallow water Bickley jet simulation regression [CPU, VectorInvariantFormulation]; [2023/02/27 18:57:23.124] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:223; [2023/02/27 18:57:23.525] INFO Initializing simulation...; [2023/02/27 18:57:23.526] INFO ... simulation initialization complete (1.081 ms); [2023/02/27 18:57:23.526] INFO Executing initial time step...; [2023/02/27 18:57:24.661] INFO ... initial time step complete (1.135 seconds).; [2023/02/27 18:57:46.538] INFO Simulation is stopping after running for 21.864 seconds.; [2023/02/27 18:57:46.538] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/27 18:57:46.680] INFO Δu: min=-2.958580e-08, max=+2.921001e-08, mean=-7.420989e-11, absmean=+1.893230e-09, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:90,test,tests,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226,5,['test'],"['test', 'tests']"
Testability,I restarted the Buildkite build since the cpu distributed tests failed due to some random ELF error then the build finished and cleaned up the Julia depot so it was too late to restart the cpu distributed tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1654#issuecomment-843499929:58,test,tests,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1654#issuecomment-843499929,2,['test'],['tests']
Testability,"I run this:. ```Julia; using Oceananigans. grid = RectilinearGrid(size=(16, 16, 16), extent = (500, 500, 120)). n_tracers = 6; tracer_symbols = [ Symbol(:τ, i) for i in 1:n_tracers ]; model = NonhydrostaticModel(; grid, tracers = (tracer_symbols...,)); @info model. uᵢ(x, y, z) = 1e-2 * randn(); set!(model, w=uᵢ). tracer_IC_odd(x, y, z) = sin(2π * z / grid.Lz); for i in 1:n_tracers; @info ""Setting tracer $i""; expression = Meta.parse(""set!(model, τ$i=tracer_IC_odd)""); eval(expression); end. simulation = Simulation(model, Δt=30, stop_iteration=4). u, v, w = model.velocities. wτ = NamedTuple(Symbol(:w, key) => Field(w*τ) for (key, τ) in pairs(model.tracers)). outputs_full = (; wτ...). outputs_yavg = NamedTuple( Symbol(key, :_yavg)=>Average(val, dims=(2,)) for (key, val) in zip(keys(outputs_full), outputs_full)). outputs_xz1 = merge(outputs_full, outputs_yavg); simulation.output_writers[:xz1_writer] = NetCDFOutputWriter(model, outputs_xz1;; filename = ""test.nc"",; schedule = TimeInterval(simulation.stop_time),; verbose=true,; indices = (:, 1, :),; overwrite_existing = true,; ); run!(simulation); ```. and got; ```Julia; [ Info: Initializing simulation...; [ Info: Writing to NetCDF: ./test.nc...; [ Info: Computing NetCDF outputs for time index 1: [""wτ3"", ""wτ2_yavg"", ""wτ6_yavg"", ""wτ1"", ""wτ5_yavg"", ""wτ6"", ""wτ2"", ""wτ5"", ""wτ4"", ""wτ1_yavg"", ""wτ4_yavg"", ""wτ3_yavg""]...; [ Info: Computing wτ3 done: time=439.823 ms; [ Info: Computing wτ2_yavg done: time=3.404 seconds; [ Info: Computing wτ6_yavg done: time=3.018 seconds; [ Info: Computing wτ1 done: time=225.326 ms; [ Info: Computing wτ5_yavg done: time=2.950 seconds; [ Info: Computing wτ6 done: time=292.708 μs; [ Info: Computing wτ2 done: time=192.674 ms; [ Info: Computing wτ5 done: time=190.263 ms; [ Info: Computing wτ4 done: time=193.185 ms; [ Info: Computing wτ1_yavg done: time=1.210 seconds; [ Info: Computing wτ4_yavg done: time=2.954 seconds; [ Info: Computing wτ3_yavg done: time=2.953 seconds; [ Info: Writing done: time=17.732 s",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387:962,test,test,962,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387,1,['test'],['test']
Testability,"I see some stuff like `N2` in the [plankton example](https://clima.github.io/OceananigansDocumentation/stable/generated/convecting_plankton/#Boundary-conditions), which is a fixed problem parameter used in the BC but isn't a `const`. I haven't tried to test if making this a constant speeds up things, but I guess I should, no? Should I make a PR to make those alterations?. P.S.: I'm not super clear on which cases defining things as a const helps or not. I just know that the general rule is use something as a `const` if it really isn't gonna change in the problem. That general rule comes from the julia docs.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-881673256:253,test,test,253,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-881673256,2,['test'],['test']
Testability,"I see that in the Benchmarks there are 5 sets of results. Do we want to only do these or would we like to include other results? . There are a lot of benchmark examples we could include, but I agree it's probably better to focus on the most interesting ones.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-845144714:18,Benchmark,Benchmarks,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-845144714,2,"['Benchmark', 'benchmark']","['Benchmarks', 'benchmark']"
Testability,I see there is a failed test but from looking at the error it seems to be due to exceeding a disk quota. I will proceed to merge as this code is not actually used in any of the tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1759#issuecomment-866919955:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1759#issuecomment-866919955,2,['test'],"['test', 'tests']"
Testability,"I see what you mean that `h ∇ ⋅ (ν ∇u)` also satisfies some nice properties. I haven't seen that before but why not? Seems like a viable option. Maybe add that to the list of possible viscosity for shallow water?. It would be fun to test what difference these terms have on a simple problem. Just need to think about the problem, and of course get the code working.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2403#issuecomment-1090416474:233,test,test,233,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2403#issuecomment-1090416474,2,['test'],['test']
Testability,"I seem to have a problem with the GPU cubed sphere tests; ```; ERROR: Out-of-bounds array access.; ERROR: a exception was thrown during kernel execution.;   | Run Julia on debug level 2 for device stack traces.; ```; When running the tests on tartarus, both normally and with debug level 2, I cannot reproduce the error",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1115031875:51,test,tests,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1115031875,2,['test'],['tests']
Testability,"I started down that road, but had to install some packages to get the script to run and haven't returned to it yet! I'm confused at how running the exact same code that you ran will uncover an issue. Isn't it more likely that there is a bug in the script, than some issue with computers / software versions?. An efficient path forward might be to write a test that fails due to this error? Then submit a PR that adds the failing test, and we can collaborate on getting the test to pass. We'd have to do this anyways; and writing a test is a good way to come up with a minimal example that we could use to isolate the issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817957659:355,test,test,355,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817957659,4,['test'],['test']
Testability,I still think it might be a good idea to implement `VectorInvariant` in `ShallowWaterModel` first because then (1) we have a (hopefully positive) addition to the code (2) we have an exact solution to quantitatively and efficiently test the scheme on,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1062904021:231,test,test,231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1062904021,1,['test'],['test']
Testability,"I suggest putting back the complete testing suite and seeing if reducing documentation build time from 1.45 to 1hr decreases overall test time and how much. If it does not give a substantial decrease in test time, I would not bother not to overload Tartarus (already a 1.75 speedup with 4 cores is probably not worth so much)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1592133562:36,test,testing,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1592133562,3,['test'],"['test', 'testing']"
Testability,"I suggest starting a thread on `LambertW.jl` and ask whether the code is GPU compatible. It will probably be more straightforward to test this first using `CUDA.jl` or `KernelAbstractions.jl` and then, if that works, get it working in Oceananigans.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1904981295:133,test,test,133,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1904981295,1,['test'],['test']
Testability,"I suspect in this particular case the failures might be related to https://github.com/CliMA/Oceananigans.jl/issues/1179 . I agree it's irrelevant to this PR so I'll go ahead and merge. Looking at the build log it looks like it's a small number of grid points that are outside the required tolerance. ```; [2021/02/22 10:57:39.093] INFO Testing oceanic large eddy simulation regression [GPU, SmagorinskyLilly, regular grid]; [2021/02/22 10:58:14.536] INFO Δu: min=-5.666049e-10, max=+3.671358e-10, mean=-2.983144e-20, absmean=+2.668769e-12, std=+2.226909e-11 (4069/4096 matching grid points); [2021/02/22 10:58:14.552] INFO Δv: min=-5.253857e-10, max=+3.415200e-10, mean=+3.250489e-20, absmean=+2.216612e-12, std=+1.693819e-11 (4087/4096 matching grid points); [2021/02/22 10:58:14.553] INFO Δw: min=-8.810720e-10, max=+3.828218e-10, mean=+1.396074e-21, absmean=+1.776769e-12, std=+1.811893e-11 (4030/4096 matching grid points); [2021/02/22 10:58:14.554] INFO ΔT: min=-3.171365e-10, max=+1.584819e-09, mean=+1.486753e-12, absmean=+2.286620e-12, std=+4.048190e-11 (4096/4096 matching grid points); [2021/02/22 10:58:14.555] INFO ΔS: min=-5.826450e-13, max=+5.613288e-13, mean=-6.418477e-17, absmean=+2.742598e-15, std=+1.726765e-14 (4096/4096 matching grid points); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1395#issuecomment-783500631:206,log,log,206,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1395#issuecomment-783500631,2,"['Test', 'log']","['Testing', 'log']"
Testability,"I tested it and can confirm if the line with `@warn` is commented out, the code runs without erroring.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1910861106:2,test,tested,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1910861106,1,['test'],['tested']
Testability,"I tested the simulation without picking up a checkpoint (running only the first simulation from 0-6s), but the error still unexpectedly persists. It seems the issue might be related to a bug in `AveragedTimeInterval` and maybe not necessarily just related to the checkpoint. (Hence I change the name of this issue.); <img width=""589"" alt=""image"" src=""https://github.com/user-attachments/assets/c8ef448a-93c0-4e62-9bb8-dd098d5d65df"">",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2259395775:2,test,tested,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2259395775,1,['test'],['tested']
Testability,I tested this with the simple case from discussion #2720 and with the Bickley Jet example adding a CFL calculation to a status message. It looks like CFL is calculated correctly and the `TimeStepWizard` is functioning properly now.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2721#issuecomment-1239578989:2,test,tested,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2721#issuecomment-1239578989,2,['test'],['tested']
Testability,I think GPU simulation and GPU regression test failures might have been intermittent (perhaps due to #1179?) so I restarted the build just in case.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1578#issuecomment-819500253:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1578#issuecomment-819500253,1,['test'],['test']
Testability,"I think GPU tests randomly crapped out (not important for this PR) but docs are still building so as long as the PR docs preview looks good, then this should be good to merge!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1543#issuecomment-819536777:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1543#issuecomment-819536777,1,['test'],['tests']
Testability,I think I caught two small bugs that were disallowing y-partitioning. If the tests pass now we should be ready to merge,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1762308124:77,test,tests,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1762308124,1,['test'],['tests']
Testability,"I think I get the idea, but I still can't imagine what could be wrong with the vertically stretched grids themselves. They seems pretty straightforward. Could you clarify what specific metrics you're talking about that are different?. > We might be able to convert the internal wave setup dynamics test to a vertically bounded domain and put it on a stretched grid to test these issues. This seems like a good idea.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-881913151:298,test,test,298,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-881913151,2,['test'],['test']
Testability,"I think any of those projects would be super welcome. A 1-layer shallow water model would be nice and simple, and @ali-ramadhan could use it for his MPI parallelization work since it has no pressure solver. A hydrostatic Boussinesq model would be super useful too of course. I think we should talk. We are working on a similar model using discontinuous Galerkin numerics over at [ClimateMachine.jl](https://github.com/CliMA/ClimateMachine.jl) and these projects would have overlapping goals. Nevertheless I would personally find it extremely useful to be able to run `Oceananigans.IncompressibleModel`s with a `HydrostaticPressureSolver` and `ExplicitFreeSurface` since I could use it to benchmark / compare with the DG functionality that I'm working on for `ClimateMachine`, and the relative advantages of high-order finite volume methods compared with DG may still be in question, at least for structured grids (meaning that an Oceananigans development effort is not a waste of time). Perhaps a zoom conversation on that topic is in order. I agree with the framework / level-of-difficulty that you've laid out for student projects!. As for deciding FourierFlows vs Oceananigans, that's up to you for sure and depends basically on whether you are okay staying with doubly-periodic systems (what FourierFlows currently supports) or whether you want to do problems with boundaries (what Oceananigans promises). FourierFlows is a nice tool for idealized problems and theoretical work (and you can run pretty large problems these days since it has GPU support); Oceananigans is evolving more towards a tool for ocean modeling that is capable of doing idealized problems, but flexible enough to use for large eddy simulation and realistic non-hydrostatic modeling, in bounded domains and hopefully irregular domains as well, eventually, using immersed boundaries. Switching between the two would be a dream... ! I'm afraid this is too futuristic for Oceananigans. It may be possible to build FV functional",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724302226:688,benchmark,benchmark,688,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724302226,1,['benchmark'],['benchmark']
Testability,I think changing https://github.com/CliMA/Oceananigans.jl/blob/ec5b515ee50aa5554df31dfbb1498e2335b05603/docs/src/model_setup/boundary_conditions.md?plain=1#L94-L95. to. ```julia; ├── south: OpenBoundaryCondition{Nothing}: Nothing; ├── north: OpenBoundaryCondition{Nothing}: Nothing; ```; is the only fix needed for the tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2025541452:319,test,tests,319,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2025541452,1,['test'],['tests']
Testability,"I think code-wise, this is pretty much ready (save some occasional polishing like [here](https://github.com/CliMA/Oceananigans.jl/pull/3080#discussion_r1192737129)). `pHY` and `pNHS` are no more, and both both hydrostatic and nonhydrostaic models, the pressure is simply `model.pressure`. The only tests that are failing and some regression tests, whose data will have to be re-done, and a scalar-index issue on GPUs. I think the only major change that's left is the documentation. @glwagner, in the past you preferred to make big changes to the docs yourself. Do you wanna remove the pressure separation part from the docs and push it here?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1550241035:298,test,tests,298,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1550241035,4,['test'],['tests']
Testability,"I think for idealized stuff the hydrostatic model is fairly well tested, but if one wants to do complex domains, problems requiring mixing parameterizations, etc, then our capability is still a little green I think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2464#issuecomment-1107528576:65,test,tested,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2464#issuecomment-1107528576,1,['test'],['tested']
Testability,I think here `return` and `return nothing` would have the same effect (probably also just avoiding the whole `return` statement but that will print the variable to screen if used in the REPL). . ```; julia> function test!(a); a[1] +=1; return; end; test! (generic function with 1 method). julia> function test_two!(a); a[1] +=1; return nothing; end; test_two! (generic function with 1 method). julia> a = [1]; 1-element Vector{Int64}:; 1. julia> test!(a). julia> a; 1-element Vector{Int64}:; 2. julia> test_two!(a). julia> a; 1-element Vector{Int64}:; 3. julia> function test_three!(a); a[1] +=1; end; test_three! (generic function with 1 method). julia> test_three!(a); 4. julia> a; 1-element Vector{Int64}:; 4; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2135#issuecomment-1005242652:216,test,test,216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2135#issuecomment-1005242652,3,['test'],['test']
Testability,I think if the tests pass we are ready to merge,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2740#issuecomment-1259660901:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2740#issuecomment-1259660901,1,['test'],['tests']
Testability,"I think in that case let's wait until this code is implemented, then we'll be able to test that whatever fix we devise is working",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2389544013:86,test,test,86,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2389544013,1,['test'],['test']
Testability,"I think it looks pretty good! Thanks @josuemtzmo for the work on `NetCDFOutputWriter`. In a future PR, we can add a test to ensure that `file_splitting = TimeInterval(T)` works. Also I'm trying to brainstorm a better word to use than ""actuated"" for talking about scheduling. But I think once the tests pass we should merge this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2016537205:116,test,test,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2016537205,2,['test'],"['test', 'tests']"
Testability,"I think it might have been with the regression tests in #2035, I am not sure how we solved it",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1115097251:47,test,tests,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1115097251,1,['test'],['tests']
Testability,I think it will for slices (I'd have to go digging but I recall mysterious benchmarks showing 10x slowdown for yz models). Probably worth doing the benchmarks before merging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1333146083:75,benchmark,benchmarks,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1333146083,2,['benchmark'],['benchmarks']
Testability,"I think it's good to go. The only thing that doesn't quite make sense to me is why. ```julia; fill_size = fill_halo_size(field, regular_fill_function, indices, boundary_conditions, loc, grid); ```. depends on `regular_fill_function`, since. ```julia; fill_function, regular_fill_function = get_open_halo_filling_functions(loc) ; ```. and `loc` is an argument to both functions. It doesn't seem that from a purely logical point of view we need `regular_fill_function` at all here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3792#issuecomment-2379279293:413,log,logical,413,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3792#issuecomment-2379279293,1,['log'],['logical']
Testability,"I think it's more intuitive if `gravitational_direction` is a unit vector where `|g|=1`, no?. > I guess we thought this PR was missing a test? I'm happy to merge it as long as the 45 degree slanted rising thermal bubble looks good and we can worry about adding a more rigorous test in a future PR?. I ran the bubble case and it looked okay to me. I don't know if that's already good enough for merging this PR. I'd recomment merging once we get the more general tilt for buoyancy (if you agree that that's important.). My idea was to start a more rigorous test using a tilted BBL example from the literature this weekend. I was thinking this could eventually become a docs example to show. - Tilted gravity; - Monin-Obukhov similarity wall model; - Maybe stretched grid if it's done by then?; - NetCDF outputs (I think none of the current examples use NetCDF). I ended up not doing it because the papers I went through used both buoyancy as a tracer (not implement yet in this PR; hence my comment here) and tilt the domain in the `x` direction, so I'd need an `x` component of coriolis (hence my issue https://github.com/CliMA/Oceananigans.jl/issues/1372). I know these things are easy to circumvent with the available tools (i.e. using temperature to get the proper buoyancy and rotating the domain so that the tilt is in `y`, not `x`), but I thought it was best to make a thorough test once as these tools were in place already.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-783490746:137,test,test,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-783490746,8,['test'],['test']
Testability,"I think it's ok, the hydrostatic model tests are not the bottleneck",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2181#issuecomment-1021681357:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2181#issuecomment-1021681357,1,['test'],['tests']
Testability,"I think it's probable that `DiscreteForcing` doesn't have the same performance issues. @ali-ramadhan put together a benchmark script for forcing functions a while ago I thought, but it might have disappeared (because it wasn't informative?) That might've been before we had `ContinuousForcing` though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875640465:116,benchmark,benchmark,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875640465,1,['benchmark'],['benchmark']
Testability,I think it’s done but I haven’t payed attention to what was happening here. I was excited to see the tests pass tho :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516179441:101,test,tests,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516179441,1,['test'],['tests']
Testability,"I think more validation is great. Integrated cases are split into three categories:. 1. Tests (eg the stuff in `test_dynamics.jl` for NonhydrostaticModel). These run during CI.; 2. `validation/`. These are scientific validation cases that often require scientific interpretation or are expensive. These are similar to ""Tests"" but may lack a quantitative metric of success.; 3. `examples/`. These are intended to showcase the API and library usage to users. They should not be used as tests, because they are very expensive to run (via Documenter) and to maintain (for one because they have a high standard for code quality). I suggest adding bona fide Tests and validation, rather than examples, if we are interested in determining the correctness of the code.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1866#issuecomment-886708305:88,Test,Tests,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1866#issuecomment-886708305,4,"['Test', 'test']","['Tests', 'tests']"
Testability,I think moving forward we should always try to remove as many `@allowscalar` from our tests as possible. We have far too many as is. We should always lean towards solving the underlying problem and eliminating scalar operations.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1239599513:86,test,tests,86,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1239599513,1,['test'],['tests']
Testability,I think now only some output writer test errors are only pending. Will try to sort them out today.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-825983782:36,test,test,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-825983782,1,['test'],['test']
Testability,"I think our race condition test is passing after this without the need for a custom `mean!`, so I think this is good to go. It's probably important because there could be other bugs associated with bad interactions between operations on the CUDA default stream and broadcasting...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1803#issuecomment-873180797:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1803#issuecomment-873180797,1,['test'],['test']
Testability,"I think pressure gradient errors would still creep in to such a problem, but maybe using this technique with pressure gradients ""turned off"" (one way or another, perhaps using `ShallowWaterModel`) can produce a viable validation test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172731603:229,test,test,229,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172731603,1,['test'],['test']
Testability,"I think replacing `""docs/*.jld2""` with `""docs/**/*.jld2""` misses the stuff that previously would have been caught:. ```julia;    ~/repos/Oceananigans.jl    tc/nhpressure2 *2 !7 ?1  julia --project=docs/  ✔  9s   base  ; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.8.5 (2023-01-08); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> using Glob. julia> A = glob(""src/*.jl""); 6-element Vector{String}:; ""src/Architectures.jl""; ""src/Biogeochemistry.jl""; ""src/Logger.jl""; ""src/Oceananigans.jl""; ""src/StokesDrift.jl""; ""src/Units.jl"". julia> B = glob(""src/**/*.jl"");. julia> A[1] in B; false. julia> collect( a in B for a in A ); 6-element Vector{Bool}:; 0; 0; 0; 0; 0; 0; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3109#issuecomment-1553617356:638,Log,Logger,638,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3109#issuecomment-1553617356,1,['Log'],['Logger']
Testability,I think so. The only thing we'd have to add is a little bit of logic when constructing the grid.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2060805794:63,log,logic,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2060805794,1,['log'],['logic']
Testability,"I think something that we haven't fully grasped in the past (and I am largely to blame) is how to properly display information to users in the REPL and log files (eg by extending existing methods so the interface for displaying `Oceanangians` types is the same as other julia types). There are a few functions available:. * `show`; * `print` (seems similar to `show`, except used where fancy formatting such as colors, etc may not be appropriate or available); * `summary`. We also want even more minimal representations than those produced by `summary`, like `string(typeof(obj).name.wrapper)`. There may also be a julia function for this, but I didn't find one after a cursory search. We have (unfortunately) introduced what appears to be a needless alternative to `summary` in the source code; we call this `short_show`. So we already have sizeable technical debt... I think it's helpful to follow convention as much as possible, especially if this package is used by other packages (eg it will be embedded in a climate model at some point in the future, which will be a separate package...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2099#issuecomment-986795360:152,log,log,152,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2099#issuecomment-986795360,1,['log'],['log']
Testability,"I think that the problem is that we are passing an integer and not an array. I think the fix should be something like this, as then we are passing something of the right type. Unfortunately, when I try trying the `solver` test group locally, a bunch of other stuff fails. I'm a little hesitant to push the changes as I fear it might make things worst. ```; @test vertically_stretched_poisson_solver_correct_answer(Float64, arch, topo, 8, 8, collect(0:zF)); @test vertically_stretched_poisson_solver_correct_answer(Float64, arch, topo, 16, 8, collect(0:zF)); @test vertically_stretched_poisson_solver_correct_answer(Float64, arch, topo, 8, 16, collect(0:zF)); @test vertically_stretched_poisson_solver_correct_answer(Float64, arch, topo, 8, 11, collect(0:zF)); @test vertically_stretched_poisson_solver_correct_answer(Float64, arch, topo, 5, 8, collect(0:zF)); @test vertically_stretched_poisson_solver_correct_answer(Float64, arch, topo, 7, 13, collect(0:zF)); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-819677294:222,test,test,222,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-819677294,7,['test'],['test']
Testability,I think that was the test I added to make sure that this new error worked right,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325135039:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325135039,1,['test'],['test']
Testability,"I think that's a fine strategy. We can add a kwarg to `NonhydrostaticModel` called `hydrostatic_pressure_anomaly`. We can set it to `CenterField(grid)` to preserve existing behavior, or set it to `nothing` to avoid the separation. And we should probably make `nothing` default so that triply periodic problems can be done out of the box. Then we don't have to re-do the regression tests either because we preserve existing behavior... I think that's also a less invasive change than this PR because we don't have to change `pressures` to `pressure` everywhere, hmm. Since you've done most of the legwork I think you have prerogative to open a new PR if you like (and I can help once you do).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088540295:381,test,tests,381,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088540295,1,['test'],['tests']
Testability,I think the DateTime clock is tricky. Tricky to set the Δt... There is no test for this btw.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1452984065:74,test,test,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1452984065,1,['test'],['test']
Testability,I think the WENO positivity preserving scheme we have is not actually positivity preserving because preserves 1D positivity. To have positivity preserving we need a 2D scheme (or at least to do proper tests/improvement on the scheme we have).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481957629:201,test,tests,201,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481957629,1,['test'],['tests']
Testability,"I think the `weno_interpolants.jl` file is the culprit, @tomchor and I saw the loss of performance specifically when using the WENO scheme. I'll test the other advection schemes in the meantime to make sure that it is indeed only a problem of WENO advection.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1177983798:145,test,test,145,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1177983798,1,['test'],['test']
Testability,"I think the algorithm for saving register usage could be easier to understand if it is written abstractly (ie within a loop that goes to WENO order `N` rather than written manually. . The main advantage of using metaprogramming is that it will be easier to maintain if this code needs to change in the future (ie even for the trivial reason that julia syntax changes). Rather than having to inspect and change 7 functions we can change one. It'll also main we can probably get away with fewer regression tests. Otherwise, to prevent the code from returning wrong results when/if it needs to be updated in the future, we need to test every WENO order... These seem like pretty significant advantages, but I understand that everyone is busy.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3518#issuecomment-2013055888:504,test,tests,504,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3518#issuecomment-2013055888,2,['test'],"['test', 'tests']"
Testability,"I think the best way is to go to the REPL and write. ```julia; julia> include(""one_test_file.jl""); ```. We've designed all the test files to work that way.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1995005504:127,test,test,127,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1995005504,1,['test'],['test']
Testability,I think the current behavior is useful for testing purposes. It seems to me this would be beneficial only in a very small handful of cases. I vote we keep the current behavior.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2192#issuecomment-1022684710:43,test,testing,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2192#issuecomment-1022684710,1,['test'],['testing']
Testability,I think the disadvantage of using artifacts is that we are a bit more exposed to bugs and I think that's the cause of at least some of our pain here. The advantage is that it's less work to maintain our local CUDA software and our test environment might be more realistic / relevant since users typically use artifacts (I think).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1799#issuecomment-872395555:231,test,test,231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1799#issuecomment-872395555,1,['test'],['test']
Testability,"I think the main reason to use total height is that it generalizes to a ""stacked"" shallow water model (where there are N layers rather than just 1). But perhaps the choice depends on whether shallow water model is valuable mostly as a stand-alone model for physics problems or whether it's intent is more as a testbed for develping numerical methods, etc (with perhaps the eventual possibility of generalizing to N layers).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1115156776:310,test,testbed,310,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1115156776,1,['test'],['testbed']
Testability,I think the new diffusion/cosine tests? Can't think of something else...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2324#issuecomment-1062526156:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2324#issuecomment-1062526156,1,['test'],['tests']
Testability,"I think the test is failing becaue `f` is returning a `Float64`, so when the grid is `Float32` `eps(maximum(f))` is wrong. Is there a way to set the type returned by `f`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1488595081:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1488595081,1,['test'],['test']
Testability,"I think there are probably a few other things to fix here, because we can't ""restore"" a grid with a GPU architecture. Fixing this fully really requires finishing #1998 first, and overhauling the checkpointing infrastructure to match so that the checkpointer is ""architecture aware"". We should also add tests for checkpointing with other grid types.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2018#issuecomment-945826936:302,test,tests,302,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2018#issuecomment-945826936,1,['test'],['tests']
Testability,"I think these lines should be using `ξnode`, `ηnode`, and `rnode`:. https://github.com/CliMA/Oceananigans.jl/blob/7cbf013cb6bed2bd7cef0f4d8e5f04c078e50ee0/src/Models/LagrangianParticleTracking/lagrangian_particle_advection.jl#L136-L142. I'll open a PR with a fix tomorrow. Should probably also add a test for particle advection on a lat-lon grid. ---. Some debug printing inside `advect_particle` with 1 particle:. ```; [ Info: Iteration 1...; [ Info: X=(1.0, -1.5, -10.0), I=(47, 109, 53); [ Info: (before) X⁺=(1.0, -1.5, -10.0); (iᴿ, jᴿ, kᴿ) = (101, 201, 61); (xᴸ, yᴸ, zᴸ) = (87813.63270401207, -217942.05622333512, -100.0); (xᴿ, yᴿ, zᴿ) = (136722.49142523398, -124538.3178419058, 0.0); (x⁺, y⁺, z⁺) = (175626.26540802413, -249075.1356838116, -10.0); [ Info: (after) X⁺=(175626.26540802413, -249075.1356838116, -10.0); [ Info: Iteration 2...; [ Info: X=(175626.26540802413, -249075.1356838116, -10.0), I=(39914880, -59303137, 53); ERROR: LoadError: BoundsError: attempt to access 109×208×68 OffsetArray(::Array{Float64, 3}, -3:105, -3:204, -3:64) with eltype Float64 with indices -3:105×-3:204×-3:64 at index [39914881, -59303136, 54]; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852#issuecomment-2428098528:300,test,test,300,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852#issuecomment-2428098528,1,['test'],['test']
Testability,"I think this PR Is becoming too big. I’m thinking to wrap it up here with the ConformalCubedSphere grid plus tracer halo filling, add tests and then open another one to continue on cubed sphere tasks. What do you reckon @glwagner ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1483785790:134,test,tests,134,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1483785790,1,['test'],['tests']
Testability,"I think this PR is finally ready to be merged, provided that tests pass. To make sure that `VerticalDirection` is working, I ran the equation of state benchmarks and they seem to match the benchmarks performed in https://github.com/CliMA/Oceananigans.jl/pull/1169#issuecomment-725471594. If anything, benchmarks seem a bit better (probably different machine) and `RoquetEquationOfState` is surprisingly faster on the CPU (but might be a fluke). ```; Equation of state benchmarks; ┌───────────────┬───────────────────────┬───────────┬───────────┬───────────┬───────────┬─────────────┬────────┐; │ Architectures │ EquationsOfState │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼───────────────────────┼───────────┼───────────┼───────────┼───────────┼─────────────┼────────┤; │ CPU │ LinearEquationOfState │ 2.037 s │ 2.040 s │ 2.039 s │ 2.041 s │ 372.66 KiB │ 2090 │; │ CPU │ RoquetEquationOfState │ 1.759 s │ 1.761 s │ 1.761 s │ 1.763 s │ 373.77 KiB │ 2090 │; │ CPU │ TEOS10EquationOfState │ 2.270 s │ 2.401 s │ 2.378 s │ 2.464 s │ 372.53 KiB │ 2090 │; │ GPU │ LinearEquationOfState │ 10.058 ms │ 13.161 ms │ 12.856 ms │ 13.215 ms │ 1022.19 KiB │ 7154 │; │ GPU │ RoquetEquationOfState │ 10.688 ms │ 13.236 ms │ 12.991 ms │ 13.322 ms │ 1.00 MiB │ 7054 │; │ GPU │ TEOS10EquationOfState │ 10.204 ms │ 13.463 ms │ 13.145 ms │ 13.504 ms │ 1017.58 KiB │ 7154 │; └───────────────┴───────────────────────┴───────────┴───────────┴───────────┴───────────┴─────────────┴────────┘; ```. ```; Equation of state CPU -> GPU speedup; ┌───────────────────────┬─────────┬─────────┬─────────┐; │ EquationsOfState │ speedup │ memory │ allocs │; ├───────────────────────┼─────────┼─────────┼─────────┤; │ LinearEquationOfState │ 154.965 │ 2.74298 │ 3.42297 │; │ RoquetEquationOfState │ 133.062 │ 2.74052 │ 3.37512 │; │ TEOS10EquationOfState │ 178.317 │ 2.73152 │ 3.42297 │; └───────────────────────┴─────────┴─────────┴─────────┘; ```. ```; Equation of state relative performance (CPU); ┌───────────────┬",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-800720099:61,test,tests,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-800720099,5,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,"I think this is a a big step forward and happy to share my two cents worth. I agree that we should keep `gravitational_acceleration` the same as before. We will need to have a bunch of `g'`. Since we have a free surface, we assume that we have air above, then `g'` of the top layer is really just `g`. That's why I would suggest having n reduced gravities for n layers. We will need n interfaces and we could also store the n heights. Sometimes it's convenient to have one or the other. For efficiency we only need one, but for convenience we might want to have both. What are people's preferences?. The more layers we have, the thinner each layer tends to be. This means that it's more likely that layer depths can vanish. If this ever happens, then a numerical instability can happen. I remember discussing with @simone-silvestri using the positive preserving property of WENO to deal with this but I also remember that a preliminary test showed that it wasn't actually ensure to be positive. Sadly, I didn't follow up. Any idea if that was fixed?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481952717:936,test,test,936,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481952717,1,['test'],['test']
Testability,"I think this is a good change. It might be nice to change some of the names of the functions as well, because I'm having a hard time understand the logic of them",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3690#issuecomment-2274177349:148,log,logic,148,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3690#issuecomment-2274177349,1,['log'],['logic']
Testability,I think this should be an issue since resolving it requires changing the repo. Agree that using a buildkite workflow is a good idea. It might also make sense to use a cluster resource rather than tartarus so it's easier to be sure that the benchmarks are clean.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3166#issuecomment-1622058411:240,benchmark,benchmarks,240,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3166#issuecomment-1622058411,1,['benchmark'],['benchmarks']
Testability,"I think to preserve the work in this PR, we should add a `Float32` test which will fail if a spurious promotion undermines performance",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2445215733:67,test,test,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2445215733,1,['test'],['test']
Testability,I think we are also hitting this problem https://github.com/JuliaParallel/MPI.jl/issues/715; because it looks like the MPIPreferences are correctly loaded at the ; ```julia; julia -O0 --project -e 'using Pkg; Pkg.instantiate()`; ```; but then it loads a completely different MPI in the ; ```julia; julia -O0 --project -e 'using Pkg; Pkg.test()`; ```; step,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3897#issuecomment-2459444337:337,test,test,337,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3897#issuecomment-2459444337,1,['test'],['test']
Testability,"I think we can close this. We would probably need to add some tests, though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3704#issuecomment-2396752511:62,test,tests,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3704#issuecomment-2396752511,1,['test'],['tests']
Testability,"I think we could probably move it into `src/OutputWriters/windowed_spatial_average.jl` since we already have `windowed_time_average.jl` there. Probably just missing a couple of tests (one for a `WindowedSpatialAverage` of a field, and another for `ComputedField might be good?).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-783693538:177,test,tests,177,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-783693538,1,['test'],['tests']
Testability,I think we decided we would merge this in its current form and add tests for different topologies and Helmholtz equations in a future PR. In future PR(s) we should also refactor the interface to be more consistent with the other solvers and to use CuArrays in the solver itself. I think we don't intend to use the `PreconditionedConjugateGradientSolver` with `IncompressibleModel` so I removed it from the constructor. I presume a PCG solver will be created in the hydrostatic model constructor. Although a good regression test would be to run an `IncompressibleModel` with a PCG pressure solver and make sure it matches the regression data.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1360#issuecomment-781637359:67,test,tests,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1360#issuecomment-781637359,2,['test'],"['test', 'tests']"
Testability,I think we should add a test.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-905751368:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-905751368,1,['test'],['test']
Testability,I think we should also add a test that would catch this error.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2564#issuecomment-1131233965:29,test,test,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2564#issuecomment-1131233965,1,['test'],['test']
Testability,I think we should close this PR since the tests are failing. We can easily reproduce this script in the future if we need to.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1914#issuecomment-983923996:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1914#issuecomment-983923996,1,['test'],['tests']
Testability,"I think we should delete the regression test and put a warning in the model constructor ""The ShallowWaterModel has not been validated"". It's a shame we've put so much time into the regression test as it is. I think the model likely has a few bugs to be ironed out. I'm also not convinced that we have all the numerical methods (ie vanishing layers, positive preserving advection) that would be needed to advertise the model as ""production-ready""). One could argue that the regression test is misleading in that it gives the false impression that the model is in a state that shouldn't change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3049#issuecomment-1496736100:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3049#issuecomment-1496736100,3,['test'],['test']
Testability,"I think we should merge this now, since Oceananigans is barely useable at the moment, and then pick up getting the Enzyme tests passing in @jlk9's PR (which also needs to involve performance benchmarking to ensure we maintain performance)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3477#issuecomment-1948811417:122,test,tests,122,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3477#issuecomment-1948811417,2,"['benchmark', 'test']","['benchmarking', 'tests']"
Testability,I think we should test the difference between using pmap or not on the other PR,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3139#issuecomment-1583213980:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3139#issuecomment-1583213980,1,['test'],['test']
Testability,I think we should test this independently of an example. Examples change but it'd be nice to make sure this functionality still works. I'll add something simple and then we can iterate.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3815#issuecomment-2389128694:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3815#issuecomment-2389128694,2,['test'],['test']
Testability,"I think we will need to do some more testing to make sure this won't break our near global hydrostatic setups, which are unfortunately in a tenuous position because they rely on some untested features (and we don't have regression tests for some important cases). @simone-silvestri what do you think? We may want to wait for a few more PRs (perhaps containing some of those tests) to go in first.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1280176328:37,test,testing,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1280176328,3,['test'],"['testing', 'tests']"
Testability,I think we will use logic such that `i-1` is not immersed / solid. Only `i-2` is solid. (It'd be better to use `k` here because I think we are talking about the vertical index.),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1042499178:20,log,logic,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1042499178,1,['log'],['logic']
Testability,"I think what we want in terms of API is the ability to specify boundary conditions on the surface of an immersed boundary. One design would be to introduce a type called `ImmersedBoundary` that collects information about the location of the boundary and the boundary conditions for each field prescribed on it. This could be relatively simple to implement in the code, though it doesn't exactly conform to our current code design in which boundary conditions are embedded in `Field` objects. Another possibility that may better conform to our current boundary conditions / field design would be to embed `boundaries` in `grid` objects. With this design, `ImmersedBoundary` collects only information about its geometry and parameters related to its numerical implementation (eg regularization functions, interpolation methods, etc). We can then infer from `grid` the information needed to define boundary conditions for fields in both (`x` ,`y`, `z`), as well as on any `ImmersedBoundary`s. Grid constructors would then be something like. ```julia; grid = RegularCartesianGrid(; immersed_boundaries = ImmersedBoundary(geometry = # a function of (x, y, z, t); transfer_function = # parameters ; ); topology = # etc; ); ```; ; As for verification, I think we should use a quantitative test that verifies that boundary conditions are satisfied on the immersed boundary. Reproducing the Reynolds number correction to the drag coefficient on a sphere might be a good one, though it could be challenging because we'd have to use sponge layers to replicate an open boundary. We could also reproduce driven-cavity results in a triply periodic domain using rectangular immersed boundaries.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/693#issuecomment-597087759:1282,test,test,1282,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/693#issuecomment-597087759,1,['test'],['test']
Testability,"I think what you likely want to do is to put. ```julia; push!(LOAD_PATH, joinpath(@__DIR__, "".."")); ```. at the top of every script in `benchmarks/`, mirroring what we do with the docs. Using `dev ..` will also work, but as you've noted is a bit inconvenient. Also it leads to annoying issues like the present one where `Oceananigans` is included in the `Project.toml` (this will prevent others from running benchmarks on their ""local"" Oceananigans code). I also recommend using `git diff file_name.jl` before doing `git add` so that you can ensure the code you're adding is intentional.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-866246979:136,benchmark,benchmarks,136,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-866246979,2,['benchmark'],['benchmarks']
Testability,"I think you instantiate a model to do many things; one of them is time-stepping, but another may be analysis. Another is testing. Even now we can't actually solve poisson's equation without a `Model` easily, which seems like an unnecessary restriction of our non-modularity. I don't think we should make this problem worse. I think it makes sense `model` is a field of `Simulation`. Its simple to envision `Simulation` parameters that are identical, with a different underlying `model` (eg, changing the number of passive tracers)`. The way I envision a logical course for the development of complex software in general is that we start with the fundamental building blocks and make them as easy to use in their low-level form as possible. When we've decided we can proceed no farther, we add another layer of abstraction that fuses these underlying building blocks into a higher-order coherent object. And so on. I think its a better design strategy to add *layers* of abstraction, rather than *embedding* abstraction within already complex objects. The latter strategy would lead to unmanageable complexity.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/447#issuecomment-542267410:121,test,testing,121,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/447#issuecomment-542267410,2,"['log', 'test']","['logical', 'testing']"
Testability,"I think you mean something like. ```; @test c[1, 1, 1:2] == random_column[1, 1, :]; @test c[2, 1, 1:2] == random_column[1, 1, :]; @test c[1, 2, 1:2] == random_column[1, 1, :]; @test c[2, 2, 1:2] == random_column[1, 1, :]; ```; These all pass for me.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1947#issuecomment-902694311:39,test,test,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1947#issuecomment-902694311,4,['test'],['test']
Testability,"I think you need to load cuda before you _build_ Oceananigans. You might need to do this from the login node, eg something like. ```; module load cuda; julia --project -e 'using Pkg; Pkg.build(""Oceananigans"")'; ```. Is that right @ali-ramadhan ?. The issue is that the functions `plan_forward_transforms` for `CuArray`s are not being loaded:. https://github.com/CliMA/Oceananigans.jl/blob/52bfeb09e3562f639deb32b8807f32a88e3a1cfa/src/Solvers/plan_transforms.jl#L30-L33. Note that your script is a julia file, so you should append it with `.jl` so that it's named `model_gpu_waves.jl`. As a side comment, you should take care when initializing a model with zero Eulerian-mean flow --- despite that this is common in the literature, it is unlikely to be a physically relevant initial condition (because it rarely occurs in nature, and because it will excite large inertial oscillations in your simulation). Some perspective on this issue is provided by [observations reported by Jerry Smith (2006)](https://journals.ametsoc.org/view/journals/phoc/36/7/jpo2910.1.xml?tab_body=abstract-display) and [a preprint that I'm first author on](https://glwagner.github.io/assets/pdf/near-inertial-waves-turbulence-growth-swell-preprint.pdf).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1317#issuecomment-767021509:98,log,login,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1317#issuecomment-767021509,1,['log'],['login']
Testability,I think you should add a simple test so this doesn't regress again,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3388#issuecomment-1809340514:32,test,test,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3388#issuecomment-1809340514,2,['test'],['test']
Testability,"I took a stab at it, and it seems to work (see below). If this is what you guys had in mind then I can add some tests and docstrings. I wasn't too sure where to place these `*spacings` functions. They can't go into the `Grids` or `Operators` modules since we need `KernelFunctionOperation`. So I added them to the `AbstractOperations/grid_metrics.jl`. I think these clash with the existing definitions in `Grids/nodes_and_spacings.jl` so I commented out the old ones. Do we want to deprecate/get rid of them? I guess it'll be a breaking change (for the greater good of course!). ---. ```julia; using Oceananigans; using Oceananigans.ImmersedBoundaries: PartialCellBottom. underlying_grid = RectilinearGrid(size=(4, 5, 6), extent=(1, 1, 1)); bottom(x, y) = -1 + (x + y) / 2; grid = ImmersedBoundaryGrid(underlying_grid, PartialCellBottom(bottom)); model = NonhydrostaticModel(; grid). zspacings(model.velocities.u) |> interior; ```. ```; 4×5×6 view(::Array{Float64, 3}, 4:7, 4:8, 4:9) with eltype Float64:; [:, :, 1] =; 0.0541667 0.166667 0.166667 0.166667 0.166667; 0.0541667 0.166667 0.166667 0.166667 0.166667; 0.166667 0.166667 0.166667 0.166667 0.166667; 0.166667 0.166667 0.166667 0.166667 0.166667. [:, :, 2] =; 0.166667 0.120833 0.166667 0.166667 0.166667; 0.0958333 0.120833 0.166667 0.166667 0.166667; 0.0958333 0.166667 0.166667 0.166667 0.166667; 0.166667 0.166667 0.166667 0.166667 0.166667. [:, :, 3] =; 0.166667 0.166667 0.166667 0.0875 0.166667; 0.166667 0.1625 0.0625 0.0875 0.166667; 0.1375 0.0375 0.0625 0.166667 0.166667; 0.1375 0.0375 0.166667 0.166667 0.166667. [:, :, 4] =; 0.166667 0.0791667 0.166667 0.166667 0.154167; 0.166667 0.166667 0.166667 0.129167 0.154167; 0.166667 0.166667 0.104167 0.129167 0.166667; 0.166667 0.0791667 0.104167 0.166667 0.166667. [:, :, 5] =; 0.166667 0.166667 0.145833 0.0458333 0.166667; 0.166667 0.166667 0.166667 0.166667 0.166667; 0.166667 0.166667 0.166667 0.166667 0.0708333; 0.166667 0.166667 0.145833 0.0458333 0.0708333. [:, :, 6] =; 0.166",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-2451107164:112,test,tests,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-2451107164,1,['test'],['tests']
Testability,I took out the turbulence closures from the `time_stepping_2` in #2140. I also split the solvers tests in two parts.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2139#issuecomment-1009465165:97,test,tests,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2139#issuecomment-1009465165,1,['test'],['tests']
Testability,"I tried it on a different computer where I installed datadeps brand new and the tests ran on the CPU. I guess I am catching up to the problem. Unfortunately, my laptop doesn't have a GPU so I need to run it elsewhere to reproduce the problem. Will work on that today.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446678465:80,test,tests,80,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446678465,1,['test'],['tests']
Testability,"I tried running some of the regression tests locally and they also fail, I can't see why this would cause different results given that the tests don't have background velocity fields?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1485576383:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1485576383,2,['test'],['tests']
Testability,"I tried running the `ShallowWaterModel` example on a `GPU` and it failed because of how we compute the norm, see the error message below. @glwagner , I remember we talked about this but, sadly, I don't know if we had a solution. What would you recommend?. ```; ERROR: LoadError: Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:33; [2] assertscalar(op::String); @ GPUArrays ~/.julia/packages/GPUArrays/8dzSJ/src/host/indexing.jl:53; [3] getindex(::CUDA.CuArray{Float64, 3}, ::Int64, ::Int64, ::Int64); @ GPUArrays ~/.julia/packages/GPUArrays/8dzSJ/src/host/indexing.jl:86; [4] getindex; @ ./subarray.jl:276 [inlined]; [5] _getindex; @ ./abstractarray.jl:1214 [inlined]; [6] getindex; @ ./abstractarray.jl:1170 [inlined]; [7] iterate; @ ./abstractarray.jl:1096 [inlined]; [8] iterate; @ ./abstractarray.jl:1094 [inlined]; [9] generic_normInf(x::SubArray{Float64, 3, CUDA.CuArray{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}); @ LinearAlgebra /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/generic.jl:465; [10] normInf; @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/generic.jl:556 [inlined]; [11] generic_norm2(x::SubArray{Float64, 3, CUDA.CuArray{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}); @ LinearAlgebra /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/generic.jl:497; [12] norm2; @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/generic.jl:558 ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-882647783:750,assert,assertscalar,750,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-882647783,1,['assert'],['assertscalar']
Testability,"I tried to follow the terminology in the regression test and sorry it was confusing. I used `truth` to refer to the data that is read from a file, done [here.](https://github.com/CliMA/Oceananigans.jl/blob/3676a718be1160f3ea70c3cce5dd21c5f06f144a/test/regression_tests/shallow_water_bickley_jet_regression.jl#L82) . I agree that only `v` fails but that means that `v` has larger differences compared to `u` and `h`. They all have differences. . I compared the initial data that we used in this regression test with the initial data read from the regression test. I saw that we had the 0th and 20th step saved. If there are differences at the beginning, then they are not solving exactly the same problem. In both we have that v is set to 0 and u and h are set to the Bickley jet with a random perturbation on `u`. The randomness will not be the same (unless we use a seed, which we don't, but we could) however the amplitude of the perturbations are different. This suggests to me that the initial conditions are not the same, and maybe the soruce of why the regression test fails. This is why I would like to know how the initial data was generated, using what script. I do suggest we regenerate it as that might solve a lot of the problems we are having with the regression tests. Do you want me to generate a script that load the inital data and compare it? You can see the results above. The fact that h has differences of `1e-7` is due to single precison, which means they are the same. However, u is different with errors much larger then `1e-7`, so the initial data is different. Unless there is something that I'm missing here?. I saw that the data files were dated June 1st 2022. For me it is stored at the following location. `/home/fpoulin/.julia/datadeps/regression_test_data/`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883:52,test,test,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883,6,['test'],"['test', 'tests']"
Testability,"I tried to run `benchmark_incompressible_model.jl` with advection=WENO5() and the error shown below occurred as it was benchmarking the first GPU case with grid size being 32 x 32 x 32. I'm running all benchmark cases with Float64. Many other error messages of a similar format were also outputted, but this one was the earliest one I can retrieve. My Oceananigans.jl was up to date with the latest merge #1790.; I also tried running it without specifying an advection and it ran fine. @francispoulin is experiencing the same problem. ```; Reason: unsupported use of an undefined name (use of 'pow'); Stacktrace:; [1] overdub; @ C:\Users\henry\.julia\packages\KernelAbstractions\X5hOr\src\backends\cuda.jl:264; [2] right_biased_αz₁(::Int64, ::Int64, ::Int64, ::OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}); @ C:\Users\henry\.julia\packages\Oceananigans\t50Gi\src\Advection\weno_fifth_order.jl:113; [3] overdub; @ C:\Users\henry\.julia\packages\Oceananigans\t50Gi\src\Advection\weno_fifth_order.jl:113; [4] overdub; @ C:\Users\henry\.julia\packages\Oceananigans\t50Gi\src\Advection\weno_fifth_order.jl:187; [5] right_biased_interpolate_zᵃᵃᶠ(::Int64, ::Int64, ::Int64, ::RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::WENO5, ::OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}); @ C:\Users\henry\.julia\packages\Oceananigans\t50Gi\src\Advection\weno_fifth_order.jl:228; [6] overdub; @ C:\Users\henry\.julia\packages\Oceananigans\t50Gi\src\Advection\weno_fifth_order.jl:228; [7] _right_biased_interpolate_zᵃᵃᶠ(::Int64, ::Int64, ::Int64, ::RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::WENO5, ::OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}); @ C:\Users\henry\.julia\pack",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1771#issuecomment-871687335:119,benchmark,benchmarking,119,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1771#issuecomment-871687335,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,"I tried to update Oceananigans version in ClimaOceanBiogeochemistry as:; ```; Oceananigans v0.92.0 `https://github.com/CliMA/Oceananigans.jl#glw/tuples-with-catke`; ```; Then I ran CATKE together with horizontal closure:; ```; catke = CATKEVerticalDiffusivity(); horizontal_closure = HorizontalScalarDiffusivity(ν=1e3); model = HydrostaticFreeSurfaceModel(; grid,; closure = (catke, horizontal_closure),; ...); ```; It still returns an error message:; `ERROR: type Tuple has no field κe`. Is it indicating the problem is still unresolved, or am I testing in an incorrect way?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3805#issuecomment-2386577814:547,test,testing,547,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3805#issuecomment-2386577814,1,['test'],['testing']
Testability,I updated the regression tests for shallow water and added them to this branch. I tested it on my laptop and the a cluster and all tested passed on both the CPU and GPU. Does anyone else want to try out the regression tests to see if they work for them? . I am happy to do testing but I can't test it for me as everything seems to be working. Help on this would be greatly apprecited.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1970044516:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1970044516,6,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,I wanted to add tests but the current test functionality is difficult to adjust to work for 2D arrays. . https://github.com/CliMA/Oceananigans.jl/blob/39e9b6f3e5c5f43845f21f8e10fdd629ced448fc/test/test_multi_region_cubed_sphere.jl#L9-L62. I'd like to rewrite those to use the connectivity property of the `ConformalCubedSphereGrid` rather than a series of if statements. Also address ##3242. But I wasn't planning to do this on this PR.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3256#issuecomment-1712759761:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3256#issuecomment-1712759761,3,['test'],"['test', 'tests']"
Testability,I was able to reproduce the hanging by running the test manually in the REPL. It gets stuck somewhere in `run!(simulation)` but couldn't get a useful stacktrace out. It does not hang in v0.54.0. I tried downgrading and pinning KernelAbstractions.jl and CUDA.jl back down to the version used in the v0.54.0 Manifest.toml but it still got stuck... Could be some other package. > Should we stop updating docs/Manifest.toml? Is that possible?. Couldn't find anything in the Pkg.jl docs that would help but maybe we should switch the order of the `instantiate` and `develop` calls here? https://github.com/CliMA/Oceananigans.jl/blob/e02790202614916bd918a039216a73c61ff7048a/.buildkite/pipeline.yml#L326,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-816731027:51,test,test,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-816731027,1,['test'],['test']
Testability,"I was getting two errors but when I added `CUDA.allowscalar(true)` into `test_shallow_water_models.jl` the tests all passed on a CPU and GPU on my laptop. Note that in `dependencies_for_runtests.jl` this line [here](https://github.com/CliMA/Oceananigans.jl/blob/f2511962ca15f3aaf87d2571e3551e59dc05c694/test/dependencies_for_runtests.jl#L78) only found a GPU on my computer. When I changed it temporarily to test both CPU and GPU and all 80 tests passed. I remember last year in #3050 @navidcy found that it ran on some computers but not others. I presume that is still a concern. But lots has changed since then, for example we are no longer using julia 1.8. @navidcy, might you be able to try the shallow water tests on the same computer you found the failers in last year to see if the problem persists?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1967097404:107,test,tests,107,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1967097404,5,['test'],"['test', 'tests']"
Testability,"I was looking at the errors on `cpu-solver_tests` and found the message below, followed by a bunch of other errors on the lines below. Does someone know why this is failing? I can take a look at it but thought I'd check to see whether this is understood or not. ```; Vertically stretched Poisson solver [FACR, CPU, (Flat, Bounded, Bounded)]: Error During Test at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/test/test_poisson_solvers.jl:272;   | Test threw exception;   | Expression: vertically_stretched_poisson_solver_correct_answer(Float64, arch, topo, 8, 8, 1:8);   | ArgumentError: length(size) must be 2.;   | Stacktrace:;   | [1] validate_tupled_argument(::Tuple{Int64,Int64,Int64}, ::Type{T} where T, ::String, ::Int64; greater_than::Int64) at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/src/Grids/input_validation.jl:24;   | [2] validate_tupled_argument(::Tuple{Int64,Int64,Int64}, ::Type{T} where T, ::String, ::Int64) at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/src/Grids/input_validation.jl:24;   | [3] validate_size(::Type{T} where T, ::Type{T} where T, ::Type{T} where T, ::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/src/Grids/input_validation.jl:48;   | [4] VerticallyStretchedRectilinearGrid(::Type{T} where T; architecture::CPU, size::Tuple{Int64,Int64,Int64}, x::Tuple{Int64,Int64}, y::Tuple{Int64,Int64}, zF::UnitRange{Int64}, halo::Tuple{Int64,Int64,Int64}, topology::Tuple{DataType,DataType,DataType}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/src/Grids/vertically_stretched_rectilinear_grid.jl:50;   | [5] vertically_stretched_poisson_solver_correct_answer(::Type{T} where T, ::CPU, ::Tuple{DataType,DataType,DataType}, ::Int64, ::Int64, ::UnitRange{Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/test/test_poisson_solvers.jl:140;   | [6] top-level scope at /storage7/buil",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-819603114:355,Test,Test,355,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-819603114,3,"['Test', 'test']","['Test', 'test']"
Testability,"I was referring to tests in the CI suite, not tests that somebody run somewhere once with one version of the code... (the latter is GREAT, not to diminish the effort @liuchihl!! test like those help us understand what was wrong and how to fix it... but they will get forgotten and not necessarily be repeated every time we update the code .... and if a new bug comes along we might not be able to catch it quickly if there is nothing in the CI suite)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287371326:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287371326,3,['test'],"['test', 'tests']"
Testability,"I was thinking of doing some prototyping and benchmarking in a sandbox by building off the example in my PR https://github.com/vchuravy/GPUifyLoops.jl/pull/18. The PR contains an example that can be extended to rely on a `Grid` struct, multiple `FaceField`s and ` CellField`. So I'll prototype grids and fields that are `isbitstype` (you already helped by doing this for a grid in https://github.com/climate-machine/Oceananigans.jl/issues/59#issuecomment-467660181) and test to see if they work on the GPU with GPUifyLoops.jl. If they do work and performance isn't degraded then I'll rewrite the operators to use grid and field structs. You probably know how to do this better than me, but might be good if I rewrite the operators as they's still undocumented and do some _slightly convoluted_ stuff to avoid having to store intermediate calculations. Right now I'm focusing on system tests and benchmarks but once @christophernhill @jm-c and I get closer to implementing the variable _Δz_ grid #47 I will work on this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/115#issuecomment-470782067:45,benchmark,benchmarking,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/115#issuecomment-470782067,5,"['benchmark', 'sandbox', 'test']","['benchmarking', 'benchmarks', 'sandbox', 'test', 'tests']"
Testability,"I was thinking we could change `viscosity()` and `diffusivity()` to account for the different (vertical, horizontal and 3D) formulations (with tests for it, ofc). In that way `viscosity()` would return, for example, `[v, v, 0]` for a horizontal formulation, `[0, 0, v]` for a vertical formulation, and a `Number` v for a 3D formulation. I think this would be desirable from the user's perspective and it would make diagnostics easier when non-3D formulations are used. Based on @glwagner's comments I was also going to remove the extra definition of `calc_κccc()` for Smagorinsky that's currently in this PR. However, I noticed this breaks some internal functions. Before I go ahead and fix those, I wanted to check if this changed is desirable from the developers' perspective. @glwagner @simone-silvestri what do you guys think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2752#issuecomment-1265545180:143,test,tests,143,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2752#issuecomment-1265545180,1,['test'],['tests']
Testability,I was thinking we'd find out via the tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3340#issuecomment-1763142776:37,test,tests,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3340#issuecomment-1763142776,1,['test'],['tests']
Testability,I will actually close this PR and write a section in the benchmarks documentation,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2760#issuecomment-1263709825:57,benchmark,benchmarks,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2760#issuecomment-1263709825,1,['benchmark'],['benchmarks']
Testability,I will fix these tests later today (Sydney time..)!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3329#issuecomment-1756586591:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3329#issuecomment-1756586591,1,['test'],['tests']
Testability,"I will merge this PR but created an issue, #1448 , to modify `test_dynamics.jl` to include tests for `ShallowWaterModel`. Alternatively, we could have `test_shallow_water_dynamics.jl`. The latter does have a nice ring to it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1441#issuecomment-794278463:91,test,tests,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1441#issuecomment-794278463,1,['test'],['tests']
Testability,I will test it!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2436#issuecomment-1099245871:7,test,test,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2436#issuecomment-1099245871,1,['test'],['test']
Testability,I will try to test on GPU now,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482929337:14,test,test,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482929337,1,['test'],['test']
Testability,I wonder about CPU execution though... because the `MatrixSolver` with `ILU` was not tested and that in my experience seemed always to be the fastest method,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2635#issuecomment-1172575160:85,test,tested,85,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2635#issuecomment-1172575160,1,['test'],['tested']
Testability,"I wonder if it considers `benchmarks.md` as part of the docs, which is not too crazy a thought. If so, then anyline in your file that is not consistent with markdown standard could cause a problem?. I would suggest trying viewing your file using a markdown program and see if it complains about any particular lines. Or, are there any lines that don't appear?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1950#issuecomment-902863446:26,benchmark,benchmarks,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1950#issuecomment-902863446,1,['benchmark'],['benchmarks']
Testability,"I wonder if this would be better proposed as a custom dynamics option like with particles? . I'm just concerned that you could implement some dynamics in this way that are a core part of the model dynamics rather than a simulation of that model. For example, if you had a computationally intensive source/sink term, instead of recalculating for the tracer it's going to and from you could add a custom dynamic that calculates it once, takes from one and adds to the other (this is how PISCES implements a lot of the growth to prevent repetitive calculation of the same values, I don't know if this would be faster in this setting without testing but just as an example).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1279050785:638,test,testing,638,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1279050785,1,['test'],['testing']
Testability,"I wonder if we are not instantiating the test environment correctly. We do instantiate here:. https://github.com/CliMA/Oceananigans.jl/blob/abb66e32d333562dd9aaeb7dd2ed8fac5e781368/.buildkite/pipeline.yml#L20. but the segmentation fault is coming from `Pkg`:. ```; Stacktrace:; --;   | [1] pipeline_error;   | @ ./process.jl:565 [inlined];   | [2] read(cmd::Cmd);   | @ Base ./process.jl:449;   | [3] collect_artifacts(pkg_root::String; platform::Base.BinaryPlatforms.Platform);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:720;   | [4] collect_artifacts;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:706 [inlined];   | [5] download_artifacts(env::Pkg.Types.EnvCache; platform::Base.BinaryPlatforms.Platform, julia_version::VersionNumber, verbose::Bool, io::Base.DevNull);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:752;   | [6] up(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}, level::Pkg.Types.UpgradeLevel; skip_writing_project::Bool, preserve::Nothing);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1542;   | [7] up(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; level::Pkg.Types.UpgradeLevel, mode::Pkg.Types.PackageMode, preserve::Nothing, update_registry::Bool, skip_writing_project::Bool, kwargs::@Kwargs{io::Base.DevNull});   | @ Pkg.API /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:351;   | [8] up;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:326 [inlined];   | [9] up;   | @ /net/ocean/home/data44/data5/gl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250997136:41,test,test,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250997136,1,['test'],['test']
Testability,"I would add a minimal test given this feature could change, and hopefully make sure the test doesn't increase CI cost much.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2213#issuecomment-1028185427:22,test,test,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2213#issuecomment-1028185427,2,['test'],['test']
Testability,"I would keep the benchmarks simple and avoid a near-global ocean setup. The setups have to be maintained so its best if they are simple and easy to update when syntax changes. Also just for the purpose of setting up the pipeline, you probably only need one or two setups. Then we can incrementally build them up after we have observed that the pipeline is useful for at least a few days (if launching nightly). Hopefully the benchmarks will be efficient enough to run nightly.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3492#issuecomment-1973858990:17,benchmark,benchmarks,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3492#issuecomment-1973858990,4,['benchmark'],['benchmarks']
Testability,"I would like to start working on this. Note that in terms of maintenance burden, the docs already depend extensively on plotting. So I'm not sure a plotting extension will increase CI significantly. On the contrary we can start with a minimalist approach that simply uses the examples to test the functionality in the extension. I'd like to discuss design before starting. I think the basic functionality we need is to support automatically plotting of 2D fields. Basically we want to be able to write `heatmap!(ax, c)` and have it work automatically, eg if `c` is two-dimensional, then the non-trivial dimensions are automatically detected and appropriate node values inserted. I think this should work even if the dimensions are not `Flat`, so basically we just want to take a look at `size(c)`. We can also support `lines!` and `scatter!` and `scatterlines!` for 1D fields. Is there a streamlined way to do this for all situations, or do we need to add support for each method like `heatmap!`, `contour!`, `contourf!`, etc, individually?. A second question is how to support inspection of 3D fields. I think this is pretty hard. @Sbozzolo has some experience with this so he might have some valuable input.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3178#issuecomment-2271718591:288,test,test,288,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3178#issuecomment-2271718591,2,['test'],['test']
Testability,I would promote splitting up the tests rather than splitting loops if possible!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2183#issuecomment-1021711104:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2183#issuecomment-1021711104,1,['test'],['tests']
Testability,"I would suggest sticking with PAR rather than light.  PAR is very common in biogeochemistry and it is made up of specific bands of light and hence “light” and PAR aren’t exactly equivalent.  Calling it “light” could cause confusion if someone calculates PAR from the incoming solar radiation (light).; On Nov 18, 2022 at 3:07 PM +0000, Jago Strong-Wright ***@***.***>, wrote:; > @jagoosw commented on this pull request.; > In test/test_biogeochemistry.jl:; > > + wait(device(model.architecture), par_calculation); >; > +end; >; > +; >; > +biogeochemistry_parameters = (; >; > + growth_rate = 1/day,; >; > + light_limit = 3.5,; >; > + mortality_rate = 0.1/day,; >; > +; >; > + water_light_attenuation_coefficient = 0.12,; >; > + phytoplankton_light_attenuation_coefficient = 0.06,; >; > + phytoplankton_light_attenuation_exponent = 0.6,; >; > + surface_PAR = t -> 100*max(0.0, sin(t*π/(12hours))); >; > +); >; > +; >; > +biogeochemistry = SomethingBiogeochemistry(tracers = :P,; >; > + auxiliary_fields = :PAR,; >; > Makses sense, after I started I realised it was a bigger challenge than I thought it would be!; > I'll try and make these changes later.; > PAR stands for photosynthetically available radiation, perhaps it would be more clear to call it light here.; > —; > Reply to this email directly, view it on GitHub, or unsubscribe.; > You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1320161513:426,test,test,426,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1320161513,2,['test'],['test']
Testability,"I wrote a simple test that I believe represents a similar case, in which the fields of the type in question are pointers. On my machine there does not seem to be any performance difference. ```julia; using Random, BenchmarkTools, Printf ; ; struct Dummy ; a::Array{Float64,2} ; b::Array{Float64,2} ; c::Array{Float64,2} ; end ; ; mutable struct MutableDummy ; a::Array{Float64,2} ; b::Array{Float64,2} ; c::Array{Float64,2} ; end ; ; Dummy(n) = Dummy(rand(n, n), rand(n, n), rand(n, n)) ; MutableDummy(n) = MutableDummy(rand(n, n), rand(n, n), rand(n, n)) ; ; function crunch_dummy(d, nloops) ; for i = 1:nloops ; @. d.a = d.b * d.c ; end ; nothing ; end ; ; nloops = 1000 ; n = 1024 ; d = Dummy(n) ; mutable_d = MutableDummy(n) ; ; # Compile ; crunch_dummy(d, 1) ; crunch_dummy(mutable_d, 1) ; ; @printf ""Dummy crunching numbers: "" ; @btime crunch_dummy(d, nloops) ; ; @printf ""Mutable dummy crunching numbers: "" ; @btime crunch_dummy(mutable_d, nloops) ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/42#issuecomment-462544959:17,test,test,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/42#issuecomment-462544959,1,['test'],['test']
Testability,"I'd be in favor of always emitting a warning for `ImmersedBoundaryCondition` that it's experimental (no published papers, few validation tests)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3142#issuecomment-1613499377:137,test,tests,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3142#issuecomment-1613499377,1,['test'],['tests']
Testability,"I'd like to also two 2D examples. 1. rising thermal bubble and; 2. lid-driven cavity. as super simple examples. Their set up shouldn't take more than 10 lines excluding comments. > Dramatically simplify internal wave example. +1! Always good to simplify scripts as much as possible. Would also be nice to include it in the example tests (PR #418) if it can use something like `makeplot = false`. > Free decay of two dimensional turbulence (use x,y plane). Only issue with 2D xy-plane simulations is I think things are weird with `Nz=1` so I had to use `Nz=2` (see Taylor-Green vortex test in `test_dynamics.jl`). 1D and 2D models haven't been a priority unfortunately so this sort of stuff has cropped up. I think 2D xz and yz simulations are fine with `Ny=1` and `Nx=1` respectively. > Stratified Couette flow example. I can simplify the simulation script from PR #381 down to a 2D example. This one would be good. > I think we should split deepening mixed layer into a few examples. Sound like a good idea!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/332#issuecomment-533084378:331,test,tests,331,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/332#issuecomment-533084378,2,['test'],"['test', 'tests']"
Testability,I'd like to help and hopefully clean up or simplify the tests along the way.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2307#issuecomment-1120209140:56,test,tests,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2307#issuecomment-1120209140,2,['test'],['tests']
Testability,I'll add a test.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2186#issuecomment-1021897957:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2186#issuecomment-1021897957,1,['test'],['test']
Testability,I'll close this PR and let you know when I've managed to test this. Thanks!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3262#issuecomment-1719179326:57,test,test,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3262#issuecomment-1719179326,1,['test'],['test']
Testability,I'll fix the unit tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1480634435:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1480634435,1,['test'],['tests']
Testability,I'll let @ali-ramadhan explain exactly what's the best way to have the `.png` for the convergence tests in without burdening the git history.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-873279370:98,test,tests,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-873279370,1,['test'],['tests']
Testability,I'll merge this now since benchmarking / major changes are planned anyways...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1454775895:26,benchmark,benchmarking,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1454775895,1,['benchmark'],['benchmarking']
Testability,I'll merge when tests pass!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2488#issuecomment-1112084764:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2488#issuecomment-1112084764,1,['test'],['tests']
Testability,I'll merge when tests pass! This is needed for https://github.com/CliMA/OceanTurbulenceParameterEstimation.jl/pull/165,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2220#issuecomment-1029737813:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2220#issuecomment-1029737813,1,['test'],['tests']
Testability,I'll open a test PR from master and see if I can get a test to fail!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868903376:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868903376,2,['test'],['test']
Testability,I'll proceed with nuking as soon as tests pass. But I do advocate for the need of a simple example on the sphere to appear in the docs soon... :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1691#issuecomment-847373536:36,test,tests,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1691#issuecomment-847373536,2,['test'],['tests']
Testability,I'll set up a simple test in which both tracers and velocity fields oscillate and see if we can reproduce the bug.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-818006716:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-818006716,2,['test'],['test']
Testability,I'll take a look at the tests and see if we need to change anything before merging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1127177867:24,test,tests,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1127177867,1,['test'],['tests']
Testability,I'll try to figure out what's going on with the distributed tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3581#issuecomment-2096296153:60,test,tests,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3581#issuecomment-2096296153,1,['test'],['tests']
Testability,"I'll wait till it's ready to review in detail, but my main high-level comment is that we need to ensure that, at the end of a time-step, both the prognostic state (horizontal velocities and tracers) and auxiliary state (pressure, vertical velocity, eddy diffusivities) are all consistent and available for output at the current model time. If we intertwine communication with the computation of the auxiliary state and tendencies, then we should _define_ the tendencies as part of the auxiliary state. This will change the semantics and logic of the time stepping loop. But I think it at least as rational as our previous organization of events. The main change is that tendencies will now be computed one ""extra"" time in a simulation (at the very last time-step, the tendencies are not needed if no further time-steps will be taken). In the vast majority of cases this extra cost is negligible because simulations run for hundreds or hundreds of thousands of time-steps. There is the slightly possibility of pessimizing the edge case of a simulation that takes one time step, which may be useful for parameter estimation. For that purpose we may want to avoid computing the ""extra"" tendency. I'm thinking though that we should save that additional optimization until we need it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1452351616:537,log,logic,537,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1452351616,1,['log'],['logic']
Testability,"I'll work on a new test that catches this bug, then we can try to fix it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2065#issuecomment-974374336:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2065#issuecomment-974374336,1,['test'],['test']
Testability,"I'm a bit stumped. The error is. ```; Test threw exception; --;   | Expression: advective_and_multiple_forcing(arch);   | TaskFailedException;   |  ;   | nested task error: BoundsError; ```. But I can't reproduce this locally. I can fathom a `BoundsError` when we use a high-order advection scheme and our halos aren't big enough. Right now we check the ""model advection scheme"" and the grid halos to catch this issue, but we don't check the forcings. However, the test uses `halo = (3, 3, 3)` right now:. https://github.com/CliMA/Oceananigans.jl/blob/791bb83e4c49386cc31292bf391762f1cd96bdee/test/test_forcings.jl#L115. On the other hand, if I time step a model for which I _know_ the halos are too small (locally), I don't get an error (even though I'd like to). So maybe there _is_ something fishy...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1092135179:38,Test,Test,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1092135179,3,"['Test', 'test']","['Test', 'test']"
Testability,"I'm amazed though - do we not have a test for building HydrostaticFreeSurfaceModel in this simplest case? It seems we need quite a few more tests for the TripolarGrid. We need to test various combination of model inputs and make sure that all of the ones we intent to support are working (free surfaces, advection schemes, coriolis, closures, etc).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3806#issuecomment-2397268979:37,test,test,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3806#issuecomment-2397268979,6,['test'],"['test', 'tests']"
Testability,I'm closing this; @loganpknudsen please re-open if you still think there is an issue.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3412#issuecomment-1989008367:19,log,loganpknudsen,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3412#issuecomment-1989008367,1,['log'],['loganpknudsen']
Testability,I'm debating whether we should bump minor release. In principle there shouldn't be any breaking change. But we stopped testing on v1.8 and start testing on v1.9...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615842024:119,test,testing,119,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615842024,2,['test'],['testing']
Testability,I'm game to try. Should we modify the baroclinic adjustment problem or is there another benchmark you have in mind?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1948120596:88,benchmark,benchmark,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1948120596,1,['benchmark'],['benchmark']
Testability,I'm going to start with some simple analytical solution tests (perhaps heat/salinity diffusion) until #73 is resolved. Then can begin on the 'designed forcing' CI tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-467629836:56,test,tests,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-467629836,2,['test'],['tests']
Testability,I'm gonna stick to `FPlane` for now because we don't have a regression test for `BetaPlane`. Once we get the regression tests in I'll submit a new PR for `BetaPlane`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1371#issuecomment-780769320:71,test,test,71,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1371#issuecomment-780769320,2,['test'],"['test', 'tests']"
Testability,"I'm happy to do this. However, I need to know what to do, exactly. What code should I put in the verification folder, and what is the format? A few more questions:. - Where do we write documentation for the verification experiments? ; - Are we continuously testing verification experiments to ensure they run with new versions of the code, or should verification experiments be tagged to a particular version of the code?. I think all these questions should themselves be answered in the documentation, also. Otherwise it is not clear how to contribute new verification experiments.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/547#issuecomment-562111833:257,test,testing,257,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/547#issuecomment-562111833,1,['test'],['testing']
Testability,"I'm happy to help moving this stuff to an extension. I think it'll be easier to build the extension from the outset, since the diff in this PR makes it obvious exactly what needs to go into the extension. The other question we have to answer is how to test the AMD functionality.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1937260414:252,test,test,252,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1937260414,1,['test'],['test']
Testability,I'm happy with this PR. I think we should merge when tests pass. How about others?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1595621060:53,test,tests,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1595621060,1,['test'],['tests']
Testability,"I'm not 100% sure but I think doing reductions over non-contiguous data might be subject to variable timings that depend on how the data is organized in memory. In an ideal world, we would benchmark these things regularly...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-960354233:189,benchmark,benchmark,189,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-960354233,1,['benchmark'],['benchmark']
Testability,I'm not against a proliferation of advection schemes. We should probably not merge new advection schemes without a convergence test though?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1320#issuecomment-768400642:127,test,test,127,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1320#issuecomment-768400642,1,['test'],['test']
Testability,I'm not sure how this works for distributed tests but I don't think anything needs to change there,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250049060:44,test,tests,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250049060,1,['test'],['tests']
Testability,I'm not sure if I'm benchmarking correctly on the GPU. I used `@benchmark CUDA.@sync function_to_bench()`. Running the `doubly_bounded_poisson.jl` script with `N = 64` on tartarus gave me:. ### On CPU. ![solvers_benchmark_CPU](https://user-images.githubusercontent.com/7112768/189507791-e658161f-6826-4755-aa53-39d4caf93701.png). ### On GPU. ![solvers_benchmark_GPU](https://user-images.githubusercontent.com/7112768/189507968-bb71dacc-06b6-498e-8b8d-a29017fc88f3.png),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1242840455:20,benchmark,benchmarking,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1242840455,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,I'm not sure if we've tested but I've assumed there is a performance benefit to the simpler version for regularly spaced grids rather than using the binary search. It would probably be sensible to change the differentiation between the methods to just `fractional_index` though.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3356#issuecomment-1775532157:22,test,tested,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3356#issuecomment-1775532157,2,['test'],['tested']
Testability,"I'm not sure this will run smoothly on Julia v1.6. E.g., on v1.6:. ```Julia; (Oceananigans) pkg> instantiate; ERROR: AssertionError: sourcepath !== nothing; Stacktrace:; [1] is_package_downloaded(ctx::Pkg.Types.Context, pkg::Pkg.Types.PackageSpec); @ Pkg.Operations ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1789; [2] #13; @ ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:131 [inlined]; [3] _all; @ ./reduce.jl:923 [inlined]; [4] #all#698; @ ./reducedim.jl:886 [inlined]; [5] all; @ ./reducedim.jl:886 [inlined]; [6] is_instantiated(ctx::Pkg.Types.Context); @ Pkg.Operations ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:131; [7] instantiate(ctx::Pkg.Types.Context; manifest::Nothing, update_registry::Bool, verbose::Bool, platform::Base.BinaryPlatforms.Platform, allow_build::Bool, allow_autoprecomp::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Pkg.API ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:1358; [8] instantiate; @ ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:1325 [inlined]; [9] #instantiate#252; @ ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:1321 [inlined]; [10] instantiate(); @ Pkg.API ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:1321; [11] do_cmd!(command::Pkg.REPLMode.Command, repl::REPL.LineEditREPL); @ Pkg.REPLMode ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/REPLMode/REPLMode.jl:405; [12] do_cmd(repl::REPL.LineEditREPL, input::String; do_rethrow::Bool); @ Pkg.REPLMode ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/REPLMode/REPLMode.jl:386; [13] do_cmd; @ ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/REPLMode/REPLMode.jl:377 [inlined]; [14] (::Pkg.REPLMode.var""#24#27""{REPL.LineEditREPL, REPL.LineEdit.Prompt})(s::REPL.LineEdit.MIState, buf::IOBuffer, ok::Bool); @ Pkg.REPLMode ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/REPLMode/REPLMode.jl:550; [15] #invokelatest#2; @ ./essentials.jl:708 [inlined]; [16] invokelatest; @ ./essentials.jl:706 [inlined]; [17] run_interf",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2090#issuecomment-984239840:117,Assert,AssertionError,117,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2090#issuecomment-984239840,1,['Assert'],['AssertionError']
Testability,I'm not sure whats causing these tests to fail now?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481354840:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481354840,1,['test'],['tests']
Testability,I'm not sure whether that is a correct assumption or not. Some of them were designed to be used on the GPU:. https://github.com/CliMA/Oceananigans.jl/blob/6e39d3fcc098c69ac207cc21be759cf6bd3ec604/examples/ocean_wind_mixing_and_convection.jl#L157-L158. But I don't think anyone has ever tried to run the Kelvin-Helmholtz example on the GPU before (for example). Many of the others have been run on the GPU. But I think to really ensure this is the case in the long run we'll have to use CI. We actually used to do something like this (including altering selected lines in the test scripts to make them more amenable to CI) so someone could dredge up that testing code to use with our GPU CI to solve this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-881456119:575,test,test,575,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-881456119,2,['test'],"['test', 'testing']"
Testability,I'm not sure why this fails as the test runs fine locally,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1629476318:35,test,test,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1629476318,1,['test'],['test']
Testability,"I'm not sure. I guess whatever reproduces #1767. It seems that it only occurs sometimes so maybe we just need to make an existing test larger and run it multiple times, like 10 times?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868881166:130,test,test,130,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868881166,1,['test'],['test']
Testability,"I'm not sure. I'm not very familiar with the testing part of Oceananigans, so I'm not sure what would be a good test for this. Just testing that `min_Δz` works seems too specific, on the other hand, creating a whole simulation with a stretched grid and running it with an LES and adaptive time-stepping just to test that seems wasteful. I'm happy to just merge this for now and create a test for this in the future. Thoughts?. CC @glwagner @ali-ramadhan",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1751#issuecomment-866087165:45,test,testing,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1751#issuecomment-866087165,5,['test'],"['test', 'testing']"
Testability,I'm ok with removing `Function` here by the way. I don't think we need a test for it --- those tests are in Julia Base (ie we don't need to test that callable objects are possible). Why is `<:Function` there anyways?. The only thing I can think of is that users have to subtype `<:Function` for this to work and maybe that makes code more legible. But it's a restriction of `StructForcing` also has to subtype something else. So I would actually be in favor of removing the `<:Forcing` restriction. Note there are many places in the code we allow this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3237#issuecomment-1695671775:73,test,test,73,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3237#issuecomment-1695671775,3,['test'],"['test', 'tests']"
Testability,"I'm pretty sure fresh installs don't necessarily reproduce the Manifest. I think unless you pin something, Pkg will try to get the latest set of packages that are still compatible. In fact, I don't think it's even recommended to add a Manifest with the github repo (at least not according to github: https://github.com/github/gitignore/blob/b0012e4930d0a8c350254a3caeedf7441ea286a3/Julia.gitignore#L20-L24). This is an example of a fresh Oceananigans install I just made. Notice it installed CUDA v3.4.2:. ```julia; (@v1.6) pkg> activate .; Activating new environment at `~/Dropbox/tests/fresh/Project.toml`. (fresh) pkg> add Oceananigans; Updating registry at `~/.julia/registries/General`; Resolving package versions...; Installed ChainRulesCore ─ v1.7.2; Installed Tables ───────── v1.6.0; Installed Parsers ──────── v2.0.5; Installed StaticArrays ─── v1.2.13; Updating `~/Dropbox/tests/fresh/Project.toml`; [9e8cae18] + Oceananigans v0.63.1; Updating `~/Dropbox/tests/fresh/Manifest.toml`; [621f4979] + AbstractFFTs v1.0.1; [79e6a3ab] + Adapt v3.3.1; [4fba245c] + ArrayInterface v3.1.33; [ab4f0b2a] + BFloat16s v0.1.0; [fa961155] + CEnum v0.4.1; [179af706] + CFTime v0.1.1; [052768ef] + CUDA v3.4.2; [72cfdca4] + CUDAKernels v0.3.0; [7057c7e9] + Cassette v0.3.9; [d360d2e6] + ChainRulesCore v1.7.2; [34da2185] + Compat v3.39.0; [a8cc5b0e] + Crayons v4.0.4; [7445602f] + CubedSphere v0.1.0; [9a962f9c] + DataAPI v1.9.0; [864edb3b] + DataStructures v0.18.10; [e2d170a0] + DataValueInterfaces v1.0.0; [b552c78f] + DiffRules v1.3.1; [ffbed154] + DocStringExtensions v0.8.5; [b305315f] + Elliptic v1.0.1; [e2ba6199] + ExprTools v0.1.6; [7a1cc6ca] + FFTW v1.4.5; [5789e2e9] + FileIO v1.11.1; [0c68f7d7] + GPUArrays v8.1.1; [61eb1bfa] + GPUCompiler v0.12.9; [c27321d9] + Glob v1.3.0; [615f187c] + IfElse v0.1.0; [92d709cd] + IrrationalConstants v0.1.0; [82899510] + IteratorInterfaceExtensions v1.0.0; [033835bb] + JLD2 v0.4.14; [692b3bcd] + JLLWrappers v1.3.0; [0f8b85d8] + JSON3 v1.9.1; [63c18a36] + Ke",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1996#issuecomment-933978237:582,test,tests,582,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1996#issuecomment-933978237,3,['test'],['tests']
Testability,I'm quite confused that this test from `test_seawater.jl` fails:. https://buildkite.com/clima/oceananigans/builds/15457#018eec75-847a-4323-b8e9-9f104d750297/37-1020. On tartarus everything passes...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2061846982:29,test,test,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2061846982,1,['test'],['test']
Testability,"I'm seeing some significant slow down with the boundary condition. ```julia; # Monin-Obukhov drag coefficient; z₀ = 1e-4 # Charnock roughness; κ = 0.4 # Von Karman constant; Cᴰ(Δz) = (κ / log(Δz / 2z₀))^2. @inline bottom_drag_u(x, y, t, u, w, Cᴰ) = - Cᴰ * u * sqrt(u^2 + w^2); @inline bottom_drag_w(x, y, t, u, w, Cᴰ) = - Cᴰ * w * sqrt(u^2 + w^2); @inline bottom_drag_u(x, y, z, t, u, w, Cᴰ) = - Cᴰ * u * sqrt(u^2 + w^2); @inline bottom_drag_w(x, y, z, t, u, w, Cᴰ) = - Cᴰ * w * sqrt(u^2 + w^2). Δz = 1 / Nz; Δx = 2π / Nz; u_drag_bc = FluxBoundaryCondition(bottom_drag_u, field_dependencies=(:u, :w), parameters=Cᴰ(Δz)); w_drag_bc = FluxBoundaryCondition(bottom_drag_w, field_dependencies=(:u, :w), parameters=Cᴰ(Δx)); u_bcs = FieldBoundaryConditions(bottom=u_drag_bc, immersed=u_drag_bc); w_bcs = FieldBoundaryConditions(immersed=w_drag_bc); ```. This is the basic way to implement a quadratic drag from the interface in this PR. In this case what happens under the hood is that we create 4 `ContinuousBoundaryFunction` for the relevant faces of boundary-adjacent cells (the other 2 faces are normal to the given velocity component, so receive a no-penetration boundary condition). So there could be a type instability compiling all of those (which have been notoriously fickle to compile in the past). We clearly need to hard code quadratic drag though, because for stretched grids and partial cells (and other types of immersed boundaries in the future) we have to do precompute the logarithm of the grid metrics (to use in a Monin-Obukhov-type model) in each direction independently, as well as the logarithm of the roughness. It's too much for this PR though, so I think we should just document how to specify no-slip on immersed boundaries (which appears to be performant), and add a few tests. Then in a future PR we can add a `QuadraticDrag` utility (I have a prototype for this object; others are welcome to collaborate on implementing the necessary functions to support it).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104673081:188,log,log,188,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104673081,8,"['log', 'test']","['log', 'logarithm', 'tests']"
Testability,"I'm sorry, I misinterpreted the results @ali-ramadhan posted. I thought that `CenteredSecondOrder` was 1.0x slower with julia 1.6 than with 1.5 (and that small slowdowns were observed for the other schemes, which is why I recommended testing the biharmonic scheme.) Now I understand that these results are all for julia 1.6; we are comparing the results with previously obtained benchmarks (not posted) for julia 1.5. Looking at @tomchor and @ali-ramadhan's results then it looks like simulations with WENO5 are running approximately 6-8 times slower on julia 1.6 than it was on julia 1.5, while other advection schemes (and closures) are unchanged --- correct?. Is the _CPU_ performance of WENO5 roughly equivalent between julia 1.5 and julia 1.6?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868677634:234,test,testing,234,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868677634,2,"['benchmark', 'test']","['benchmarks', 'testing']"
Testability,"I'm sort of glad to see @glwagner is verifying the issues we first discussed last year. My 2 cents: . - Small errors in the BC eventually propagating to the whole simulation is unavoidable; this is a well mixed flow. Checking on integrated quantities, such as maintaining conserved properties or matching the expected global dissipation rate, is a more achievable and important goal. ; - Using a test case with some stronger pressure gradients along the boundary would be good as well since this induces much of the error. The circle @wenegrat suggests is the classic, but you might be able to find a more subtle case which is more relevant to your application. Perhaps turbulent flow in a wavy-wall channel? Linking the amplitude of the waves to the change in turbulent statistics seems pretty well aligned with your application (though I could be wrong).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-855362669:396,test,test,396,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-855362669,1,['test'],['test']
Testability,I'm struggling to fix this test failing and am not sure why its not passing the combined velocities correctly,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1576845262:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1576845262,1,['test'],['test']
Testability,"I'm thinking about updating `benchmarks.md` with the new benchmark result tables and graphs. Should I do it now or wait until the docs get refactored?; It's only a single file in the appendix section, but I'm not too sure how me opening a PR on it now to update it will affect the grander refactoring plan.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880741401:29,benchmark,benchmarks,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880741401,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"I'm thinking of an integration test that tests the whole pipeline: use of a 3-tuple when constructing a model, test that time-stepping works without an error, and test that the output is correct. It's probably easier to compare two models than to compare one model to an analytical solution. Comparison to an analytical solution is tricky, usually we have to invoke an arbitrary tolerance.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883638590:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883638590,4,['test'],"['test', 'tests']"
Testability,"I'm trying to integrate a scalar in time (the scalar itself being a volume-integrated `Field`). Pretty much what's being done here: https://github.com/tomchor/Oceanostics.jl/blob/main/test/test_budgets.jl. I can probably come up with a way to do it without auxiliary fields. I just assumed `auxiliary_fields` could also be scalars since fields is written as ""fields"" in the docs, rather than ""`Fields`"". (Although I'm not sure what you mean by a ""parameter"").",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696:184,test,test,184,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696,1,['test'],['test']
Testability,"I'm trying to set up back Codecov for Oceananigans.jl, e.g., we'll be able to see which parts of the code are covered by the tests and which bits are not. Something like https://app.codecov.io/gh/CliMA/OceanLearning.jl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063298738:125,test,tests,125,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063298738,1,['test'],['tests']
Testability,"I'm trying to write a test. But, while on **`main`** branch:. ```julia; julia> using Oceananigans. julia> model = HydrostaticFreeSurfaceModel(grid=RectilinearGrid(size=(1, 1, 1), extent=(1, 2, 3)),; buoyancy = BuoyancyTracer(),; tracers = (:b, :e)); HydrostaticFreeSurfaceModel{CPU, Float64}(time = 0 seconds, iteration = 0); ├── grid: 1×1×1 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 1×1×1 halo; ├── tracers: (:b, :e); ├── closure: Nothing; ├── buoyancy: Buoyancy{BuoyancyTracer, Oceananigans.Grids.ZDirection}; ├── free surface: ExplicitFreeSurface with gravitational acceleration 9.80665 m s⁻²; └── coriolis: Nothing. julia> model.timestepper.Gⁿ.η[1, 1, 1]; 0.0. julia> model.timestepper.G⁻.η[1, 1, 1]; 0.0. julia> model.timestepper.G⁻.η[1, 1, 1] = NaN; NaN. julia> time_step!(model, 1; euler=true). julia> model.timestepper.G⁻.η[1, 1, 1]; 0.0. julia> model.timestepper.Gⁿ.η[1, 1, 1]; 0.0; ```. Why NaNs don't persist?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2260#issuecomment-1046388403:22,test,test,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2260#issuecomment-1046388403,1,['test'],['test']
Testability,I'm wondering whether the errors in the `gpu simulation tests` group are related to Tullio.jl. Seems like only `Tullio#master` mentions/uses `CUDAKernels`... https://github.com/mcabbott/Tullio.jl/commit/d3c4fde63c37ebae31b6d13413531a3a9241d59c,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-822144443:56,test,tests,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-822144443,1,['test'],['tests']
Testability,I'm working on it continuously... :); As soon as all tests pass we can discuss. We are almost there @tomchor I feel... only something Tullio-related was not passing the previous time. Now I updated Tullio and trying again. Hold on to your chair!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-825942070:53,test,tests,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-825942070,1,['test'],['tests']
Testability,"I've added a test for this in `test_dynamics` but not sure if that's the right place for it, or if we even want a test. I haven't tried the test on GPU either so suspect it may fail.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1487701044:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1487701044,3,['test'],['test']
Testability,I've added an experimental docstring on \Delta z. Still needs tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1607#issuecomment-826009341:62,test,tests,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1607#issuecomment-826009341,1,['test'],['tests']
Testability,"I've already made sure the forcing function doesn't reference anything outside the function (reduces clarity unfortunately) and pasted the benchmarks using the script from PR #370 at the bottom. Did not try changing the function signature to `FT(grid, u, v, w, T, S, i, j, k)` as that would make implementing #25 more difficult. Also, I was kind of lazy. Adding `@inbounds` seems to help a lot. Went from being 2.1x slower to being 1.3x slower. Still a significant slowdown considering that these forcing functions aren't as computationally demanding as the rest of the right-hand-side calculation. But good enough for me right now. It can be a very powerful feature (essentially replacing the MITgcm RBCS package, for one example) so would be good to get maximum performance out of the forcing functions. But it will probably always depend on exactly how you write them. So might make sense to have guidelines on writing ""performant forcing functions"" in the documentation. ---; Attempt 1:; ```julia; @inline function Fu(grid, U, Φ, i, j, k); if k == 1; return -2*0.1/grid.Δz^2 * (U.u[i, j, 1] - 0); elseif k == grid.Nz; return -2*0.1/grid.Δz^2 * (U.u[i, j, grid.Nz] - 0); else; return 0; end; end. @inline FT(grid, U, Φ, i, j, k) = ifelse(k == 1, -1e-4 * (Φ.T[i, j, 1] - 0), 0); ```; ```; ──────────────────────────────────────────────────────────────────────────────────────────────────; Forcing function benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 59.9s / 0.41% 7.38GiB / 0.36% . Section ncalls time %tot avg alloc %tot avg; ──────────────────────────────────────────────────────────────────────────────────────────────────; 128×128×128 with forcing (GPU, Float64) 10 166ms 68.2% 16.6ms 13.8MiB 51.2% 1.38MiB; 128×128×128 no forcing (GPU, Float64) 10 77.4ms 31.8% 7.74ms 13.1MiB 48.8% 1.31MiB; ──────────────────────────────────────────────────────────────────────────────────────────────────; ```; ---; Attempt 2:; ```julia. @inline function Fu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/365#issuecomment-525326208:139,benchmark,benchmarks,139,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/365#issuecomment-525326208,1,['benchmark'],['benchmarks']
Testability,"I've also offered to help configure testing on our systems, if someone wants to provide what is needed to integrate with slurm.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328783023:36,test,testing,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328783023,1,['test'],['testing']
Testability,"I've been looking at a coastal upwelling model with an analytical solution ([Estrade *et al.*, 2008](https://elischolar.library.yale.edu/journal_of_marine_research/207/)'s Equation 15, plotted below) that could be a good candidate for an immersed boundary validation test. It is an extension of Ekman's classical 1D solution to a simple 2D planar slope ($x-z$) geometry:. ![EMVR08_analytical](https://github.com/CliMA/Oceananigans.jl/assets/4955404/5a8775df-3887-4503-af87-0bbca795e6f7). Estrade *et al.* test this with a 2D ROMS implementation (their Figure 10) that I've tried to replicate in Oceananigans:. ![compare_EMVR08-analytical-numerical](https://github.com/CliMA/Oceananigans.jl/assets/4955404/c17b41e9-cb0c-463a-9bae-d418ab30e007). The discrepancy is mostly in the BBL, so I'm wondering if cut cells (#3146) would improve it. But I'm also not sure if I'm prescribing bottom friction correctly at the immersed boundary (see code below run in Oceananigans v0.91.0). Any thoughts?. ```julia; using Oceananigans; using Oceananigans.Units; using Printf. Lx = 200kilometers; dx = 100meters #200meters#500meters; hmin = 4meters; slope = 1e-3. D = 50meters; f = 3.8145e-05 # At ~15N. dz = 2meters #4meters. Ti = 2π/f; Av = f*(D/π)^2/2; @info @sprintf(""Ti: %.1f h"", Ti/3600); @info @sprintf(""Av: %1.3e m2/s for D = %d m"", Av, D) # Av = 4.831e-3 m2/s, D = 50 m, lat = 15N in Estrade et al. (2008). te = 4Ti #10Ti; outdt = Ti/10; fout = ""upwelling2Dhomog.nc"". logdt = outdt#Ti/100; maxcfl = 0.7. H = hmin + slope*Lx; Nx = Int(ceil(Lx/dx)); Nz = Int(ceil(H/dz)). underlying_grid = RectilinearGrid(CPU(),; size=(Nx, Nz), halo=(3, 3),; x = (-Lx, 0),; z = (-H, 0),; topology=(Bounded, Flat, Bounded)). h(x) = hmin + slope*x; grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(h)). τx₀ = 0 # [Pa]; τy₀ = -0.1 # [Pa]; ρ₀ = 1025 # [kg/m3]; r = 5e-3. Twind = Ti/2 # Wind ramp-up timescale. τx₀ = τx₀/ρ₀; τy₀ = τy₀/ρ₀. # Boundary conditions (wind stress and bottom friction).; @inline wind_stress_u",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/775#issuecomment-2132214906:267,test,test,267,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/775#issuecomment-2132214906,2,['test'],['test']
Testability,"I've been thinking about open boundaries more and have some things I want to test, but they're more questions about the numerics and I don't think this is the place for it. . From the last examples I sent + other experiments I've done with it I think matching schemes are justified because even in the nested case we don't want the boundary value to modify the outflow to modify the internal solution as in the cylinder example. For example, in a nested case, this would prevent higher resolution eddies from exiting the domain without un-physically modifying the upstream solution. To resolve this PR I could tidy up a simple matching scheme where we compute the mean outflow on the boundary and do a 1D advection for the boundary point, or relax to the external state if there is inflow. I think this shows how to use all parts of the new infrastructure, and is a satisfactory boundary condition for some cases. Would this be okay?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2032715863:77,test,test,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2032715863,2,['test'],['test']
Testability,"I've gotten the transforms taken care of, but now the baroclinic_adjustment example fails with ; ```; $ julia --project=. baroclinic_adjustment.jl ; ERROR: LoadError: Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore ~/.julia/packages/GPUArraysCore/uOYfN/src/GPUArraysCore.jl:103; [3] getindex; @ ~/.julia/packages/GPUArrays/dAUOE/src/host/indexing.jl:48 [inlined]; [4] scalar_getindex(::ROCArray{Float64, 3, AMDGPU.Runtime.Mem.HIPBuffer}, ::Int64, ::Vararg{Int64}); @ GPUArrays ~/.julia/packages/GPUArrays/dAUOE/src/host/indexing.jl:34; [5] _getindex; @ ~/.julia/packages/GPUArrays/dAUOE/src/host/indexing.jl:17 [inlined]; [6] getindex; @ ~/.julia/packages/GPUArrays/dAUOE/src/host/indexing.jl:15 [inlined]; [7] getindex; @ ./subarray.jl:288 [inlined]; [8] macro expansion; @ ./multidimensional.jl:917 [inlined]; [9] macro expansion; @ ./cartesian.jl:64 [inlined]; [10] macro expansion; @ ./multidimensional.jl:912 [inlined]; [11] _unsafe_getindex!; @ ./multidimensional.jl:925 [inlined]; [12] _unsafe_getindex(::IndexCartesian, ::SubArray{Float64, 3, ROCArray{Float64, 3, AMDGPU.Runtime.Mem.HIPBuffer}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}, ::Int64, ::Base.Slice{Base.OneTo{Int64}}, ::Base.Slice{Base.OneTo{Int64}}); @ Base ./multidimensional.jl:903; [13] _getindex; @ ./multidimensional.jl:889 [inlined]; [14] getindex(::SubArray{Float64, 3, ROCArray{Float64, 3, AMDGPU.Runtime.Mem.HIPBuffer}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}, ::Int64, ::Function, ::Function); @ Base ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1947171608:638,assert,assertscalar,638,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1947171608,1,['assert'],['assertscalar']
Testability,"I've had a go at implementing a proper NPZD model (rather than one I just made up on the fly) and have some thoughts on how we should modify the API:; - I think we need an `required_biogeochemical_auxiliary_fields` like `required_biogeochemical_tracers` because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); - Given what you said the other day about callbacks only being used for features that should be built into Oceananigans we might want to have a think about how a BGC model can specify the attenuation of PAR. You've mentioned that we could define some kind of integrated field?; - It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. `sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P)`, and model makers will need to do the setup stuff I've done to make the advective velocity fields. You can see my implementation [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/src/Models/AdvectedPopulations/NPZD.jl) and a script using it [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/examples/NPZD.jl) since I thought it was probably too complicated for the test (and will change that back to a 1 variable model later). Not finished making it work but yet but will be done soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242:1759,test,test,1759,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242,2,['test'],['test']
Testability,"I've had a go at moving it to the `Simulation` and very happy to try different things until we find whatever is best. I've added a property to callbacks called substep which is by default false but if true then the callback is passed to `time_step!(model, \Delta t; callbacks)`, I made this an optional argument in case it is called elsewhere (like in some of the tests). . The callbacks then get passed on to `calculate_tendencies!` and are called after the other tendency calculations.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1286807555:364,test,tests,364,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1286807555,1,['test'],['tests']
Testability,"I've had a play implementing an NPD model in this framework now and think that the other way to define the source functions is preferential:; https://github.com/CliMA/Oceananigans.jl/blob/45971e4b113182958aac43357e2a4633510617db/test/test_biogeochemistry.jl#L33-L37. We could even go one step further and define a model like this:; ```julia; struct NPD; Kₙ :: Float64; m :: Float64; nitrif :: Float64; end. validate_biogeochemistry(::NPD, tracernames) = all([T ∈ tracernames for T in [:N, :P, :D]]). @inline function (model::NPD)(i, j, k, grid, ::Val{:N}, clock, fields); P = @inbounds fields.P[i, j, k]; N = @inbounds fields.N[i, j, k]; D = @inbounds fields.D[i, j, k]. return model.nitrif*D - P*N/(N+model.Kₙ) ; end. @inline function (model::NPD)(i, j, k, grid, ::Val{:P}, clock, fields); P = @inbounds fields.P[i, j, k]; N = @inbounds fields.N[i, j, k]; return P*N/(N+model.Kₙ) - model.m*P; end. @inline function (model::NPD)(i, j, k, grid, ::Val{:D}, clock, fields); P = @inbounds fields.P[i, j, k]; D = @inbounds fields.D[i, j, k]. return model.m*P - model.nitrif*D; end. @inline (model::NPD)(args...) = 0.0; ```; This negates the need to define a `get_biogeochemial_forcing` function, but you do have to define the zero function (last line) and I'm not sure how clear and usable this API is to most users?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1304900744:229,test,test,229,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1304900744,2,['test'],['test']
Testability,"I've ran several different simulations with this branch and a majority (but curiously not all of them) failed with the following error:. `ERROR: LoadError: CUDA error: an illegal memory access was encountered (code 700, ERROR_ILLEGAL_ADDRESS)`. An older version of this branch doesn't show this error and instead runs fine for all simulations. I couldn't figure out what happened yet (or why some runs failed but others didn't) so I couldn't create a MWE yet, but I thought I'd report this in case someone can understand this better than me. Here's a [more complete error log](https://pastebin.com/dCbBAgKp) (although it's only about 5% of the full log since the last few lines repeat many many times).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1179751296:572,log,log,572,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1179751296,2,['log'],['log']
Testability,"I've retried the tests a couple of times but I keep getting errors like this:. ```; Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to ""/data5/glwagner/.julia-16001/compiled/v1.10/Oceananigans/jl_Bzx0zi"".; ERROR: LoadError: SystemError: opening file ""/data5/glwagner/.julia-16001/packages/CUDA_Runtime_jll/dOYZJ/.pkg/platform_augmentation.jl"": No such file or directory; ```. Is something wrong with the servers at the moment?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3623#issuecomment-2179086381:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3623#issuecomment-2179086381,1,['test'],['tests']
Testability,"I've spent some time trying to diagnose the GPU issue and it's quite strange, when I copy the test line by line into a REPL it doesn't cause the memory issue and runs fine. After doing that (so everything has been compiled etc.) I then ran the test and the memory usage is fine until the last test, then crashes again. I will investigate more...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1247169843:94,test,test,94,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1247169843,3,['test'],['test']
Testability,"ILED); Stacktrace:; [1] throw_api_error(res::CUDA.CUBLAS.cublasStatus_t); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:11; [2] macro expansion; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:24 [inlined]; [3] cublasDnrm2_v2(handle::Ptr{CUDA.CUBLAS.cublasContext}, n::Int64, x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, incx::Int64, result::Base.RefValue{Float64}); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/utils/call.jl:26; [4] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:168 [inlined]; [5] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:173 [inlined]; [6] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:108 [inlined]; [7] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:107 [inlined]; [8] cg_iterator!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}; abstol::Float64, reltol::Float64, maxiter::Int64, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, initially_zero::Bool); @ IterativeSolvers ~/.julia-10861/packages/IterativeSolvers/rhYBz/src/cg.jl:140; [9] cg!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}; abstol::Float64, reltol::Float64, maxiter::Int64, log::Bool, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, verbose::Bool, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ IterativeSolvers ~/.julia-10861/packages/IterativeSolvers/rhYBz/src/cg.jl:224; ```. But in particular the nrm2 error we are having trouble reproducing locally.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526:2242,log,log,2242,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526,1,['log'],['log']
Testability,"IZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; JULIA_NUM_THREADS = 24; JULIA_EDITOR = vim; GPU: NVIDIA TITAN V. CUDA toolkit 11.4, artifact installation; NVIDIA driver 470.86.0, for CUDA 11.4; CUDA driver 11.4. Libraries:; - CUBLAS: 11.5.4; - CURAND: 10.2.5; - CUFFT: 10.5.1; - CUSOLVER: 11.2.0; - CUSPARSE: 11.6.0; - CUPTI: 14.0.0; - NVML: 11.0.0+470.86; - CUDNN: 8.20.2 (for CUDA 11.4.0); - CUTENSOR: 1.3.0 (for CUDA 11.2.0). Toolchain:; - Julia: 1.6.2; - LLVM: 11.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80. 1 device:; 0: NVIDIA TITAN V (sm_70, 11.484 GiB / 11.784 GiB available); nothing; ```. ## `main`. ```; Nonhydrostatic model benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬──────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼──────────┼────────┼─────────┤; │ CPU │ Float32 │ 32 │ 7.865 ms │ 8.157 ms │ 8.384 ms │ 9.923 ms │ 2.50 MiB │ 7004 │ 10 │; │ CPU │ Float32 │ 64 │ 13.237 ms │ 13.739 ms │ 14.162 ms │ 16.642 ms │ 3.20 MiB │ 12619 │ 10 │; │ CPU │ Float32 │ 128 │ 49.644 ms │ 53.133 ms │ 52.873 ms │ 56.953 ms │ 3.51 MiB │ 16344 │ 10 │; │ CPU │ Float32 │ 256 │ 338.545 ms │ 353.497 ms │ 353.048 ms │ 370.172 ms │ 3.81 MiB │ 35156 │ 10 │; │ CPU │ Float64 │ 32 │ 9.683 ms │ 10.028 ms │ 10.324 ms │ 12.479 ms │ 3.25 MiB │ 7003 │ 10 │; │ CPU │ Float64 │ 64 │ 14.979 ms │ 16.581 ms │ 17.035 ms │ 22.013 ms │ 4.07 MiB │ 12652 │ 10 │; │ CPU │ Float64 │ 128 │ 67.659 ms │ 68.736 ms │ 70.121 ms │ 84.622 ms │ 4.50 MiB │ 20205 │ 10 │; │ CPU │ Float64 │ 256 │ 513.071 ms │ 520.511 ms │ 520.758 ms │ 531.669 ms │ 5.70 MiB │ 85616 │ 10 │; │ GPU │ Float32 │ 32 │ 2.276 ms │ 2.324 ms │ 2.420 m",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2063#issuecomment-983874974:1013,benchmark,benchmarks,1013,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2063#issuecomment-983874974,1,['benchmark'],['benchmarks']
Testability,"If I want to test out multi-region nonhydrostatic simulations on a GPU cluster with immersed boundaries, is my best bet to start from [validation/multi_region/multi_region_les.jl](https://github.com/CliMA/Oceananigans.jl/blob/ss/multi-region-nonhydrostatic/validation/multi_region/multi_region_les.jl) in this PR and just add something like ; ```julia; grid_with_bump = ImmersedBoundaryGrid(grid, GridFittedBottom(bump)); mrg_with_bump = MultiRegionGrid(grid_with_bump, partition=XPartition(2), devices=(0, 1)); ```; from the hydrostatic multi-region internal tide validation to include immersed boundaries?. Like @mmr0, this is pretty much what I've been waiting for to go all in on Oceananigans 💯",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1366766961:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1366766961,1,['test'],['test']
Testability,"If all the tests pass then this PR is ready for its final review. Notes:. - I implemented the 3-input-modes functionality that @glwagner suggested and added tests to make sure it's working properly; - @francispoulin and I independently came up with the name `ConstantCoriolis` so I went with that name for now (as opposed to the a-bit-more-obscure `ConstantCartesianCoriolis`). Let me know if anyone objects and it should be easy to change it to something else.; - Changed the docs accordingly in model_setup/coriolis and physics/coriolis (also fixed a couple of typos), but let me know if there's somewhere else in the docs where this should be changed",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-887917497:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-887917497,2,['test'],['tests']
Testability,If it was related to the rewrite of the terms then shouldn't been affecting CPU regression test as well?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427118830:91,test,test,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427118830,1,['test'],['test']
Testability,"If people are okay with it, I'll merge as soon as tests pass and register a new patch version, since this is a bugfix.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2218143592:50,test,tests,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2218143592,1,['test'],['tests']
Testability,"If someone can show me how to run a distributed test locally, that would really help in debugging this PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843443965:48,test,test,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843443965,1,['test'],['test']
Testability,If tests pass I'll merge this so it can be used with the hydrostatic model. Also don't want it to go stale again with operators being changed. I'll open a subsequent PR that makes the vertically stretched grid work on the GPU.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1348#issuecomment-782308591:3,test,tests,3,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1348#issuecomment-782308591,1,['test'],['tests']
Testability,If tests pass then I suggest we merge and leave further work for future PR (perhaps after OSM?),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2151#issuecomment-1013762427:3,test,tests,3,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2151#issuecomment-1013762427,1,['test'],['tests']
Testability,"If the slow down is the same for `DiscreteForcing` then the problem may really just be evaluating `exp`, sadly... You could try `@inline bottom_mask(k) = 1` to test...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875672252:160,test,test,160,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875672252,1,['test'],['test']
Testability,"If the solutions are the same, you can try removing the `fill_halo` to benchmark the implementation",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1108512590:71,benchmark,benchmark,71,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1108512590,1,['benchmark'],['benchmark']
Testability,"If the tests pass, I think this is ready to merge. Took the liberty to bump minor version since this is a breaking API change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2416#issuecomment-1095717685:7,test,tests,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2416#issuecomment-1095717685,1,['test'],['tests']
Testability,"If there's no objection, I propose merging this PR now and working on converting it to test `ImplicitFreeSurface` in a future PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1433#issuecomment-799817584:87,test,test,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1433#issuecomment-799817584,1,['test'],['test']
Testability,If this seem to be doing the job @tomchor and if others are happy I can write up few tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2028#issuecomment-950481812:85,test,tests,85,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2028#issuecomment-950481812,1,['test'],['tests']
Testability,"If we only fill one point into the halo regions, then we can keep the current advection scheme logic where we limit to second order advection on the boundary. Alternatively though, it seems that we could fill more points and then do ordinary advection. In that case though, we may need a new topology for open boundaries. Not sure.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1965108951:95,log,logic,95,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1965108951,1,['log'],['logic']
Testability,"If you download data on the login node it should work, because DataDeps doesn't need to download if the file is present",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-928250982:28,log,login,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-928250982,1,['log'],['login']
Testability,"If you regenerate the regression test data in serial, it's still a valid test of the distributed code. I think you can do that here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765286118:33,test,test,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765286118,2,['test'],['test']
Testability,"If you want to adopt this PR, that would be great. I would leave the boundary conditions outside the operator for the moment, then we can look at the influence of those in performance in another PR. To test the performance we should push PR #3596 that implements split explicit with fill halos at every substep. Using that implementation for split-explicit will make boundary conditions for barotropic variables quite trivial to implement, but probably extremely slow. However, we can use it as a benchmark",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3268#issuecomment-2353152298:202,test,test,202,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3268#issuecomment-2353152298,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"If you want to test that flux boundary conditions work correctly, you can test that budgets are correct like we do for IncompressibleModel in `test_dynamics.jl`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1441#issuecomment-794125642:15,test,test,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1441#issuecomment-794125642,2,['test'],['test']
Testability,"In case people don't know, @hennyg888 ran all the benchmark scrips and I beileve he has posted the results here. Thank you Henry!. I think the scripts have evolved in that some of the outputs are formatted different than what currently appears. I'm not sure if people want to change everything to the current benchmark scripts that we have?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877468836:50,benchmark,benchmark,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877468836,2,['benchmark'],['benchmark']
Testability,"In general, it can. The regression test is on a rectilinear grid",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2926#issuecomment-1431761715:35,test,test,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2926#issuecomment-1431761715,1,['test'],['test']
Testability,"In my last commit, I changed how boundary conditions are internally initialised as before we were passing the name of the classification so that we could catch functions and turn them into `Discrete/ContinuousBoundaryFunction`s, but this was causing a problem when I wanted the classification to also have properties (i.e. the matching scheme in this case). . Instead, I've changed it so we pass an instance of the classification (so e.g. we can pass `Open(SomeMatchingScheme())`) and this seems to work fine still. . The boundary conditions setup tests now pass locally and I will wait to see how the rest of the tests do, but is there any problem with this change otherwise @glwagner? This is also not an API change as it only affects how boundary conditions are initialised internally.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2125261069:548,test,tests,548,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2125261069,2,['test'],['tests']
Testability,"In order to build confidence and move forward with this PR, here's a comparison between the same simulations on `main` and on this branch. I'm using a channel set-up (`Bounded, Periodic, Bounded` topology ) to simulate a front with Smagorinsky closure, using only a surface buoyancy flux as forcing. . Here's how it looks on the main branch:. https://github.com/CliMA/Oceananigans.jl/assets/13205162/47b7ffe1-5e59-4459-977d-db9ce2ee3644. The artifacts at the bottom are due to the fact that I'm using a stretched grid that gets pretty coarse as you move away from the surface. And here is the same simulation, but run on this branch:. https://github.com/CliMA/Oceananigans.jl/assets/13205162/2fd8c124-4dd6-42c6-bef9-5c16bd55dd4e. which looks pretty much the same. In addition, every averaged quantity that I've tested looks almost exactly the same between both branches. Here's $w'b'$ as an example:. ![image](https://github.com/CliMA/Oceananigans.jl/assets/13205162/152676d6-b099-4323-88a6-b065c4abcc5f). Also I should mention that I've been using this branch for a few weeks, and so far I haven't noticed anything different from the main or suspicious in any way. @glwagner with this comparison (and the many others I've run for my own research), plus the regression tests being off just by approximately `eps()`, plus all the examples in docs looking the same, I personally feel pretty confident that this branch is working as intended. Please let me know if there's any other tests that need to be done before we move forward here!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1586355708:811,test,tested,811,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1586355708,3,['test'],"['tested', 'tests']"
Testability,"In shallow water models we don't usually talk about buoyancy but you could I suppose. Since density is what appears in the momentum equation, that's what's typically used. I believe Greg was saying buoyancy since that's the variable we typically use in the other models, but I could be wrong. Yes, you can have outcroppings at the surface. This can even happen in a one layer case. Imagine starting out with a one layer reduced gravity shallow water model that is in the shape of an inverted U. When perturbed, the interface will move and then you have to deal with height going to 0 and also becoming positive. . There are positive preserving schemes for WENO that we can code up and test with our current model to better understand how it works before moving to multiple layers. Again, very happy to talk about this too.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1115559159:685,test,test,685,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1115559159,1,['test'],['test']
Testability,"In terms of the validation experimens, from what I understand, they are created when someone does something new and the script is a proof by example, or sorts. Since they are never run in tests they do become stale, and a bunch no longer run, as has been pointed out. The same can be said for benchmarks. . Examples are great because they are continually tested and therefore updated as needed. There are a bunch, but still, I don't think as much is covered in the examples as we see in validation. It would be nice for people to see whats in validation, but if they don't work then that causes other problems. I don't claim there is a simple solution but I'm glad we're talking about it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872510039:188,test,tests,188,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872510039,6,"['benchmark', 'test']","['benchmarks', 'tested', 'tests']"
Testability,"In the latest commit I added in the shallow water strong and weak and GPU scaling results. I also added in the nonhydrostatic CPU vs GPU results.; I feel like that certain graphs, such as the time graphs for the CPU vs GPU benchmarks may be unnecessary and can be removed, if anyone feels the same way then I'll go ahead and do it.; Other benchmarks yet to be added include the nonhydrostatic strong scaling results and the multithreading results. I am not sure if we think that the multithreading results are good enough to show yet. I personally think that there's room for improvement but current efficiencies are good enough to show already. Shown below are the current multithreading scaling efficiencies:; ```; Shallow water model weak multithreading scaling speedup; ┌───────────────┬─────────┬──────────┬────────────┬─────────┬─────────┐; │ size │ threads │ slowdown │ efficiency │ memory │ allocs │; ├───────────────┼─────────┼──────────┼────────────┼─────────┼─────────┤; │ (8192, 512) │ 1 │ 1.0 │ 1.0 │ 1.0 │ 1.0 │; │ (8192, 1024) │ 2 │ 2.04972 │ 0.487872 │ 13.2156 │ 464.601 │; │ (8192, 2048) │ 4 │ 1.63302 │ 0.612363 │ 9.95278 │ 327.951 │; │ (8192, 4096) │ 8 │ 1.62507 │ 0.615359 │ 11.9706 │ 384.754 │; │ (8192, 8192) │ 16 │ 1.74747 │ 0.572257 │ 12.755 │ 372.71 │; │ (8192, 16384) │ 32 │ 2.10486 │ 0.47509 │ 16.846 │ 446.101 │; └───────────────┴─────────┴──────────┴────────────┴─────────┴─────────┘. Nonhydrostatic Strong Scaling Multithreading speedup; ┌──────┬─────────┬──────────┬────────────┬─────────┬─────────┐; │ size │ threads │ slowdown │ efficiency │ memory │ allocs │; ├──────┼─────────┼──────────┼────────────┼─────────┼─────────┤; │ 256 │ 1 │ 1.0 │ 1.0 │ 1.0 │ 1.0 │; │ 256 │ 2 │ 0.992966 │ 0.503542 │ 4.14014 │ 152.109 │; │ 256 │ 4 │ 0.501089 │ 0.498913 │ 2.17724 │ 50.2532 │; │ 256 │ 8 │ 0.324366 │ 0.385367 │ 1.94899 │ 29.191 │; │ 256 │ 16 │ 0.244788 │ 0.255323 │ 2.12262 │ 18.2106 │; │ 256 │ 32 │ 0.263339 │ 0.118668 │ 2.87624 │ 16.3167 │; └──────┴─────────┴──────────┴─",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1930#issuecomment-900770693:223,benchmark,benchmarks,223,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1930#issuecomment-900770693,2,['benchmark'],['benchmarks']
Testability,"In this case if we see convergence with decreasing time-step (spatial resolution isn't relevant for these dynamics, which are at the grid scale and therefore not physical) then I suppose that would be an indication the issue is due to a finite time step. It's important to recognize that the dynamics of the _discrete_ linear equations are different than the continuous. When we have a smooth solution, such that our spatial discretization should approximate some exact smooth solution, we can test that refining the grid and time step leads to convergence to an exact solution. Moreover, we can estimate the time-scale of the dynamics using the time-scales of the smooth dynamics as a guide. An example is a resolved buoyancy oscillation: it has a timescale of roughly 1/N. This example is dominated by small amplitude (eg linear) noise at the grid scale. Therefore my initial time scale estimate of 1/N may not hold. Instead, we'd have to look at the discrete eigenvalues of the system at the very higheset wavenumbers (ie the Nyquist number 2pi / dx). We could then calculate the time-step that would be required to resolve these (completely unphysical) dynamics. I'm not sure what a lower bound on such spurious discrete dynamics might be. It could be far smaller than any physical time scale, ie as small as 1e-16, or smaller? Perhaps the evolution of grid scale noise also has to do with spatial resolution, so that could be another knob to vary. So if we want to investigate this further, we should conduct a systematic study of the dynamics of this grid-scale noise system affected by buoyancy, decreasing the time-step to zero. Or we can convince ourselves that non-noisy dynamics _are_ accurate --- eg by analyzing a system like the one we use for our ""internal wave"" dynamics test:. https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_internal_wave_dynamics.jl. that test verifies that a wave packet in our code propagates at the correct group speed, for example. But one could div",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423:494,test,test,494,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423,2,['test'],['test']
Testability,Indeed those are some great speedups! Doesn't even look like the GPU is saturated yet. > Do you think we need to get `MultiGPU` working or try and merge what we have with `MultiCPU` plus some tests? I'm tempted to merge sooner rather than later since already this is a big addition. It does seem to work :P But maybe it just needs some profiling to understand where the bottlenecks are. I guess we need to get some CUDA-aware MPI on Buildkite to test `MultiGPU` so maybe we don't have to explicitly test it just yet in this PR.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799598593:192,test,tests,192,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799598593,3,['test'],"['test', 'tests']"
Testability,"Instructions to adapt the code to `MultiRegion` from a Slack conversation with @simone-silvestri:. If you want to adapt your script to multiregion you have to:; - define a multiregion grid with: `grid = MultiRegionGrid(grid, partition = XPartition(n_gpus_you_want_to_use), devices = n_gpus_you_want_to_use)` . The multiregion grid supersedes the immersed boundary grid, i.e. if you are using an immersed boundary grid then `grid = MultiRegionGrid(ibg; kwargs...)` , not the other way around.; - if you are using any array for forcing or boundary condition, you have to adapt it to the multiregion paradigm as follows: `using Oceananigans.MultiRegion: multi_region_object_from_array; my_adapted_array = multi_region_object_from_array(my_array, grid)`. MultiRegion works only on single node multi GPU, so all the GPUs should be accessible from a single process in the node. You can check the number of GPUs available by logging in a node and typing nvidia-smi , if you want to split your grid on specific devices (let’s say GPU 0 and 3), you can pass `devices = (0, 3)` to the `MultiRegionGrid` constructor. There is another thing that you have to take care of: the pressure solve is performed on one GPU only so both the storage and source term (a field of complex values of the size of the full grid) reside on 1 GPU only (usually the one corresponding to the last region). This means that if your grid is 100M points, 2.98 GB will have to be reserved for the solver’s auxiliary fields; ```julia; julia> sizeof(complex(zeros(Int(100e6)))) / 1024 / 1024 / 1024 * 2; 2.9802322387695312; ```; So make sure you have that space available. (When I have time I ll try to find a solution to run truly parallel pressure solvers, for both nonhydrostatic and hydrostatic models). In terms of outputs, we make use of `reconstruct_global_field` , a function used to reconstruct a global field from a `MultiRegionField` on the CPU. It is used by the output writers to spit out the full field. It is a slow procedure",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1301096875:918,log,logging,918,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1301096875,1,['log'],['logging']
Testability,"Interesting, thanks for those details! That's odd that there are changes in memory allocation associated with building diagnostics. I don't think there's been changes to `Field` between 0.77.5 and 0.78.0. @navidcy might be able to say more. I think 0.78.0 only upgraded the tests to julia 1.8?. I'm also curious why the diagnostics consume so much memory. Are you producing a lot of 3D time averages (which can't be constructed in post-processing?) We've attempted to design the code so that reductions can be performed with minimal memory allocation. 3D diagnostics can simply be calculated from snapshots of the model state, so there's no need to allocate memory (assuming that static memory greatly exceeds GPU memory, this would be preferred). Are we missing a feature to help reduce memory requirements of diagnostics perhaps?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299561134:274,test,tests,274,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299561134,2,['test'],['tests']
Testability,Interesting. I noticed that there were some unnecessary test dependencies and removed those. That seems to have helped.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3783#issuecomment-2362562042:56,test,test,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3783#issuecomment-2362562042,1,['test'],['test']
Testability,Interesting. No I didn't use the test env. I run in the repl...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430409842:33,test,test,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430409842,1,['test'],['test']
Testability,"Interestingly now an exception is thrown instead of an `ERROR_ILLEGAL_ADDRESS` error, which is better as the error crashes CUDA and requires a Julia restart. It still returns the `model` and I can time step it, but the exception is thrown each time step. ```julia; ERROR: a type error was thrown during kernel execution on thread (225, 1, 1) in block (10, 1, 1).; Stacktrace:; [1] κuᶜᶜᶠ at /home/alir/atdepth/Oceananigans.jl/src/TurbulenceClosures/turbulence_closure_implementations/TKEBasedVerticalDiffusivities/catke_vertical_diffusivity.jl:285; [2] macro expansion at /home/alir/atdepth/Oceananigans.jl/src/TurbulenceClosures/turbulence_closure_implementations/TKEBasedVerticalDiffusivities/catke_vertical_diffusivity.jl:264; [3] gpu_compute_CATKE_diffusivities! at /home/alir/.julia/packages/KernelAbstractions/491pi/src/macros.jl:95; [4] gpu_compute_CATKE_diffusivities! at ./none:0. ┌ Error: Exception while generating log record in module Oceananigans.TurbulenceClosures.TKEBasedVerticalDiffusivities at /home/alir/atdepth/Oceananigans.jl/src/TurbulenceClosures/turbulence_closure_implementations/TKEBasedVerticalDiffusivities/catke_vertical_diffusivity.jl:230; │ exception =; │ KernelException: exception thrown during kernel execution on device NVIDIA GeForce RTX 4090; │ Stacktrace:; │ [1] check_exceptions(); │ @ CUDA ~/.julia/packages/CUDA/2kjXI/src/compiler/exceptions.jl:39; │ [2] synchronize(stream::CUDA.CuStream; blocking::Bool, spin::Bool); │ @ CUDA ~/.julia/packages/CUDA/2kjXI/lib/cudadrv/synchronization.jl:207; │ [3] synchronize (repeats 2 times); │ @ ~/.julia/packages/CUDA/2kjXI/lib/cudadrv/synchronization.jl:194 [inlined]; │ [4] (::CUDA.var""#1125#1126""{Float64, CUDA.CuArray{Float64, 1, CUDA.DeviceMemory}, Int64, Vector{Float64}, Int64, Int64})(); │ @ CUDA ~/.julia/packages/CUDA/2kjXI/src/array.jl:535; │ [5] #context!#990; │ @ ~/.julia/packages/CUDA/2kjXI/lib/cudadrv/state.jl:168 [inlined]; │ [6] context!; │ @ ~/.julia/packages/CUDA/2kjXI/lib/cudadrv/state.jl:163 [inlin",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3870#issuecomment-2441915837:925,log,log,925,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3870#issuecomment-2441915837,1,['log'],['log']
Testability,Interestingly this breaks the distributed tests!; https://buildkite.com/clima/oceananigans-distributed/builds/1218#018da64e-30be-4ecb-9b10-32cdb3daa89c,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3467#issuecomment-1943250342:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3467#issuecomment-1943250342,1,['test'],['tests']
Testability,"Interestingly, all the tests still pass when we explicitly time-step w instead of recompute it from continuity. So still not clear whether we need to do the recomputation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/336#issuecomment-518876660:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/336#issuecomment-518876660,1,['test'],['tests']
Testability,Is . https://github.com/CliMA/Oceananigans.jl/blob/c5b030908793d9b49faba6648980abb1932638fc/src/TurbulenceClosures/discrete_diffusion_function.jl#L102. correct?. If it should be `DiscreteBoundaryFunction` then we need to import it. Or should this be `DiscreteDiffusionFunction`? The latter makes the test pass.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1868223245:300,test,test,300,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1868223245,1,['test'],['test']
Testability,Is anyone able to restart the tests to see if that fixes the problem?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1410489678:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1410489678,1,['test'],['tests']
Testability,"Is it okay for me to go through the tests and update them? For example:; https://buildkite.com/clima/oceananigans/builds/15867#018fe2f6-efde-43c3-affa-cb2231a0fb37/39-712. asserts that the open boundary point should be set to zero after a `fill_halo_regions!` but we now expect that it is not touched, so should stay at the value set by the broadcast. Alternatively, we could add a flag to `fill_halo_regions!` to fill boundary normal velocities when it is called manually? i.e. `fill_halo_regions!(field, args...; include_boundary_normal_velocities = false)` and then call `fill_boundary_normal_velocities!` if it is set to true?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2147328364:36,test,tests,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2147328364,2,"['assert', 'test']","['asserts', 'tests']"
Testability,"Is it so hard to update the validation scripts too? Hopefully that should be easy and it doesn't really matter what you do first. We use the validation scripts to test the user interface. You'll be changing them no matter what, in either case.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1915263357:163,test,test,163,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1915263357,1,['test'],['test']
Testability,"Is that result for `u` obviously incorrect? It looks ok from the plot but maybe I'm not inferring enough detail from the setup. A quantitative test might be better (we can certainly try that). The averaging window is ""behind"" the output time, so you have to be careful about how you interpret the output.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817993350:143,test,test,143,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817993350,1,['test'],['test']
Testability,Is the `SmagorinskyLilly` tested? If so I'm happy to approve this PR.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1539369815:26,test,tested,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1539369815,1,['test'],['tested']
Testability,Is the new feature tested? If so I'm very happy to approve... I couldn't see that from the File changes but if you can point me to it it'd be nice thanks!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287091544:19,test,tested,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287091544,1,['test'],['tested']
Testability,Is there a test or example that saves output of the free surface? Perhaps that will sort out your concern at 1. above @simone-silvestri?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2740#issuecomment-1258288022:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2740#issuecomment-1258288022,1,['test'],['test']
Testability,Is there a way for me to cancel tests so they don't have to run every commit?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1239643533:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1239643533,1,['test'],['tests']
Testability,Is there currently a problem with the GPU tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1496451340:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1496451340,1,['test'],['tests']
Testability,"Is there more to the log? Might be useful if you can paste the whole log. Sometimes the `makedocs` failure is due to some warning much earlier in the build log, especially with `strict = true`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1455#issuecomment-796844407:21,log,log,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1455#issuecomment-796844407,3,['log'],['log']
Testability,"Is this correct in lines 274=275 of `enzyme_test`?; ```; x = y = (0, 2π); z = 1; ```; When I run it locally it returns this error:; ```; Got exception outside of a @test; ArgumentError: z length(1) must be 2.; ```. I found a few possible errors locally and can push.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438697101:165,test,test,165,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438697101,1,['test'],['test']
Testability,Is this ready to merge if tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3766#issuecomment-2336879714:26,test,tests,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3766#issuecomment-2336879714,1,['test'],['tests']
Testability,Isn't this because of the implicit solve? What grid/model combination are you using?. You can try testing again using a matrix solver for the non immersed model (if you are using the hydrostatic model). The timings should be similar.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1083973888:98,test,testing,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1083973888,1,['test'],['testing']
Testability,It agrees _but_ tests fail on buildkite which is so confusing,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1441917982:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1441917982,1,['test'],['tests']
Testability,"It doesn't change any code so it's not stale yet. What we need to do though is figure out how to upload data to `OceananigansArtifacts.jl`, and then download it into the test using `DataDeps`. @ali-ramadhan groks `DataDeps.jl` but I haven't yet.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1373#issuecomment-849929096:170,test,test,170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1373#issuecomment-849929096,1,['test'],['test']
Testability,It failed again so I ran it on our cluster which errored in the same way just saying `killed`. It's failing on my new test and I think I've probably not implemented the `calculate_particle_tendency_contributions!` in a GPU friendly way so will try and resolve this tomorrow. . Edit: as I closed the terminal some error about the GPU node being out of memory flashed up which may be relevant.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1237427854:118,test,test,118,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1237427854,1,['test'],['test']
Testability,"It is indeed equivalent in terms of results: when testing tracer advection with a fixed velocity it looks like the profiles are identical for this timestepper in the HydrostaticModel and a NonhydrostaticModel (so probably it is good to have just one rk3 timestepper type). There is some difference in the nomenclature which I think allows a better understanding of how to split the barotropic and baroclinic modes, because the previous old field are stored and used to restart the substeps instead of having two different tendencies that are averaged at each substep.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3874#issuecomment-2441601892:50,test,testing,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3874#issuecomment-2441601892,1,['test'],['testing']
Testability,"It is the effect of `wait(device(arch), events)` vs the `wait(events)` in `fill_halo_regions.jl` line 64. (On main just substituting that line). ```; julia> benchmark_nonhydrostatic_model(GPU, Float64, 128); BenchmarkTools.Trial: 10 samples with 1 evaluation.; Range (min … max): 4.784 ms … 22.835 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 4.836 ms ┊ GC (median): 0.00%; Time (mean ± σ): 6.634 ms ± 5.692 ms ┊ GC (mean ± σ): 0.00% ± 0.00%. █ ; █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄ ▁; 4.78 ms Histogram: frequency by time 22.8 ms <. Memory estimate: 1.86 MiB, allocs estimate: 6061.; ```. vs . ```; julia> benchmark_nonhydrostatic_model(GPU, Float64, 128); BenchmarkTools.Trial: 10 samples with 1 evaluation.; Range (min … max): 6.907 ms … 25.036 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 7.512 ms ┊ GC (median): 0.00%; Time (mean ± σ): 9.426 ms ± 5.532 ms ┊ GC (mean ± σ): 0.00% ± 0.00%. █▄ ; ▆██▁▁▁▁▁▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▆ ▁; 6.91 ms Histogram: frequency by time 25 ms <. Memory estimate: 1.86 MiB, allocs estimate: 5563.; ```. I ll investigate more this wait function today.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-964152321:208,Benchmark,BenchmarkTools,208,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-964152321,4,['Benchmark'],['BenchmarkTools']
Testability,It looks like GPU tests did not run for this PR. Any idea why it was merged?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3393#issuecomment-1867013194:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3393#issuecomment-1867013194,1,['test'],['tests']
Testability,It looks like I've got the MRG stuff working now and the hydrostatic regression tests are passing again,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2181245026:80,test,tests,80,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2181245026,1,['test'],['tests']
Testability,"It looks like `validate_advection` is also needed if we want to support a nice API for changing the floating point precision:. https://github.com/CliMA/Oceananigans.jl/blob/b3ddbc84c8f35aaf5b93fbbfdb4cffcada5c6533/src/Advection/weno_fifth_order.jl#L139. Right now users have to specify `Float32` in both the `grid` and `WENO5` to get reduced-precision all around. If we `validate_advection` we can use the ""stub, regularization"" strategy where `FT` is set to `eltype(grid)` only if it's not specificed (to support existing behavior where `FT` can be set indepednently of `eltype(grid)`.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2271#issuecomment-1047966020:407,stub,stub,407,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2271#issuecomment-1047966020,1,['stub'],['stub']
Testability,"It looks like https://github.com/CliMA/Oceananigans.jl/pull/2538/ implemented just one solver, with an optional tridiagonal component, is that right. Why does this PR take a different approach? Wouldn't using a single solver result in less code / duplication of transform logic?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2275811867:272,log,logic,272,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2275811867,1,['log'],['logic']
Testability,"It looks like our problems with GM are not solved by this PR --- even when we correctly mask interior values (it might be worth testing this a second time, but I think I did this correctly). Here are results for https://github.com/CliMA/Oceananigans.jl/pull/2477/commits/1c183f9a8df7b97f5074f18ce622b247b7b1c923, in which the stencil is rewritten to compute the ""gradient of the average"". When we do this, and use ""boundary-aware averages"", we eliminate a dependence on the boundary (ie the GM stencil is ""inward looking""). It doesn't fix the basic issue with spurious fluxes near the boundary:. https://user-images.githubusercontent.com/15271942/166609754-1c832d73-3089-48d0-89c4-a99caac344b1.mp4. Hmm... For reference, here's what happens when we revert to ""average of the gradient"" via https://github.com/CliMA/Oceananigans.jl/pull/2477/commits/b7a67598db1fe8d5afea27cece5d35d0c20aac93:. https://user-images.githubusercontent.com/15271942/166610211-95376390-bb80-4993-8b7b-6a3cbe27bebf.mp4. My next best hypothesis is that we are seeing the precise instability that Griffies 1998 points out, and the only solution is i) horizontal diffusion or ii) the Griffies stencil. @jm-c thoughts?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1116841953:128,test,testing,128,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1116841953,1,['test'],['testing']
Testability,It looks like that worked for the enzyme tests!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2266743444:41,test,tests,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2266743444,1,['test'],['tests']
Testability,"It looks like this PR was merged, but tests do not pass. We need to fix the tests...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3402#issuecomment-1867011862:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3402#issuecomment-1867011862,2,['test'],['tests']
Testability,"It looks like you have an old version of Oceananigans in your global Julia environment. That's probably what's making the tests fail. I think ideally the global environment should be empty. Here's mine:. ```bash; (base) tomas@np900:~/repos/Oceananigans.jl$ julia -e ""using Pkg; Pkg.status()""; Status `~/.julia/environments/v1.6/Project.toml` (empty project); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1772#issuecomment-869067602:122,test,tests,122,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1772#issuecomment-869067602,1,['test'],['tests']
Testability,"It might be also another problem not related to BC. ; When the test passes we get; ```; [2023/02/12 17:00:57.335] INFO Δv: min=-2.709402e-11, max=+2.834735e-11, mean=-2.606411e-14, absmean=+1.007853e-12, std=+2.676095e-12 (16512/16512 matching grid points); ```; On test failing; ```; [2023/02/14 10:02:14.671] INFO Δv: min=-3.212770e-11, max=+2.834735e-11, mean=-2.751160e-13, absmean=+1.256905e-12, std=+3.884381e-12 (16384/16512 matching grid points); ```; (same maximum difference, larger minimum, larger mean). All in all very small values, considering that `v` is a very small field. I will check which points are actually not matching, it might help us",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1429895265:63,test,test,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1429895265,2,['test'],['test']
Testability,"It might be good to add divergence and tracer budget calculations to either a validation or a test, no? What do you think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2892#issuecomment-1414117039:94,test,test,94,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2892#issuecomment-1414117039,1,['test'],['test']
Testability,"It might be possible to use one of the more complex validation tests like the forced flow, fixed slip convergence test on a vertically stretched grid for that.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1806#issuecomment-872633972:63,test,tests,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1806#issuecomment-872633972,2,['test'],"['test', 'tests']"
Testability,It seemed quite easy but now all tests are broken for a weird reason 😅,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1402994491:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1402994491,1,['test'],['tests']
Testability,"It seems its working now!; The code below:; ```julia; using Oceananigans. grid = RectilinearGrid(size=(1, 1, 1), extent=(1, 1, 1)). b = CenterField(grid); f = 1. vz = Field{Face, Center, Center}(grid). vz_op = @at((Face, Center, Center), +∂x(b) / f); vz .= vz_op; ```; Returns:; ```julia; 1×1×1 Field{Face, Center, Center} on RectilinearGrid on CPU; ├── grid: 1×1×1 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 1×1×1 halo; ├── boundary conditions: FieldBoundaryConditions; │ └── west: Periodic, east: Periodic, south: Periodic, north: Periodic, bottom: ZeroFlux, top: ZeroFlux, immersed: ZeroFlux; └── data: 3×3×3 OffsetArray(::Array{Float64, 3}, 0:2, 0:2, 0:2) with eltype Float64 with indices 0:2×0:2×0:2; └── max=0.0, min=0.0, mean=0.0; ```. I also tested on GPU:. ```julia; grid = RectilinearGrid(GPU(), size=(1, 1, 1), extent=(1, 1, 1)). b = CenterField(grid); f = 1. vz = Field{Face, Center, Center}(grid). vz_op = @at((Face, Center, Center), +∂x(b) / f); vz .= vz_op; ```. returns:. ```julia; 1×1×1 Field{Face, Center, Center} on RectilinearGrid on GPU; ├── grid: 1×1×1 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 1×1×1 halo; ├── boundary conditions: FieldBoundaryConditions; │ └── west: Periodic, east: Periodic, south: Periodic, north: Periodic, bottom: ZeroFlux, top: ZeroFlux, immersed: ZeroFlux; └── data: 3×3×3 OffsetArray(::CUDA.CuArray{Float64, 3}, 0:2, 0:2, 0:2) with eltype Float64 with indices 0:2×0:2×0:2; └── max=0.0, min=0.0, mean=0.0; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2436#issuecomment-1099254179:773,test,tested,773,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2436#issuecomment-1099254179,1,['test'],['tested']
Testability,"It seems like [these tests](https://buildkite.com/clima/oceananigans/builds/3559#6c943ada-d478-430c-b154-31160f8a3c3d) are failing because they compare the LES models with some pre-computed solutions: https://github.com/CliMA/Oceananigans.jl/blob/32c5c5a2d0f441a4b663866d511807d0f9413c90/test/regression_tests/ocean_large_eddy_simulation_regression_test.jl#L78. ~If I followed the code correctly, the LES models are looped through here: https://github.com/CliMA/Oceananigans.jl/blob/32c5c5a2d0f441a4b663866d511807d0f9413c90/test/test_turbulence_closures.jl#L4-L8~. ~which means that those are always run with the default values. Since we're comparing with pre-computed solutions, it'd be good to explicitly specify every closure's parameters, no? The downside is that we won't be able to automatically loop through th closure like this and have to specify them by hand.~",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1908#issuecomment-889331619:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1908#issuecomment-889331619,3,['test'],"['test', 'tests']"
Testability,"It seems like adding the rebuilding step has fixed that error so thank you!; However, there is another error (see attached error log). Based on my print statements from my run script, the error is occurring when the `run!` command is called or during the run before the first output of progress.; [err_gpu.01.txt](https://github.com/CliMA/Oceananigans.jl/files/5873490/err_gpu.01.txt); [log_gpu.01.txt](https://github.com/CliMA/Oceananigans.jl/files/5873492/log_gpu.01.txt). I have run the same case using the CPU architecture and it made it through a couple timesteps so I know that it works. It just runs too slowly on the CPU to be practical to use. . To your note, I do use .jl extensions but github wouldn't allow me to attach a .jl so I changed it to .txt to post it. I don't anticipate the zero Eulerian-mean flow to be a huge issue because my forcing starts up very gradually over the first few hours so I would expect that to act as the spin-up you used in your paper. However, you know much more about this than I do. Even with a gradual climb in forcing at the beginning of the run, how would you recommend improving the settings? Can I initialize the Eulerian-mean flow with noise? Or just run a different, more formal spin up case and then initialize from that? . Thanks so much for your help, this is my first time working with an LES so I am very green.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1317#issuecomment-767535529:129,log,log,129,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1317#issuecomment-767535529,1,['log'],['log']
Testability,"It seems like tests will pass this time. . FYI, I was forced to remove the instances of `@disallowscalar` because that's not included in `CUDA.jl` anymore, but I'm guessing this is okay since ""scalar iteration is now disallowed by default"" according to @maleadt. I'm guessing we wanna bump to 0.58.3 after this since this fixed an important bug. Can any one confirm?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863556999:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863556999,1,['test'],['tests']
Testability,"It seems like there are some problems with the GPU tests, @navidcy and @glwagner do you have some idea on why tests are running for so long?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2139#issuecomment-1009029060:51,test,tests,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2139#issuecomment-1009029060,2,['test'],['tests']
Testability,It seems like we're still getting the `all(test_fields.v .≈ truth_fields.v)` error in the [shallow water regression tests](https://buildkite.com/clima/oceananigans/builds/10225#01868315-b904-4152-b885-9b64cbab7111). I'll restart it and see what happens. But we should probably keep an eye on that.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2944#issuecomment-1443689339:116,test,tests,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2944#issuecomment-1443689339,1,['test'],['tests']
Testability,"It seems logical to store the kwargs in the backend! That will also help with future proofing since we would probably implement NetCDF support by generalizing the backend concept. I think those two examples are when data is stored totally on disk or ""partly"" on disk (and part in memory).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3680#issuecomment-2313319674:9,log,logical,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3680#issuecomment-2313319674,1,['log'],['logical']
Testability,It seems that tests are needed for `VerticallyStretchedRectilinearGrid`. I propose we merge this first and then add some tests in a subsequent PR that hopefully will also address #1753 .,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1754#issuecomment-866270074:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1754#issuecomment-866270074,2,['test'],['tests']
Testability,"It seems this updates a lot of versions, including StructArrays. Seems like a good idea but there are some failed tests. When I looked at the errors one of them seemed to be about `OffsetArrays`, copied below right before the stacktrace. Not sure how to resolve this but I suspect others have ideas. ```; ┌ Warning: Could not use exact versions of packages in manifest, re-resolving;   | └ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1526;   | ERROR: Unsatisfiable requirements detected for package OffsetArrays [6fe1bfb0]:;   | OffsetArrays [6fe1bfb0] log:;   | ├─OffsetArrays [6fe1bfb0] has no known versions!;   | └─restricted to versions 1.4.0-1 by Oceananigans [9e8cae18] — no versions left;   | └─Oceananigans [9e8cae18] log:;   | ├─possible versions are: 0.58.5 or uninstalled;   | └─Oceananigans [9e8cae18] is fixed to version 0.58.5;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1785#issuecomment-870516627:114,test,tests,114,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1785#issuecomment-870516627,3,"['log', 'test']","['log', 'tests']"
Testability,It should have been fixed in kernel abstractions. We have to test multi GPU without it and then we can remove it,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2748#issuecomment-1256192855:61,test,test,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2748#issuecomment-1256192855,1,['test'],['test']
Testability,"It shouldn't, unless you are looking at a regime that isn't covered in our regression tests / tests that closely inspect the difference between CPU and GPU results.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3320#issuecomment-1772922388:86,test,tests,86,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3320#issuecomment-1772922388,2,['test'],['tests']
Testability,"It turns out that results look OK without a sponge layer. I think because this is a viscous DNS, so the fluctuations get dampened (when I tested this, I did it with a LES). Here's the vorticity field without the sponge layer:. https://user-images.githubusercontent.com/13205162/142678582-00f6deb0-6376-4e7d-a15a-d378026a6b82.mp4. In hindsight I also agree with @glwagner's point about `v` being a background field. It would most likely create inertial oscillations.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1498#issuecomment-974338816:138,test,tested,138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1498#issuecomment-974338816,1,['test'],['tested']
Testability,It was working just waiting for the shallow water test to be fixed. Some merge conflicts now which I can fix tomorrow.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1480285884:50,test,test,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1480285884,1,['test'],['test']
Testability,It would be nice to run unit tests on github actions before launching buildkite jobs. Someday...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3149#issuecomment-1605866380:29,test,tests,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3149#issuecomment-1605866380,1,['test'],['tests']
Testability,It would be really cool to put some viz in the docs. Could add a validation test just for the grid to `validation` perhaps with viz in it too (perhaps as a stop gap if there isn't time to whip up nice docs).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1417#issuecomment-788891174:76,test,test,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1417#issuecomment-788891174,1,['test'],['test']
Testability,It'd be best if you guys can take a look at the conflicts in `src/Architectures.jl`; it's not clear to me what some decisions would influence elsewhere in the code - quite a bit has changed that you are probably more aware of. I'm happy to test the code once conflicts are resolved.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1997670821:240,test,test,240,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1997670821,2,['test'],['test']
Testability,"It'd be nice to state in writing the justification for writing a separate CPU solver for certain problems. In general, I think that any algorithm that works on the GPU will also work on the CPU. Thus at least in principle the simplest choice is presumably to use the same solver on both architectures. For example, benchmarking *might* show that a GPU-friendly algorithm performs poorly compared to a CPU-specific algorithm, which might justify maintaining separate solvers for the GPU and CPU. Is this the case?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/586#issuecomment-572064187:315,benchmark,benchmarking,315,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/586#issuecomment-572064187,1,['benchmark'],['benchmarking']
Testability,It's a good idea! Also @apaloczy had some tests that might be good to try to re-run.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3682#issuecomment-2381407911:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3682#issuecomment-2381407911,1,['test'],['tests']
Testability,"It's also worth noting that right now many calculations are done more than once in each timestep. For example for each component of $M_{ij}$ I'm calculating the whole strain rate tensor modulus in addition to the strain rate tensor component needed:. https://github.com/CliMA/Oceananigans.jl/blob/25cc34e6c395e210e0aecf8181919c25435d7919/src/TurbulenceClosures/turbulence_closure_implementations/scale_invariant_smagorinsky.jl#L241-L257. This is done for legibility of the code, but it may be necessary to forfeit that in favor of doing fewer calculations. (Also note that I'm using a weird way to define function names here, so lmk if you guys think I should change it.). Another thing to note that it's common to update dynamic Smagorinsky coefficients once every 5 or so time-steps only, since they can be pretty expensive. afaik this is generally done for the scale-dependent versions, which have two test filters instead of the one needed in this PR, but I wouldn't be surprised if it's occasionally necessary for the scale-invariant versions as well.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2212664403:905,test,test,905,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2212664403,1,['test'],['test']
Testability,"It's also worth noting that tests pass with `float_type=Float64`, even when `eltype(grid)` is `Float32`. Looking at #1786 reveals that `float_type` is only used in two places: to determine `buoyancy` kwarg (the default is `SeawaterBuoyancy`), and to set the eltype of `clock`. @francispoulin if you can, can you test both. ```julia; using Oceananigans. N = 32. grid = RegularRectilinearGrid(Float32, size=(N, N, N), extent=(1, 1, 1)); model = IncompressibleModel(architecture=GPU(), advection=WENO5(), buoyancy=nothing, grid=grid); time_step!(model, 1); ```. (to see if the `buoyancy` kwarg is somehow part of the problem) and. ```julia; using Oceananigans. N = 32. grid = RegularRectilinearGrid(Float32, size=(N, N, N), extent=(1, 1, 1)); model = IncompressibleModel(architecture=GPU(), advection=WENO5(), clock=Clock{Float64}(), grid=grid); time_step!(model, 1); ```. ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-870700244:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-870700244,2,['test'],"['test', 'tests']"
Testability,It's an error from the constructor for `VerticallyStretchedRectilinearGrid`. I would guess that the test uses incorrect syntax in constructing a vertically stretched grid?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-819608119:100,test,test,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-819608119,1,['test'],['test']
Testability,"It's common for this error to pop up when there's a file handle already open (maybe if there was an error the previous time you ran the code). @loganpknudsen if you haven't done so yet, you could close and reopen the repl before running the code again. Or/and you can delete the previously created netcdf file. Regardless, this error is likely not related to this branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1747543347:144,log,loganpknudsen,144,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1747543347,1,['log'],['loganpknudsen']
Testability,"It's easy to extend the existing simple test to a two-output case, so I did that on #1807. If #1807 passes, then there is some other aspect of the setup that's producing a failure. It's also possible that there is more than one problem / cause of woe.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-873162947:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-873162947,2,['test'],['test']
Testability,"It's interesting that this affects performance so much. IIRC, we previously called `Base.power_by_squaring`, which seems slower than the current Float64 intrinsic:. ```julia; julia> A = CUDA.rand(1024,1024);. # current version; julia> @benchmark CUDA.@sync broadcast!(A, A, 10) do a, b; a^b; end; BenchmarkTools.Trial: ; memory estimate: 496 bytes; allocs estimate: 7; --------------; minimum time: 33.429 μs (0.00% GC); median time: 33.970 μs (0.00% GC); mean time: 35.515 μs (0.00% GC); maximum time: 464.024 μs (0.00% GC); --------------; samples: 10000; evals/sample: 1. # Int32 is faster indeed; julia> @benchmark CUDA.@sync broadcast!(A, A, 10) do a, b; a^(b%Int32); end; BenchmarkTools.Trial: ; memory estimate: 496 bytes; allocs estimate: 7; --------------; minimum time: 29.600 μs (0.00% GC); median time: 30.289 μs (0.00% GC); mean time: 33.132 μs (0.00% GC); maximum time: 740.031 μs (0.00% GC); --------------; samples: 10000; evals/sample: 1. # old code path was slower than both; julia> @benchmark CUDA.@sync broadcast!(A, A, 10) do a, b; Base.power_by_squaring(a, b); end; BenchmarkTools.Trial: ; memory estimate: 496 bytes; allocs estimate: 7; --------------; minimum time: 39.410 μs (0.00% GC); median time: 40.629 μs (0.00% GC); mean time: 45.890 μs (0.00% GC); maximum time: 1.195 ms (0.00% GC); --------------; samples: 10000; evals/sample: 1; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-869801976:236,benchmark,benchmark,236,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-869801976,6,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark']"
Testability,"It's now obvious that tests like the one in #1807 implicitly perform this test, so it's not needed.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1802#issuecomment-873294152:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1802#issuecomment-873294152,2,['test'],"['test', 'tests']"
Testability,"It's ready @navidcy . @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently. We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor. Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654:280,test,tests,280,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654,4,['test'],"['test', 'tests']"
Testability,It's so nice that we have these tests. Seeing them pass makes me so confident that you did this matrix constructor refactor correctly @elise-palethorpe.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1180287052:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1180287052,1,['test'],['tests']
Testability,"It's something to do with GPU, maybe GPU reductions?. ```; [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; --;   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199;   | Expression: minimum_xspacing(grid) ≈ FT(π / 3);   | Evaluated: 0.0 ≈ 1.0471975511965976; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564733331:90,Test,Testing,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564733331,3,"['Test', 'test']","['Test', 'Testing', 'test']"
Testability,"It's very hard to make a benchmarking test with pass/fail criteria. However, I think we should launch nightly benchmarking jobs whose results can be inspected by eye. That will help us catch a regression if we are watchful without having to manually run benchmarks for a string of commits going into the past.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2176#issuecomment-1021231787:25,benchmark,benchmarking,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2176#issuecomment-1021231787,4,"['benchmark', 'test']","['benchmarking', 'benchmarks', 'test']"
Testability,It's weird... time stepping itself should be a test because of the multiple `fill_halo_regions!` both on individual fields and tuples. Here it seems that everything passes also without this fix...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2362#issuecomment-1069820663:47,test,test,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2362#issuecomment-1069820663,1,['test'],['test']
Testability,"I’ll be able to test next week, I’m on vacation the next few days. Thanks for the troubleshooting on this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2721#issuecomment-1233549934:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2721#issuecomment-1233549934,1,['test'],['test']
Testability,"Joes PR adding integration tests (which now passes and we should merge, if you can review), I think needs 12 to pass",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3607#issuecomment-2136854514:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3607#issuecomment-2136854514,1,['test'],['tests']
Testability,"Just a few final details regarding the tests. Also the name ""update_lagrangian_particles!"" keeps confusing me, its hard to remember the difference between ""updating particles"" and ""updating particle properties"". Maybe `step_lagrangian_particles!` is a better name for that function (which is defined by `TimeSteppers`). There's also some stray stuff in the tests and validating that I'd rather get cleaned up before mergin, since it'll have to be cleaned up by ""someone"" sooner or later.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1568530147:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1568530147,2,['test'],['tests']
Testability,"Just a few notes:. * There's surprisingly little ""interpolation"" / reconstruction in our code (except for trivial reconstruction). Most of the reconstruction occurs for advection, but advective reconstruction doesn't need to be touched by this PR. So this PR actually mostly affects the implementation of GM.; * There are a few things re: using homogeneous operators for Coriolis forces. I suspect that it won't have an effect, but it needs to be tested.; * It should be feasible to use homogeneous / boundary-aware operators _only_ for fluxes. ; * Finally, I'm going to implement an ""enforce_impenetrability!"" operator that does 3D masking and works for both non-immersed and immersed boundaries. After that, we can use `nothing` as a default boundary condition for velocities rather than `ImpenetrableBoundaryCondition` and avoid `mask_immersed_field!` during time-stepping. It seems that impenetrable is still useful for users though for ""user-defined, additional"" velocity components so we may want to keep it...; * An even further step would eliminate the need for masking boundary regions by never updating the tendency there. But this approach allows users to more easily make mistakes, ie changing the velocity field during a run, but forgetting to enforce impenetrability.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1116063491:447,test,tested,447,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1116063491,1,['test'],['tested']
Testability,"Just a note on this PR: It's kind of hacky but to avoid images and videos taking up space in git history (they take up a lot!) I'd advocate for uploading images into an issue (effectively hosting them on GitHub's servers) and then linking/embedding them. In an ideal world the validation experiment CI pipeline would run and produce figures for all validation experiments which would then be automatically embedded into the docs with every version release. But setting up this infrastructure would take time and effort which I suspect no one can spare right now. Unfortunately it's a thankless job haha. > We try to fix this issue and keep the validation experiments and benchmarks up-to-date. I've always wanted to do this and wish I had the time to do it... This was the original motivitation for setting up the validation experiment CI pipeline: https://buildkite.com/clima/oceananigans-validation-experiments. It only runs the convergence tests right now and it still runs every night but it's been neglected so stuff is failing. I personally think we should be reviving the validation experiments one-by-one starting with the most important ones by running them as part of that CI pipeline and fixing it when it fails. But without the ability to dedicate the time I can see why reducing our maintenance burden would be desirable. I've also always wanted to set up a benchmarking CI pipeline, but I don't think we have the proper computational resources to set it up right now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872386226:671,benchmark,benchmarks,671,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872386226,3,"['benchmark', 'test']","['benchmarking', 'benchmarks', 'tests']"
Testability,"Just a quick update, zero-viscosity Bicklet jet test case for `VectorInvariant`, `WENOVectorInvariant` (smoothness calculated based on `ζ`), modified VectorInvariant WENO with smoothness based on 2D stencils of `u` and `v`, here called `WENOVectorInvariantZVEL`. `VectorInvariant`. https://user-images.githubusercontent.com/33547697/157745561-a8e5f128-2f4e-42e3-9305-3f624498590b.mp4. `WENOVectorInvariant`. https://user-images.githubusercontent.com/33547697/157745569-41c52e2d-c80b-4d43-b2bf-8a914e8856a2.mp4. `WENOVectorInvariantZVEL`. https://user-images.githubusercontent.com/33547697/157745571-725ea604-8dec-44bd-bd08-dcd70d9ed4b1.mp4. `WENOVectorInvariantZVEL` seems to perform actually very well compared to a (somewhat) standard ""vorticity-reconstruction"" `WENOVectorInvariant` and compared to the very noisy standard `VectorInvariant` in lie of the fact that; - Noise is reduced significantly despite dissipation not being too high; - Agreement between different resolutions is much higher",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064455116:48,test,test,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064455116,1,['test'],['test']
Testability,Just adding here as a small reminder: . Currently the split-explicit scheme does not seem to conserve to machine precision the free-surface height average (as it should). In the current iteration it only conserves to 8 digits. This is only when it is implemented as a part of the hydrostatic model. In a standalone test it does seem to conserve to machine precision. Once this issue is isolated and fixed I'd say it's good to go for merging,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2013#issuecomment-1014927629:315,test,test,315,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2013#issuecomment-1014927629,1,['test'],['test']
Testability,"Just adding to @glwagner's comment, @whitleyv and I have discussed adding:. - Boundary interpolation, so the topography does not have to match the grid.; - Neumann boundary conditions. ; - A simple log-layer wall-model. I think we have a good sense of how to approach the above. I'm also interested in discussing pressure solver modifications with @weymouth, we will talk on our end and then be in touch to schedule a time to chat. ; Thanks!; Jacob",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1036#issuecomment-720088717:198,log,log-layer,198,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1036#issuecomment-720088717,1,['log'],['log-layer']
Testability,"Just as a reference, the sed command to do this (I believe) is. ```sed ""s/\<Cell\>/Center/g""```. which produces the following results (as an example):. ```bash; $ line=""(Cell, Cellphone), Cell; :Cell, Cell.something""; $ echo ""$line"" | sed ""s/\<Cell\>/Center/g""; (Center, Cellphone), Center; :Center, Center.something; ```. So a one-liner to do this is (I think; I haven't tested):. ``` find . -type f -name ""*.jl"" -print0 | xargs -0 sed ""s/\<Cell\>/Center/g"" ```. assuming we just wanna replace in ""*.jl"" files. I agree with `Center` and `Face` being the most intuitive and I'd be glad to do this change if everyone agrees. Although this would probably need to come with a bump to the next version since this is a breaking change, right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/414#issuecomment-763796870:372,test,tested,372,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/414#issuecomment-763796870,1,['test'],['tested']
Testability,Just do the datadep like the tests do it and do delete anything downloaded to retrigger downloading. Let me know if that helps.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2023734972:29,test,tests,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2023734972,1,['test'],['tests']
Testability,"Just found this issue while setting up a `ShallowWaterModel` experiment with nonzero `bathymetry`. Implementing this involves modifying `src/Models/ShallowWaterModels/solution_and_tracer_tendencies.jl` to include the terms associated with bathymetric gradients in `x_pressure_gradient` and `y_pressure_gradient`, correct? What else would be needed? I would be happy to help write a validation test case and/or an example for this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1114340276:393,test,test,393,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1114340276,1,['test'],['test']
Testability,Just looked and this is actually implemented in `HydrostaticFreeSurfaceModels` just not in the other too. I'll change them and modify the multiple tracer test to use an auxiliary field.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2730#issuecomment-1242314105:154,test,test,154,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2730#issuecomment-1242314105,1,['test'],['test']
Testability,Just made some changes to `distributed_shallow_water_model.jl` to account for the fact that we now enforce the vertical to be `Flat`. I hope the tests will pass. One problem that I came up with is how to run a distributed test on 4 cores locally. Any advice @ali-ramadhan?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843107678:145,test,tests,145,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843107678,2,['test'],"['test', 'tests']"
Testability,Just realized the distributed tests have been running for 6 days. I guess it's fair to say there's still something to fix lol. Just killed it to save resources,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2538#issuecomment-1194144494:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2538#issuecomment-1194144494,1,['test'],['tests']
Testability,"Just realized we don't have any tests checking that output attributes were correctly set, but this can addressed in a future PR I think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1299#issuecomment-758112855:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1299#issuecomment-758112855,1,['test'],['tests']
Testability,"Just so I understand this filtering thing. It doesn't remove the regex-filtered lines from the output; it just doesn't test those lines against the ""prediction"", right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2083#issuecomment-981525228:119,test,test,119,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2083#issuecomment-981525228,1,['test'],['test']
Testability,"Just some comments at this point:; * At this point, we have the HydrostaticFreeSurface model working with the split explicit free surface. It would be great to find some time later on to figure out what was going on with the implicit free surface on AMD GPUs (is the issue isolated only to that architecture??) and get this resolved.; * To get everything moved over to KernelAbstractions would constitute a rather large change, something I think @glwagner expressed an interest in avoiding. I'd vote in favor of pushing this change off for future PR's.; * I'm wrapping up a profiling report that includes MI210 and A100 GPU performance; this report will include some recommendations should we be interested in performance improvements on GPU hardware (AMD and Nvidia). This kind of work could also constitute PR's further down the road.; * The main outstanding issue seems to be that we need a platform for testing on AMD GPUs. . It appears the CliMA fork `Project.toml` and `Manifest.toml` have diverged; I'll take a look to see if I can fix.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1997632147:907,test,testing,907,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1997632147,1,['test'],['testing']
Testability,"Just some restructuring of the `fill_halo_regions!` to allow the application of `apply_regionally!` to the directional fill_halo.; The `fill_halo_regions!` looks like this; ```; halo_tuple = permute_boundary_conditions(boundary_conditions); ; for task = 1:3; barrier = device_event(arch); fill_halo_event!(task, halo_tuple, c, loc, arch, barrier, grid, args...; kwargs...); end; ```; this should actually not change the performance... but I guess it will change completely since we will not want a loop over halo events anymore, neither to permute BCs.; There are differences in the `HydrostaticFreeSurfaceModel` where I lumped all the `fill_halo_regions` together and exposed a little bit of parallelism, and in the `QuasiAdamsBashforthTimeStepper` which might affect the `NonhydrostaticModel` benchmarks",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116140545:795,benchmark,benchmarks,795,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116140545,1,['benchmark'],['benchmarks']
Testability,"Just take a step back. We had a working system until we exposed the GPU. I did that as an experiment and added the quick start example. Now, if the experiment isn't working, let's revisit it. Moving the docs to caltech is a nuclear option. If it gives us speed up --- great. That's a good reason. But if it's just for the GPU issue, it makes no sense. It's like we tried to experiment with a new vegetable in our pasta sauce, didn't like the vegetable, and decided to stop eating dinner altogether as as result. It's not logical.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3779#issuecomment-2356634967:521,log,logical,521,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3779#issuecomment-2356634967,1,['log'],['logical']
Testability,Just tested it and it runs fine:. ```julia; julia> run!(simulation); [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (11.290 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (26.266 seconds).; [ Info: Simulation is stopping after running for 41.963 seconds.; [ Info: Model iteration 10 equals or exceeds stop iteration 10.; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2711#issuecomment-2385618854:5,test,tested,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2711#issuecomment-2385618854,1,['test'],['tested']
Testability,"Just tested it. For CPUs the time is roughly the same, and for GPUs the timing I got was consistent with your estimate of 0.75 (the difference was a bit smaller for me).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186260385:5,test,tested,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186260385,1,['test'],['tested']
Testability,Just tested the script and it runs! I haven't tested that the outputs are correct but I think it's safe to leave this closed.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1116725273:5,test,tested,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1116725273,2,['test'],['tested']
Testability,"Just tested this and apparently the warning isn't issued anymore. However, no warning is issued now even when `window > inertval`:. ```julia; julia> using Oceananigans. julia> using Oceananigans.Utils. julia> using Oceananigans.Units. julia> grid = RegularRectilinearGrid(size=(4, 4, 4), x=(0, 1e6), y=(0, 1e6), z=(-4e3, 0)); RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}; domain: x ∈ [0.0, 1.0e6], y ∈ [0.0, 1.0e6], z ∈ [-4000.0, 0.0]; topology: (Periodic, Periodic, Bounded); resolution (Nx, Ny, Nz): (4, 4, 4); halo size (Hx, Hy, Hz): (1, 1, 1); grid spacing (Δx, Δy, Δz): (250000.0, 250000.0, 1000.0). julia> model = IncompressibleModel(; architecture = CPU(),; grid = grid,; ); IncompressibleModel{CPU, Float64}(time = 0 seconds, iteration = 0) ; ├── grid: RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=4, Ny=4, Nz=4); ├── tracers: (:T, :S); ├── closure: Nothing; ├── buoyancy: SeawaterBuoyancy{Float64, LinearEquationOfState{Float64}, Nothing, Nothing}; └── coriolis: Nothing. julia> Δt = 20minutes; 1200.0. julia> simulation = Simulation(model, Δt = Δt, iteration_interval = 20,; stop_time = 3days); Simulation{typename(IncompressibleModel){typename(CPU), Float64}}; ├── Model clock: time = 0 seconds, iteration = 0 ; ├── Next time step (Float64): 20 minutes ; ├── Iteration interval: 20; ├── Stop criteria: Any[Oceananigans.Simulations.iteration_limit_exceeded, Oceananigans.Simulations.stop_time_exceeded, Oceananigans.Simulations.wall_time_limit_exceeded]; ├── Run time: 0 seconds, wall time limit: Inf; ├── Stop time: 3 days, stop iteration: Inf; ├── Diagnostics: typename(OrderedCollections.OrderedDict) with 1 entry:; │ └── nan_checker => typename(NaNChecker); └── Output writers: typename(OrderedCollections.OrderedDict) with no entries. julia> u, v, w = model.velocities; # unpack velocity `Field`s. julia> outputs = (u=u, v=v, w=w);. julia> using Oceananigans.OutputWriters: NetCDFOutputWriter, AveragedTimeInterval. julia> simulation.output_writers[:a",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1274#issuecomment-873421141:5,test,tested,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1274#issuecomment-873421141,1,['test'],['tested']
Testability,Just tested this and it seems to work. Hard to believe that this small change makes such a big difference. WENO5 is now running faster for me on 1.6 than on 1.5. Nice catch @glwagner,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-868927107:5,test,tested,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-868927107,1,['test'],['tested']
Testability,"Just to be clear, the point of doing this is because you want to use dispatch to write flexible array operations that are agnostic to whether the array is a 'raw' array (like an `Array` or `CuArray`), or some kind of wrapper like an `OffsetArray`. By writing `parent(a)`, you ensure correct behavior on `a` in both cases; you don't need to write new high-level functions for wrappers versus arrays because dispatch is performed at the lower level, where it belongs. With `data` we can use the same logic --- this concept is deployed extensively in PR #463.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/454#issuecomment-542269350:498,log,logic,498,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/454#issuecomment-542269350,1,['log'],['logic']
Testability,"Just to clarify things a bit for you @loganpknudsen --- your error says. > ERROR: LoadError: Failed to precompile Oceananigans. this means that the segmentation fault occurs during precompilation of `Oceananigans`, which occurs before any code you have written executes. That's why the error comes from ""line 1"" of your script (is that where you write `using Oceananigans`?). Another clue is the text. > [52922] signal (11.1): Segmentation fault; > in expression starting at /glade/u/home/knudsenl/.julia/packages/Oceananigans/M82LU/src/Oceananigans.jl:129. That says the error comes from line 129 in the file `src/Oceananigans.jl`. Going to that line on `main` branch we find:. https://github.com/CliMA/Oceananigans.jl/blob/d6e63e53e795272378b7657c4a6f32da2d62d6f9/src/Oceananigans.jl#L129. so there's something wrong with your CUDA / how it's loaded. The best course of action is probably to update to julia 1.10 first of all rather than using julia 1.9.2. Next, see if you can simply write `using CUDA` rather than trying to run your whole script. If you can get that to work (better yet if you can use some of `CUDA.jl` on a GPU on derecho then move on to simply writing `using Oceananigans` and trying to build a grid on the GPU. If that succeeds move on to your script.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2240940342:38,log,loganpknudsen,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2240940342,2,['log'],['loganpknudsen']
Testability,"Just to summarize where we are here:. 1. The new test fails.; 2. We also expect that changes on #3477 will cause the test to fail. A possible solution to the changes that #3477 will incur is to replace the slurped locations with `args::Varargs{N, T}` @wsmoses ; 3. We need to merge #3477 to restore normal CPU performance. Otherwise, Oceananigans can't be used even merely to demonstrate capabilities on the CPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1948850386:49,test,test,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1948850386,2,['test'],['test']
Testability,Just waiting for the 3hr-long gpu test to finish...! :) (@simone-silvestri),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1181899132:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1181899132,1,['test'],['test']
Testability,"Just want to confirm some final steps with @navidcy and @glwagner here to wrap up this PR. At the moment, I believe we just need to put in a method that throws an error for `validate_free_surface` when the architecture is the AMD GPU and the free surface type is implicit free surface. I'm working on putting this in through the extensions (I believe this is the correct spot) and testing this out. Is there anything else, you want to see to get this merged into main ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1967096656:381,test,testing,381,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1967096656,1,['test'],['testing']
Testability,"Kind of a random case, but here's some timings from a calibration problem I'm doing (I'm running 6 3D simulations, ranging from something like 33 to 117 time-steps, either size (6, 10, 32) or (6, 10, 64)). For these tests I just downgraded KernelAbstractions via Project.toml:. ## With `KernelAbstractions` 0.7.2 (also downgraded CUDAKernels). ```; 23.405205 seconds (25.27 M allocations: 2.610 GiB, 1.78% gc time, 99.80% compilation time); 5.019944 seconds (5.92 M allocations: 475.126 MiB, 0.86% gc time, 98.22% compilation time); 0.067385 seconds (107.25 k allocations: 72.628 MiB); 0.090308 seconds (107.25 k allocations: 72.628 MiB); 0.139109 seconds (217.20 k allocations: 147.487 MiB); 0.197798 seconds (217.20 k allocations: 147.487 MiB); ```. The two simulations are affected by compilation but things go fast after that. ## With `KernelAbstractions` 0.8.6. ```; 4.914645 seconds (28.10 M allocations: 6.039 GiB, 15.62% gc time, 51.22% compilation time); 5.011717 seconds (31.58 M allocations: 10.844 GiB, 19.87% gc time, 16.87% compilation time); 4.236418 seconds (27.41 M allocations: 11.073 GiB, 21.75% gc time); 8.501561 seconds (55.04 M allocations: 22.118 GiB, 22.03% gc time); 8.618707 seconds (56.01 M allocations: 22.627 GiB, 21.83% gc time); 17.081286 seconds (112.47 M allocations: 45.197 GiB, 21.73% gc time); ```. Smells like type inference failure to me. Some informal exploration shows that the tendency calculations dominate this problem (as they do many others) --- so it's a pretty basic issue I suspect.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480466041:216,test,tests,216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480466041,1,['test'],['tests']
Testability,"Last time @ali-ramadhan tried doing any benchmarking for 2 GPUs we found that the efficiency was around 50%, so it took as long for 1 GPU as it did for 2 GPU. Henry is going to redo these benchmarks and I hope we will have some results by next week.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1654#issuecomment-868457569:40,benchmark,benchmarking,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1654#issuecomment-868457569,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"Let me summarize my findings in the commit 4841c96. I wrote a new script test/test_multi_region_cubed_sphere_scalar_halos.jl to verify the correct halo filling for scalar fields at locations cca, fca, cfa, and ffa. I manually filled out the halos of the parent (off-set) array and compared them against the halos of the array filled out with the fill_halo_regions! function. At the ffa locations, the tests fail for all halos. At the cca, fca, and cfa locations, the tests fail for (a) the north and west halos of the odd-numbered panels 1, 3, 5 (with non-trivial connectivities), and (b) the south and east halos of the even-numbered panels 2, 4, 6 (with non-trivial connectivities). The tests which fail are currently commented out in the script test/test_multi_region_cubed_sphere_scalar_halos.jl. After some digging, I found out that both the latitude and longitude values are not correctly defined on these halos. . To delve into the root of the issue, I first replace the line ; ```julia; Ψᵣ(λ, φ, z) = - U * R * (sind(φ) * cosd(α) - cosd(λ) * cosd(φ) * sind(α)); ```; with; ```julia; Ψᵣ(λ, φ, z) = λ ; ```; in test/test_multi_region_cubed_sphere_scalar_halos.jl, and run the script:; ```julia; julia> include(""test/test_multi_region_cubed_sphere_scalar_halos.jl""); ```; Then I type the following commands over the terminal and study the output:; ```julia; julia> Nx, Ny, Nz = 3, 3, 1; (3, 3, 1). julia> grid = ConformalCubedSphereGrid(panel_size = (Nx, Ny, Nz), z = (0, 1), radius = 1, horizontal_direction_halo = 3, z_halo = 1); ConformalCubedSphereGrid{Float64, FullyConnected, FullyConnected, Bounded} partitioned on CPU():; ├── grids: 3×3×1 OrthogonalSphericalShellGrid{Float64, FullyConnected, FullyConnected, Bounded} on CPU with 3×3×1 halo and with precomputed metrics; ├── partitioning: CubedSpherePartition with (1 region in each panel); ├── connectivity: CubedSphereConnectivity; └── devices: (CPU(), CPU(), CPU(), CPU(), CPU(), CPU()). julia> data_1 = create_c_test_data(grid); Cubed",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3280#issuecomment-1743842511:73,test,test,73,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3280#issuecomment-1743842511,5,['test'],"['test', 'tests']"
Testability,Let's add tests also?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1328353618:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1328353618,1,['test'],['tests']
Testability,Let's delete from the tests until we have use for it?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1480439518:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1480439518,1,['test'],['tests']
Testability,Let's do a simple test of CPU performance to make sure we won't have to revert this soon given the change to splatting (which was implemented to solve a 100x slow down a few months ago),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-2137702684:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-2137702684,2,['test'],['test']
Testability,"Let's go for 100million then! Great stats Ali. Can we put them in to the; icy moon runs to get pdf of transit time from bottom to top. We need a; clock on each one and we stop it when the particle gets closer than a; chosen distance from the upper boundary. John. On Mon, Nov 23, 2020, 8:35 PM Ali Ramadhan <notifications@github.com> wrote:. > Some pretty promising Lagrangian particle tracking benchmarks!; >; > Couple of takeaways (all assuming a model with 128^3 grid points and QAB2; > time stepping):; >; > 1. *Low overhead*: You can advect up to ~100,000 particles on the CPU; > and up to ~10,000,000 particles on a (Titan V) GPU before the model slows; > down by more than 30%.; > 2. *Great on GPUs*: Seems that the GPU is great for advecting millions; > of particles. You can advect ~100,000,000 particles and your model only; > slows down by a factor of 4x. In this scenario, the GPU is ~620x faster; > than a single CPU core.; > 3. Calculated using (t_100000000 - t_0) / 100000000, advecting a; > single particle on the CPU takes ~110 ns while on the GPU it only takes; > ~0.127 ns. This seems a little too good to be true but I'll double check; > this.; >; > I'll start refactoring this PR using @glwagner; > <https://github.com/glwagner>'s and @zhenwu0728; > <https://github.com/zhenwu0728>'s feedback, but I think it would be; > really great if we can keep this performance.; > Benchmarks; >; > Oceananigans v0.44.1; > Julia Version 1.5.2; > Commit 539f3ce943 (2020-09-23 23:17 UTC); > Platform Info:; > OS: Linux (x86_64-pc-linux-gnu); > CPU: Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; > WORD_SIZE: 64; > LIBM: libopenlibm; > LLVM: libLLVM-9.0.1 (ORCJIT, cascadelake); > GPU: TITAN V; >; > Lagrangian particle tracking benchmarks; > ┌───────────────┬─────────────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; > │ Architectures │ N_particles │ min │ median │ mean │ max │ memory │ allocs │; > ├───────────────┼─────────────┼────────────┼────────────┼──────",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-732535982:395,benchmark,benchmarks,395,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-732535982,1,['benchmark'],['benchmarks']
Testability,"Let's not change the tests, but rather add `@test_broken` for the failing cases (here, GPU + immersed boundary grid). Ideally we get these tests passing eventually. I don't want to change the tests for good and lose that initiative.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2582#issuecomment-1142600028:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2582#issuecomment-1142600028,3,['test'],['tests']
Testability,Like which code? I mean what's an example that benefits from what changed here so I can test it to approve?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3715#issuecomment-2294372167:88,test,test,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3715#issuecomment-2294372167,1,['test'],['test']
Testability,"Locally I am seeing:. ```; Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; Test threw exception; Expression: ZeroField() - u == -u; Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; [4] getindex; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522:65,Test,Test,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522,4,"['Test', 'assert', 'test']","['Test', 'assertscalar', 'test']"
Testability,Locally on my machine these tests pass. On tartarus they pass as well. I'll open a PR and add this file back into the CI. If we see impassable problems we'll delete it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1616187716:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1616187716,1,['test'],['tests']
Testability,"Looking at this PR, I think we should make a few structural changes:; * Move `AbstractSchedule` to `Simulations`. This is where it belongs? (not `Utils`); * Make schedules a function of `Simulation`, not `model`. I don't think users really care --- it's just more logical I think this way. It's about homogenizing the Simulation/AbstractModel interface I guess.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3015#issuecomment-1482862799:264,log,logical,264,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3015#issuecomment-1482862799,1,['log'],['logical']
Testability,"Looks good to me! I was thinking of doing a cleaning and unifying of all the implicit solvers, but we can think about that later. We can merge when the tests pass.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2753#issuecomment-1259599032:152,test,tests,152,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2753#issuecomment-1259599032,1,['test'],['tests']
Testability,Looks like a good idea but I see that some tests were not successful?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2238#issuecomment-1034073975:43,test,tests,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2238#issuecomment-1034073975,1,['test'],['tests']
Testability,Looks like a good interface to me. But is it on purpose that there is only support for background fields in the `NonhydrostaticModel` and not for the `HydrostaticFreeSurfaceModel`?. @liuchihl will test it in our configurations.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2204239079:197,test,test,197,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2204239079,1,['test'],['test']
Testability,Looks like some GPU tests didn't even start due to. ```; signal (7): Bus error; ```. so I restarted the build.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1337#issuecomment-772681103:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1337#issuecomment-772681103,1,['test'],['tests']
Testability,"Looks like the new test only ran on the CPU on Sverdrup which could explain why it took 3+ hours and passed? https://buildkite.com/clima/oceananigans/builds/3043#c40e50d1-2fc1-4804-b44a-14c09f0efb50/16-351. Hmmm, this might be happening on master as well...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-871691887:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-871691887,1,['test'],['test']
Testability,"Looks like the tests run on the GPU now:. ```; [2021/07/01 10:39:51.478] INFO Testing vertically stretched rectilinear grid construction [GPU, Float64]...; --;   | [2021/07/01 10:39:51.496] INFO Testing vertically stretched rectilinear grid spacings [GPU, Float64]...;   | VerticallyStretchedRectilinearGrid{Float64, Periodic, Periodic, Bounded};   | domain: x ∈ [0.0, 1.0], y ∈ [0.0, 1.0], z ∈ [0.0, 361.0];   | topology: (Periodic, Periodic, Bounded);   | resolution (Nx, Ny, Nz): (1, 1, 19);   | halo size (Hx, Hy, Hz): (1, 1, 1);   | grid spacing (Δx, Δy, Δz): (1.0, 1.0, [min=1.0, max=37.0]); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1799#issuecomment-872350172:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1799#issuecomment-872350172,3,"['Test', 'test']","['Testing', 'tests']"
Testability,Looks like there's still work to do... I also realized that I forget a subtlety regarding the corners and periodic halo filling. I'm going to have to launch the kernels for periodic halo filling a bit differently to get the regression tests to pass.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1923#issuecomment-892358642:235,test,tests,235,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1923#issuecomment-892358642,1,['test'],['tests']
Testability,Looks like this PR only updates Adapt to v2.4.0 and not v3.0.0 so maybe it's being blocked by a dependency (which probably has a similar CompatHelper PR open right now). I think we should wait to check that all tests pass with Adapt v3.0.0 before merging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1287#issuecomment-754962548:211,test,tests,211,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1287#issuecomment-754962548,1,['test'],['tests']
Testability,"Looks like this happened after PR #1740 was merged as https://buildkite.com/clima/oceananigans/builds/2893 looks fine (GPU tests running on the commit before #1740 was merged) but the next commit/build on master is not fine https://buildkite.com/clima/oceananigans/builds/2895 (no GPU tests on the #1740 merge commit). Maybe this had something to do with CUDA.jl v3.3.0 or with the addition of the `JULIA_CUDA_USE_BINARYBUILDER=""true""` environment variable?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1794#issuecomment-871698977:123,test,tests,123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1794#issuecomment-871698977,2,['test'],['tests']
Testability,Looks like those computed fields tests have started failing again so I'll change back to `test_broken`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2189831571:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2189831571,1,['test'],['tests']
Testability,Looks pretty good and the coding was simpler than I imagined. Provided the tests for halo regions pass is there anything else to do for ComputedFields?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1340#issuecomment-773409566:75,test,tests,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1340#issuecomment-773409566,2,['test'],['tests']
Testability,"Lots of interesting questions!. I think that doing a test with diffusivity of tracer, and maybe viscosity, would be interesting. In that limit we would impose no-flux boundary conditions at the walls (and immersed walls) and I would think that conservation should be better in both cases.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-867972244:53,test,test,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-867972244,1,['test'],['test']
Testability,"Lots of tests are failing, though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-924128314:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-924128314,1,['test'],['tests']
Testability,"MITgcm I believe uses the same two-dimensional preconditioned conjugate gradient solver for the rigid lid case as for the implicit free surface case. Many ocean models often have a split explicit method for stepping forward the free surface so there is no elliptic solve. ([Killworth et al. 1991](https://journals.ametsoc.org/view/journals/phoc/21/9/1520-0485_1991_021_1333_tdoafs_2_0_co_2.xml) discusses the disadvantages of either implicit free surface or rigid lid for ocean modeling with realistically complex geometries / coastlines.). This optimization really applies just to hydrostatic models on regular grids (no horizontal stretching). Much of the time I think it would be preferable to use the nonhydrostatic model for this case, since our FFT solver is so fast that the price paid is utterly minor. Yet with an immersed boundary (and perhaps only with a non-grid-fitted immersed boundary), there are some lingering issues that we haven't resolved about whether the FFT solver can be used as is while maintaining mass conservation. The hydrostatic solver uses a vertical integral of the continuity equation and is thus far more straightforward to maintain incompressibility with non-grid-fitted boundaries. So there is a little corner case in which you might want this feature. It's also obviously useful for testing the hydrostatic model.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1727#issuecomment-851699446:1320,test,testing,1320,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1727#issuecomment-851699446,1,['test'],['testing']
Testability,Maybe a better question (which might be silly): is there any reason why benchmarks need to have a different benchmark from the main repo?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2417#issuecomment-1090357885:72,benchmark,benchmarks,72,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2417#issuecomment-1090357885,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,Maybe it would be better to implement a regression test on the RegularLatitudeLongitudeGrid before merging,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-950208016:51,test,test,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-950208016,1,['test'],['test']
Testability,Maybe put in a PR with some tests in test_field.jl? I can fix this in a bit.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2391#issuecomment-1082146704:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2391#issuecomment-1082146704,1,['test'],['tests']
Testability,"Maybe tartarus is out of space too. I'll investigate. Having trouble staying logged in right now, keep getting kicked off.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1762#issuecomment-867768540:77,log,logged,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1762#issuecomment-867768540,1,['log'],['logged']
Testability,"Maybe this helps: You could use one `dt::Float32/64` for the time step in the model, and another `dt_int::Int` to count up the time used for output. Because with Float32; ```julia; julia> maxintfloat(Float32)/3600/24; 194.18074f0; ```; after 194 days of +dt you start flipping only the last mantissa bit, e.g. `dt=300f0` (5min); ```julia; julia> bitstring(300f0*3600*24*194); ""01001111100101011101110001000010"". julia> bitstring(300f0*3600*24*194 + 300f0); ""01001111100101011101110001000011""; ```; So after about one year +dt can be rounded back; ```julia; julia> bitstring(300f0*3600*24*366); ""01010000000011010101110011110111"". julia> bitstring(300f0*3600*24*366 + 300f0); ""01010000000011010101110011110111""; ```; but because you can factor out the `dt` and floats being logarithmic, this is actually independent of the time step `dt`.; ```julia; julia> bitstring(30f0*3600*24*366); ""01001110011000100010111001011000"". julia> bitstring(30f0*3600*24*366 + 30f0); ""01001110011000100010111001011000""; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2321#issuecomment-1512007255:773,log,logarithmic,773,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2321#issuecomment-1512007255,1,['log'],['logarithmic']
Testability,Maybe we can use `Term.jl` to implement a default / convenience log utility for simulations,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2281#issuecomment-1076316613:64,log,log,64,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2281#issuecomment-1076316613,1,['log'],['log']
Testability,Maybe we should propose a regression test for this...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2708#issuecomment-1223991142:37,test,test,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2708#issuecomment-1223991142,1,['test'],['test']
Testability,Maybe! I actually still have a couple test to fix before it's ready 😅,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1016064200:38,test,test,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1016064200,1,['test'],['test']
Testability,Me too! I need some help I think here... I'm not sure why tests fail.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1563408348:58,test,tests,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1563408348,1,['test'],['tests']
Testability,Merge after tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2502#issuecomment-1115545126:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2502#issuecomment-1115545126,1,['test'],['tests']
Testability,Merge when tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3215#issuecomment-1690031565:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3215#issuecomment-1690031565,3,['test'],['tests']
Testability,Merging because all tests pass (it's just docs that don't build).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1540#issuecomment-816815511:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1540#issuecomment-816815511,1,['test'],['tests']
Testability,"Might be cool to be able to dispatch on the order so the order could be specified as part of the model, e.g. ```julia; model = ShallowWaterModel(grid=grid, order=4); ```. and it would make it easier to use the operators in other models. We could define new types like. ```julia; struct SecondOrderCenteredDifference end # one option; struct CenteredDifference{N} end # another option; ```. then dispatch on `::SecondOrderCenteredDifference` or `::CenteredDifference{Val{4}}` or we could dispatch on numbers via `Val`. ```julia; julia> δ(i, A, ::Val{2}) = A[i] - A[i-1]; δ (generic function with 1 method). julia> δ(i, A, ::Val{4}) = (-2A[i+1] + 16A[i] - 16A[i-1] +2A[i-2]) / 12; δ (generic function with 2 methods). julia> δ(10, collect(1:20) .^ 2, Val(2)); 19. julia> δ(10, collect(1:20) .^ 2, Val(4)); 15.833333333333334; ```. but might have to be careful to [avoid performance regressions with `Val`](https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-value-type). That said it might take a non-trivial amount of refactoring to support and test dispatching on the operator order, at least for the incompressible model. Maybe it makes sense for `ShallowWaterModel` to add support for 4th-order operators first (with or without dispatch, probably easier without first) and from there we can investigate how to generalize?. If we go all out and start supporting lots of different operators I wonder if it's worth looking into [FiniteDiff.jl](https://github.com/JuliaDiff/FiniteDiff.jl) or [FiniteDifferences.jl](https://github.com/JuliaDiff/FiniteDifferences.jl). Not sure what role these packages would play. From skimming the FiniteDifferences.jl README it seems that there are no higher-order non-allocating implementations between the two packages.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1265#issuecomment-740952155:1066,test,test,1066,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1265#issuecomment-740952155,1,['test'],['test']
Testability,"Might be good to add a test (or more than just one) for windowed fields. Even a simple one like. ```julia; windowed_field = CenterField(grid, indices=(:, :, 1:1)); @test view(windowed_field, :, :, 1:1) isa AbstractArray; ```. or something. @siddharthabishnu can you add that? Pretty basic test so probably belongs in `test_field.jl`:. https://github.com/CliMA/Oceananigans.jl/blob/sb/extend-parent-indices/test/test_field.jl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2088811397:23,test,test,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2088811397,8,['test'],['test']
Testability,Might be good to come up with a minimal example that benchmarks a computation without setting up a simulation. In that benchmarking script I think we should also benchmark. ```julia; averaged_computed_s = AveragedField(ComputedField(s)); compute!(averaged_computed_s); ```. May want to profile too. Hopefully this is any easy fix.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-951078455:53,benchmark,benchmarks,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-951078455,3,['benchmark'],"['benchmark', 'benchmarking', 'benchmarks']"
Testability,"Might be worthwhile to profile with `timestepper=:RungeKutta3` as a sanity check, considering that this benchmark suggests a simple time-stepping function is 12% (!) of the cost. Another thought --- we should probably benchmark ""fully loaded"" models that at least use WENO advection (and perhaps some turbulence closure?), since that's more realistic. I think most usage of `NonhydrostaticModel` also has one tracer, rather than two (someday, we should change that default...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890002262:104,benchmark,benchmark,104,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890002262,4,['benchmark'],['benchmark']
Testability,Might make sense to figure out how to `@assert` that the benchmark is configured correctly?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885658285:40,assert,assert,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885658285,2,"['assert', 'benchmark']","['assert', 'benchmark']"
Testability,"Might've been this one:. https://github.com/CliMA/Oceananigans.jl/blob/fa5e280115f619d01a460f012328bd7e6d253b38/test/test_netcdf_output_writer.jl#L552. But there were also some user issues which lead us to believe it wasn't just about making sure the tests were good, as a recall. We can still take an opinionated stance that this is an important enough issue that it's worth some temporary user confusion.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3214#issuecomment-1679450417:112,test,test,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3214#issuecomment-1679450417,2,['test'],"['test', 'tests']"
Testability,"More thoughts. . 1. I'm reading the discussion on immersed boundary methods (IBMs) with interest on [#916](https://github.com/CliMA/Oceananigans.jl/issues/1036). It should be pointed out that this would be a great thing to test in a shalllow water model since there is no pressure inversion and it's much easier to resolve the horizontal, since we have no vertical. 2. Climate Machine also has a shallow water [model](https://github.com/CliMA/ClimateMachine.jl/blob/master/src/Ocean/ShallowWater/ShallowWaterModel.jl). I don't know the details of what this does but I should probably learn how the two models will differ.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1165#issuecomment-726868983:223,test,test,223,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1165#issuecomment-726868983,1,['test'],['test']
Testability,Moving the vertically stretched tests to a different file is what I was thinking also! :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2183#issuecomment-1021789897:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2183#issuecomment-1021789897,1,['test'],['tests']
Testability,"Multiple forcing is tested but all the forcing tests just check that they don't error, so I expect in this situation the advective forcing would have no effect but wouldn't error. Perhaps all of the forcing tests should really have something checking that they are changed, the forcing a could all just be set to return 1 and then we check that all of the tracers that are forced are not zero at the end?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1715564474:20,test,tested,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1715564474,3,['test'],"['tested', 'tests']"
Testability,"N `query(s::CuStream)` is deprecated, use `isdone(s)` instead. -@-> /g/data/v45/nc3020/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:41; [2023/02/21 06:37:54.934] INFO ... initial time step complete (22.395 seconds).; [2023/02/21 06:37:56.880] INFO Simulation is stopping. Model iteration 20 has hit or exceeded simulation stop iteration 20.; [2023/02/21 06:38:00.743] INFO Δu: min=-3.188983e-08, max=+2.966291e-08, mean=+3.932481e-11, absmean=+1.978398e-09, std=+5.640766e-09 (16384/16384 matching grid points); [2023/02/21 06:38:00.744] INFO Δv: min=-2.539346e-09, max=+1.967717e-09, mean=+2.462280e-12, absmean=+1.480658e-10, std=+4.143014e-10 (16488/16512 matching grid points); [2023/02/21 06:38:00.744] INFO Δh: min=-4.767265e-07, max=+4.779508e-07, mean=+3.492460e-09, absmean=+2.039559e-07, std=+2.510841e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/21 06:38:01.772] WARN defaulting to uniform WENO scheme w",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:13651,test,test,13651,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['test'],['test']
Testability,"NaNs often occur either because the time step is too small, or because the problem being posed is too extreme or not physical (such that a reasonable and stable time step cannot be found). One issue is that the use of `ValueBoundaryCondition` is incorrect here:. ```julia; w_bcs = WVelocityBoundaryConditions(grid, top = ValueBoundaryCondition(0.0), bottom=ValueBoundaryCondition(0.0)); ```. You are trying to specify an impenetrable boundary condition on the vertical velocity, which requires `NormalFlowBoundaryCondition`:. ```julia; w_bcs = WVelocityBoundaryConditions(grid, top = NormalFlowBoundaryCondition(0.0), bottom=NormalFlowBoundaryCondition(0.0)); ```. this is also the default for a grid with `topology(grid) = (Periodic, Periodic, Bounded)`, so there's no need to specify it explicitly. In other words, try changing . ```julia; boundary_conditions = (u=u_bcs, v=v_bcs, w=w_bcs, T=T_bcs)); ```. to . ```julia; boundary_conditions = (u=u_bcs, v=v_bcs, T=T_bcs)); ```. in your constructor for `IncompressibleModel`. A good approach for developing a complex simulation is to start with something simple (or something that worked previously) and modify the script incrementally (slowly!), re-running and re-testing the script after each significant change. For this is useful to run either a two-dimensional version of the problem or a very low resolution simulation. I also suggest adding some lines at the bottom of your script to plot the solution so you can visually inspect it after a run. Your setup looks like a laboratory-scale simulation of convection. I think starting with uniform cooling (rather than spatially varying), omitting the effect of salinity, and using an `IsotropicDiffusivity` in two-dimensions (rather than starting out in three dimensions) might be a good path forward for working and building up your script.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1432#issuecomment-791953056:1216,test,testing,1216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1432#issuecomment-791953056,2,['test'],['testing']
Testability,New branch **fjp/generalize-runge-kutta-3**:. I did 2 trials to try and get an idea of the variance we can expect. Sorry if this is too much information. Trial 1: ; ```; Incompressible model benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ CPU │ Float32 │ 32 │ 3.770 ms │ 3.925 ms │ 3.975 ms │ 4.535 ms │ 247.69 KiB │ 1916 │; │ CPU │ Float32 │ 64 │ 24.751 ms │ 24.945 ms │ 25.124 ms │ 26.909 ms │ 247.69 KiB │ 1916 │; │ CPU │ Float32 │ 128 │ 218.012 ms │ 218.721 ms │ 219.037 ms │ 220.987 ms │ 247.69 KiB │ 1916 │; │ CPU │ Float64 │ 32 │ 4.253 ms │ 4.437 ms │ 4.509 ms │ 5.229 ms │ 299.80 KiB │ 1916 │; │ CPU │ Float64 │ 64 │ 29.137 ms │ 29.446 ms │ 29.689 ms │ 31.794 ms │ 299.80 KiB │ 1916 │; │ CPU │ Float64 │ 128 │ 257.251 ms │ 258.619 ms │ 259.852 ms │ 270.451 ms │ 299.80 KiB │ 1916 │; │ GPU │ Float32 │ 32 │ 2.489 ms │ 2.591 ms │ 2.755 ms │ 3.150 ms │ 814.41 KiB │ 11740 │; │ GPU │ Float32 │ 64 │ 10.374 ms │ 13.950 ms │ 13.590 ms │ 14.010 ms │ 814.38 KiB │ 11746 │; │ GPU │ Float32 │ 128 │ 88.020 ms │ 125.190 ms │ 122.408 ms │ 133.906 ms │ 814.38 KiB │ 11746 │; │ GPU │ Float64 │ 32 │ 5.323 ms │ 5.438 ms │ 5.431 ms │ 5.573 ms │ 892.33 KiB │ 11574 │; │ GPU │ Float64 │ 64 │ 34.741 ms │ 43.748 ms │ 42.586 ms │ 44.978 ms │ 892.30 KiB │ 11580 │; │ GPU │ Float64 │ 128 │ 279.110 ms │ 333.392 ms │ 328.209 ms │ 335.085 ms │ 892.30 KiB │ 11580 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┘; [2020/11/26 16:03:50.829] INFO Writing Incompressible_model_benchmarks.html...; Incompressible model CPU -> GPU speedup; ┌─────────────┬─────┬──────────┬─────────┬─────────┐; │ Float_types │ Ns │ speedup │ memory │ allocs │; ├─────────────┼─────┼──────────┼─────,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-734478044:191,benchmark,benchmarks,191,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-734478044,1,['benchmark'],['benchmarks']
Testability,"New log level should be enough if we just need flat per-iteration timings to time a few blocks for a few iterations. Are you thinking of just logging raw `@time` data?. I'm not sure if we need anything more than a new log level, but I imagine some of the benefits of using a package like TimerOutputs.jl would make the timer blocks much more useful for debugging and for users. It allows for nested timers and produces a very nice table summary at the end which includes number of calls and average time/memory allocations. This could also be useful for users wishing to time their simulations to figure out how much time is being spent on I/O vs. in kernels vs. solvers vs. callbacks, etc. I guess I also see timers as a debugging tool for users. Could help be figure out cluster filesystem issues or figure out whether Oceananigans or my coupled model (via callback) is the bottleneck. Otherwise if the timers are just a developer debugging tool that dumps timing information, that's useful but it might not be useful for timing real-world scripts/simulations since the log would fill up with a huge number of lines that can't be interpreted without further processing. Here's an example of it in use: https://github.com/JuliaGPU/CUDA.jl/issues/149#issuecomment-461943376 (CUDA.jl has been using TimerOutputs.jl for a long time I think). TimerOutputs.jl is easy to use since you just add `@timeit` blocks but that does add some noise to the code (not sure if more or less than using a timing log level).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-887921831:4,log,log,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-887921831,5,['log'],"['log', 'logging']"
Testability,"Nice work @matinraayai !. Happy to merge this but then what's the plan for @matinraayai to continue to contribute @christophernhill ?. Also, who has access to an AMD GPU to test this code? Any plan for continuous integration testing?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112437720:173,test,test,173,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112437720,2,['test'],"['test', 'testing']"
Testability,Nice! Tests are passing :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2695#issuecomment-1230430646:6,Test,Tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2695#issuecomment-1230430646,1,['Test'],['Tests']
Testability,"Nice!. I was actually going to advocate for adding such a utility because I've found myself running a few tests where the time steps are likely to be diffusion limited:; 1. possibly stratified Couette flow sometimes,; 2. the Pearson vortex test from PR #336,; 3. more recently the [forced flow test](https://github.com/climate-machine/Oceananigans.jl/blob/5355044deae3120134b55cc20f6e38f637eea6a5/test/verification/forced_flow.jl) from (Brown, Cortez, & Minion, 2000) that I'm using to test whether our operator-splitting method is second-order accurate in both velocity and pressure. For geophysical flows, the time step will almost always be limited by advection, but there seem to be many other flows where the time step will be limited by diffusion. So if we want a package that is usable for not just geophysical flows, it would be nice to have adaptive time stepping that works with both advective and diffusive CFL.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/360#issuecomment-526919951:106,test,tests,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/360#issuecomment-526919951,5,['test'],"['test', 'tests']"
Testability,Nice!. Is there a test we could add that might catch this bug?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2682#issuecomment-1194591286:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2682#issuecomment-1194591286,1,['test'],['test']
Testability,"Nice, thanks for testing that. I found the second bug (which was created by the bugfix). I think it should work now. This could allow us to eliminate the hydrostatic pressure from the nonhydrostatic model and thereby save allocating one field. @simone-silvestri . Apparently all our prior tests were flawed because of this bug. We still need the hydrostatic pressure integral in the hydrostatic model.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518043988:17,test,testing,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518043988,2,['test'],"['testing', 'tests']"
Testability,"Nice, thanks!. I'm pretty surprised that `ab2_step_field!` dominates the cost. `ab2_step_field!` is this simple function:. https://github.com/CliMA/Oceananigans.jl/blob/9ecddac3fe2666e05f21e51b81ec2c403094e5ea/src/TimeSteppers/quasi_adams_bashforth_2.jl#L121. which seems much cheaper than something like `calculate_Gu!`. What's going on?. I'm also noticing that function is a bit sketchy because it uses the type of `χ` to convert `1.5` and `0.5`. This is fine if `χ` is a floating point number, but not otherwise... it should probably use `eltype(U)`. . How did you run the profiler? Does it make sense to add a new `profile` directory to the source code (or maybe just add something to `benchmark/`)?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890001070:690,benchmark,benchmark,690,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890001070,2,['benchmark'],['benchmark']
Testability,Nice. It's not tested until we use that example though. We could also go the extra step of testing it directly if we are going to add it separately>?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3815#issuecomment-2388996691:15,test,tested,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3815#issuecomment-2388996691,2,['test'],"['tested', 'testing']"
Testability,"No clue, but the reference linked in the original post tests some cases and includes a discussion.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1704#issuecomment-876058323:55,test,tests,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1704#issuecomment-876058323,1,['test'],['tests']
Testability,"No worries don't apologies! I made the same mistake after reading [Hendrik Ranocha's blog post](https://ranocha.de/blog/Optimizing_EC_Trixi) and seeing. ![image](https://user-images.githubusercontent.com/15271942/128191753-8febcd84-8230-4def-ba80-8aaf848b92a0.png). But this is actually the output of benchmarking on individual components of the time-stepping scheme. I think it'd be a good idea to setup similar microbenchmarks of the time-stepping components (`update_state!`, `calculate_tendencies!`, etc). This is not quite the same as profiling but yields slightly more precise and also more digestible information about timings and relative cost of things per time-step.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-892672795:301,benchmark,benchmarking,301,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-892672795,1,['benchmark'],['benchmarking']
Testability,No worries!; it brings up an issue that regression tests and generation scripts should not rely on default args/kwargs,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3500#issuecomment-1981728258:51,test,tests,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3500#issuecomment-1981728258,1,['test'],['tests']
Testability,"No, I did. ```; julia -O0 --color=yes --project -e 'using Pkg; Pkg.test()'; ```. which I took from buildkite.yml",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1545542718:67,test,test,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1545542718,1,['test'],['test']
Testability,"No, on main all tests are done in O(1h)… :(; But it’s strange.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3580#issuecomment-2102609149:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3580#issuecomment-2102609149,1,['test'],['tests']
Testability,None of the examples or validation tests changed,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1706577311:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1706577311,1,['test'],['tests']
Testability,"None of the individual test runs took very long, but our CI pipeline is clogged up due to this hanging issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1530#issuecomment-818309942:23,test,test,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1530#issuecomment-818309942,1,['test'],['test']
Testability,None other than it requires typing the code and adding a test or two. Are you suggesting extending the capabilities of `FieldSlicer`? I think that's a nice idea if so!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1512#issuecomment-809903134:57,test,test,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1512#issuecomment-809903134,1,['test'],['test']
Testability,Not sure if this is fully correct but qualitatively the Gaussian blob remains coherent due to geostrophic balance and we get Kelvin waves on the boundary. Was hoping we could merge this PR as it gets the cubed sphere face grid working (and it seems to be working okay pending more rigorous validation tests). Not sure if we'll keep the surface gravity waves validation experiment but might be good to use it for the full cubed sphere as well. https://user-images.githubusercontent.com/20099589/112829246-d6342800-905e-11eb-89fc-4f77a3eb8521.mp4,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1480#issuecomment-809299564:301,test,tests,301,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1480#issuecomment-809299564,1,['test'],['tests']
Testability,"Not sure what ""squash and merge"" means but I deleted the file locally and then wanted to push the change but couldn't. If someone can tell me how to delete it I'm happy to do it. Also, I see that the tests pass so my use of `Polynomials` presumably worked?. Anything else that people would like done before someone approves this PR?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1650#issuecomment-839735472:200,test,tests,200,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1650#issuecomment-839735472,1,['test'],['tests']
Testability,Not sure why the matrix solver test failed,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3237#issuecomment-1694660034:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3237#issuecomment-1694660034,1,['test'],['test']
Testability,Not sure why the poisson solver test failed again but only on CPU,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1515044071:32,test,test,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1515044071,1,['test'],['test']
Testability,Not sure why the poisson test has failed now...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1514631344:25,test,test,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1514631344,1,['test'],['test']
Testability,Not sure why this test failed since I only changed some formatting,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2733#issuecomment-1252316466:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2733#issuecomment-1252316466,1,['test'],['test']
Testability,"Not that I know of, so we should maybe write a test to check that it's correct?. Also, this code should use `Integral`:. https://github.com/CliMA/Oceananigans.jl/blob/13b7f2366726b3e52303dee67bab264941088554/src/AbstractOperations/metric_field_reductions.jl#L74",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2735#issuecomment-1244085315:47,test,test,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2735#issuecomment-1244085315,1,['test'],['test']
Testability,Note on testing for this issue: the output is often correct for the _first_ evaluation of the average. Subsequent evaluations seem to produce the error.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1767#issuecomment-870888870:8,test,testing,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1767#issuecomment-870888870,1,['test'],['testing']
Testability,"Note that there is a validation test for couette flow here:. https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/immersed_couette_flow.jl. So apparently this is only a problem with the API for specifying fluxes on individual boundary facets. Ie this works:. ```julia; u_immersed_bc = ValueBoundaryCondition(-1); u_top_bc = ValueBoundaryCondition(1); u_bcs = FieldBoundaryConditions(immersed=u_immersed_bc, top=u_top_bc); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3141#issuecomment-1582837617:32,test,test,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3141#issuecomment-1582837617,1,['test'],['test']
Testability,"Note there is already substepping implemented for CATKEVerticalDiffusivity and TKEDissipationVerticalDiffusivity. What are the challenges? For the closures this feature was relatively straightforward to implement. But this PR seems quite large. For many reasons it is often better to open the PR _first_ (better yet, an issue that defines the problem, so we can discuss designs), rather than at a late stage where feedback is difficult to manifest. Also, rather than supporting this generally for all time-steppers, I would argue that the correct approach is to implement this for just one model and one time-stepper. Once the proof of concept is well developed and tested, it can be applied more broadly in a separate PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3888#issuecomment-2450582918:666,test,tested,666,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3888#issuecomment-2450582918,2,['test'],['tested']
Testability,"Note to @glwagner : In this PR I had changed the default halo size from 1 to 3. Unfortunately, lots of the tests have implicitly assumed the halo size is 1, hence I had over 200 errors. I have therefore changed it back to 1 I think it should be changed in a separate PR as it is not a trivial task.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1504#issuecomment-806235788:107,test,tests,107,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1504#issuecomment-806235788,1,['test'],['tests']
Testability,Note to self that `cpu_poisson_solver_tests_2` is relatively cheap so we should add the CG Poisson solver tests there.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3890#issuecomment-2451038507:106,test,tests,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3890#issuecomment-2451038507,1,['test'],['tests']
Testability,Note to self: this behavior can also create a headache in testing.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1734#issuecomment-881927760:58,test,testing,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1734#issuecomment-881927760,1,['test'],['testing']
Testability,"Note: I couldn't find any tests for this, so it'd probably be a good idea to add some here before merging.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-1590176837:26,test,tests,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-1590176837,1,['test'],['tests']
Testability,"Note: we probably need more tests for `FieldTimeSeries` specifically as well to ensure more robust behavior. These are a little more annoying to design though, I will leave for the future.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3225#issuecomment-1689958017:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3225#issuecomment-1689958017,1,['test'],['tests']
Testability,"Nothing has changed over at CI, so this looks like a legitimate issue?. That said, you are [using](https://github.com/climate-machine/Oceananigans.jl/blob/master/.gitlab-ci.yml) the `v4` templates, which do `pkg""develop""` and as a result ignore the Manifest. Maybe that's related? You might want to use the new `v5` templates, which do `pkg""instantiate""` (respecting the manifest) with a simpler CI organization (single `test.yml`, include file with extensible templates instead of predefined jobs).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/425#issuecomment-536881361:421,test,test,421,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/425#issuecomment-536881361,1,['test'],['test']
Testability,"Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}}}); @ Enzyme.Compiler ~/.julia/packages/Enzyme/8GSlk/src/rules/jitrules.jl:483; [48] #update_state!#71; @ ~/Projects/Oceananigans.jl/src/Models/HydrostaticFreeSurfaceModels/single_column_model_mode.jl:74; [49] set!; @ ~/Projects/Oceananigans.jl/src/Fields/set!.jl:33 [inlined]; [50] #apply_regionally!#56; @ ~/Projects/Oceananigans.jl/src/Utils/multi_region_transformation.jl:121 [inlined]; [51] apply_regionally!; @ ~/Projects/Oceananigans.jl/src/Utils/multi_region_transformation.jl:118 [inlined]; [52] macro expansion; @ ~/Projects/Oceananigans.jl/src/Utils/multi_region_transformation.jl:206 [inlined]; [53] #set!#40; @ ~/Projects/Oceananigans.jl/src/Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:60 [inlined]; [54] set!; @ ~/Projects/Oceananigans.jl/src/Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:48 [inlined]; [55] buoyancy_variance!; @ ~/Projects/Oceananigans.jl/test/test_enzyme.jl:246; [56] #time_step!#8; @ ~/Projects/Oceananigans.jl/src/TimeSteppers/quasi_adams_bashforth_2.jl:96; [57] macro expansion; @ ~/.julia/packages/Enzyme/8GSlk/src/compiler.jl:8839 [inlined]; [58] enzyme_call; @ ~/.julia/packages/Enzyme/8GSlk/src/compiler.jl:8405 [inlined]; [59] CombinedAdjointThunk; @ ~/.julia/packages/Enzyme/8GSlk/src/compiler.jl:8178 [inlined]; [60] autodiff; @ ~/.julia/packages/Enzyme/8GSlk/src/Enzyme.jl:491 [inlined]; [61] autodiff; @ ~/.julia/packages/Enzyme/8GSlk/src/Enzyme.jl:537 [inlined]; [62] autodiff(::ReverseMode{false, true, FFIABI, false, false}, ::typeof(buoyancy_variance!), ::Duplicated{HydrostaticFreeSurfaceModel{QuasiAdamsBashforth2TimeStepper{Float64, @NamedTuple{u::Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Flat, Flat, Bounded, Float64, Float64, Float64, Nothing, Nothing, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Tuple{Colon, Colon, Colon}, Off",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3837#issuecomment-2400785596:136872,test,test,136872,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3837#issuecomment-2400785596,1,['test'],['test']
Testability,"Nothing, Nothing, Nothing, Nothing}, buoyancy::Nothing, coriolis::Nothing, free_surface::ImplicitFreeSurface{Nothing, Float64, Nothing, Nothing, Symbol, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, forcing::NamedTuple{(), Tuple{}}, closure::Nothing, boundary_conditions::NamedTuple{(), Tuple{}}, tracers::Nothing, particles::Nothing, velocities::Nothing, pressure::Nothing, diffusivity_fields::Nothing, auxiliary_fields::NamedTuple{(), Tuple{}});   | @ Oceananigans.Models.HydrostaticFreeSurfaceModels ~/builds/tartarus-1/clima/oceananigans/src/Models/HydrostaticFreeSurfaceModels/hydrostatic_free_surface_model.jl:113;   | [2] macro expansion;   | @ ~/builds/tartarus-1/clima/oceananigans/test/test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl:41 [inlined];   | [3] macro expansion;   | @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined];   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/test/test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl:9;   | [5] include(fname::String);   | @ Base.MainInclude ./client.jl:444;   | [6] macro expansion;   | @ ~/builds/tartarus-1/clima/oceananigans/test/runtests.jl:65 [inlined];   | [7] macro expansion;   | @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined];   | [8] macro expansion;   | @ ~/builds/tartarus-1/clima/oceananigans/test/runtests.jl:58 [inlined];   | [9] macro expansion;   | @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined];   | [10] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/test/runtests.jl:4;   | [11] include(fname::String);   | @ Base.MainInclude ./client.jl:444;   | [12] top-level scope;   | @ none:6;   | [13] eval;   | @ ./boot.jl:360 [inlined];   | [14] exec_options(opts::Base.JLOptions);   | @ Base ./client.jl:261;   | [15] _start();   | @ Base ./client.jl:485;  ; ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1001728185:2309,test,test,2309,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1001728185,1,['test'],['test']
Testability,"Now I've looked harder I've realized that this issue is only for bounded domains so my original fix is incorrect for periodic domains since they are [xmin, xmax) not [xmin, xmax] like bounded domains. Fixed this now. I've changed the position of the particles in the existing tests so that they should be affected by the change if that works? For the x I put it on the edge so it gets advected out (and will have been looped round even without the fix), y near the boundary but should not get looped round, and for the z I've put it near the boundary where previously it will have been moved but should not have been.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2682#issuecomment-1195305243:276,test,tests,276,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2682#issuecomment-1195305243,1,['test'],['tests']
Testability,Now a test ;),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2260#issuecomment-1046351867:6,test,test,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2260#issuecomment-1046351867,1,['test'],['test']
Testability,Now begins the slog to fix all the tests haha. Looks like `show_fields.jl` is complaining that `Center` is not defined: https://buildkite.com/clima/oceananigans/builds/982#b79d3314-e323-4bce-a443-35926baf3803/40-133,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1314#issuecomment-766164070:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1314#issuecomment-766164070,1,['test'],['tests']
Testability,"Now the shallow water tests are failing, on top of the distributed shallow water tests. It seems to be in using `set!`. Hmm... ```; julia> set!(model, uh=uh₀, h=h₀); ERROR: type ShallowWaterModel has no field auxiliary_fields; Stacktrace:; [1] getproperty(x::ShallowWaterModel{RegularRectilinearGrid{Float64, Periodic, Periodic, Flat, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, CPU, Float64, UpwindBiasedFifthOrder, Nothing, NamedTuple{(:uh, :vh, :h), Tuple{typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing)}}, Nothing, Nothing, NamedTuple{(:uh, :vh, :h), Tuple{Field{Face, Center, Center, CPU, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, RegularRectilinearGrid{Float64, Periodic, Periodic, Flat, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Float64, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{Nothing, Nothing}}}}, Field{Center, Face, Center, CPU, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, RegularRectilinearGrid{Float64, Periodic, Periodic, Flat, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Float64, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Boundary",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-843406019:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-843406019,2,['test'],['tests']
Testability,OK fixed it. Apparently tests were passing before because the `time_discretization` argument was not working properly.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2288#issuecomment-1059542167:24,test,tests,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2288#issuecomment-1059542167,1,['test'],['tests']
Testability,"OK, I added some tests for variably spaced grids as well. @glwagner, what do you think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1615844030:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1615844030,1,['test'],['tests']
Testability,"OK, I changed only one now just want to see if unit tests on CPU pass. Although, with; https://github.com/CliMA/Oceananigans.jl/blob/a934f7ecbbeed50013b012ae230b1b6587e4e6aa/test/runtests.jl#L56; I'm wondering whether all CPU tests are actually being run with `arch = GPU()`....",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942853591:52,test,tests,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942853591,3,['test'],"['test', 'tests']"
Testability,"OK, I think I know what's the issue. The `interpolate!` now fills halos after interpolation:. https://github.com/CliMA/Oceananigans.jl/blob/29e4aaccc57b6391189700b8a6ac8324aff08805/src/Fields/interpolate.jl#L328. And the tests have a test that interpolates a $w$-velocity field with `Bounded` $z$-topology _but_ with non-zero values at top and bottom. When we fill the halos the boundary conditions are imposed and the interpolated field gets 0 at k=1 and k=Nz but the original field doesn't, so the test fails. This test in particular. https://github.com/CliMA/Oceananigans.jl/blob/29e4aaccc57b6391189700b8a6ac8324aff08805/test/test_field.jl#L171. fails when `f = w`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3395#issuecomment-1911600412:221,test,tests,221,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3395#issuecomment-1911600412,5,['test'],"['test', 'tests']"
Testability,"OK, I think we wrap up this PR and merge it. The advection tests and what not can be another PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1646559753:59,test,tests,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1646559753,1,['test'],['tests']
Testability,"OK, I tried to make the test pass and it doesn't on v0.76.5-v0.76.8 it it won't pass. On v0.77.0 it passes. This hints that the data were created with v0.77.0. @simone-silvestri do you have any recollection of this or a way to figure it out?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439341447:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439341447,1,['test'],['test']
Testability,"OK, in view of the benchmarks at https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1589191799 seems that the additional workers do something but not that much? With 4 workers we can bring the docs from 1h45 -> 1h. Shall we do that for now @glwagner?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1592121216:19,benchmark,benchmarks,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1592121216,1,['benchmark'],['benchmarks']
Testability,"OK, let me put my 2 cents. If we have the validations in the docs just because of the animations then we should just put the animations on YouTube or somewhere and point people there. Having the non-working versions of, e.g., `lid_cavity.jl` script in the repo and in the docs has lead many new users in the rabbit hole of figure it out. Then users feel that scripts are not working, sometimes they post an issue or ask in Slack. But who know how many other users are simply discouraged. Personally, if I download a code that includes non-working pieces of code I am very discouraged. Thus, bottom-line: I see @glwagner's point that the functionality or pipeline for maintaining healthy validations scripts (even a subset of them) then *only those* should be included in the Docs. `Sandbox`: I'm so against a `sandbox` directory! It's like keeping your trash bin in your house for ever in case there is something useful there. I used to to it all the time: I'd keep commented out code in my scripts... But I think it's a bad practice. We need to let go. The repository and the tagged versions should not include half-bake scripts and what not. I'm happy with a sandbox repository `Oceananigans.jl-sandbox` where we keep things. Or a `sandbox` branch even. Regarding this PR and what's should be kept in the Docs: I vote we keep the convergence tests in the docs and nuke the validations. I agree with the git history size issue and probably the method of including the `.png` files that @ali-ramadhan suggests would work -- I've never done it though. (btw, @ali-ramadhan, I've noticed an increase in the repo's size recently... :()",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872556231:810,sandbox,sandbox,810,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872556231,11,"['Sandbox', 'sandbox', 'test']","['Sandbox', 'sandbox', 'tests']"
Testability,"OK, now tests pass but I believe I removed more `@unroll`s than I should. It was only for testing purposes to see if those were the culprit for the warnings. @glwagner could we zoom and put back in the `@unroll`s that we should?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1884393184:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1884393184,2,['test'],"['testing', 'tests']"
Testability,"OK, some regression tests break with this change (probably because the data was produced with the default scheme which was different). Also some unit tests. I'll have a look.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3500#issuecomment-1981553474:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3500#issuecomment-1981553474,2,['test'],['tests']
Testability,"OK, tests pass!!!!!. Woooooohoooooo!!. Ready to review. Ready to move forward to Julia v1.9. cc @glwagner, @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615839629:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615839629,1,['test'],['tests']
Testability,"OK, the idea is that tests should pass in this PR but fail here: https://github.com/CliMA/Oceananigans.jl/tree/ncc/test-show-on-gpu; If that happens I am merging. @glwagner, @ali-ramadhan ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1638#issuecomment-840084170:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1638#issuecomment-840084170,2,['test'],"['test-show-on-gpu', 'tests']"
Testability,"OK, when test pass let's merge. And let's open an issue or PR for proper treatment of bathymetry in conservative formulation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144236447:9,test,test,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144236447,1,['test'],['test']
Testability,OK. How are these methods going to be tested and or maintained?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1756046079:38,test,tested,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1756046079,1,['test'],['tested']
Testability,"Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `91.80% <100.00%> (+2.91%)` | :arrow_up: |; | [src/TurbulenceClosures/diffusion\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9kaWZmdXNpb25fb3BlcmF0b3JzLmps) | `100.00% <100.00%> (ø)` | |; | [...e\_closure\_implementations/isotropic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2lzb3Ryb3BpY19kaWZmdXNpdml0eS5qbA==) | `100.00% <100.00%> (ø)` | |; | [src/TurbulenceClosures/turbulence\_closure\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfdXRpbHMuamw=) | `75.00% <100.00%> (ø)` | |; | [...urbulenceClosures/viscous\_dissipation\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy92aXNjb3VzX2Rpc3NpcGF0aW9uX29wZXJhdG9ycy5qbA==) | `100.00% <100.00%> (ø)` | |; | [test/test\_turbulence\_closures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3R1cmJ1bGVuY2VfY2xvc3VyZXMuamw=) | `100.00% <100.00%> (ø)` | |; | ... and [39 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999?src=pr&el=footer). Last update [e808a82...b56c813](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/999#issuecomment-700403403:3012,test,test,3012,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/999#issuecomment-700403403,2,['test'],['test']
Testability,Oh I see. This was not at all clear to me from your previous question. I thought you were asking whether the new versions dropped support to CuArrays and therefore explain why tests were failing!. Let me get back on your question now that I understand!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613661175:176,test,tests,176,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613661175,2,['test'],['tests']
Testability,Oh no problem. I think there could even be more than one PR. First we just want to show that we can build a latitude longitude grid using OSSG. next we can test dynamics on OSSG and make sure its identical (that's a better test than just visualizing a splash). Then we can design a user interface that makes it easy to build latitdue longitude grid or any other grid on OSSG. Then we can deprecate latitude longitude grid. So there's a lot of ways to break it up. I just thought if OSSG works it'd be nice to demonstrate by running a case on lat lon grid.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3230#issuecomment-1697313519:156,test,test,156,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3230#issuecomment-1697313519,2,['test'],['test']
Testability,Oh this isn't implemented? How do we test it?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2389522358:37,test,test,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2389522358,1,['test'],['test']
Testability,"Oh, actually that makes sense since the unit test here just does the field allocation, and doesn't hit a KA call that would result in an issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3347#issuecomment-1765418512:45,test,test,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3347#issuecomment-1765418512,1,['test'],['test']
Testability,"Ok @jagoosw I added the test you asked for, let me know what you think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1715929949:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1715929949,1,['test'],['test']
Testability,Ok @simone-silvestri I think this is ready for testing!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2449#issuecomment-1104258234:47,test,testing,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2449#issuecomment-1104258234,1,['test'],['testing']
Testability,"Ok I think I figured it out. The `Float64` values are coming in from functions like `depthᶜᶜᶠ` and `height_above_bottomᶜᶜᶠ`. The main issue is actually the grid coordinates not being fully `Float32`. In particular, when coordinates like `grid.zᵃᵃᶜ` are ranges the reference and step size are `Float64`:. ```julia; julia> r = range(0.0f0, 1.0f0, 16); 0.0f0:0.06666667f0:1.0f0. julia> typeof(r); StepRangeLen{Float32, Float64, Float64, Int64}; ```. You can force it to be `Float32` via:. ```julia; julia> rr = StepRangeLen{Float32, Float32, Float32, Int}(r); 0.0f0:0.06666667f0:1.0f0. julia> typeof(rr); StepRangeLen{Float32, Float32, Float32, Int64}; ```. Doing this in `grid_coordinates.jl` fixes the MWE. Curiously this behavior of `range` is not mentioned in the docs for `range` or `StepRangeLen` but is discussed on the [Julia Discourse](https://discourse.julialang.org/t/the-type-of-a-range-step-defined-as-float32-changes-to-float64/27411). Well looks like it was briefly mentioned in the `StepRangeLen` docstring in 2019. The step size being twice the precision is supposed to help with rounding errors. But maybe on the GPU it can do more harm than good?. I can see how this leads to type promotion to `Float64` but I'm not totally sure how having a `Float64` reference and step size leads to illegal memory accesses. I'm also surprised that this issue never cropped up before. On another note, I wonder if this had any impact on performance. I'm curious to do some benchmarking before and after this change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3870#issuecomment-2445532635:1474,benchmark,benchmarking,1474,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3870#issuecomment-2445532635,1,['benchmark'],['benchmarking']
Testability,"Ok here's something simple:. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); model = NonhydrostaticModel(; grid, advection=WENO()). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Here's what I've done:. * Run this on fresh clone of `main`. This returns. ```julia; julia> include(""../simple_benchmark.jl""); [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; 20.460 s (144483404 allocations: 94.43 GiB); ```. * Restrict compat on KernelAbstractions to 0.7.2 and CUDAKernels to 0.3.3. This returns:. ```julia; julia> include(""../simple_benchmark.jl""); [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; 2.202 s (118604 allocations: 52.20 MiB); ```. I'm running on a single core, Mac M1. Here the performance loss is just 10x so I'll change the somewhat dramatic title of this issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481304842:65,Benchmark,BenchmarkTools,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481304842,1,['Benchmark'],['BenchmarkTools']
Testability,"Ok if its just for a quick test rather than extended work, that makes sense",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3555#issuecomment-2069564427:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3555#issuecomment-2069564427,1,['test'],['test']
Testability,"Ok so I don't think we need `nameof` the way to write this is `string(nameof(typeof(scheme)))`, eg:. ```julia; julia> struct Test{T}; a :: T; end. julia> t = Test(1.1); Test{Float64}(1.1). julia> nameof(typeof(t)); :Test. julia> string(nameof(typeof(t))); ""Test""; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2099#issuecomment-986844488:125,Test,Test,125,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2099#issuecomment-986844488,5,['Test'],['Test']
Testability,"Ok! To summarize, we currently have. https://github.com/CliMA/Oceananigans.jl/blob/b288527ccf34fc17ec4b31a1e9da7bd8b8d25a10/src/Grids/grid_utils.jl#L213. which you propose to change to. ```julia; parent_index_range(index::UnitRange, loc, topo, halo) = 1:(last(index) - first(index) + 1); ```. I definitely agree that the parent index range of a field with indices `4:4` is `1:1` and your code seems correct to me. This is a clear bug --- should we add this to the indices tests? (I'm not sure what the state of the tests is for indices, but this is an obvious gap.). Note that with this change, none of the methods for `parent_index_range` will use the argument `halo`. So that should be removed. (I think `loc` and `topo` are needed to support slicing into ""ensemble grids"" that have a flat direction with more than one grid point... I think.). > since the output writer is trying to view the underlying data at [4:23, 4:23, 4:23]. I think @navidcy discovered a problem with `validate_indices` that may be related. But `restrict_to_interior` may also be broken for sliced fields.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2770#issuecomment-1269256387:472,test,tests,472,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2770#issuecomment-1269256387,4,['test'],['tests']
Testability,"Ok, I can reproduce this. Here's a few observations:. 1. It works when JLD2OutputWriter computes the outputs first.; 2. When NetCDFOutputWriter computes the outputs, the JLD2 output is _also_ wrong. This shows that the output is not being recomputed.; 3. The different between JLD2 and NetCDF is that JLD2 uses a NamedTuple while NetCDF uses Dict. With Dict, the order in which the outputs are computed is not deterministic. Yet that should not matter here, as far as I can tell. So there is a bug somewhere.; 4. I tested changing Dict to OrderedDict and the problem disappears. We can merge this last change. But I'd also like to dig a little further to see if there isn't some more insidious bug, because I don't understand why we _need_ deterministic computation of output. (On the other hand, I think deterministic output computation is a potentially useful feature so it makes sense to support this with NetCDFOutputWriter).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437859485:515,test,tested,515,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437859485,1,['test'],['tested']
Testability,"Ok, I see why this is happening. `conditional_∂z_c` ""throws away"" the immersed boundary when it passes through. ; Since a second derivative is just a first derivative of a first derivative, the immersed condition is tested only on the ""outer"" derivative, which doesn't see the immersed boundary. The inner derivative is then just called on the underlying grid and does not satisfy immersed boundary conditions. This does not happen in the `∇²` operator since the ""inner"" derivative correctly calls the `conditional_∂z_c`, thus being aware of the immersed boundaries. Good catch, I ll solve this issue",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2915#issuecomment-1426334459:216,test,tested,216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2915#issuecomment-1426334459,1,['test'],['tested']
Testability,"Ok, I suggest we merge this if regression tests pass as a sort of ""experimental"" PR. The next PR will be a bit more drastic.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1371#issuecomment-780789191:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1371#issuecomment-780789191,1,['test'],['tests']
Testability,"Ok, I will review! Except, tests are failing? Also should we merge main?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2752#issuecomment-1398858625:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2752#issuecomment-1398858625,1,['test'],['tests']
Testability,"Ok, a bit better now!. The following uses some lower-level Oceananigans functions and `KernelFunctionOperation`. I suspect this is a bit more performant, but I'm not sure. The main reason is that I think our broadcasting machinery has some overhead right now, so writing `field .= op` is not all that cheap (we can fix this, but it might take some work). @iuryt if you have the chance to benchmark different solutions, it'd be interesting to hear what works best!. The main downside of this solution is that we need to understand the staggered grid to implement it. Maybe not too onerous (@simone-silvestri thinks I should give users more credit), but part of me feels like we should be able to auto-magic our way around this. The main barrier to using abstract operations here is figuring out how to implement this function with a `ConditionalOperation` (and also having `<` as a valid `BinaryOperation`, eg figuring out #2169). I also like the following because it's the first known example of `auxiliary_fields` being used. Hooray for that! Also I realized that we can just use a linear stratification which is nice. I made the shear stronger to increase the drama. Working on this helped uncover a few wrinkles in the user API:. * `closure = ScalarDiffusivity(VerticallyImplicitTimeDiscretization(); ν, κ=κᵇ)` doesn't work (#2342); * `HydrostaticFreeSurfaceModel(; velocities=velocities)` doesn't work (#2341). ```julia; using Oceananigans; using Oceananigans.Units; using Oceananigans.Operators; using GLMakie. # A bit of code...; @inline f²(i, j, k, grid, f, args...) = @inbounds f(i, j, k, grid, args...)^2. @inline function Riᶜᶜᶜ(i, j, k, grid, U, b); N² = ℑzᵃᵃᶜ(i, j, k, grid, ∂zᶜᶜᶠ, b); S²u = ℑxzᶜᵃᶜ(i, j, k, grid, f², ∂zᶠᶜᶠ, U.u); S²v = ℑyzᵃᶜᶜ(i, j, k, grid, f², ∂zᶜᶠᶠ, U.v); S² = S²u + S²v; return ifelse(S² == 0, zero(eltype(grid)), N² / S²); end. grid = RectilinearGrid(size=128, z=(-100, 0), halo=3, topology=(Flat, Flat, Bounded)); fake_model = HydrostaticFreeSurfaceModel(; grid, trac",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1066093967:388,benchmark,benchmark,388,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1066093967,1,['benchmark'],['benchmark']
Testability,"Ok, closing in! The last test is without an immersed boundary but with a bathymetry (you need to cap the bathymetry to something like -50m). If this works then we can focus all the attention to the immersed boundary",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-2073077696:25,test,test,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-2073077696,1,['test'],['test']
Testability,"Ok, the above example works by adding `grid` as a property to the output writer, and then passing `grid` explicitly to the initialization. Making this change required a couple minutes. The main technique was to search the file for `model.grid`, and make the necessary changes to use the user-provided grid instead. In this process I noticed that file initialization, which required the grid, has to occur outside the output writer constructor. This implies that that the ""output writer grid"" (which is now different from the model grid) must be stored within the output writer. So I added a `grid` property to the output writer. These changes took about 5 minutes. However, the main work is still there, to document this and add tests and an example needed. If there's any other source code changes needed I'm happy to put those in. The documentation will take more effort.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3576#issuecomment-2093396001:729,test,tests,729,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3576#issuecomment-2093396001,1,['test'],['tests']
Testability,"Ok. So, to do that, I will fork the main repo and do my modifications.; How can I test the forked repo while running julia?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2281#issuecomment-1079154232:82,test,test,82,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2281#issuecomment-1079154232,1,['test'],['test']
Testability,"Okay finally tests passed!. @navidcy I tried restarting the tests over and over (honestly more than 10 times over the past few days) and they always failed. I could only make them pass this morning when I restarted them one at a time. That is, starting one, and only restarting the next failed test when the previous one had fully run. So maybe the variability we see in tests has to do with different processes trying to access the same resources... ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2223676543:13,test,tests,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2223676543,4,['test'],"['test', 'tests']"
Testability,Okay so the segfault was because we were trying to set a field using an `Int128` or `UInt128`. It's not an important test so I removed it but it's a little weird that it just started failing since the test has been in since Oceananigans.jl v0.1.0...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-809391386:117,test,test,117,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-809391386,2,['test'],['test']
Testability,"Okay so there's some bad news: this IBM implementation seems to be pretty slow. . I ran two identical simulations with the same number of points on a GPU, but using a regular grid on one and an immersed boundary grid on the other (with the immersed solid boundaries set to coincide with the domain walls). Apparently for a 16×4×4 grid the IBM version is about 10 times slower than the non IBM one. For a 128×32×32 the factor is of about 8 times , so it doesn't appear to be getting better with increasing grid sizes. The difference seems to be similar (albeit a bit smaller) for CPUs. I'm not sure of what the best way is to speed things up. We could try changing how we implement the if-else clauses (right now we're using nested `ifelse()` functions, which always evaluates all arguments). . Alternatively instead of testing whether or not we're inside or outside the solid (in addition to fluid-solid boundaries) every time we calculate fluxes, we could store the indices that correspond to solid boundaries and solid interior points and IBM launch kernels only on those indices (although I'm not sure how to achieve that for GPUs).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1083958509:819,test,testing,819,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1083958509,1,['test'],['testing']
Testability,"Okay so this MWE reproduces the error:. ```julia; using NCDatasets. a = reshape([1.], 1, 1, 1); b = dropdims(a, dims=(1, 2, 3)). ds = NCDataset(""/tmp/test.nc"",""c""); time = defDim(ds,""time"",Inf); v = defVar(ds,""temp"",Float32,(""time"",)); ds[""temp""][1] = b. close(ds); ```. However, if I create a variable without an unbouded dimension (i.e. without time) and do the same thing, it works properly:. ```julia; using NCDatasets. a = reshape([1.], 1, 1, 1); b = dropdims(a, dims=(1, 2, 3)). ds = NCDataset(""/tmp/test.nc"",""c""); v = defVar(ds,""temp"",Float32,()); ds[""temp""][] = b. close(ds); ```. So I think this is an edge case that NCDatasets doesn't yet handle well. I'm gonna create an issue there and see what they say.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1362066454:150,test,test,150,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1362066454,2,['test'],['test']
Testability,"Okay, I did some tests and I'm just getting more confused. Here's a more minimal example where I'm creating a simulation with zero everywhere except for a uniform initial condition for `u` and I added Coriolis (to have an inertial oscillation):. ```julia; using Oceananigans; using Oceananigans.Utils; using Oceananigans.Units. grid = RegularRectilinearGrid(size=(4, 4, 4), x=(0, 1e6), y=(0, 1e6), z=(-4e3, 0)); coriolis = FPlane(f=1e-4) # [s⁻¹]. model = IncompressibleModel(; architecture = CPU(),; grid = grid,; coriolis = coriolis,; tracers = NamedTuple(),; buoyancy = nothing,; closure = nothing,; ); set!(model, u=0.4). using Oceanostics: SingleLineProgressMessenger; Δt = 20minutes; simulation = Simulation(model, Δt = Δt, iteration_interval = 20,; stop_time = 3days,; progress = SingleLineProgressMessenger()). using Oceananigans.Fields: ComputedField; using Oceanostics: KineticEnergy. u, v, w = model.velocities # unpack velocity `Field`s. # Vertical vorticity [s⁻¹]; tke_k = KineticEnergy(model, u, v, w); tke_c = ComputedField(@at (Center, Center, Center) (u^2+v^2+w^2)/2). outputs = (tke_c=tke_c, u=u,). using Oceananigans.OutputWriters: NetCDFOutputWriter, TimeInterval, AveragedTimeInterval; simulation.output_writers[:snap] = NetCDFOutputWriter(model, outputs,; schedule = TimeInterval(2Δt),; filepath = ""snap.eady.nc"",; mode = ""c""); simulation.output_writers[:avg] = NetCDFOutputWriter(model, outputs,; schedule = AveragedTimeInterval(2Δt; window=1.999Δt, stride=1),; filepath = ""avg.eady.nc"",; mode = ""c""). @info ""Starting run""; run!(simulation); ```. This produces the wrong result for `u`, reproduced below. (Appears to be a cumulative mean.) . ![u_evolution](https://user-images.githubusercontent.com/13205162/124214589-537c9800-daa7-11eb-99cd-ef90fcc5b8cd.png). However, if I swap the line `outputs = (tke_c=tke_c, u=u,)` for ; ```julia; outputs = (tke_k=tke_k, u=u,); ```; (so basically I'm just changing the **TKE** calculation from being done with a `ComputedField` to being do",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872684633:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872684633,2,['test'],['tests']
Testability,"Okay, I took a second look at the other validation tests and I do think they should be kept. Sure, they're not super thorough, but I think they add to the docs. It's especially nice to see animations of the lid-cavity flow. So my vote goes to keeping them.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872276522:51,test,tests,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872276522,1,['test'],['tests']
Testability,"Okay, after some looking around I found a minimal working example. The tests don't catch this because they don't test everything in `Float32`. . Can someone else verify that this produce the same error I posted above?. ```; using Oceananigans. N = 32. grid = RegularRectilinearGrid(Float32, size=(N, N, N), extent=(1, 1, 1)); model = IncompressibleModel(architecture=GPU(), float_type=Float32, advection=WENO5(), grid=grid); time_step!(model, 1); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869881176:71,test,tests,71,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869881176,2,['test'],"['test', 'tests']"
Testability,"Okay, apologies. I just didn't quite understand what you meant when you said they _seem_ identical. Typically we would just write something like `T1 == T2`, which will return `true` or `false`, or equivalently something like `all(T1 .== T2)`. Another test is to use `isapprox` (also written `≈`) as in `all(T1 .≈ T2)`. Here's a bit more background on the reproducibility tests we currently have:. We have [""regression tests""](https://github.com/CliMA/Oceananigans.jl/tree/main/test/regression_tests) that test to ensure that output from a certain simulation remains identical across PRs, including tests that involve LES closures. These tests involve ~10 time steps. We conclude that results are ""identical"" when every grid point is within `sqrt(eps(T))`, where `T` is the floating point type (eg `Float64` or `Float32`), for example:. https://github.com/CliMA/Oceananigans.jl/blob/fc84215f76661e9f1cfb103dc18f86442cec9d89/test/regression_tests/hydrostatic_free_turbulence_regression_test.jl#L112. Many of our other tests also implicitly rely on reproducibility. I think, therefore, that we do have reproduciblity in many cases. However, it is quite possible that your case exposes some particular feature that leads to a loss of reprodicibility. I think perhaps the next step in order to make progress is to code up a ""minimal working example"" (often called an MWE), which involves relentlessly simplifying the examle until we isolate the essential complication that leads to a failure of the test. With that knowledge in hand, we can dig deeper to find the underlying cause (and hopefully fix it). Often, the process of simplying a script in order to isolate the MWE also produces some insight about the issue (and potentially about the test).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1273675416:251,test,test,251,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1273675416,22,['test'],"['test', 'tests']"
Testability,"Okay, here's my MWE which includes running the first simulation to generate the checkpoint file:. ```julia; using Oceananigans; using Printf. """""" Set up a simple simulation to test picking up from a checkpoint. """"""; function test_simulation(stop_time, Δt, δt); grid = RectilinearGrid(size=(), topology=(Flat, Flat, Flat)); model = NonhydrostaticModel(; grid); simulation = Simulation(model; Δt, stop_time). progress_message(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress_message, TimeInterval(δt)). checkpointer = Checkpointer(model,; schedule = TimeInterval(stop_time),; prefix = ""test"",; cleanup = false). simulation.output_writers[:checkpointer] = checkpointer. return simulation; end. rm(""test_iteration*.jld2"", force=true). Δt = 1 # timestep (s); T1 = 4 # first simulation stop time (s); T2 = 2T1 # second simulation stop time (s); δt = 2 # progress message frequency. # Run a simulation that saves data to a checkpoint; simulation = test_simulation(T1, Δt, δt); run!(simulation). # Now try again, but picking up from the previous checkpoint; N = iteration(simulation); checkpoint = ""test_iteration$N.jld2""; simulation = test_simulation(T2, Δt, δt); run!(simulation, pickup=checkpoint); ```. This reproduces the issue because I get. ```julia; julia> include(""test.jl""); [ Info: Initializing simulation...; [ Info: Iter: 0, time: 0 seconds; [ Info: ... simulation initialization complete (2.697 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (5.721 seconds).; [ Info: Iter: 2, time: 2 seconds; [ Info: Simulation is stopping after running for 8.786 seconds.; [ Info: Simulation time 4 seconds equals or exceeds stop time 4 seconds.; [ Info: Iter: 4, time: 4 seconds; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (529.973 μs); [ Info: Executing initial time step...; [ Info: ... initial time step complete (575.447 μs).; [ Info: Iter: 5,",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3657#issuecomment-2246064310:176,test,test,176,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3657#issuecomment-2246064310,4,['test'],['test']
Testability,"Okay, it looks like we want to test `set!(model, ...)` so we need a model! . The tests are failing? Which maybe means they are working. https://buildkite.com/clima/oceananigans/builds/15738#018f734d-a866-49c7-9114-390d6932cb34/18-355",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2108767038:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2108767038,2,['test'],"['test', 'tests']"
Testability,"Okay, so in summary:. * *Correct*: time-averaging a TKE `ComputedField`; * *Wrong*: time-averaging a TKE `KernelComputedField`; * *Wrong*: time-averaging a dissipation `ComputedField`; * *Wrong*: time-averaging a dissipation `KernelComputedField`. I think probably the next step is to design a quantitative test that currently fails but should pass when this bug is fixed. Designing a minimal test might also help us isolate the issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-810496153:307,test,test,307,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-810496153,2,['test'],['test']
Testability,On Satori using stupidly large meshes gives 85% - 89% efficiency going from 1 to 2 GPU for the `multi_region_turbulence.jl` benchmark (Note `1440×600×48` is the size of the 1/4 degree simulation); Unfortunately the efficiency decreases on a larger number of GPUs... we definitely have to fix the scaling. #### Strong Scaling; | Grid size | Grid | GPUs | wall time | efficiency |; | -- | -- | -- | -- | -- |; | `1024×1024×100`| `RectilinearGrid` | 1 | 3.4 minutes | 100% |; | `1024×1024×100`| `MultiRegionGrid` | 2 | 1.9 minutes | 89.5% | ; | `1440×600×48`| `RectilinearGrid` | 1 | 1.4 minutes | 100% |; | `1440×600×48`| `MultiRegionGrid` | 2 | 49.2 seconds | 85.4% |; | `1440×600×48`| `MultiRegionGrid` | 3 | 38.8 seconds | 72.2% |. Going to smaller meshes than these hampers the efficiency incredibly. I think there might be a lot of low hanging fruits to optimize multi GPU,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116489219:124,benchmark,benchmark,124,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116489219,1,['benchmark'],['benchmark']
Testability,"On a related note, I think I was able to get multiple forcings to work on the GPU with 5+ forcings by using `@generated` to generate functions for the GPU to staticly dispatch on. Needs to be tested though. . ```diff; diff --git a/src/Forcings/multiple_forcings.jl b/src/Forcings/multiple_forcings.jl; index 30123ec36..178731937 100644; --- a/src/Forcings/multiple_forcings.jl; +++ b/src/Forcings/multiple_forcings.jl; @@ -41,18 +41,14 @@ end; ; -# The magic (which doesn't seem to work on GPU now); -@inline function (mf::MultipleForcings{N})(i, j, k, grid, clock, model_fields) where N; - total_forcing = zero(grid); - forcings = mf.forcings; - ntuple(Val(N)) do n; +@generated function (mf::MultipleForcings{N})(i, j, k, grid, clock, model_fields) where N; + quote; + total_forcing = zero(grid); + forcings = mf.forcings; Base.@_inline_meta; - @inbounds begin; - nth_forcing = forcings[n]; - total_forcing += nth_forcing(i, j, k, grid, clock, model_fields); - end; + $([:(@inbounds total_forcing += forcings[$n](i, j, k, grid, clock, model_fields)) for n in 1:N]...); + return total_forcing; end; - return total_forcing; end; ```. ---. MWE:. ```julia; using Oceananigans. grid = LatitudeLongitudeGrid(GPU(), size=(10, 10, 10), longitude=(0, 1), latitude=(0, 1), z=(-1, 0)). weird_forcing(λ, φ, z, t) = λ * φ + z; wonky_forcing(λ, φ, z, t) = z / (λ - φ); strange_forcing(λ, φ, z, t) = z - t; bizarre_forcing(λ, φ, z, t) = φ + λ; peculiar_forcing(λ, φ, z, t) = 2t / z. forcing1 = Forcing(weird_forcing); forcing2 = Forcing(wonky_forcing); forcing3 = Forcing(strange_forcing); forcing4 = Forcing(bizarre_forcing); forcing5 = Forcing(peculiar_forcing). forcing = (; u=(forcing1, forcing2, forcing3, forcing4, forcing5)). model = HydrostaticFreeSurfaceModel(; grid, forcing). time_step!(model, 1); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3736#issuecomment-2312673635:192,test,tested,192,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3736#issuecomment-2312673635,1,['test'],['tested']
Testability,"On the CPU it seems like things are failing with `FATAL ERROR: Symbol ""__nv_llabs""not found`. I should be able to reduce it down to a minimal working example (guessing it's a CUDA.jl issue). GPU tests don't want to run (CUDA driver might be too old on Sverdrup?) but GPU regression tests passed on Tartarus so things might be fine there.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-832178508:195,test,tests,195,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-832178508,2,['test'],['tests']
Testability,One question: Should we modify the tests so that they would be able to catch the bug? Or is that too much?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1541#issuecomment-813710848:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1541#issuecomment-813710848,1,['test'],['tests']
Testability,"One way to come up with a test is to ""propose"" an incompressible solution, diagnose the advection term associated with this solution, and then add that term as a forcing function to the RHS to generate a stationary problem. The resulting problem could have zero pressure gradient by construction --- I think. This is the strategy used in. https://github.com/CliMA/Oceananigans.jl/blob/main/validation/convergence_tests/src/ForcedFlowFreeSlip.jl. (free-slip) and. https://github.com/CliMA/Oceananigans.jl/blob/main/validation/convergence_tests/src/ForcedFlowFixedSlip.jl. (fixed-slip).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172731076:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172731076,1,['test'],['test']
Testability,"Oof, good catch. Thanks for adding the test. As a temporary fix, we could add a special constructor for `ImmersedBoundaryGrid` (ie use dispatch rather than the if-statement). . I suspect re-ordering the imports will be a larger piece of work that will probably require some work from @simone-silvestri . Technical debt is entrenched.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3830#issuecomment-2398232606:39,test,test,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3830#issuecomment-2398232606,1,['test'],['test']
Testability,Opened a PR with a test: https://github.com/CliMA/Oceananigans.jl/pull/1947,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1942#issuecomment-902684253:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1942#issuecomment-902684253,1,['test'],['test']
Testability,Or just move the vertically stretched tests to a different file... ?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2183#issuecomment-1021711000:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2183#issuecomment-1021711000,1,['test'],['tests']
Testability,Or perhaps when tests pass? Let me know if you need help with that.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1022682513:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1022682513,1,['test'],['tests']
Testability,"Our earlier [tests](https://github.com/liuchihl/Oceananigans.jl/pull/1#issuecomment-2295354459) with a simple sine function indicate that when the checkpoint interval is an integer multiple of the `AveragedTimeInterval`, the results after the checkpoint seem reasonable. However, I’ve noticed this isn't the case with the following parameter settings, for instance:. ```julia; Δt = .01 # timestep; T1 = 6Δt # first simulation stop time; T2 = 2T1 # second simulation stop time; window_nΔt = 2 # window interval: 2Δt; interval_nΔt = 2 # time average saving interval: 2Δt; stride = 1; ```; The averaged values are clearly off after the checkpoint (t>6Δt):; <img width=""587"" alt=""image"" src=""https://github.com/user-attachments/assets/24c0238d-3723-435d-bca2-4b4a2be83e71"">. This issue does not only occur in the existing MWE (decaying function); it also occurs in our [MWE](https://github.com/liuchihl/Oceananigans.jl/pull/1#issuecomment-2295343588) using the exact same parameters mentioned above. The dashed curve and steps indicate `TimeInterval` and `AveragedTimeInterval` outputs, respectively, shown in the figure below. It is unclear to me as to why spurious zero appears in this case.; <img width=""892"" alt=""image"" src=""https://github.com/user-attachments/assets/5e78add8-7b29-45f3-8123-156cf6ae38d3"">. The point of these tests is to show that even when the checkpoint interval is an integer multiple of the `AveragedTimeInterval`, issues can still arise. . Here is the MWE with the decaying function for reference: ; ```julia; using Oceananigans; using Plots; using NCDatasets; using Test; if isfile(""single_decay_windowed_time_average_test.nc""); rm(""single_decay_windowed_time_average_test.nc""); end; run(`sh -c ""rm test_iteration*.jld2""`). function test_simulation(stop_time, Δt, window_nΔt, interval_nΔt, stride, overwrite). arch = CPU(); topo = (Periodic, Periodic, Periodic); domain = (x=(0, 1), y=(0, 1), z=(0, 1)); grid = RectilinearGrid(arch, topology=topo, size=(4, 4, 4); domain...). λ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2380652629:13,test,tests,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2380652629,2,['test'],['tests']
Testability,"Out of curiosity, when we create a PR, is it possible to find out how long the tests take compared to before? It seems like it might be useful when making a change like this, as well as pretty much anything else.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1825#issuecomment-877159681:79,test,tests,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1825#issuecomment-877159681,1,['test'],['tests']
Testability,"Out of curiousity, how much work is it to implement RK3 for `HydrostaticFreeSurfaceModel`?. Seems like fixing AB2 for variable time steps isn't too difficult if it's just changing how $G^{n+1}$ is computed though. > Why don't we answer this once and for all, there are not two answers to this question. I thought this was answered quite clearly, albeit for a very idealized case, here: https://github.com/CliMA/Oceananigans.jl/pull/945#issuecomment-692706814 Is AB2 still technically only first-order accurate?. I know it's quite difficult to extrapolate from the convergence test to global simulations, but my experience has been that RK3 beats out AB2 for non-hydrostatic simulations. That said, it's probably still good to have AB2 especially if it can support variable time steps.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3738#issuecomment-2418029947:576,test,test,576,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3738#issuecomment-2418029947,2,['test'],['test']
Testability,PS @christophernhill: Buildkite tests did not run on this PR since we disable Buildkite on PRs from forks (to avoid random PRs executing potentially malicious code on Tartarus and Sverdrup). So we usually open and merge branches from the repo itself.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1333#issuecomment-772496240:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1333#issuecomment-772496240,1,['test'],['tests']
Testability,PS there's a test now,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3225#issuecomment-1689951611:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3225#issuecomment-1689951611,1,['test'],['test']
Testability,PS: @francispoulin I think it's okay to keep the two test scripts as long as they're not part of `runtests.jl`. . Might be especially helpful at this early development stage so other developers/users can easily run the same scripts/tests that you're using to test the shallow water model. Then once the shallow water model is a bit more mature they could be turned into nice examples!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-740072504:53,test,test,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-740072504,3,['test'],"['test', 'tests']"
Testability,Perfect! Looks like you caught some tests that use `ShallowWaterModel` with non-flat topologies!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842594707:36,test,tests,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842594707,1,['test'],['tests']
Testability,"Perhaps I can chime in here to give some context. Something in the Oceananigans/KA/Enzyme/etc setup was breaking our integration test of the advection-diffusion (https://github.com/CliMA/Oceananigans.jl/pull/3480) which was blocking us for making progress for some time. Eventually Joe successfully minimized it down to this point as a minimal error (effectively just testing successful AD of Oceanigans.Utils.launch!, which was failing). We later determined the root cause of the issue to be a problem in KA (https://github.com/JuliaGPU/KernelAbstractions.jl/pull/476). The purpose of this is not to specifically act as a unit test for the individual KA issue, but to be a small unit test for Oceananigans modified launching infrastructure. That way if something else comes up as a bug in a future integration test, we can quickly find the root cause without weeks of debugging from the whole integration test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2106054020:129,test,test,129,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2106054020,6,['test'],"['test', 'testing']"
Testability,"Perhaps we could put log this info at the `@debug` level?. We've also discussed logging initialization at @info (so that everyone sees it). I think logging individual tendency kernel timings might be hard because they are completed asychronously, but we can log how long it takes to compute _all_ the tendencies.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-881661216:21,log,log,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-881661216,4,['log'],"['log', 'logging']"
Testability,"Perhaps we don't have this, but can we rotate a `LatitudeLongitudeGrid` by a certain angle, and then test that the vectors are rotated exactly by that angle? This would provide a simple deterministic test. This could work for a very small grid on the equator, for example...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3744#issuecomment-2315768430:101,test,test,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3744#issuecomment-2315768430,4,['test'],['test']
Testability,"Perhaps we should split the regression tests? A natural split can be done for each grid type, e.g., see:; https://github.com/CliMA/Oceananigans.jl/blob/59a8a81f8ff1a0835f9d549428d61d7295c6c5f6/test/test_regression.jl#L73",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2140#issuecomment-1006168639:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2140#issuecomment-1006168639,2,['test'],"['test', 'tests']"
Testability,"Personally I don't see a problem with warnings in the docstrings if that's how the code behaves. > Strikes me that we could also change the log level so that warnings are not emitted. I'm not sure what the expected result of this is. But if this will create a situation where a given docstring won't have warnings, while users copy-pasting the contents from that same docstring may get a warning, then I think it'll be confusing and we should probably avoid that solution. If not, then that sounds like a great solution :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3705#issuecomment-2287861310:140,log,log,140,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3705#issuecomment-2287861310,1,['log'],['log']
Testability,"Playing around with an internal wave test case I think we actually need todo something more like the adaptive boundary described in section 4.1 of this paper https://doi.org/10.1016/S1463-5003(00)00013-5 as I have come across two problems: when the flow is directed out of the domain on a prescribed interface (e.g. u = cos(pi/h(z+h)) then information can't get out, and on the ""Orlanski"" side where information is travelling into the domain I am getting instability as it is just keeping the boundary value constant which by default is zero. This might present some more user interface issues as it is going to require us to set a ""known"" value on every open boundary unless we're confident that the flow will only be leaving.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1971287155:37,test,test,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1971287155,1,['test'],['test']
Testability,Please could someone re-run the GPU tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1582658520:36,test,tests,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1582658520,1,['test'],['tests']
Testability,Please could someone rerun the failed tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3722#issuecomment-2304642115:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3722#issuecomment-2304642115,1,['test'],['tests']
Testability,"Please could someone rerun the failed tests, I don't think they've actually failed from what I can tell from the error messages",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2019249485:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2019249485,1,['test'],['tests']
Testability,Please could someone try rerunning the failed test since it shouldn't have changed?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1578487553:46,test,test,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1578487553,1,['test'],['test']
Testability,"Possibly, we should start using a merge queue that would disallow PRs from being merged unless tests pass.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1867019151:95,test,tests,95,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1867019151,1,['test'],['tests']
Testability,Pretty sure we do test closure tuples,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2047#issuecomment-1479901754:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2047#issuecomment-1479901754,1,['test'],['test']
Testability,"Previously the functions `viscous_flux_u*` and `diffusive_flux_*` dispatched on `AbstractPrimaryGrid`. `AbstractPrimaryGrid` (now called `AbstractUnderlyingGrid` is an abstract type for distinguishing between `ImmersedBoundaryGrid` and the ""primitive"" / ""primary"" / ""underlying"" counterparts (I guess I'm still not sure what the best name is). As a result, flux calculations with `ImmersedBoundaryGrid` were hitting fallback flux functions that returned 0. This PR removes most instances dispatching on `grid` (except where necessary, where the dispatched type was changed from `AbstractPrimaryGrid` to `AbstractGrid`). It also nukes the fallbacks (which were the reason this issue escaped detection originally). The original motivation for dispatching on `AbstractPrimaryGrid` is not only wrong but also appears to be unnecessary, since the tests on this PR pass. For some reason `TwoDimensionalLeith` was also having trouble compiling on the GPU, so we're skipping those tests for now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1835#issuecomment-877174564:842,test,tests,842,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1835#issuecomment-877174564,2,['test'],['tests']
Testability,Probably here https://github.com/JuliaGPU/CUDA.jl/blob/71e9760f02bc6e1bc76aaaf32e98be10a41bae6b/src/device/intrinsics/math.jl#L56. I would start with writing a test here for sind/cosd https://github.com/JuliaGPU/CUDA.jl/blob/71e9760f02bc6e1bc76aaaf32e98be10a41bae6b/test/device/intrinsics/math.jl#L97,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2371#issuecomment-1073377398:160,test,test,160,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2371#issuecomment-1073377398,2,['test'],['test']
Testability,Probably https://github.com/CliMA/Oceananigans.jl/blob/master/test/test_turbulence_closures.jl,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883847271:62,test,test,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883847271,1,['test'],['test']
Testability,Probably in a next PR we will want a bit more tests for Particle tracking on Immersed Boundary grids,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2687#issuecomment-1198673154:46,test,tests,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2687#issuecomment-1198673154,1,['test'],['tests']
Testability,Probably makes sense to add a test to make sure this doesn't get reverted in the future too,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3142#issuecomment-1588250343:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3142#issuecomment-1588250343,1,['test'],['test']
Testability,Probably should do a quick benchmark before merging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1065515401:27,benchmark,benchmark,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1065515401,1,['benchmark'],['benchmark']
Testability,"Probably the quickest way to start is simply to add the ""holes"" manually after calling `compute!`. The reason this test is failing is not because `compute!` doesn't work, right? Getting `compute!` to work is just visualization.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3306#issuecomment-1758655160:115,test,test,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3306#issuecomment-1758655160,2,['test'],['test']
Testability,"Problem solved! @ali-ramadhan figured out that if we instead use the following then julia figures out how to dispatch correctly. ```; @inline Δx(i, j, k, grid::RegularRectilinearGrid{FT, Flat}) where FT = one(FT); @inline Δy(i, j, k, grid::RegularRectilinearGrid{FT, TX, Flat}) where {FT, TX} = one(FT); @inline ΔzC(i, j, k, grid::RegularRectilinearGrid{FT, TX, TY, Flat}) where {FT, TX, TY} = one(FT); @inline ΔzF(i, j, k, grid::RegularRectilinearGrid{FT, TX, TY, Flat}) where {FT, TX, TY} = one(FT); ```. I will do some tests, cleaning up and then push a PR to move the disucssion there.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1499#issuecomment-805124968:522,test,tests,522,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1499#issuecomment-805124968,1,['test'],['tests']
Testability,"Quickly benchmarked stepping the simulation and as setup in `test/test_biogeochemistry_npzd.jl` (just realized this is incorrectly named) got:; ```; BenchmarkTools.Trial: 3359 samples with 1 evaluation.; Range (min … max): 1.162 ms … 11.420 ms ┊ GC (min … max): 0.00% … 62.52%; Time (median): 1.324 ms ┊ GC (median): 0.00%; Time (mean ± σ): 1.479 ms ± 842.222 μs ┊ GC (mean ± σ): 5.25% ± 7.80%. ▇█▆▄▃▂▂▁ ▁; ████████▇▆▆▅▄▁▃▁▁▃▃▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄▆▆ █; 1.16 ms Histogram: log(frequency) by time 7.82 ms <. Memory estimate: 1.52 MiB, allocs estimate: 2522. ```; And in `test/test_biogeochemistry_tracer_based.jl`got:; ```; BenchmarkTools.Trial: 978 samples with 1 evaluation.; Range (min … max): 2.071 ms … 77.292 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 3.359 ms ┊ GC (median): 0.00%; Time (mean ± σ): 5.091 ms ± 4.405 ms ┊ GC (mean ± σ): 5.49% ± 10.75%. ▄▂▃▃█▃ ; ███████▄▃▂▂▂▂▁▁▁▂▂▂▂▂▂▂▁▁▁▂▂▃▄▅▄▅▃▃▃▃▃▃▂▂▂▂▂▁▂▂▂▁▁▁▁▁▁▁▁▁▂ ▃; 2.07 ms Histogram: frequency by time 18.3 ms <. Memory estimate: 3.84 MiB, allocs estimate: 6731.; ```; So there seems to be a lot of room for optimization in how I've written `TracerBasedBiogeochemistry`. The difference when I just benchmarked `time_step!` was slightly less but still ∼2x slower. (Time to increment stop_iteration by 1 and run! after doing that for an initial step)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286:8,benchmark,benchmarked,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286,7,"['Benchmark', 'benchmark', 'log', 'test']","['BenchmarkTools', 'benchmarked', 'log', 'test']"
Testability,"Quite concerning that some of the convergence tests do not pass on the GPU... This is probably due to #1170 since the simpler convergence tests that do not rely on a pressure solver seem to pass (also the fact that it passes forced flow free slip with doubly periodic (x, z) but not with a wall-bounded dimension (x, y)). Hmmm, but the Taylor-Green one is doubly periodic... ![image](https://user-images.githubusercontent.com/20099589/100450333-76634b80-3083-11eb-92ea-0d645f564aab.png). ![image](https://user-images.githubusercontent.com/20099589/100450382-8c710c00-3083-11eb-801e-1ed16e5b22a9.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1223#issuecomment-734821927:46,test,tests,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1223#issuecomment-734821927,2,['test'],['tests']
Testability,"RAND: 10.1.2; - CUFFT: 10.1.2; - CUSOLVER: 10.3.0; - CUSPARSE: 10.3.1; - CUPTI: 12.0.0; - NVML: 10.0.0+440.64.0; - CUDNN: missing; - CUTENSOR: missing. Toolchain:; - Julia: 1.6.2; - LLVM: 11.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5; - Device capability support: sm_30, sm_32, sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75. 2 devices:; 0: Tesla V100-SXM2-32GB (sm_70, 4.367 GiB / 31.749 GiB available); 1: Tesla V100-SXM2-32GB (sm_70, 4.805 GiB / 31.749 GiB available); nothing. [2021/08/05 12:11:43.425] INFO Setting up benchmark: (GPU, Float64, 128)...; [2021/08/05 12:12:45.688] INFO warming up; [2021/08/05 12:15:06.837] INFO Simulation is stopping. Model iteration 1 has hit or exceeded simulation stop iteration 1.; [2021/08/05 12:15:07.841] INFO Simulation is stopping. Model iteration 11 has hit or exceeded simulation stop iteration 11.; [2021/08/05 12:15:10.060] INFO done profiling (GPU, Float64, 128); ==45925== Profiling application: /nobackup/users/henryguo/projects/henry-test/julia-1.6.2/bin/julia --project nonhydrostatic_profiler.jl; ==45925== Profiling result:; Type Time(%) Time Calls Avg Min Max Name; GPU activities: 20.46% 17.966ms 10 1.7966ms 1.7946ms 1.7987ms _Z23julia_gpu_calculate_Gv_7ContextI14__CUDACtx_Namevv14__PassType_257v12DisableHooksE18_gpu_calculate_Gv_16CompilerMetadataI10StaticSizeI15_128__128__128_E12DynamicCheckvv7NDRangeILi3ES5_I11_8__8__128_ES5_I11_16__16__1_EvvEE11OffsetArrayI7Float64Li3E13CuDeviceArrayIS9_Li3ELi1EEE22RegularRectilinearGridIS9_8PeriodicS12_7BoundedS8_IS9_Li1E12StepRangeLenIS9_14TwicePrecisionIS9_ES15_IS9_EEEE5WENO5vv20IsotropicDiffusivityI26ExplicitTimeDiscretizationS9_10NamedTupleI5__b__5TupleIS9_EEE8BuoyancyI14BuoyancyTracer10ZDirectionES19_I23__velocities___tracers_S20_IS19_I12__u___v___w_S20_I9ZeroFieldS24_S24_EES19_I5__b__S20_IS24_EEEES19_I12__u___v___w_S20_IS8_IS9_Li3ES10_IS9_Li3ELi1EEES8_IS9_Li3ES10_IS9_Li3ELi1EEES8_IS9_Li3ES10_IS9_Li3ELi1EEEEES19_I5__b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-893914746:1768,test,test,1768,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-893914746,1,['test'],['test']
Testability,"Ran `benchmark_shallow_water_model.jl` again with the fixes introduced in #1770. The CPU to GPU speedup is now at around 400 times as @francispoulin expected. However, it should be noted that though there is a notable increase in speedup, it is actually caused by the cases using CPU architecture taking more time. Similarly, the cases with GPU architecture take more time as well, but not at as large a percentage as the additional time incurred by the CPU architecture cases. . Please see https://github.com/CliMA/Oceananigans.jl/issues/1722#issue-905780649 for benchmark results without WENO5. ```; Oceananigans v0.58.1; Julia Version 1.6.0; Commit f9720dc2eb (2021-03-24 12:55 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4216 CPU @ 2.10GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; EBVERSIONJULIA = 1.6.0; JULIA_DEPOT_PATH = :; EBROOTJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0; EBDEVELJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0/easybuild/avx2-Core-julia-1.6.0-easybuild-devel; JULIA_LOAD_PATH = :; GPU: Tesla V100-SXM2-32GB. Shallow water model benchmarks; ┌───────────────┬─────────────┬───────┬────────────┬────────────┬────────────┬────────────┬───────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼───────┼────────────┼────────────┼────────────┼────────────┼───────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 2.677 ms │ 2.876 ms │ 3.047 ms │ 4.806 ms │ 1.36 MiB │ 2253 │ 10 │; │ CPU │ Float64 │ 64 │ 5.795 ms │ 5.890 ms │ 6.073 ms │ 7.770 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 128 │ 16.979 ms │ 17.350 ms │ 17.578 ms │ 19.993 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 256 │ 62.543 ms │ 63.222 ms │ 63.544 ms │ 67.347 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 512 │ 250.149 ms │ 251.023 ms │ 251",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-868941194:564,benchmark,benchmark,564,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-868941194,1,['benchmark'],['benchmark']
Testability,"Re-posting from #3026... that PR solved performance problems with `NonhydrostaticModel`, but `HydrostaticFreeSurfaceModel` is still 2x slower roughly than when using KA 0.7.2. Here's a simple benchmark:. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1), topology=(Periodic, Periodic, Bounded)); model = HydrostaticFreeSurfaceModel(; grid, momentum_advection=WENO(), tracer_advection=WENO()); ϵ(x, y, z) = 2rand() - 1; set!(model, u=ϵ, v=ϵ). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Results. ```; 10.220 s (85845109 allocations: 37.94 GiB) # main; 6.284 s (66184308 allocations: 16.31 GiB) # main with KA downgraded to 0.7.2; ```. cc @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198037:192,benchmark,benchmark,192,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198037,3,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark']"
Testability,"Ready to be reviewed. I could not make the oceanic les regression test work for the moment, but we still have to build a bit on this PR so this is a good starting point to not blow up this PR too much. Next steps should be; - include an example (to be ran on the distributed pipeline); - include a tridiagonal solve; - relax the constraints on the divisibility of the grid size by the ranks, this will require a bit of experimenting but it can be easily done by modifying the buffers in `TransposableField` to be of variable size",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-2183310740:66,test,test,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-2183310740,1,['test'],['test']
Testability,"Regarding the comment [here](https://github.com/CliMA/Oceananigans.jl/issues/2018#issuecomment-945826936). > I think there are probably a few other things to fix here, because we can't ""restore"" a grid with a GPU architecture.; >; > Fixing this fully really requires finishing #1998 first, and overhauling the checkpointing infrastructure to match so that the checkpointer is ""architecture aware"". We should also add tests for checkpointing with other grid types. I'm not sure what you mean by ""restoring"" a grid with GPU architecture. This last commit was enough for me to pickup my GPU-architecture simulation with a VerticallyStretchedGrid. For example, the following mwe works in this PR:. ```julia; using Oceananigans; using CUDA. grid1 = VerticallyStretchedRectilinearGrid(size=(2, 2, 2),; architecture=GPU(),; x=(0, 1), y=(0, 1), z_faces=k -> k,; halo=(3,3,3),; ). grid2 = VerticallyStretchedRectilinearGrid(size=(2, 2, 2),; architecture=GPU(),; x=(0, 1), y=(0, 1), z_faces=k -> k,; halo=(3,3,3),; ). if CUDA.@allowscalar grid1!=grid2; throw(error); end. model = NonhydrostaticModel(grid=grid1,; architecture=GPU(),; ). progress(sim) = @info ""Iteration: $(sim.model.clock.iteration), time: $(round(Int, sim.model.clock.time))""; simulation = Simulation(model, Δt=1, stop_time=10, progress=progress); simulation.output_writers[:chk_writer] = Checkpointer(model;; dir=""."",; prefix = ""mwe"",; schedule = TimeInterval(2),; force = false,; cleanup = true,; ). run!(simulation). simulation.stop_time = 20. run!(simulation, pickup=true); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945886370:417,test,tests,417,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945886370,1,['test'],['tests']
Testability,"Removed the ""fluid at rest"" test that was failing and included another (simpler) one for tilted buoyancy along with constructors. The new test checks that `x_dot_g_b`, etc., match for two different domains: one with z-aligned gravity and another with y-aligned gravity. . The only downside is that I only included the `x_dot_g_b` test for `model=BuoyancyTracer()`. Another separate test is needed for `model=SeawaterBuoyancy()` if we think that's necessary. (Constructors are tested for both models, though.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-913791965:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-913791965,10,['test'],"['test', 'tested']"
Testability,Reopening this until we add a test or a regression.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2708#issuecomment-1225176695:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2708#issuecomment-1225176695,1,['test'],['test']
Testability,Restarting the tests since we were having problems with the servers these past couple of days.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-867676446:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-867676446,1,['test'],['tests']
Testability,"Right! The CPU -> GPU speed up has limited value, because the CPU is not a good reference / is not optimized. More useful would be a comparison with other models, somehow, but this is always challenging, especially for complicated models. Another useful piece of information would compare performance for difference GPUs. This blog post (which advertises the advantages of liquid cooled GPUs) is relevant and includes some Oceananigans benchmarks:. https://www.markiiisys.com/blog/liquid-cooled-workstation-advantageous-for-big-ocean-simulations-exceptional-for-small-tasks-oregon-state-mark-iii-nvidia-supermicro/",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3684#issuecomment-2272422585:436,benchmark,benchmarks,436,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3684#issuecomment-2272422585,1,['benchmark'],['benchmarks']
Testability,"Right, #1786 doesn't resolve this issue. Rather, it ensures that the tests in #1782 fail, so that we can fix the issue on #1782 .",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-870695452:69,test,tests,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-870695452,1,['test'],['tests']
Testability,"Right, I think the problem is the availability of AMD GPUs to run tests. If we find one, I can revamp this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328512985:66,test,tests,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328512985,1,['test'],['tests']
Testability,"Right, there are no tests (or examples, or docs) on using `Field` (rather than `Array`) as a boundary condition... How about an issue to change the docs and add a test in a future PR?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3287#issuecomment-1737807119:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3287#issuecomment-1737807119,2,['test'],"['test', 'tests']"
Testability,"Right, there are some caveats on how you interpret those times. They aren't a benchmark.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1825#issuecomment-877438005:78,benchmark,benchmark,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1825#issuecomment-877438005,1,['benchmark'],['benchmark']
Testability,"Rigid lid is actually just a short step from having an implicit free surface (and looks like we are about to have a direct solver for simple domains ala #1869...) --- the math is identical for the implicit solve, with a few terms zero'd out (eg, take the limit of an infinitely long time step). This implies too that models with an implicit free surface that take very long time steps compared to the gravity wave time-scale (most large scale models...) are effectively quite close mathematically to the rigid lid case (notwithstanding effects of runoff, precipitation, and evaporation). It seems an _explicit_ rigid lid formulation is not very practically useful, mostly because iterative solves take longer so rigid lid models in complex domains where there's no direct solve end up being slower. I'm not sure if there are any advantages re: tracer conservation. The story might get more interesting with generalized vertical coordinates, too. If anyone is keen to run problems with rigid lids, we can implement it and test it without too much trouble. MITgcm docs explain this well: https://mitgcm.readthedocs.io/en/latest/algorithm/algorithm.html#implicit-time-stepping-backward-method",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1620#issuecomment-882560379:1021,test,test,1021,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1620#issuecomment-882560379,2,['test'],['test']
Testability,Same here... Examples are fine after reverting in PR #1248 but I also noticed that shallow water tests are passing in that PR but failing on master so that's pretty weird. I'm pretty confused as well.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1247#issuecomment-739324370:97,test,tests,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1247#issuecomment-739324370,1,['test'],['tests']
Testability,Same issue with test not passing. Not sure what happened. Unable to look into it before Jan 3rd.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1002437838:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1002437838,1,['test'],['test']
Testability,"Same tests performed on an **Immersed** grid with a random bathymetry (i.e. roughly 50% of the cells are immersed); on main:. ```julia ; julia> using NESAPOceananigans; julia> set_problem_size!(500, 500, 50). julia> trial1 = run_model_benchmark!(momentum_kernel_test, GPU();; use_benchmarktools = true,; bathymetry = random_bathymetry()); BenchmarkTools.Trial: 5 samples with 1 evaluation.; Range (min … max): 20.150 ms … 21.143 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 20.174 ms ┊ GC (median): 0.00%; Time (mean ± σ): 20.384 ms ± 428.856 μs ┊ GC (mean ± σ): 0.00% ± 0.00%. █▁ ▁ ▁; ██▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▁; 20.1 ms Histogram: frequency by time 21.1 ms <. Memory estimate: 482.09 KiB, allocs estimate: 407. julia> trial1 = run_model_benchmark!(tracer_kernel_test, GPU();; use_benchmarktools = true,; bathymetry = random_bathymetry()); BenchmarkTools.Trial: 5 samples with 1 evaluation.; Range (min … max): 9.614 ms … 10.272 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 9.717 ms ┊ GC (median): 0.00%; Time (mean ± σ): 9.797 ms ± 271.120 μs ┊ GC (mean ± σ): 0.00% ± 0.00%. █ █ █ █ █; █▁█▁▁▁▁▁▁█▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▁; 9.61 ms Histogram: frequency by time 10.3 ms <. Memory estimate: 89.45 KiB, allocs estimate: 320. ```. on this branch:; ```julia ; julia> using NESAPOceananigans; julia> set_problem_size!(500, 500, 50). julia> trial1 = run_model_benchmark!(momentum_kernel_test, GPU();; use_benchmarktools = true,; bathymetry = random_bathymetry()); trial1 = run_model_benchmark!(momentum_kernel_test, arch; use_benchmarktools = true, bottom_height = random_bathymetry()) = Trial(13.991 ms); BenchmarkTools.Trial: 5 samples with 1 evaluation.; Range (min … max): 13.991 ms … 22.167 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 14.057 ms ┊ GC (median): 0.00%; Time (mean ± σ): 15.676 ms ± 3.629 ms ┊ GC (mean ± σ): 0.00% ± 0.00%. █; █▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▇ ▁; 14 ms Histogram: f",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2243530643:5,test,tests,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2243530643,3,"['Benchmark', 'test']","['BenchmarkTools', 'tests']"
Testability,"Say we want to retrieve linear operator `A` given a function `linear_operation(x)` that applied on `x` returns `A*x`. Then, we can apply the `linear_operation` to all unit vectors and each time we get a column of `A`. [thanks @glwagner!]. For example, say we have a 1D case in which `A` is d²/dx²:. ```Julia; using OffsetArrays. L = 1; N = 8; H = 1; δ = L/N. poisson(f, i) = (f[i+1] - 2*f[i] + f[i-1])/δ^2. function fill_halos!(f::OffsetVector); f[0] = f[N]; f[N+1] = f[1]. return nothing; end. interior(f::OffsetVector) = f[1:N]. A = OffsetArray(zeros(N, N)). for j in 1:N; eⱼ = OffsetArray(zeros(N+2H), -H); eⱼ[j] = 1; fill_halos!(eⱼ); ∇²eⱼ = 0 * eⱼ; for i in 1:N; ∇²eⱼ[i] = poisson(eⱼ, i); end. A[:, j] = interior(∇²eⱼ); end. @show A. # test if A does the job. # compute the laplacian of f poisson() function; f = OffsetArray(rand(N+2H, ), -H); fill_halos!(f). ∇²f = 0 * f. for i in 1:N; ∇²f[i] = poisson(f, i); end. # compute the laplacian of f using matrix A; ∇²f_matrix = A * interior(f); ```. returns. ```Julia; julia> @show A; A = [-128.0 64.0 0.0 0.0 0.0 0.0 0.0 64.0; 64.0 -128.0 64.0 0.0 0.0 0.0 0.0 0.0; 0.0 64.0 -128.0 64.0 0.0 0.0 0.0 0.0; 0.0 0.0 64.0 -128.0 64.0 0.0 0.0 0.0; 0.0 0.0 0.0 64.0 -128.0 64.0 0.0 0.0; 0.0 0.0 0.0 0.0 64.0 -128.0 64.0 0.0; 0.0 0.0 0.0 0.0 0.0 64.0 -128.0 64.0; 64.0 0.0 0.0 0.0 0.0 0.0 64.0 -128.0]; 8×8 OffsetArray(::Matrix{Float64}, 1:8, 1:8) with eltype Float64 with indices 1:8×1:8:; -128.0 64.0 0.0 0.0 0.0 0.0 0.0 64.0; 64.0 -128.0 64.0 0.0 0.0 0.0 0.0 0.0; 0.0 64.0 -128.0 64.0 0.0 0.0 0.0 0.0; 0.0 0.0 64.0 -128.0 64.0 0.0 0.0 0.0; 0.0 0.0 0.0 64.0 -128.0 64.0 0.0 0.0; 0.0 0.0 0.0 0.0 64.0 -128.0 64.0 0.0; 0.0 0.0 0.0 0.0 0.0 64.0 -128.0 64.0; 64.0 0.0 0.0 0.0 0.0 0.0 64.0 -128.0; ```. and; ```julia; julia> isapprox(interior(∇²f), ∇²f_matrix); true; ```; For a 2D case with `A = ∂²/∂x² + ∂²/∂y²` we have:. ```Julia; using OffsetArrays. Lx = 2; Ly = 3; Nx = 12; Ny = 18; H = 1; δx = Lx/Nx; δy = Ly/Ny. poisson(f::OffsetMatrix, i, j) = (f[i+1, j]",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1109351042:740,test,test,740,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1109351042,1,['test'],['test']
Testability,"Seems like this bit. https://github.com/CliMA/Oceananigans.jl/blob/29b4cf9e108ea4b72004fee940c66b706b138bbb/test/test_field.jl#L269-L272. runs on the `CPU unit tests`!. https://buildkite.com/clima/oceananigans/builds/3952#f28dce5a-3fa6-486c-9bb6-a543eb6face7. Anybody has any idea why?. cc: @ali-ramadhan, @glwagner",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-940781017:108,test,test,108,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-940781017,2,['test'],"['test', 'tests']"
Testability,Seems that the distributed tests passed. ;),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3489#issuecomment-1972796915:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3489#issuecomment-1972796915,1,['test'],['tests']
Testability,Shall we merge this (when tests pass)?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1964566780:26,test,tests,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1964566780,1,['test'],['tests']
Testability,Should I change everything in the `test` dir?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942850898:35,test,test,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942850898,1,['test'],['test']
Testability,Should I have a go at fixing the tests @glwagner?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1511478427:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1511478427,1,['test'],['tests']
Testability,Should I hold on reviewing until you figure out the tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1869#issuecomment-884620494:52,test,tests,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1869#issuecomment-884620494,1,['test'],['tests']
Testability,Should I just merge this since none of the tests are working? I've tested this locally and it's a pretty straightforward change,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1761#issuecomment-867077913:43,test,tests,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1761#issuecomment-867077913,2,['test'],"['tested', 'tests']"
Testability,"Should be ready to go when all tests pass. We can wait for PR #2121 to finish and then merge this in. Update. Actually need to finish adapting the solver for the `NonHydrostaticModel` (i.e., the `z_face_solver`)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1013367087:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1013367087,1,['test'],['tests']
Testability,Should be ready to merge when tests pass,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3328#issuecomment-1758171611:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3328#issuecomment-1758171611,1,['test'],['tests']
Testability,Should be ready. Maybe a couple of tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3233#issuecomment-1753490292:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3233#issuecomment-1753490292,1,['test'],['tests']
Testability,Should we add a test for this? Or at least make all directions testable on the validation script?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3854#issuecomment-2429960900:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3854#issuecomment-2429960900,2,['test'],"['test', 'testable']"
Testability,"Should we add the test @hdrake suggests in this PR or leave it for later? Happy either way... . I will elaborate a bit my train of thoughts and where my question came before. I opened the PR in an attempt to review. I looked at the file changes, I like the new feature... if I had seen that some test was added in the CI to test the new feature and the test suite was passing I'd feel very comfortable with it and would be more keen to approve. Now that I don't see that I need to look into the details of what happened here before I feel comfortable to approve (which I'm happy to do, but perhaps on Fri or next week)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287374910:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287374910,4,['test'],['test']
Testability,Should we also use `deflatelevel` for the name of the `NetCDFOutputWriter` kwarg?. It'd be nice to have a test for this I think.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3153#issuecomment-1605866597:106,test,test,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3153#issuecomment-1605866597,1,['test'],['test']
Testability,"Should we close this? There's no real specific action we can take to close it, though certainly improving the tests should be an ongoing priority...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1990#issuecomment-1480583262:110,test,tests,110,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1990#issuecomment-1480583262,1,['test'],['tests']
Testability,"Should we have a separate test file for construction of things like `WENO5(grid=grid)`? For this specific case there isn't any (and no obvious place to include it rn):. ```; ~/repos/Oceananigans.jl/test $ grep -r ""\<WENO5"" *  ✔  25s   base  ; test_hydrostatic_free_surface_models.jl: for momentum_advection in (VectorInvariant(), CenteredSecondOrder(), WENO5()); test_multi_region_advection_diffusion.jl: tracer_advection = WENO5(),; test_multi_region_advection_diffusion.jl: tracer_advection = WENO5(),; test_nonhydrostatic_models.jl: for scheme in (WENO5(), UpwindBiasedFifthOrder()); test_shallow_water_models.jl: for advection in (nothing, CenteredSecondOrder(), WENO5()); test_time_stepping.jl: WENO5()); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2549#issuecomment-1125330740:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2549#issuecomment-1125330740,2,['test'],['test']
Testability,Should we have a test? Or could you demonstrably that what you did had a positive impact in resolving the issue?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3287#issuecomment-1735858145:17,test,test,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3287#issuecomment-1735858145,1,['test'],['test']
Testability,"Should we merge this PR if all tests pass? Is there any other outstanding issues?. Regarding bathymetry properly included in `ConservativeFormulation()`, if there is more work needed there perhaps it belongs to a different PR (given the title of *this* PR)?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144208360:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144208360,1,['test'],['tests']
Testability,Should we preview the docs to make sure things are working before merging? They should render here: https://clima.github.io/OceananigansDocumentation/previews/PR2886. Or did you test things locally and are confident enough that this works?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2886#issuecomment-1408822466:178,test,test,178,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2886#issuecomment-1408822466,1,['test'],['test']
Testability,Should we put some preliminary benchmarking results here?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-1854403078:31,benchmark,benchmarking,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-1854403078,1,['benchmark'],['benchmarking']
Testability,"Should we unmark this as a draft and try to get it merged? If there is still a problem and you know how to test it, you can add a `@test_broken` to the test suite. Then after we merge this PR, you can open another PR which marks that as a `@test` and takes up where this one leaves off.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2379752288:107,test,test,107,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2379752288,3,['test'],['test']
Testability,Shouldn't we have tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3130#issuecomment-1577475543:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3130#issuecomment-1577475543,1,['test'],['tests']
Testability,"Simple kernels are safe (in fact, faster). ```julia; using Oceananigans; using Oceananigans.Architectures: device; using Oceananigans.Utils: launch!; using Oceananigans.Operators: ∇²ᶜᶜᶜ. using KernelAbstractions: @kernel, @index; using BenchmarkTools. @kernel function _diffuse!(c, Δt); i, j, k = @index(Global, NTuple); @inbounds c[i, j, k] += Δt * ∇²ᶜᶜᶜ(i, j, k, grid, c); end. function diffuse!(c, Δt); grid = c.grid; arch = grid.architecture; ev = launch!(arch, grid, :xyz, _diffuse!, c, Δt); wait(device(arch), ev); return nothing; end. function lots_of_steps!(c, Δt, steps=100); for _ = 1:steps; diffuse!(c, Δt); end; end. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); c = CenterField(grid); @btime lots_of_steps!(c, 0.01); ```. yields. ```julia; 447.763 ms (9832300 allocations: 975.37 MiB) # KA 0.8; 499.522 ms (9832300 allocations: 1.81 GiB) # KA 0.7; ```. adding `fill_halo_regions!` doesn't change much either",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481333405:236,Benchmark,BenchmarkTools,236,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481333405,1,['Benchmark'],['BenchmarkTools']
Testability,"Simulation API is almost ready. Comments on some of the points above:; 3. I made `stop criteria` an array so you can push/append extra stop criteria as needed.; 4. Out of scope for this PR.; 6. Went all out and completely removed `time_step!` for multiple time steps. Only the single step version remains. Major breaking changes:; 1. Diagnostics and output writers are now part of `Simulation`, not `Model`.; 2. `time_step!` takes a single time step. For multiple time steps, use a loop or a `Simulation`. Still need to:; 1. Write some simple `Simulation` units tests although it's already used by a lot of tests already.; 1. Update examples.; 2. Update model setup documentation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/621#issuecomment-586623011:562,test,tests,562,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/621#issuecomment-586623011,2,['test'],['tests']
Testability,Since I had to regenerate the data I thought to add some data for `SplitExplicitFreeSurface`. If we want the test I ll keep it as part of this PR,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765439199:109,test,test,109,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765439199,1,['test'],['test']
Testability,"Since it's a regression test, we will lose continuity of the code if any PRs are merged from now on. So I suggest regenerating the data ASAP and merging the regression test back in.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2927#issuecomment-1431577460:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2927#issuecomment-1431577460,2,['test'],['test']
Testability,"Since our test scripts are already too long, I suggest creating a new script `test_shallow_water_dynamics.jl`. We also need this if we want to run the script in the `shallow_water` `TEST_GROUP`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1448#issuecomment-794495504:10,test,test,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1448#issuecomment-794495504,1,['test'],['test']
Testability,"Since the code is just a few lines, it's easy to figure out what's going on in the REPL. The top of the error message says:. ```; [2] assemble_closure_velocities; @ ~/.julia/packages/Oceananigans/xmqSH/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl:35 [inlined]; ```. So let's go look at this line. It is:. https://github.com/CliMA/Oceananigans.jl/blob/f89445dcc802341d5361c2f241fe48e483dbd9ff/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl#L35. Ok. Does `background_fields` have the property `u`? At the REPL, using the MWE, I find:. ```julia; julia> background_fields.u; ERROR: type BackgroundFields has no field u; Stacktrace:; [1] getproperty(x::Oceananigans.Models.NonhydrostaticModels.BackgroundFields{true, @NamedTuple{…}, @NamedTuple{…}}, f::Symbol); @ Base ./Base.jl:37; [2] top-level scope; @ REPL[7]:1; Some type information was truncated. Use `show(err)` to see complete types.; ```. Ok, we found the error. But where is `u`? writing `julia> background_fields.` and pressing TAB yields. ```julia; julia> background_fields.; tracers; velocities; ```. Ok, so maybe we want `background_fields.velocities.u`. Looking into the source code for background fields:. https://github.com/CliMA/Oceananigans.jl/blob/f89445dcc802341d5361c2f241fe48e483dbd9ff/src/Models/NonhydrostaticModels/background_fields.jl#L32-L38. confirms what we found, that `BackgroundFields.u` does not exist. Just to confirm, we go back to the REPL and try:. ```julia; julia> background_fields.velocities.u; ZeroField{Int64}; ```. so yes, using `velocities.u` should fix this particular bug. This is an easy fix. Just to go through the motions and get a hang for how this works, let's add the test first, and then make the fix.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433267716:1727,test,test,1727,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433267716,1,['test'],['test']
Testability,"Since this script computes the rates of convergence acurately, I wonder if we might want to include this as a test, or validation maybe? Thoughts?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1759#issuecomment-866473521:110,test,test,110,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1759#issuecomment-866473521,1,['test'],['test']
Testability,"Since we didn't release v0.79.4 yet, I suggest we wait for this to merge + some other bug fixes in PRs that are ready to be merged after tests pass and release after. cc @tomchor, @glwagner, @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1442589073:137,test,tests,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1442589073,1,['test'],['tests']
Testability,"Since we don't have bitwise reproducibility, each run has random round-off errors that, if integrated into a nonlinear trajectory, can cause two solution to diverge eventually. Possibly this test case is a little too challenging (too long time integration, or too nonlinear), meaning that occasional chaotic divergence of the solution is expected?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012:191,test,test,191,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012,1,['test'],['test']
Testability,"Since we have started to build a `MultiGPU` architecture, I did some tests on my desktop to compure `ShallowWaterModel` under `CPUs` and `GPUs`, as a build up to `MultiCPUs` and `MultiGPUs`. The results are below and shows that at the highest resolution, GPUs are more than 200 times faster (if I'm reading this correctly). . ```; Shallow water model benchmarks; ┌───────────────┬─────────────┬──────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────────────┼──────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ CPU │ Float64 │ 32 │ 1.100 ms │ 1.174 ms │ 1.179 ms │ 1.330 ms │ 350.78 KiB │ 2315 │; │ CPU │ Float64 │ 64 │ 2.125 ms │ 2.308 ms │ 2.317 ms │ 2.507 ms │ 350.78 KiB │ 2315 │; │ CPU │ Float64 │ 128 │ 5.627 ms │ 5.796 ms │ 5.819 ms │ 6.274 ms │ 350.78 KiB │ 2315 │; │ CPU │ Float64 │ 256 │ 19.994 ms │ 20.857 ms │ 21.210 ms │ 24.729 ms │ 350.78 KiB │ 2315 │; │ CPU │ Float64 │ 512 │ 108.709 ms │ 109.811 ms │ 111.243 ms │ 116.733 ms │ 352.16 KiB │ 2403 │; │ CPU │ Float64 │ 1024 │ 461.325 ms │ 462.072 ms │ 462.734 ms │ 466.383 ms │ 352.16 KiB │ 2403 │; │ GPU │ Float64 │ 32 │ 1.740 ms │ 1.774 ms │ 1.868 ms │ 2.691 ms │ 722.42 KiB │ 7010 │; │ GPU │ Float64 │ 64 │ 1.814 ms │ 1.934 ms │ 2.086 ms │ 3.466 ms │ 739.64 KiB │ 6888 │; │ GPU │ Float64 │ 128 │ 1.920 ms │ 1.976 ms │ 2.187 ms │ 3.866 ms │ 774.52 KiB │ 6888 │; │ GPU │ Float64 │ 256 │ 2.095 ms │ 2.208 ms │ 2.237 ms │ 2.596 ms │ 849.89 KiB │ 6888 │; │ GPU │ Float64 │ 512 │ 1.988 ms │ 2.039 ms │ 2.150 ms │ 3.175 ms │ 995.27 KiB │ 6976 │; │ GPU │ Float64 │ 1024 │ 1.965 ms │ 2.080 ms │ 2.188 ms │ 3.242 ms │ 1.25 MiB │ 6976 │; └───────────────┴─────────────┴──────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┘; [2021/03/15 12:35:06.674] INFO Writing Shallow_water_model_benchmarks.html...; Shallow water model CPU -> GPU speedup; ┌────────",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799567039:69,test,tests,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799567039,2,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,"Slow down of 10% when introducing `exp` could make sense. > With const rate=1/10 and DiscreteForcing things are as fast as with no forcing. Okay, that makes sense. > So this seems to be a CPU issue. So the problem is that `ContinuousForcing` is rather slow on the CPU. That is a bit annoying. Kind of like how WENO is really slow on the CPU for unknown reasons. At least we have a workaround with `DiscreteForcing`... > Would a MWE help here?. I think what would help the most is a simple benchmarking script that compares identical forcing function implementations with `ContinuousForcing` and `DiscreteForcing` to no forcing. I think we only need one forcing function, and it's probably best if its simple (eg `- p.mu * model_fields.u[i, j, k]`) and doesn't involve complicated functions like `exp`. Since it's only a CPU issue I think it's not the highest priority though (it might not be something we can easily solve either...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875762070:489,benchmark,benchmarking,489,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875762070,2,['benchmark'],['benchmarking']
Testability,"So @simone-silvestri, the tests now pass but I think it's totally wrong. It just happens that whatever wrong thing happens happens both in serial and multi-region.... ```Julia; using Oceananigans, Logging, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: update_state!; using Oceananigans.MultiRegion; using Oceananigans.MultiRegion: reconstruct_global_field. using GLMakie. Logging.disable_logging(Logging.Warn). function initialize_model(grid; P = XPartition, regions, closure, field_name). model = HydrostaticFreeSurfaceModel(; grid = MultiRegionGrid(grid, partition = P(regions)),; free_surface = SplitExplicitFreeSurface(substeps=5),; closure,; tracers = :c,; coriolis = nothing,; buoyancy=nothing). initial_condition(x, y, z) = cos(2x). f = fields(model)[field_name]. @apply_regionally set!(f, initial_condition). update_state!(model). return model; end. Nx = Ny = 32. grid = RectilinearGrid(size = (Nx, Ny, 1), halo = (3, 3, 3),; topology = (Bounded, Bounded, Bounded),; x = (0, 1), y = (0, 1), z = (0, 1)). closure = ScalarDiffusivity(ν = 1, κ = 1). field_name = :u. model_serial = initialize_model(grid; P = XPartition, regions = 1, field_name, closure); model_parallel = initialize_model(grid; P = XPartition, regions = 2, field_name, closure). function plot_comparison(models, field_name, title). model_serial, model_parallel = models; f_serial = fields(model_serial)[field_name]; f_parallel = reconstruct_global_field(fields(model_parallel)[field_name]). fig = Figure(); ax1 = Axis(fig[1, 1]); ax2 = Axis(fig[2, 1]). x, y, z = nodes(f_serial); hm1 = heatmap!(ax1, x, y, interior(f_serial, :, :, 1)); Colorbar(fig[1, 2], hm1). x, y, z = nodes(f_parallel); hm2 = heatmap!(ax2, x, y, interior(f_parallel, :, :, 1)); Colorbar(fig[2, 2], hm2). fig[0, :] = Label(fig, title, fontsize=20, tellwidth=false). return fig; end. fig = plot_comparison((model_serial, model_parallel), field_name, ""before timestep""). save(""before_timestep.png"", fig); ```; ![before_timestep](https://github.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3514#issuecomment-2001900574:26,test,tests,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3514#issuecomment-2001900574,5,"['Log', 'Test', 'test']","['Logging', 'Test', 'tests']"
Testability,So I added a unit test showing that checks that should test its functionality. Once we get more of Oceananigans differentiated we can add some bigger integration tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1756769531:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1756769531,3,['test'],"['test', 'tests']"
Testability,"So I did a bench. I run this:. ```Julia; using Oceananigans; using Oceananigans.Units. grid = RectilinearGrid(CPU(),; size = (3, 3, 3),; extent = (1, 1, 1),; topology = (Periodic, Bounded, Bounded)); model = HydrostaticFreeSurfaceModel(; grid). Δt=20minutes; simulation = Simulation(model, Δt=20minutes, stop_time=4Δt). u, v, w = model.velocities; ζ = ∂x(v) - ∂y(u); fields_slice = Dict(""u"" => u, ""v"" => v, ""w"" => w, ""ζ"" => ζ); simulation.output_writers[:top] = NetCDFOutputWriter(model, fields_slice;; filename = ""mwe.nc"",; schedule = TimeInterval(0.5day),; overwrite_existing = true,; indices = (:, :, grid.Nz)). @time run!(simulation); ```. on my laptop on an evnironment with _only_ Oceananigans. Just for the record, my general env contains:. ```Julia; (@v1.9) pkg> st; Status `~/.julia/environments/v1.9/Project.toml`; [6e4b80f9] BenchmarkTools v1.3.2; [13f3f980] CairoMakie v0.10.12; [e9467ef8] GLMakie v0.8.12; [db073c08] GeoMakie v0.5.1; [7073ff75] IJulia v1.24.2; [12c4ca38] Imaginocean v0.1.0 `https://github.com/navidcy/Imaginocean.jl#main`; [85f8d34a] NCDatasets v0.13.1; [5fb14364] OhMyREPL v0.5.23; [c3e4b0f8] Pluto v0.19.32; [295af30f] Revise v3.5.7; ```. Now on an environment with **Oceananigans v0.89.3** I get:. ```Julia; julia> @time run!(simulation); [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (18.715 minutes); [ Info: Executing initial time step...; [ Info: ... initial time step complete (7.933 seconds).; [ Info: Simulation is stopping after running for 18.861 minutes.; [ Info: Simulation time 1.333 hours equals or exceeds stop time 1.333 hours.; 1134.663423 seconds (2.18 G allocations: 1.143 TiB, 10.69% gc time, 100.03% compilation time); ```. while with **Oceananigans v0.90.1** I get:. ```Julia; julia> @time run!(simulation); [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (13.845 minutes); [ Info: Executing initial time step...; [ Info: ... initial time step complete (8.351 seconds).; [ I",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1804711654:836,Benchmark,BenchmarkTools,836,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1804711654,1,['Benchmark'],['BenchmarkTools']
Testability,"So I ended up defining `dictify` but wanted to apply it recursively to any of the kwargs that could be non-dicts (`outputs`, `output_attributes`, `global_attributes`, and `dimensions`). Found out that the general case is pretty difficult as lots of things implement `keys` and `outputs` (e.g. strings and arrays to name just two) and relying on `fieldnames` requires you to define an accompanying `fieldvalues` which seemed to require quite a bit of extra logic. So I stuck to the simple one-liner that only does something to named tuples; ```julia; dictify(outputs) = outputs; dictify(outputs::NamedTuple) = Dict(string(k) => dictify(v) for (k, v) in zip(keys(outputs), values(outputs))); ```; because it's a simple solution that works recursively for the most common use case (named tuples instead of dicts).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1139#issuecomment-722409494:456,log,logic,456,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1139#issuecomment-722409494,1,['log'],['logic']
Testability,So I have reverted back to the previous UI (added a couple of unit tests) and fixed the tests for enzyme to use Field diffusivities instead of integers that are not mutable. this PR should be ready to go,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2327811398:67,test,tests,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2327811398,2,['test'],['tests']
Testability,"So I started making the suggested changes but then decided to do more benchmarking and it appears that when I interpolate the sums into the benchmark properly there isn't a difference (i.e. https://juliaci.github.io/BenchmarkTools.jl/stable/manual/#Interpolating-values-into-benchmark-expressions):. ```julia; julia> @btime sof[1, 2, 3]; 45.412 ns (1 allocation: 16 bytes); -1.0065959327459124. julia> @btime bo[1, 2, 3]; 44.571 ns (1 allocation: 16 bytes); -1.0065959327459124. julia> @btime fbo[1, 2, 3]; 238.209 ns (1 allocation: 16 bytes); -1.0065959327459124. julia> @btime $(sof)[1, 2, 3]; 3.958 ns (0 allocations: 0 bytes); -1.0065959327459124. julia> @btime $(bo)[1, 2, 3]; 2.708 ns (0 allocations: 0 bytes); -1.0065959327459124. julia> @btime $(fbo)[1, 2, 3]; 2.666 ns (0 allocations: 0 bytes); -1.0065959327459124; ```; where ; ```julia; julia> sof = SumOfFields{3}(c[1:3]...); 200×200×200 SumOfFields{3, Center, Center, Center} on RectilinearGrid on CPU; └── grid: 200×200×200 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo. julia> bo = sum(c[1:3]); BinaryOperation at (Center, Center, Center); ├── grid: 200×200×200 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; └── tree: ; + at (Center, Center, Center); ├── + at (Center, Center, Center); │ ├── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU; │ └── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU; └── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU. julia> fbo = c[1] + c[2] + c[3]; MultiaryOperation at (Center, Center, Center); ├── grid: 200×200×200 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; └── tree: ; + at (Center, Center, Center); ├── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU; ├── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU; └── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU; ```. To check that the",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3676#issuecomment-2269534173:70,benchmark,benchmarking,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3676#issuecomment-2269534173,4,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark', 'benchmark-expressions', 'benchmarking']"
Testability,So I switched from KernelAbstraction v0.9.16 (what I have on my dev Oceananigans) to v0.9.10 (on the CI test) and replicated the error. Updating to 9.16 fixes this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1953422899:104,test,test,104,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1953422899,1,['test'],['test']
Testability,"So I think that the tests generally are very close to the memory limit (which I think is around 1GB, not sure how that's being set). It looks like the tracer sinking isn't actually using much more memory but its enough to push it over. If I remove the output writing and speed field tracking (which don't get tested in this run anyway) from the final test it seems to keep the memory usage lower. I can't test it myself on a GPU right now so am going to push and hopefully it'll work!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1248258123:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1248258123,4,['test'],"['test', 'tested', 'tests']"
Testability,"So a lot of tests break when I bump KernelAbstractions 0.8.4 + CUDAKernels 0.4.3.... cc @glwagner, @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2782#issuecomment-1283389480:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2782#issuecomment-1283389480,1,['test'],['tests']
Testability,"So main agrees with Artifacts (the previously generated data?)? ; Was this generated in the test environment or from oceananigans' environment?. ~~Is this on a CPU, because it seems like the difference arises on the GPU.~~",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1441839736:92,test,test,92,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1441839736,1,['test'],['test']
Testability,"So the logic is slightly different for `is_immersed` with `PartialCellBottom`. `is_immersed` is `false` for cells that are ""partially immersed"". It's only `true` for cells that are ""fully immersed"".",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1042499978:7,log,logic,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1042499978,1,['log'],['logic']
Testability,"So to be honest @siddharthabishnu phrasing regarding me ""contemplating"" is a bit generous. Personally, I'm not sure whether this can be a dynamics test; something for which the error is just an order of magnitude less than the solution itself seems a bit loose for me... isn't there anything else we can use for a dynamics test? feels like we've been stuck on this for ages... we need a dynamics test to merge the cubed sphere code and move on I think. Perhaps there is no dynamics test we can have?. The solution @siddharthabishnu uses above **is not** an exact solution of the HydrostaticFreeSurfaceModel equations... thus the big error. (It's an exact solution of the barotropic vorticity equation...) But whether this big of an error is expected or is it because the code has a bug I don't know and we've been in this vagueness for long. Anybody has any ideas?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3570#issuecomment-2134508179:147,test,test,147,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3570#issuecomment-2134508179,4,['test'],['test']
Testability,"So what is ""truth"" above? Also, how did you figure out that the data we are comparing is from June 1st?. Hm... The regression tests show that only `v` fails... I recently updated the data we are comparing but perhaps somehow it's not updated? I'm not sure what you are comparing above. The initial conditions should be identical! If the initial conditions are that different then there is no way we will get tests to pass. What I wanted to see is the tendency fields at the first time step (but given we provide the initial condition) with v0.79.4 and with v0.77.0. The data we are comparing with was generated with v0.77.0 -- we thought we were pretty sure about that but might be wrong.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446341783:126,test,tests,126,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446341783,2,['test'],['tests']
Testability,"So, I'm hitting some errors running the `baroclinic_adjustment` example with the ROCBackend. The only modification of this example script is the specification of the architecture as `GPU()`. It seems that this chokes on AMDGPU's `zeros`. I did not encounter this in the other work I was doing on Simone's branch; though the test we were using was not building with a recilinear grid. ```; $ julia --project=. ./bench/baroclinic_adjustment.jl ; ERROR: LoadError: Not implemented; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] runtime_module(job::GPUCompiler.CompilerJob); @ GPUCompiler ~/.julia/packages/GPUCompiler/U36Ed/src/interface.jl:173; [3] build_runtime(job::GPUCompiler.CompilerJob); @ GPUCompiler ~/.julia/packages/GPUCompiler/U36Ed/src/rtlib.jl:101; [4] (::GPUCompiler.var""#136#138""{GPUCompiler.CompilerJob{GPUCompiler.GCNCompilerTarget, AMDGPU.Compiler.HIPCompilerParams}})(); @ GPUCompiler ~/.julia/packages/GPUCompiler/U36Ed/src/rtlib.jl:139; [5] lock(f::GPUCompiler.var""#136#138""{GPUCompiler.CompilerJob{GPUCompiler.GCNCompilerTarget, AMDGPU.Compiler.HIPCompilerParams}}, l::ReentrantLock); @ Base ./lock.jl:229; [6] macro expansion; @ GPUCompiler ~/.julia/packages/GPUCompiler/U36Ed/src/rtlib.jl:120 [inlined]; [7] load_runtime(job::GPUCompiler.CompilerJob); @ GPUCompiler ~/.julia/packages/GPUCompiler/U36Ed/src/utils.jl:92; [8] macro expansion; @ ~/.julia/packages/GPUCompiler/U36Ed/src/driver.jl:290 [inlined]; [9] emit_llvm(job::GPUCompiler.CompilerJob; libraries::Bool, toplevel::Bool, optimize::Bool, cleanup::Bool, only_entry::Bool, validate::Bool); @ GPUCompiler ~/.julia/packages/GPUCompiler/U36Ed/src/utils.jl:92; [10] emit_llvm; @ ~/.julia/packages/GPUCompiler/U36Ed/src/utils.jl:86 [inlined]; [11] codegen(output::Symbol, job::GPUCompiler.CompilerJob; libraries::Bool, toplevel::Bool, optimize::Bool, cleanup::Bool, strip::Bool, validate::Bool, only_entry::Bool, parent_job::Nothing); @ GPUCompiler ~/.julia/packages/GPUCompiler/U36Ed/src/driver.jl:129; [12] ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1935971273:324,test,test,324,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1935971273,1,['test'],['test']
Testability,"So, everything that I've tested so far leads me to believe this is working with vertically stretched grids for now. I've tested a few examples with both CPU and GPU architecture and they've picked up successfully. (Although it's possible I'm missing something...) However, since @navidcy and @glwagner have reservations about this fix (regarding #1998) I won't expand it to all abstract grids for now. I think more discussions need to be done. I'll leave this PR open though since I need this fix to complete my research, if that's okay.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945890117:25,test,tested,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945890117,2,['test'],['tested']
Testability,"So, it looks like docs take more to build in this PR when compared to main (4:00 hrs vs 3:40 hrs). Probably good to benchmark a bit. I ll try some benchmarking on GPU and CPU",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1589347491:116,benchmark,benchmark,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1589347491,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,"So, the test is failing on the GPU, but not on the CPU so I can't reproduce the error locally and I don't understand why it's failing. Can anyone give me a hand?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1467#issuecomment-799711547:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1467#issuecomment-799711547,1,['test'],['test']
Testability,"So, we do have tests for incompressibilty",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1934#issuecomment-1479899194:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1934#issuecomment-1479899194,1,['test'],['tests']
Testability,Some benchmarking...; ```; This PR. Nonhydrostatic model benchmarks (Ns³); ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ median │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 64 │ 49.720 ms │ 479.12 KiB │ 1016 │ 10 │; │ CPU │ Float64 │ 128 │ 400.668 ms │ 479.12 KiB │ 1016 │ 10 │; │ CPU │ Float64 │ 256 │ 3.303 s │ 479.12 KiB │ 1016 │ 2 │; │ GPU │ Float64 │ 64 │ 3.179 ms │ 738.19 KiB │ 3039 │ 10 │; │ GPU │ Float64 │ 128 │ 8.913 ms │ 746.97 KiB │ 3601 │ 10 │; │ GPU │ Float64 │ 256 │ 68.202 ms │ 1.25 MiB │ 37738 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────┴─────────┘. HydrostaticFreeSurface model benchmarks (Ns²×10); ┌───────────────┬─────────────┬─────┬────────────┬────────────┬─────────┬─────────┐; │ Architectures │ Float_types │ Ns │ median │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼─────────┼─────────┤; │ CPU │ Float64 │ 64 │ 14.389 ms │ 1.33 MiB │ 2157 │ 10 │; │ CPU │ Float64 │ 128 │ 26.194 ms │ 1.33 MiB │ 2157 │ 10 │; │ CPU │ Float64 │ 256 │ 127.087 ms │ 1.33 MiB │ 2157 │ 10 │; │ GPU │ Float64 │ 64 │ 4.682 ms │ 1.73 MiB │ 4444 │ 10 │; │ GPU │ Float64 │ 128 │ 3.091 ms │ 1.73 MiB │ 4457 │ 10 │; │ GPU │ Float64 │ 256 │ 3.346 ms │ 1.73 MiB │ 4416 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴─────────┴─────────┘. ShallowWater model benchmarks (Ns²); ┌───────────────┬─────────────┬─────┬───────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ median │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼───────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 64 │ 2.130 ms │ 796.97 KiB │ 1460 │ 10 │; │ CPU │ Float64 │ 128 │ 6.043 ms │ 796.97 KiB │ 1460 │ 10 │; │ CPU │ Float64 │ 256 │ 34.627 ms │ 796.97 KiB │ 1460 │ 10 │; │ GPU │ Float64 │ 64 │ 2.164 ms │ 1.0,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1066030763:5,benchmark,benchmarking,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1066030763,3,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"Some benchmarks from running `implicit_surface_solvers_benchmark.jl` . On GPU: ; FFT: 0.902434 seconds (1.58 M allocations: 549.219 MiB, 13.25% gc time) ; PCG: 37.329798 seconds (17.07 M allocations: 2.563 GiB, 1.85% gc time); Heptadiagonal: 4.323861 seconds (6.06 M allocations: 675.694 MiB, 4.72% gc time, 1.32% compilation time); MG: 4.495123 seconds (1.50 M allocations: 492.900 MiB, 2.16% gc time); PCG with FFT preconditioner: 22.673894 seconds (3.53 M allocations: 864.587 MiB, 0.77% gc time). On CPU:; FFT: 6.548544 seconds (3.61 M allocations: 1.910 GiB, 14.07% gc time, 1.30% compilation time); PCG: 32.354310 seconds (20.29 M allocations: 7.041 GiB, 5.80% gc time); Heptadiagonal: 9.795938 seconds (3.51 M allocations: 1.595 GiB, 39.13% gc time); MG: 11.868795 seconds (3.85 M allocations: 3.991 GiB, 43.10% gc time); PCG with FFT preconditioner: 10.473279 seconds (5.38 M allocations: 2.654 GiB, 9.37% gc time)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1241375321:5,benchmark,benchmarks,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1241375321,1,['benchmark'],['benchmarks']
Testability,"Some benchmarks... ## On `main`. ```julia; julia> include(""benchmark_two_dimensional_models.jl""); [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; [ Info: Oceananigans will use 24 threads; [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 176.874 ms (66322 allocations: 23.79 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 500.601 ms (111291 allocations: 276.81 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 320.139 ms (48245 allocations: 269.93 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 14.721 ms (36840 allocations: 12.11 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 23.795 ms (40688 allocations: 12.18 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 17.219 ms (38055 allocations: 12.14 MiB); ```. ## This PR. ```julia; julia> include(""benchmark_two_dimensional_models.jl""); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 104.521 ms (77858 allocations: 25.03 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 235.623 ms (120254 allocations: 26.49 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 137.914 ms (72488 allocations: 19.41 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 14.675 ms (37239 allocations: 11.65 MiB); [ Info: Benchmarking GPU(",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2035#issuecomment-961064605:5,benchmark,benchmarks,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2035#issuecomment-961064605,6,"['Benchmark', 'benchmark']","['Benchmarking', 'benchmarks']"
Testability,"Some good news is that more tests seem to be passing compared to the prevoius PR. . One of the messages I saw was there was a cancellation signal, see below. Lots of the tests just cancelled, and I'm not sure why. ```; Testing Oceananigans; # Received cancellation signal, interrupting; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1985730877:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1985730877,3,"['Test', 'test']","['Testing', 'tests']"
Testability,Some issues in the tests... :(,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1619#issuecomment-826395987:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1619#issuecomment-826395987,1,['test'],['tests']
Testability,"Some notes while trying to sort out the output writer logic flow. The key function is `schedule(model)`, which is called every `timestep!`. When `schedule(model) == true`, the `write_output!(writer, sim.model)` function gets triggered:. https://github.com/CliMA/Oceananigans.jl/blob/088f9738877f0aeef7aa4038cf788f69ee102019/src/Simulations/run.jl#L146-L148. The trick for `AveragedTimeInterval` is that, for every timestep in an averaging window, we increment the `WindowedTimeAverage.result`:. https://github.com/CliMA/Oceananigans.jl/blob/088f9738877f0aeef7aa4038cf788f69ee102019/src/OutputWriters/windowed_time_average.jl#L220. The difficult part is handling the logic of when to stop collecting increments for a given window:. https://github.com/CliMA/Oceananigans.jl/blob/088f9738877f0aeef7aa4038cf788f69ee102019/src/OutputWriters/windowed_time_average.jl#L270-L280. and to reset the `WindowedTimeAverage.result` back to zero to begin accumulating over the next window:. https://github.com/CliMA/Oceananigans.jl/blob/088f9738877f0aeef7aa4038cf788f69ee102019/src/OutputWriters/windowed_time_average.jl#L255-L268",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3717#issuecomment-2294972510:54,log,logic,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3717#issuecomment-2294972510,2,['log'],['logic']
Testability,"Some pretty promising Lagrangian particle tracking benchmarks!. Couple of takeaways (all assuming a model with 128^3 grid points and QAB2 time stepping):; 1. **Low overhead**: You can advect up to ~100,000 particles on the CPU and up to ~10,000,000 particles on a (Titan V) GPU before the model slows down by more than 30%.; 2. **Great on GPUs**: Seems that the GPU is great for advecting millions of particles. You can advect ~100,000,000 particles and your model only slows down by a factor of 4x. In this scenario, the GPU is ~620x faster than a single CPU core.; 3. Calculated using `(t_100000000 - t_0) / 100000000`, advecting a single particle on the CPU takes ~110 ns while on the GPU it only takes ~0.127 ns. This seems a little too good to be true but I'll double check this. I'll start refactoring this PR using @glwagner's and @zhenwu0728's feedback, but I think it would be really great if we can keep this performance. # Benchmarks. ```; Oceananigans v0.44.1; Julia Version 1.5.2; Commit 539f3ce943 (2020-09-23 23:17 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-9.0.1 (ORCJIT, cascadelake); GPU: TITAN V; ```. ```; Lagrangian particle tracking benchmarks; ┌───────────────┬─────────────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ Architectures │ N_particles │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────────────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ CPU │ 0 │ 361.749 ms │ 364.041 ms │ 364.293 ms │ 368.854 ms │ 293.44 KiB │ 1876 │; │ CPU │ 1 │ 375.030 ms │ 376.591 ms │ 377.959 ms │ 385.248 ms │ 297.16 KiB │ 1906 │; │ CPU │ 10 │ 377.251 ms │ 380.792 ms │ 387.560 ms │ 443.325 ms │ 297.16 KiB │ 1906 │; │ CPU │ 100 │ 378.867 ms │ 381.194 ms │ 381.328 ms │ 383.461 ms │ 297.16 KiB │ 1906 │; │ CPU │ 1000 │ 378.076 ms │ 384.114 ms │ 383.611 ms │ 388.507 ms │ 297.16 KiB │ 1906 │; │",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-732529975:51,benchmark,benchmarks,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-732529975,1,['benchmark'],['benchmarks']
Testability,"Some progress:. The type infererence issue seems to be fixed. For `flow_over_hills.jl` the cost per time-step is approximately the same on my CPU for the ""reference case"" (no immersed boundary), and either free-slip or no-slip immersed boundary. I updated `flow_over_hills.jl` to introduce an initial perturbation that goes turbulent immediately. Here's a visualization of vorticity alongside total momentum loss for a 64x64 resolution:. https://user-images.githubusercontent.com/15271942/163830810-8f15244b-27e2-4bf0-a7b2-e35d73bd8c79.mp4. The ""reference"" case has a no-slip boundary but no bathymetry. The momentum loss between reference and free-slip case are similar. No-slip and immersed boundary has the most momentum loss. The effect of the pressure errors can be seen plainly that there is transient _injection_ of momentum into the system, which isn't physically possible. However over long periods of time the momentum goes in the right direction. I'm wondering if anyone has experience with PALM, which I believe uses a very similar immersed boundary method (with no pressure solver correction)... ? They must have similar ""leakage"" errors. Overall I'm happy. I'd like to implement a few more convenient features and then I think this implementation is complete. There's still a fair amount of work to do to write tests and documentation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1101498039:1325,test,tests,1325,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1101498039,1,['test'],['tests']
Testability,"Some results from the ""closure comparison"" validation test (rotating wind-driven mixing in a stratified fluid):. # dz = 1 meter, dx = dy = 2 meter. ![smag_comparison_10](https://github.com/user-attachments/assets/5c6a3bf2-42c8-46ad-968d-91210cc37fb5); ![closure_comparison_10](https://github.com/user-attachments/assets/71de45d3-c3aa-476d-8e31-bbba4bf70546). # dz = 2 meter, dx = dy = 4 meter. ![smag_comparison_20](https://github.com/user-attachments/assets/a223e274-1efa-400f-8a71-1c82e0e98bde); ![closure_comparison_20](https://github.com/user-attachments/assets/74d44106-3ebb-489c-b93a-b5329b8d62a5). Seems like dynamic smag is doing what it should which is great. I'm surprised to see that the Lilly coefficient doesn't do much at coarse resolution at least. On cost: it is a bit interesting. I think as kernel saturate, WENO(order=9) will start to win. For small kernels however, AMD seems ideal. We'll have to do a proper benchmark. This PR also contains an experimental implementation of Lagrangian-averaged (scale-invariant) dynamic Smagorinsky.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2443333362:54,test,test,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2443333362,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,Some sandbox stuff might've been added by accident,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863619586:5,sandbox,sandbox,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863619586,1,['sandbox'],['sandbox']
Testability,Some test pass and it makes no sense. Is it just random test failure past of the test natural variability?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1864#issuecomment-881956216:5,test,test,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1864#issuecomment-881956216,3,['test'],['test']
Testability,Some tests need to be tweaked. :(. E.g. here a test was expecting a method error and got an argument error:. https://buildkite.com/clima/oceananigans/builds/17298#0191afb9-8515-4225-a6bf-84eef908549c/28-381,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2323606097:5,test,tests,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2323606097,2,['test'],"['test', 'tests']"
Testability,"Something worth discussing is if we want to unit test the operators. I guess maybe not simple stuff like `∂x_faa` but the composing ones like `∂x_caa(i, j, k, grid, F::Function, args...)` might need testing?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/234#issuecomment-495594948:49,test,test,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/234#issuecomment-495594948,2,['test'],"['test', 'testing']"
Testability,Sometimes (often) they just fail to initialize. Don’t assume you broke them necessarily. Uou need to see the log to understand if actually the tests broke or never started.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2015073674:109,log,log,109,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2015073674,2,"['log', 'test']","['log', 'tests']"
Testability,Sometimes tests fail to load. Merely restarting them does the job. Did that. Let’s see.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2733#issuecomment-1252866889:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2733#issuecomment-1252866889,1,['test'],['tests']
Testability,"Sorry I should have been more verbose. I meant that since the Manifest you pushed doesn't seem to work then I'm not sure I can reproduce the setup you run locally to test things. And that said, I'm not sure whether some errors you point out are because of the code or from a dependency version that is different to what I have on my side etc..",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3470#issuecomment-1937042477:166,test,test,166,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3470#issuecomment-1937042477,1,['test'],['test']
Testability,"Sorry for not removing the comments before. That was sloppy of me. They are gone now. On a similar note, the comments in my test scripts can also remove. However, I don't think these should be merged as they are my way of testing it and aren't really cleaned up. They will be removed for now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-739952376:124,test,test,124,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-739952376,2,['test'],"['test', 'testing']"
Testability,"Sorry if I'm missing something obvious (still new with the working of Oceananigans/Julia), but I was trying to test this feature and expand it to `BuoyancyTracer` over the weekend and I wonder if this implementation can be made more general. . The way I understand @ali-ramadhan created some functions `g_x` to extract the gravity components in each direction and then used them in the `x_dot_g_b` functions to calculate each component of the gravity acceleration. The thing is that gravity can only be a vector using `SeawaterBuoyancy`. When trying to apply this to `BuoyancyTracer` I found that I'd need to replicate the same feature but with a different name (since, as @glwagner pointed out, `gravitational_acceleration` would be a confusing name when working directly with buoyancy). Also, if you also think issue https://github.com/CliMA/Oceananigans.jl/issues/1372 is relevant, it might be nice to have one unified word/approach for the tilting of the domain. So what do you guys think if this tilting is implement at the `AbstractBuoyancy` level? If I understand correctly all buoyancy types inherit that, right? That way we'd have a keyword for the tilt (maybe `tilt`, `gravitational_direction` or `gravity_projection`) that would default to `(0, 0, 1)` and a similar option could be given to `FPlane`, avoiding confusion.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-782900312:111,test,test,111,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-782900312,1,['test'],['test']
Testability,"Sorry, I was out. I can try running on GPU to see if I can catch the bug. Any specific test I could run?; I commented on the code, but did not see your post asking me to run the test. When I clicked on the notification it jumped directly to the code, sorry.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1094126204:87,test,test,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1094126204,2,['test'],['test']
Testability,"Sorry, I was thinking of the MPI tests (since that's what I'm looking at for the slides right now). I agree that for one CPU vs one GPU, it would be nice to use the same CPU and GPU in the different tests. I know we can specify the GPU type in the SLURM script. Maybe we can do the sme for the CPU?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880903279:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880903279,2,['test'],['tests']
Testability,"Sorry, you mentioned the tests only tested `y,z`, but not `x,z` or `x,y,z`. I thought if those tests could be done that might help to identify the problem. Maybe?. A double gyre might help but that introduces boundaries, or at least more boundaries, so maybe more compliated?. It is interesting that we get an instability in a lat-lon grid but not a Cartesian grid. If you re-scale the lengths down say by a factor of 10, or even 100, these two should agree. I wonder if we still get an instability? If we did in the lat-lon grid but not the Cartesian one, maybe that would point to a problem with diffusing on a sphere? Just a thought.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107538441:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107538441,3,['test'],"['tested', 'tests']"
Testability,"Sounds good. Is this tested, do you know?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3340#issuecomment-1763142265:21,test,tested,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3340#issuecomment-1763142265,1,['test'],['tested']
Testability,Sounds great! Can you post here the code with which you benchmarked it?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1364892709:56,benchmark,benchmarked,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1364892709,1,['benchmark'],['benchmarked']
Testability,"Sounds like a good idea. I think `setbc!` and `getbc` aren't fully tested so also worth adding some simple tests there. Hmmm, so right now aliases like `top` and `bottom` are defined on coordinate boundary conditions but maybe we want to define them on `FieldBoundaryConditions`?. ```julia; getbc(fbc::FieldBoundaryConditions, ::Val{:south}) = getfield(fbc.y, :left); getbc(fbc::FieldBoundaryConditions, ::Val{:top}) = getfield(fbc.z, :right); ```. So accessing boundary conditions of a field `u` would look like; ```julia; u.boundary_conditions.south # Instead of u.boundary_conditions.y.south; u.boundary_conditions.top # Instead of u.boundary_conditions.z.top; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/637#issuecomment-589875183:67,test,tested,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/637#issuecomment-589875183,2,['test'],"['tested', 'tests']"
Testability,Still some test to fix,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3261#issuecomment-1714613118:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3261#issuecomment-1714613118,1,['test'],['test']
Testability,"Still the unit tests don't pass; something else is broken. Seems like some other validation is bypassed?. ```Julia; julia> RectilinearGrid(CPU(), Float64, size = (16, 16, 16), x = 1, y = 2, z = 3); ERROR: MethodError: no method matching get_face_node(::Int64, ::Int64). Closest candidates are:; get_face_node(::Function, ::Any); @ Oceananigans ~/Research/OC5.jl/src/Grids/grid_generation.jl:12; get_face_node(::AbstractVector, ::Any); @ Oceananigans ~/Research/OC5.jl/src/Grids/grid_generation.jl:13; get_face_node(::Nothing, ::Any); @ Oceananigans ~/Research/OC5.jl/src/Grids/grid_generation.jl:11. Stacktrace:; [1] generate_coordinate(FT::Type, topo::Periodic, N::Int64, H::Int64, node_generator::Int64, dir::Symbol, arch::CPU); @ Oceananigans.Grids ~/Research/OC5.jl/src/Grids/grid_generation.jl:39; [2] RectilinearGrid(architecture::CPU, FT::DataType; size::Tuple{Int64, Int64, Int64}, x::Int64, y::Int64, z::Int64, halo::Nothing, extent::Nothing, topology::Tuple{DataType, DataType, DataType}); @ Oceananigans.Grids ~/Research/OC5.jl/src/Grids/rectilinear_grid.jl:273; [3] top-level scope; @ REPL[4]:1; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3333#issuecomment-1762168392:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3333#issuecomment-1762168392,1,['test'],['tests']
Testability,"Strange. This ran for me on my local machine and a server, so it's strange that it fails these tests. . I don't believe this is a major concern but thought I would check in.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477960735:95,test,tests,95,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477960735,1,['test'],['tests']
Testability,Strikes me that we could also change the log level so that warnings are not emitted.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3705#issuecomment-2287776604:41,log,log,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3705#issuecomment-2287776604,1,['log'],['log']
Testability,Sure give it a try. We can merge when tests pass,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482078115:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482078115,1,['test'],['tests']
Testability,"Sure we can do that. But before we start a PR with a new test, shouldn't we first make sure there isn't anything wrong with my script?. That said, I think the basic ingredients are. - A time-average (NetCDF?) output (obviously); - Some diagnostic (preferably a Field, not a ComputedField) that changes in time predictably. The issue with creating a truly _minimal_ MWE is that (like [your comment summed up well](https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-810496153)) it's not clear which outputs exhibit the issue and which ones don't. I _think_ we might be able to get away with simply starting a quiescent simulation apart from a uniform u velocity and see if the total momentum is conserved on average. (This should start inertial oscillations.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817971702:57,test,test,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817971702,2,['test'],['test']
Testability,Sure! I was just doing what the test does to reproduce why CI fails... :) Let's simplify the test also!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1560123791:32,test,test,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1560123791,4,['test'],['test']
Testability,"Sure!. ```; (Oceananigans) pkg> status; Project Oceananigans v0.53.0; Status `~/Documents/Bachelor Arbeit/Repos/Oceananigans.jl/Project.toml`; [79e6a3ab] Adapt v3.2.0; [052768ef] CUDA v2.4.1; [a8cc5b0e] Crayons v4.0.4; [7a1cc6ca] FFTW v1.3.2; [e9467ef8] GLMakie v0.1.30; [c27321d9] Glob v1.3.0; [033835bb] JLD2 v0.4.3; [63c18a36] KernelAbstractions v0.5.4; [da04e1cc] MPI v0.16.1; [442fdcdd] Measures v0.3.1; [85f8d34a] NCDatasets v0.11.3; [6fe1bfb0] OffsetArrays v1.6.2; [bac558e1] OrderedCollections v1.4.0; [4a48f351] PencilFFTs v0.12.2; [d330b81b] PyPlot v2.9.0; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.0; [09ab397b] StructArrays v0.5.0; [ade2ca70] Dates; [b77e0a4c] InteractiveUtils; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [44cfe95a] Pkg; [de0858da] Printf; [9a3f8284] Random; [10745b16] Statistics; ```. ```; ERROR: LoadError: ArgumentError: length(size) must be 2.; Stacktrace:; [1] validate_tupled_argument(::Tuple{Int64,Int64,Int64}, ::Type{T} where T, ::String, ::Int64; greater_than::Int64) at /home/meck/Documents/Bachelor Arbeit/Repos/Oceananigans.jl/src/Grids/input_validation.jl:24; [2] validate_tupled_argument(::Tuple{Int64,Int64,Int64}, ::Type{T} where T, ::String, ::Int64) at /home/meck/Documents/Bachelor Arbeit/Repos/Oceananigans.jl/src/Grids/input_validation.jl:24; [3] validate_size(::Type{T} where T, ::Type{T} where T, ::Type{T} where T, ::Tuple{Int64,Int64,Int64}) at /home/meck/Documents/Bachelor Arbeit/Repos/Oceananigans.jl/src/Grids/input_validation.jl:48; [4] RegularRectilinearGrid(::Type{T} where T; size::Tuple{Int64,Int64,Int64}, x::Tuple{Int64,Int64}, y::Tuple{Int64,Int64}, z::Tuple{Int64,Int64}, extent::Nothing, topology::Tuple{DataType,DataType,DataType}, halo::Nothing) at /home/meck/Documents/Bachelor Arbeit/Repos/Oceananigans.jl/src/Grids/regular_rectilinear_grid.jl:161; [5] simulate_lid_driven_cavity(; Re::Int64, N::Int64, end_time::Int64) at /home/meck/Documents/Bachelor Arbeit/Repos/Oceananigans.jl/validation/lid_d",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1507#issuecomment-807380928:754,Log,Logging,754,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1507#issuecomment-807380928,1,['Log'],['Logging']
Testability,"Sure, I ran a simple test using the MWE above without picking up a checkpoint and set:. ```julia; Δt = .01 # timestep (s); T1 = 5 # first simulation stop time (s); δt = .03 # progress message interval and output saving interval; # Run a simulation; simulation = test_simulation(T1, Δt, δt, true); run!(simulation); ```; I've noticed that this strange behavior occurs when δt is smaller than or equal to 0.03, but it disappears when δt is greater than 0.03 (even at 0.031). It seems there is a cutoff value of δt below which the error emerges.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2260950870:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2260950870,2,['test'],['test']
Testability,"Sure, I will work on the unit tests.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433785662:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433785662,1,['test'],['tests']
Testability,"Sure, tests should pass in this last commit, when that is done I ll merge!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2276#issuecomment-1050417811:6,test,tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2276#issuecomment-1050417811,1,['test'],['tests']
Testability,"Sure, the PR resolves the rounding issue caused by `previous_interval_stop_time` through the use of actuations (as inspired by its application [here](https://github.com/CliMA/Oceananigans.jl/blob/dc5dc28c6cf433dcb8a6668cef99e98309e6ead9/src/Utils/schedules.jl#L58-L63)).; Here is the part of the code showing these [changes](https://github.com/CliMA/Oceananigans.jl/pull/3721/commits/a52812b00eb38e712ed20c7a6db3cf2e0c3a7877#diff-532eb4a17264dc44a7cae7601aca768c39bfb08f0493561c333f24a3261d6a46R123-R130). Another important change is that ; ```julia. # Save averaging start time and the initial data collection time; wta.window_start_time = model.clock.time; wta.window_start_iteration = model.clock.iteration; wta.previous_collection_time = model.clock.time. wta.schedule.collecting = false; wta.schedule.actuations += 1; ```. occurs only when the window ends, i.e., when `end_of_window(wta.schedule, model.clock) == true`. In contrast, the [previous version](https://github.com/CliMA/Oceananigans.jl/pull/3721/commits/a52812b00eb38e712ed20c7a6db3cf2e0c3a7877#diff-532eb4a17264dc44a7cae7601aca768c39bfb08f0493561c333f24a3261d6a46L265-L268) triggered this only when the model wasn't collecting. > I'm wondering if it makes sense that this is hard or if we should actually consider a more fundamental redesign to make it more robust... I agree that a more fundamental redesign could improve robustness in the long term. That said, the current adjustments seem to resolve the issue for now (I'll look into why certain cases aren't passing the test). We can continue to monitor its performance and consider a redesign if further issues arise.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2379285570:1541,test,test,1541,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2379285570,1,['test'],['test']
Testability,"Sure. . This [code ](https://github.com/CliMA/Oceananigans.jl/blob/78f1e2910355ca4213241b23525b717c73d77900/test/test_stretched_grid.jl#L5) shows different functions that I have defined, similar to your `cheb` example above. Passing the function, which in this context I've called `stretched` but agree we should change it, [here](https://github.com/CliMA/Oceananigans.jl/blob/78f1e2910355ca4213241b23525b717c73d77900/src/Grids/stretched_rectilinear_grid.jl#L54) you will see that the function is evaluated to define the grid. It's nothing fancy, but it does the trick. . Sorry if I misunderstood your suggestion?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1551#issuecomment-815385216:108,test,test,108,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1551#issuecomment-815385216,1,['test'],['test']
Testability,"Sure. I'm now working on making plots of convergence and should be able to get that done today. One issue is that I have commented out a lot of stuff, which was there before. I've focused on making the one advection test and haven't integrated it into the other tests, yet. Not sure if this is a problem?. I will create a PR later today.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1272#issuecomment-746523704:216,test,test,216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1272#issuecomment-746523704,2,['test'],"['test', 'tests']"
Testability,"Surprisingly I was able to get a distributed `IncompressibleModel` running just using multiple dispatch without having to modify any existing code, although a cleaner design might require a bit of refactoring. PR is still a work-in-progress so it's a bit messy, the purpose was to demonstrate a proof of concept. MPI.jl and PencilFFTs.jl are new dependencies but I haven't updated the Project.toml yet. So far this PR adds some new infrastructure:; 1. Distributed/multi-architectures (e.g. `MultiCPU`) that know about rank connectivity.; 2. Halo communication between ranks is done via multiple dispatch on a new `HaloCommunicationBC` type.; 3. A `DistributedFFTBasedPoissonSolver` for solving Poisson equations across ranks.; 4. A `DistributedModel` that creates local grids for each ranks, injects halo communication BCs, and passes the distributed pressure solver to a local `IncompressibleModel`. I also added some simple tests for multi architecture rank connectivity, local grid construction, injection of halo communication BCs, and halo communication (testing x, y, and z slab decompositions). Also added tests for the distributed Poisson solver ensuring the solution is divergence-free. Next step for testing would probably be to test that the code handles `Bounded` topologies correctly then add tests that reproduce the regression tests but on multiple ranks and ensure the output matches the regression output. ## Some notes. ### Domain decomposition. Domain decomposition is supported and tested in x, y, and z. But for `IncompressibleModel` z-decomposition won't work right now because vertical integrals are done inside GPU kernels (so we probably don't want to decompose in z). And PencilFFTs.jl supports decompositions in dimensions 2 and 3 (since dimension 1 FFTs are the fastest). As a result, right now Oceananigans.jl only supports slab decompositions in y although we should figure out if pencil decompositions are possible. ### Local topologies. The local grid topology may need",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-775301066:1020,test,tests,1020,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-775301066,2,['test'],"['testing', 'tests']"
Testability,"Test are passing! @glwagner please lmk if you want changes in the test. If not, I'll merge and register a new version.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1127883538:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1127883538,2,"['Test', 'test']","['Test', 'test']"
Testability,Test can come now or later,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2397#issuecomment-1084059429:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2397#issuecomment-1084059429,1,['Test'],['Test']
Testability,Test nonlinear advection for 2D/3D schemes,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172720465:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172720465,1,['Test'],['Test']
Testability,Test of potential density pass. ; The insitu density difference for k=2 is instead of 0 is 2e-13…,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2067977636:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2067977636,1,['Test'],['Test']
Testability,"Tested this behavior on GPUs and it persists. I can't notice a pattern on the slowdown rate, but sometimes things go from taking 1 ms to compute to taking 1 s. A 1000x slowdown!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-950029886:0,Test,Tested,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-950029886,1,['Test'],['Tested']
Testability,"Tests all pass but code is a bit messy (especially `plan_transforms.jl`) due to lots of special cases that I'm not yet sure how to simplify so needs some work. Ran new FFT-based Poisson solver benchmarks on Tartarus (Titan V GPUs) and static ocean benchmarks for all topologies on Satori (Tesla V100 GPUs) + regression. Results are below. Will post a followup with some highlights/conclusions. # FFT-based Poisson solver benchmarks. ## Raw numbers. ```; FFT-based Poisson solver benchmarks; ┌───────────────┬─────┬────────────────────────────────┬────────────┬────────────┬────────────┬────────────┬───────────┬────────┐; │ Architectures │ Ns │ Topologies │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────┼────────────────────────────────┼────────────┼────────────┼────────────┼────────────┼───────────┼────────┤; │ CPU │ 192 │ (Bounded, Bounded, Bounded) │ 560.466 ms │ 563.145 ms │ 563.074 ms │ 566.700 ms │ 192 bytes │ 4 │; │ CPU │ 192 │ (Bounded, Bounded, Periodic) │ 434.408 ms │ 435.974 ms │ 437.003 ms │ 441.246 ms │ 160 bytes │ 2 │; │ CPU │ 192 │ (Bounded, Periodic, Bounded) │ 472.312 ms │ 473.340 ms │ 473.620 ms │ 475.649 ms │ 160 bytes │ 2 │; │ CPU │ 192 │ (Bounded, Periodic, Periodic) │ 333.460 ms │ 334.702 ms │ 334.998 ms │ 336.918 ms │ 160 bytes │ 2 │; │ CPU │ 192 │ (Periodic, Bounded, Bounded) │ 495.012 ms │ 497.853 ms │ 497.462 ms │ 500.181 ms │ 160 bytes │ 2 │; │ CPU │ 192 │ (Periodic, Bounded, Periodic) │ 363.169 ms │ 365.104 ms │ 365.891 ms │ 373.893 ms │ 160 bytes │ 2 │; │ CPU │ 192 │ (Periodic, Periodic, Bounded) │ 349.305 ms │ 350.431 ms │ 352.641 ms │ 371.861 ms │ 160 bytes │ 2 │; │ CPU │ 192 │ (Periodic, Periodic, Periodic) │ 203.109 ms │ 203.653 ms │ 204.025 ms │ 206.834 ms │ 192 bytes │ 4 │; │ GPU │ 192 │ (Bounded, Bounded, Bounded) │ 7.765 ms │ 16.841 ms │ 15.934 ms │ 16.872 ms │ 84.00 KiB │ 904 │; │ GPU │ 192 │ (Bounded, Bounded, Periodic) │ 6.492 ms │ 13.599 ms │ 12.878 ms │ 13.633 ms │ 57.50 KiB │ 651 │; │ GPU │ 192 │ (Bounded, Peri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-773394296:193,benchmark,benchmarks,193,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-773394296,9,"['Test', 'benchmark']","['Tests', 'benchmarks']"
Testability,"Tests are failing rn with an error I cannot reproduce:. ```; Immersed Fields reduction [CPU]: Error During Test at /var/lib/buildkite-agent/builds/tartarus-3/clima/oceananigans/test/test_field_reductions.jl:223; Got exception outside of a @test; MethodError: no method matching arch_array(::CPU, ::BitArray{3}); Closest candidates are:; arch_array(::Distributed, ::Any); @ Oceananigans ~/builds/tartarus-3/clima/oceananigans/src/DistributedComputations/distributed_architectures.jl:263; arch_array(::CPU, ::Array); @ Oceananigans ~/builds/tartarus-3/clima/oceananigans/src/Architectures.jl:59; arch_array(::CPU, ::CuArray); @ Oceananigans ~/builds/tartarus-3/clima/oceananigans/src/Architectures.jl:60; ...; Stacktrace:; [1] condition_operand; @ ~/builds/tartarus-3/clima/oceananigans/src/ImmersedBoundaries/immersed_reductions.jl:26 [inlined]; [2] sum(f::Function, c::Oceananigans.AbstractOperations.GridMetricOperation{Center, Center, Center, ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{Field{Center, Center, Nothing, Nothing, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3440#issuecomment-1915984001:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3440#issuecomment-1915984001,4,"['Test', 'test']","['Test', 'Tests', 'test']"
Testability,Tests are on track to pass so I think this PR is finally ready to be reviewed/merged (with a regrettable amount of technical debt). It's unfortunately too large to be effectively reviewed but I'm happy to make changes if needed (or go over the code on Zoom if anyone would like to do so).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1522#issuecomment-819174689:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1522#issuecomment-819174689,1,['Test'],['Tests']
Testability,Tests are passing! :tada: . I don't see any changes in Project.toml though. Don't forget to bump the version before merging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-963570267:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-963570267,1,['Test'],['Tests']
Testability,"Tests error with `UndefVarError: `settings` not defined`, e.g.,. https://buildkite.com/clima/oceananigans/builds/12688#018afd6b-fb54-446d-a3cc-c4d1c4f99dd1/18-366. This is related I believe to #3238.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3308#issuecomment-1747959143:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3308#issuecomment-1747959143,1,['Test'],['Tests']
Testability,"Tests fail on v0.76.5 on GPU... weird... ```Julia; nc3020@gadi-gpu-v100-0100:/g/data/v45/nc3020/OC.jl$ julia-1.6 --project; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.7 (2022-07-19); _/ |\__'_|_|_|\__'_| |; |__/ |. (Oceananigans) pkg> test; Testing Oceananigans; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Project.toml`; [79e6a3ab] Adapt v3.3.3; [6e4b80f9] BenchmarkTools v1.3.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a2441757] Coverage v1.6.0; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [124859b0] DataDeps v0.7.10; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,4,"['Benchmark', 'Test', 'test']","['BenchmarkTools', 'Testing', 'Tests', 'test']"
Testability,"Tests fail, is this a ""success""?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-870166246:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-870166246,1,['Test'],['Tests']
Testability,Tests fail. Why do we need this?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1785#issuecomment-870459636:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1785#issuecomment-870459636,1,['Test'],['Tests']
Testability,"Tests pass locally on CPU and GPU so PR should be ready for review! Sorry my VS Code trimmed whitespace. @simone-silvestri I can't request your review since you opened the PR, but if you approve via text I can click the approve button and merge lol.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3666#issuecomment-2396924520:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3666#issuecomment-2396924520,1,['Test'],['Tests']
Testability,Tests pass so I guess we don't need these lines.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1755#issuecomment-866358804:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1755#issuecomment-866358804,1,['Test'],['Tests']
Testability,Tests pass so maybe all is fine...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2348#issuecomment-1103413079:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2348#issuecomment-1103413079,1,['Test'],['Tests']
Testability,"Tests pass, so documentation in your courts @iuryt @tomchor. I think for the docstring we can just say that the `grid` needs to be provided if `outputs` are on a different `grid` than `model`. But it could be nice to also put an example in the docs, since I think the whole idea of output on a different grid from the model takes a bit to explain. Eg here: https://clima.github.io/OceananigansDocumentation/stable/model_setup/output_writers/. I can contribute a test if there's desire to put in the documentation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3576#issuecomment-2093564545:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3576#issuecomment-2093564545,2,"['Test', 'test']","['Tests', 'test']"
Testability,Tests pass; this should be ready for review.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2274533468:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2274533468,1,['Test'],['Tests']
Testability,Tests were introduced in #1994 and updated in #2786.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2219#issuecomment-1305160880:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2219#issuecomment-1305160880,1,['Test'],['Tests']
Testability,Tests will fail while we wait for https://github.com/CliMA/CubedSphere.jl to become a fully-fledged Julia package. Hopefully just one more day of waiting... https://github.com/JuliaRegistries/General/pull/30963,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1417#issuecomment-788883027:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1417#issuecomment-788883027,1,['Test'],['Tests']
Testability,"Thank @simone-silvestri, it turns out that I wasn't using CUDA-aware MPI. #3883 addresses this by adding an error if CUDA-aware MPI is not available, so that we are not confronted with a mysterious segmentation fault (which could be caused by any number of issues, not just CUDA-aware MPI). Since we don't have GPU tests right now I will also check to make sure that this runs with a proper CUDA-aware MPI.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2445274146:315,test,tests,315,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2445274146,1,['test'],['tests']
Testability,Thank you @simonbyrne!. @glwagner I tried to fix `all_*_nodes` so that we can `set!` reduced fields (which `model.free_surface` now is) but not sure if `[]` is the best solution. If tests pass we should merge and tag v0.54.1.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1573#issuecomment-819020035:182,test,tests,182,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1573#issuecomment-819020035,1,['test'],['tests']
Testability,"Thank you all for your informative responses! I dug into this a bit... *tl;dr* It looks like the issue _may_ be ""fixed"" on julia 1.10-beta3 (and there is a 1.10-rc1 now). # Benchmarks. Using an empty `Project.toml`, I can reproduce the issue when using julia 1.9:. ```; (base) gregorywagner:test/ $ julia19 --project test.jl [3:18:25]; ┌ Warning: Overwriting existing ./mwe.nc.; └ @ Oceananigans.OutputWriters ~/.julia/packages/Oceananigans/f5Cpw/src/OutputWriters/netcdf_output_writer.jl:359; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (15.100 minutes); [ Info: Executing initial time step...; [ Info: ... initial time step complete (8.244 seconds).; [ Info: Simulation is stopping after running for 15.251 minutes.; [ Info: Simulation time 1.333 hours equals or exceeds stop time 1.333 hours.; 919.254871 seconds (2.19 G allocations: 1.143 TiB, 12.80% gc time, 100.00% compilation time); ```. Way, way too long. (So it's good we have this issue.). But on julia 1.10-beta3 I get. ```; [ Info: Simulation time 1.333 hours equals or exceeds stop time 1.333 hours.; 17.237010 seconds (26.28 M allocations: 1.741 GiB, 2.14% gc time, 99.58% compilation time: <1% of which was recompilation); ```. much better. (Note that on 1.10 we get a lot of annoying warnings which is documented on #3374 and is relatively easily fixed.). Also, things are fine if I use the Oceananigans Manifest.toml, even with julia 1.9:. ```; (base) gregorywagner:Oceananigans.jl/ (main✗) $ julia19 --project test.jl [3:13:09]; ┌ Warning: Overwriting existing ./mwe.nc.; └ @ Oceananigans.OutputWriters ~/Projects/Oceananigans.jl/src/OutputWriters/netcdf_output_writer.jl:359; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (2.381 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (8.751 seconds).; [ Info: Simulation is stopping after running for 12.013 seconds.; [ Info: Simulation time 1.333 hours equals or exceeds",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1807091361:173,Benchmark,Benchmarks,173,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1807091361,3,"['Benchmark', 'test']","['Benchmarks', 'test']"
Testability,"Thank you for all your comments. I will try those lines; Just one question. Is the sintax of. `ΞT = randn(size(T)...) *. shape`. correct? I am getting this error message:. > Warning: No xauth data; using fake authentication data for X11 forwarding.; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI ~/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 16 threads; ERROR: LoadError: syntax: invalid identifier name "".""; Stacktrace:; [1] top-level scope; @ /lustre/scratch5/.mdt0/fspereira/OCEANANIGANS/test/case09/c16_128_128m.jl:197; in expression starting at /lustre/scratch5/.mdt0/fspereira/OCEANANIGANS/test/case09/c16_128_128m.jl:197. Line 197 corresponds to the line above. I removed the `*.shape` and the simulations are now running. Is that ok?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1268557962:902,test,test,902,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1268557962,2,['test'],['test']
Testability,"Thank you for reply, @glwagner!. > Can you clarify --- is the simulation on the right with the FFT-based _direct_ solver, or is it with a preconditioned conjugate gradient solver that use an FFT as a preconditioner?. On the left is FFT-based direct solver. On the right is the PCG solver with the FFT-based solver as a preconditioner. > My suggestion is to use a preconditioned conjugate gradient solver, with the FFT-based solver as a _preconditioner_ (not as the direct solver). It is what the right panel shows, if I am not mistaken. But the simulation crashed after thousands of iterations. I heard that the PCG solver in Oceananigans has not been widely tested, so that is why I turned to the `HeptadiagonalIterativeSolver`. > As for blow up I think the problem happens for very small time-steps? Perhaps try it without adaptive time-stepping for now and also cap the `max_iterations` as a small number. I am doing more testing on this. It is a different issue though. I will open a new issue if I can find a simple way to reproduce the blow up.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3552#issuecomment-2071006297:659,test,tested,659,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3552#issuecomment-2071006297,4,['test'],"['tested', 'testing']"
Testability,"Thank you for your answer. ; I am not sure if I understood your comment. The tests I did were obtained after set!(model,..), and before run. I wrote the T, u, v, and w fields. They were all identical; Is this what you asked me to do?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1273628214:77,test,tests,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1273628214,1,['test'],['tests']
Testability,"Thank you for your feedback @maleadt! What is CUDAnative compilation? If you mean the precompilation phase when CUDAnative is first loaded, then it's not that as I start timing after all packages are loaded. I thought 6-7 minutes was normal/expected as @vchuravy et al. reported similar GPU compilation times for their shallow water model: https://github.com/JuliaLabs/ShallowWaterBench. I haven't done any rigorous benchmarking yet but out of those 6 minutes, ~1.5 minutes are spent on compiling code that creates CuFFT plans (the first plan takes 1.5 minutes then the others take <1 second). From watching the log I'm guessing the other 4.5 minutes are evenly split between setting up the model (creating CuArrays, initializing them, etc.) and the first time step (where the kernels are getting compiled presumably). I don't think we have that many kernels (just 5 bigger ones) but one of them; https://github.com/ali-ramadhan/Oceananigans.jl/blob/2b64d584c79ece0429f2421335ddb6bc0c6c6663/src/time_steppers.jl#L213; has several layers of inlining (it's inlining the majority of the functions in [operators/ops_regular_cartesian_grid_elementwise.jl](https://github.com/ali-ramadhan/Oceananigans.jl/blob/master/src/operators/ops_regular_cartesian_grid_elementwise.jl)) after which it probably balloons up to be a pretty big kernel. They also have tons of arguments crammed in as the structs I was passing weren't `isbitstype` (working on this #59). I should come back and update this issue once we do some proper benchmarking (note to self: nvprof seems like it's being deprecated in favor of Nsight). Caching kernels between sessions sounds tough but will definitely look into timing compilations in CUDAnative, might provide some insight on how to speed things up.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/66#issuecomment-466847765:416,benchmark,benchmarking,416,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/66#issuecomment-466847765,3,"['benchmark', 'log']","['benchmarking', 'log']"
Testability,"Thanks @ali-ramadhan . I think it would be worthwhile for us to see the results from all the benchmarks so I asked @henryg888 to try running all the scripts. If we see anything interesting we could all more results as they are generated, otherwise we will update the 5. At the moment we are waiting for julia to be updated on the servers and then we can do proper benchmarking on the V100's. . I agree that plots would be nice and maybe we can play with that too. Shouldn't be difficult but will certainly discuss it with you.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-845186763:93,benchmark,benchmarks,93,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-845186763,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"Thanks @ali-ramadhan and @navidcy . Adding `const U = 1.0` definitely seemed to help as now it has gone further. However, at this stage I believe it's complaining about the norm. Below is the beginning part of the output, in case this makes sense to others. ```; ERROR: LoadError: scalar getindex is disallowed; Stacktrace:; [1] error(::String) at ./error.jl:33; [2] assertscalar(::String) at /home/fpoulin/.julia/packages/GPUArrays/WV76E/src/host/indexing.jl:41; [3] getindex at /home/fpoulin/.julia/packages/GPUArrays/WV76E/src/host/indexing.jl:96 [inlined]; [4] getindex at /home/fpoulin/.julia/packages/OffsetArrays/lli7H/src/OffsetArrays.jl:300 [inlined]; [5] getindex at ./subarray.jl:257 [inlined]; [6] _getindex at ./abstractarray.jl:1100 [inlined]; [7] getindex at ./abstractarray.jl:1060 [inlined]; [8] iterate at ./abstractarray.jl:986 [inlined]; [9] iterate at ./abstractarray.jl:984 [inlined]; [10] generic_normInf(::SubArray{Float64,3,OffsetArrays.OffsetArray{Float64,3,CuArray{Float64,3}},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:445; [11] normInf at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:536 [inlined]; [12] generic_norm2(::SubArray{Float64,3,OffsetArrays.OffsetArray{Float64,3,CuArray{Float64,3}},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:477; [13] norm2 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:538 [inlined]; [14] norm(::SubArray{Float64,3,OffsetArrays.OffsetArray{Float64,3,CuArray{Float64,3}},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}, ::Int64) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:607; [15] norm(::SubArray{Float64,3",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1477#issuecomment-800208000:367,assert,assertscalar,367,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1477#issuecomment-800208000,1,['assert'],['assertscalar']
Testability,"Thanks @ali-ramadhan and I agree completely. When I was working on the validation schemes I did test these schemes outside of Oceananigans and they did produce the correct slopes of -1 and -6. Sixth order accuracy could actually be attractive for some applications. Getting first order from upwinding may not sound llike much but it does ensure positivity, which might also be helpful for some cases where you want to ensure tracer concentrations are non-negative.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1320#issuecomment-768404599:96,test,test,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1320#issuecomment-768404599,1,['test'],['test']
Testability,Thanks @ali-ramadhan for doing this. I wonder if we could modify this script and run it on `ShallowWaterModel` to start doing some strong scaling tests for that model?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1451#issuecomment-795869987:146,test,tests,146,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1451#issuecomment-795869987,1,['test'],['tests']
Testability,"Thanks @ali-ramadhan for the feedback. What I have so far is only redoing the `one_dimensional_advection_schemes.jl` but I thought this was a good place to start. When we are happy with this it should be easy to do other more interesting cases. I am happy to work with you to merge this with what you did in the other PR, when you have time. I agree that having some `@test` checks is a good idea. . I don't think it's as simple as everything being single as I tried running Oceananigans using single and reproduced the same plot. @glwagner suggested maybe something happens in the pressure solve. Could be but I don't know yet but I'm going to try and test this using ShallowWaterModel, which has no pressure solve. I have used a small enough time step that the scheme hasn't bee a problem, but I agree that RK3 would be better. I was only using QAB2 because I wanted to compare it with what I had programmed, AB2, to get similar results. From what I have seen both QAB2 and AB2 do pretty much the same thing, in this example.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-754024823:369,test,test,369,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-754024823,4,['test'],['test']
Testability,"Thanks @aramirezreyes for creating this, and I think this is a great idea to make things more uniformity. Unfortunately, there are some errors. When I looked at the first one it seemed to have an errror due to another model?. ```; Immersed boundaries test divergent flow solve with hydrostatic free surface models: Error During Test at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/test/test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl:8;   | Got exception outside of a @test;   | ArgumentError: The grid halo (1, 1, 1) must be larger than (3, 3, 3).;   | Stacktrace:;   | [1] HydrostaticFreeSurfaceModel(; grid::ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, CPU}, GridFittedBottom{OffsetMatrix{Float64, Matrix{Float64}}}, CPU}, clock::Clock{Float64}, momentum_advection::CenteredSecondOrder, tracer_advection::WENO5{Float64, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, buoyancy::Nothing, coriolis::Nothing, free_surface::ImplicitFreeSurface{Nothing, Float64, Nothing, Nothing, Symbol, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, forcing::NamedTuple{(), Tuple{}}, closure::Nothing, boundary_conditions::NamedTuple{(), Tuple{}}, tracers::Nothing, particles::Nothing, velocities::Nothing, pressure::Nothing, diffusivity_fields::Nothing, auxiliary_fields::NamedTuple{(), Tuple{}});   | @ Oceananigans.Models.HydrostaticFreeSurfaceModels ~/builds/tartarus-1/clima/oceananigans/src/Models/HydrostaticFreeSurfaceModels/hydrostatic_free_surface_model.jl:113;   | [2] macro expansion;   | @ ~/builds/tartarus-1/c",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1001728185:251,test,test,251,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1001728185,4,"['Test', 'test']","['Test', 'test']"
Testability,"Thanks @glwagner . It seems that the `ramp` changes with the direction of the gradient, but the tracer doesn't. That's why we have a difference. Thanks. This is a rather complicated problem that you are investigating and I wonder whether getting a 3D test for `IsopycnalSkewSymmetricDiffusivity` might be an easier way to find the bug? Just a thought.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107524673:251,test,test,251,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107524673,1,['test'],['test']
Testability,"Thanks @glwagner I'm happy to say this worked! Sorry that I was slow in putting the pieces together. I agree that a test would no be a bad idea. I glanced in `test_time_stepping.jl` and I did not see anything obvious that tested the time stepping. I modfiied `test_shallow_water.jl` to use the wizard but not it uses it for everything. Not necessarily bad, but not sure if this is what we want? Not sure if we want to have two of these functions. If there are not any tests for the wizard in `IncompresibleModel` maybe something should be done there and `ShallowWaterModel` can parallel that?. ```; function time_stepping_shallow_water_model_works(arch, topo, coriolis); grid = RegularCartesianGrid(size=(1, 1, 1), extent=(2π, 2π, 2π), topology=topo); model = ShallowWaterModel(grid=grid, gravitational_acceleration=1, architecture=arch, coriolis=coriolis); set!(model, h=1). wizard = TimeStepWizard(cfl=1.0, Δt=1.0, max_change=1.1, max_Δt=10). simulation = Simulation(model, Δt=wizard, stop_iteration=1); run!(simulation). return model.clock.iteration == 1; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-764674870:116,test,test,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-764674870,3,['test'],"['test', 'tested', 'tests']"
Testability,"Thanks @glwagner and being able to have `Nothing` in the vertical would be nice. No, it's not forced to be flat in the vertical but I really think it should be. I was thinking of putting a test saying if not flat in the vertical then stop, but wasn't sure if this is okay.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1649#issuecomment-839146713:189,test,test,189,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1649#issuecomment-839146713,1,['test'],['test']
Testability,Thanks @glwagner for clarifying and I see the point. Thanks also in advance for fixing it up. . I encountered the same problem when I wanted to test `Flat` and in the end separted out the different dimensinal cases. Not ideal but it worked for my simple purposes. Will be nice to have something more elegant in the tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-820403743:144,test,test,144,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-820403743,4,['test'],"['test', 'tests']"
Testability,"Thanks @glwagner for the feedback. There are tests that were added for both the time-stepping and introducing tracers. https://github.com/CliMA/Oceananigans.jl/blob/swm-shenanigans/test/test_shallow_water_models.jl. I agree that testing shallow_water_model_forcing on the other code, is a good idea. @ali-ramadhan , did you want to try that in this PR or in a subsequent one?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1291#issuecomment-756152081:45,test,tests,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1291#issuecomment-756152081,6,['test'],"['test', 'testing', 'tests']"
Testability,"Thanks @glwagner! We haven't been using background velocities in our setups, so won't have as much to say on that yet. But we'll continue testing the background tracer fluxes. @samlewin, are you using background shear in addition to background tracer fields in your configurations, or is the shear just in your initial conditions? This PR might be relevant.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2276121204:138,test,testing,138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2276121204,1,['test'],['testing']
Testability,Thanks @glwagner. Sorry I didn't test before but I assumed that since we never reached that warning it couldn't cause problems. I'll close this issue since it's clearly out of the scope for Oceananigans,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1911238491:33,test,test,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1911238491,2,['test'],['test']
Testability,Thanks @hennyg888 for sharing this. I thought i tested the last PR with `WENO5` but cleared I messed up with that. Sorry.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1771#issuecomment-871689677:48,test,tested,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1771#issuecomment-871689677,2,['test'],['tested']
Testability,Thanks @hennyg888 for the benchmarks!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-1479892147:26,benchmark,benchmarks,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-1479892147,1,['benchmark'],['benchmarks']
Testability,"Thanks @jagoosw!. Definitely agree it would be good to add some comprehensive tests for particle advection on lat-lon grids. Since this is hopefully a pretty obvious fix, I'll merge this PR and open another to add some comprehensive tests. But happy to do it in this PR if anyone objects.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3855#issuecomment-2430165094:78,test,tests,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3855#issuecomment-2430165094,2,['test'],['tests']
Testability,"Thanks @navidcy for making these changes, this is much better!. I looked in the regression tests and it seems that the `v` velocity is not as close as it used to be. I wonder if this is a matter of the error being slightly bigger?. ```; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;   | Expression: all(test_fields.v .≈ truth_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /net/ocean/home/data44/data5/glwagner/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool);   | @ Main /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345:91,test,tests,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345,6,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"Thanks @navidcy for pointing this out. . I can see that now we loop over `float_types`, but I don't see where this is set to `[Float32, Float64]`, as it is in other tests. Maybe I'm missing something?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1782#issuecomment-870169542:165,test,tests,165,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1782#issuecomment-870169542,1,['test'],['tests']
Testability,"Thanks @navidcy for the quick approval. Strangely, 3 tests have already failed. I looked at one and see that it can't find a file, see below. This is not actually related to this PR but I don't know how to fix it. ```; Precompiling project...;   | ✓ Oceananigans;   | 1 dependency successfully precompiled in 88 seconds (199 already precompiled);   | Testing Running tests...;   | ERROR: LoadError: LoadError: SystemError: opening file ""/data5/glwagner/.julia-7768/compiled/v1.6/Oceananigans/hU93i_huVsp.ji"": No such file or directory;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2598#issuecomment-1146595140:53,test,tests,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2598#issuecomment-1146595140,3,"['Test', 'test']","['Testing', 'tests']"
Testability,Thanks @navidcy. I ll merge when tests pass,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3487#issuecomment-1989677144:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3487#issuecomment-1989677144,1,['test'],['tests']
Testability,"Thanks @qingli411. One obvious way to introduce the concept of dynamic dependencies is to break functionality out into multiple small packages (`OceananigansPlotting`, `OceananigansOutput`, etc). @vchuravy argued that this is a good philosophy for packages; perhaps even more so for a complex project like this one: we may want to keep the core as simple as possible. This would also make the tests run faster, and might make development easier...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/284#issuecomment-501712624:393,test,tests,393,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/284#issuecomment-501712624,1,['test'],['tests']
Testability,"Thanks @sandreza! . This is the Rossby-Haurwitz test case with ω = 0 and g = 100 m/s². This is without momentum advection (`advection = nothing`). It's running for long enough to do a 45 degree rotation. Time step is 20 seconds which corresponds to a ""gravity wave CFL"" of <0.223. Solution seems to bounce around a bit but otherwise just rotates. https://user-images.githubusercontent.com/20099589/114553938-2cdf5b80-9c34-11eb-82d0-8d1c2874b84c.mp4. Keeping everything else the same but switching on momentum advection (`advection = VectorInvariant()`) the solution stays still as it rotates (as it should I think), but a corner seems to blows up at t ≈ 1.639 days no matter how small I make the time step. I'm running inviscid so maybe we need some diffusion? Might also help if we go to higher resolution as well?. https://user-images.githubusercontent.com/20099589/114556283-8cd70180-9c36-11eb-98d6-1aa82c09721e.mp4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1570#issuecomment-818719143:48,test,test,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1570#issuecomment-818719143,1,['test'],['test']
Testability,Thanks @simone-silvestri for adding a GPU test for `FieldTimeSeries`! I've adapted it correctly now and tests pass locally so I think this PR is ready for review. Actually I should add a test that uses the new kwargs. Would do a test where multiple threads open the same `FieldTimeSeries` but don't think we have multi-threaded tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3739#issuecomment-2397361158:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3739#issuecomment-2397361158,5,['test'],"['test', 'tests']"
Testability,"Thanks @simone-silvestri for clarifying. I checkede and the RH-wave is an exact solution in the case of a rigid-lid. Since the hydrostatic model must have a free-surface, taking gravity to be very big should make the solution even better. . It is impressive that everything is stable and can run with such a large time step considering how strong gravity is. . The advection of a bump is a simpler test case but not nearly as interesting as the RH-wave.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1061780426:398,test,test,398,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1061780426,2,['test'],['test']
Testability,Thanks @simone-silvestri! Should we add a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3137#issuecomment-1579112857:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3137#issuecomment-1579112857,1,['test'],['test']
Testability,"Thanks @simone-silvestri. The problem has been fixed. . These tests have all passed for me on CPUs and GPUs on my laptop and a server, and I presume they will for everyone else. But I don't beleive these tests were the regression tests that failed before. I am happy to look into those and revive them one by one, if someone can point me to where I might find them.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1969101963:62,test,tests,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1969101963,3,['test'],['tests']
Testability,"Thanks @tomchor and @raphaelouillon with your help on this PR! I implemented preliminary support for closure tuples, but it still needs to be tested. There's still some work to do to support proper both wall-modeled and wall-resolved LES in complex domains but I think this is a good start.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1107514765:142,test,tested,142,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1107514765,1,['test'],['tested']
Testability,Thanks @tomchor for fixing this PR so that the tests pass. So far what we have only tested the case when there is buoyancy with no motion. It would be nice to have a problem with non-zero velocities work. . I see there is this script [here](https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/flow_over_hills.jl) that we could play with but it does not seem like a minimal working example. Do you know of a simple script that looks at flow over a bump we could look at?. @glwagner also suggested we test this with lat-lon grids and create tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1125406301:47,test,tests,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1125406301,8,['test'],"['test', 'tested', 'tests']"
Testability,"Thanks @vchuravy, with Cassette.jl v0.3.6 the CPU tests all pass now!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-838548217:50,test,tests,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-838548217,1,['test'],['tests']
Testability,"Thanks everyone for your feedback. @vchuravy , great to know that multi-threading is built in! . I agree that profiling would be a good way to determine why we get not great efficiency. I have not used perf but we can look into it. Also, do you know of benchmarking others have done using `KernelAbstractions` on threads that we could look at for comparison?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880844335:253,benchmark,benchmarking,253,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880844335,2,['benchmark'],['benchmarking']
Testability,"Thanks for all the context! . Good points about the time step being more restricted by Coriolis for coarse global simulations and error being dominated by spatial discretization. I'd also be very interested how AB2 compares against RK3 for time-to-solution. I guess this could be readily tested with the non-hydrostatic model simulating turbulence. I'd be curious if RK3 is always faster, or if it's case-dependent. Although it is risky to be on the edge of stability CFL-wise. > It may be a research project to adapt the split-explicit free surface. . Ah I didn't realize that RK3 was not really used for global ocean models, especially with a split-explicit free surface :(. > However, also in this form, successive tendencies do not cancel out. Is this neccessary or is this why Quasi AB2 is technically only first-order accurate? I guess right now with Euler steps the tendency terms do cancel out when an AB2 time step is taken.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3738#issuecomment-2418146640:288,test,tested,288,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3738#issuecomment-2418146640,1,['test'],['tested']
Testability,"Thanks for catching that! However, that's not the issue. One of the things I did (which I discussed a few messages ago) was to move `field_slicer.jl` from OutputWriter to Diagnostics, since I couldn't compile the code in the correct order for dependencies otherwise. (Plus now that FieldSlicer is used in Diagnostics, it's no longer exclusive to OutputWriters.). The test complains that it needs `short_show(fs::FieldSlicer)` in line 490 of `netcdf_output_writer.jl`: https://github.com/CliMA/Oceananigans.jl/pull/1397/files#diff-b0c6a1868ef9229398d7bef0568f8adbb7ad14c88e7a49d0e8598ccb51ea07b5R490. But I'm already `using` `short_show` from `Oceananigans.Diagnostics` in line 10 of the same file: https://github.com/CliMA/Oceananigans.jl/pull/1397/files#diff-b0c6a1868ef9229398d7bef0568f8adbb7ad14c88e7a49d0e8598ccb51ea07b5R10. This appears to work in my local set-up when testing, but somehow fails on github. Any ideas?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787486965:367,test,test,367,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787486965,2,['test'],"['test', 'testing']"
Testability,"Thanks for catching this error. I think you need to add `""KernelFunctionOperation""` to this line:. https://github.com/CliMA/Oceananigans.jl/blob/fd672ea3309eeac945244cab5ddd4feaa99962f3/src/AbstractOperations/show_abstract_operations.jl#L5. The tests do not run interactively so often `show` is not called. We have to test `show` methods explicitly to catch bugs like this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1758#issuecomment-867003526:245,test,tests,245,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1758#issuecomment-867003526,2,['test'],"['test', 'tests']"
Testability,Thanks for doing that and now all test pass. Very nice,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1848#issuecomment-877700061:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1848#issuecomment-877700061,1,['test'],['test']
Testability,"Thanks for embarking on this @glwagner!. > It's a bit of a work in progress. Before merging we need:; > * tests (simple 1D test with temperature to see if budgets are correct?). Just added ""WIP"" (work in progress) to the PR title. We can work on the tests together. For testing, we should be able to extend the 1D column model example: https://github.com/climate-machine/Oceananigans.jl/blob/master/examples/column_model.jl. > Also looks like Travis is failing; not sure why that is. Looks like it's just the one test in the time stepping section that's failing. Maybe something to do with how the boundary conditions are called during the time stepping? The Model test passes so it's not erroring during model initialization/construction. > I propose changing the struct `BoundaryConditions` to `ModelBoundaryConditions` for clarity. I'll always vote for clarity!. Just one initial question: I might be misunderstanding the purpose of `bc.calc` but why not `bc.impose(args...)` instead of `bc.calc(args...)` as we usually say that we _impose_ boundary conditions?. Have to run out but will have a more detailed look later today. Otherwise, looks really neat! On a more practical note, might end up being easier to discuss this PR in person.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/118#issuecomment-471182606:106,test,tests,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/118#issuecomment-471182606,6,['test'],"['test', 'testing', 'tests']"
Testability,"Thanks for looking into this @maleadt!. Hmmm, if it's indeed a multithreading issue then maybe the simple solution is to just turn off multithreading for FFTW during testing?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/636#issuecomment-589249373:166,test,testing,166,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/636#issuecomment-589249373,1,['test'],['testing']
Testability,"Thanks for noticing @francispoulin ! The GPU issue was a failing test, so if tests are passing, there's no issue! Perhaps a gift from St. Nick.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1270#issuecomment-754008736:65,test,test,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1270#issuecomment-754008736,2,['test'],"['test', 'tests']"
Testability,"Thanks for opening this!. I don't have a lot of server/internet access right now so I can't properly test this, but using `.*┌ Warning.*\n` and `.*└ @ Oceananigans.*\n` seems to work. You can test things out here: https://regexr.com/. Also, it seems like there's an extra quote in your regex line?. `DocTestFilters = [Regex(""Warning: defaulting""), Regex(""Oceananigans.Advection"")""]` . maybe should be. `DocTestFilters = [Regex(""Warning: defaulting""), Regex(""Oceananigans.Advection"")]`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2080#issuecomment-979912506:101,test,test,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2080#issuecomment-979912506,2,['test'],['test']
Testability,"Thanks for running these tests, @glwagner. They really do look like the issue in https://github.com/CliMA/Oceananigans.jl/issues/3290. > The easiest fix is to eliminate the pressure separation. Since we're waiting for the IBM-aware pressure solve, we could also just add an option to eliminate the pressure separation that would be `false` by default. That should be pretty easy. And then in the future when we're confident about the new algorithm we can eliminate the pressure separation completely (along with user interface an code simplifications that are possible with no pressure separation). > Another solution is to fix the hydrostatic pressure algorithm. Does it need fixing in this case though? The way I see it this is just a consequence of how the hydrostatic pressure is defined: a vertical integral of `b`, which doesn't play well with the assumption of a vertically-periodic domain. > We should also note that the vertical tridiagonal solve is not correct for vertically-periodic domains. But this is easily solvable (and the above 2 are as well). Cool! We should probably do that as well :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3364#issuecomment-1782238151:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3364#issuecomment-1782238151,2,['test'],['tests']
Testability,Thanks for running these tests. It would be nice to see how MPData performs in a 2D flow. . It's interesting that tweaking the number of iterations doesn't seem to make much difference. I'm a bit skeptical about this scheme though; it seems pretty diffusive and doesn't even beat third-order upwind which is way simpler. I might have introduced a bug although I went through the code again and it looks correct to me. Another possibility is that the high diffusivity is the trade-off for keeping the scheme positivity-preserving?; Godunov's theorem sets some tough standards -- it's not possible to obtain monotonic advection with a linear scheme beyond first order.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3434#issuecomment-1954700946:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3434#issuecomment-1954700946,2,['test'],['tests']
Testability,"Thanks for sharing the code. If it works on conjugagate_gradient_solver then I'd be up for trying it out with our previous tests and see if it passes. Also, I see that people are working on fixing this in `CUDA.jl` and in PR #688 they seems to want to get `p-norm` support. From looking at the code, under the hood, they see to be using LinearAlgebra.tr for all `p > 2`. I tried it for a few and for finite values of `p` it seems not to complain. But for `Inf`, it gives a warning. However, the infinity norm is just the maximum, which we can do quickly so it doesn't need this? . Anyhow, using the above seems like a good idea to try, sometime.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1562#issuecomment-817883819:123,test,tests,123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1562#issuecomment-817883819,1,['test'],['tests']
Testability,"Thanks for spotting the bug! . It was a problem of `immersed_cell` trying to interrogate the first halo at a `Face` location, launching `inactive_cell` at `i` and `i-1` (where `i-1` was out-of-bounds). (this was also the reason for the shallow water tests not passing so we caught two birds with one stone!). I didn't come across it because I always use 4 halos regardless of the advection scheme. I changed a bit the code. Now it should work without requiring the value at `Face`s in the halo (it is necessary _only_ for vector invariant flavours of WENO for which the halo must be 4 anyways, so there should be no problem!)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1157081405:250,test,tests,250,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1157081405,1,['test'],['tests']
Testability,"Thanks for testing out the `VerticallyStretchedRectilinearGrid`!. > 1. The `OutputWriter` is complaining that there is no field `zC`. Right yeah `RegularRectilinearGrid` called it `grid.zC` but `VerticallyStretchedRectilinearGrid` calls it `grid.zᵃᵃᶠ` to be more consistent with the curvilinear grids being added, but the output writers might not know this yet. We should add some output writer tests for the different grids now. I think this might be an issue with `RegularLatitudeLongitudeGrid` as well. > 2. It didn't work with the `FT=Float64` argument. Ah how did you do call the constructor? Julia uses a `semicolon` to separate regular arguments from keyword arguments (https://docs.julialang.org/en/v1/manual/functions/#Keyword-Arguments). So maybe you meant to call. ```julia; grid = VerticallyStretchedRectilinearGrid(Float64, ...); ```. instead of. ```julia; grid = VerticallyStretchedRectilinearGrid(FT=Float64, ...); ```. ?. I guess it could be a bit confusing since `FT` is only what the function calls it but seems to be standard to include it in the docstring to give some idea of what the argument is. Well, the real solution would be a better docstring with examples. > 3. It asks me to use: `halo = (3, 3, 3)` and not `halo = (1, 1, 1)` . Yes. If you use higher-order advection schemes you might need larger halos. `RegularRectilinearGrid` automatically increased the halo size as needed but `VerticallyStretchedRectilinearGrid` doesn't do this yet. Should be possible to do it automatically though. > 4. For testing purposes, I tried using a linear grid with `zF = collect(-160:2.5:0)`. I ran for 1 short timestep and it produces NaN's in the `u` field. However, using the same linear grid with `RegularRectilinearGrid(size=(Nx, Ny, Nz), extent=(Δx*Nx, Δy*Ny, Δz*Nz), topology = (Periodic, Bounded, Bounded))` works fine. Hmmm, how small was the time step? There's a division by Δt in the pressure solve so that could blow things up but usually only if `Δt = 0` I think. Also, does",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1429#issuecomment-791560413:11,test,testing,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1429#issuecomment-791560413,2,['test'],"['testing', 'tests']"
Testability,"Thanks for the additional changes and it seems to be doing much better! Still three tests that fail. I looked ath the initialize environments and saw what I copied below. It seems to have probelms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.Pk",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:84,test,tests,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445,1,['test'],['tests']
Testability,Thanks for the discussion @glwagner @tomchor @wenegrat I see that it was the initial condition that was unsuitable. Will read Wenegrat & Thomas (2020) to better understand how you set up your simulation there. > Does this keep a resting fluid stratified in the direction of gravity at rest? John. Ah that would indeed be a good test: set up an inviscid ocean stratified in the direction of g and ensure that the velocities remain (close to) zero. Ah interesting result @navidcy... Your setup looks good to me but not sure I can explain it either. Almost weirdly looks like the bubble is hitting an invisible boundary haha (I expected the bubble to keep rising and not spread out so suddently...),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-738007469:328,test,test,328,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-738007469,1,['test'],['test']
Testability,"Thanks for the effort, @ali-ramadhan, but I just tested this and the results are exactly the same!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1520#issuecomment-810355766:49,test,tested,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1520#issuecomment-810355766,1,['test'],['tested']
Testability,"Thanks for the explaination @glwagner and I agree, saving this question for future validation and/or convergence tests is a good idea.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1639#issuecomment-838848318:113,test,tests,113,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1639#issuecomment-838848318,1,['test'],['tests']
Testability,"Thanks for the explaination. . It seems the two errors are for the CPU and GPU case that involve testing the advection scheme, but only one time stepping scheme test fails. ```; Advection schemes: Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-9/clima/oceananigans/test/test_time_stepping.jl:261; --;   | Test threw exception;   | Expression: time_stepping_works_with_advection_scheme(arch, advection_scheme);   | TaskFailedException;   |  ;   | nested task error: MethodError: div_Uu(::Int64, ::Int64, ::Int64, ::RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField, Oceananigans.Fields.ZeroField, Oceananigans.Fields.ZeroField}}, ::Field{Face, Center, Center, CPU, O; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1790#issuecomment-871454732:97,test,testing,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1790#issuecomment-871454732,5,"['Test', 'test']","['Test', 'test', 'testing']"
Testability,"Thanks for the feedback @glwagner and @tomchor . I will respond soon but I have an updated I wanted to share. I did a simulation in each for 100 time steps a few times each. I found sometimes the second simulation was way faster than the first. For different advection schemes I found, to my surprise, they do scale differently. ```; scheme ratio; ====== ===; C2 1.7; U3 2.4; C4 3; U5 2.4; W5 3.4; ```. I would not call these offical benchmarks but more back of the envelop calculations (between friends). But these numbers are, mostly, around 3, which is what I expected. . For fun, I will do the same thing with GPUs (and will find out if my new code runs on a GPU). I guess one mystery is why is it that my actual simulation ran so slowly? I will try it again for 2 hours instead of 2 days and see how the scalings look.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1564#issuecomment-816767845:434,benchmark,benchmarks,434,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1564#issuecomment-816767845,2,['benchmark'],['benchmarks']
Testability,"Thanks for the reminder @navidcy. I don't think the .md's in Docs are automatically updated. I will update https://github.com/CliMA/Oceananigans.jl/blob/master/docs/src/appendix/benchmarks.md with the latest benchmark results. . On a second note, do we want to show the benchmark results with WENO5 or with no specified advection scheme?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877445139:178,benchmark,benchmarks,178,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877445139,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Thanks for the review @glwagner. I made the changes and also added a test that fails (well CUDA crashes) without this PR, and passes with this PR. > Does the annotation `::FT` work?. Unfortunately not. I ended up getting GPU exceptions instead: https://github.com/CliMA/Oceananigans.jl/issues/3870#issuecomment-2441915837",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2444999725:69,test,test,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2444999725,1,['test'],['test']
Testability,"Thanks for working on this @josuemtzmo! I do tend to avoid file splitting since one file, even if it is huge, simplifies data analysis. And most of the time, the data analysis can be done on the fly alleviating the need for huge outputs. > Do we test this?. I don't think so. Definitely a good idea to do so since a wrong implementation can result in data loss. Usually Julia would stop then re-run the entire script so would a test look something like: set up a simulation with a checkpointer, run it for a some iterations with some file splitting output, then set up the exact same simulation (copy paste) and run it for some more iterations and more file splitting, then check that the output is all correct?. There may be some edge cases too, e.g. zero or only one output actuation after picking up, or before the initial simulation ends.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3818#issuecomment-2397594302:246,test,test,246,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3818#issuecomment-2397594302,4,['test'],['test']
Testability,"Thanks for working on this @navidcy! I'll try to `git merge master` which should fix some tests and then I'll look at fixing the other failures. > A question that comes about is that after this PR: do we test *only* on v1.6? If so, how are we making sure that code works smooth on v1.5? Should we test on both? Should we bump the julia compat requirement in the `Project.toml` file to `^1.6`?. Ideally yeah we would test on both 1.5 and 1.6 but I don't think we have the CI resources to do so :(. We could set up some GitHub Actions pipelines to test Mac and Windows with 1.5 and only run a subset of the tests so it doesn't massively slow down CI. It wouldn't be comprehensive but we'd get more coverage. Not sure if we'll have to only support Julia 1.6+ only soon, but that would save us from having to test on 1.5. We might not want to jump ship to 1.6 too soon though. I experienced longer compilation times when using Julia 1.6 in developing PR #1522 so I had to switch back to 1.5. Maybe I just had a weird setup though, I should investigate more carefully. I could be the only one who's had issues... Might be good to beta test 1.6 a little bit before switching completely.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-821192104:90,test,tests,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-821192104,8,['test'],"['test', 'tests']"
Testability,"Thanks to @glwagner's #1821 fix, `WENO5()` now works for `benchmark_incompressible_model.jl` for both Float32 and Float64. ; Very notable improvements on speedup. We're up from 150 to 450 times speedup for Float32, and up from 120 to 350 times speedup for Float64 on a 256^3 grid.; Here are the results of the latest benchmark with the latest master:; ```; Incompressible model benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬──────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼──────────┼────────┼─────────┤; │ CPU │ Float32 │ 32 │ 34.822 ms │ 34.872 ms │ 35.278 ms │ 38.143 ms │ 1.38 MiB │ 2302 │ 10 │; │ CPU │ Float32 │ 64 │ 265.408 ms │ 265.571 ms │ 265.768 ms │ 267.765 ms │ 1.38 MiB │ 2302 │ 10 │; │ CPU │ Float32 │ 128 │ 2.135 s │ 2.135 s │ 2.136 s │ 2.138 s │ 1.38 MiB │ 2302 │ 3 │; │ CPU │ Float32 │ 256 │ 17.405 s │ 17.405 s │ 17.405 s │ 17.405 s │ 1.38 MiB │ 2302 │ 1 │; │ CPU │ Float64 │ 32 │ 37.022 ms │ 37.179 ms │ 37.335 ms │ 39.017 ms │ 1.77 MiB │ 2302 │ 10 │; │ CPU │ Float64 │ 64 │ 287.944 ms │ 288.154 ms │ 288.469 ms │ 290.838 ms │ 1.77 MiB │ 2302 │ 10 │; │ CPU │ Float64 │ 128 │ 2.326 s │ 2.326 s │ 2.326 s │ 2.327 s │ 1.77 MiB │ 2302 │ 3 │; │ CPU │ Float64 │ 256 │ 19.561 s │ 19.561 s │ 19.561 s │ 19.561 s │ 1.77 MiB │ 2302 │ 1 │; │ GPU │ Float32 │ 32 │ 4.154 ms │ 4.250 ms │ 4.361 ms │ 5.557 ms │ 2.13 MiB │ 6033 │ 10 │; │ GPU │ Float32 │ 64 │ 3.383 ms │ 3.425 ms │ 3.889 ms │ 8.028 ms │ 2.13 MiB │ 6077 │ 10 │; │ GPU │ Float32 │ 128 │ 5.564 ms │ 5.580 ms │ 6.095 ms │ 10.725 ms │ 2.15 MiB │ 7477 │ 10 │; │ GPU │ Float32 │ 256 │ 38.685 ms │ 38.797 ms │ 39.548 ms │ 46.442 ms │ 2.46 MiB │ 27721 │ 10 │; │ GPU │ Float64 │ 32 │ 3.309 ms │ 3.634 ms │ 3.802 ms │ 5.844 ms │ 2.68 MiB │ 6033 │ 10 │; │ GPU │ Float64 │ 64 │ 3.330 ms │ 3.648 ms │ 4.008 ms │ 7.808 ms │ 2",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877439491:317,benchmark,benchmark,317,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877439491,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Thanks! I often forget this!. but then, how do you explain that this test passes without gilling the halos?? . https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/test/test_computed_field.jl#L372",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557165977:69,test,test,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557165977,2,['test'],['test']
Testability,"Thanks! I'll get the tests to pass completely then merge! I forgot the previous comments, thanks for reminding me, I will address them now. . For replacing the Regular and Vertically stretched grid it shouldn't be a huge problem but there might be some conflicts. Major ones might be fields like `Δx` being substituted by `Δxᶠᵃᵃ` and `Δxᶜᵃᵃ` or making sure that architecture is always consistent between grid, models and fields",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-961968320:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-961968320,1,['test'],['tests']
Testability,"Thanks, @glwagner!!; I will test that and see how it goes.; I really think it would be nice for us to develop this functionality in for the writers.; Saving a subset of the simulation is pretty common when running high-res simulations.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2033093316:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2033093316,1,['test'],['test']
Testability,"Thanks, that's helpful @jagoosw. Just one more thought... I realized after I did the testing for my previous post that the hang occurs at ""Initializing simulation..."". This implies that the problem isn't with any constructors (eg the `Field` constructor above) but rather the actual computations, probably. A big change from 0.85 (which [occurred in 0.88](https://github.com/CliMA/Oceananigans.jl/releases/tag/v0.88.0)) is the [introduction of the `KernelParameters` abstraction](https://github.com/CliMA/Oceananigans.jl/pull/3125) for offsetting indices within kernels, used here:. https://github.com/CliMA/Oceananigans.jl/blob/70536571523ad2eb71fd9a2200121eca63998ac4/src/AbstractOperations/computed_field.jl#L78. and I think other places, which @simone-silvestri can advise. `KernelParameters` extends some `KernelAbstractions` functionality in a non-trivial way I think. Maybe there are some things we can improve there:. https://github.com/CliMA/Oceananigans.jl/blob/main/src/Utils/kernel_launching.jl. Even if the issue is fixed on 1.10, I think we still ought to understand this problem better since it might come back in the future (things like this often do...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1808580651:85,test,testing,85,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1808580651,1,['test'],['testing']
Testability,"Thanks, this looks good and I can't think of cases where the test would erroneously pass now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1716027943:61,test,test,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1716027943,1,['test'],['test']
Testability,"That cannot be true... The regression test should take around two hours, which yes is quite a lot and we should maybe split it into two... I don't know what is reason for the solver test to slow down, might it be because of the forced shutdown of saturday?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2050#issuecomment-970254433:38,test,test,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2050#issuecomment-970254433,2,['test'],['test']
Testability,"That explains why I have never done it. @simone-silvestri , could you restart the test when you have a minute?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2607#issuecomment-1158035473:82,test,test,82,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2607#issuecomment-1158035473,1,['test'],['test']
Testability,That is ironically an error in the error printer. Can you convert that to an assertion so we can see the actual error message?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3360#issuecomment-1786195710:77,assert,assertion,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3360#issuecomment-1786195710,1,['assert'],['assertion']
Testability,That was quick! I think we didn't rush to resolve #1377 since it's a pretty major breaking change but as long as tests pass (and people agree with the change) we should tag a release!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1386#issuecomment-782294704:113,test,tests,113,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1386#issuecomment-782294704,1,['test'],['tests']
Testability,"That's a good point. As a newcomer it will be nice to have some documentation of this, since otherwise, it is hard to know how to test specific files in the test suit.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-2000008000:130,test,test,130,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-2000008000,2,['test'],['test']
Testability,That's a good test too! Might be nice to do both tests in fact.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883756091:14,test,test,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883756091,2,['test'],"['test', 'tests']"
Testability,"That's awesome, thanks @arcavaliere!. I think if we can get a printing format similar to [MicroLogging.jl](https://github.com/c42f/MicroLogging.jl) with a timestamp on the left and log level + line location then we'll have a great logger we can merge into the code and start using!. And once we start using it we can tweak and improve it as we learn more. But let me know if you had other features in mind!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-544481969:181,log,log,181,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-544481969,2,['log'],"['log', 'logger']"
Testability,That's definitely good! It's not an issue that would crash a simulation but next time I'm editing `test_output_writers.jl` I'll remember to add some simple tests for this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1299#issuecomment-758166414:156,test,tests,156,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1299#issuecomment-758166414,2,['test'],['tests']
Testability,"That's fair. I think it's preferred generally to implement features when there's a strong need for it. The reason to wait is because code features (and their tests) often (not always) impose a maintenance burden on developers. So, given that supporting some features might slow down the pace of code development, it's in the interest of both users and developers to keep low-priority features out of the code for as long as possible / forever. Rotating a domain is an interesting use case. Other solutions are certainly cleaner, but pragmatism may force us in that direction.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2262#issuecomment-1047178584:158,test,tests,158,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2262#issuecomment-1047178584,1,['test'],['tests']
Testability,"That's great news @ali-ramadhan . I guess by looking at your code I can learn how to adapt it to `ShallowWaterModel`. Maybe I will start by doing some tests for the two-dimensional turbulence example, or has someone done that already? By that I mean checking scalabiilty.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-786696921:151,test,tests,151,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-786696921,1,['test'],['tests']
Testability,"That's indeed better. Sure, if tests pass and images appear in the docs preview then merge! :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-876024011:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-876024011,1,['test'],['tests']
Testability,The Bickley jet might be a good example to use as a regression test!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1137962212:63,test,test,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1137962212,1,['test'],['test']
Testability,"The CPU tests all pass, but it seems like the GPU server isn't working? Does something need to be rebooted?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3440#issuecomment-1908410418:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3440#issuecomment-1908410418,1,['test'],['tests']
Testability,"The JuliaGPU CI has AMD machines, but Oceanigans test-suite is probably to large.; We could support a smaller test-case. Also see https://github.com/SciML/DiffEqGPU.jl for an extension based approach and I am happy to add missing functionality to KernelAbstractions. @jpsamaroo might be able to help with issues arising from AMDGPU.jl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1937273161:49,test,test-suite,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1937273161,2,['test'],"['test-case', 'test-suite']"
Testability,The MG solver tests fail on the curvilinear grid.; https://buildkite.com/clima/oceananigans/builds/8380#0182bd4a-b305-42af-9390-a05e5b039826. I'm wondering whether it's because the grid spacing is not uniform...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1223407174:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1223407174,1,['test'],['tests']
Testability,"The PR isn't merged. To use the code on this PR, you have to install it at the Julia REPL by first typing `]` to enter package manager mode, and then writing:. ```julia; pkg> add Oceananigans#glw/closure-constant; ```. Once you've updated your local version of Oceananigans to use the code on this PR, you can test the source code changes that we've made.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3370#issuecomment-1801867651:310,test,test,310,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3370#issuecomment-1801867651,1,['test'],['test']
Testability,"The Partial cell method is bugged at the moment. @jm-c is working on correcting the bugs. An example is the output of `_immersed_cell` https://github.com/CliMA/Oceananigans.jl/blob/3c4785c03a9eb649a3636b79664134d1c802083b/src/ImmersedBoundaries/partial_cell_bottom.jl#L97-L102; which is incoherent with the notion of a `minimum_fractional_cell_height`. I.e., the test that checks whether a cell is immersed or not should include the minimal fractional cell height. ; Something more along these lines; ```julia; @inline function _immersed_cell(i, j, k, underlying_grid, ib::PartialCellBottom); # Face node below current cell; z = znode(i, j, k, underlying_grid, c, c, f); h = @inbounds ib.bottom_height[i, j, 1]; ϵ = ib.minimum_fractional_cell_height; # z + Δz is equal to the face above the current cell; Δz = Δzᶜᶜᶜ(i, j, k, ibg.underlying_grid); return z + Δz * ϵ ≤ h ; end; ```. There are other inconsistencies as we find out that simple examples still crash also with this fix. ; A simple case for which partial cells lead to the simulation crashing (independently on the time step size) is the [internal tide](https://github.com/CliMA/Oceananigans.jl/blob/main/examples/internal_tide.jl) example. If you want to contribute we are trying to correct the implementation over in #3682.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/775#issuecomment-2274573004:363,test,test,363,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/775#issuecomment-2274573004,1,['test'],['test']
Testability,The RH test: . https://user-images.githubusercontent.com/22668662/114433316-ab35f200-9b8f-11eb-877d-f4be82e1a559.mp4,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1570#issuecomment-817976070:7,test,test,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1570#issuecomment-817976070,1,['test'],['test']
Testability,"The Y-partition tests with Periodic longitude do not pass because of one point near the boundary where values are really low. I am kind of confident that the implementation is correct, we might be hitting a Floating point ordering problem that does not allow perfect reproducibility. I am considering relaxing the relative tolerance for distributed tests because I do not really see a way out for regression tests.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765215973:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765215973,3,['test'],['tests']
Testability,"The `ShallowWaterModel` tests are failing:. ```; [2021/02/17 14:56:04.486] INFO Testing time-stepping ShallowWaterModels [CPU(), (Periodic, Periodic, Bounded)]...; --;   | Time-stepping ShallowWaterModels [CPU(), (Periodic, Periodic, Bounded)]: Error During Test at /storage7/buildkite-agent/builds/tartarus-mit-edu-3/clima/oceananigans/test/test_shallow_water_models.jl:118;   | Test threw exception;   | Expression: time_stepping_shallow_water_model_works(arch, topo, nothing, nothing);   | type ShallowWaterModel has no field immersed_boundary; ```. I think what we really want to do is define a fallback `correct_immersed_tendencies!(args...) = nothing` in the `TimeSteppers` module (so that other models which do not have immersed boundary functionality can be time-stepped), and move the current definition of `correct_immersed_tendencies!` that's specific to `IncompressibleModel` to the `Models.IncompressibleModels` module. @whitleyv let me know what you'd like to do: you can make these changes, or I can help either by pair programming or making them myself.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1368#issuecomment-781615560:24,test,tests,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1368#issuecomment-781615560,5,"['Test', 'test']","['Test', 'Testing', 'test', 'tests']"
Testability,The actual bottlenecks (as seen from the profile) are the transpose steps. The FFT steps are basically irrelevant.; This file shows how to setup and perform the transposes; https://github.com/CliMA/Oceananigans.jl/blob/ss/distributed-fft/test/test_distributed_transpose.jl,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-1986306179:238,test,test,238,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-1986306179,1,['test'],['test']
Testability,"The advantage is clearer for diagnostics: with a dictionary (or other named/associative collection) it will presumably be easier to keep track of the elements of `model.diagnostics` for the purpose of logging/printing, or saving their values... ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/362#issuecomment-523545677:201,log,logging,201,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/362#issuecomment-523545677,1,['log'],['logging']
Testability,"The branch `fp-ss/shallow-water-version2` has (hopefully) corrected the problems with the tendency calculations brought up by @glwagner in #2928 (and elsewhere). Does someone what to take a look to confirm that we have done this correctly? If yes the changes start [here](https://github.com/CliMA/Oceananigans.jl/blob/f2511962ca15f3aaf87d2571e3551e59dc05c694/src/Models/ShallowWaterModels/solution_and_tracer_tendencies.jl#L7). . I thought the next step might be to add in the regression tests one by one, which were removed in #3050. I am going to look into `test_shallow_water_models.jl` next to see what runs and what doesn't with the current code.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1966700098:488,test,tests,488,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1966700098,1,['test'],['tests']
Testability,The build log says that `immersed_boundary` is used on line 99 of `shallow_water_model.jl` even though it does not exist.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-843327575:10,log,log,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-843327575,1,['log'],['log']
Testability,"The changes made still have some problems. ```. [2021/05/18 14:09:15.226] INFO Testing halo communication...; &nbsp; | Halo communication: Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:365; &nbsp; | Expression: all(north_halo(field, include_corners = false) .== arch.connectivity.north); &nbsp; | Stacktrace:; &nbsp; | [1] test_triply_periodic_halo_communication_with_411_ranks(::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:365; &nbsp; | [2] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:477 [inlined]; &nbsp; | [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [4] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:475 [inlined]; &nbsp; | [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [6] top-level scope at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:448; &nbsp; | Halo communication: Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | Expression: all(south_halo(field, include_corners = false) .== arch.connectivity.south); &nbsp; | Stacktrace:; &nbsp; | [1] test_triply_periodic_halo_communication_with_411_ranks(::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | [2] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:477 [inlined]; &nbsp; | [3] macro expansion at /buildworker/worker/package_linux64/build",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802:79,Test,Testing,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802,8,"['Test', 'test']","['Test', 'Testing', 'test']"
Testability,"The code in https://github.com/CliMA/Oceananigans.jl/blob/master/src/OutputWriters/time_average_outputs.jl is a utility / user-convenience function for wrapping outputs passed to `JLD2OutputWriter` and `NetCDFOutputWriter` in a `WindowedTimeAverage`. It does not involve any averaging. If you can explain why you think it is convoluted, perhaps we can improve it. `WindowedTimeAverage` is defined in this file: https://github.com/CliMA/Oceananigans.jl/blob/master/src/OutputWriters/windowed_time_average.jl. The key part is `accumulate_result!`:. https://github.com/CliMA/Oceananigans.jl/blob/d17f926b2c4787bf44f619439e81bfb82937aabf/src/OutputWriters/windowed_time_average.jl#L126-L144. Can you explain why isn't this captured in our tests?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872452104:735,test,tests,735,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872452104,1,['test'],['tests']
Testability,The dependency on OrthogonalSphericalShellGrids here is blocking the progress (the `SplitExplicitAuxiliaryFields` type has changed in this PR). How do we deal with this? We could remove the dependency in the tests of Oceananigans and move those tests over at OrthogonalSphericalShellGrids,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3841#issuecomment-2431512977:208,test,tests,208,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3841#issuecomment-2431512977,2,['test'],['tests']
Testability,The diff coverage is `83.56%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #930 +/- ##; ==========================================; + Coverage 72.84% 73.05% +0.21% ; ==========================================; Files 194 197 +3 ; Lines 5719 5823 +104 ; ==========================================; + Hits 4166 4254 +88 ; - Misses 1553 1569 +16 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Fields/Fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `75.00% <ø> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | |; | [test/test\_averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2F2ZXJhZ2VkX2ZpZWxkLmps) | `0.00% <0.00%> (ø)` | |; | [src/Grids/grid\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `82.50% <30.00%> (-4.78%)` | :arrow_down: |; | [src/Fields/abstract\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hYnN0cmFjdF9maWVsZC5qbA==) | `60.37% <83.33%> (+7.43%)` | :arrow_up: |; | [src/BoundaryConditions/zero\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy96ZXJvX2hhbG9fcmVnaW9ucy5qbA==) | `78.94% <87.50%> (+2.47%)` | :arrow_up: |; | [src/Fields/averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hdmVyYWdlZF9maWVsZC5qbA==) | `94.44% <94.44%> (ø)` | |; | [src/AbstractOperation,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/930#issuecomment-690826704:1327,test,test,1327,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/930#issuecomment-690826704,2,['test'],['test']
Testability,"The difference appears to be that the code on #1780 uses the argument `float_type`, whereas this test only changes `eltype(grid)`. `float_type` only determines the floating point type of the `Clock` and `buoyancy`. So I'm not sure why or how this causes the test in #1780 to fail. Either way I think the `float_type` argument has caused enough trouble so I'm trying to banish it in #1786 . Once it's gone let's try to resolve this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1782#issuecomment-870458699:97,test,test,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1782#issuecomment-870458699,2,['test'],['test']
Testability,"The difference operator doesn't use the grid metrics --- but maybe you mean the derivative / gradient operator?. Such a test would catch this issue, it's true. We could use a simple test with linear gradients. There might already be such a test, but not for all grids... ?. I think the fact that the cell spacings don't add up to the grid size could be an even worse problem because it means that integrals / budgets are not correct. But I'm not sure since the spacings at cell centers might be more important (these lines only manipulate the spacing at cell interfaces).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1755#issuecomment-866287834:120,test,test,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1755#issuecomment-866287834,6,['test'],['test']
Testability,The difficulties in getting a test to fail on #1784 could mean that the issue this PR resolves is machine dependent. But I'm not sure.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-870838764:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-870838764,1,['test'],['test']
Testability,"The distributed regression tests are still failing but I'm not sure how to go about getting them to work because I can't work out how to run mpi locally, is it possible to do e.g. `mpiexec -n 4 ...` locally just on a single machine?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2181606447:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2181606447,1,['test'],['tests']
Testability,The docs log complaints about the Eady turbulence example giving NaNs... Did anything changed in the code?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-797817214:9,log,log,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-797817214,1,['log'],['log']
Testability,The documentation build probably just needs to be restarted. Fixing the distributed test errors and committing the changes will trigger this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842647371:84,test,test,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842647371,1,['test'],['test']
Testability,The documentation buildkite test was failing for #1930 already so I don't think that it is what broke it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1949#issuecomment-902789630:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1949#issuecomment-902789630,1,['test'],['test']
Testability,"The dynamics test exhibits some ""breathing"":. https://user-images.githubusercontent.com/15271942/109686870-acb3d980-7b50-11eb-86c5-437fb7257d6b.mp4. https://user-images.githubusercontent.com/15271942/109686850-a887bc00-7b50-11eb-8939-803a1de29261.mp4. this could be because the initial condition doesn't satisfy discrete geostrophic balance, or a continuing issue with the coriolis implementation. However, I suggest we merge this PR now (since it has some bug fixes) and continue working on the validation tests in a future PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1404#issuecomment-789067613:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1404#issuecomment-789067613,2,['test'],"['test', 'tests']"
Testability,"The error originates from this line:. https://github.com/CliMA/Oceananigans.jl/blob/d6deb950cdcd489ceb872568663ecf5b2c8ccb2a/src/Fields/field_tuples.jl#L26. So the first arg `arch` is `Float64` here. I believe the problem is this line:. https://github.com/CliMA/Oceananigans.jl/blob/d6deb950cdcd489ceb872568663ecf5b2c8ccb2a/test/test_boundary_conditions_integration.jl#L139. where only one positional argument is provided (and that's `Float64`). If only one positional argument is provided, then that's `architecture`:. https://github.com/CliMA/Oceananigans.jl/blob/d6deb950cdcd489ceb872568663ecf5b2c8ccb2a/src/Grids/rectilinear_grid.jl#L256-L257. This propagates down to `XFaceField`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2103#issuecomment-989369767:324,test,test,324,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2103#issuecomment-989369767,1,['test'],['test']
Testability,The error with the test set `CPU hydrostatic free surface` model is probably related to a preconditioner that is not symmetric positive definite.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3778#issuecomment-2351283415:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3778#issuecomment-2351283415,1,['test'],['test']
Testability,"The errors of the `cpu-simulation-tests` are of this kind:. ```julia; JLD2 output writer [CPU]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-2/clima/oceananigans/test/test_jld2_output_writer.jl:135; --;   | Expression: wT == zero(FT);   | Evaluated: -1.2037062f-34 == 0.0; ```. which is something that should be solved by replacing `==` with `\approx`, but I wonder why this used to pass before but isn't passing now. In other words: I'm not sure if merely replacing equality with approximate equality is the right way to solve this test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-994942677:34,test,tests,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-994942677,4,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"The first build to exhibit the issue (all tests pass except docs) appears to be [1881](https://buildkite.com/clima/oceananigans/builds/1881#481a169e-486f-478f-973e-41c3b9bbc1da), and the last build to pass before it is [1878](https://buildkite.com/clima/oceananigans/builds/1878#9e70195f-804f-4b9d-9398-e5ddd1fe8594). Two packages are different:. * [`ArrayInterface` was bumped from 3.1.6 to 3.1.7](https://github.com/JuliaArrays/ArrayInterface.jl/pull/138/files); * [`ChainRulesCore` was bumped from 0.9.36 to 0.9.37](https://github.com/JuliaDiff/ChainRulesCore.jl/pull/329/files). No idea if this is progress...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-817067508:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-817067508,1,['test'],['tests']
Testability,The first thing maybe is to add a test that catches the bug.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3682#issuecomment-2297211763:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3682#issuecomment-2297211763,1,['test'],['test']
Testability,"The following errors but I don't think it should... ```Julia; julia> grid = RectilinearGrid(size=3, z= x->x^2, topology=(Flat, Flat, Bounded)); ERROR: AssertionError: c₁ < c₂; Stacktrace:; [1] generate_coordinate(FT::Type{Float64}, topo::Flat, N::Int64, H::Int64, node_interval::Tuple{Float64, Float64}, coordinate_name::Symbol, arch::CPU); @ Oceananigans.Grids ~/Research/OC9.jl/src/Grids/grid_generation.jl:100; [2] RectilinearGrid(architecture::CPU, FT::DataType; size::Int64, x::Nothing, y::Nothing, z::Function, halo::Nothing, extent::Nothing, topology::Tuple{DataType, DataType, DataType}); @ Oceananigans.Grids ~/Research/OC9.jl/src/Grids/rectilinear_grid.jl:273; [3] RectilinearGrid; @ ~/Research/OC9.jl/src/Grids/rectilinear_grid.jl:254 [inlined]; [4] top-level scope; @ REPL[4]:1; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3331#issuecomment-1757833504:151,Assert,AssertionError,151,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3331#issuecomment-1757833504,1,['Assert'],['AssertionError']
Testability,The implicit free surface solver tests are also failing on the main branch: https://buildkite.com/clima/oceananigans/builds/1644 but this seems like it would be a trivial fix.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1484#issuecomment-800523987:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1484#issuecomment-800523987,1,['test'],['tests']
Testability,"The issue was that, prior to the update the fill_halo_region! function, the test in validation/mesoscale/baroclinic_adjustment.jl , which in particular, uses the hydrostatic model with an explicit free surface, would produce different answers when run twice after several thousand timesteps. This typically happens when there is a race condition in the code and this particular one was hard to find since it occurs only after several timesteps have occurred. The reason for ""potential"" in the title of the PR is that I do not understand why this race condition exists in the first place, since I have not seen this in any other Oceananigans model, including Hydrostatic + Implicit Free Surface or the NonHydrostatic Model",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-920473363:76,test,test,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-920473363,1,['test'],['test']
Testability,"The logic should be reversed, we should have to include ""compute_tendencies=false"" as an _optimization_. Rather than what's implemented here, which does the unsafe thing by default. The problem with this logic is that it makes it harder to implement new models. The optimizations should be the optional thing basically, if one is naive, then things should work even if they are slower than they could be",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3741#issuecomment-2313416515:4,log,logic,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3741#issuecomment-2313416515,2,['log'],['logic']
Testability,"The main rationale for not having an immersed boundary conditions example was because we regarded it as an experimental feature, and didn't want to trip new users up (which is the opposite of the motivation #3). We could change our philosophy though. @tomchor you may not realize it, but you probably have the most experience with immersed boundary conditions. I think it's reasonable that nobody has added an example for these yet. I don't think there are any validation tests at all, or papers that use them, in constrast to much of the rest of the code. The fact that a major bug like the one found in #3142 still exists is a testament to the fact that these are unvalidated, and I think also validates our justification for not having an example yet.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3148#issuecomment-1599993028:472,test,tests,472,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3148#issuecomment-1599993028,2,['test'],"['testament', 'tests']"
Testability,The other issue that keeps coming up in many GPU tests has to do with conditional averaging when we have immersed boundaries... https://buildkite.com/clima/oceananigans/builds/8443#0182e818-e8be-4719-bda6-acbd51410754/33-445,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1230015146:49,test,tests,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1230015146,1,['test'],['tests']
Testability,The other possibility which achieves the same goal (and which I'm fine with) is to enforce `.nc` in `filename` for `NetCDFOutputWriter`. We'd have to change a lot fewer tests for that too...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2435#issuecomment-1098303653:169,test,tests,169,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2435#issuecomment-1098303653,1,['test'],['tests']
Testability,"The problem is this iteration:. ```julia; [ Info: Iter: 32, time: 300 ms , u-avg: 2.5442761423093008, window_start_time: 0.28, window_start_iteration: 30, previous_collection_time: 0.3, fetch_operand: true, interval: 0.03, previous_interval_stop_time: 0.27, collecting: true; ```. We should have `collecting: false`. That means `end_of_window`. https://github.com/CliMA/Oceananigans.jl/blob/406eb9c5c7a9fc86947747116128c8c1ba4c93d4/src/OutputWriters/windowed_time_average.jl#L270. spuriously returns `false`. https://github.com/CliMA/Oceananigans.jl/blob/406eb9c5c7a9fc86947747116128c8c1ba4c93d4/src/OutputWriters/windowed_time_average.jl#L93. So we want to look at `model.clock.time` and `sch.previous_interval_stop_time + sch.interval`. It does seem probable the issue is roundoff error. Probably `AveragedTimeInterval` needs to be updated to align more with the (new) criteria currently being used for `TimeInterval` eg we need a similar criteria as used for `next_actuation_time`:. https://github.com/CliMA/Oceananigans.jl/blob/406eb9c5c7a9fc86947747116128c8c1ba4c93d4/src/Utils/schedules.jl#L56-L61. Would be helpful to have a test too.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2264548157:1132,test,test,1132,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2264548157,1,['test'],['test']
Testability,"The problem was that the pressure solvers are not tested for `Flat`. It seems that the CPU case does the right thing but the GPU case does not. I will create an issue saying this needs to be addressed. In the mean time, @ali-ramadhan and I have added a warning to tell the user that the pressure solvers are not tested for flat. `#1556`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815841579:50,test,tested,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815841579,2,['test'],['tested']
Testability,The problems seen in the global simulation were actually fixed by #2774. The test was performed without updating the code to the latest version. I will close this PR,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2778#issuecomment-1279612571:77,test,test,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2778#issuecomment-1279612571,1,['test'],['test']
Testability,The reason why this test does not pass on the GPU for periodic boundary conditions in the longitudinal direction might have something to do with the synchronization of the halo filling (PR #1985 which we might want to merge soon),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2031#issuecomment-955473060:20,test,test,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2031#issuecomment-955473060,1,['test'],['test']
Testability,"The regression tests take a long time just because there are quite a few tests. We recently added many new hydrostatic regression tests (10-20? or more?) where there used to be just a handful. The solver tests have always been a bottleneck but I think there are a few new solvers being tested which probably increased the test length? I'm not sure why `time_stepping_2` would have increased (possibly that was always a bit slow). I definitely agree that CI time is a problem, which is why we opened #1962 to move the CI over to Caltech's central cluster and to split tests into a ""nightly"" category (running every night rather than on every PR / commit), and a per-commit category. However, we haven't made much progress on that PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2139#issuecomment-1009058943:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2139#issuecomment-1009058943,7,['test'],"['test', 'tested', 'tests']"
Testability,The results from running the new multithreading benchmark scripts are posted in #1861.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-884202297:48,benchmark,benchmark,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-884202297,1,['benchmark'],['benchmark']
Testability,The results in the table above were run on one `GPU` I gather. Are we planning to do some tests on 2 and 4 GPU's to see how fast they are?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1111655708:90,test,tests,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1111655708,1,['test'],['tests']
Testability,"The second time-step is when `QuasiAdamsBashforth2` uses tendency information saved from the previous time-step. On the first time-step it's equivalent to a forward Euler scheme. > I know the differences are small, 8th decimal place or so, but on such a coarse grid should we be expecting the same answers?. Hardware differences can produce results that differ by something like `sqrt(eps(Float64))` I think. This is the tolerance we use for regression tests (but even those sometimes fail to pass on the GPU for some reason). Since the background buoyancy field has a linear gradient and your domain is bounded, can you try running the same simulation but explicitly resolving the background buoyancy field? (This could suggest that the issue has to do with `BackgroundField`...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815284094:453,test,tests,453,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815284094,1,['test'],['tests']
Testability,The test architectures are specified here:. https://github.com/CliMA/Oceananigans.jl/blob/9ffbee31bc5a2fa38dd93fa1594b94cddaebba8c/test/utils_for_runtests.jl#L6-L24. This was hard to find at first,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2443344495:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2443344495,2,['test'],['test']
Testability,"The test cases using a RegularRectilinearGrid and Flat. The dispatch seems to use the first one but I think we need to define the dispatch a bit differently, but I don't know how to do that. A subdispatch sounds attractive but don't know if that's really a thing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1499#issuecomment-804929696:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1499#issuecomment-804929696,1,['test'],['test']
Testability,"The test environment always runs with `--check-bounds=yes` so if you want to reproduce test results locally, you have to explicitly set `--check-bounds=yes`.; If the check bounds are not set, the `@inbounds` will bypass the problem. Anyways, those lines should not be called unless we specifically set `precompute_metrics=false` in the `LatitudeLongitudeGrid` constructor.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630455445:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630455445,2,['test'],['test']
Testability,"The test environment assumes `--check-bounds=yes` even when not explicitly specified. https://github.com/JuliaLang/Pkg.jl/blob/3ca88658d2bc23d877cc5829cdab2aa4dfdae564/src/Pkg.jl#L240-L278. Vector invariant should work with `Flat`, also, the error seems to stem from `div_𝐯u`, which is the flux form advection. I can take a look. You are right that maybe horizontally `Flat` does not work in general with lat-long",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630226850:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630226850,1,['test'],['test']
Testability,"The test in this PR passes on the CPU and fails on the GPU, so the intended result is achieved.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-872569410:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-872569410,1,['test'],['test']
Testability,"The test passes locally so hopefully will work on this go, otherwise I think this is ready?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1529918588:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1529918588,1,['test'],['test']
Testability,"The test that slowed down significantly is this. https://github.com/CliMA/Oceananigans.jl/blob/0163628e3dc810eed76440cc6ceef9870cc50f7f/test/test_matrix_poisson_solver.jl#L141-L148. which runs _only_ on the CPU. I don't know what's the problem with tartarus, but we could add; ```; if arch isa CPU; @info "" Testing Sparse Approximate Inverse..."". A = sprand(100, 100, 0.1); A = A + A' + 1I; A⁻¹ = sparse(inv(Array(A))); M = sparse_approximate_inverse(A, ε = 0.0, nzrel = size(A, 1)); ; @test all(Array(M) .≈ A⁻¹); end; ```; to disable the test on tartarus",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688,5,"['Test', 'test']","['Testing', 'test']"
Testability,"The test that’s failed says on buildkite that the client was lost and there’s no errors from Julia, I’m guessing if I can get them to rerun it might be fine since the other GPU tasks ran fine?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1237094696:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1237094696,1,['test'],['test']
Testability,The tests also fail with. ```; ERROR: The manifest file you are using was most likely generated by a different version of Julia and is not compatible with this Julia version; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1994#issuecomment-983989201:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1994#issuecomment-983989201,1,['test'],['tests']
Testability,The tests are failing :-(,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1013551552:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1013551552,1,['test'],['tests']
Testability,The tests have sped up a lot (presumably because compile time is so much better with KA 0.9). This means that the docs build is a much bigger bottleneck. I think we're at 2h48m:. https://buildkite.com/clima/oceananigans/builds/11123#01879a9c-fde8-4691-a3f5-29ef6060e288. so we will see what we get down to.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3075#issuecomment-1515556985:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3075#issuecomment-1515556985,1,['test'],['tests']
Testability,The tests in ClimaOcean run the function and produced a bug. I linked [the log](https://buildkite.com/clima/climaocean-ci/builds/1264#01918d21-30e8-4d9c-9ee8-a220eb16eb28/202-514) above. . I can try to create an MWE if it helps.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3731#issuecomment-2309544041:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3731#issuecomment-2309544041,2,"['log', 'test']","['log', 'tests']"
Testability,"The tests should run with `--check-bounds=yes` automatically. I think that when calling `Pkg.test()` the testing environment automatically activates the 0 optimization flag (`-O0`) and the bounds checking flag `--check-bounds=yes`, but I cannot find a reference at the moment.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3747#issuecomment-2318384101:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3747#issuecomment-2318384101,3,['test'],"['test', 'testing', 'tests']"
Testability,The tests use a lot of scalar indexing that's why they fail on the GPU:. https://buildkite.com/clima/oceananigans/builds/15604#018f40ed-787d-4e74-a5f4-ae1656fa3043/18-724. I think if we are comparing single numbers it makes sense to use `@allowscalar`. If we are comparing vectors it could be nice to figure out how to get the tests to run without `@allowscalar` since presumably this is possible.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2093986439:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2093986439,2,['test'],['tests']
Testability,"The tricky thing is that this PR is supposed to fix the issue. So we need a second PR with a test that fails, and then to cherry-pick that test into this PR (after confirming manually that the test fails for the ""right"" reason). Anybody is welcome to open this other PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-869771468:93,test,test,93,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-869771468,3,['test'],['test']
Testability,"There are a lot of new instances of `@allowscalar`, but rather than adding new instances we should be refactoring the tests so they don't appear. When we find that we have to use `@allowscalar`, it often indicates that our `Field` infrastructure is somehow deficient / doesn't support necessary operations, which causes us to resort to indexing and other syntax that requires `@allowscalar`. @navidcy @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411314641:118,test,tests,118,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411314641,1,['test'],['tests']
Testability,"There is a fair amount of scalar iteration right now, largely I think because we have array-like objects (Fields, and friends) that lack fully-featured broadcasting capabilities. This means writing something like `a .== 2` triggers scalar iteration on the GPU because it hits Base broadcasting. We _can_ fix the problem by fleshing out broadcasting a bit so `a .== 2` works ""correctly"" / sensibly, but we haven't prioritized it (we also didn't have broadcasting at all for Field until a month or two ago). Possibly, if changing a global via `allowscalar(true)` were not available we would have been forced to address this deficiency in our Field abstraction sooner. So that could have been a good thing depending on your perspective. It did allow us to sweep some things under the hood. On the other hand I don't think we have any performance issues; scalar iteration is only used on very small arrays for testing where we are completely dominated by compile times.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-864145884:906,test,testing,906,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-864145884,1,['test'],['testing']
Testability,"There is an error in `initailize-gpu-environment`, copied below, which I don't believe comes from this change. Can someone reset the tests? I don't believe I have the authority to do that. ```; ERROR: Unable to automatically install 'CUDNN' from '/data5/glwagner/.julia-2937/packages/CUDA/mVgLI/Artifacts.toml';  ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1759#issuecomment-866783261:133,test,tests,133,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1759#issuecomment-866783261,1,['test'],['tests']
Testability,There is no forcing and I created a branch that has the one line that specifies `WENO5` as the advection scheme. . `fjp/benchmark-incompressiblemodel-WENO5`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869738802:120,benchmark,benchmark-incompressiblemodel-,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869738802,1,['benchmark'],['benchmark-incompressiblemodel-']
Testability,"There is still a problem. This time with the vector size:. > ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI ~/.julia/packages/MPI/08SPr/deps/deps.jl:15; [NVBLAS] No Gpu available; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; [ Info: Oceananigans will use 16 threads; ERROR: LoadError: DimensionMismatch(""arrays could not be broadcast to a common size; got a dimension with lengths 129 and 128""); Stacktrace:; [1] _bcs1; @ ./broadcast.jl:501 [inlined]; [2] _bcs (repeats 3 times); @ ./broadcast.jl:495 [inlined]; [3] broadcast_shape; @ ./broadcast.jl:489 [inlined]; [4] combine_axes; @ ./broadcast.jl:484 [inlined]; [5] instantiate; @ ./broadcast.jl:266 [inlined]; [6] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(*), Tuple{Array{Float64, 3}, Array{Float64, 3}}}); @ Base.Broadcast ./broadcast.jl:883; [7] top-level scope; @ /lustre/scratch5/.mdt0/fspereira/OCEANANIGANS/test/case13/c16_128_128m.jl:200. Also, shouldn't we set v (last line below, I added the commented v's):. `Random.seed!(1414). T = model.tracers.T; u, v, w = model.velocities. x, y, z = nodes(T, reshape=true); Lz = model.grid.Lz. shape = @. z / Lz * (1 + z / Lz); ΞT = randn(size(T)...) .* shape; Ξu = randn(size(u)...) .* shape; #Ξv = randn(size(v)...) .* shape; Ξw = randn(size(w)...) .* shape. Tᵢ = @. 20 + dTdz * z + dTdz * Lz * 1e-6 * ΞT; uᵢ = @. sqrt(abs(Qᵘ)) * 1e-3 * Ξu; #vᵢ = @. sqrt(abs(Qᵘ)) * 1e-3 * Ξv; wᵢ = @. sqrt(abs(Qᵘ)) * 1e-3 * Ξw. #set!(model, u=uᵢ, v=vᵢ, w=wᵢ, T=Tᵢ, S=35); set!(model, u=uᵢ, w=wᵢ, T=Tᵢ, S=35)`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1268613743:1257,test,test,1257,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1268613743,1,['test'],['test']
Testability,There seems to be a pattern with the failing tests 🤔 🤔 🤔 🤔 🤔 @simone-silvestri,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2568#issuecomment-1133527273:45,test,tests,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2568#issuecomment-1133527273,1,['test'],['tests']
Testability,There was a typo in that we should have `model.background_fields.velocities.u`. I think now the tests will pass. Is there anything else that people might want here?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-877465490:96,test,tests,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-877465490,1,['test'],['tests']
Testability,There was some power interruption at MIT. Now it's fixed but probably someone has to go turn on Sverdrup (where the GPU tests run on).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2694#issuecomment-1216054364:120,test,tests,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2694#issuecomment-1216054364,1,['test'],['tests']
Testability,"There's a disadvantage if we need to use `print` for an application other than the one in #2098. Then this PR creates work for us in the future. We can't really predict whether that will occur (but it could come up in the context of log-file creation... ?). I think the purpose of `print` is to remove ""decorations"" and ""Julia-specific details"", rather than important numerical information such as whether the WENO5 coefficients are grid-stretching-dependent:. ```julia; help?> print; search: print println printstyled sprint isprint prevind parentindices precision. print([io::IO], xs...). Write to io (or to the default output stream stdout if io is not given) a canonical; (un-decorated) text representation. The representation used by print includes minimal; formatting and tries to avoid Julia-specific details. print falls back to calling show, so most types should just define show. Define print if; your type has a separate ""plain"" representation. For example, show displays strings with; quotes, and print displays strings without quotes. string returns the output of print as a string. Examples; ≡≡≡≡≡≡≡≡≡≡. julia> print(""Hello World!""); Hello World!; julia> io = IOBuffer();. julia> print(io, ""Hello"", ' ', :World!). julia> String(take!(io)); ""Hello World!""; ```. Here, it looks like `print` returns the ""base name"" of the advection scheme's type, eg similar to `summary(scheme) = string(typeof(scheme))`, but throwing away type parameter information:. ```julia; help?> summary; search: summary MethodSummary. summary(io::IO, x); str = summary(x). Print to a stream io, or return a string str, giving a brief description of a value. By; default returns string(typeof(x)), e.g. Int64. For arrays, returns a string of size and type info, e.g. 10-element Array{Int64,1}. Examples; ≡≡≡≡≡≡≡≡≡≡. julia> summary(1); ""Int64"". julia> summary(zeros(2)); ""2-element Vector{Float64}""; ```. @navidcy suggested `string(typeof(string).name.wrapper)` which seems to do the job of removing type parameter in",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2099#issuecomment-986784328:233,log,log-file,233,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2099#issuecomment-986784328,1,['log'],['log-file']
Testability,There's a tradeoff between taking too few time-steps (not enough time for subtle differences to manifest above the noise floor) and taking too many time steps. Perhaps just halving the time-steps for this test will make it more robust but hopefully still useful,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430090495:205,test,test,205,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430090495,1,['test'],['test']
Testability,"These are all the lines in the benchmark scripts that I can find where a pretty table and html file is created with a title and filename containing "">"".; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_advection_schemes.jl#L39; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_equations_of_state.jl#L41; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_fft_based_poisson_solvers.jl#L41; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_fourier_tridiagonal_poisson_solver.jl#L41; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_incompressible_model.jl#L39; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_lagrangian_particle_tracking.jl#L49; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_shallow_water_model.jl#L41; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_time_steppers.jl#L39; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_topologies.jl#L39; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_tracers.jl#L64; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_turbulence_closures.jl#L46; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_vertically_stretched_incompressible_model.jl#L39",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1672#issuecomment-844283662:31,benchmark,benchmark,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1672#issuecomment-844283662,13,['benchmark'],['benchmark']
Testability,"These are definitely cool ideas for progress statements!. I see logging as being much more general though. It should also be used when printing progress statements, but I think it's especially useful to have `@debug` messages in certain places to help with debugging. And maybe `@info` messages so the user knows what the model is doing. It could get noisy if we get carried away with them but a user staring at a blank screen for 3 minutes might not know that the GPU stuff is just compiling in the background. More responsive software feels more user-friendly.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-541418998:64,log,logging,64,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-541418998,1,['log'],['logging']
Testability,"These are the first results from a weak scaling. I have not modified how the speedup is changed but looking at the mean times should be informative. As we add the number of cores, each core has the same number of degrees of freedom. Ideally, the total time should not change. There is a big difference going from 1 to 2, but after that the difference does not seem nearly as bad. @ali-ramadhan and I are talking about how to profile this but if anyone has any thoughts or suggestions, we are happy to hear them!. ```; Shallow water model weak scaling benchmark; ┌──────────────┬───────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ size │ ranks │ min │ median │ mean │ max │ memory │ allocs │; ├──────────────┼───────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ (4096, 256) │ 1 │ 523.845 ms │ 529.054 ms │ 528.660 ms │ 532.950 ms │ 391.83 KiB │ 2719 │; │ (4096, 512) │ 2 │ 1.014 s │ 1.015 s │ 1.017 s │ 1.023 s │ 371.58 KiB │ 3151 │; │ (4096, 1024) │ 4 │ 1.210 s │ 1.216 s │ 1.219 s │ 1.238 s │ 371.72 KiB │ 3160 │; │ (4096, 2048) │ 8 │ 1.109 s │ 1.124 s │ 1.180 s │ 1.296 s │ 371.72 KiB │ 3160 │; │ (4096, 4096) │ 16 │ 1.259 s │ 1.307 s │ 1.302 s │ 1.337 s │ 371.72 KiB │ 3160 │; └──────────────┴───────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┘; [2021/03/15 10:34:57.910] INFO Writing Shallow_water_model_weak_scaling_benchmark.html...; Shallow water model weak scaling speedup; ┌──────────────┬───────┬──────────┬──────────┬─────────┐; │ size │ ranks │ speedup │ memory │ allocs │; ├──────────────┼───────┼──────────┼──────────┼─────────┤; │ (4096, 256) │ 1 │ 1.0 │ 1.0 │ 1.0 │; │ (4096, 512) │ 2 │ 0.521109 │ 0.948319 │ 1.15888 │; │ (4096, 1024) │ 4 │ 0.434976 │ 0.948678 │ 1.16219 │; │ (4096, 2048) │ 8 │ 0.47074 │ 0.948678 │ 1.16219 │; │ (4096, 4096) │ 16 │ 0.40486 │ 0.948678 │ 1.16219 │; └──────────────┴───────┴──────────┴──────────┴─────────┘; [2021/03/15 10:34:58.558] INFO Writing Shallow_w",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799473915:551,benchmark,benchmark,551,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799473915,1,['benchmark'],['benchmark']
Testability,"These benchmarks:. https://github.com/CliMA/Oceananigans.jl/pull/2412. show a factor of 2 speed up on the CPU. In principle, the FFT is faster than a matrix multiply which may explain it? Or, perhaps the benchmarks test the wrong thing so we should re-run them. As explained on that PR, some performance is left on the table, because the fastest combination would use an FFT-based preconditioner with a matrix multiply to compute the LHS.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2635#issuecomment-1172613179:6,benchmark,benchmarks,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2635#issuecomment-1172613179,3,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"These lines:. ```julia; φ₁, φ₂ = get_domain_extent(latitude, Nφ) ; @assert -90 <= φ₁ <= φ₂ <= 90 ; ; (φ₁ == -90 || φ₂ == 90) && ; @warn ""Are you sure you want to use a latitude-longitude grid with a grid point at the pole?"" ; ```. should be outside the if statement.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3241#issuecomment-1697308462:68,assert,assert,68,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3241#issuecomment-1697308462,1,['assert'],['assert']
Testability,These test failures are just testing problems not actual code problems right?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3508#issuecomment-2004506511:6,test,test,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3508#issuecomment-2004506511,2,['test'],"['test', 'testing']"
Testability,"These tests aren't passing, and I have no clue why. The error is:. ```; ERROR: `Enzyme=7da242da-08ed-463a-9acd-ee780be4f1d9` depends on `ChainRulesCore=d360d2e6-b24c-11e9-a2a3-2a2ae2dbcce4`, but no such entry exists in the manifest.; ```. But I never changed anything related to that. Does anyone know what's going on?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2221669095:6,test,tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2221669095,1,['test'],['tests']
Testability,These tests still fail: https://buildkite.com/clima/oceananigans/builds/13791#018c8e8a-a41b-43de-a387-49157d3ccc32/6-46,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1867997015:6,test,tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1867997015,1,['test'],['tests']
Testability,These two tests should be failing... https://github.com/CliMA/Oceananigans.jl/blob/77693f7d5dad1e5f8a90c13a2dcd13b8db2e1f71/test/test_rectilinear_grid.jl#L146-L147. Wait. Is `test_rectilinear_grid.jl` ever being called in tests? I'm bit confused...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2050#issuecomment-966085231:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2050#issuecomment-966085231,3,['test'],"['test', 'tests']"
Testability,"They are already there, https://github.com/CliMA/Oceananigans.jl/blob/7291ada057afc9cfcefb2b6e9351cff8782d9217/test/test_hydrostatic_regression.jl#L80; we have to merge in `OceananaigansArtifacts` the branch and correct main to download from `OceananaigansArtifacts#main`. I ll open a PR there",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3335#issuecomment-1791152312:111,test,test,111,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3335#issuecomment-1791152312,1,['test'],['test']
Testability,"Think so. GPU tests passed, only docs are failing now (but I think they just failed to start... I'm restarting!)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1608831536:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1608831536,1,['test'],['tests']
Testability,"Thinking about this more, I think it would make sense to make an even more radical change. I think we should add `diagnostics`, `output_writers`, and `clock` to `Simulation`. . The `time_step!` function then performs a single time-step, whereas to run a simulation one should write `run!(simulation)`, which handles diagnostics, output writing, adaptive time-stepping, and logging in an integrated way. This orthogonalizes the design a bit: `diagnostics` and `output_writers` are not really aspects of a ""model"", if we use a narrow interpretation of a model as a discrete representation of a physical system. A single physical system might conceivably be associated with a wide range of disparate diagnostics and output, depending on what kind of science is being done. I think scripts become clearer. The user writes. ```julia; model = Model(; model_parameters...). simulation = Simulation(model; simulation_parameters...). simulation.diagnostics[:diag] = # something. run!(simulation); ```. As an example to illustrate why `Simulation` is orthogonal to `Model`, here's a possible clear and coherent usage of this separation:. ```julia; model = Model(; model_parameters...). set!(model; first_interesting_initial_condition...). first_simulation = Simulation(model, first_simulation_parameters...); first_simulation[:diag] = diag_specific_to_first_simulation; run!(first_simulation). set!(model; second_interesting_initial_condition...) # same physical model, but different starting initial condition... no new memory allocated, no recompilation --- fast. second_simulation = Simulation(model, second_simulation_parameters...); second_simulation[:diag] = diag_specific_to_second_simulation; run!(second_simulation); ```. We can use `run!(simulation, time_steps=nsteps)` to allow hand-coded user loops that achieve a functionality similar to what we have now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/447#issuecomment-542294442:373,log,logging,373,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/447#issuecomment-542294442,1,['log'],['logging']
Testability,"This PR also provides _experimental_ (untested) supported for Bounded domains: @johnryantaylor @raphaelouillon. Future work / PRs can add tests for these cases, and perhaps some validation experiments. I also think we've unlocked the requirements for FFT + tridiagonal solve, but that is yet again for a future PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2536#issuecomment-1120338368:138,test,tests,138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2536#issuecomment-1120338368,1,['test'],['tests']
Testability,"This PR just goes into `amdgpu` by the way, so we can merge at any time in my opinion. We then need to open a second PR between `amdgpu` and `main`; to merge that we need all tests to pass and should probably have some CI.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1115065707:175,test,tests,175,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1115065707,1,['test'],['tests']
Testability,"This PR might want to add a simple test that runs these functions to ensure this doesn't continue to happen (and improve coverage), rather than only fixing the current code.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/557#issuecomment-563226383:35,test,test,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/557#issuecomment-563226383,1,['test'],['test']
Testability,"This PR should be ready, but I would like to add a test before merging it. I am planning to add it after next week, with more in-depth testing for the `ImmersedBoundaryGrid`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3690#issuecomment-2327682960:51,test,test,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3690#issuecomment-2327682960,2,['test'],"['test', 'testing']"
Testability,This PR was merged even though tests never ran.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3401#issuecomment-1867012830:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3401#issuecomment-1867012830,1,['test'],['tests']
Testability,This all sounds good. . Would it also be worthwhile having a test for the finite difference operator to make sure that the accuracy is correct everywhere?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1755#issuecomment-866284480:61,test,test,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1755#issuecomment-866284480,1,['test'],['test']
Testability,"This does it:. ```julia; using Oceananigans; grid = RectilinearGrid(size=1, x=(0, 1), topology=(Periodic, Flat, Flat)); B(args...) = 0; background_fields = Oceananigans.BackgroundFields(; background_closure_fluxes=true, b=B); model = NonhydrostaticModel(; grid, background_fields); ```. You can use this in a test, something like. ```julia; B(args...) = 0; function time_step_background_fields_with_closure_fluxes(arch); grid = RectilinearGrid(arch, size=1, x=(0, 1), topology=(Periodic, Flat, Flat)); background_fields = Oceananigans.BackgroundFields(; background_closure_fluxes=true, b=B); model = NonhydrostaticModel(; grid, background_fields); time_step!(model, 1); return true; end. @test time_step_background_fields_with_closure_fluxes(arch); ```. If it throws an error, the test fails. This is a basic unit test which is always a good idea to write first. The next step is to write a test that confirms the functionality works _correctly_. This is an example of a hierarchy of tests proceeding from simple to complex.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433253320:309,test,test,309,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433253320,12,['test'],"['test', 'tests']"
Testability,This indeed seems to fix the issue. Is there a test we can include to prevent this in the future?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3235#issuecomment-1694521592:47,test,test,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3235#issuecomment-1694521592,1,['test'],['test']
Testability,"This is a plot of the shallow water benchmark times: cpu vs gpu. What do you think?. *Absolute Times*. ![shallow_water_times](https://user-images.githubusercontent.com/8239041/120535459-fc54ac00-c3b0-11eb-90a6-71010d09b7fa.png). *Speed Up*. ![shallow_water_benchmarks2](https://user-images.githubusercontent.com/8239041/120205347-dcc65380-c1f7-11eb-9674-8bb2514b3045.png). In theory, it should be easy to include the code to create this image in the benchmark script. However, because the garbage collector does not clear the memory, we actually have to run the script separately for the high resolution runs. Any advice on how to resolve this issue?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-851504385:36,benchmark,benchmark,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-851504385,4,['benchmark'],['benchmark']
Testability,This is a problem on all PRs. I am not sure about our regression test data. It might be faulty.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427124529:65,test,test,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427124529,1,['test'],['test']
Testability,"This is for explicit free surface, I ll extend the benchmarks for implicit and weak scaling",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116689634:51,benchmark,benchmarks,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116689634,1,['benchmark'],['benchmarks']
Testability,This is great @sandreza. How come tests don't fail on this PR?!!; They've been failing on every other one... Is this far behind master?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1570#issuecomment-818238932:34,test,tests,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1570#issuecomment-818238932,1,['test'],['tests']
Testability,"This is great, thanks @glwagner and @iuryt! Si Chen has been testing the code with a buouyant tracer added through forcing like this and he is running a comparison with Jenny Dingwall's simulations with Diablo. The extra `slip' velocity needs to vanish at the boundaries in order to conserve tracer, but then adding the advection term to the RHS forcing like @glwagner suggested seems to work and conserves tracer. We did something like this:; lambda=1 # decay scale for slip velocity in meters; for k=0:Nz+2; slip_vel.w[:,:,k].+=(tanh(max(-grid.zᵃᵃᶠ[k]/lambda,0))*tanh(max((grid.zᵃᵃᶠ[k]+Lz)/lambda,0)));; end",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1082373016:61,test,testing,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1082373016,1,['test'],['testing']
Testability,"This is my first attempt at making a version of `cell_advection_timescale` for `ShallowWaterModel`. Note that we are dividing elements of mass flux and height, which are not defined at the same cell points, but if we are looking for estimates I wonder if this will be sufficient. I have not tested this as I'm not sure how to integrate this into the rest of the code, but I thought we could try that after we agree on what the script should look like. ```; ""Returns the time-scale for advection on a regular grid across a single grid cell ; for ShallowWaterModel.""; function cell_advection_timescale(uh, vh, h, grid); umax = maximum(abs, uh / h); vmax = maximum(abs, vh / h). Δx = grid.Δx; Δy = grid.Δy. return min(Δx/umax, Δy/vmax); end. cell_advection_timescale(model) =; cell_advection_timescale(model.solution.uh.data.parent,; model.solution.vh.data.parent,; model.solution.h.data.parent,; model.grid); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-762829052:291,test,tested,291,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-762829052,1,['test'],['tested']
Testability,This is the output of the 1D advection test in `validation/advection/simple_one_dimensional_advection.jl`. ![Screenshot 2024-02-13 at 12 41 25 PM](https://github.com/CliMA/Oceananigans.jl/assets/33547697/05a4651d-9106-4d81-b127-0ac0f9f9f42e),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3434#issuecomment-1942086368:39,test,test,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3434#issuecomment-1942086368,1,['test'],['test']
Testability,"This is the same benchmark performed with `ImplicitFreeSurface`, by imposing a divergent velocity `u(x, y, z) = x / 10` to make sure the implicit solver iterates. Looking at the results it seems like it doesn't iterate too much... (probably WENO cleans up?) And it is very weird that the `RectilinearGrid` version is not affected by the FreeSurface calculation? (I have double checked that the free surface solver is correct). #### Strong Scaling; | Grid size | Grid | GPUs | wall time | efficiency |; | -- | -- | -- | -- | -- |; | `1440×600×48`| `RectilinearGrid` | 1 | 1.37 minutes | 100% |; | `1440×600×48`| `MultiRegionGrid` | 2 | 1.05 minutes | 65.2% |",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116777025:17,benchmark,benchmark,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116777025,1,['benchmark'],['benchmark']
Testability,"This is the tentative plan: ; 1. Test the Split-Explicit time-stepping in standalone mode without the 3D model; 2. Write kernels and tests for computing vertical integrals of tendency terms; 3. Write the AB extrapolation function for the tendency terms; 4. Write the ""reconciliation"" kernel that takes away the barotropic component of the velocity field and adds in the new one; 5. Test everything together in various channel settings",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2013#issuecomment-946211816:33,Test,Test,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2013#issuecomment-946211816,3,"['Test', 'test']","['Test', 'tests']"
Testability,"This is what I found:. ```; (base) tomas@np900:~/repos/Oceananigans.jl$ grep -ri ""incompressible model"" *; benchmark/benchmark_incompressible_model.jl: xlabel=""Nx"", ylabel=""Times (ms)"", title=""Incompressible Model Benchmarks: CPU vs GPU""); benchmark/benchmark_incompressible_model.jl: xlabel=""Nx"", ylabel=""Speedup Ratio"", title=""Incompressible Model Benchmarks: CPU/GPU""); benchmark/benchmark_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model benchmarks""); benchmark/benchmark_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Incompressible model CPU to GPU speedup""); benchmark/strong_scaling_incompressible_model.jl: @info ""Benchmarking distributed incompressible model strong scaling with $(typeof(decomposition)) decomposition [N=($Nx, $Ny, $Nz), ranks=($Rx, $Ry, $Rz)]...""; benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model strong scaling benchmark""); benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; benchmark/strong_scaling_incompressible_model_single.jl:@info ""Warming up distributed",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326:107,benchmark,benchmark,107,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326,12,"['Benchmark', 'benchmark']","['Benchmarking', 'Benchmarks', 'benchmark', 'benchmarks']"
Testability,This looks like a great simple test. Perhaps `time_step_wizard_shallow_water_model_works` is a good name for the function? You may want `stop_iteration=2` to ensure that the `update_dt` works as expected.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-764812698:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-764812698,2,['test'],['test']
Testability,"This looks like a symptom of a larger problem and, indeed, does not seem to be tested. ; I think to solve it we should fix the time-indexing of reduced FTS. We seem to be missing the 4D indexing of reduced FTS:; ```julia; @propagate_inbounds getindex(f::XYFTS, i::Int, j::Int, k::Int, n::Int) = getindex(f.data, i, j, 1, memory_index(f, n)); @propagate_inbounds getindex(f::XZFTS, i::Int, j::Int, k::Int, n::Int) = getindex(f.data, i, 1, k, memory_index(f, n)); @propagate_inbounds getindex(f::YZFTS, i::Int, j::Int, k::Int, n::Int) = getindex(f.data, 1, j, k, memory_index(f, n)); ```; to be added [here](https://github.com/CliMA/Oceananigans.jl/blob/abb66e32d333562dd9aaeb7dd2ed8fac5e781368/src/OutputReaders/field_time_series_indexing.jl#L108). and the 2D-Time indexing of reduced FTS; ```julia ; @propagate_inbounds getindex(f::XYFTS, i::Int, j::Int, time_index::Time) = getindex(f, i, j, 1, time_index); @propagate_inbounds getindex(f::XZFTS, i::Int, k::Int, time_index::Time) = getindex(f, i, 1, k, time_index); @propagate_inbounds getindex(f::YZFTS, j::Int, k::Int, time_index::Time) = getindex(f, 1, j, k, time_index); ```; maybe to be added [here](https://github.com/CliMA/Oceananigans.jl/blob/abb66e32d333562dd9aaeb7dd2ed8fac5e781368/src/OutputReaders/field_time_series_indexing.jl#L116). and all the respective methods for 1D and 0D FTS.; In theory, the boundary conditions should work as intended. Indeed, we should add a test for it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3663#issuecomment-2251176411:79,test,tested,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3663#issuecomment-2251176411,2,['test'],"['test', 'tested']"
Testability,"This looks very much like a bug. We have used particle tracking on immersed grids many times in the past. That kernel should work for both immersed and not-immersed grids, the fix should be simple. It looks like this feature is not tested, so; it would be nice to add a test, (something simple like a particle bouncing off a wall in a 1D domain with an immersed boundary compared to a Bounded domain). @tomchor do you want (or have time) to tackle this?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3761#issuecomment-2332079749:232,test,tested,232,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3761#issuecomment-2332079749,4,['test'],"['test', 'tested']"
Testability,"This problem may be an issue with the vertically stretched grid rather than the FourierTridiagonalPoissonSolver. The mixed FFT/Tridiagonal Poisson solver uses similar constructs as the FFTBased Poisson solver. The two ingredients are 1) a Fourier transform in the `Flat` direction, and 2) computation of the eigenvalues:. https://github.com/CliMA/Oceananigans.jl/blob/5fbd8cd20c5db8e9b11b6175984e7592a08fc874/src/Solvers/poisson_eigenvalues.jl#L8-L11. https://github.com/CliMA/Oceananigans.jl/blob/5fbd8cd20c5db8e9b11b6175984e7592a08fc874/src/Solvers/poisson_eigenvalues.jl#L31. The first eigenvalue is 0, so the `Flat` case is correct. It's also used for the fully FFT-based solver and we know it works in that context. The transforms must be fine too. The grids differ though in how grid metrics are computed, so I suspect the problem is there. I think we've also had issues with `HydrostaticFreeSurfaceModel` and `VerticallyStretchedRectilinearGrid` with `Flat` topologies, but I haven't looked into it systematically. We might be able to convert the internal wave ~~setup~~ dynamics test to a vertically bounded domain and put it on a stretched grid to test these issues.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-881907317:1087,test,test,1087,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-881907317,2,['test'],['test']
Testability,"This should be done already (I'm not sure why the tests keep failing, its annoying). I made the change because I seriously could not understand the code. I kept getting confused between ""compute boundary tendencies"" (which adds fluxes to the tendencies, coming in from the boundaries), and ""compute tendencies_boundaries"", which did something completely different (compute the halo dependent tendencies). So I started by changing the names so I could reason about the code without my head spinning.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3814#issuecomment-2398224325:50,test,tests,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3814#issuecomment-2398224325,1,['test'],['tests']
Testability,"This should do the job I believe. ```Julia; @testset ""Oceananigans"" begin; if test_file != :none; @testset ""Single file test"" begin; include(String(test_file)); end; else; # Core Oceananigans; if group == :unit || group == :all; .....; end; end; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1994521988:45,test,testset,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1994521988,3,['test'],"['test', 'testset']"
Testability,"This sounds really useful! . I kept reusing some code for wall (just with a flat-bottomed domain) and wind stress so I put some bits together in [this package](https://github.com/jagoosw/Walrus.jl) and I came to the same conclusion of having functions that make the boundary conditions so I could just write:. ```julia; stress_boundary_conditions = WallStressBoundaryConditions(). boundary_conditions = (u = FieldBoundaryConditions(bottom = stress_boundary_conditions.u),; v = FieldBoundaryConditions(bottom = stress_boundary_conditions.v)); ```. The way I did it was to make a type for `WindStress` which could have different models for the drag coefficient and parameters. The only other thing I learned from doing it was that it was very useful to precompute roughness lengths for different speeds rather than compute them on the fly since they're well behaved functions that I could interpolate easily. (There is some inefficiency in the code that I did the wind and wall stress separately, even though they're basically the same thing, but a kind of merge of how I did each would probably be the most general way todo it because I put more work into the wind stress and just have the very simple flat bottomed law of the wall wall stress. Also, the code is not well-tested and probably won't work on non-rectilinear grids).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3807#issuecomment-2385865288:1271,test,tested,1271,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3807#issuecomment-2385865288,2,['test'],['tested']
Testability,"This test:. https://github.com/CliMA/Oceananigans.jl/blob/63cb6713efed46d47372038cc75c11192c75b73b/test/test_seawater_density.jl#L90. is failing on `GPU()` with `Float64` and `RoquetEquationOfState(:SimplestRealistic)`. I don't know if something changed -- I think nothing has changed. I suggest `.==` -> `.\approx`. (cc'ing @jbisits, @glwagner in case you have an idea of something that changed in SeaWaterPolynomials or you can see a flaw in the tests, eg FT not passed in properly etc)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2067953775:5,test,test,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2067953775,3,['test'],"['test', 'tests']"
Testability,"This then leads to an `Undef` error; ```julia; Got exception outside of a @test; UndefRefError: access to undefined reference; Stacktrace:; [1] #28164; @ ~/.julia/packages/Enzyme/aEyGD/src/rules/typeunstablerules.jl:793 [inlined]; [2] macro expansion; @ ./ntuple.jl:72 [inlined]; [3] ntuple(f::Enzyme.Compiler.var""...; @ Base ./ntuple.jl:69; [4] idx_jl_getfield_rev(::...; @ Enzyme.Compiler ~/.julia/packages/Enzyme/aEyGD/src/rules/typeunstablerules.jl:791; [5] iterate; @ ./namedtuple.jl:165 [inlined]; [6] iterate; @ ./generator.jl:44 [inlined]; [7] collect_to!; @ ./array.jl:892; [8] collect_to_with_first!; @ ./array.jl:870 [inlined]; [9] collect; @ ./array.jl:844 [inlined]; [10] _totuple; @ ./tuple.jl:425 [inlined]; [11] Tuple; @ ./tuple.jl:391 [inlined]; [12] update_boundary_condition!; @ ~/Documents/Projects/Oceananigans.jl/src/BoundaryConditions/update_boundary_conditions.jl:15 [inlined]; [13] #apply_regionally!#56; @ ~/Documents/Projects/Oceananigans.jl/src/Utils/multi_region_transformation.jl:121 [inlined]; [14] apply_regionally!; @ ~/Documents/Projects/Oceananigans.jl/src/Utils/multi_region_transformation.jl:118 [inlined]; [15] macro expansion; @ ~/Documents/Projects/Oceananigans.jl/src/Utils/multi_region_transformation.jl:206 [inlined]; [16] #update_state!#49; @ ~/Documents/Projects/Oceananigans.jl/src/Models/HydrostaticFreeSurfaceModels/update_hydrostatic_free_surface_model_state.jl:38; [17] update_state!; @ ~/Documents/Projects/Oceananigans.jl/src/Models/HydrostaticFreeSurfaceModels/update_hydrostatic_free_surface_model_state.jl:31 [inlined]; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2254591947:75,test,test,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2254591947,1,['test'],['test']
Testability,"This update just fixes a trivial problem with the test though, which we need so that tests pass on `main` (we can't merge any PRs until we fix this urgent issue). I suggest that we fix more substantial issues with the test in a future PR? It might be helpful to open an issue with some of your comments too @christophernhill",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002696491:50,test,test,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002696491,3,['test'],"['test', 'tests']"
Testability,This validation test essentially implements the tracer advection test:. https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/tracer_advection_over_bump.jl. but we should take care to make sure the boundary conditions are correct.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1574116905:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1574116905,2,['test'],['test']
Testability,This was after merging main. If I don't include:; https://github.com/CliMA/Oceananigans.jl/blob/1db753ebeee2691205b7c0e6a03bba1ef9db4554/src/Models/LagrangianParticleTracking/LagrangianParticleTracking.jl#L131. The test for boundary restitution fails here:; https://github.com/CliMA/Oceananigans.jl/blob/1db753ebeee2691205b7c0e6a03bba1ef9db4554/test/test_lagrangian_particle_tracking.jl#L90-L95. All just single threaded on CPU.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514627611:215,test,test,215,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514627611,2,['test'],['test']
Testability,"This week I plan to revisit this and hopefully figure out how to make the `ShallowWaterModel` stable and not experimental. Lots of nice work was started on the multi-layer version and I hope that we can continue to work towards that after we get the fluxes and the regression tests. I just wanted to confirm that people are still supportive of this before I dive in too deep. If yes, @simone-silvestri , would you have time to meet for 1 hour next week to fine tune things?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1808221910:276,test,tests,276,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1808221910,1,['test'],['tests']
Testability,"This went astray... It takes so long to test that always there is some new feature coming in and then conflicts, etc... :(",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-831586344:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-831586344,1,['test'],['test']
Testability,This would be a great change! I agree that examples should use `Flat` but we should probably fully support `Flat` before merging otherwise users might get `NaN`s when changing their scripts from 2D to 3D. I'm guessing that once you merge PR #1510 into the main branch then into this branch/PR the shallow water tests should pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1513#issuecomment-809307893:311,test,tests,311,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1513#issuecomment-809307893,1,['test'],['tests']
Testability,"This:. ```julia; wp = ℑzᵃᵃᶠ(i, j, k, grid, p) * w[i, j, k]; ```. is a number (the result of interpolating `p` in `z` and multiplying the result by `w`, at the index `i, j, k`). You can test this at the REPL by picking `i, j, k`. `∂zᵃᵃᶜ` needs to be able to index into `wp` at both `i, j, k` and `i, j, k+1` in order to calculate a derivative.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1401#issuecomment-786397904:185,test,test,185,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1401#issuecomment-786397904,1,['test'],['test']
Testability,Tidy up the formatting then you're good to go if tests pass,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3643#issuecomment-2438963349:49,test,tests,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3643#issuecomment-2438963349,1,['test'],['tests']
Testability,"TimerOutputs sounds awesome! Was just thinking about a new log level since debug spits a _lot_ of information, which might make the output hard to interpret if you're only interested in looking at timings. So maybe a `TIMINGS` log level between `INFO` and `DEBUG` would be useful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-888339455:59,log,log,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-888339455,2,['log'],['log']
Testability,"To compare the numerical solution of the Rossby-Haurwitz wave on the cubed sphere against an established benchmark, I chose the exact solution of the non-linear barotropic vorticity equation on the sphere (not the solution of the non-linear shallow water equations). This was achieved by replacing the initial phase Rλ with the time-dependent phase Rλ−νt in Equations (143)–(146) of [Williamson et al.](https://www.sciencedirect.com/science/article/pii/S0021999105800166), using the angular velocity ν given by Equation (142). The results at a resolution of 128x128 cells per panel are as follows:. - Since we prescribe the initial stream function and numerically take its derivatives to specify the initial velocities on the cubed sphere, numerical errors are present even in the initial velocities and the diagnosed initial vorticity. The vorticity error is significantly pronounced near the cubed sphere corners due to the deviation from orthogonality. For instance, in the domain's interior, the vorticity error norm is three orders of magnitude less than the vorticity norm, whereas at the corners, it is nearly the same order of magnitude.; - As the simulation progresses, the amplified error from the corners propagates into the interior as expected. After 500 time steps, the vorticity error in the interior increases from three orders of magnitude less to one order of magnitude less than the vorticity norm. I have attached panel-wise plots of the exact vorticity and the error of its numerical counterpart on the cubed sphere for the initial condition and after 500 time steps for reference. Given these circumstances, @navidcy and I are contemplating whether we should continue using the exact solution for verification in the test script or consider alternative verification methods, such as ensuring that the norm of the numerical solution of the Rossby-Haurwitz wave remains bounded within a specified range (as mentioned in the introduction to this PR). @glwagner, @simone-silvestri an",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3570#issuecomment-2134152684:105,benchmark,benchmark,105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3570#issuecomment-2134152684,1,['benchmark'],['benchmark']
Testability,"To fill in a few more details for @hennyg888 --- _almost all_ multithreading in Oceananigans is achieved via [`KernelAbstractions.jl`](https://github.com/JuliaGPU/KernelAbstractions.jl). Improving efficiency for Oceananigans kernels likely means contributing to `KernelAbstractions.jl` (which @vchuravy may or may not be excited about :-D). More specifically, all tendency evaluations, non-communicative / non-periodic halo fills (periodic halo filling uses Base broadcasting and thus is not parallelized), integrals (like the hydrostatic pressure integral, or vertical velocity computation in `HydrostaticFreeSurfaceModel`), evaluation of diagnostics, and broadcasting with fields all use KernelAbstractions via the Oceananigans function `launch!`:. https://github.com/CliMA/Oceananigans.jl/blob/6e39d3fcc098c69ac207cc21be759cf6bd3ec604/src/Utils/kernel_launching.jl#L71-L90. The line . ```julia; event = loop!(args...; dependencies=dependencies, kwargs...); ```. launches a kernel, using [`KernelAbstractions` syntax](https://juliagpu.github.io/KernelAbstractions.jl/stable/#Quickstart-1). `event` is a token that can be ""waited"" on if we need to. So either we can improve multithreading by changing what happens when `loop!` is called --- or, possibly, by refining the dependency tree so that we can launch more kernels simultaneously. The second optimization is probably more important for small problems. You have mostly benchmarked fairly large problems so I don't we'd see much speed for them. But I'm not 100% sure.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880826423:1426,benchmark,benchmarked,1426,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880826423,1,['benchmark'],['benchmarked']
Testability,"To see a larger difference you have to use a vertically implicit closure. ; Anyways, I ll also do some more tests",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1485908257:108,test,tests,108,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1485908257,1,['test'],['tests']
Testability,"To summarize where we're at: we need at least two unit tests:; - a functionality test, like as proposed and implemented by @glwagner [here]:(https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433253320); ```julia; B(args...) = 0; function time_step_background_fields_with_closure_fluxes(arch); grid = RectilinearGrid(arch, size=1, x=(0, 1), topology=(Periodic, Flat, Flat)); background_fields = Oceananigans.BackgroundFields(; background_closure_fluxes=true, b=B); model = NonhydrostaticModel(; grid, background_fields); time_step!(model, 1); return true; end; ```. @test time_step_background_fields_with_closure_fluxes(arch). - a correctness test, like the 1D diffusion example I proposed [here](https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287291950) but have not yet implemented:; > The simplest test would be a 1D simulation with a background linear tracer profile with boundary conditions of Flux = − κ ∂ z c at the top and bottom. The correct solution would be that nothing happens when the simulation is time-stepped.; ; @liuchihl, can you create a PR into [Greg's branch](https://github.com/CliMA/Oceananigans.jl/tree/glw/background-flux-divergence) that adds both of these tests to the test suite?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433768523:55,test,tests,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433768523,14,['test'],"['test', 'tests']"
Testability,"To test `ArgumentError` I think something like this will work:. ```julia; U_field = CenterField(arch, grid) ; @test_throws ArgumentError IncompressibleModel(grid=grid, architecture=arch, background_fields = (u=U_field,)); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-877563336:3,test,test,3,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-877563336,1,['test'],['test']
Testability,Tried starting a new build manually from your fork but that didn't work (https://buildkite.com/clima/oceananigans/builds/1068) so I enabled Buildkite builds from forks and pushed an empty commit to this PR. Looks like tests are running now!. All future commits to this PR should trigger tests as well.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1346#issuecomment-775442336:218,test,tests,218,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1346#issuecomment-775442336,2,['test'],['tests']
Testability,True. Quick response:. We found that if we don't have the Manifest included then different versions of packages get installed in different machines and tests break and it's a nightmare for everyone. I agree with you that in an ideal situation we should just prescribe the `compat` entries in Project.toml and that's that.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2806#issuecomment-1306127523:152,test,tests,152,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2806#issuecomment-1306127523,1,['test'],['tests']
Testability,"True. Yeah I added a couple during PRs #410 and #474 but found it hard to test as most of our functions do not produce simple output, they usually modify the internal state of model. For example, a `jldoctest` for the `RegularCartesianGrid` examples only really ends up testing that the `show(::RegularCartesianGrid)` function produces the expected output. There are probably a few docstrings that will benefit from doctests, but the vast majority might not. If we just don't want the docstring examples to go out of date we should probably use `@example` block that Documenter provides: https://juliadocs.github.io/Documenter.jl/stable/man/syntax/#@example-block-1",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/493#issuecomment-545119997:74,test,test,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/493#issuecomment-545119997,2,['test'],"['test', 'testing']"
Testability,"Trying to revive and merge this PR as part of tackling #2248. I think I mangled the merge commit so tests will fail, but I'll fix them. Sounds like we just want to have the spacings functions return the correct spacings whether on a `GridFittedBottom` or `PartialCellBottom`? And the best way to achieve this is with `KernelFunctionOperation`s.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-2397250915:100,test,tests,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-2397250915,1,['test'],['tests']
Testability,"UDA.Mem.DeviceBuffer}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{Nothing, Nothing, Nothing, Nothing, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ Oceananigans.Fields /g/data/v45/nc3020/Oceananigans.jl/src/Fields/regridding_fields.jl:48; [19] macro expansion; @ /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:422 [inlined]; [20] macro expansion; @ /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/Test/src/Test.jl:1357 [inlined]; [21] macro expansion; @ /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:383 [inlined]; [22] macro expansion; @ /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/Test/src/Test.jl:1357 [inlined]; [23] top-level scope; @ /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:164; [24] include(fname::String); @ Base.MainInclude ./client.jl:476; [25] top-level scope; @ REPL[51]:1; [26] top-level scope; @ /g/data/v45/nc3020/.julia/packages/CUDA/DfvRa/src/initialization.jl:52; [27] eval; @ ./boot.jl:368 [inlined]; [28] eval_user_input(ast::Any, backend::REPL.REPLBackend); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:151; [29] repl_backend_loop(backend::REPL.REPLBackend); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:247; [30] start_repl_backend(backend::REPL.REPLBackend, consumer::Any); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:232; [31] run_repl(repl::REPL.AbstractREPL, consumer::Any; backend_on_current_task::Bool); @ REPL /g/data/v45/n",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221177574:17033,test,test,17033,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221177574,1,['test'],['test']
Testability,"Update on the `multi_region_turbulence.jl` benchmark with `ExplicitFreeSurface`, alternating the `getregion` function with a `getregion_inner` to force compilation (thanks @glwagner); (ran on tartarus' CPU). | Resolution | Grid | Advection scheme | Wall time for 1000 time steps |; | ------------- | ------------- | -- | -- |; | 128^2 | `RegularRectilinearGrid` | `WENO5()` | 11.6 s |; | 128^2 | `MultiRegionGrid` | `WENO5()` | 16.7 s |; | 256^2 | `RegularRectilinearGrid` | `WENO5()` | 47.4 s |; | 256^2 | `MultiRegionGrid ` | `WENO5()` | 48.4 s |; | 512^2 | `RegularRectilinearGrid` | `WENO5()` | 190.9 s |; | 512^2 | `MultiRegionGrid ` | `WENO5()` | 183.2 s |",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1111318176:43,benchmark,benchmark,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1111318176,1,['benchmark'],['benchmark']
Testability,"Update: I have been able to reduce the error to be a procompiling error in oceananigans.jl:; ```; ERROR: LoadError: Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to ""/glade/u/home/knudsenl/.julia/compiled/v1.9/Oceananigans/jl_AMNEzH"".; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::IO, internal_stdout::IO, keep_loaded_modules::Bool); @ Base ./loading.jl:2300; [3] compilecache; @ ./loading.jl:2167 [inlined]; [4] _require(pkg::Base.PkgId, env::String); @ Base ./loading.jl:1805; [5] _require_prelocked(uuidkey::Base.PkgId, env::String); @ Base ./loading.jl:1660; [6] macro expansion; @ ./loading.jl:1648 [inlined]; [7] macro expansion; @ ./lock.jl:267 [inlined]; [8] require(into::Module, mod::Symbol); @ Base ./loading.jl:1611; in expression starting at /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/testcode.jl:1; ```; I have been trying to make sure that everything is up to date, and I am running on Julia version 1.9.2. My code is just; ```; using Oceananingans; ```; as I have been trying to get the library to load properly. Does anyone have any experience with this error or does it make things any clearer?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233710372:911,test,testcode,911,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233710372,2,['test'],['testcode']
Testability,"Update: I used the formulas in the paper to approximate the gradient of pressure. In a test case that is pressure dominated, I found that the accuracy imporoved by more than what the theory predicted (> 16), but that is very encouraging that we are doing something right. It then occurred to me that we are using centre differencing for the divergence of the transport in the evolution equation for the height. That suggests that we would probably want to use 4-th order approximations to those terms as well. Question: Since we are chaging from approximations at faces to approximations at centers, should the formuals change? I don't think they should but wanted to ask, just in case.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741890419:87,test,test,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741890419,1,['test'],['test']
Testability,"Update: I've tried the newest Oceananigans version (0.78) with Julia 1.7 and the memory allocation was almost exactly the same as with Julia 1.8. So it doesn't seem like it's the Julia version. Also relevant, as per @glwagner's comment, is that I am indeed using a vertically stretched grid. I could also run a test simulation with a regular grid and see if that decreases the allocation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299013300:311,test,test,311,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299013300,1,['test'],['test']
Testability,Updated the branch and added tests that `backend_kw` works with `FieldTimeSeries` and `FieldDataset` so I think this PR is actually ready for review now!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3739#issuecomment-2427799618:29,test,tests,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3739#issuecomment-2427799618,1,['test'],['tests']
Testability,Updating the code is easy; but testing will be more time consuming. So we just need someone who's willing to run experiments.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2403#issuecomment-1084996734:31,test,testing,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2403#issuecomment-1084996734,1,['test'],['testing']
Testability,"Using ; ```; grid = RectilinearGrid(arch, size=(Nx, Ny, Nz), halo=(4, 4, 4), x=(0, 2π), y=(0, 2π), z=(0, 1), topology=(Periodic, Periodic, Bounded)). bottom = zeros(Nx, Ny); bound = Int.(Ny/2-40:Ny/2+40); bottom[bound, bound] .= 0.5. grid = ImmersedBoundaryGrid(grid, GridFittedBottom(bottom)); mrg = MultiRegionGrid(grid, partition=XPartition(2), devices = 2); ```; and ; ```; u(x, y, z) = (x * z) / 10; ```. (with `ImplicitFreeSurface`) we get. #### Strong Scaling; | Grid size | Grid | GPUs | wall time | efficiency |; | -- | -- | -- | -- | -- |; | `1440×600×48`| `RectilinearGrid` | 1 | 1.85 minutes | 100% |; | `1440×600×48`| `MultiRegionGrid` | 2 | 1.12 minutes | 82.5% |. Scaling gets better?? at this point I a little confused...; Bottomline... ; there is still a bunch of optimization and more systematic benchmarking to be done, I'll merge this PR and then we can think about improving the scaling, the first things that come in mind are; - Ensure that all the `apply_regionally!` and `construct_regionally` calls are asynchronous. This might not be the case if there are memory copies inside function calls. That would serialize the execution of part of the code. To ensure this we require a more in-depth profiling using ***nsys***; - remove all `fill_halo_regions!` that are not `Periodic` or `Communication` which will allow asynchronous execution of halo filling across different direction (luckily already being done in #2477); - Bundle together the halo passing in a single boundary buffer to allow sending field tuples together (depends on #2509). Additional work to do on `MultiRegion` is ; - Perform more systematic benchmarking; - Design correct `OutputWriters` and `OutputReaders` for `MultiRegionFields`. Maybe not immediate priorities but definitely important; - Adapt `RungeKutta3` to `Multiregion` through `@apply_regionally`; - Implement a multi-region version of the Nonhydrostatic pressure solver; - Overlap computation and communication (for this we require _non-blocking",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116853178:814,benchmark,benchmarking,814,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116853178,1,['benchmark'],['benchmarking']
Testability,"Using the code from `fjp/benchmark-incompressiblemodel-WENO5` branch I get this:. ```Julia; julia> using Oceananigans; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/E3Wer/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads. julia> N = 32; 32. julia> grid = RegularRectilinearGrid(Float32, size=(N, N, N), extent=(1, 1, 1)); RegularRectilinearGrid{Float32, Periodic, Periodic, Bounded}; domain: x ∈ [0.0, 1.0], y ∈ [0.0, 1.0], z ∈ [-1.0, 0.0]; topology: (Periodic, Periodic, Bounded); resolution (Nx, Ny, Nz): (32, 32, 32); halo size (Hx, Hy, Hz): (1, 1, 1); grid spacing (Δx, Δy, Δz): (0.03125f0, 0.03125f0, 0.03125f0). julia> model = IncompressibleModel(architecture=GPU(), float_type=Float32, advection=WENO5(), grid=grid); ┌ Warning: Inflating model grid halo size to (3, 3, 3) and recreating grid. The model grid will be different from the input grid. To avoid this warning, pass halo=(3, 3, 3) when constructing the grid.; └ @ Oceananigans.Grids /g/data/v45/nc3020/Oceananigans.jl/src/Grids/automatic_halo_sizing.jl:41; IncompressibleModel{GPU, Float32}(time = 0 seconds, iteration = 0); ├── grid: RegularRectilinearGrid{Float32, Periodic, Periodic, Bounded}(Nx=32, Ny=32, Nz=32); ├── tracers: (:T, :S); ├── closure: Nothing; ├── buoyancy: SeawaterBuoyancy{Float32, LinearEquationOfState{Float32}, Nothing, Nothing}; └── coriolis: Nothing. julia> time_step!(model, 1); ERROR: InvalidIRError: compiling kernel gpu_calculate_Gw!(Cassette.Context{nametype(CUDACtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(32, 32, 32)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(2, 2, 32)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}}, Nothing, KernelA",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-870162360:25,benchmark,benchmark-incompressiblemodel-,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-870162360,1,['benchmark'],['benchmark-incompressiblemodel-']
Testability,Usually restarting the test works for me to clear that error,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2607#issuecomment-1157789828:23,test,test,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2607#issuecomment-1157789828,2,['test'],['test']
Testability,"VMOpenMP_jll v15.0.7+0; [94ce4f54] Libiconv_jll v1.17.0+0; [5ced341a] Lz4_jll v1.9.4+0; [856f044c] MKL_jll v2024.2.0+0; [7cb0a576] MPICH_jll v4.2.1+1; [f1f71cc9] MPItrampoline_jll v5.4.0+0; [9237b28f] MicrosoftMPI_jll v10.1.4+2; [e98f9f5b] NVTX_jll v3.1.0+2; ⌃ [7243133f] NetCDF_jll v400.902.209+0; ⌅ [4c82536e] Nettle_jll v3.7.2+0; [fe0851c0] OpenMPI_jll v5.0.3+0; [458c3c95] OpenSSL_jll v3.0.14+0; [efe28fd5] OpenSpecFun_jll v0.5.5+0; [c2071276] P11Kit_jll v0.24.1+0; [02c8fc9c] XML2_jll v2.13.1+0; [ffd25f8a] XZ_jll v5.4.6+0; [3161d3a3] Zstd_jll v1.5.6+0; [477f73a3] libaec_jll v1.1.2+0; [337d8026] libzip_jll v1.10.1+0; [1317d2d5] oneTBB_jll v2021.12.0+0; [0dad84c5] ArgTools v1.1.1; [56f22d72] Artifacts; [2a0f44e3] Base64; [ade2ca70] Dates; [8ba89e20] Distributed; [f43a241f] Downloads v1.6.0; [7b1f6079] FileWatching; [9fa8497b] Future; [b77e0a4c] InteractiveUtils; [4af54fe1] LazyArtifacts; [b27032c2] LibCURL v0.6.3; [76f85450] LibGit2; [8f399da3] Libdl; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [d6f4376e] Markdown; [a63ad114] Mmap; [ca575930] NetworkOptions v1.2.0; [44cfe95a] Pkg v1.9.2; [de0858da] Printf; [3fa0cd96] REPL; [9a3f8284] Random; [ea8e919c] SHA v0.7.0; [9e88b42a] Serialization; [6462fe0b] Sockets; [2f01184e] SparseArrays; [10745b16] Statistics v1.9.0; [4607b0f0] SuiteSparse; [fa267f1f] TOML v1.0.3; [a4e569a6] Tar v1.10.0; [8dfed614] Test; [cf7118a7] UUIDs; [4ec0a83e] Unicode; [e66e0078] CompilerSupportLibraries_jll v1.0.5+0; [781609d7] GMP_jll v6.2.1+2; [deac9b47] LibCURL_jll v7.84.0+0; [29816b5a] LibSSH2_jll v1.10.2+0; [c8ffd9c3] MbedTLS_jll v2.28.2+0; [14a3606d] MozillaCACerts_jll v2022.10.11; [4536629a] OpenBLAS_jll v0.3.21+4; [05823500] OpenLibm_jll v0.8.1+0; [bea87d4a] SuiteSparse_jll v5.10.1+6; [83775a58] Zlib_jll v1.2.13+0; [8e850b90] libblastrampoline_jll v5.8.0+0; [8e850ede] nghttp2_jll v1.48.0+0; [3f19e933] p7zip_jll v17.4.0+0; Info Packages marked with ⌃ and ⌅ have new versions available, but those with ⌅ are restricted by compatibility constr",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233740720:20708,Log,Logging,20708,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233740720,1,['Log'],['Logging']
Testability,Valiant effort. Looks like some matrix solver tests don't pass --- @simone-silvestri perhaps you can take a look when you have time.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2175#issuecomment-1020156593:46,test,tests,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2175#issuecomment-1020156593,1,['test'],['tests']
Testability,"Very good point. The background buoyancy does not satisfy the boundary conditions that are imposed. I will check it out later. If this is the case, then it is still mysterious why GPUs have a harder time with this than CPUs, but we will see and learn. Thanks for the suggestion. Francis; ________________________________; From: Gregory L. Wagner ***@***.***>; Sent: Wednesday, April 7, 2021 5:44:23 PM; To: CliMA/Oceananigans.jl ***@***.***>; Cc: Francis Poulin ***@***.***>; Mention ***@***.***>; Subject: Re: [CliMA/Oceananigans.jl] strange results on gpus (#1554). The second time-step is when QuasiAdamsBashforth2 uses tendency information saved from the previous time-step. On the first time-step it's equivalent to a forward Euler scheme. I know the differences are small, 8th decimal place or so, but on such a coarse grid should we be expecting the same answers?. Hardware differences can produce results that differ by something like sqrt(eps(Float64)) I think. This is the tolerance we use for regression tests (but even those sometimes fail to pass on the GPU for some reason). Since the background buoyancy field has a linear gradient and your domain is bounded, can you try running the same simulation but explicitly resolving the background buoyancy field? (This could suggest that the issue has to do with BackgroundField...). -; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815284094>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AB63PQICFGOXKMU4HFN3NOLTHTG3PANCNFSM42RDHB2Q>.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815341207:1015,test,tests,1015,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815341207,2,['test'],['tests']
Testability,"Very good questions. I don't have very good answers, but happy to share my thoughts. I don't know how things will change for velocity but it should be clearer after we figure out how to deal with the tracers. As for how the velocity is set, we always set the normal velocity to be zero at the interface. The only difference is the `ParitalCell` has a bottom that can be higher and we need to take this into account when computing the fluxes in and out of this region. We haven't gotten there yet but it's part of the plan. There aren't any essential differences between the current method, what we call `GridFitted` and Adcroft et al. call a `FullCell` method, and the `PartialCell` method. The former is the limit when we choose the height of the topography in a cell interface to be zero, whereas the latter can pick it to be between a tolerance (currently 0.2) and 1 of the full depth. So the `GridFitted` boundary must have the boundary between fluid and solid at a face, whereas `PartialCell` can have it anywhere in the interior. That means that the interface is really at i + alpha where 0 \le alpha < 1, or something like that. I can imagine that sometime in the future they are part of the same function, but much testing must happen before. I don't believe we need to change how `solid_interface` works but I need to look over how it's defined to make sure.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1042491748:1223,test,testing,1223,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1042491748,2,['test'],['testing']
Testability,"Very nice @simone-silvestri . I think we have to regenerate the ocean LES regression test data. Unfortunately this regression test doesn't use `DataDeps` yet so regenerating it will increase the size of the repo by a little bit. Another option is to refactor the regression tests to use DataDeps but this might be best saved for a future PR. I think this fix may actually resolve some ancient issues that we didn't understand until now, for example:. https://github.com/CliMA/Oceananigans.jl/issues/1179. To summarize:. When running a model that has both `Periodic` and `Bounded` directions, _and_ when using a stencil that touches corner points (such as with `coriolis isa FPlane`, the order in which halos are filled matters. In particular, we must fill periodic directions _last_, because the corners then depend on a halo point which is just outside the boundary in the `Bounded` direction(s). The ocean large eddy simulation regression test is one such case (horizontally-periodic, bounded in z). There is a no-flux surface velocity boundary condition that creates a dependency between the bounded and periodic halo fills. The previous algorithm assumed that all halos could be filled simultaneously with no dependencies on one another. However, because the CPU is serial the halos were nevertheless filled in the ordering prescribed by `fill_halo_regions!`:. https://github.com/CliMA/Oceananigans.jl/blob/2d6ccfe94ce2c68857f70b2f8839020049932e00/src/BoundaryConditions/fill_halo_regions.jl#L32-L42. In other words, the vertical halos (the bounded direction) are filled last on the CPU. On the GPU the ordering may change because on the GPU KernelAbstractions is no longer serial. Thus on occasion the periodic halos might have been filled _after_ the bounded halos, leading to a failure of the regression test. This PR fixes that issue so that periodic directions are always filled last. So I think we should expect that regression tests fail on both the CPU and GPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2035#issuecomment-958102800:85,test,test,85,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2035#issuecomment-958102800,6,['test'],"['test', 'tests']"
Testability,"Very thorough write-up, thank you!. My initial reaction is that maybe something is not wrong. Intuitively I feel that TKE statistics are generally less noisy than dissipation statistics, but I agree the difference between snapshot and time average is pretty big. This is simulation dependent and I'm sure you've thought about all this though. The two should agree in the limit that the averaging window (and output interval) goes to zero? Otherwise there's a bug. I think we have pretty good time averaging tests for NetCDF with analytic solutions (https://github.com/CliMA/Oceananigans.jl/blob/master/test/test_netcdf_output_writer.jl#L476-L570) but we don't explicitly test `NetCDFOutputWriter` + `KernelComputedField` + `AveragedTimeInterval` so there could be a bug. What does a movie of dissipation look like?. I notice the time step is `Δt = 20minutes` while the output interval is `100minutes` so at most a time average will contain 4-5 iterations worth of data. If dissipation changes rapidly (or has a period) then I can see the average being quite different from the snapshot.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-809488746:507,test,tests,507,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-809488746,3,['test'],"['test', 'tests']"
Testability,"Voting ""yes"" for adding a test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1712408442:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1712408442,1,['test'],['test']
Testability,WENO is failing on the GPU because CUDAKernels.jl is trying to overdub `^` with `CUDA.pow` which doesn't exist anymore: https://github.com/JuliaGPU/KernelAbstractions.jl/pull/249. Otherwise we should be pretty close to having all tests passing!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-839082254:230,test,tests,230,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-839082254,1,['test'],['tests']
Testability,We are probably also lacking a lot of tests for fill halo regions,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3833#issuecomment-2399996804:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3833#issuecomment-2399996804,1,['test'],['tests']
Testability,We aren't testing this I guess? Might be good to add since we do try to convert arrays to `CuArray` right?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3639#issuecomment-2189619715:10,test,testing,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3639#issuecomment-2189619715,1,['test'],['testing']
Testability,We can add a test. E.g. in the 1D diffusion equation using Euler we can use the `ConsecutiveIterations(TimeInterval(..))` to reproduce the RHS of the equation?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2100#issuecomment-989534667:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2100#issuecomment-989534667,1,['test'],['test']
Testability,We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1575780453:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1575780453,1,['test'],['test']
Testability,"We can run our attempts at a partial cell method without any errors. :). Today we plan to look at the results and see if the are reasoanble. Thinking about some tests to add would probably be a good idea. As you know, the two methods are virtually identical. I am happy to go the way of generalizing `GridFittedBottom` and add in a tolerance and a way of specifying the height. Shouldn't be much work, it's just a matter of deciding exactly what we want this to look like. . I'll share our results later on and maybe that will help.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1044676773:161,test,tests,161,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1044676773,1,['test'],['tests']
Testability,"We could also introduce a new log level, eg `TIMINGS` or something. Might not be good to hijack `@debug` --- it's used for other stuff, so the timing logs might get buried. Like this 100-iteration simulation:. ```; Debug: PreconditionedConjugateGradientSolver 9, |r|: 2.0861651135626188e-13; └ @ Oceananigans.Solvers ~/Projects/Oceananigans.jl/src/Solvers/preconditioned_conjugate_gradient_solver.jl:185; ┌ Debug: PreconditionedConjugateGradientSolver 9, ρ: 4.352084881045736e-26; └ @ Oceananigans.Solvers ~/Projects/Oceananigans.jl/src/Solvers/preconditioned_conjugate_gradient_solver.jl:192; ┌ Debug: PreconditionedConjugateGradientSolver 9, |z|: 2.0861651135626188e-13; └ @ Oceananigans.Solvers ~/Projects/Oceananigans.jl/src/Solvers/preconditioned_conjugate_gradient_solver.jl:193; ┌ Debug: Launching kernel broadcast_xy! with worksize (128, 1); └ @ Oceananigans.Utils ~/Projects/Oceananigans.jl/src/Utils/kernel_launching.jl:85; ┌ Debug: PreconditionedConjugateGradientSolver 9, β: 0.1312038209706307; └ @ Oceananigans.Solvers ~/Projects/Oceananigans.jl/src/Solvers/preconditioned_conjugate_gradient_solver.jl:201; ┌ Debug: Launching kernel _fill_west_halo! with worksize (1, 1); └ @ Oceananigans.Utils ~/Projects/Oceananigans.jl/src/Utils/kernel_launching.jl:85; ┌ Debug: Launching kernel _fill_east_halo! with worksize (1, 1); └ @ Oceananigans.Utils ~/Projects/Oceananigans.jl/src/Utils/kernel_launching.jl:85; ┌ Debug: Launching kernel _implicit_free_surface_linear_operation! with worksize (128, 1); └ @ Oceananigans.Utils ~/Projects/Oceananigans.jl/src/Utils/kernel_launching.jl:85; ┌ Debug: Launching kernel _fill_west_halo! with worksize (1, 1); └ @ Oceananigans.Utils ~/Projects/Oceananigans.jl/src/Utils/kernel_launching.jl:85; ┌ Debug: Launching kernel _fill_east_halo! with worksize (1, 1); └ @ Oceananigans.Utils ~/Projects/Oceananigans.jl/src/Utils/kernel_launching.jl:85; ┌ Debug: PreconditionedConjugateGradientSolver 9, |q|: 3.772383893402093e-14; └ @ Oceananigans.Solvers ~/Proje",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-882111021:30,log,log,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-882111021,4,['log'],"['log', 'logs']"
Testability,We do have tests for `AveragedField` right? Do we need a more expensive / larger test (like the one proposed in #1767) to catch this bug?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868840482:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868840482,2,['test'],"['test', 'tests']"
Testability,We have a test that satisfies those requirements I believe:. https://github.com/CliMA/Oceananigans.jl/blob/39ee546803b05fdf1fdaec2880fede5b5aaebe10/test/test_netcdf_output_writer.jl#L476-L570. In particular it uses a tracer solution that decays exponentially in time at a rate that is different at every grid point. What are the additional ingredients in your script that lead to a bug?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817981813:10,test,test,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817981813,2,['test'],['test']
Testability,"We have fully implemented a hard coded drag into all of the momentum viscous fluxes. Since this implementation of the drag has different values for ""symmetric"" fluxes such as `viscous_flux_uy` and `viscous_flux_vx` that are located at the same point, the `conditional_flux_fcc` location-separated fluxes were not enough. We split these into functions such as `conditional_flux_fcc_uy` and `conditional_flux_fcc_vx`. It'll be easier to address these issues directly in the immersed `viscous_flux` once we have a separate term in the tendency equations with its own functions. . These functions then check whether the interface between solid and fluid is at the top of a cell or the bottom of a cell, applying the correctly directioned drag for that side. The way these conditionals work, the fully immersed cells that aren't on a boundary would be calculating fluxes as usual, except that all those terms are masked. So the fluxes inside the solid will remain zero. When the solid-fluid interface is at the top or right hand side of a cell, the velocities for that `(i,j,k)` location will all be within the solid. If you use them in your drag functions, it would just be zero flux. So, the drag at a top flux interface, for instance, located at `(i,j,k)` will use the velocities at `(i,j,k-1)`, and so on for the other directions. This makes them match the usual non-immersed drag BC for the 1D case as seen below. . https://user-images.githubusercontent.com/67593861/160839128-37ab95fa-f28b-43c0-8bbf-3c850ae754f2.mp4. https://user-images.githubusercontent.com/67593861/160839127-912ee3d0-75e9-4536-a494-2ec3c6c2b006.mp4. https://user-images.githubusercontent.com/67593861/160839125-bef17105-d8ac-4999-a3f0-fbbb55e8498a.mp4. @tomchor has also tested them with 3D setups, which worked as well! There's still a lot of room for streamlining and speeding up this set up, which I believe will be easier to do in the full implementation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1083117667:1743,test,tested,1743,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1083117667,1,['test'],['tested']
Testability,We have switched to using that recently in the distributed test suite:; https://github.com/CliMA/Oceananigans.jl/blob/3c95e7ee6772a2597e206ae35202500be1ef5b32/.buildkite/distributed/pipeline.yml#L1-L20,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328824617:59,test,test,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328824617,1,['test'],['test']
Testability,"We need an MPI tips / wiki section... been working on getting distributed simulations running on Engaging since yesterday (we need people to be able to start running distributed simulations immediately with minimal start up time). Here are a few things I learned:. * Remember to load a system MPI on your HPC, eg `module load openmpi`; * MPI may have to be installed / configured carefully --- after loading a system MPI. `MPIPreferences` can help:. ```julia; using MPIPreferences; MPIPreferences.use_system_binary(); ```. https://juliaparallel.org/MPI.jl/stable/configuration/. * Configuring SLURM correctly may also require some trial and error, because the documentation is unclear and there are a huge number of options. I can't figure out if the documentation is wrong, in fact, or if instead the engaging cluster does not support some options. Either way, a small test script like. ```julia; using MPI. MPI.Init(); @show MPI.Comm_rank(MPI.COMM_WORLD); @show MPI.Comm_size(MPI.COMM_WORLD); ```. Is helpful for debugging. Also, I recommend first trying to start jobs interactively before using `sbatch`. Interactive jobs launch faster, so we get a faster trial-error iteration. I'm still working on things, but it seems like another point may be salient:. * Initialize / precompile outside of a parallel job before trying to launch a parallel job via `mpiexec`. Here are some notes that may be specific to engaging:. I'm using `srun` to get a 4-GPU node to use interactively:. ```; srun -p my_partition --tasks-per-node=4 --cpus-per-task=32 --gres=gpu:4 --gpus-per-node=4 --mem=0 -t 01:00:00 -N 1; ```. it seems we have to use the option `gpus-per-node`, rather than setting the total number of GPUs. Also we redundantly also have to specify `gres=gpu:4` (`gres` stands for ""generalized resource""). Why `gres` can't tell what `gpus-per-node` is, I don't know. `-N 1` means 1 node. Finally we also have to specify ``--tasks-per-node=4` (matching `gres` _and_ the number of GPUs per node), otherwise",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2389107436:870,test,test,870,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2389107436,2,['test'],['test']
Testability,"We need halos larger than 1 in `Bounded` directions, because we should not use short-circuiting logic in GPU kernels.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2717#issuecomment-1233194825:96,log,logic,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2717#issuecomment-1233194825,1,['log'],['logic']
Testability,We need more tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3744#issuecomment-2314116465:13,test,tests,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3744#issuecomment-2314116465,1,['test'],['tests']
Testability,We need to make tests shorter… :(,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1119583659:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1119583659,1,['test'],['tests']
Testability,We now have `getproperty` for `FieldDataset`! I also improved the `Base.show` function so it summarizes what fields are in the dataset. Added some tests too. Will merge once tests pass.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3754#issuecomment-2338678371:147,test,tests,147,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3754#issuecomment-2338678371,2,['test'],['tests']
Testability,"We now have some simple boundary condition physics test thanks to PR #118 and a couple of golden master tests in PR #140. #136 has some more specific physics tests that will be implemented. We should either come up with some concrete goals for this issue to become resolvable, or we should close it and rely on it for inspiration in designing future tests.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-475243811:51,test,test,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-475243811,4,['test'],"['test', 'tests']"
Testability,We probably want to add a test for this feature?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-875843846:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-875843846,1,['test'],['test']
Testability,We should add a test to prevent this (and bugs like this) from entering in the future.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2710#issuecomment-1224054533:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2710#issuecomment-1224054533,1,['test'],['test']
Testability,We should add tests judiciously because our CI resources are currently a little strained.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1126374334:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1126374334,1,['test'],['tests']
Testability,We should add tests that ensure this remains function a la #1937,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1959#issuecomment-904624745:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1959#issuecomment-904624745,1,['test'],['tests']
Testability,We should also add a test similar to the one that was added in #3512.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2000759567:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2000759567,1,['test'],['test']
Testability,"We should check the docs example directly, but it was just fine (at higher resolution) in some tests I did.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2819#issuecomment-1312068212:95,test,tests,95,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2819#issuecomment-1312068212,1,['test'],['tests']
Testability,"We should have a new test or two for the ""index computation"", right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2740#issuecomment-1262814827:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2740#issuecomment-1262814827,1,['test'],['test']
Testability,We should include a bit more information about testing and suggestions for a convenient workflow at https://clima.github.io/OceananigansDocumentation/stable/contributing/,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-2000017025:47,test,testing,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-2000017025,1,['test'],['testing']
Testability,"We should now be able to create cubed sphere face grids from the JLD2 files in https://github.com/CliMA/OceananigansArtifacts.jl using. ```julia; using DataDeps; using Oceananigans. dd = DataDep(""cubed_sphere_32_grid"",; ""Conformal cubed sphere grid with 32×32 grid points on each face"",; ""https://github.com/CliMA/OceananigansArtifacts.jl/raw/main/cubed_sphere_grids/cubed_sphere_32_grid.jld2"",; ""3cc5d86290c3af028cddfa47e61e095ee470fe6f8d779c845de09da2f1abeb15"" # sha256sum; ). DataDeps.register(dd). cs32_filepath = datadep""cubed_sphere_32_grid/cubed_sphere_32_grid.jld2""; grid = ConformalCubedSphereFaceGrid(cs32_filepath, face=6, Nz=1, z=(-1, 0)); ```. so we should be able to start running some simple tests on single faces!. Should we merge and work on testing in subsequent PRs?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1417#issuecomment-797074745:707,test,tests,707,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1417#issuecomment-797074745,4,['test'],"['testing', 'tests']"
Testability,We should run some similar benchmarks as were run on #1923 to see if this change yields a speed up (or not).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2035#issuecomment-959993354:27,benchmark,benchmarks,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2035#issuecomment-959993354,1,['benchmark'],['benchmarks']
Testability,We should wrap up this PR. Let's discuss what's needed. The most important thing is modifying src and test to reflect what we learned.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3306#issuecomment-1970727232:102,test,test,102,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3306#issuecomment-1970727232,2,['test'],['test']
Testability,We test that `NonhydrostaticModel` maintains incompressibility on both fully regular and vertically-stretched grids:. https://github.com/CliMA/Oceananigans.jl/blob/e929631eb3a233ae3f3358d2146e5d6004f9a06c/test/test_time_stepping.jl#L311-L341. We don't have tests for the hydrostatic model however. A similar but possibly slightly simpler test might test that `compute_w_from_continuity!` correctly calculates a vertical velocity field given some horizontally divergent horizontal velocity field.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1934#issuecomment-899757319:3,test,test,3,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1934#issuecomment-899757319,10,['test'],"['test', 'tests']"
Testability,"We will have to set up some test cases for sure. Are you directly measuring memory allocation, or is the problem ""out of memory errors""? Because the second might have to do with temporary allocations.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299015577:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299015577,1,['test'],['test']
Testability,"We won't reduce computations, because these operators are not short-circuiting (this is what we want to maximize performance for these inner functions). Evaluating booleans isn't expensive. Short-circuiting logic can be expensive (or rather, prevent compiler optimizations) in hot inner loops. We've written the code so we don't use short-circuiting logic (`ifelse` rather than `if`, `&` rather than `&&`).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2263#issuecomment-1047180293:207,log,logic,207,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2263#issuecomment-1047180293,2,['log'],['logic']
Testability,"We would like a parallel hydrostatic model eventually, you're right. We need to parallelize the preconditioned conjugate gradient solver and ensure that reduced fields parallelize for that. I'm not sure this 2D internal tide problem is large enough to benefit from GPU parallelization --- have you tested GPU parallelization of such small problems?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1654#issuecomment-867978094:298,test,tested,298,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1654#issuecomment-867978094,1,['test'],['tested']
Testability,We would need CUDA 3.8.0 to develop multiGPU architectures without having to use MPI. . You mind if I revamp this PR and try to see what we need to do to update CUDA?; I think the tests not passing comes from the fact that we also need to update CUDAKernels to version 0.3.3 (we are now using 0.3.0). Actually for me everything works very good from main just switching to CUDA 3.8.0 and CUDAKernels 0.3.3,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-1043202547:180,test,tests,180,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-1043202547,1,['test'],['tests']
Testability,We'll have to do some benchmarking on the CPU too,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1965530950:22,benchmark,benchmarking,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1965530950,1,['benchmark'],['benchmarking']
Testability,We'll have to generate some new benchmarks after this especially for smaller / 1D / 2D problems,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1513035348:32,benchmark,benchmarks,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1513035348,1,['benchmark'],['benchmarks']
Testability,We'll merge once tests pass,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3223#issuecomment-1688509460:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3223#issuecomment-1688509460,1,['test'],['tests']
Testability,"We're getting errors when running the tests on buildkite that I'm not getting when running on a GPU locally. For example this:. ```julia; Field boundary conditions [GPU, RectilinearGrid]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-7/clima/oceananigans/test/test_computed_field.jl:475; --;   | Expression: #= /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-7/clima/oceananigans/test/test_computed_field.jl:475 =# CUDA.@allowscalar all(ST.data[1:Nx, 1:Ny, 0] .== ST.data[1:Nx, 1:Ny, 1]); ```. The above line works for me on GPU when doing `include(""test_computed_field.jl"")`, but for some reason fails on buildkite. @glwagner @simone-silvestri any ideas as to why? The fact that I can't reproduce these errors locally is making it hard for me to solve them",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1410622362:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1410622362,4,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"We're trying to design a test that catches the bug this PR fixes. But since this PR _fixes_ the bug, we have to do that in another PR. I've been working on that at #1784. I'd be ok merging this PR without that test and adding the test later, since all the existing tests pass for this PR. What do you think @ali-ramadhan, @navidcy ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-870694542:25,test,test,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-870694542,4,['test'],"['test', 'tests']"
Testability,"Weird error; this line seems to be your problem. https://github.com/CliMA/Oceananigans.jl/blob/31ffa28e11c9a4f6b1e44296f742edd54067582b/src/Architectures.jl#L26. because your `DEVICE_FREE_STREAMS` is a tuple with only one element, while you should have a tuple of 2 elements. I cannot reproduce this error in any cluster. If I test this MWE on our local server, which has 4 GPUs, checking; ```; julia> using Oceananigans.Architectures: DEVICE_STREAMS, DEVICE_FREE_STREAMS. julia> length(DEVICE_STREAMS); 4. julia> DEVICE_FREE_STREAMS; (CuStream[], CuStream[], CuStream[], CuStream[]). julia> DEVICE_STREAMS; (CuStream[CuStream(0x000000000d05d7c0, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000d038e40, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000a3726f0, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000e718430, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000dfa47f0, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000d0cda30, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000c74e730, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000d325890, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000cca0960, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b))], CuStream[CuStream(0x000000000cf80ef0, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000cfd5930, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000f2b0160, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000f39d1f0, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000db98540, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000e152d60, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000e9f2890, CuContext(0x0000000004eb",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310985186:327,test,test,327,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310985186,1,['test'],['test']
Testability,"Weird that this one example is behaving quite differently. In Julia 1.10.6, the example produces flows that generally remain at a max CFL of ~0.13 or lower. In Julia 1.11.1, the flow reaches a max CFL of ~0.2 after ~60 iterations and blows up within ~100 iterations. Took a quick look but couldn't find anything obviously different. Are there any tests that time step a hydrostatic model with an immersed boundary for 100+ time steps?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3836#issuecomment-2448616833:347,test,tests,347,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3836#issuecomment-2448616833,1,['test'],['tests']
Testability,Well `sum` definitely won't work (it has to be a simple single-argument transformation) but you could try a function like. ```julia; square(x) = x * x; ```. or `log` if you want to be adventurous,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3427#issuecomment-1995001753:161,log,log,161,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3427#issuecomment-1995001753,2,['log'],['log']
Testability,Well doesn't generating the data with `main` beats the purpose a bit? What if we have introduced a bug and then we regenerate the data with the bug and then test against that...?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439356548:157,test,test,157,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439356548,1,['test'],['test']
Testability,"Well ok, the logic is here (`partial_mapreduce_grid` is the kernel): . https://github.com/JuliaGPU/CUDA.jl/blob/92f1001861641cb173af49454b05c91728cbfc3d/src/mapreduce.jl#L213-L217",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1684#issuecomment-845598808:13,log,logic,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1684#issuecomment-845598808,1,['log'],['logic']
Testability,"Well, it looks like this PR does not completely solve the problem, and the jury is out perhaps on whether it helps or not. I did learn a few things. It seems the race condition originates from an attempt to ""re-resolve"" the manifest during the test:. https://buildkite.com/clima/oceananigans/builds/17516#01920c32-4e89-4654-a4a8-9b077e51e87c/39-221. The puzzling part is how to solve the problem. I thought at first we could solve it by preventing the Manifest from being ""re-resolved"" --- perhaps by resolving it correctly during initialization? But actually, this isn't possible, since the problematic manifest in question is a temporary run that is created only for the tests (and its different from the project's manifest, because it also includes the test dependencies). This temporary test manifest can't be initialized as far as I can tell and is created independently for each test. Finally, it seems that some race conditions happen in a print statement (this is just from reading the error message). It all boils down eventually to these two lines:. https://github.com/JuliaLang/Pkg.jl/blob/5fbfa125045ce3e68ce10bf9fc1727bb3232c123/src/Operations.jl#L799-L800. The command its trying to run is. ```julia; ERROR: failed process: Process(`/net/ocean/home/data44/data5/glwagner/julia-1.10.5/bin/julia -C native -J/net/ocean/home/data44/data5/glwagner/julia-1.10.5/lib/julia/sys.so -O0 -g1 --color=yes -O0 --color=no --history-file=no --startup-file=no --project=/tmp/jl_f9Z8t1/Project.toml --eval 'append!(empty!(Base.DEPOT_PATH), [""/data5/glwagner/.julia-17516""]); --;   | append!(empty!(Base.DL_LOAD_PATH), String[]). cd(""/data5/glwagner/.julia-17516/packages/CUDA_Runtime_jll/YgJCI/.pkg""); --;   | include(""/data5/glwagner/.julia-17516/packages/CUDA_Runtime_jll/YgJCI/.pkg/select_artifacts.jl"");   | ' -t1 --startup-file=no x86_64-linux-gnu-libgfortran5-cxx11-julia_version+1.10.5`, ProcessSignaled(11)) [0]; ```. and supposedly the issue arises within the `select_artifacts.jl` call in `CUD",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3783#issuecomment-2362378199:244,test,test,244,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3783#issuecomment-2362378199,10,['test'],"['test', 'tests']"
Testability,"Well, the tests passed finally with no manual intervention so I declare my work complete @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3783#issuecomment-2364021137:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3783#issuecomment-2364021137,1,['test'],['tests']
Testability,Well... Some packages that the test use are not installed and you need to install manually and then be careful not to commit the Manifest. I get annoyed all the time. . But in any case: the test_file is wrong because it tests the file PLUS everything else.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1995281440:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1995281440,2,['test'],"['test', 'tests']"
Testability,What are the current results of the benchmark?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-884210574:36,benchmark,benchmark,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-884210574,1,['benchmark'],['benchmark']
Testability,What does one of tests return versus what is expected? The buildkite log only says they fail so there's no way to figure out what's going wrong.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564731957:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564731957,2,"['log', 'test']","['log', 'tests']"
Testability,"What else do we need to do for this PR (assuming the tests work this time)? I think since the goal here was to modify the existing code to allow proper open boundaries to be implemented we've achieved that here and in #3508, and further work on open boundaries is a different discussion about what methods we want to implement, automatic convenience constructors, etc.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2013086261:53,test,tests,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2013086261,1,['test'],['tests']
Testability,What happened here? All tests were OK and one day disaster happened...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2320#issuecomment-1067579051:24,test,tests,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2320#issuecomment-1067579051,1,['test'],['tests']
Testability,"What if `nu` varies? Do we write this. ```; h⁻¹ ∇ ⋅ (ν h ∇u); ```. ?. this could be implemented using the existing closures:. 1. Add a property `velocities = (u = uh / h, v = vh / h)` (the abstract operations, no data) to `ShallowWaterModel`; 2. Support only `HorizontalScalarDiffusivity` and `HorizontalScalarBiharmonicDiffusivity` (explicitly forbid other closures in the constructor); 3. Then in the constructor, rewrite the closures with. ```julia; if closure isa HorizontalScalarDiffusivity; ν = closure.ν; thickness_weighted_ν = h * ν # Works when `ν` is a number, field, or function of (x, y, z); thickness_weighted_closure = HorizontalScalarDiffusivity(ν = thickness_weighted_ν); end; ```. The same sort of logic applies to tracers diffusivities and also for biharmonic viscosity / diffusivities. 4. Write the kernel functions as. ```julia; 1 / h[i, j, k] * ∂ⱼ_τ₁ⱼ(i, j, k, grid, closure, diffusivities, velocities, tracers, clock, nothing); ```. (the `nothing` is `buoyancy` in our 3D models). I think that should work. The only case that won't work is diffusivities that are functions of `(x, y, z, t)`. But in fact this could be supported too by wrapping function `ν` in `FunctionField` with the model `clock` in the model constructor when `ν_effective` is calculated.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2403#issuecomment-1084969833:715,log,logic,715,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2403#issuecomment-1084969833,1,['log'],['logic']
Testability,What is the difference in the regression tests between `main` and this PR?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1557700256:41,test,tests,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1557700256,1,['test'],['tests']
Testability,"What is the intent of these tests? Are they intended to be included in CI, or are they more in the style of “benchmarks” that are run relatively infrequently?. @edoddridge A twist on option 1 is to design a forcing that exactly cancels the terms associated with nonlinear and linear terms in a given equation for some simple initial condition consisting of sines and cosines. For example, pick an initial condition, calculate all terms in a given equation, and then write a forcing that exactly cancels those terms. Then check that the initial condition doesn’t change after a few time-steps. This method allows a test at low resolution with low computational burden and allows each nonlinear and linear term in each equation to be assessed separately. . It would also be good to run “benchmarks” that are designed to be run less frequently, which is a category I think some of the suggested tests fall into (?) Is the algorithm in Oceananigans.jl identical to some configuration of MITgcm? If so that opens the possibility to compare a solution grid-point for grid-point.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-467266242:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-467266242,5,"['benchmark', 'test']","['benchmarks', 'test', 'tests']"
Testability,What make sense logically is that `validate_closure` is called first. Because if it's not a valid closure why bother doing anything else... But I'm not sure if it's difficult to refactor.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2347365219:16,log,logically,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2347365219,1,['log'],['logically']
Testability,"What surprises me is that not only `v` is different. Despite passing, also the summary for `u` and `h` is very different.; actually also outside the test environment, I get the same results 😅 . . I guess this confirms that this test is a bit too hard and we just should decrease the number of time steps",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430409915:149,test,test,149,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430409915,2,['test'],['test']
Testability,"What's happening presently is KA is forcing an older version of Enzyme to be used in the tests, that doesn't have the inactive_type used by the testing infra. . This PR https://github.com/JuliaGPU/KernelAbstractions.jl/pull/426 added relevant parts to KA, which currently is waiting for the julia registry to release a new patch release: https://github.com/JuliaRegistries/General/pull/93272. Once that lands, this should succeed.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1759890409:89,test,tests,89,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1759890409,2,['test'],"['testing', 'tests']"
Testability,"When @hennyg888 did benchmarks for shallow water with `WENO5` he found that the speed up went down from `180` with 5th order upwindng to about `120`. This is in contrast to what I found previously when `WENO5` went up to about `380`. I sent those results to @ali-ramadhan but sadly those have disappeared into the slack universe. . Probably not a major problem but any ideas what might have changed? . Also, we can update as many of the benchmarks from above as people like, and add in some pictures where we have them.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-854773818:20,benchmark,benchmarks,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-854773818,2,['benchmark'],['benchmarks']
Testability,"When I looked at the error I see there is a problem with `yode`?. ```. Coriolis: Error During Test at /var/lib/buildkite-agent/builds/tartarus-10/clima/oceananigans/test/test_time_stepping.jl:280;   | Test threw exception;   | Expression: time_stepping_works_with_coriolis(arch, FT, Coriolis);   | TaskFailedException;   |  ;   | nested task error: MethodError: no method matching ynode(::Type{Center}, ::Int64, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU});   | Closest candidates are:;   | ynode(::Any, ::Any, ::Any, ::AbstractField) at ~/builds/tartarus-10/clima/oceananigans/src/Fields/abstract_field.jl:79;   | ynode(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::ImmersedBoundaryGrid) at ~/builds/tartarus-10/clima/oceananigans/src/ImmersedBoundaries/ImmersedBoundaries.jl:233;   | ynode(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any) at ~/builds/tartarus-10/clima/oceananigans/src/Grids/grid_utils.jl:228;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1426421066:94,Test,Test,94,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1426421066,3,"['Test', 'test']","['Test', 'test']"
Testability,"When I use the advection schemes from ShallowWaterModel I get that the solution computed from Oceananigans has the correct slopes going down to very fine accuracies. The two plots are identicial. I think this is further evidence that the lack of accuracy comes from the pressure solve. One possibility is to have these convergence tests done through ShallowWaterModel, at least for the mean time.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-754117823:331,test,tests,331,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-754117823,1,['test'],['tests']
Testability,While in the repo's main directory I'd fire up Julia and then ; ```Julia; (@v1.5) pkg> activate .; Activating environment at `~/somefolder/Oceananigans.jl/Project.toml`. (Oceananigans) pkg> test; ```; That's what I'd do.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1314#issuecomment-766309752:190,test,test,190,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1314#issuecomment-766309752,1,['test'],['test']
Testability,Why are some of the tests failing?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2015069680:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2015069680,1,['test'],['tests']
Testability,Why are the tests being run twice? It's confusing to interpret the test results.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1867965270:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1867965270,2,['test'],"['test', 'tests']"
Testability,"Why do you say ""none of the tests are working""?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1761#issuecomment-867230491:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1761#issuecomment-867230491,1,['test'],['tests']
Testability,Why does the test allocate so much memory? Is it possible to design an inexpensive test? It's important that CI is absolutely as cheap as possible.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1248396748:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1248396748,2,['test'],['test']
Testability,Why don't we test the distributed NonhydrostaticModel here?. https://github.com/CliMA/Oceananigans.jl/blob/9ffbee31bc5a2fa38dd93fa1594b94cddaebba8c/test/test_distributed_models.jl#L451-L456. or are there tests elsewhere?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2443339516:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2443339516,3,['test'],"['test', 'tests']"
Testability,Why tests fail? (Irrelevant with this PR I guess..?),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1395#issuecomment-783494083:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1395#issuecomment-783494083,1,['test'],['tests']
Testability,"Why you say the tracer doesn't work? It works!. ```julia; Testing for c:; Comparing diffusion of c on single and multi-region grid:; all(f .≈ fs) = true; ```; And yes, this works with the implicit solver. This is essentially one of the tests from the `test_multiregion_advection_diffusion.jl`... and they pass on `main` using the `UnifiedImplicitSolver` with `MultiRegionGrid`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3514#issuecomment-1999619089:58,Test,Testing,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3514#issuecomment-1999619089,2,"['Test', 'test']","['Testing', 'tests']"
Testability,"Will this work flow work @navidcy @simone-silvestri ?. 1. Fix tests for Julia 1.7 and merge this PR; 2. Update CUDA + KernelAbstractions. Or, do we need to do 1. and 2. simultaneously?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2307#issuecomment-1083551690:62,test,tests,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2307#issuecomment-1083551690,1,['test'],['tests']
Testability,"With `advection = CenteredSecondOrder()`, the differences are more dramatic (maybe explains the 100x slow down I saw with a simple setup):. ```julia; 17.859 s (144483404 allocations: 94.43 GiB) # KA 0.8; 294.401 ms (118604 allocations: 52.20 MiB) # KA 0.7; ```. If we look just at `calculate_tendencies!` via. ```julia; using Oceananigans; using Oceananigans.TimeSteppers: calculate_tendencies!; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); model = NonhydrostaticModel(; grid, advection=WENO()). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; #time_step!(model, Δt); calculate_tendencies!(model, []); end; end. @btime lots_of_steps!(model, 0.01); ```. results are (`advection = WENO()`). ```julia; 5.268 s (23061000 allocations: 11.73 GiB) # KA 0.8; 1.989 s (14600 allocations: 13.03 MiB) # KA 0.7; ```. and `advection = CenteredSecondOrder()`. ```julia; 2.846 s (23061000 allocations: 11.73 GiB) # KA 0.8; 105.867 ms (14600 allocations: 13.03 MiB) # KA 0.7; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481310062:402,Benchmark,BenchmarkTools,402,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481310062,1,['Benchmark'],['BenchmarkTools']
Testability,"With a `Flat` topology `fractional_indices` correctly returns `0.0` in the flat direction (if I correctly put in `grid.xᶜᵃᵃ[1]` which I think is always `1`), so only $\phi_1$ and $\phi_2$ would be non-zero so this should be correct?. I think the reason your test was returning wrong is because you used $x=y=0$ rather than $1$?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2911#issuecomment-1425648922:258,test,test,258,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2911#issuecomment-1425648922,1,['test'],['test']
Testability,"With help from @glwagner , I believe we have a partial cell method in this branch [here](https://github.com/CliMA/Oceananigans.jl/tree/fjp/partial_cell_immersed_boundaries). . We are going to run some tests to make sure that everything is behaving as normal but wanted to give you an udpate. Hopefully have something to review soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1057168071:201,test,tests,201,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1057168071,1,['test'],['tests']
Testability,With this last commit both the hydrostatic and nonhydrostatic models are working locally for me and they only have a `model.pressure` field; no more `NamedTuple`s of pressure. But let's see if tests are passing. The `PressureField` functions (formerly `PressureFields`) should probably be moved from `field_tuples.jl` since they don't return tuples anymore. Any suggestion as to where they might be moved?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1546065518:193,test,tests,193,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1546065518,1,['test'],['tests']
Testability,"Without much effort we can expand the existing averaging test from one to two outputs by defining a new ""`λ`"". The test now has one lambda defined here:. https://github.com/CliMA/Oceananigans.jl/blob/d17f926b2c4787bf44f619439e81bfb82937aabf/test/test_netcdf_output_writer.jl#L481. and used here:. https://github.com/CliMA/Oceananigans.jl/blob/d17f926b2c4787bf44f619439e81bfb82937aabf/test/test_netcdf_output_writer.jl#L534. I'm not quite sure why two outputs would cause issues, but this is a good clue that I can dive into. It's also not tested now so it's plausible there's an issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-873153780:57,test,test,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-873153780,5,['test'],"['test', 'tested']"
Testability,"Wonderful to see @simone-silvestri ! Please let me know how I can help. One question, could we change the name of this PR to `Vector Invariant Formuation of ShallowWaterModel`? It seems like a good quality to highlight. Also, as a test problem, could we use the same initial conditions as we have in the [Bickley Jet example](https://github.com/CliMA/Oceananigans.jl/blob/main/examples/shallow_water_Bickley_jet.jl)? Might make for a good comparison.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1118623597:231,test,test,231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1118623597,1,['test'],['test']
Testability,Woops sorry I meant to delete the sandbox! Would be great to increase variety among the existing examples so it's a great idea.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1394#issuecomment-783459067:34,sandbox,sandbox,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1394#issuecomment-783459067,1,['sandbox'],['sandbox']
Testability,Would it be worth retrying the tests to see if the problems persist on a second attempt?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1405939303:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1405939303,1,['test'],['tests']
Testability,Wouldn't the MWE be a one line function? We also need to test it here,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3731#issuecomment-2310572428:57,test,test,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3731#issuecomment-2310572428,1,['test'],['test']
Testability,YWR2ZWN0aW9uX2RpZmZ1c2lvbi5qbA==) | | |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | | |; | [...ion/convergence\_tests/ConvergenceTests/analysis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvYW5hbHlzaXMuamw=) | | |; | [...gence\_tests/ConvergenceTests/ForcedFlowFreeSlip.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvRm9yY2VkRmxvd0ZyZWVTbGlwLmps) | | |; | [test/test\_forcings.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZvcmNpbmdzLmps) | | |; | [...vergence\_tests/analyze\_single\_forced\_fixed\_slip.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL2FuYWx5emVfc2luZ2xlX2ZvcmNlZF9maXhlZF9zbGlwLmps) | | |; | [test/test\_regression.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3JlZ3Jlc3Npb24uamw=) | | |; | [examples/ocean\_convection\_with\_plankton.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb2NlYW5fY29udmVjdGlvbl93aXRoX3BsYW5rdG9uLmps) | | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvZWFkeV90dXJidWxlbmNlLmps) | | |; | [...tion/convergence\_tests/analyze\_forced\_free\_slip.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL2FuYWx5emVfZm9yY2VkX2ZyZWVfc2xpcC5qbA==) | | |; | ... and [50 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793?src=pr&el=c,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/793#issuecomment-657517751:2282,test,test,2282,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/793#issuecomment-657517751,2,['test'],['test']
Testability,"Yay!. Ok, then we can just use a special type like `struct Default end` to denote that `WENO()` has not been constructed with a `grid`. That will allow us (or advanced users) to use an ""unstretched"" WENO on a stretched grid if testing / some emergency requires it. Otherwise --- if we think it's wise --- we'll just always use the stretched version on a stretched grid.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2271#issuecomment-1049372125:227,test,testing,227,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2271#issuecomment-1049372125,1,['test'],['testing']
Testability,"Yeah I agree we should probably just include the most interesting ones for now. Eventually I was hoping to upgrade the benchmark scripts to also produce plots (bar charts?) to make it easier to visually parse all the numbers/information, then it might make sense to include more benchmark results.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-845159147:119,benchmark,benchmark,119,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-845159147,2,['benchmark'],['benchmark']
Testability,"Yeah I agree with no code being better than broken code. So I guess that means nuke non-working scripts and they can always be revived later with the intention of maintaining them long-term. Also agree that sandbox is bad. We can discourage further short-term additions to `validation` and encourage people to use branches or other short-term repositories for them?. As for repo size yeah the biggest files are images and regression files which we could aim to get rid of in the long-term, maybe in one fell swoop with BFG repo cleaner. We've done in the past but it takes some preparation and is rewriting git history which is bad.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872562473:207,sandbox,sandbox,207,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872562473,1,['sandbox'],['sandbox']
Testability,"Yeah I think some of those one-off experiments in `validation` should probably be nuked. Maybe we should put them in a `sandbox` directory in the future. Ideally they would serve both as actual validation against existing results (e.g. convergence test, lid-driven cavity, viscous flow around a cylinder) and as advanced examples, so maybe they should become Literate examples (or Pluto examples/notebooks...).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872543143:120,sandbox,sandbox,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872543143,2,"['sandbox', 'test']","['sandbox', 'test']"
Testability,"Yeah adding the Unicode symbols broke the test, since the tests group detection doesn't recognize them",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616673693:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616673693,2,['test'],"['test', 'tests']"
Testability,Yeah for sure we should add docs before merging. This PR may be open for a bit because I'd like to refactor the tests. Right now they take almost 2 hours on average which I feel is much too slow.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-905859491:112,test,tests,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-905859491,1,['test'],['tests']
Testability,"Yeah let's merge when tests pass, thanks @simonbyrne",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3326#issuecomment-1757808403:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3326#issuecomment-1757808403,1,['test'],['tests']
Testability,Yeah not the most informative error but it does something! I usually just expect a slower simulation due to float conversions. Checking types would be great! I don't even think there's a test that sets up a `Float32` model and just checks that it's fully `Float32` all the way down. I've also mostly stuck to `Float64` simulations but I am interested in whether `Float32` can work nicely out of the box. Sounds like it'll probably be quite case-dependent...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3785#issuecomment-2369729862:187,test,test,187,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3785#issuecomment-2369729862,1,['test'],['test']
Testability,"Yeah seems like it might be worth it to do a full search and replace, especially if tests pass right?. Since it seems that behavior has changed, I think there are some instances of `has_cuda` that should be `has_cuda_gpu` in `src/` that should also be changed. I guess the number of users hiding their GPUs while using Oceananigans is small, but it could affect CI in the future (or one of us on Tartarus).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942852143:84,test,tests,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942852143,1,['test'],['tests']
Testability,"Yeah that would work. It's a bit weird to pass `y=(-1,1)` to the grid constructor when `y` is `Flat` but it seems to be ignored. An alternative would be to pass the grid as an input to `run_simple_particle_tracking_tests` and move all the grid construction logic (including the stretched vertical grid) to separate functions.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2060921443:257,log,logic,257,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2060921443,1,['log'],['logic']
Testability,"Yeah that's a good idea, do you think I should add testing on lat/lon grids too?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3173#issuecomment-1624259955:51,test,testing,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3173#issuecomment-1624259955,1,['test'],['testing']
Testability,"Yeah the plot is from v0.5.x or something lol. Not sure if CPU -> GPU speedups are as relevant anymore? Well, maybe a lot of people are still on CPUs. The speedup can be much larger with WENO, but it's all very CPU and GPU dependent. I've seen ~8x and ~2000x speedups for the same benchmark. Also not sure if there are any good metrics to quantify performance. But @simone-silvestri's scaling plots would probably be great to include?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3684#issuecomment-2272351495:281,benchmark,benchmark,281,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3684#issuecomment-2272351495,1,['benchmark'],['benchmark']
Testability,"Yeah, I've been noticing that a lot of simple PRs have been having failing tests lately. I haven't had time to investigate but I do find it kinda odd...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1558#issuecomment-815947872:75,test,tests,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1558#issuecomment-815947872,2,['test'],['tests']
Testability,"Yeah, I've done some tests here: https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2211254101; The 1D test is consistent with the analytical solution, which works great!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287233131:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287233131,2,['test'],"['test', 'tests']"
Testability,"Yeah, I've run quite a bit of tests at this point, and the issue seems persistent and (as far as I could tell) independent of topology (although I haven't tried every single topology option). Thanks for looking into this, btw. Let's hope it's something simple. Let me know how I can help.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868184351:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868184351,2,['test'],['tests']
Testability,"Yeah, but the `ILU` preconditioner doesn't seem to be tested, which I remember was quite good to reduce the number of iterations. So in case of a large time step that would be quite efficient even if we have to solver two triangular linear systems each iteration. but anyways, maybe it's not faster, it was just I was wondering how it would compare",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2635#issuecomment-1172617064:54,test,tested,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2635#issuecomment-1172617064,1,['test'],['tested']
Testability,"Yeah, that's great! Thanks! Also I just tested it and it appears to work fine so kudos for get that working so fast",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1512#issuecomment-810643745:40,test,tested,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1512#issuecomment-810643745,1,['test'],['tested']
Testability,Yeah. Something broke in the tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2864#issuecomment-1379478112:29,test,tests,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2864#issuecomment-1379478112,1,['test'],['tests']
Testability,"Yeah.. I am not yet sure how this would work embedded. By now, what I have is just some functions that the user has to add as callbacks.; e.g.; https://github.com/iuryt/Bioceananigans.jl/blob/ab35a7235fea532fe7ed283ce6e06ac12f378dae/test/NNP.jl#L109-L117; btw.. this test script is not yet fully developed 😄. Thinking more, it would be so the function automatically adds the callbacks to the simulation?. ```julia; const Δb=(g/ρₒ) * 0.03; h = Field{Center, Center, Nothing}(grid) ; MixedLayerDepth(simulation, h, Δb). # constants for the NP model; const μ₀ = 1/day # surface growth rate; const m = 0.015/day # mortality rate due to virus and zooplankton grazing; const Kw = 0.059 # meter^-1; const kn = 0.75; const kr = 0.5. # https://doi.org/10.1029/2017GB005850; const chl2c = 0.06 # average value for winter in North Atlantic. const α = 0.0538/day. const average = :growth; const shading = true. light_growth = Field{Center, Center, Center}(grid). # time evolution of shortwave radiation (North Atlantic); @inline Lₒ(t) = 116.5 * sin( 2π * ( t / days + 50 ) / 375.7 + 1.3 ) + 132.3; # evolution of the available light at the surface; @inline light_function(t, z) = 0.43 * Lₒ(t) * exp( z * Kw ); # light profile; @inline light_growth_function(light) = μ₀ * ( light * α ) / sqrt( μ₀^2 + ( light * α )^2 ). phytoplankton = (""P"",) # list of phytoplankton tracers ; LightGrowth(light_growth, h, simulation, phytoplankton, light_function, light_growth_function, time(simulation), average, shading, chl2c); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2512#issuecomment-1116864657:233,test,test,233,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2512#issuecomment-1116864657,2,['test'],['test']
Testability,"Yeap, N is horizontal resolution. These are benchmarks for the baroclinic adjustment problem with hydrostatic free-surface model. Elise wants to run now some 1/4-degree near-global benches. What's the ""high-resolution problem""?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2753#issuecomment-1257971702:44,benchmark,benchmarks,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2753#issuecomment-1257971702,1,['benchmark'],['benchmarks']
Testability,"Yeap, that's the same as the buildkite log... :); We'll have to dig deep into the mysteries of `gpu_calculate_Guh!` perhaps.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1821#issuecomment-873666783:39,log,log,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1821#issuecomment-873666783,1,['log'],['log']
Testability,"Yep! ; ``` julia; using Oceananigans, BenchmarkTools. using Oceananigans.Fields: interpolate. # Regularly spaced grids are interpolated differently; grid = RectilinearGrid(size=(100, 100, 100), x = [i^1.1 for i in 1:101], y = [i^1.2 for i in 1:101], z = [i^2 for i in 1:101]). field = CenterField(grid). @benchmark interpolate(field, rand(), rand(), -rand()); ```; ```bash; BenchmarkTools.Trial: 10000 samples with 181 evaluations.; Range (min … max): 584.481 ns … 26.258 μs ┊ GC (min … max): 0.00% … 97.60%; Time (median): 612.343 ns ┊ GC (median): 0.00%; Time (mean ± σ): 634.835 ns ± 300.484 ns ┊ GC (mean ± σ): 0.40% ± 0.98%. ▆██▄▂▁ ▂; ██████▇▇▆▆▅▅▅▅▆▅▄▄▅▃▁▄▃▁▁▃▁▃▁▃▁▃▁▄▃▁▁▃▃▁▁▃▃▁▁▃▁▁▁▁▁▁▁▃▄▄▁▁▃▃█ █; 584 ns Histogram: log(frequency) by time 1.49 μs <. Memory estimate: 64 bytes, allocs estimate: 4.; ```. Adding the inbounding improves this to:; ```bash; BenchmarkTools.Trial: 10000 samples with 182 evaluations.; Range (min … max): 577.841 ns … 28.209 μs ┊ GC (min … max): 0.00% … 0.00%; Time (median): 605.769 ns ┊ GC (median): 0.00%; Time (mean ± σ): 625.685 ns ± 444.392 ns ┊ GC (mean ± σ): 0.42% ± 0.98%. █▃ ; ▄▄▄▄▄▅██▆▅▄▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂ ▂; 578 ns Histogram: frequency by time 839 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```. And removing the `issorted` check improves a lot more to:; ```bash; BenchmarkTools.Trial: 10000 samples with 911 evaluations.; Range (min … max): 118.231 ns … 11.848 μs ┊ GC (min … max): 0.00% … 98.73%; Time (median): 125.412 ns ┊ GC (median): 0.00%; Time (mean ± σ): 135.838 ns ± 198.933 ns ┊ GC (mean ± σ): 2.87% ± 2.40%. █▅ ; ▆██▆▄▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▁▂▂▂▁▁▂▂▂▁▁▂▂▁▂▁▂▂▁▂▂▁▂▁▂▁▂▁▁▂▂ ▂; 118 ns Histogram: frequency by time 324 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365911765:38,Benchmark,BenchmarkTools,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365911765,6,"['Benchmark', 'benchmark', 'log']","['BenchmarkTools', 'benchmark', 'log']"
Testability,"Yep, they are, although extension to 3D non-hydrostatic is possible and easy to implement. `multi_dimensional` is opposed to a direction-by-direction reconstruction. It means that we reconstruct not only in the ""derivative"" direction but also in the ""tangential"" direction, i.e. we use a multi-dimensional stencil as opposed to a one-dimensional stencil. For the moment, it is only implemented for the vector invariant advection since it is quite expensive to implement it in a full 3d reconstruction (it would require a 3D stencil, while vector_invariant only requires a 2D stencil). It improves a bit the solution for what I have tested but more tests are needed, I think to make sure it de facto increases the order of reconstruction (for non-linear problems, it should allow a high-order reconstruction, on the contrary, our advection schemes only allow us second order spatial scaling of the truncation error.). I can leave it out of this PR if nobody is interested in using it, although it might be useful in the future. breaking change: keyword arguments of `VectorInvariant`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1601156911:632,test,tested,632,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1601156911,2,['test'],"['tested', 'tests']"
Testability,Yes --- and the test should be generalized to have east-west boundary conditions as well.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2091#issuecomment-984776242:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2091#issuecomment-984776242,1,['test'],['test']
Testability,Yes and if statements here:. https://github.com/CliMA/Oceananigans.jl/blob/3c86d8f37a3bf5ff050e233f7b946685f9057c26/test/test_boundary_conditions_integration.jl#L203. and here. https://github.com/CliMA/Oceananigans.jl/blob/3c86d8f37a3bf5ff050e233f7b946685f9057c26/test/test_boundary_conditions_integration.jl#L210. should be removed.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2103#issuecomment-988346234:116,test,test,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2103#issuecomment-988346234,2,['test'],['test']
Testability,"Yes it is, we would like to get a flux BC incorporated into the testing of the advection-diffusion problem. This allows for some more interesting applications than just inverting for initial conditions (for example).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3643#issuecomment-2438549222:64,test,testing,64,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3643#issuecomment-2438549222,1,['test'],['testing']
Testability,"Yes we definitely need to speed up the tests. I think 95% of the time it takes to run tests is spent in compilation, however, so creating fewer models may not help much. Instead we may need to be more strategic with how we run tests, and perhaps also work on speeding up compilation time using something like [SnoopCompile.jl](https://github.com/timholy/SnoopCompile.jl). On #1962 we add bars capability, which will allow us to separate the tests into a few categories: fast-running, crucial tests will run on every commit to a PR, and slower, more comprehensive integration tests will run only when `bors try` or `bors r+` is invoked. This might help streamline the development workflow. Also if we are using Caltech's central cluster for CI we can potentially split the jobs amongst more workers, which might help speed up tests overall. Even more important is simplifying the test implementation. Right now updating tests and validation experiments is a time sink for developers that change the API and has really slowed development down lately. So we shouldn't rewrite tests in a way that makes development more difficult (eg keeping the maintenance burden of the test infrastructure small is more important than decreasing the computational cost of tests). This is really a side comment --- we should be able to improve the tests both so they are faster _and_ easier to maintain, if we are careful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1990#issuecomment-922526970:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1990#issuecomment-922526970,26,['test'],"['test', 'tests']"
Testability,"Yes! I was ok to put this in though. Just wanted to see the test first, it's like eating vegetables before dessert!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3862#issuecomment-2433715909:60,test,test,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3862#issuecomment-2433715909,1,['test'],['test']
Testability,Yes! Probably should wait for tests to all pass so we can sleep easy but then good to merge for sure.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1935#issuecomment-900585787:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1935#issuecomment-900585787,1,['test'],['tests']
Testability,"Yes, I have seen the same thing, as discussed in #1722. Previously, when looking at speed up on find grids, say 8000^2, I found that the speed up on GPUS was almost 400 times faster compared to the 5th order Upwinding. When @hennyg888 did the same benchmark on julia 1.6, there was still speedup, but only by 200 or so. The speed of the CPUS with 1.5 and 1.6 was very similar. That means that WENO5, in this case, is about half as slow as it used to be. . Sadly, the old data is lost in slack oblivion, but I suppose we could run old could and obtain these results again, if there was desire to do so. But I think this discussion is more fruitful by looking at the nuts and bolts of the method. Thanks @tomchor for bringing this up as well!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868121616:248,benchmark,benchmark,248,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868121616,1,['benchmark'],['benchmark']
Testability,"Yes, both CPU and GPU. But I did run the script separately, rather than do all the tests. I would not think that should matter though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477969649:83,test,tests,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477969649,1,['test'],['tests']
Testability,"Yes, can we add a test? Probably good to add a `@test_throws` for the `ArgumentError` as well.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-875927698:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-875927698,1,['test'],['test']
Testability,"Yes, from what I could test so far the CPU performance seems roughly; equivalent between versions. Although it would be good if someone else; tried to validate that as well. On Fri, Jun 25, 2021, 09:16 Gregory L. Wagner ***@***.***>; wrote:. > I'm sorry, I misinterpreted the results @ali-ramadhan; > <https://github.com/ali-ramadhan> posted. I thought that; > CenteredSecondOrder was 1.0x slower with julia 1.6 than with 1.5 (and; > that small slowdowns were observed for the other schemes, which is why I; > recommended testing the biharmonic scheme.) Now I understand that these; > results are all for julia 1.6; we are comparing the results with previously; > obtained benchmarks (not posted) for julia 1.5.; >; > Looking at @tomchor <https://github.com/tomchor> and @ali-ramadhan; > <https://github.com/ali-ramadhan>'s results then it looks like; > simulations with WENO5 are running approximately 6-8 times slower on julia; > 1.6 than it was on julia 1.5, while other advection schemes (and closures); > are unchanged --- correct?; >; > Is the *CPU* performance of WENO5 roughly equivalent between julia 1.5; > and julia 1.6?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868677634>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADEX5KV46VENYCZPAGUMK4LTUSTVVANCNFSM47I24R7Q>; > .; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868684330:23,test,test,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868684330,3,"['benchmark', 'test']","['benchmarks', 'test', 'testing']"
Testability,"Yes, merging soon is a great idea, before `main` changes too much. . Do you think we need to get `MultiGPU` working or try and merge what we have with `MultiCPU` plus some tests? I'm tempted to merge sooner rather than later since already this is a big addition",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799564558:172,test,tests,172,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799564558,1,['test'],['tests']
Testability,"Yes, the purpose of re-using the callback infrastructure for logging and time-step stuff was exactly to ensure that the feature was visible. But I see the point that the fact that you could do anything you want inside `progress(sim)` is potentially obscured by the fact that it appears similarly in every example... so including a case of something different than logging might be useful...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3582#issuecomment-2098868198:61,log,logging,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3582#issuecomment-2098868198,2,['log'],['logging']
Testability,"Yes, this change plus adding the code to ""enforce"" the boundary conditions appears to fix the bug. The fractional indices are truncated in two places - the advection code and in `bounce_immersed_particle`. I've fixed them both but not done any tests with an immersed boundary. I'll open a PR and you can take a look.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3545#issuecomment-2049313666:244,test,tests,244,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3545#issuecomment-2049313666,1,['test'],['tests']
Testability,"Yes, this should work.  If it doesn’t work on kelp, you can try it on proteus or oceanus.; On Jun 20, 2024 at 10:41 PM +0100, Jago Strong-Wright ***@***.***>, wrote:; > The distributed regression tests are still failing but I'm not sure how to go about getting them to work because I can't work out how to run mpi locally, is it possible to do e.g. mpiexec -n 4 ... locally just on a single machine?; > —; > Reply to this email directly, view it on GitHub, or unsubscribe.; > You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2181609099:196,test,tests,196,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2181609099,1,['test'],['tests']
Testability,"Yes. We've implemented some simple tests recently (https://github.com/climate-machine/Oceananigans.jl/issues/126, https://github.com/climate-machine/Oceananigans.jl/pull/118, https://github.com/climate-machine/Oceananigans.jl/pull/140) and we're working on https://github.com/climate-machine/Oceananigans.jl/issues/136 but we should definitely do more. Some tests will require a channel model which we're working towards (https://github.com/climate-machine/Oceananigans.jl/issues/100) but others that you've suggested should work in doubly periodic domains I think, e.g. spin down of a flow-field under the influence of friction, thermal wind balance, and Rayleigh–Bénard convection. Might be good to open issues for those.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-478100649:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-478100649,2,['test'],['tests']
Testability,"You are right! Being able to do . ```Julia; julia> include(""this_test_script.jl""); ```. and bit later. ```Julia; julia> include(""this_other_test_script.jl""); ```. is really helpful. However, there are a few packages that are different in the test environment (e.g., test environment uses `DataDeps` and `TimesDates`). Thus, often one needs to first install those packages before they are able to `include(""this_other_test_script.jl"")`. The latest changes suggested in https://github.com/CliMA/Oceananigans.jl/pull/3511 don't break this current functionality _but also_ allow for one to run a single test file as a suite using the _proper_ testing environment via:. ```; $ TEST_FILE=this_test_script.jl julia --project -e""using Pkg; Pkg.test()""; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1999786541:242,test,test,242,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1999786541,5,['test'],"['test', 'testing']"
Testability,You can change the closure used in the regression test by changing this line:. https://github.com/CliMA/Oceananigans.jl/blob/32c5c5a2d0f441a4b663866d511807d0f9413c90/test/test_regression.jl#L74,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1908#issuecomment-889336429:50,test,test,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1908#issuecomment-889336429,2,['test'],['test']
Testability,You can modify the buildkite pipeline here so that only the relevant tests run. Eg no need to build docs. :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-870892140:69,test,tests,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-870892140,1,['test'],['tests']
Testability,"You can try incorporating the background buoyancy field into the forcing functions (formulated using the discrete form). You may also try inserting the parameters as globals rather than using the kwarg `parameters` (not sure if that will help). I'd also suggest testing whether the Smagorinsky closure affects the results of the simulation; if you can avoid using that you might be able to compile more complexity. After that, we may have to either divide up the kernels or pursue https://github.com/JuliaGPU/CUDA.jl/issues/267",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401327463:262,test,testing,262,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401327463,1,['test'],['testing']
Testability,"You could use two AnisotropicDiffusivity closures (or 3?) that individually set the diffusivities in each direction. Then you can test that a model which uses a single closure with all three diffusivities returns the same result as a model with a 3-tuple of different closures. That actually might be good enough for a bona fide test, not just a validation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883637947:130,test,test,130,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883637947,2,['test'],['test']
Testability,"You don't want to delete julia itself, but rather start with a fresh environment. The first line of your output prints where the `Manifest.toml` and `Project.toml` are stored for the global environment associated with version 1.5: `~/.julia/environments/v1.5/Manifest.toml`. More information here: https://docs.julialang.org/en/v1/stdlib/Pkg/. That said, I'm not sure that will help (but it might). I would be interested if it does. You might try downgrading further to 1.5.2 or 1.5.1 before rebuilding a new `Manifest.toml`. Also, you may not have to delete the global 1.5 environment; instead you can use an new isolated environment for the test. This is a serious problem, thanks for raising the issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-824068421:643,test,test,643,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-824068421,1,['test'],['test']
Testability,You mean in the regression test or in general?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2926#issuecomment-1431592249:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2926#issuecomment-1431592249,1,['test'],['test']
Testability,"You should write. ```julia; import Oceananigans.Utils: cell_advection_timescale; ```. at the top of the file `shallow_water_cell_advection_timescale.jl`. This ""imports"" the name `cell_advection_timescale` into your present scope such that the function can be extended with new methods. Next, you want to define a new method for `cell_advection_timescale` with the signature. ```julia; cell_advection_timescale(model::ShallowWaterModel) = # definition here; ```. Note that the function signature. ```julia; cell_advection_timescale(uh, vh, h, grid); ```. is already taken by one of the existing methods for `cell_advection_timescale`:. https://github.com/CliMA/Oceananigans.jl/blob/2016e730350e0b6b625a5cf85a68269a370686fd/src/Utils/cell_advection_timescale.jl#L2-L12. This means that you need to either use type annotations to distinguish the version that takes arguments `uh, vh, h, grid` from the method that takes `u, v, w, grid`, or (probably better) use a unique name. A good name for the method that takes the arguments `uh, vh, h, grid` could be. ```julia; shallow_water_cell_advection_timescale(uh, vh, h, grid) = # definition here; ```. Remember that with this new name, the function `cell_advection_timescale(model::ShallowWaterModel)` must call `shallow_water_cell_advection_timescale`; eg. ```; cell_advection_timescale(model::ShallowWaterModel) =; shallow_water_cell_advection_timescale(model.solution.uh.data.parent,; model.solution.vh.data.parent,; model.solution.h.data.parent,; model.grid); ```. when this file is put together, you should include it in `ShallowWaterModels.jl`. This should allow you to `run!` a `Simulation` with `TimeStepWizard`. Perhaps it makes sense to add a test for this in this PR?. If this does not work, feel free to copy/paste the error here so that we can debug the issue. Note: I was confused earlier --- I definitely prefer `shallow_water_cell_advection_timescale.jl` for the filename. But anything will do.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-764060246:1697,test,test,1697,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-764060246,1,['test'],['test']
Testability,"[17:11]fspereira@ch-fe2[/lustre/scratch5/fspereira/OCEANANIGANS/test/case1]# julia; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.7 (2022-07-19); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> import Pkg. julia> Pkg.status(""Oceananigans""); Status `~/.julia/environments/v1.6/Project.toml`; [9e8cae18] Oceananigans v0.68.7. julia> Pkg.update(""Oceananigans""); Updating registry at `~/.julia/registries/General`; No Changes to `~/.julia/environments/v1.6/Project.toml`; No Changes to `~/.julia/environments/v1.6/Manifest.toml`. julia> Pkg.status(""Oceananigans""); Status `~/.julia/environments/v1.6/Project.toml`; [9e8cae18] Oceananigans v0.68.7. It does not update. Do I need a different version of Julia? If I remember correctly, the website says that 1.6.7 is ok",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1266188419:64,test,test,64,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1266188419,1,['test'],['test']
Testability,"[2021/06/08 11:49:56.194] INFO Writing Shallow_water_model_weak_scaling_benchmark.html...; Shallow water model weak scaling speedup; ┌──────────────┬─────────┬──────────┬────────────┬──────────┬─────────┐; │ size │ ranks │ slowdown │ efficiency │ memory │ allocs │; ├──────────────┼─────────┼──────────┼────────────┼──────────┼─────────┤; │ (4096, 256) │ (1, 1) │ 1.0 │ 1.0 │ 1.0 │ 1.0 │; │ (4096, 512) │ (1, 2) │ 1.03886 │ 0.962595 │ 0.930602 │ 1.12329 │; │ (4096, 1024) │ (1, 4) │ 1.04081 │ 0.960794 │ 0.930602 │ 1.12329 │; │ (4096, 2048) │ (1, 8) │ 1.05184 │ 0.950714 │ 0.930602 │ 1.12329 │; │ (4096, 4096) │ (1, 16) │ 1.10326 │ 0.906407 │ 0.930602 │ 1.12329 │; │ (4096, 8192) │ (1, 32) │ 1.24168 │ 0.805358 │ 0.930602 │ 1.12329 │; └──────────────┴─────────┴──────────┴────────────┴──────────┴─────────┘. ```. ```; ; Shallow water model strong scaling benchmark; ┌──────────────┬─────────┬────────────┬────────────┬────────────┬────────────┬──────────┬────────┬─────────┐; │ size │ ranks │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├──────────────┼─────────┼────────────┼────────────┼────────────┼────────────┼──────────┼────────┼─────────┤; │ (4096, 4096) │ (1, 1) │ 5.705 s │ 5.705 s │ 5.705 s │ 5.705 s │ 1.60 MiB │ 2804 │ 1 │; │ (4096, 4096) │ (1, 2) │ 2.860 s │ 2.860 s │ 2.863 s │ 2.873 s │ 1.49 MiB │ 3146 │ 4 │; │ (4096, 4096) │ (1, 4) │ 1.416 s │ 1.422 s │ 1.421 s │ 1.422 s │ 1.49 MiB │ 3146 │ 16 │; │ (4096, 4096) │ (1, 8) │ 739.330 ms │ 745.829 ms │ 747.065 ms │ 771.605 ms │ 1.49 MiB │ 3146 │ 56 │; │ (4096, 4096) │ (1, 16) │ 387.654 ms │ 397.035 ms │ 398.369 ms │ 425.472 ms │ 1.49 MiB │ 3116 │ 160 │; │ (4096, 4096) │ (1, 32) │ 205.907 ms │ 218.745 ms │ 219.552 ms │ 253.574 ms │ 1.49 MiB │ 3116 │ 320 │; └──────────────┴─────────┴────────────┴────────────┴────────────┴────────────┴──────────┴────────┴─────────┘; [2021/06/08 12:24:17.096] INFO Writing Shallow_water_model_strong_scaling_benchmark.html...; Shallow water model strong scaling speedup; ┌──────────────",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-857089098:2328,benchmark,benchmark,2328,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-857089098,1,['benchmark'],['benchmark']
Testability,"[2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /home/ssilvest/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/julia-1.8.0/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main ~/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; [2023/02/14 16:24:51.806] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/14 16:25:16.858] INFO Initializing simulation...; [2023/02/14 16:25:16.992] INFO ... simulation initialization complete (134.028 ms); [2023/02/14 16:25:16.992] INFO Executing initial time step...; [2023/02/14 16:25:47.962] INFO ... initial time step complete (30.969 seconds).; [2023/02/14 16:25:48.168] INFO Simulation is stopping after running for 31.304 seconds.; [2023/02/14 16:25:48.168] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:25:48.190] INFO Δu: min=-1.672000e-04, max=+4.242261e-06, mean=-8.684623e-06, absmean=+8.777260e-06, std=+2.661194e-05 (16384/16384 matching grid points); [2023/02/14 16:25:48.191] INFO Δv: min=-2.345113e-05, max=+4.749113e-05, mean=+1.747024e-06, absmean=+3.169309e-06, std=+8.512156e-06 (10620/16512 matching grid points); [2023/02/14 16:25:48.191] INFO Δh: min=-1.338214e-04, max=+1.449336e-04, mean=-4.033232e-17, absmean=+1.028773e-05, std=+2.832882e-05 (16384/16384 matching gr",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:2558,Test,Testing,2558,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637,1,['Test'],['Testing']
Testability,"[2023/02/21 06:38:30.504] INFO ... simulation initialization complete (110.043 ms); [2023/02/21 06:38:30.504] INFO Executing initial time step...; [2023/02/21 06:38:40.776] INFO ... initial time step complete (10.272 seconds).; [2023/02/21 06:38:42.742] INFO Simulation is stopping. Model iteration 20 has hit or exceeded simulation stop iteration 20.; [2023/02/21 06:38:46.004] INFO Δu: min=-3.698171e-08, max=+2.977649e-08, mean=-9.793714e-11, absmean=+2.315996e-09, std=+6.206031e-09 (16384/16384 matching grid points); [2023/02/21 06:38:46.005] INFO Δv: min=-5.495966e-10, max=+1.063640e-09, mean=-3.441143e-13, absmean=+4.699188e-11, std=+1.347006e-10 (16508/16512 matching grid points); [2023/02/21 06:38:46.005] INFO Δh: min=-4.766520e-07, max=+4.757091e-07, mean=+1.373701e-08, absmean=+2.044884e-07, std=+2.513218e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:16262,test,test,16262,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['test'],['test']
Testability,"[2]; Stacktrace:; [1] getindex; @ ./array.jl:805 [inlined]; [2] g(a::Vector{Float64}, first::Bool); @ Main ./REPL[11]:1; [3] top-level scope; @ REPL[12]:1. julia> g(a, false); ERROR: BoundsError: attempt to access 1-element Vector{Float64} at index [2]; Stacktrace:; [1] getindex; @ ./array.jl:805 [inlined]; [2] g(a::Vector{Float64}, first::Bool); @ Main ./REPL[11]:1; [3] top-level scope; @ REPL[13]:1; ```. `ifelse` is _not_ short-circuiting --- _both_ branches are executed, even though only the correct value is returned:. ```julia; julia> b = rand(2); 2-element Vector{Float64}:; 0.5340042876487958; 0.7031634999748222. julia> g(b, true); 0.5340042876487958. julia> g(b, false); 0.7031634999748222; ```. It's easier for the compiler to optimize code that involves `ifelse`, especially on the GPU. The reason is that it's allowed to execute all code on both branches. If we use short-circuiting logic, then I guess many optimizations are not possible, because execution on one branch or another must be completely excluded. Some of this is discussed here: https://discourse.julialang.org/t/multiplying-by-booleans-faster-than-if-else/64117. > What about @inline?. This a little hazier. The compiler decides based on a heuristic whether or not to ""inline"" a function (meaning, rather than compiling code for a function independently and jumping to that code at the right moment, it combines the function code with the code that calls the function). We want to inline everything basically, so that every tendency evaluation involves evaluating one giant function. Inlining lets LLVM magic optimize our code to the highest degree (at least that's my impression). For whatever reason the compiler often decides _not_ to inline our functions unless we specifically annotate them. So it seems we probably need to add `@inline` to every ""hot"" function that's called in a kernel, at every grid point (like a forcing function or boundary condition function). But I suggest you benchmark yourself and see!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2336#issuecomment-1066115583:3097,benchmark,benchmark,3097,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2336#issuecomment-1066115583,1,['benchmark'],['benchmark']
Testability,[Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047?src=pr&el=h1) Report; > Merging [#1047](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/d1008534316cf7cfe509ae725b9fdc2582cb2a9b?el=desc) will **increase** coverage by `2.57%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1047 +/- ##; ==========================================; + Coverage 69.73% 72.31% +2.57% ; ==========================================; Files 160 228 +68 ; Lines 3512 6562 +3050 ; ==========================================; + Hits 2449 4745 +2296 ; - Misses 1063 1817 +754 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | `99.25% <0.00%> (ø)` | |; | [test/test\_buoyancy.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2J1b3lhbmN5Lmps) | `100.00% <0.00%> (ø)` | |; | [...ergence\_tests/one\_dimensional\_advection\_schemes.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9hZHZlY3Rpb25fc2NoZW1lcy5qbA==) | `0.00% <0.00%> (ø)` | |; | [benchmark/benchmark\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | `0.00% <0.00%> (ø)` | |; | [...ests/ConvergenceTests/DoublyPeriodicTaylorGreen.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHM,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1047#issuecomment-707893132:1023,test,test,1023,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1047#issuecomment-707893132,2,['test'],['test']
Testability,[a8e2244](https://github.com/CliMA/Oceananigans.jl/pull/3395/commits/a8e224462a54b7856c6350934798317eae8ebc22) should make tests pass,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3395#issuecomment-1911617204:123,test,tests,123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3395#issuecomment-1911617204,1,['test'],['tests']
Testability,`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #979 +/- ##; ==========================================; - Coverage 72.54% 70.13% -2.42% ; ==========================================; Files 210 148 -62 ; Lines 6076 3154 -2922 ; ==========================================; - Hits 4408 2212 -2196 ; + Misses 1668 942 -726 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [benchmark/benchmark\_forcing\_functions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mb3JjaW5nX2Z1bmN0aW9ucy5qbA==) | | |; | [benchmark/benchmark\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | | |; | [test/test\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3NvbHZlcnMuamw=) | | |; | [...nceTests/OneDimensionalCosineAdvectionDiffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvT25lRGltZW5zaW9uYWxDb3NpbmVBZHZlY3Rpb25EaWZmdXNpb24uamw=) | | |; | [test/test\_grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2dyaWRzLmps) | | |; | [...ergence\_tests/ConvergenceTests/ConvergenceTests.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvQ29udmVyZ2VuY2VUZXN0cy5qbA==) | | |; | [examples/ocean\_wind,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/979#issuecomment-699227574:1393,benchmark,benchmark,1393,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/979#issuecomment-699227574,2,['benchmark'],['benchmark']
Testability,"`66.66% <ø> (ø)` | |; | [test/test\_averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2F2ZXJhZ2VkX2ZpZWxkLmps) | `0.00% <ø> (ø)` | |; | [src/Fields/averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hdmVyYWdlZF9maWVsZC5qbA==) | `76.92% <44.44%> (-13.56%)` | :arrow_down: |; | [src/Fields/computed\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9jb21wdXRlZF9maWVsZC5qbA==) | `69.56% <60.00%> (-6.63%)` | :arrow_down: |; | [src/Buoyancy/buoyancy\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L2J1b3lhbmN5X2ZpZWxkLmps) | `68.96% <66.66%> (-6.04%)` | :arrow_down: |; | [src/Fields/abstract\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hYnN0cmFjdF9maWVsZC5qbA==) | `57.14% <100.00%> (ø)` | |; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | `99.42% <100.00%> (+0.03%)` | :arrow_up: |; | [src/Operators/interpolation\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9pbnRlcnBvbGF0aW9uX29wZXJhdG9ycy5qbA==) | `61.22% <0.00%> (+2.04%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020?src=pr&el=footer). Last update [c2413c3...0ee1cd7](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1020#issuecomment-702338478:2208,test,test,2208,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1020#issuecomment-702338478,2,['test'],['test']
Testability,"`91.42% <ø> (-0.24%)` | :arrow_down: |; | [test/test\_turbulence\_closures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3R1cmJ1bGVuY2VfY2xvc3VyZXMuamw=) | `94.35% <ø> (+0.75%)` | :arrow_up: |; | [test/runtests\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC9ydW50ZXN0c191dGlscy5qbA==) | `67.56% <73.33%> (+42.56%)` | :arrow_up: |; | [src/Diagnostics/average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2F2ZXJhZ2Uuamw=) | `100.00% <100.00%> (ø)` | |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `92.06% <100.00%> (ø)` | |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `85.71% <100.00%> (ø)` | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | `100.00% <100.00%> (ø)` | |; | [test/test\_examples.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2V4YW1wbGVzLmps) | `76.66% <100.00%> (-9.34%)` | :arrow_down: |; | ... and [1 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850?src=pr&el=footer). Last update [8198ca7...871b448](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/850#issuecomment-672128397:2625,test,test,2625,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/850#issuecomment-672128397,2,['test'],['test']
Testability,"`SplitExplicitFreeSurface` works well here. For reference, the script I'm using is here : https://github.com/FluidNumerics/oceananigans-on-amd-gpus/blob/main/benchmarks/baroclinic_adjustment/baroclinic_adjustment.jl. I'll get profiling results posted soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1950297721:158,benchmark,benchmarks,158,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1950297721,1,['benchmark'],['benchmarks']
Testability,```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [benchmark/benchmark\_forcing\_functions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mb3JjaW5nX2Z1bmN0aW9ucy5qbA==) | | |; | [benchmark/benchmark\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | | |; | [test/test\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3NvbHZlcnMuamw=) | | |; | [...nceTests/OneDimensionalCosineAdvectionDiffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvT25lRGltZW5zaW9uYWxDb3NpbmVBZHZlY3Rpb25EaWZmdXNpb24uamw=) | | |; | [test/test\_grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2dyaWRzLmps) | | |; | [...ergence\_tests/ConvergenceTests/ConvergenceTests.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvQ29udmVyZ2VuY2VUZXN0cy5qbA==) | | |; | [examples/ocean\_wind\_mixing\_and\_convection.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb2NlYW5fd2luZF9taXhpbmdfYW5kX2NvbnZlY3Rpb24uamw=) | | |; | [...ence\_tests/ConvergenceTests/OneDimensionalUtils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvT25lRGltZW5zaW9uYWxVdGlscy5qbA==) | | |; | [...erification/lid\_driven\_cavity/lid\_driven\_cavity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/9,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/979#issuecomment-699227574:1962,test,test,1962,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/979#issuecomment-699227574,2,['test'],['test']
Testability,```; Enzyme + Oceananigans Initialization Broadcast Kernel: Error During Test at /var/lib/buildkite-agent/builds/tartarus-14/clima/oceananigans/test/test_enzyme.jl:59; --;   | Got exception outside of a @test;   | MethodError: no constructors have been defined for Any; ```. 🤔 . https://buildkite.com/clima/oceananigans/builds/15740#018f756a-5b07-47c3-be29-9fc9b4d9d3ab/29-348,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2110760532:73,Test,Test,73,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2110760532,3,"['Test', 'test']","['Test', 'test']"
Testability,"```; Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore should be avoided. If you want to allow scalar iteration, use `allowscalar` or `@allowscalar`; to enable scalar iteration globally or for the operations in question. Stacktrace:; [1] error(s::String); @ Base .\error.jl:35; [2] errorscalar(op::String); @ GPUArraysCore C:\Users\ADMIN\.julia\packages\GPUArraysCore\GMsgk\src\GPUArraysCore.jl:155; [3] _assertscalar(op::String, behavior::GPUArraysCore.ScalarIndexing); @ GPUArraysCore C:\Users\ADMIN\.julia\packages\GPUArraysCore\GMsgk\src\GPUArraysCore.jl:128; [4] assertscalar(op::String); @ GPUArraysCore C:\Users\ADMIN\.julia\packages\GPUArraysCore\GMsgk\src\GPUArraysCore.jl:116; [5] getindex(A::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, I::Int64); @ GPUArrays C:\Users\ADMIN\.julia\packages\GPUArrays\Hd5Sk\src\host\indexing.jl:48; [6] scalar_getindex; @ C:\Users\ADMIN\.julia\packages\GPUArrays\Hd5Sk\src\host\indexing.jl:34 [inlined]; [7] _getindex; @ C:\Users\ADMIN\.julia\packages\GPUArrays\Hd5Sk\src\host\indexing.jl:17 [inlined]; [8] getindex; @ C:\Users\ADMIN\.julia\packages\GPUArrays\Hd5Sk\src\host\indexing.jl:15 [inlined]; [9] getindex; @ C:\Users\ADMIN\.julia\packages\OffsetArrays\rMTtC\src\OffsetArrays.jl:422 [inlined]; [10] getindex; @ C:\Users\ADMIN\.julia\packages\Oceananigans\E4XVr\src\Fields\field.jl:540 [inlined]; [11] rescale!(model::NonhydrostaticModel{Oceananigans.TimeSteppers.RungeKutta3TimeStepper{Float64, @NamedTuple{u::Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Fl... (repeats 1 time); [12] top-level scope; @ In[10]:9; ```. This is an error message I am getting from my code. Please share your comments on how to resolve this issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3522#issuecomment-2019782299:789,assert,assertscalar,789,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3522#issuecomment-2019782299,1,['assert'],['assertscalar']
Testability,"```; [e9e359dc] CUDA_jll v10.0.130+3; ```. That JLL is deprecated and shouldn't be used. For one, it `dlopen`s plenty of libraries eagerly, as can be seen at the start of the test:. ```; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ```. Opening many copies of CUDA libraries easily breaks the whole system, and might explain the CUBLAS failure here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849:175,test,test,175,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849,3,"['Test', 'test']","['Testing', 'test', 'tests']"
Testability,"```; julia> grid = RectilinearGrid(GPU(), size=(10, 10, 10), extent=(1, 1, 1), topology = (Periodic, Bounded, Bounded)); 10×10×10 RectilinearGrid{Float64, Periodic, Bounded, Bounded} on GPU with 1×1×1 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.1; ├── Bounded y ∈ [-1.61908e-17, 1.0] regularly spaced with Δy=0.1; └── Bounded z ∈ [-1.0, -1.29526e-16] regularly spaced with Δz=0.1. julia> fields = (); (). julia> for i in 1:7; fields = (fields..., Field((Center, Center, Center), grid)); end. julia> @benchmark for i in 1:7; fill_halo_regions!(fields[i]); end; BenchmarkTools.Trial: 5334 samples with 1 evaluation.; Range (min … max): 688.320 μs … 40.334 ms ┊ GC (min … max): 0.00% … 48.53%; Time (median): 840.539 μs ┊ GC (median): 0.00%; Time (mean ± σ): 931.289 μs ± 1.680 ms ┊ GC (mean ± σ): 4.12% ± 2.23%. ▂▆▇▇█▅▃ ▁▅▄▃▁▁ ▁ ; ▁▁▁▁▁▂▃▄▅▆████████████████████▅▆▄▄▅▄▄▃▄▅▃▄▃▃▃▃▂▂▂▁▂▂▂▂▁▂▁▂▁▁ ▄; 688 μs Histogram: frequency by time 1.11 ms <. Memory estimate: 208.03 KiB, allocs estimate: 1771. julia> @benchmark fill_halo_regions!(fields); BenchmarkTools.Trial: 10000 samples with 1 evaluation.; Range (min … max): 112.632 μs … 19.348 ms ┊ GC (min … max): 0.00% … 51.80%; Time (median): 131.708 μs ┊ GC (median): 0.00%; Time (mean ± σ): 148.468 μs ± 459.310 μs ┊ GC (mean ± σ): 3.97% ± 1.28%. ▁▆█▆▄▂ ; ▂▂▂▂▂▂▃▅███████▆▅▄▄▄▄▄▄▄▄▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▂▁▂▂▂▂▂▂▂▃▂▂▂ ▃; 113 μs Histogram: frequency by time 208 μs <. Memory estimate: 64.69 KiB, allocs estimate: 258. julia> grid = RectilinearGrid(CPU(), size=(10, 10, 10), extent=(1, 1, 1), topology = (Periodic, Bounded, Bounded)); 10×10×10 RectilinearGrid{Float64, Periodic, Bounded, Bounded} on CPU with 1×1×1 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.1; ├── Bounded y ∈ [-1.61908e-17, 1.0] regularly spaced with Δy=0.1; └── Bounded z ∈ [-1.0, -1.29526e-16] regularly spaced with Δz=0.1. julia> fields = (); (). julia> for i in 1:7; fields = (fields..., Field((Center, Center, Center), grid)); end. julia> @benchmark f",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1065969065:517,benchmark,benchmark,517,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1065969065,2,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark']"
Testability,```; nc3020@gadi-gpu-v100-0104:~$ nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Wed Feb 15 08:59:13 2023; Driver Version : 525.60.13; CUDA Version : 12.0. Attached GPUs : 1; GPU 00000000:B2:00.0; Product Name : Tesla V100-SXM2-32GB; Product Brand : Tesla; Product Architecture : Volta; Display Mode : Enabled; Display Active : Disabled; Persistence Mode : Enabled; ...; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430431312:69,LOG,LOG,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430431312,1,['LOG'],['LOG']
Testability,"```Julia; using Oceananigans, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: ColumnEnsembleSize. grid = RectilinearGrid(size=2, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1). model_kwargs = (; coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing); simulation_kwargs = (; Δt=0.05, stop_iteration=100). model = HydrostaticFreeSurfaceModel(; grid, coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing). set!(model, u=sqrt(2), v=sqrt(2)); simulation = Simulation(model; Δt=0.01, stop_iteration=100). run!(simulation). @show parent(simulation.model.velocities.u)[1, 1, :]; @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; ```. ```Julia; julia> @show parent(simulation.model.velocities.u)[1, 1, :]; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9553830695348586, 1.9553830695348586, 1.9549981463078983, 1.9549981463078983]; 4-element Vector{Float64}:; 1.9553830695348586; 1.9553830695348586; 1.9549981463078983; 1.9549981463078983. julia> @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; Test Failed at REPL[35]:1; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9553830695348586 == 1.9549981463078983; ERROR: There was an error during testing; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152:30,Test,Test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152,5,"['Test', 'test']","['Test', 'test', 'testing']"
Testability,"```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (78.718 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.593 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9561509021434433, 1.9561509021434433, 1.9560395693473134, 1.9560395693473134]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9561509021434433 == 1.9560395693473134; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. bingo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571:589,Test,Test,589,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571,4,"['Test', 'test']","['Test', 'test', 'testing']"
Testability,"```julia; condition = arch_array(architecture(operand.grid), NotImmersed(condition)); ```. seems to do something since it produces the correct result on CPUs while the alternative line without NotImmersed() produces an incorrect result. But your suggested function is indeed the way to go since it produces the correct result and it works on GPU 🙂 . I just had to make a minor syntax adjustment:. ```julia; @inline function condition_operand(func::Function, operand::IF, condition::AbstractArray, mask); condition = NotImmersed(arch_array(architecture(operand.grid), condition)); return ConditionalOperation(operand; func, condition, mask); end; ```. I'll submit a PR with this solution soon (and a test) soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3439#issuecomment-1907101332:699,test,test,699,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3439#issuecomment-1907101332,1,['test'],['test']
Testability,"`gravitational_direction` for `Buoyancy` seems like a good name!. Is it a ""direction"" where g_x + g_y + g_z = 1 or is it a unit vector where |g| = g_x^2 + g_y^2 + g_z^2 = 1?. This PR has gotten a bit stale but should be easy to revive and add `gravitational_direction`. I guess we thought this PR was missing a test? I'm happy to merge it as long as the 45 degree slanted rising thermal bubble looks good and we can worry about adding a more rigorous test in a future PR?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-783479651:311,test,test,311,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-783479651,2,['test'],['test']
Testability,"`julia; julia> 0.165 * sqrt(2); 0.23334523779156072; ```. which is probably not a coincidence. However, I'm not sure how an extra factor of `sqrt(2)` snuck into our constant. As for _clarification_, I don't have much to offer. Perhaps the constant was taken from some reference that used a different formulation than either us or Pressel et al. 2015. Nobody has submitted a validation test for this closure so I don't think we know how it performs. As a historical note, the paper cited by both Pressel et al (2015) and us is Lilly (1962), which does indeed use the same formulation:. ![image](https://user-images.githubusercontent.com/15271942/127507507-c7d11dfc-733a-4472-8216-dca4e5844b3f.png). where. ![image](https://user-images.githubusercontent.com/15271942/127507737-94aa05d4-6fa5-4d38-9a9d-b1bbcc8a1e79.png). @tomchor I can't tell if the formula you've pasted is actually different from ours (or what the definition of `|S|` is). Where does it come from?. It'd be fine to change the constant because there's no validation test. So the best we can do is theorize, and theorization on this issue suggests changing the default to `C=0.17`. If one wanted to set up a validation test, it could be nice to reproduce [Compte-Bellot and Corrsin (1964)](https://www.cambridge.org/core/journals/journal-of-fluid-mechanics/article/abs/simple-eulerian-time-correlation-of-fulland-narrowband-velocity-signals-in-gridgenerated-isotropic-turbulence/A3D7B0DD621DE46CB6CC543F65A66F93) (this wasn't possible when the closures were written because we didn't support triply periodic domains, but is possible now). This could also be used to validate Anisotropic Minimum Dissipation. Here's a figure with such a comparison from [Rozema et al 2015](https://aip.scitation.org/doi/pdf/10.1063/1.4928700):. ![image](https://user-images.githubusercontent.com/15271942/127508527-e5f7d150-56c4-4949-ad8e-90d67fdbee64.png). I believe for shear flows it has also been found that the constant needs to be as small as `C=0.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1907#issuecomment-889189927:2726,test,test,2726,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1907#issuecomment-889189927,2,['test'],['test']
Testability,"`regrid!` fails on the GPU. ```Julia; [2022/08/20 09:49:21.564] INFO Testing field regridding...; Regridding: Error During Test at /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:382; Got exception outside of a @test; InvalidIRError: compiling kernel #gpu__regrid!(KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}}, OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, RectilinearGrid{Float64, Flat, Flat, Bounded, Float64, Float64, Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Nothing}, RectilinearGrid{Float64, Flat, Flat, Bounded, Float64, Float64, OffsetVector{Float64, CuDeviceVector{Float64, 1}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetVector{Float64, CuDeviceVector{Float64, 1}}, Nothing}, SubArray{Float64, 1, OffsetVector{Float64, CuDeviceVector{Float64, 1}}, Tuple{UnitRange{Int64}}, true}) resulted in invalid LLVM IR; Reason: unsupported dynamic function invocation (call to length); Stacktrace:; [1] size; @ /g/data/v45/nc3020/Oceananigans.jl/src/Grids/grid_utils.jl:66; [2] size; @ /g/data/v45/nc3020/Oceananigans.jl/src/Grids/grid_utils.jl:70; [3] macro expansion; @ /g/data/v45/nc3020/Oceananigans.jl/src/Fields/regridding_fields.jl:86; [4] gpu__regrid!; @ /g/data/v45/nc3020/.julia/packages/KernelAbstractions/1ZLga/src/macros.jl:80; [5] gpu__regrid!; @ ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221177574:69,Test,Testing,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221177574,4,"['Test', 'test']","['Test', 'Testing', 'test']"
Testability,`test/test_biogeochemistry.jl` as it currently is in this branch runs on GPU so it looks like `Val{Symbol}` does work!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305891098:1,test,test,1,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305891098,1,['test'],['test']
Testability,`test_dynamics.jl` has physics-based tests; `test_field.jl` has tests for `Field` construction and some simple computations (broadcasting I think). This issue regards the `IncompressibleModel` constructor (eg we want to pass a `Field` to the keyword argument `background_fields` in `IncompressibleModel`. So I think it belongs in. https://github.com/CliMA/Oceananigans.jl/blob/master/test/test_incompressible_models.jl,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-875936013:37,test,tests,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-875936013,6,['test'],"['test', 'tests']"
Testability,"`test_ensemble_hydrostatic_free_surface_models.jl` fails on this PR and I can't figure out why. In particular, the case with many different Coriolises... ```julia; julia> include(""test_ensemble_hydrostatic_free_surface_models.jl""); ```; fails... This is affecting the tests on https://github.com/CliMA/ParameterEstimocean.jl/pull/295",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2786#issuecomment-1296350740:268,test,tests,268,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2786#issuecomment-1296350740,1,['test'],['tests']
Testability,`test_simulations.jl` has a function called `run_time_step_wizard_tests` that has several tests for a `RegularRectilinearGrid`. We could add in a test tha tuses a stretched vertical grid. Just one option that comes to mind.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1751#issuecomment-866091531:90,test,tests,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1751#issuecomment-866091531,2,['test'],"['test', 'tests']"
Testability,a 'simple forcing' script to reproduce this error is here:. https://github.com/climate-machine/Oceananigans.jl/blob/631b861bcfdbfd894c4cb6b2257a16aa8c55f8cc/sandbox/simple_forcing.jl,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/248#issuecomment-496482547:157,sandbox,sandbox,157,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/248#issuecomment-496482547,1,['sandbox'],['sandbox']
Testability,"a3,; advection = WENO(order=9),; particles = lagrangian_particles; ). u, v, w = model.velocities. simulation = Simulation(model, Δt=0.1seconds, stop_iteration=2). wall_clock = [time_ns()]. function print_progress(sim); @printf(""i: %d, t: %s, wall time: %s, max(u): (%6.3e, %6.3e, %6.3e) m/s, next Δt: %s\n"",; sim.model.clock.iteration,; prettytime(sim.model.clock.time),; prettytime(1e-9 * (time_ns() - wall_clock[1])),; maximum(abs, sim.model.velocities.u),; maximum(abs, sim.model.velocities.v),; maximum(abs, sim.model.velocities.w),; prettytime(sim.Δt)); @info ""x(particle): $(round.(lagrangian_particles.properties.x, digits=2)), y(particle): $(round.(lagrangian_particles.properties.y, digits=2)), z(particle): $(round.(lagrangian_particles.properties.z, digits=2))\n"". wall_clock[1] = time_ns(). return nothing; end. simulation.callbacks[:print_progress] = Callback(print_progress, IterationInterval(1)). run!(simulation); ```; In the test script, the domain is initialized to be `Periodic, Bounded, Bounded`, so particles should be shifted if $x \geq 1$, bounced if $y > 1$, $z<-1$. Here's the output of the script:; ```; [ Info: Initializing simulation...; i: 0, t: 0 seconds, wall time: 5.450 seconds, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 100 ms; [ Info: x(particle): [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5], y(particle): [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5], z(particle): [-0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5]; [ Info: ... simulation initialization complete (3.384 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (7.395 seconds).; i: 1, t: 100 ms, wall time: 7.414 seconds, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 100 ms; [ Info: x(particle): [0.0, 0.25, 0.5, 0.75, 1.0, 0.25, 0.5], y(particle): [0.0, 0.25, 0.5, 0.75, 1.0, 0.75, 0.5], z(particle): [-0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5]; [ Info: Simulation is stopping after running for 10.934 seconds.; [ Info: Model iteration 2 equals or exceeds stop ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3416#issuecomment-1875732332:1657,test,test,1657,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3416#issuecomment-1875732332,1,['test'],['test']
Testability,"a795e6f7). Estrade *et al.* test this with a 2D ROMS implementation (their Figure 10) that I've tried to replicate in Oceananigans:. ![compare_EMVR08-analytical-numerical](https://github.com/CliMA/Oceananigans.jl/assets/4955404/c17b41e9-cb0c-463a-9bae-d418ab30e007). The discrepancy is mostly in the BBL, so I'm wondering if cut cells (#3146) would improve it. But I'm also not sure if I'm prescribing bottom friction correctly at the immersed boundary (see code below run in Oceananigans v0.91.0). Any thoughts?. ```julia; using Oceananigans; using Oceananigans.Units; using Printf. Lx = 200kilometers; dx = 100meters #200meters#500meters; hmin = 4meters; slope = 1e-3. D = 50meters; f = 3.8145e-05 # At ~15N. dz = 2meters #4meters. Ti = 2π/f; Av = f*(D/π)^2/2; @info @sprintf(""Ti: %.1f h"", Ti/3600); @info @sprintf(""Av: %1.3e m2/s for D = %d m"", Av, D) # Av = 4.831e-3 m2/s, D = 50 m, lat = 15N in Estrade et al. (2008). te = 4Ti #10Ti; outdt = Ti/10; fout = ""upwelling2Dhomog.nc"". logdt = outdt#Ti/100; maxcfl = 0.7. H = hmin + slope*Lx; Nx = Int(ceil(Lx/dx)); Nz = Int(ceil(H/dz)). underlying_grid = RectilinearGrid(CPU(),; size=(Nx, Nz), halo=(3, 3),; x = (-Lx, 0),; z = (-H, 0),; topology=(Bounded, Flat, Bounded)). h(x) = hmin + slope*x; grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(h)). τx₀ = 0 # [Pa]; τy₀ = -0.1 # [Pa]; ρ₀ = 1025 # [kg/m3]; r = 5e-3. Twind = Ti/2 # Wind ramp-up timescale. τx₀ = τx₀/ρ₀; τy₀ = τy₀/ρ₀. # Boundary conditions (wind stress and bottom friction).; @inline wind_stress_u(x, t, p) = - p.τx₀ * tanh(t/p.Twind); @inline wind_stress_v(x, t, p) = - p.τy₀ * tanh(t/p.Twind); @inline drag_u(x, t, u, p) = - p.r * u; @inline drag_v(x, t, v, p) = - p.r * v; @inline immersed_drag_u(x, z, t, u, p) = - p.r * u; @inline immersed_drag_v(x, z, t, v, p) = - p.r * v. wind_stress_bc_u = FluxBoundaryCondition(wind_stress_u, parameters=(; τx₀, Twind)); wind_stress_bc_v = FluxBoundaryCondition(wind_stress_v, parameters=(; τy₀, Twind)). drag_bc_u = FluxBoundaryC",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/775#issuecomment-2132214906:1461,log,logdt,1461,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/775#issuecomment-2132214906,1,['log'],['logdt']
Testability,"aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [src/Fields/show\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zaG93X2ZpZWxkcy5qbA==) | `0.00% <0.00%> (ø)` | |; | [test/test\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3NvbHZlcnMuamw=) | | |; | [examples/internal\_wave.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvaW50ZXJuYWxfd2F2ZS5qbA==) | | |; | [test/test\_dynamics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2R5bmFtaWNzLmps) | | |; | [docs/citations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-ZG9jcy9jaXRhdGlvbnMuamw=) | | |; | [benchmark/benchmark\_forcing\_functions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mb3JjaW5nX2Z1bmN0aW9ucy5qbA==) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | [benchmark/benchmark\_ffts.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mZnRzLmps) | | |; | ... and [60 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911?src=pr&el=footer). Last update [0fe0d15...c70ed0e](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/911#issuecomment-687049822:2590,benchmark,benchmark,2590,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/911#issuecomment-687049822,2,['benchmark'],['benchmark']
Testability,"acer conservation. The initial concentration is sinusoidal, so the area integrated concentration is zero over the domain initially. I've plotted both the IBM and non-IBM (lighter colors) results to see the differences. This one is on a log plot. You can see that leakage is happening in the IBM versions. It's hard to say how bad the leakage is here, and it'll probably be better to consider an initial constant concentration rather than sinusoidal to see how much leakage is occurring due to the immersed solid. ![volint_Concentration_log](https://user-images.githubusercontent.com/67593861/122986580-a058c400-d36d-11eb-9a7c-e3e8d2a7367e.png). It might be easier to see what is going on in the IBM cases without the log scaling:. ![volint_Concentration](https://user-images.githubusercontent.com/67593861/122989251-984e5380-d370-11eb-88cc-ccf4444fb331.png). ### Integrated Boundary Stress; Finally, I looked at the integrated boundary stress along the top wall. The error between the nonIBM and IBM versions at these same grid sizes are below. Unfortunately this is not getting better with increased resolution. This could be due to base state changes causing the stress to change and not necessarily something wrong with the method. It might take better refinement than 256 x 256 to really see a trend here. ![Bickley_dudy_diff](https://user-images.githubusercontent.com/67593861/122987679-dc405900-d36e-11eb-895a-0f66daf9a473.png). Any thought on these results would be greatly appreciated, or if there is something else that might be good to look at with this particular test case. Further refinements to the grid are taking quite a long time to run on my PC, but they can be done. These were run with a viscosity of 0 for the isotropic closure. I want to look at the viscous cases of these to see if the results change at all with added viscosity. I'm also working on some cylinder validation metrics for this IBM, but we can move forward without those for now if we like what we're seeing here!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866285588:2256,test,test,2256,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866285588,1,['test'],['test']
Testability,ae029012] + Requires v1.1.3; [6038ab10] + Rotations v1.0.2; [1bc83da4] + SafeTestsets v0.0.1; [d496a93d] + SeawaterPolynomials v0.2.2; [276daf66] + SpecialFunctions v1.7.0; [aedffcd0] + Static v0.3.3; [90137ffa] + StaticArrays v1.2.13; [15972242] + StaticPermutations v0.3.0; [5e0ebb24] + Strided v1.1.2; [09ab397b] + StructArrays v0.6.3; [856f2bd8] + StructTypes v1.7.3; [3783bdb8] + TableTraits v1.0.1; [bd369af6] + Tables v1.6.0; [6aa5eb33] + TaylorSeries v0.10.13; [a759f4b9] + TimerOutputs v0.5.13; [3bb67fe8] + TranscodingStreams v0.9.6; [bc48ee85] + Tullio v0.3.2; [9d95972d] + TupleTools v1.3.0; [f5851436] + FFTW_jll v3.3.10+0; [0234f1f7] + HDF5_jll v1.12.0+1; [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+2; [dad2f222] + LLVMExtra_jll v0.0.11+0; [856f044c] + MKL_jll v2021.1.1+2; [7cb0a576] + MPICH_jll v3.4.2+0; [9237b28f] + MicrosoftMPI_jll v10.1.3+0; [7243133f] + NetCDF_jll v400.702.400+0; [fe0851c0] + OpenMPI_jll v4.1.1+2; [458c3c95] + OpenSSL_jll v1.1.10+0; [efe28fd5] + OpenSpecFun_jll v0.5.5+0; [0dad84c5] + ArgTools; [56f22d72] + Artifacts; [2a0f44e3] + Base64; [ade2ca70] + Dates; [8bb1440f] + DelimitedFiles; [8ba89e20] + Distributed; [f43a241f] + Downloads; [b77e0a4c] + InteractiveUtils; [4af54fe1] + LazyArtifacts; [b27032c2] + LibCURL; [76f85450] + LibGit2; [8f399da3] + Libdl; [37e2e46d] + LinearAlgebra; [56ddb016] + Logging; [d6f4376e] + Markdown; [a63ad114] + Mmap; [ca575930] + NetworkOptions; [44cfe95a] + Pkg; [de0858da] + Printf; [3fa0cd96] + REPL; [9a3f8284] + Random; [ea8e919c] + SHA; [9e88b42a] + Serialization; [1a1011a3] + SharedArrays; [6462fe0b] + Sockets; [2f01184e] + SparseArrays; [10745b16] + Statistics; [fa267f1f] + TOML; [a4e569a6] + Tar; [8dfed614] + Test; [cf7118a7] + UUIDs; [4ec0a83e] + Unicode; [e66e0078] + CompilerSupportLibraries_jll; [deac9b47] + LibCURL_jll; [29816b5a] + LibSSH2_jll; [c8ffd9c3] + MbedTLS_jll; [14a3606d] + MozillaCACerts_jll; [05823500] + OpenLibm_jll; [83775a58] + Zlib_jll; [8e850ede] + nghttp2_jll; [3f19e933] + p7zip_jll; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1996#issuecomment-933978237:3885,Log,Logging,3885,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1996#issuecomment-933978237,2,"['Log', 'Test']","['Logging', 'Test']"
Testability,agreed for the test. The rest looks good,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287658911:15,test,test,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287658911,1,['test'],['test']
Testability,ah thanks but the all point is that I would like to test the GPU ...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1636#issuecomment-832302863:52,test,test,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1636#issuecomment-832302863,1,['test'],['test']
Testability,"al reflection; zₚ = reshape(repeat(z₀, 5), size(xₚ)) # Vertical direction isn't periodic, so we just need to repeat and reshape things . resolved_noise(x, y, z) = sum(@. 1e-6 * exp(-(x-xₚ)^2/σx^2 -(z-zₚ)^2/σz^2)). constant_stratification(x, y, z) = 1e-5 * z; set!(model, u=resolved_noise, b=constant_stratification). u, v, w = model.velocities. simulation = Simulation(model, Δt=20.0, stop_iteration=1e4); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(100)). e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). using GLMakie; fig = Figure(resolution=(900, 450)). axw = Axis(fig[1, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[1, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[1, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[2, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). n = Observable(1). wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:balance); heatmap!(axe, x, z, en, colorrange=(0, elim), colormap=:solar); heatmap!(axb, x, z, bn, colorrange=(0, 1e-3), colormap=:thermal). t = @lift times[$n]; lines!(axE, times, Et[:]); vlines!(axE, t). display(fig). record(fig, ""test.mp4"", 1:Nt) do nn; @info ""Recording frame $nn of $Nt""; n[] = nn; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462391476:2759,test,test,2759,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462391476,1,['test'],['test']
Testability,"although a cleaner design might require a bit of refactoring. PR is still a work-in-progress so it's a bit messy, the purpose was to demonstrate a proof of concept. MPI.jl and PencilFFTs.jl are new dependencies but I haven't updated the Project.toml yet. So far this PR adds some new infrastructure:; 1. Distributed/multi-architectures (e.g. `MultiCPU`) that know about rank connectivity.; 2. Halo communication between ranks is done via multiple dispatch on a new `HaloCommunicationBC` type.; 3. A `DistributedFFTBasedPoissonSolver` for solving Poisson equations across ranks.; 4. A `DistributedModel` that creates local grids for each ranks, injects halo communication BCs, and passes the distributed pressure solver to a local `IncompressibleModel`. I also added some simple tests for multi architecture rank connectivity, local grid construction, injection of halo communication BCs, and halo communication (testing x, y, and z slab decompositions). Also added tests for the distributed Poisson solver ensuring the solution is divergence-free. Next step for testing would probably be to test that the code handles `Bounded` topologies correctly then add tests that reproduce the regression tests but on multiple ranks and ensure the output matches the regression output. ## Some notes. ### Domain decomposition. Domain decomposition is supported and tested in x, y, and z. But for `IncompressibleModel` z-decomposition won't work right now because vertical integrals are done inside GPU kernels (so we probably don't want to decompose in z). And PencilFFTs.jl supports decompositions in dimensions 2 and 3 (since dimension 1 FFTs are the fastest). As a result, right now Oceananigans.jl only supports slab decompositions in y although we should figure out if pencil decompositions are possible. ### Local topologies. The local grid topology may need to be different from the global/full grid topology. This isn't an issue for triply-periodic so I haven't thought about how to tackle it yet. How w",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-775301066:1207,test,tests,1207,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-775301066,1,['test'],['tests']
Testability,"ananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Clock{Float64}}}); @ Oceananigans.AbstractOperations ~/.julia/packages/Oceananigans/RnhUQ/src/AbstractOperations/computed_field.jl:37; [12] test_ke_dissipation_rate_terms(grid::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}; model_type::Type{NonhydrostaticModel}, closure::ScalarDiffusivity{Oceananigans.TurbulenceClosures.ExplicitTimeDiscretization, ThreeDimensionalFormulation, Float64, Float64}); @ Main ~/work/Oceanostics.jl/Oceanostics.jl/test/runtests.jl:218; [13] macro expansion; @ ~/work/Oceanostics.jl/Oceanostics.jl/test/runtests.jl:418 [inlined]; [14] macro expansion; @ /opt/hostedtoolcache/julia/1.9.2/x64/share/julia/stdlib/v1.9/Test/src/Test.jl:1498 [inlined]; [15] top-level scope; @ ~/work/Oceanostics.jl/Oceanostics.jl/test/runtests.jl:400; [16] include(fname::String); @ Base.MainInclude ./client.jl:478; [17] top-level scope; @ none:6; [18] eval; @ ./boot.jl:[370](https://github.com/tomchor/Oceanostics.jl/actions/runs/5955695197/job/16154870828?pr=151#step:6:373) [inlined]; [19] exec_options(opts::Base.JLOptions); @ Base ./client.jl:280; [20] _start(); @ Base ./client.jl:522; Test Summary: | Pass Error Total Time; Oceanostics | 58 1 59 2m45.4s; ERROR: LoadError: Some tests did not pass: 58 passed, 0 failed, 1 errored, 0 broken.; in expression starting at /home/runner/work/Oceanostics.jl/Oceanostics.jl/test/runtests.jl:399; ERROR: LoadError: Package Oceanostics errored during testing; Stacktrace:; ```. If so, can we re",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3227#issuecomment-1690550352:30419,test,test,30419,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3227#issuecomment-1690550352,1,['test'],['test']
Testability,"ananigans.jl/test/test_enzyme.jl:285 [inlined]; [64] macro expansion; @ ~/.julia/juliaup/julia-1.10.5+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/Test/src/Test.jl:1577 [inlined]; [65] top-level scope; @ ~/Projects/Oceananigans.jl/test/test_enzyme.jl:265; [66] include(fname::String); @ Base.MainInclude ./client.jl:489; [67] top-level scope; @ REPL[6]:1; [68] eval; @ ./boot.jl:385 [inlined]; [69] eval_user_input(ast::Any, backend::REPL.REPLBackend, mod::Module); @ REPL ~/.julia/juliaup/julia-1.10.5+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/REPL/src/REPL.jl:150; [70] repl_backend_loop(backend::REPL.REPLBackend, get_module::Function); @ REPL ~/.julia/juliaup/julia-1.10.5+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/REPL/src/REPL.jl:246; [71] start_repl_backend(backend::REPL.REPLBackend, consumer::Any; get_module::Function); @ REPL ~/.julia/juliaup/julia-1.10.5+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/REPL/src/REPL.jl:231; [72] run_repl(repl::REPL.AbstractREPL, consumer::Any; backend_on_current_task::Bool, backend::Any); @ REPL ~/.julia/juliaup/julia-1.10.5+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/REPL/src/REPL.jl:389; [73] run_repl(repl::REPL.AbstractREPL, consumer::Any); @ REPL ~/.julia/juliaup/julia-1.10.5+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/REPL/src/REPL.jl:375; [74] (::Base.var""#1013#1015""{Bool, Bool, Bool})(REPL::Module); @ Base ./client.jl:432; [75] #invokelatest#2; @ ./essentials.jl:892 [inlined]; [76] invokelatest; @ ./essentials.jl:889 [inlined]; [77] run_main_repl(interactive::Bool, quiet::Bool, banner::Bool, history_file::Bool, color_set::Bool); @ Base ./client.jl:416; [78] exec_options(opts::Base.JLOptions); @ Base ./client.jl:333; Test Summary: | Error Total Time; Enzyme with CATKEVerticalDiffusivity | 1 1 7m42.2s; ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 0 broken.; in expression starting at /Users/gregorywagner/Projects/Oceananigans.jl/test/test_enzyme.jl:264; ```. @wsmoses",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3837#issuecomment-2400785596:153106,Test,Test,153106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3837#issuecomment-2400785596,3,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"ananigans/test/test_distributed_models.jl:365; &nbsp; | Expression: all(north_halo(field, include_corners = false) .== arch.connectivity.north); &nbsp; | Stacktrace:; &nbsp; | [1] test_triply_periodic_halo_communication_with_411_ranks(::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:365; &nbsp; | [2] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:477 [inlined]; &nbsp; | [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [4] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:475 [inlined]; &nbsp; | [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [6] top-level scope at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:448; &nbsp; | Halo communication: Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | Expression: all(south_halo(field, include_corners = false) .== arch.connectivity.south); &nbsp; | Stacktrace:; &nbsp; | [1] test_triply_periodic_halo_communication_with_411_ranks(::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | [2] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:477 [inlined]; &nbsp; | [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [4] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:475 [inlined]; &nb",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802:1262,test,test,1262,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802,1,['test'],['test']
Testability,"annoying that the tests need a little refactoring too, but maybe its all for the best.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1520495458:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1520495458,1,['test'],['tests']
Testability,ans.jl/pull/872/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9BYnN0cmFjdE9wZXJhdGlvbnMuamw=) | `33.33% <0.00%> (-33.34%)` | :arrow_down: |; | [src/AbstractOperations/interpolation\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9pbnRlcnBvbGF0aW9uX3V0aWxzLmps) | `63.33% <0.00%> (-30.01%)` | :arrow_down: |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `75.00% <0.00%> (-25.00%)` | :arrow_down: |; | [src/Solvers/batched\_tridiagonal\_solver.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvYmF0Y2hlZF90cmlkaWFnb25hbF9zb2x2ZXIuamw=) | `60.71% <0.00%> (-24.29%)` | :arrow_down: |; | [src/Forcing/simple\_forcing.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvc2ltcGxlX2ZvcmNpbmcuamw=) | `81.81% <0.00%> (-18.19%)` | :arrow_down: |; | [test/runtests\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree#diff-dGVzdC9ydW50ZXN0c191dGlscy5qbA==) | `50.00% <0.00%> (-17.57%)` | :arrow_down: |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `68.75% <0.00%> (-16.97%)` | :arrow_down: |; | [...closure\_implementations/anisotropic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2FuaXNvdHJvcGljX2RpZmZ1c2l2aXR5Lmps) | `84.00% <0.00%> (-16.00%)` | :arrow_down: |; | [src/Buoyancy/Buoyancy.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L0J1b3lhbmN5Lmps) | `63.15% <0.00%> (-15.79%)` | :arrow_down: |; | [src/TurbulenceClosures/closure\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree#diff-c3JjL1R1cmJ,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/872#issuecomment-681307450:2095,test,test,2095,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/872#issuecomment-681307450,1,['test'],['test']
Testability,any slight dependency update results in most GPU tests failing... :(,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2873#issuecomment-1399622770:49,test,tests,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2873#issuecomment-1399622770,1,['test'],['tests']
Testability,anyone should feel free to merge if all tests pass ;),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3575#issuecomment-2090867728:40,test,tests,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3575#issuecomment-2090867728,1,['test'],['tests']
Testability,"apod/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:2474; [12] status (repeats 2 times); @ /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.10.2/gcc/7.5.0/apod/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:2442 [inlined]; [13] #show_update#167; @ /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.10.2/gcc/7.5.0/apod/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:2438 [inlined]; [14] add(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}, new_git::Set{Base.UUID}; preserve::Pkg.Types.PreserveLevel, platform::Base.BinaryPlatforms.Platform); @ Pkg.Operations /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.10.2/gcc/7.5.0/apod/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1397; [15] add; @ /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.10.2/gcc/7.5.0/apod/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1376 [inlined]; [16] add(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; preserve::Pkg.Types.PreserveLevel, platform::Base.BinaryPlatforms.Platform, kwargs::@Kwargs{io::IOStream}); @ Pkg.API /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.10.2/gcc/7.5.0/apod/share/julia/stdlib/v1.10/Pkg/src/API.jl:278; [17] add(pkgs::Vector{Pkg.Types.PackageSpec}; io::IOStream, kwargs::@Kwargs{}); @ Pkg.API /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.10.2/gcc/7.5.0/apod/share/julia/stdlib/v1.10/Pkg/src/API.jl:159; [18] add(pkgs::Vector{Pkg.Types.PackageSpec}); @ Pkg.API /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.10.2/gcc/7.5.0/apod/share/julia/stdlib/v1.10/Pkg/src/API.jl:148; [19] add; @ /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.10.2/gcc/7.5.0/apod/share/julia/stdlib/v1.10/Pkg/src/API.jl:147 [inlined]; [20] add(pkg::String); @ Pkg.API /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.10.2/gcc/7.5.0/apod/share/julia/stdlib/v1.10/Pkg/src/API.jl:146; [21] top-level scope; @ /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/testcode.jl:3; in expression starting at /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/testcode.jl:3; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2246012900:8493,test,testcode,8493,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2246012900,2,['test'],['testcode']
Testability,"arseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`; [fa267f1f] TOML `@stdlib/TOML`; [a4e569a6] Tar `@stdlib/Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfully precompiled in 7 seconds (205 already precompiled); 2 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages; Testing Running tests...; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:18.729] WARN Over-writi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:10524,Test,Testing,10524,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,2,"['Test', 'test']","['Testing', 'tests']"
Testability,"artarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:477 [inlined]; &nbsp; | [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [4] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:475 [inlined]; &nbsp; | [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [6] top-level scope at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:448; &nbsp; | Halo communication: Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | Expression: all(south_halo(field, include_corners = false) .== arch.connectivity.south); &nbsp; | Stacktrace:; &nbsp; | [1] test_triply_periodic_halo_communication_with_411_ranks(::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | [2] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:477 [inlined]; &nbsp; | [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [4] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:475 [inlined]; &nbsp; | [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [6] top-level scope at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:448; &nbsp; | Halo communication: Halo communication: Test Failed at Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distribu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802:1741,test,test,1741,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802,1,['test'],['test']
Testability,as mentioned on slack here's @jlk9 's Enzyme integration test PR https://github.com/CliMA/Oceananigans.jl/pull/3480. We should check that the tuple doesn't also break that (or try to find the correct mutually happy solution like maybe vararg type),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3477#issuecomment-1944736039:57,test,test,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3477#issuecomment-1944736039,1,['test'],['test']
Testability,"ask_immersed_field!(w)). fill_halo_regions!((c, u, v, w)). using Oceananigans.Advection: ; _advective_tracer_flux_x,; _advective_tracer_flux_y, ; _advective_tracer_flux_z,. atx = zeros(Nx, Ny, Nz); aty = zeros(Nx, Ny, Nz); atz = zeros(Nx, Ny, Nz). for i in 1:Nx, j in 1:Ny, k in 1:Nz; atx[i, j, k] = _advective_tracer_flux_x(i, j, k, ibg, model.advection.c, u, c); aty[i, j, k] = _advective_tracer_flux_y(i, j, k, ibg, model.advection.c, v, c); atz[i, j, k] = _advective_tracer_flux_z(i, j, k, ibg, model.advection.c, w, c); end; ```. This PR fixes this problem by ensuring that the stencil used by the reconstruction (whether it's left biased, right biased or symmetric) is always an `active` value. . In addition, bug aside, `WENO5` is currently limited to `CenteredSecondOrder` when it is not valid, which means that a diffusive scheme is switched to a dispersive scheme near the boundaries. Therefore, the stability of the simulation is limited by the (lower) stability of a dispersive scheme in up to 3 nodes near the boundary (which is not that few!). Since boundaries might handle the largest gradients (at least they do in ocean simulations), it means that it is necessary to artificially increase viscosity to ensure stability near the boundaries and the benefit of WENO is effectively cancelled. The same goes in small enough ""immersed"" lakes where WENO is not used at all. For this reason in this PR I introduced a WENO3 scheme such that when approaching boundaries (real and immersed) the reconstruction follows the rule:; `WENO5` (when possible) otherwise `WENO3` (when possible) otherwise `UpwindFirstOrder` (only in the first point near the boundary). The same goes with `UpwindBiasedFifthOrder` which limits to `UpwindBiasedThirdOrder` and then `UpwindBiasedFirstOrder`. In this way we do not switch between diffusive and dispersive schemes. This PR should be ready to test, so if you give it a go, it is also a nice way to ensure that stability is increased with this implementation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1156635454:4159,test,test,4159,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1156635454,1,['test'],['test']
Testability,"ate this? I think a code example would be helpful with an explanation on what's being accomplished. Also can you explain why this can't be implemented with a Callback (or forcing function)? I.e., why do we desire this as a source code feature? Just to be clear, I'm not saying it should be one way or another, but it's good to have explicit justification for source code features (which are expensive to maintain and require resources to test)!. No problem at all, [heres](https://gist.github.com/jagoosw/213d7f2ce3707768d4ddb07f8827cdd2) an example (not sure where best to put this/if you'd want it in the examples folder). This is about the simplest version I could think of where we have a particle randomly walking around converting tracer a into tracer b. The specific use case we've been using this for is modelling kelp fronds as particles which grow (variety of particle properties change) depending on how much nutrients the particles uptake from a biogeochemical model, and also release tracer back into the model. I also envisage using this to exert drag on the flow at some point. ![test](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif). Although I've had this working as custom dynamics of the particles the effect of the particles tendency can only be integrated with explicit Euler, i.e. at each substep it just does `tracer[i, j, k] += value*Δt`, where as this solution allows it to be properly integrated along with the other tendencies. I couldn't think of a way to implement this as a forcing function before, but perhaps I could use a callback to update an auxiliary field with the tendencies of the particles, and then add this as a forcing function, although I imagine that could use a lot more memory if there were a large grid and small amount of particles. (I fix the tests that's failed until we've discussed the other changes since its only failed because I forgot to change `getmask` to `get_mask` in the test script)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1238958939:1116,test,test,1116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1238958939,6,['test'],"['test', 'tests']"
Testability,"ation complete (546.689 μs); [2023/02/27 18:58:00.732] INFO Executing initial time step...; [2023/02/27 18:58:00.734] INFO ... initial time step complete (2.363 ms).; [2023/02/27 18:58:00.795] INFO Simulation is stopping after running for 61.833 ms.; [2023/02/27 18:58:00.795] INFO Model iteration 20 equals or exceeds stop iteration 20.; --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δu: min=-2.584649e-06, max=+1.597348e-06, mean=+3.118505e-09, absmean=+1.254639e-07, std=+3.731235e-07 (16384/16384 matching grid points); --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δv: min=-1.453306e-11, max=+1.436533e-11, mean=+4.659446e-15, absmean=+6.267764e-13, std=+1.805380e-12 (16512/16512 matching grid points); [2023/02/27 18:58:00.795] INFO Δh: min=-4.766880e-07, max=+4.767828e-07, mean=-9.313224e-10, absmean=+2.070016e-07, std=+2.552765e-07 (16384/16384 matching grid points); Test Summary: | Pass Total Time; Shallow Water Regression | 4 4 37.7s; Test.DefaultTestSet(""Shallow Water Regression"", Any[Test.DefaultTestSet(""Shallow Water Bickley jet simulation [CPU, VectorInvariantFormulation]"", Any[], 1, false, false, true, 1.677542243119075e9, 1.677542266680591e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]"", Any[], 1, false, false, true, 1.677542266680676e9, 1.677542280509984e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]"", Any[], 1, false, false, true, 1.677542280510052e9, 1.677542280644663e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]"", Any[], 1, false, false, true, 1.677542280644765e9, 1.677542280795948e9)], 0, false, false, true, 1.677542243118905e9, 1.677542280795951e9); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:6694,Test,Test,6694,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226,6,['Test'],['Test']
Testability,"ation: Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:365; &nbsp; | Expression: all(north_halo(field, include_corners = false) .== arch.connectivity.north); &nbsp; | Stacktrace:; &nbsp; | [1] test_triply_periodic_halo_communication_with_411_ranks(::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:365; &nbsp; | [2] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:477 [inlined]; &nbsp; | [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [4] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:475 [inlined]; &nbsp; | [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [6] top-level scope at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:448; &nbsp; | Halo communication: Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | Expression: all(south_halo(field, include_corners = false) .== arch.connectivity.south); &nbsp; | Stacktrace:; &nbsp; | [1] test_triply_periodic_halo_communication_with_411_ranks(::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | [2] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:477 [inlined]; &nbsp; | [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [4] macro expansion at /storage7/buildkite-agent/builds/tart",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802:1126,Test,Test,1126,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802,2,['Test'],['Test']
Testability,"ax=+1.063640e-09, mean=-3.441143e-13, absmean=+4.699188e-11, std=+1.347006e-10 (16508/16512 matching grid points); [2023/02/21 06:38:46.005] INFO Δh: min=-4.766520e-07, max=+4.757091e-07, mean=+1.373701e-08, absmean=+2.044884e-07, std=+2.513218e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:16852,test,test,16852,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['test'],['test']
Testability,"b/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [6] top-level scope at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:448; &nbsp; | Halo communication: Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | Expression: all(south_halo(field, include_corners = false) .== arch.connectivity.south); &nbsp; | Stacktrace:; &nbsp; | [1] test_triply_periodic_halo_communication_with_411_ranks(::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | [2] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:477 [inlined]; &nbsp; | [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [4] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:475 [inlined]; &nbsp; | [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [6] top-level scope at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:448; &nbsp; | Halo communication: Halo communication: Test Failed at Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:365; &nbsp; | /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:365; &nbsp; | Halo communication: Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:365; &nbsp; | Expression: Expression: all(north_halo(field, include_corners = all(north_halo(field, include_corners = false) .== arch.connectivity.north)false) .== arch.connectivity",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802:2166,test,test,2166,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802,1,['test'],['test']
Testability,"b25zL2FuaXNvdHJvcGljX2JpaGFybW9uaWNfZGlmZnVzaXZpdHkuamw=) | `82.60% <ø> (ø)` | |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [src/Fields/show\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zaG93X2ZpZWxkcy5qbA==) | `0.00% <0.00%> (ø)` | |; | [test/test\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3NvbHZlcnMuamw=) | | |; | [examples/internal\_wave.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvaW50ZXJuYWxfd2F2ZS5qbA==) | | |; | [test/test\_dynamics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2R5bmFtaWNzLmps) | | |; | [docs/citations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-ZG9jcy9jaXRhdGlvbnMuamw=) | | |; | [benchmark/benchmark\_forcing\_functions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mb3JjaW5nX2Z1bmN0aW9ucy5qbA==) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | [benchmark/benchmark\_ffts.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mZnRzLmps) | | |; | ... and [60 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911?src=pr&e",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/911#issuecomment-687049822:2239,benchmark,benchmark,2239,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/911#issuecomment-687049822,2,['benchmark'],['benchmark']
Testability,"background flow is through the bottom drag boundary condition. The docs preview hasn't updated yet, so I can't see the video, but I suspect removing `v` as a background creates oscillations. @glwagner have you checked? If not, let's wait for the video to see what happens... > * I reduced the domain aspect ratio to 400 x 100 because based on the visualization it seemed the domain didn't need to be so wide. This lets us increase the resolution and reduce the diffusivity, which is neat. It's a bit more turbulent now. Good move :+1: . > * Note using a tuple for `ĝ` rather than `Array` means it can be used as a parameter on the GPU, so that's probably preferred. Arrays are needed only if we need to mutate elements or perform linear algebra.; > * Don't import CUDA because the example wasn't GPU friendly anyways (if you like, we can make it GPU friendly but I don't think it should be ""partially"" GPU friendly since it just makes the code more complicated). I tried to make it 100% GPU friendly actually (although I didn't test it). You already pointed out one flaw, which is the use of an array instead of a tuple for the unit vertical vector. > * When I try to run the example multiple times I get `ERROR: LoadError: NetCDF error: Permission denied (NetCDF error code: 13)`. How can we avoid this error? I think it's important that users can easily change parameters and re-run without having to manually delete a file; this is key to productivity. This only happens with me when the NetCDF file is open by another program (generally python in my case) while Julia is trying to write to it. Was that the case? If so, that's the usual behavior afaik and I don't think we can do anything on our end except inform users about it. > * This is a great inexpensive example. I do wonder if we should make it 3D with an LES closure?. If we can get away with the computational cost I see no problem there. I just made this one 2D because it runs faster. > * Can we tilt the visualization? It's disorien",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2333#issuecomment-1065266138:1171,test,test,1171,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2333#issuecomment-1065266138,1,['test'],['test']
Testability,"before this PR (on `main`):. ```Julia; julia> using Oceananigans, BenchmarkTools; using Oceananigans.Grids: conformal_cubed_sphere_panel. julia> @btime grid = conformal_cubed_sphere_panel(GPU(), size=(64, 64, 2), z=(0, 1), halo=(4, 4, 2), topology=(FullyConnected, FullyConnected, Bounded));; 665.220 ms (4637448 allocations: 139.26 MiB); ```. after this PR:; ```Julia; julia> using Oceananigans, BenchmarkTools; using Oceananigans.Grids: conformal_cubed_sphere_panel. julia> @btime grid = conformal_cubed_sphere_panel(GPU(), size=(64, 64, 2), z=(0, 1), halo=(4, 4, 2), topology=(FullyConnected, FullyConnected, Bounded));; 193.087 ms (4329325 allocations: 133.34 MiB); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3579#issuecomment-2094075562:66,Benchmark,BenchmarkTools,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3579#issuecomment-2094075562,2,['Benchmark'],['BenchmarkTools']
Testability,"benchmarking sounds good!. but I thought this PR only made changes to the distributed grids, no?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1589351279:0,benchmark,benchmarking,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1589351279,1,['benchmark'],['benchmarking']
Testability,"blem at all, [heres](https://gist.github.com/jagoosw/213d7f2ce3707768d4ddb07f8827cdd2) an example (not sure where best to put this/if you'd want it in the examples folder). This is about the simplest version I could think of where we have a particle randomly walking around converting tracer a into tracer b. The specific use case we've been using this for is modelling kelp fronds as particles which grow (variety of particle properties change) depending on how much nutrients the particles uptake from a biogeochemical model, and also release tracer back into the model. I also envisage using this to exert drag on the flow at some point.; > ; > ![test](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif) [ ![test](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif) ](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif) [ ](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif); > ; > Although I've had this working as custom dynamics of the particles the effect of the particles tendency can only be integrated with explicit Euler, i.e. at each substep it just does `tracer[i, j, k] += value*Δt`, where as this solution allows it to be properly integrated along with the other tendencies. I couldn't think of a way to implement this as a forcing function before, but perhaps I could use a callback to update an auxiliary field with the tendencies of the particles, and then add this as a forcing function, although I imagine that could use a lot more memory if there were a large grid and small amount of particles.; > ; > (I fix the tests that's failed until we've discussed the other changes since its only failed because I forgot to change `getmask` to `get_mask` in the test script). Nice! Can you paste a more minimal example directly in this PR too so it's preserved here for the future?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1239608678:2222,test,tests,2222,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1239608678,4,['test'],"['test', 'tests']"
Testability,"bsmean=+2.044884e-07, std=+2.513218e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bf",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17061,test,test,17061,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['test'],['test']
Testability,"bsp; | in expression starting at /storage7/buildkite-agent/.julia-2556/packages/Plots/SjqWU/src/Plots.jl:20; &nbsp; | ERROR: LoadError: Failed to precompile Plots [91a5bcdd-55d7-5caf-9e0b-520d859cae80] to /storage7/buildkite-agent/.julia-2556/compiled/v1.5/Plots/ld3vC_R3lk8.ji.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-1/clima/oceananigans/docs/make.jl:6; &nbsp; | 🚨 Error: The command exited with status 1. ```. CPU test; ```; [8] test() at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:72; --; &nbsp; | [9] top-level scope at none:1; &nbsp; | Union{},Union{},Tuple{},NamedTuple{(test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; ERROR: failed process: Process(`/storage7/buildkite-agent/.julia-2556/artifacts/2fcd463fb9498f362be9d1c4ef70a63c920b0e96/bin/mpiexec -np 4 /storage7/buildkite-agent/julia-1.5.4/bin/julia -O0 --color=yes -e 'using Pkg; Pkg.test()'`, ProcessExited(1)) [1]; &nbsp; | &nbsp;; &nbsp; | Stacktrace:; &nbsp; | [1] pipeline_error at ./process.jl:525 [inlined]; &nbsp; | [2] run(::Cmd; wait::Bool) at ./process.jl:440; &nbsp; | [3] run(::Cmd) at process.jl:438; &nbsp; | [4] (::var""#1#2"")(::Cmd) at none:4; &nbsp; | [5] (::MPI.var""#8#9""{var""#1#2""})(::String) at /storage7/buildkite-agent/.julia-2556/packages/MPI/b7MVG/src/environment.jl:25; &nbsp; | [6] (::MPICH_jll.var""#8#9""{MPI.var""#8#9""{var""#1#2""}})() at /storage7/buildkite-agent/.julia-2556/packages/MPICH_jll/ekpo2/src/wrappers/x86_64-linux-gnu-libgfortran4.jl:79; &nbsp; | [7] withenv(::MPICH_jll.var""#8#9""{MPI.var""#8#9""{var""#1#2""}}, ::Pair{String,String}, ::Vararg{Pair{String,String},N} where N) at env.jl:161; &nbsp; | [8] mpiexec(::MPI.var""#8#9""{var""#1#2""}; adjust_PATH::Bool, adjust_LIBPATH::Bool) at /storage7/buildkite-agent/.julia-2556/packages/MPICH_jll/ekpo2/src/wrappers/x86_64-linux-gnu-libgfortran4.jl:78; &nbsp; | [9] mpiexec(::Function) at /storage7/buildkite-agent/.julia-2556/packages/MPICH_jll/ekpo2/src/wr",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842643141:1872,test,test,1872,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842643141,1,['test'],['test']
Testability,"btw, the new test seem to fail?; https://buildkite.com/clima/oceananigans/builds/14443#018da99b-3a02-41a5-9663-3522fb224813/16-409",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1946034307:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1946034307,1,['test'],['test']
Testability,"bumping this up. I'd like to remove the generic `CUDA.allowscalar()` from tests!. cc @glwagner, @simone-silvestri, @siddharthabishnu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3039#issuecomment-2036478119:74,test,tests,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3039#issuecomment-2036478119,1,['test'],['tests']
Testability,"c[1:3]); BinaryOperation at (Center, Center, Center); ├── grid: 200×200×200 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; └── tree: ; + at (Center, Center, Center); ├── + at (Center, Center, Center); │ ├── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU; │ └── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU; └── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU. julia> fbo = c[1] + c[2] + c[3]; MultiaryOperation at (Center, Center, Center); ├── grid: 200×200×200 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; └── tree: ; + at (Center, Center, Center); ├── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU; ├── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU; └── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU; ```. To check that the interpolation into the benchmark wasn't important I also tried benchmarking a kernel that fills an array with the sum and got these results:; ```julia; julia> @btime launch!(grid.architecture, grid, :xyz, _fill_with_sum!, $(A), $(sof)); 20.066 ms (21 allocations: 15.66 KiB). julia> @btime launch!(grid.architecture, grid, :xyz, _fill_with_sum!, $(A), $(bo)); 20.174 ms (21 allocations: 19.27 KiB). julia> @btime launch!(grid.architecture, grid, :xyz, _fill_with_sum!, $(A), $(fbo)); 1.286 s (21 allocations: 15.66 KiB). julia> @btime launch!(grid.architecture, grid, :xyz, _fill_with_sum!, $(A), $(fbo)); 1.269 s (21 allocations: 15.66 KiB). julia> @btime launch!(grid.architecture, grid, :xyz, _fill_with_sum!, A, sof); 20.074 ms (20 allocations: 13.67 KiB). julia> @btime launch!(grid.architecture, grid, :xyz, _fill_with_sum!, A, bo); 20.167 ms (20 allocations: 16.77 KiB). julia> @btime launch!(grid.architecture, grid, :xyz, _fill_with_sum!, A, fbo); 1.289 s (20 allocations: 13.67 KiB); ```. So in conclusion `SumOfFields` isn't needed (but that is a weird result with `fbo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3676#issuecomment-2269534173:2025,benchmark,benchmark,2025,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3676#issuecomment-2269534173,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,"cale of the noise; σz = .5grid.Δzᵃᵃᶜ # z length scale of the noise. N = 2^8 # How many Gaussians do we want sprinkled throughout the domain?; x₀ = grid.Lx * rand(N); z₀ = grid.Lz * rand(N) # Locations of the Gaussians. xₚ = x₀ .+ (grid.Lx .* [-2;;-1;;0;;1;;2]) # Make that noise periodic by ""infinite"" horizontal reflection; zₚ = reshape(repeat(z₀, 5), size(xₚ)) # Vertical direction isn't periodic, so we just need to repeat and reshape things . resolved_noise(x, y, z) = sum(@. 1e-6 * exp(-(x-xₚ)^2/σx^2 -(z-zₚ)^2/σz^2)). constant_stratification(x, y, z) = 1e-5 * z; set!(model, u=resolved_noise, b=constant_stratification). u, v, w = model.velocities. simulation = Simulation(model, Δt=20.0, stop_iteration=1e4); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(100)). e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). using GLMakie; fig = Figure(resolution=(900, 450)). axw = Axis(fig[1, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[1, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[1, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[2, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). n = Observable(1). wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462391476:1531,test,test,1531,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462391476,1,['test'],['test']
Testability,can we put `validation/implicit_free_surface/implicit_surface_solvers_benchmark.jl` in the benchmark folder?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1241930690:91,benchmark,benchmark,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1241930690,1,['benchmark'],['benchmark']
Testability,"cations: 23.79 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 500.601 ms (111291 allocations: 276.81 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 320.139 ms (48245 allocations: 269.93 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 14.721 ms (36840 allocations: 12.11 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 23.795 ms (40688 allocations: 12.18 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 17.219 ms (38055 allocations: 12.14 MiB); ```. ## This PR. ```julia; julia> include(""benchmark_two_dimensional_models.jl""); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 104.521 ms (77858 allocations: 25.03 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 235.623 ms (120254 allocations: 26.49 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 137.914 ms (72488 allocations: 19.41 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 14.675 ms (37239 allocations: 11.65 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 22.468 ms (41731 allocations: 11.71 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 14.661 ms (37308 allocations: 11.65 MiB); ```. This PR makes substantial improvements on the C",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2035#issuecomment-961064605:1312,Benchmark,Benchmarking,1312,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2035#issuecomment-961064605,1,['Benchmark'],['Benchmarking']
Testability,"ceananigans errored during testing; &nbsp; | Stacktrace:; &nbsp; | [1] pkgerrorPackage Oceananigans errored during testing; &nbsp; | Stacktrace:; &nbsp; | [1] (pkgerror; &nbsp; | [1] (pkgerror::(; &nbsp; | [1] ::pkgerrorString) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] (::test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1578; &nbsp; | [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] (),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:327; &nbsp; | [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:314; &nbsp; | [5] #test#61 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:67 [inlined]; &nbsp; | [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:67 [inlined]; &nbsp; | [7] test(; name::Nothing, uuid::Nothing, version::Nothing, url::Nothing, rev::Nothing, path::Nothing, mode::Pkg.Types.PackageMode, subdir::Nothing, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:80; &nbsp; | [8] test() at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:72; &nbsp; | [9] top-level scope at none:1; &nbsp; | ::test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; String) at /buildworker/worker/package_linux64/b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081:3517,test,test,3517,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081,1,['test'],['test']
Testability,"ck. 1. **are you running on multiple GPUs?** ; There is some obscure foo for that here ( https://github.com/christophernhill/ImplicitGlobalGrid.jl/blob/5e4fd0698b7087467d9314bfa253d6bc9a09a40a/diffusion3D_multigpu_CuArrays_novis.jl#L21 ) that is not in Oceananigans or ImplicitGlobal as downloaded. Its not really particularly documented anywhere either (except in a blog post for this https://github.com/NVIDIA-developer-blog/code-samples/blob/master/posts/cuda-aware-mpi-example/src/CUDA_Aware_MPI.c as far as I can tell)! Without this bit you may end up running all ranks on the same GPU. The blog post here https://developer.nvidia.com/blog/benchmarking-cuda-aware-mpi/ gives a bit of background. . 2. **is there anything else running on the node when you test?** ; When I looked earlier in the week satori had become annoyingly busy. You need to request an exclusive node - and then wait unfortunately because of every else using. If you skip asking for exclusive you may end up sharing node - which is OK for getting work done, but confusing for benchmarking. . 3. **as @vchuravy mentions you may or may not be using messaging that goes direct GPU to GPU?** ; There is an issue with recent CUDA.jl that makes that hard (possibly not even possible). We are working to resolve that. @vchuravy has a suggested fix, but I found that caused other problems. The ImplicitGlobal team found @vchuravy fix to work, but with a very recent version of CUDA.jl where I think it isn't supposed to work - so they may have been mistaken. I was planning to look at this a bit more after having coffee with a Nvidia colleague who is involved in all this tomorrow. . The ImplciitGlobalGris stuff should get reasonable behavior with the `selectDevices()` addition - but I think Oceananigans.jl may have some other problem too, related to passing @view indexing of arrays directly into the MPI calls. So good results for Oceananigans may require some other work too - which @glwagner is looking at. . Lots of details",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885334231:1325,benchmark,benchmarking,1325,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885334231,1,['benchmark'],['benchmarking']
Testability,"compressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Incompressible model CPU to GPU speedup""); benchmark/strong_scaling_incompressible_model.jl: @info ""Benchmarking distributed incompressible model strong scaling with $(typeof(decomposition)) decomposition [N=($Nx, $Ny, $Nz), ranks=($Rx, $Ry, $Rz)]...""; benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model strong scaling benchmark""); benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; benchmark/strong_scaling_incompressible_model_single.jl:@info ""Warming up distributed incompressible model on rank $local_rank...""; benchmark/strong_scaling_incompressible_model_single.jl:@info ""Benchmarking distributed incompressible model on rank $local_rank...""; docs/src/physics/incompressible_model.md:# Incompressible model; docs/src/numerical_implementation/time_stepping.md:where, e.g., for the incompressible model, ; docs/make.jl: ""Incompressible model"" => ""physics/incompressible_model.md"",; src/Distributed/distributed_incompressible_model.jl:##### Distributed incompressible model",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326:1511,benchmark,benchmarks,1511,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,cov.io/gh/CliMA/Oceananigans.jl/commit/b444acfe7d0c038d83fbcf50e72aaf2a747599fd?el=desc) will **decrease** coverage by `3.08%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #966 +/- ##; ==========================================; - Coverage 72.17% 69.08% -3.09% ; ==========================================; Files 205 143 -62 ; Lines 5994 3047 -2947 ; ==========================================; - Hits 4326 2105 -2221 ; + Misses 1668 942 -726 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [test/test\_forcings.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZvcmNpbmdzLmps) | | |; | [docs/bibliography.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-ZG9jcy9iaWJsaW9ncmFwaHkuamw=) | | |; | [...nceTests/OneDimensionalCosineAdvectionDiffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvT25lRGltZW5zaW9uYWxDb3NpbmVBZHZlY3Rpb25EaWZmdXNpb24uamw=) | | |; | [benchmark/benchmark\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | | |; | [test/test\_buoyancy.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2J1b3lhbmN5Lmps) | | |; | [test/test\_time\_stepping\_bcs.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmdf,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/966#issuecomment-696645202:1203,test,test,1203,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/966#issuecomment-696645202,2,['test'],['test']
Testability,"cov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/7f957d7762b61ee4e51b360944428d5b660d50bf&el=desc) will **increase** coverage by `0.04%`.; > The diff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #772 +/- ##; ==========================================; + Coverage 77.65% 77.70% +0.04% ; ==========================================; Files 165 165 ; Lines 4404 4413 +9 ; ==========================================; + Hits 3420 3429 +9 ; Misses 984 984 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Forcing/simple\_forcing.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvc2ltcGxlX2ZvcmNpbmcuamw=) | `100.00% <ø> (ø)` | |; | [src/Forcing/model\_forcing.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvbW9kZWxfZm9yY2luZy5qbA==) | `84.61% <100.00%> (+4.61%)` | :arrow_up: |; | [test/test\_forcings.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZvcmNpbmdzLmps) | `100.00% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=footer). Last update [7f957d7...c19f69c](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/772#issuecomment-641394370:1381,test,test,1381,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/772#issuecomment-641394370,2,['test'],['test']
Testability,"d = Int.(Ny/2-40:Ny/2+40); bottom[bound, bound] .= 0.5. grid = ImmersedBoundaryGrid(grid, GridFittedBottom(bottom)); mrg = MultiRegionGrid(grid, partition=XPartition(2), devices = 2); ```; and ; ```; u(x, y, z) = (x * z) / 10; ```. (with `ImplicitFreeSurface`) we get. #### Strong Scaling; | Grid size | Grid | GPUs | wall time | efficiency |; | -- | -- | -- | -- | -- |; | `1440×600×48`| `RectilinearGrid` | 1 | 1.85 minutes | 100% |; | `1440×600×48`| `MultiRegionGrid` | 2 | 1.12 minutes | 82.5% |. Scaling gets better?? at this point I a little confused...; Bottomline... ; there is still a bunch of optimization and more systematic benchmarking to be done, I'll merge this PR and then we can think about improving the scaling, the first things that come in mind are; - Ensure that all the `apply_regionally!` and `construct_regionally` calls are asynchronous. This might not be the case if there are memory copies inside function calls. That would serialize the execution of part of the code. To ensure this we require a more in-depth profiling using ***nsys***; - remove all `fill_halo_regions!` that are not `Periodic` or `Communication` which will allow asynchronous execution of halo filling across different direction (luckily already being done in #2477); - Bundle together the halo passing in a single boundary buffer to allow sending field tuples together (depends on #2509). Additional work to do on `MultiRegion` is ; - Perform more systematic benchmarking; - Design correct `OutputWriters` and `OutputReaders` for `MultiRegionFields`. Maybe not immediate priorities but definitely important; - Adapt `RungeKutta3` to `Multiregion` through `@apply_regionally`; - Implement a multi-region version of the Nonhydrostatic pressure solver; - Overlap computation and communication (for this we require _non-blocking_ `fill_halo_regions!` with returning `events`); - Optimize the distributed implicit solver (maybe using `PETSc.jl`? Might not be needed when the implicit solve fits in one GPU)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116853178:1636,benchmark,benchmarking,1636,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116853178,1,['benchmark'],['benchmarking']
Testability,"d, apparently, `Σ² = S_ij S_ij` (if we believe we understand the notation here):. https://github.com/CliMA/Oceananigans.jl/blob/32c5c5a2d0f441a4b663866d511807d0f9413c90/src/TurbulenceClosures/turbulence_closure_implementations/smagorinsky_lilly.jl#L97. This means that our formula is identical to Pressel et al (2015), but the constant is wrong: Pressel proposes `Cs=0.17`, and we have a default of `Cs=0.23`:. https://github.com/CliMA/Oceananigans.jl/blob/32c5c5a2d0f441a4b663866d511807d0f9413c90/src/TurbulenceClosures/turbulence_closure_implementations/smagorinsky_lilly.jl#L63-L64. Amusingly, . ```julia; julia> 0.165 * sqrt(2); 0.23334523779156072; ```. which is probably not a coincidence. However, I'm not sure how an extra factor of `sqrt(2)` snuck into our constant. As for _clarification_, I don't have much to offer. Perhaps the constant was taken from some reference that used a different formulation than either us or Pressel et al. 2015. Nobody has submitted a validation test for this closure so I don't think we know how it performs. As a historical note, the paper cited by both Pressel et al (2015) and us is Lilly (1962), which does indeed use the same formulation:. ![image](https://user-images.githubusercontent.com/15271942/127507507-c7d11dfc-733a-4472-8216-dca4e5844b3f.png). where. ![image](https://user-images.githubusercontent.com/15271942/127507737-94aa05d4-6fa5-4d38-9a9d-b1bbcc8a1e79.png). @tomchor I can't tell if the formula you've pasted is actually different from ours (or what the definition of `|S|` is). Where does it come from?. It'd be fine to change the constant because there's no validation test. So the best we can do is theorize, and theorization on this issue suggests changing the default to `C=0.17`. If one wanted to set up a validation test, it could be nice to reproduce [Compte-Bellot and Corrsin (1964)](https://www.cambridge.org/core/journals/journal-of-fluid-mechanics/article/abs/simple-eulerian-time-correlation-of-fulland-narrowband-velocity-si",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1907#issuecomment-889189927:2080,test,test,2080,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1907#issuecomment-889189927,2,['test'],['test']
Testability,"d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates; [b77e0a4c] InteractiveUtils; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [44cfe95a] Pkg; [de0858da] Printf; [9a3f8284] Random; [2f01184e] SparseArrays; [10745b16] Statistics. julia> versioninfo(); Julia Version 1.6.7; Commit 3b76b25b64* (2022-07-19 15:11 UTC); Platform Info:; OS: Linux (x86_64-redhat-linux); CPU: Intel(R) Xeon(R) Platinum 8268 CPU @ 2.90GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; JULIA_DEPOT_PATH = /g/data/v45/nc3020/.julia:/share/julia/site/; JULIA_CUDA_USE_BINARYBUILDER = false; JULIA_LOAD_PATH = @:@v#.#:@stdlib:@site; JULIA_NUM_THREADS = 48. shell> nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Tue Feb 21 07:30:33 2023; Driver Version : 525.60.13; CUDA Version : 12.0. Attached GPUs : 1; GPU 00000000:3D:00.0; Product Name : Tesla V100-SXM2-32GB; Product Brand : Tesla; Product Architecture : Volta; Display Mode : Enabled; Display Active : Disabled; Persistence Mode : Enabled; MIG Mode; Current : N/A; Pending : N/A; Accounting Mode : Disabled; Accounting Mode Buffer Size : 4000; Driver Model; Current : N/A; Pending : N/A; Serial Number : 1562019007305; GPU UUID : GPU-afa33ac3-cef0-ac1a-9dfd-491463f321e9; Minor Number : 0; VBIOS Version : 88.00.80.00.01; MultiGPU Board : No; Board ID : 0x3d00; Board Part Number : 900-2G503-0010-000; GPU Part Number : 1DB5-896-A1; Module ID : 0; Inforom Version; Image Version : G503.0203.00.05; OEM Object : 1.1; ECC Object : 5.0; Power Management Object : N/A; GPU Operation Mode; Current : N/A; Pending : N/A; GSP Firmware Version : N/A; GPU Virtualization Mode; Virtualization Mode : None; Host VGPU Mode : N/A; IBMNP",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:19046,LOG,LOG,19046,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['LOG'],['LOG']
Testability,"decov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915?src=pr&el=h1) Report; > Merging [#915](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/6d349e1d85d61ff997f249881cd58232de865996?el=desc) will **increase** coverage by `0.07%`.; > The diff coverage is `96.07%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #915 +/- ##; ==========================================; + Coverage 72.60% 72.67% +0.07% ; ==========================================; Files 191 191 ; Lines 5610 5622 +12 ; ==========================================; + Hits 4073 4086 +13 ; + Misses 1537 1536 -1 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `77.63% <91.66%> (-0.15%)` | :arrow_down: |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `93.62% <100.00%> (+0.31%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915?src=pr&el=footer). Last update [6d349e1...22e9b04](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/915#issuecomment-687316456:1240,test,test,1240,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/915#issuecomment-687316456,2,['test'],['test']
Testability,"del(; grid,; timestepper = :RungeKutta3,; tracers = (:c1, :c2),; forcing = (c1=c1_forcing, c2=c2_forcing)). Nx, Ny, Nz = size(grid); xs, ys, zs = nodes(model.tracers.c1). c̄1(z, t) = 1 / (Nx * Ny) * sum(exp(-λ1(x, y, z) * t) for x in xs for y in ys); c̄2(z, t) = 1 / (Nx * Ny) * sum(exp(-λ2(x, y, z) * t) for x in xs for y in ys). rtol = 1e-5 # need custom rtol for isapprox because roundoff errors accumulate (?). # Compute time averages...; c̄1(ts) = 1/length(ts) * sum(c̄1.(zs, t) for t in ts); c̄2(ts) = 1/length(ts) * sum(c̄2.(zs, t) for t in ts). #####; ##### Test strided windowed time average against analytic solution; ##### for *single* NetCDF output; #####; single_time_average_nc_filepath = ""single_decay_windowed_time_average_test.nc""; single_ds = NCDataset(single_time_average_nc_filepath). attribute_names = (""schedule"", ""interval"", ""output time interval"",; ""time_averaging_window"", ""time averaging window"",; ""time_averaging_stride"", ""time averaging stride""). for name in attribute_names; @test haskey(single_ds.attrib, name) && !isnothing(single_ds.attrib[name]); end. window_size = window_nΔt; window = window_size*Δt. time = single_ds[""time""][:]; data_plot = single_ds[""c1""][1:4, :]; c̄1_timeaverage = zeros(4,length(time[1:end])); for (n, t) in enumerate(time[1:end]); averaging_times = [t - n*Δt for n in 0:stride:window_size-1 if t - n*Δt >= 0]; # @info n,t,averaging_times, c̄1(averaging_times); c̄1_timeaverage[:,n] = c̄1(averaging_times); # @test all(isapprox.(single_ds[""c1""][:, n+1], c̄1(averaging_times), rtol=rtol)); end. # Plot each of the four lines; pl = plot(); plot!(time, data_plot[1, :], label=""1"", color=:blue, legend=:topright); plot!(time, data_plot[2, :], label=""2"", color=:red); plot!(time, data_plot[3, :], label=""3"", color=:orange); plot!(time, data_plot[4, :], label=""4"", color=:green). plot!(time[1:end],c̄1_timeaverage[1,:], color=:black, linestyle=:dash, label=""1-analytic""); plot!(time[1:end],c̄1_timeaverage[2,:], color=:black, linestyle=:dash, label=""2",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2380652629:5723,test,test,5723,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2380652629,2,['test'],['test']
Testability,"del.jl:benchmarks_pretty_table(df, title=""Incompressible model benchmarks""); > benchmark/benchmark_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Incompressible model CPU to GPU speedup""); > benchmark/strong_scaling_incompressible_model.jl: @info ""Benchmarking distributed incompressible model strong scaling with $(typeof(decomposition)) decomposition [N=($Nx, $Ny, $Nz), ranks=($Rx, $Ry, $Rz)]...""; > benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model strong scaling benchmark""); > benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); > benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; > benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); > benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Warming up distributed incompressible model on rank $local_rank...""; > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Benchmarking distributed incompressible model on rank $local_rank...""; > docs/src/physics/incompressible_model.md:# Incompressible model; > docs/src/numerical_implementation/time_stepping.md:where, e.g., for the incompressible model, ; > docs/make.jl: ""Incompressible model"" => """,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932:1397,benchmark,benchmark,1397,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932,1,['benchmark'],['benchmark']
Testability,"did you use the test environment or Oceananigans's enviroment? On Tartarus, branch main in the test environment does this. ```; Precompiling project...; 1 dependency successfully precompiled in 38 seconds. 218 already precompiled.; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; [2023/02/14 16:22:39.804] INFO Running shallow water regression tests...; [2023/02/14 16:22:40.097] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/14 16:23:08.854] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/ssilvest/stable_oceananigans/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; [2023/02/14 16:24:01.792] INFO Initializing simulation...; [2023/02/14 16:24:08.481] INFO ... simulation initialization complete (6.689 seconds); [2023/02/14 16:24:08.481] INFO Executing initial time step...; [2023/02/14 16:24:43.227] INFO ... initial time step complete (34.746 seconds).; [2023/02/14 16:24:43.387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvar",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637,6,"['Test', 'test']","['Testing', 'test', 'tests']"
Testability,diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9Cb3VuZGFyeUNvbmRpdGlvbnMuamw=) | `100.00% <ø> (ø)` | |; | [src/BoundaryConditions/boundary\_function.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/894/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9ib3VuZGFyeV9mdW5jdGlvbi5qbA==) | `57.14% <ø> (-28.58%)` | :arrow_down: |; | [src/BoundaryConditions/show\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/894/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9zaG93X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `0.00% <0.00%> (ø)` | |; | [test/test\_time\_stepping\_bcs.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/894/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmdfYmNzLmps) | `98.46% <ø> (ø)` | |; | [src/BoundaryConditions/boundary\_condition.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/894/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9ib3VuZGFyeV9jb25kaXRpb24uamw=) | `72.72% <78.57%> (+16.47%)` | :arrow_up: |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/894/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `97.86% <90.69%> (+6.95%)` | :arrow_up: |; | [...rc/BoundaryConditions/field\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/894/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9maWVsZF9ib3VuZGFyeV9jb25kaXRpb25zLmps) | `90.00% <93.33%> (+6.00%)` | :arrow_up: |; | [...daryConditions/parameterized\_boundary\_condition.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/894/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9wYXJhbWV0ZXJpemVkX2JvdW5kYXJ5X2NvbmRpdGlvbi5qbA==) | `100.00% <100.00%> (ø)` | |; | ... and [13 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/894/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/894?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.i,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/894#issuecomment-685006190:2504,test,test,2504,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/894#issuecomment-685006190,2,['test'],['test']
Testability,"diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2NvcmlvbGlzLmps) | | |; | [examples/internal\_wave.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvaW50ZXJuYWxfd2F2ZS5qbA==) | | |; | [examples/ocean\_wind\_mixing\_and\_convection.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb2NlYW5fd2luZF9taXhpbmdfYW5kX2NvbnZlY3Rpb24uamw=) | | |; | [...erification/lid\_driven\_cavity/lid\_driven\_cavity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2xpZF9kcml2ZW5fY2F2aXR5L2xpZF9kcml2ZW5fY2F2aXR5Lmps) | | |; | [test/test\_surface\_waves.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3N1cmZhY2Vfd2F2ZXMuamw=) | | |; | [test/test\_examples.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2V4YW1wbGVzLmps) | | |; | [...regression\_tests/thermal\_bubble\_regression\_test.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC9yZWdyZXNzaW9uX3Rlc3RzL3RoZXJtYWxfYnViYmxlX3JlZ3Jlc3Npb25fdGVzdC5qbA==) | | |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | | |; | ... and [58 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017?src=pr&el=footer). Last update [ee14f8a...1b1dbba](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1017#issuecomment-701768991:2604,test,test,2604,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1017#issuecomment-701768991,2,['test'],['test']
Testability,"disregard the clipping of TKE to zero, it is just a stability test. In general this branch will remain a experimental for a little bit",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3453#issuecomment-1924161147:62,test,test,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3453#issuecomment-1924161147,1,['test'],['test']
Testability,"dius: 3px; min-height: 85px; color: white; font-size: 12px; padding: 0px 0px 15px; width: 1108px;""><div class=""JobLogOutputComponent__Body"" style=""box-sizing: border-box; font-family: SFMono-Regular, Monaco, Menlo, Consolas, &quot;Liberation Mono&quot;, Courier, monospace;"">. $ trap 'kill -- $' INT TERM QUIT; wget -N -P /storage7/buildkite-agent https://julialang-s3.julialang.org/bin/linux/x64/1.6/julia-1.6.1-linux-x86_64.tar.gz.   | tar xf /storage7/buildkite-agent/julia-1.6.1-linux-x86_64.tar.gz -C /storage7/buildkite-agent;   | /storage7/buildkite-agent/julia-1.6.1/bin/julia -O0 --color=yes --project -e 'using Pkg; Pkg.instantiate(; verbose=true)';   | /storage7/buildkite-agent/julia-1.6.1/bin/julia -O0 --color=yes --project -e 'using Pkg; Pkg.precompile()';   | /storage7/buildkite-agent/julia-1.6.1/bin/julia -O0 --color=yes --project -e 'using Pkg; Pkg.status()';   | /storage7/buildkite-agent/julia-1.6.1/bin/julia -O0 --color=yes --project -e 'using Pkg; Pkg.test()';   | /storage7/buildkite-agent/julia-1.6.1/bin/julia -O0 --color=yes --project -e 'using MPI; MPI.install_mpiexecjl()';   | --2021-07-31 21:29:43-- https://julialang-s3.julialang.org/bin/linux/x64/1.6/julia-1.6.1-linux-x86_64.tar.gz;   | Resolving julialang-s3.julialang.org (julialang-s3.julialang.org)... 199.232.38.49, 2a04:4e42:46::561;   | Connecting to julialang-s3.julialang.org (julialang-s3.julialang.org)\|199.232.38.49\|:443... connected.;   | HTTP request sent, awaiting response... 304 Not Modified;   | File ‘/storage7/buildkite-agent/julia-1.6.1-linux-x86_64.tar.gz’ not modified on server. Omitting download.;   |  ;   | Downloading artifact: MPICH;   | Downloading artifact: MPICH;   | ERROR: Unable to automatically install 'MPICH' from '/storage7/buildkite-agent/.julia-3575/packages/MPICH_jll/6N1Sn/Artifacts.toml';   | Stacktrace:;   | [1] error(s::String);   | @ Base ./error.jl:33;   | [2] ensure_artifact_installed(name::String, meta::Dict{String, Any}, artifacts_toml::String; platform::Base",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1915#issuecomment-890429515:1641,test,test,1641,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1915#issuecomment-890429515,1,['test'],['test']
Testability,"do with the pressure solve. Could someone point me to an example that does this?; ________________________________; From: Francis Poulin ***@***.***>; Sent: Wednesday, April 7, 2021 7:43:11 PM; To: CliMA/Oceananigans.jl ***@***.***>; CliMA/Oceananigans.jl ***@***.***>; Cc: Mention ***@***.***>; Subject: Re: [CliMA/Oceananigans.jl] strange results on gpus (#1554). Very good point. The background buoyancy does not satisfy the boundary conditions that are imposed. I will check it out later. If this is the case, then it is still mysterious why GPUs have a harder time with this than CPUs, but we will see and learn. Thanks for the suggestion. Francis; ________________________________; From: Gregory L. Wagner ***@***.***>; Sent: Wednesday, April 7, 2021 5:44:23 PM; To: CliMA/Oceananigans.jl ***@***.***>; Cc: Francis Poulin ***@***.***>; Mention ***@***.***>; Subject: Re: [CliMA/Oceananigans.jl] strange results on gpus (#1554). The second time-step is when QuasiAdamsBashforth2 uses tendency information saved from the previous time-step. On the first time-step it's equivalent to a forward Euler scheme. I know the differences are small, 8th decimal place or so, but on such a coarse grid should we be expecting the same answers?. Hardware differences can produce results that differ by something like sqrt(eps(Float64)) I think. This is the tolerance we use for regression tests (but even those sometimes fail to pass on the GPU for some reason). Since the background buoyancy field has a linear gradient and your domain is bounded, can you try running the same simulation but explicitly resolving the background buoyancy field? (This could suggest that the issue has to do with BackgroundField...). -; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815284094>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AB63PQICFGOXKMU4HFN3NOLTHTG3PANCNFSM42RDHB2Q>.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815368840:1561,test,tests,1561,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815368840,2,['test'],['tests']
Testability,"don't use workers: 1h48, [log](https://buildkite.com/clima/oceananigans/builds/11732#0188b342-279d-4a32-a4fd-74b7954b87bb); `Distributed.addprocs(1)`: 1h41, [log](https://buildkite.com/clima/oceananigans/builds/11733#0188b423-8248-477c-8203-8f596f8836b9); `Distributed.addprocs(2)`: 1h33m, [log](https://buildkite.com/clima/oceananigans/builds/11735#0188b4b0-cdc5-4cb6-a224-785ad7268b20); `Distributed.addprocs(3)`: 1h15m, [log](https://buildkite.com/clima/oceananigans/builds/11740#0188b6be-995d-40cf-9408-df7fb78eb5d9); `Distributed.addprocs(4)`: 1h0m, [log](https://buildkite.com/clima/oceananigans/builds/11742#0188b82c-6142-4f90-acf8-dd29f0d2b543); `Distributed.addprocs(6)`: 1h [log](https://buildkite.com/clima/oceananigans/builds/11743#0188b8be-45bf-4124-a6dc-659fe891bc81)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1589191799:26,log,log,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1589191799,6,['log'],['log']
Testability,"drv/synchronization.jl:194 [inlined]; │ [4] (::CUDA.var""#1125#1126""{Float64, CUDA.CuArray{Float64, 1, CUDA.DeviceMemory}, Int64, Vector{Float64}, Int64, Int64})(); │ @ CUDA ~/.julia/packages/CUDA/2kjXI/src/array.jl:535; │ [5] #context!#990; │ @ ~/.julia/packages/CUDA/2kjXI/lib/cudadrv/state.jl:168 [inlined]; │ [6] context!; │ @ ~/.julia/packages/CUDA/2kjXI/lib/cudadrv/state.jl:163 [inlined]; │ [7] unsafe_copyto!(dest::CUDA.CuArray{Float64, 1, CUDA.DeviceMemory}, doffs::Int64, src::Vector{Float64}, soffs::Int64, n::Int64); │ @ CUDA ~/.julia/packages/CUDA/2kjXI/src/array.jl:531; │ [8] copyto!; │ @ ~/.julia/packages/CUDA/2kjXI/src/array.jl:489 [inlined]; │ [9] copyto!; │ @ ~/.julia/packages/CUDA/2kjXI/src/array.jl:493 [inlined]; │ [10] CuArray; │ @ ~/.julia/packages/CUDA/2kjXI/src/array.jl:406 [inlined]; │ [11] CuArray; │ @ ~/.julia/packages/CUDA/2kjXI/src/array.jl:410 [inlined]; │ [12] CuArray; │ @ ~/.julia/packages/CUDA/2kjXI/src/array.jl:419 [inlined]; │ [13] macro expansion; │ @ ./logging.jl:372 [inlined]; │ [14] compute_diffusivities!(diffusivities::@NamedTuple{κu::Field{Center, Center, Face, Nothing, LatitudeLongitudeGrid{Float32, Bounded, Bounded, Bounded, OffsetArrays.OffsetVector{Float32, CUDA.CuArray{Float32, 1, CUDA.DeviceMemory}}, Float32, Float32, Float32, Float32, OffsetArrays.OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64, Int64}}, OffsetArrays.OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64, Int64}}, OffsetArrays.OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64, Int64}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float32, 3, CUDA.CuArray{Float32, 3, CUDA.DeviceMemory}}, Float32, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, Nothing, BoundaryCondition{Oce",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3870#issuecomment-2441915837:2608,log,logging,2608,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3870#issuecomment-2441915837,1,['log'],['logging']
Testability,"ds; [ Info: Computing wτ6_yavg done: time=3.018 seconds; [ Info: Computing wτ1 done: time=225.326 ms; [ Info: Computing wτ5_yavg done: time=2.950 seconds; [ Info: Computing wτ6 done: time=292.708 μs; [ Info: Computing wτ2 done: time=192.674 ms; [ Info: Computing wτ5 done: time=190.263 ms; [ Info: Computing wτ4 done: time=193.185 ms; [ Info: Computing wτ1_yavg done: time=1.210 seconds; [ Info: Computing wτ4_yavg done: time=2.954 seconds; [ Info: Computing wτ3_yavg done: time=2.953 seconds; [ Info: Writing done: time=17.732 seconds, size=19.5 KiB, Δsize=0.0 B; [ Info: ... simulation initialization complete (18.528 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (30.965 seconds).; [ Info: Simulation is stopping after running for 49.565 seconds.; [ Info: Model iteration 4 equals or exceeds stop iteration 4.; ```. and then . ```Julia; julia> using NCDatasets. julia> ds = NCDataset(simulation.output_writers[:xz1_writer].filepath, ""r""); NCDataset: ./test.nc; Group: /. Dimensions; zC = 16; zF = 17; xC = 16; yF = 1; xF = 16; yC = 1; time = 1. Variables; zC (16); Datatype: Float64; Dimensions: zC; Attributes:; units = m; longname = Locations of the cell centers in the z-direction. zF (17); Datatype: Float64; Dimensions: zF; Attributes:; units = m; longname = Locations of the cell faces in the z-direction. xC (16); Datatype: Float64; Dimensions: xC; Attributes:; units = m; longname = Locations of the cell centers in the x-direction. yF (1); Datatype: Float64; Dimensions: yF; Attributes:; units = m; longname = Locations of the cell faces in the y-direction. xF (16); Datatype: Float64; Dimensions: xF; Attributes:; units = m; longname = Locations of the cell faces in the x-direction. yC (1); Datatype: Float64; Dimensions: yC; Attributes:; units = m; longname = Locations of the cell centers in the y-direction. time (1); Datatype: Float64; Dimensions: time; Attributes:; units = seconds; longname = Time. wτ3 (16 × 1 × 17 × 1); Datatype: Float",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387:2470,test,test,2470,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387,1,['test'],['test']
Testability,"du-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | ERROR: ERROR: ERROR: ERROR: Package Oceananigans errored during testing; &nbsp; | Stacktrace:Package Oceananigans errored during testing; &nbsp; | Stacktrace:Package Oceananigans errored during testing; &nbsp; | Stacktrace:; &nbsp; | [1] pkgerrorPackage Oceananigans errored during testing; &nbsp; | Stacktrace:; &nbsp; | [1] (pkgerror; &nbsp; | [1] (pkgerror::(; &nbsp; | [1] ::pkgerrorString) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] (::test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1578; &nbsp; | [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] (),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:327; &nbsp; | [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:314; &nbsp; | [5] #test#61 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:67 [inlined]; &nbsp; | [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:67 [inlined]; &nbsp; | [7] test(; name::Nothing, uuid::Nothing, version::Nothing, url::Nothing, rev::Nothing, path::Nothing, mode::Pkg.Types.PackageMode, subdir::Nothing, kwargs::Base.It",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081:3091,test,test,3091,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081,1,['test'],['test']
Testability,"d} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Periodic on vertically stretched grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, max(Δz)=0.5; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Flat on vertically uniform grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo ; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Flat y; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Flat on vertically stretched grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Flat y; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, max(Δz)=0.5 ; [ Info: Testing Lagrangian particle tracking [CPU, RungeKutta3] with y Periodic on vertically uniform grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, RungeKutta3] with y Periodic on vertically stretched grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232:2147,Test,Testing,2147,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232,1,['Test'],['Testing']
Testability,e 72.30% 72.53% +0.22% ; ==========================================; Files 200 203 +3 ; Lines 5821 6036 +215 ; ==========================================; + Hits 4209 4378 +169 ; - Misses 1612 1658 +46 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/TurbulenceClosures/TurbulenceClosures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9UdXJidWxlbmNlQ2xvc3VyZXMuamw=) | `36.84% <ø> (ø)` | |; | [...bulence\_closure\_implementations/nothing\_closure.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL25vdGhpbmdfY2xvc3VyZS5qbA==) | `0.00% <0.00%> (ø)` | |; | [src/Utils/with\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3dpdGhfdHJhY2Vycy5qbA==) | `100.00% <100.00%> (ø)` | |; | [test/test\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmcuamw=) | `100.00% <100.00%> (ø)` | |; | [src/Coriolis/f\_plane.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL2ZfcGxhbmUuamw=) | `57.14% <0.00%> (-22.86%)` | :arrow_down: |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `66.66% <0.00%> (-8.34%)` | :arrow_down: |; | [src/Buoyancy/nonlinear\_equation\_of\_state.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L25vbmxpbmVhcl9lcXVhdGlvbl9vZl9zdGF0ZS5qbA==) | `72.00% <0.00%> (-3.00%)` | :arrow_down: |; | [src/TimeSteppers/generic\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9nZW5lcmljX3RpbWVfc3RlcHBpbmcuamw=) | `92.59% <,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/947#issuecomment-693510608:1678,test,test,1678,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/947#issuecomment-693510608,2,['test'],['test']
Testability,"e = 1). model = HydrostaticFreeSurfaceModel(grid = mrg,; momentum_advection = VectorInvariant(),; free_surface = free_surface,; coriolis = coriolis,; tracers = :c,; tracer_advection = WENO(),; buoyancy = nothing,; closure = nothing). g = model.free_surface.gravitational_acceleration; R = grid.radius; Ω = model.coriolis.rotation_rate. uᵢ(λ, φ, z) = 0.1 * cosd(φ) * sind(λ); ηᵢ(λ, φ, z) = (0.1 * Ω * R + 0.1^2 / 2) * sind(φ)^2 / g * sind(λ); cᵢ(λ, φ, z) = Gaussian(λ - 1, φ - 5, 10). set!(model, u=uᵢ, η=ηᵢ, c=cᵢ). Δt = 0.1 * Δ_min(grid) / sqrt(g * grid.Lz) . for _ in 1:20; time_step!(model, Δt); end. return merge(model.velocities, model.tracers, (; η = model.free_surface.η)); end. Nx = 32; Ny = 32. grid = LatitudeLongitudeGrid(CPU(), size = (Nx, Ny, 1),; halo = (3, 3, 3),; latitude = (-80, 80),; longitude = (-160, 160),; z = (-1, 0),; radius = 1,; topology=(Bounded, Bounded, Bounded)). us, vs, ws, cs, ηs = solid_body_rotation_test(grid). regions = 2; P = XPartition. @info "" Testing $regions $(P)s on $(typeof(grid).name.wrapper) on the $arch""; u, v, w, c, η = solid_body_rotation_test(grid; P=P, regions=regions). u = reconstruct_global_field(u); v = reconstruct_global_field(v); w = reconstruct_global_field(w); c = reconstruct_global_field(c); η = reconstruct_global_field(η). using GLMakie. function plot_to_compare(field1, field2). λ, φ, z = nodes(field1). fig = Figure(fontsize=30); ax1 = Axis(fig[1, 1]); ax2 = Axis(fig[1, 2]); ax3 = Axis(fig[1, 3]). heatmap!(ax1, λ, φ, interior(field1, :, :, 1)); heatmap!(ax2, λ, φ, interior(field2, :, :, 1)); heatmap!(ax3, λ, φ, interior(field1, :, :, 1) .- interior(field2, :, :, 1)). return fig; end. @show @test all(isapprox(u, us, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(v, vs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(w, ws, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(c, cs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(η, ηs, atol=1e-20, rtol = 1e-15)); ```. The test for `c` fails. When you then ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737:1850,Test,Testing,1850,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737,1,['Test'],['Testing']
Testability,"e fixes introduced in #1770. There is indeed a notable increase in speedup compared to no specified advection scheme as shown in #1722. The CPU to GPU speedup went up from ~180 times to ~400 times. ```; Oceananigans v0.58.1; Julia Version 1.6.0; Commit f9720dc2eb (2021-03-24 12:55 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4216 CPU @ 2.10GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; EBVERSIONJULIA = 1.6.0; JULIA_DEPOT_PATH = :; EBROOTJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0; EBDEVELJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0/easybuild/avx2-Core-julia-1.6.0-easybuild-devel; JULIA_LOAD_PATH = :; GPU: Tesla V100-SXM2-32GB. Shallow water model benchmarks; ┌───────────────┬─────────────┬───────┬────────────┬────────────┬────────────┬────────────┬───────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼───────┼────────────┼────────────┼────────────┼────────────┼───────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 2.677 ms │ 2.876 ms │ 3.047 ms │ 4.806 ms │ 1.36 MiB │ 2253 │ 10 │; │ CPU │ Float64 │ 64 │ 5.795 ms │ 5.890 ms │ 6.073 ms │ 7.770 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 128 │ 16.979 ms │ 17.350 ms │ 17.578 ms │ 19.993 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 256 │ 62.543 ms │ 63.222 ms │ 63.544 ms │ 67.347 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 512 │ 250.149 ms │ 251.023 ms │ 251.092 ms │ 252.389 ms │ 1.36 MiB │ 2315 │ 10 │; │ CPU │ Float64 │ 1024 │ 990.901 ms │ 993.115 ms │ 993.360 ms │ 996.091 ms │ 1.36 MiB │ 2315 │ 6 │; │ CPU │ Float64 │ 2048 │ 4.002 s │ 4.004 s │ 4.004 s │ 4.007 s │ 1.36 MiB │ 2315 │ 2 │; │ CPU │ Float64 │ 4096 │ 16.371 s │ 16.371 s │ 16.371 s │ 16.371 s │ 1.36 MiB │ 2315 │ 1 │; │ CPU │ Float64 │ 8192 │ 64.657 s │ 64.657 s │ 64.657 s │ 64.657 s │ 1.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868940064:872,benchmark,benchmarks,872,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868940064,1,['benchmark'],['benchmarks']
Testability,"e v0.33.4 ⇒ v0.33.5; [09ab397b] ↑ StructArrays v0.5.0 ⇒ v0.5.1; [856f2bd8] ↑ StructTypes v1.5.0 ⇒ v1.6.0; [3783bdb8] ↑ TableTraits v1.0.0 ⇒ v1.0.1; [bd369af6] ↑ Tables v1.4.1 ⇒ v1.4.2; [6aa5eb33] ↑ TaylorSeries v0.10.11 ⇒ v0.10.12; [0796e94c] ↑ Tokenize v0.5.15 ⇒ v0.5.16; ```. I was able to create a MWE this time:. ```julia; using Printf; using Oceananigans; using Oceananigans: Utils, Units; using Oceananigans.OutputWriters; using Oceanostics: SingleLineProgressMessenger. grid = RegularRectilinearGrid(size=(4, 4, 4), extent=(1,1,1)); model = IncompressibleModel(architecture = CPU(), grid = grid). start_time = 1e-9*time_ns(); simulation = Simulation(model, Δt=1, stop_time=50, iteration_interval=5,; progress=SingleLineProgressMessenger(LES=false, initial_wall_time_seconds=start_time),; ); println(""\n"", simulation,""\n"",). @info ""Setting up chk writer""; simulation.output_writers[:chk_writer] = Checkpointer(model; dir=""."",; prefix = ""chk.test"",; schedule = TimeInterval(5),; force = true, cleanup = true,; ); ; println(""\n"", simulation,""\n"",) . @printf(""---> Starting run!\n""); run!(simulation, pickup=true); ```. This results in the following output:. ```julia. Simulation{IncompressibleModel{CPU, Float64}}; ├── Model clock: time = 0 seconds, iteration = 0 ; ├── Next time step (Int64): 1 second ; ├── Iteration interval: 5; ├── Stop criteria: Any[Oceananigans.Simulations.iteration_limit_exceeded, Oceananigans.Simulations.stop_time_exceeded, Oceananigans.Simulations.wall_time_limit_exceeded]; ├── Run time: 0 seconds, wall time limit: Inf; ├── Stop time: 50 seconds, stop iteration: Inf; ├── Diagnostics: OrderedCollections.OrderedDict with 1 entry:; │ └── nan_checker => NaNChecker; └── Output writers: OrderedCollections.OrderedDict with no entries. [ Info: Setting up chk writer. Simulation{IncompressibleModel{CPU, Float64}}; ├── Model clock: time = 0 seconds, iteration = 0 ; ├── Next time step (Int64): 1 second ; ├── Iteration interval: 5; ├── Stop criteria: Any[Oceananigans.Sim",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1547#issuecomment-818960260:2658,test,test,2658,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1547#issuecomment-818960260,2,['test'],['test']
Testability,"e-13, max=+1.403664e-13, mean=+1.756466e-22, absmean=+1.796207e-14, std=+2.558788e-14 (3971/4096 matching grid points);   | [2023/05/22 15:07:12.175] INFO Δw: min=-4.886854e-13, max=+5.149812e-13, mean=+2.845466e-16, absmean=+5.854449e-14, std=+8.803219e-14 (4318/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Expression: all(test_fields.v .≈ correct_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:78;   | Expression: all(test",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:1590,Test,Test,1590,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586,2,['Test'],['Test']
Testability,"e-sha1 = ""e36adc471280e8b346ea24c5c87ba0571204be7a""; uuid = ""856f2bd8-1eba-4b0a-8007-ebc267875bd4""; version = ""1.7.2"". [[TOML]]; deps = [""Dates""]; git-tree-sha1 = ""44aaac2d2aec4a850302f9aa69127c74f0c3787e""; uuid = ""fa267f1f-6049-4f14-aa54-33bafae1ed76""; version = ""1.0.3"". [[TableTraits]]; deps = [""IteratorInterfaceExtensions""]; git-tree-sha1 = ""c06b2f539df1c6efa794486abfb6ed2022561a39""; uuid = ""3783bdb8-4a98-5b6b-af9a-565f29a5fe9c""; version = ""1.0.1"". [[Tables]]; deps = [""DataAPI"", ""DataValueInterfaces"", ""IteratorInterfaceExtensions"", ""LinearAlgebra"", ""TableTraits"", ""Test""]; git-tree-sha1 = ""c9d2d262e9a327be1f35844df25fe4561d258dc9""; uuid = ""bd369af6-aec1-5ad0-b16a-f7cc5008161c""; version = ""1.4.2"". [[TaylorSeries]]; deps = [""InteractiveUtils"", ""LinearAlgebra"", ""Markdown"", ""Requires"", ""SparseArrays""]; git-tree-sha1 = ""66f4d1993bae49eeba21a1634b5f65782585a42c""; uuid = ""6aa5eb33-94cf-58f4-a9d0-e4b2c4fc25ea""; version = ""0.10.13"". [[Test]]; deps = [""Distributed"", ""InteractiveUtils"", ""Logging"", ""Random""]; uuid = ""8dfed614-e22c-5e08-85e1-65c5234f0b40"". [[TimerOutputs]]; deps = [""Printf""]; git-tree-sha1 = ""32cdbe6cd2d214c25a0b88f985c9e0092877c236""; uuid = ""a759f4b9-e2f1-59dc-863e-4aeb61b1ea8f""; version = ""0.5.8"". [[TranscodingStreams]]; deps = [""Random"", ""Test""]; git-tree-sha1 = ""7c53c35547de1c5b9d46a4797cf6d8253807108c""; uuid = ""3bb67fe8-82b1-5028-8e26-92a6c54297fa""; version = ""0.9.5"". [[Tullio]]; deps = [""DiffRules"", ""LinearAlgebra"", ""Requires""]; git-tree-sha1 = ""7201bbb4c138c18bf14511c4cc8daeac6a52c148""; uuid = ""bc48ee85-29a4-5162-ae0b-a64e1601d4bc""; version = ""0.2.14"". [[UUIDs]]; deps = [""Random"", ""SHA""]; uuid = ""cf7118a7-6976-5b1a-9a39-7adc72f591a4"". [[Unicode]]; uuid = ""4ec0a83e-493e-50e2-b9ac-8f72acf5a8f5"". [[Zlib_jll]]; deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]; git-tree-sha1 = ""320228915c8debb12cb434c59057290f0834dbf6""; uuid = ""83775a58-1f1d-513f-b197-d71354ab007a""; version = ""1.2.11+18"". [[nghttp2_jll]]; deps = [""Libdl"", ""Pkg""]; git-tree-sha1 = ""8e2c44ab",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827235838:17115,Test,Test,17115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827235838,2,"['Log', 'Test']","['Logging', 'Test']"
Testability,"e; -export ΔzF, ΔzC, Δzᵃᵃᶜ, Δzᵃᵃᶠ; +export ΔzF, ΔzC, Δzᵃᵃᶜ, Δzᵃᵃᶠ, Δzᶠᶜᶜ, Δzᶜᶠᶜ; export Δxᶜᶜᵃ, Δxᶠᶜᵃ, Δxᶠᶠᵃ, Δxᶜᶠᵃ; export Δyᶜᶜᵃ, Δyᶠᶜᵃ, Δyᶠᶠᵃ, Δyᶜᶠᵃ; export Axᵃᵃᶜ, Axᵃᵃᶠ, Axᶜᶜᶜ, Axᶠᶜᶜ, Axᶠᶠᶜ, Axᶠᶜᶠ, Axᶜᶠᶜ, Axᶜᶜᶠ; diff --git a/src/Operators/spacings_and_areas_and_volumes.jl b/src/Operators/spacings_and_areas_and_volumes.jl; index 8b7aaeb7..9988b320 100644; --- a/src/Operators/spacings_and_areas_and_volumes.jl; +++ b/src/Operators/spacings_and_areas_and_volumes.jl; @@ -46,6 +46,9 @@ The operators in this file fall into three categories:; @inline Δzᵃᵃᶜ(i, j, k, grid::RegularRectilinearGrid) = grid.Δz; @inline Δzᵃᵃᶜ(i, j, k, grid::VerticallyStretchedRectilinearGrid) = @inbounds grid.Δzᵃᵃᶜ[k]; ; +@inline Δzᶠᶜᶜ(i, j, k, grid::RegularRectilinearGrid) = grid.Δz; +@inline Δzᶜᶠᶜ(i, j, k, grid::VerticallyStretchedRectilinearGrid) = @inbounds grid.Δzᵃᵃᶜ[k]; +; #####; ##### ""Spacings"" in Flat directions for rectilinear grids.; ##### Here we dispatch all spacings to `one`. This abuse of notation; diff --git a/test/runtests.jl b/test/runtests.jl; index 246192f6..d9d520f0 100644; --- a/test/runtests.jl; +++ b/test/runtests.jl; @@ -131,6 +131,7 @@ group = get(ENV, ""TEST_GROUP"", :all) |> Symbol; include(""test_vertical_vorticity_field.jl""); include(""test_implicit_free_surface_solver.jl""); include(""test_hydrostatic_free_surface_immersed_boundaries_apply_surf_bc.jl""); + include(""test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl""); end; end; ; diff --git a/test/test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl b/test/test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl; new file mode 100644; index 00000000..5241929b; --- /dev/null; +++ b/test/test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl; @@ -0,0 +1,56 @@; +using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom; +using Oceananigans.TurbulenceClosures: VerticallyImplicitTimeDiscretization; +; +@testset ""Immersed boundaries with",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2049#issuecomment-966735406:3825,test,test,3825,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2049#issuecomment-966735406,1,['test'],['test']
Testability,"eFormulation()`. When I run this in isolation I get the following error. Any suggestions on what to do here?. ```; [2024/02/27 10:33:43.977] INFO Testing ShallowWaterModel cosine viscous diffusion [u, ConservativeFormulation()]; [2024/02/27 10:33:43.977] WARN The ShallowWaterModel is currently unvalidated, subject to change, and should not be used for scientific research without adequate validation. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/ShallowWaterModels/shallow_water_model.jl:129; ERROR: Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore ~/.julia/packages/GPUArraysCore/uOYfN/src/GPUArraysCore.jl:103; [3] getindex(xs::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, I::Int64); @ GPUArrays ~/.julia/packages/GPUArrays/EZkix/src/host/indexing.jl:9; [4] getindex; @ ~/.julia/packages/OffsetArrays/0MOrf/src/OffsetArrays.jl:438 [inlined]; [5] _getindex; @ ./abstractarray.jl:1321 [inlined]; [6] getindex; @ ./abstractarray.jl:1288 [inlined]; [7] getindex; @ ~/Software/Oceananigans.jl/src/Fields/field.jl:399 [inlined]; [8] _broadcast_getindex; @ ./broadcast.jl:675 [inlined]; [9] _getindex; @ ./broadcast.jl:705 [inlined]; [10] _broadcast_getindex; @ ./broadcast.jl:681 [inlined]; [11] getindex; @ ./broadcast.jl:636 [inlined]; [12] macro expansion; @ ./broadcast.jl:1004 [inlined]; [13] macro expansion; @ ./simdloop.jl:77 [inlined]; [14] copyto!; @ ./broadcast.jl:1003 [inlined]; [15] copyto!; @ ./broadcast.jl:956 [inlined]; [16] copy; @ ./broadcast.jl:928 [inlined]; [17] materialize; @ ./broadcast.jl:903 [inlined]",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1966839141:1146,assert,assertscalar,1146,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1966839141,1,['assert'],['assertscalar']
Testability,"e_model.jl: benchmarks_pretty_table(df_Δ, title=""Incompressible model CPU to GPU speedup""); > benchmark/strong_scaling_incompressible_model.jl: @info ""Benchmarking distributed incompressible model strong scaling with $(typeof(decomposition)) decomposition [N=($Nx, $Ny, $Nz), ranks=($Rx, $Ry, $Rz)]...""; > benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model strong scaling benchmark""); > benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); > benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; > benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); > benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Warming up distributed incompressible model on rank $local_rank...""; > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Benchmarking distributed incompressible model on rank $local_rank...""; > docs/src/physics/incompressible_model.md:# Incompressible model; > docs/src/numerical_implementation/time_stepping.md:where, e.g., for the incompressible model, ; > docs/make.jl: ""Incompressible model"" => ""physics/incompressible_model.md"",; > src/Distributed/distributed_incompressible_model.jl:##### Distributed incom",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932:1539,benchmark,benchmarks,1539,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"eananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for Benchmarks are suppressed.; ```; It'd be nice to fix that eventually. * The output is kind of annoying:. ```julia; [2022/03/13 13:17:49.875] INFO Benchmarking weak scaling nonhydrostatic model with Slab decomposition [N=(128, 128, 32), ranks=(1, 2, 1)]...; Invalid MIT-MAGIC-COOKIE-1 keyInvalid MIT-MAGIC-COOKIE-1 keyNo protocol specified; [ Info: Oceananigans will use 24 threads; [ Info: Oceananigans will use 24 threads; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for Benchmarks are suppressed.; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for Benchmarks are suppressed.; [ Info: Oceananigans will use 24 threads; [ Info: Oceananigans will use 24 threads; ```; We don't need to be told `N` times how many threads Oceananigans is using. * I think the `README.md` could be clearer and the scripts could have better names (eg which script runs the benchmark versus which script sets up the model)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2338#issuecomment-1066145590:2302,benchmark,benchmark,2302,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2338#issuecomment-1066145590,10,"['Benchmark', 'benchmark']","['Benchmarks', 'benchmark']"
Testability,"eananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}}}}},Int64,typeof(identity),typeof(identity),typeof(identity),RegularRectilinearGrid{Float64,Periodic,Periodic,Periodic,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}}}}},FieldSlicer{Colon,UnitRange{Int64},Colon},Tuple{Int64,Int64}}}}; filepath::String, schedule::AveragedTimeInterval, array_type::Type{T} where T, field_slicer::FieldSlicer{Colon,Colon,Colon}, global_attributes::Dict{Any,Any}, output_attributes::Dict{Any,Any}, dimensions::Dict{Any,Any}, mode::String, compression::Int64, verbose::Bool) at /home/tomas/repos2/Oceananigans.jl/src/OutputWriters/netcdf_output_writer.jl:340; [4] top-level scope at /home/tomas/repos2/Oceananigans.jl/sandbox/windowed_spatial_avg.jl:90; [5] include(::String) at ./client.jl:457; [6] top-level scope at REPL[16]:1; in expression starting at /home/tomas/repos2/Oceananigans.jl/sandbox/windowed_spatial_avg.jl:90; ```. Like I said, I'm not sure the best to deal with this. Should I define another separate function to deal with the `WindowedTimeAverage` case?. Also, I'm a little confused. Does this set-up only work at the moment with the NetCDF writer? Because if so, it seems to me it wouldn't be recommended to add to Oceananigans liek this, right? I think we'd want diagnostics on Oceananigans to be independent of the writing method, no?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-784288449:16088,sandbox,sandbox,16088,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-784288449,2,['sandbox'],['sandbox']
Testability,eananigans.jl/pull/795?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #795 +/- ##; ==========================================; + Coverage 71.67% 71.80% +0.12% ; ==========================================; Files 184 124 -60 ; Lines 4781 2476 -2305 ; ==========================================; - Hits 3427 1778 -1649 ; + Misses 1354 698 -656 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [...ts/one\_dimensional\_gaussian\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9nYXVzc2lhbl9hZHZlY3Rpb25fZGlmZnVzaW9uLmps) | | |; | [test/test\_coriolis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2NvcmlvbGlzLmps) | | |; | [examples/internal\_wave.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvaW50ZXJuYWxfd2F2ZS5qbA==) | | |; | [test/test\_verification.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ZlcmlmaWNhdGlvbi5qbA==) | | |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | | |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | | |; | [test/test\_models.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X21vZGVscy5qbA==) | | |; | [examples/netcdf\_ouput\_example.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvbmV0Y2RmX291cHV0X2V4YW1wbGUuamw=) | | |; | [...sts/ocean\_large\_eddy\_simulation\_regression\_test.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC9yZWdyZXNzaW9uX3Rlc3RzL29jZWFuX2xhcmdlX2VkZHlfc2ltdWxhdG,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/795#issuecomment-657824854:1564,test,test,1564,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/795#issuecomment-657824854,2,['test'],['test']
Testability,"ec, target_path::String, sandbox_path::String, sandbox_project_override::Pkg.Types.Project; preferences::Dict{String, Any}, force_latest_compatible_version::Bool, allow_earlier_backwards_compatible_versions::Bool, allow_reresolve::Bool); @ Pkg.Operations /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1752; [22] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing, force_latest_compatible_version::Bool, allow_earlier_backwards_compatible_versions::Bool, allow_reresolve::Bool); @ Pkg.Operations /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1955; [23] test; @ /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1899 [inlined]; [24] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, force_latest_compatible_version::Bool, allow_earlier_backwards_compatible_versions::Bool, allow_reresolve::Bool, kwargs::@Kwargs{io::Base.TTY}); @ Pkg.API /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:444; [25] test(pkgs::Vector{Pkg.Types.PackageSpec}; io::Base.TTY, kwargs::@Kwargs{}); @ Pkg.API /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:159; [26] test(pkgs::Vector{Pkg.Types.PackageSpec}); @ Pkg.API /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:148; [27] test(; name::Nothing, uuid::Nothing, version::Nothing, url::Nothing, rev::Nothing, path::Nothing, mode::Pkg.Types.PackageMode, subdir::Nothing, kwargs::@Kwargs{}); @ Pkg.API /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:174; [28] test(); @ Pkg.API /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:165; [29] top-level scope; @ none:1; 🚨 Error: The command exited with status 1; user command error: exit status 1; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1988500458:7243,test,test,7243,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1988500458,4,['test'],['test']
Testability,"ecoration-style: initial; text-decoration-color: initial;""><div class=""JobLogOutputComponent__Body"" style=""box-sizing: border-box; font-family: SFMono-Regular, Monaco, Menlo, Consolas, &quot;Liberation Mono&quot;, Courier, monospace;"">; Oceananigans \| 818 12 830; --; &nbsp; | Distributed MPI Oceananigans \| 816 12 828; &nbsp; | Multi architectures rank connectivity \| 28 28; &nbsp; | Local grids for distributed models \| 24 24; &nbsp; | Injection of halo communication BCs \| 168 168; &nbsp; | Halo communication \| 588 12 600; &nbsp; | Time stepping IncompressibleModel \| 4 4; &nbsp; | Time stepping ShallowWaterModel \| 4 4; &nbsp; | Distributed FFT-based Poisson solver \| 2 2; &nbsp; | ERROR: ERROR: ERROR: ERROR: LoadError: LoadError: LoadError: LoadError: Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | ERROR: ERROR: ERROR: ERROR: Package Oceananigans errored during testing; &nbsp; | Stacktrace:Package Oceananigans errored during testing; &nbsp; | Stacktrace:Package Oceananigans errored during testing; &nbsp; | Stacktrace:; &nbsp; | [1] pkgerrorPackage Oceananigans errored during testing; &nbsp; | Stacktrace:; &nbsp; | [1] (pkgerror; &nbsp; | [1] (pkgerror::(; &nbsp; | [1] ::pkgerrorString) at /buildwork",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081:1732,test,tests,1732,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081,1,['test'],['tests']
Testability,ecov.io/gh/CliMA/Oceananigans.jl/commit/fbbb5f81b851bb838c8796efba36a3021cb89f0e?el=desc) will **increase** coverage by `0.67%`.; > The diff coverage is `97.77%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #886 +/- ##; ==========================================; + Coverage 70.99% 71.67% +0.67% ; ==========================================; Files 188 188 ; Lines 5230 5433 +203 ; ==========================================; + Hits 3713 3894 +181 ; - Misses 1517 1539 +22 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Simulations/run.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `93.61% <83.33%> (-1.63%)` | :arrow_down: |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `93.15% <100.00%> (+0.36%)` | :arrow_up: |; | [test/test\_simulations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3NpbXVsYXRpb25zLmps) | `100.00% <100.00%> (ø)` | |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `66.66% <0.00%> (+1.04%)` | :arrow_up: |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `72.34% <0.00%> (+1.28%)` | :arrow_up: |; | [src/Grids/grid\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `90.50% <0.00%> (+2.33%)` | :arrow_up: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https:,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/886#issuecomment-683319943:1198,test,test,1198,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/886#issuecomment-683319943,2,['test'],['test']
Testability,ecov.io/gh/CliMA/Oceananigans.jl/pull/792?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [...nceTests/OneDimensionalCosineAdvectionDiffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvT25lRGltZW5zaW9uYWxDb3NpbmVBZHZlY3Rpb25EaWZmdXNpb24uamw=) | | |; | [test/runtests.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dGVzdC9ydW50ZXN0cy5qbA==) | | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvZWFkeV90dXJidWxlbmNlLmps) | | |; | [...ation/convergence\_tests/point\_exponential\_decay.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL3BvaW50X2V4cG9uZW50aWFsX2RlY2F5Lmps) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | [benchmark/benchmark\_ffts.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mZnRzLmps) | | |; | [...ts/one\_dimensional\_gaussian\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9nYXVzc2lhbl9hZHZlY3Rpb25fZGlmZnVzaW9uLmps) | | |; | [...ests/one\_dimensional\_cosine\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9jb3NpbmVfYWR2ZWN0aW9uX2RpZmZ1c2lvbi5qbA==) | | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | | |; | [test/test\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X29wZXJhdG9ycy5qbA==) | | |; | ... and [49 m,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/792#issuecomment-657511230:1953,benchmark,benchmark,1953,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/792#issuecomment-657511230,2,['benchmark'],['benchmark']
Testability,"ection schemes that already exist. https://github.com/CliMA/Oceananigans.jl/blob/fjp/update-convergence-tests/src/Models/ShallowWaterModels/solution_and_tracer_tendencies.jl#L71. In line 69 above you will see that I tried doing this by definig a new operator, div_UV, for partial_x U + partial_y V. This was clunky because I needed to pass variables U and V, and I had an error. The details can be found here,. https://github.com/CliMA/Oceananigans.jl/blob/9402a90af072a495ef130d540661be9327a51552/src/Models/ShallowWaterModels/shallow_water_advection_operators.jl#L24. Can you suggest a better way of doing this?. When I try running the tests most of the pass except at line 82 I get the following error . ```; [2021/01/11 15:36:04.735] INFO Testing time-stepping ShallowWaterModels [GPU(), (Periodic, Periodic, Bounded)]...; ERROR: a exception was thrown during kernel execution.; Run Julia on debug level 2 for device stack traces.; Time-stepping ShallowWaterModels [GPU(), (Periodic, Periodic, Bounded)]: Error During Test at /home/fpoulin/software/Oceananigans.jl/test/test_shallow_water_models.jl:82; Test threw exception; Expression: time_stepping_shallow_water_model_works(arch, topo, nothing); KernelException: exception thrown during kernel execution on device Quadro P400; Stacktrace:; [1] check_exceptions() at /home/fpoulin/.julia/packages/CUDA/YeS8q/src/compiler/exceptions.jl:94; [2] prepare_cuda_call() at /home/fpoulin/.julia/packages/CUDA/YeS8q/src/state.jl:85; [3] initialize_api() at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/error.jl:92; [4] macro expansion at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/libcuda.jl:975 [inlined]; [5] macro expansion at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/error.jl:102 [inlined]; [6] cuStreamWaitEvent(::CuStream, ::CuEvent, ::Int64) at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/utils/call.jl:93; [7] wait at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/events.jl:77 [inlined]; [8] wait(::KernelAb",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-758077952:1312,Test,Test,1312,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-758077952,1,['Test'],['Test']
Testability,"ed MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:18.729] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:19.136] INFO Running shallow water regression tests...; [2023/02/21 06:36:19.143] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/21 06:36:29.566] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:36:32.345] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:36:32.346] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:37:27.833] INFO Initializing simulation...; [2023/02/21 06:37:32.539] INFO ... simulation initialization complete (4.632 seconds); [2023/02/21 06:37:32.539] INFO Executing initial time step...; [2023/02/21 06:37:52.29",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:11691,test,tests,11691,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['test'],['tests']
Testability,"ed doing this by definig a new operator, div_UV, for partial_x U + partial_y V. This was clunky because I needed to pass variables U and V, and I had an error. The details can be found here,. https://github.com/CliMA/Oceananigans.jl/blob/9402a90af072a495ef130d540661be9327a51552/src/Models/ShallowWaterModels/shallow_water_advection_operators.jl#L24. Can you suggest a better way of doing this?. When I try running the tests most of the pass except at line 82 I get the following error . ```; [2021/01/11 15:36:04.735] INFO Testing time-stepping ShallowWaterModels [GPU(), (Periodic, Periodic, Bounded)]...; ERROR: a exception was thrown during kernel execution.; Run Julia on debug level 2 for device stack traces.; Time-stepping ShallowWaterModels [GPU(), (Periodic, Periodic, Bounded)]: Error During Test at /home/fpoulin/software/Oceananigans.jl/test/test_shallow_water_models.jl:82; Test threw exception; Expression: time_stepping_shallow_water_model_works(arch, topo, nothing); KernelException: exception thrown during kernel execution on device Quadro P400; Stacktrace:; [1] check_exceptions() at /home/fpoulin/.julia/packages/CUDA/YeS8q/src/compiler/exceptions.jl:94; [2] prepare_cuda_call() at /home/fpoulin/.julia/packages/CUDA/YeS8q/src/state.jl:85; [3] initialize_api() at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/error.jl:92; [4] macro expansion at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/libcuda.jl:975 [inlined]; [5] macro expansion at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/error.jl:102 [inlined]; [6] cuStreamWaitEvent(::CuStream, ::CuEvent, ::Int64) at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/utils/call.jl:93; [7] wait at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/events.jl:77 [inlined]; [8] wait(::KernelAbstractions.CUDADevice, ::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CudaEvent,KernelAbstractions.CudaEvent,KernelAbstractions.CudaEvent}}, ::Nothing, ::CuStream) at /home/fpoulin/.julia/packages/KernelAbstra",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-758077952:1397,Test,Test,1397,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-758077952,1,['Test'],['Test']
Testability,"ed when computing the hydrostatic pressure integral, therefore:; > ; > ph=∫z0b¯z dz; > ; > where ()―z indicates a reconstruction in z.; > ; > Previously, we were assuming within the hydrsotatic pressure integral that `z_dot_g_b` returned at `ccc`. I think this is the only part that I'm confused about. Why was not interpolating `z_dot_g_b` okay?. I ran some tests to investigate this and found some interesting things. As a background: when we originally tried to nuke the pressure separation, I noticed that some wave noise was being created. Unfortunately the videos of that PR were lost in time so I can't show them to you, but here is the relevant comment: https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-995840271. The worst offender was the internal wave example, where the wave packet seemed to break down pretty quickly without a hydrostatic pressure separation. So I just ran the same example using the `main` branch and branch https://github.com/CliMA/Oceananigans.jl/tree/tc/nhpressure2 (which now has this bugfix in and it doesn't separate the pressure). I ran it for 10 times longer and here are the videos of both (respectively):. https://user-images.githubusercontent.com/13205162/233692840-edd9780b-dbc4-4958-843d-9895ac85c32f.mp4. https://user-images.githubusercontent.com/13205162/233692959-841c2a2c-2a8a-40e2-9448-fa2943a67502.mp4. They look exactly the same to me. So whatever was causing the added wave noise in https://github.com/CliMA/Oceananigans.jl/pull/1910 when we removed the hydrostatic pressure (whether it was the things you changed in this PR or not), it's not causing the noise anymore. I haven't tested the other docs examples but this was the worse offender, so I'm confident they'll look good too. With this is mind, I'll open a draft PR with https://github.com/CliMA/Oceananigans.jl/tree/tc/nhpressure2 to see what happens to the tests. I think if the dynamics look the same we could reopen the discussion about removing the hydrostatic pressure.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518109054:2002,test,tested,2002,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518109054,2,['test'],"['tested', 'tests']"
Testability,"el iteration 20 equals or exceeds stop iteration 20.; --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.644] INFO Δu: min=-2.958580e-08, max=+2.921001e-08, mean=-7.420989e-11, absmean=+1.893230e-09, std=+5.534008e-09 (16384/16384 matching grid points); --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.644] INFO Δv: min=-1.426930e-11, max=+1.432286e-11, mean=-2.560596e-14, absmean=+6.119088e-13, std=+1.792748e-12 (16512/16512 matching grid points); [2023/02/27 18:58:00.644] INFO Δh: min=-4.754092e-07, max=+4.764754e-07, mean=+2.561137e-09, absmean=+2.079621e-07, std=+2.556520e-07 (16384/16384 matching grid points); FJP: arch and formulation = GPU()ConservativeFormulation(); [2023/02/27 18:58:00.644] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/27 18:58:00.731] INFO Initializing simulation...; [2023/02/27 18:58:00.732] INFO ... simulation initialization complete (546.689 μs); [2023/02/27 18:58:00.732] INFO Executing initial time step...; [2023/02/27 18:58:00.734] INFO ... initial time step complete (2.363 ms).; [2023/02/27 18:58:00.795] INFO Simulation is stopping after running for 61.833 ms.; [2023/02/27 18:58:00.795] INFO Model iteration 20 equals or exceeds stop iteration 20.; --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δu: min=-2.584649e-06, max=+1.597348e-06, mean=+3.118505e-09, absmean=+1.254639e-07, std=+3.731235e-07 (16384/16384 matching grid points); --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δv: min=-1.4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:5347,Test,Testing,5347,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226,1,['Test'],['Testing']
Testability,"ely switching the order you add the output writer in @glwagner's example makes the issue pop up. In @glwagner's original example the JLD2 writer is added first, and then the netcdf writer, and there's no issue. The example below (which is pretty much the same example, except with that order switched) fails for me:. ```julia; using Oceananigans; using NCDatasets. Nx = Ny = Nz = 16; grid = RectilinearGrid(size=(Nx, Ny, Nz), extent=(1, 1, 1)). tracer_names = Tuple(Symbol(:τ, n) for n = 1:6); model = NonhydrostaticModel(; grid, tracers=tracer_names). uᵢ(x, y, z) = randn(); cᵢ(x, y, z) = sin(2π * z / grid.Lz); kw = NamedTuple(c => cᵢ for c in tracer_names); set!(model; u=uᵢ, v=uᵢ, w=uᵢ, kw...). simulation = Simulation(model, Δt=0.1/Nx, stop_iteration=100). u, v, w = model.velocities; fluxes = NamedTuple(Symbol(""wτ$n"") => Field(w*c) for (n, c) in enumerate(model.tracers)); averaged_fluxes = NamedTuple(Symbol(""avg_wτ$n"") => Average(flux, dims=2) for (n, flux) in enumerate(fluxes)). jld2_filename = ""test.jld2""; nc_filename = ""test.nc""; kwargs = (schedule = IterationInterval(1),; verbose = true,; indices = (:, 1, :),; overwrite_existing = true). simulation.output_writers[:nc] = NetCDFOutputWriter(model, merge(fluxes, averaged_fluxes);; filename = nc_filename,; kwargs...); simulation.output_writers[:jld2] = JLD2OutputWriter(model, merge(fluxes, averaged_fluxes);; filename = jld2_filename,; kwargs...). run!(simulation). ds = Dataset(nc_filename). Ntracers = length(tracer_names); flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(jld2_filename, ""wτ$n"") for n = 1:Ntracers); average_flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(jld2_filename, ""avg_wτ$n"") for n = 1:Ntracers). avg_flux_1_nc = ds[""avg_wτ1""]; avg_flux_1 = average_flux_timeseries[""wτ1""]. for n = 2:Ntracers; flux_n = flux_timeseries[""wτ$n""]; avg_flux_n = average_flux_timeseries[""wτ$n""]. @show ""Fluxes for tracer $n:""; @show all(avg_flux_1[:, 1, :, :] .≈ avg_flux_n[:, 1, :, :]); @show all(avg_flux_1_nc .≈ ds[""avg_wτ$n""])",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437330069:1024,test,test,1024,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437330069,1,['test'],['test']
Testability,"empt to access 1-element Vector{Float64} at index [2]; Stacktrace:; [1] getindex; @ ./array.jl:805 [inlined]; [2] g(a::Vector{Float64}, first::Bool); @ Main ./REPL[11]:1; [3] top-level scope; @ REPL[12]:1. julia> g(a, false); ERROR: BoundsError: attempt to access 1-element Vector{Float64} at index [2]; Stacktrace:; [1] getindex; @ ./array.jl:805 [inlined]; [2] g(a::Vector{Float64}, first::Bool); @ Main ./REPL[11]:1; [3] top-level scope; @ REPL[13]:1; ```. `ifelse` is _not_ short-circuiting --- _both_ branches are executed, even though only the correct value is returned:. ```julia; julia> b = rand(2); 2-element Vector{Float64}:; 0.5340042876487958; 0.7031634999748222. julia> g(b, true); 0.5340042876487958. julia> g(b, false); 0.7031634999748222; ```. It's easier for the compiler to optimize code that involves `ifelse`, especially on the GPU. The reason is that it's allowed to execute all code on both branches. If we use short-circuiting logic, then I guess many optimizations are not possible, because execution on one branch or another must be completely excluded. Some of this is discussed here: https://discourse.julialang.org/t/multiplying-by-booleans-faster-than-if-else/64117. > What about @inline?. This a little hazier. The compiler decides based on a heuristic whether or not to ""inline"" a function (meaning, rather than compiling code for a function independently and jumping to that code at the right moment, it combines the function code with the code that calls the function). We want to inline everything basically, so that every tendency evaluation involves evaluating one giant function. Inlining lets LLVM magic optimize our code to the highest degree (at least that's my impression). For whatever reason the compiler often decides _not_ to inline our functions unless we specifically annotate them. So it seems we probably need to add `@inline` to every ""hot"" function that's called in a kernel, at every grid point (like a forcing function or boundary condition functi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2336#issuecomment-1066115583:2024,log,logic,2024,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2336#issuecomment-1066115583,1,['log'],['logic']
Testability,"ept. MPI.jl and PencilFFTs.jl are new dependencies but I haven't updated the Project.toml yet. So far this PR adds some new infrastructure:; 1. Distributed/multi-architectures (e.g. `MultiCPU`) that know about rank connectivity.; 2. Halo communication between ranks is done via multiple dispatch on a new `HaloCommunicationBC` type.; 3. A `DistributedFFTBasedPoissonSolver` for solving Poisson equations across ranks.; 4. A `DistributedModel` that creates local grids for each ranks, injects halo communication BCs, and passes the distributed pressure solver to a local `IncompressibleModel`. I also added some simple tests for multi architecture rank connectivity, local grid construction, injection of halo communication BCs, and halo communication (testing x, y, and z slab decompositions). Also added tests for the distributed Poisson solver ensuring the solution is divergence-free. Next step for testing would probably be to test that the code handles `Bounded` topologies correctly then add tests that reproduce the regression tests but on multiple ranks and ensure the output matches the regression output. ## Some notes. ### Domain decomposition. Domain decomposition is supported and tested in x, y, and z. But for `IncompressibleModel` z-decomposition won't work right now because vertical integrals are done inside GPU kernels (so we probably don't want to decompose in z). And PencilFFTs.jl supports decompositions in dimensions 2 and 3 (since dimension 1 FFTs are the fastest). As a result, right now Oceananigans.jl only supports slab decompositions in y although we should figure out if pencil decompositions are possible. ### Local topologies. The local grid topology may need to be different from the global/full grid topology. This isn't an issue for triply-periodic so I haven't thought about how to tackle it yet. How would topologies work for grids on a single rank (i.e. a piece of a larger grid)? Do we need a new `Communication` topology?. In the case of being `Periodic` on t",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-775301066:1304,test,testing,1304,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-775301066,4,['test'],"['test', 'testing', 'tests']"
Testability,"equency by time 21.1 ms <. Memory estimate: 482.09 KiB, allocs estimate: 407. julia> trial1 = run_model_benchmark!(tracer_kernel_test, GPU();; use_benchmarktools = true,; bathymetry = random_bathymetry()); BenchmarkTools.Trial: 5 samples with 1 evaluation.; Range (min … max): 9.614 ms … 10.272 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 9.717 ms ┊ GC (median): 0.00%; Time (mean ± σ): 9.797 ms ± 271.120 μs ┊ GC (mean ± σ): 0.00% ± 0.00%. █ █ █ █ █; █▁█▁▁▁▁▁▁█▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▁; 9.61 ms Histogram: frequency by time 10.3 ms <. Memory estimate: 89.45 KiB, allocs estimate: 320. ```. on this branch:; ```julia ; julia> using NESAPOceananigans; julia> set_problem_size!(500, 500, 50). julia> trial1 = run_model_benchmark!(momentum_kernel_test, GPU();; use_benchmarktools = true,; bathymetry = random_bathymetry()); trial1 = run_model_benchmark!(momentum_kernel_test, arch; use_benchmarktools = true, bottom_height = random_bathymetry()) = Trial(13.991 ms); BenchmarkTools.Trial: 5 samples with 1 evaluation.; Range (min … max): 13.991 ms … 22.167 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 14.057 ms ┊ GC (median): 0.00%; Time (mean ± σ): 15.676 ms ± 3.629 ms ┊ GC (mean ± σ): 0.00% ± 0.00%. █; █▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▇ ▁; 14 ms Histogram: frequency by time 22.2 ms <. Memory estimate: 487.70 KiB, allocs estimate: 766. julia> trial1 = run_model_benchmark!(tracer_kernel_test, GPU();; use_benchmarktools = true,; bathymetry = random_bathymetry()); trial1 = run_model_benchmark!(tracer_kernel_test, arch; use_benchmarktools = true, bottom_height = random_bathymetry()) = Trial(4.807 ms); BenchmarkTools.Trial: 5 samples with 1 evaluation.; Range (min … max): 4.807 ms … 5.457 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 4.819 ms ┊ GC (median): 0.00%; Time (mean ± σ): 4.958 ms ± 281.609 μs ┊ GC (mean ± σ): 0.00% ± 0.00%. █▁ ▁ ▁; ██▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▁; 4.81 ms Histogram:",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2243530643:1674,Benchmark,BenchmarkTools,1674,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2243530643,1,['Benchmark'],['BenchmarkTools']
Testability,"er: namely a channel flow forced by a pressure gradient, with a Monin-Obukhov-compliant bottom drag. I couldn't reproduce the simulation perfectly (for example, they use a pseudo-spectral scheme in the horizontal directions, force their drag with a horizontal average, and modify the `SmagLilly` constant slightly) so the results are a bit different from what's in their paper, but I think that's okay. Let me know if anyone thinks otherwise. Importantly, the `ScaleInvSmag` shows an improvement over the `SmagLilly`, with the later being expectedly overly diffusive and pretty much killing any turbulence at this resolution:. https://github.com/user-attachments/assets/6440450d-52f4-43ef-9ad5-0f8fcd9993d5. For reference, this is what similar plots from the paper look like (the equivalent for us here would be SMAG and PASI):. ![image](https://github.com/user-attachments/assets/5607d340-d4b4-4405-a0a6-67ed43bfd274). Some quick notes:. - Many tests are failing become I made an ad-hoc modification for now which passes the velocities to `DiffusivityFields()`. I did that because otherwise it was hard to make the model performant and simulations were taking way too long. We can (and should) review this and either come up with a better way to construct the `diffusivity_fields` or make this change separately in another PR, which will require changing the other models too.; - I'm updating the dynamic model once every 5 time steps only (this is user-defined). This is common practice for dynamic models since their cost is significantly higher than that of constant Smag or even AMD. With that practice, the dynamic model is taking about 3 times longer to run than the constant Smagorinsky. It does take significantly longer to compile (I haven't timed it). I believe there might be some optimizations still on the table though.; - I also found that the precise value of the Smag coefficient calculated via the dynamic procedure is dependent on the advection scheme, with WENO generally leading ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2417879667:2146,test,tests,2146,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2417879667,2,['test'],['tests']
Testability,eredFourthOrder │ 17.309 ms │ 17.419 ms │ 18.107 ms │ 24.384 ms │ 2.71 MiB │ 27650 │ 10 │ ; │ GPU │ CenteredSecondOrder │ 10.369 ms │ 11.588 ms │ 11.472 ms │ 11.642 ms │ 2.53 MiB │ 16296 │ 10 │; │ GPU │ UpwindBiasedFifthOrder │ 19.561 ms │ 19.675 ms │ 20.975 ms │ 32.694 ms │ 2.77 MiB │ 32028 │ 10 │ ; │ GPU │ UpwindBiasedThirdOrder │ 16.131 ms │ 16.211 ms │ 16.806 ms │ 22.239 ms │ 2.68 MiB │ 25594 │ 10 │; │ GPU │ WENO5 │ 382.916 ms │ 385.558 ms │ 385.368 ms │ 386.709 ms │ 13.21 MiB │ 715860 │ 10 │; └───────────────┴────────────────────────┴────────────┴────────────┴────────────┴────────────┴───────────┴────────┴─────────┘; ```. ```; Advection schemes CPU to GPU speedup ; ┌────────────────────────┬─────────┬─────────┬─────────┐ ; │ Schemes │ speedup │ memory │ allocs │ ; ├────────────────────────┼─────────┼─────────┼─────────┤ ; │ CenteredFourthOrder │ 88.7159 │ 1.6849 │ 13.1918 │ ; │ CenteredSecondOrder │ 89.3514 │ 1.57709 │ 7.77481 │ ; │ UpwindBiasedFifthOrder │ 114.4 │ 1.72647 │ 15.2805 │ ; │ UpwindBiasedThirdOrder │ 98.3274 │ 1.66538 │ 12.2109 │ ; │ WENO5 │ 16.4404 │ 8.22094 │ 341.536 │ ; └────────────────────────┴─────────┴─────────┴─────────┘; ```. # Turbulence closure benchmarks. ```; Turbulence closures relative performance (GPU); ┌───────────────┬──────────────────────────────────┬──────────┬─────────┬─────────┐; │ Architectures │ Closures │ slowdown │ memory │ allocs │; ├───────────────┼──────────────────────────────────┼──────────┼─────────┼─────────┤; │ GPU │ AnisotropicBiharmonicDiffusivity │ 1.5313 │ 1.03189 │ 1.54697 │; │ GPU │ AnisotropicDiffusivity │ 1.05623 │ 1.00582 │ 1.01779 │; │ GPU │ AnisotropicMinimumDissipation │ 1.46265 │ 1.19908 │ 1.26817 │; │ GPU │ IsotropicDiffusivity │ 1.13134 │ 1.00607 │ 1.07995 │; │ GPU │ Nothing │ 1.0 │ 1.0 │ 1.0 │; │ GPU │ SmagorinskyLilly │ 1.41905 │ 1.30373 │ 1.18683 │; │ GPU │ TwoDimensionalLeith │ 1.11312 │ 1.06941 │ 1.06147 │; └───────────────┴──────────────────────────────────┴──────────┴─────────┴─────────┘; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868470173:2830,benchmark,benchmarks,2830,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868470173,1,['benchmark'],['benchmarks']
Testability,"error message:; ```; [52922] signal (11.1): Segmentation fault; in expression starting at /glade/u/home/knudsenl/.julia/packages/Oceananigans/M82LU/src/Oceananigans.jl:129; Allocations: 618273 (Pool: 617476; Big: 797); GC: 1; ERROR: LoadError: Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to ""/glade/u/home/knudsenl/.julia/compiled/v1.9/Oceananigans/jl_AMNEzH"".; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::IO, internal_stdout::IO, keep_loaded_modules::Bool); @ Base ./loading.jl:2300; [3] compilecache; @ ./loading.jl:2167 [inlined]; [4] _require(pkg::Base.PkgId, env::String); @ Base ./loading.jl:1805; [5] _require_prelocked(uuidkey::Base.PkgId, env::String); @ Base ./loading.jl:1660; [6] macro expansion; @ ./loading.jl:1648 [inlined]; [7] macro expansion; @ ./lock.jl:267 [inlined]; [8] require(into::Module, mod::Symbol); @ Base ./loading.jl:1611; in expression starting at /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/testcode.jl:1; ```; The versioninfo gave me the following as output:; ```; Julia Version 1.9.2; Commit e4ee485e90 (2023-07-05 09:39 UTC); Platform Info:; OS: Linux (x86_64-suse-linux); ""openSUSE Leap 15.4""; uname: Linux 5.14.21-150400.24.46-default #1 SMP PREEMPT_DYNAMIC Thu Feb 9 08:38:18 UTC 2023 (2d95137) x86_64 x86_64; CPU: Intel(R) Xeon(R) Gold 6240 CPU @ 2.60GHz: ; speed user nice sys idle irq; #1-72 2600 MHz 922553194 s 727867 s 363212152 s 5414020342 s 0 s; Memory: 370.290340423584 GB (301775.56640625 MB free); Uptime: 9.37897786e6 sec; Load Avg: 13.61 25.96 27.94; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-14.0.6 (ORCJIT, cascadelake); Threads: 1 on 72 virtual cores; Environment:; LD_LIBRARY_PATH = /glade/u/apps/casper/23.10/spack/opt/spack/openmpi/4.1.6/oneapi/2023.2.1/dgcv/lib:/glade/u/apps/common/23.08/spack/opt/spack/cuda/12.2.1/lib64:/glade/u/apps/common/23.08/spack/opt/spack/cuda/12.2.1/nvvm/lib64:/glade/u/apps/common/23.08/spa",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233740720:1084,test,testcode,1084,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233740720,1,['test'],['testcode']
Testability,especially because we are comparing `Float64` model output with `Float32` saved data.; I propose to regenerate regression data in `Float64` in another PR so we can make the regression tests more repetible,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765267741:184,test,tests,184,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765267741,1,['test'],['tests']
Testability,"est/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17102,Test,Test,17102,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,2,"['Test', 'test']","['Test', 'tests']"
Testability,"experiment really does depend on keeping it up to date with the current version of Oceananigans. What's really useful to people is the validation script that works for current Oceananigans that people can edit and modify, I think... otherwise it's more a discussion that second-order finite volume / difference methods can reproduce the driven cavity, I suppose.; > ; > I understand the point though that this work has value and it's a shame to hide it away. I think it might be nice to have a separate repository of ""cool setups"", each of which links to the specific Oceananigans version that it works with... I definitely see your point. But if that's true, then I think there's a deeper problem here which is that neither the validation scripts nor the benchmarks are kept up to date. (The benchmarks on the docs right now are done with v0.34.0!). I actually tried discussing this in https://github.com/CliMA/Oceananigans.jl/issues/1634, and even proposed a solution that should work. I think we have three options:. - We adopt the opinion that even though it's not ideal because it's out-of-date, we keep the validation experiments since they are cool set-ups that show that our code worked in the past (and supposedly should still be working now, although without proof); - We adopt the opinion that if it's not up-to-date, it's not desired. So we nuke the benchmarks and the validation experiments altogether; - We try to fix this issue and keep the validation experiments and benchmarks up-to-date. You [seem to agree](https://github.com/CliMA/Oceananigans.jl/issues/1634#issuecomment-832203095) that creating a separate repo for validation and relying on `CompatHelper` to automatically create PRs would work. I'd be happy to help implementing that, but I don't have access to a server with GPUs that I set-up the CI for (or enough knowledge of the CI tbh). Any one of those 3 options would work for me, but I think it would be good to make an explicit decision and stick to it (for now), no?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872363477:1403,benchmark,benchmarks,1403,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872363477,2,['benchmark'],['benchmarks']
Testability,"f 4x. In this scenario, the GPU is ~620x faster; > than a single CPU core.; > 3. Calculated using (t_100000000 - t_0) / 100000000, advecting a; > single particle on the CPU takes ~110 ns while on the GPU it only takes; > ~0.127 ns. This seems a little too good to be true but I'll double check; > this.; >; > I'll start refactoring this PR using @glwagner; > <https://github.com/glwagner>'s and @zhenwu0728; > <https://github.com/zhenwu0728>'s feedback, but I think it would be; > really great if we can keep this performance.; > Benchmarks; >; > Oceananigans v0.44.1; > Julia Version 1.5.2; > Commit 539f3ce943 (2020-09-23 23:17 UTC); > Platform Info:; > OS: Linux (x86_64-pc-linux-gnu); > CPU: Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; > WORD_SIZE: 64; > LIBM: libopenlibm; > LLVM: libLLVM-9.0.1 (ORCJIT, cascadelake); > GPU: TITAN V; >; > Lagrangian particle tracking benchmarks; > ┌───────────────┬─────────────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; > │ Architectures │ N_particles │ min │ median │ mean │ max │ memory │ allocs │; > ├───────────────┼─────────────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; > │ CPU │ 0 │ 361.749 ms │ 364.041 ms │ 364.293 ms │ 368.854 ms │ 293.44 KiB │ 1876 │; > │ CPU │ 1 │ 375.030 ms │ 376.591 ms │ 377.959 ms │ 385.248 ms │ 297.16 KiB │ 1906 │; > │ CPU │ 10 │ 377.251 ms │ 380.792 ms │ 387.560 ms │ 443.325 ms │ 297.16 KiB │ 1906 │; > │ CPU │ 100 │ 378.867 ms │ 381.194 ms │ 381.328 ms │ 383.461 ms │ 297.16 KiB │ 1906 │; > │ CPU │ 1000 │ 378.076 ms │ 384.114 ms │ 383.611 ms │ 388.507 ms │ 297.16 KiB │ 1906 │; > │ CPU │ 10000 │ 381.209 ms │ 383.687 ms │ 387.584 ms │ 419.196 ms │ 297.16 KiB │ 1906 │; > │ CPU │ 100000 │ 389.478 ms │ 390.299 ms │ 390.442 ms │ 391.984 ms │ 297.16 KiB │ 1906 │; > │ CPU │ 1000000 │ 484.920 ms │ 487.836 ms │ 488.382 ms │ 493.664 ms │ 297.16 KiB │ 1906 │; > │ CPU │ 10000000 │ 1.484 s │ 1.489 s │ 1.497 s │ 1.525 s │ 297.16 KiB │ 1906 │; > │ CPU │ 1000000",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-732535982:1734,benchmark,benchmarks,1734,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-732535982,1,['benchmark'],['benchmarks']
Testability,"f5c54c55a7a9a3aa42bf931c72aa""; uuid = ""85f8d34a-cbdd-5861-8df4-14fed0d494ab""; version = ""0.11.3"". [[NNlib]]; deps = [""Adapt"", ""ChainRulesCore"", ""Compat"", ""LinearAlgebra"", ""Pkg"", ""Requires"", ""Statistics""]; git-tree-sha1 = ""80b8360670f445d88b3475e88b33bbcc92f7866e""; uuid = ""872c559c-99b0-510c-b3b7-b6c96a88d5cd""; version = ""0.7.19"". [[NaNMath]]; git-tree-sha1 = ""bfe47e760d60b82b66b61d2d44128b62e3a369fb""; uuid = ""77ba4419-2d1f-58cd-9bb1-8ffee604a2e3""; version = ""0.3.5"". [[NetCDF_jll]]; deps = [""Artifacts"", ""HDF5_jll"", ""JLLWrappers"", ""LibCURL_jll"", ""LibSSH2_jll"", ""Libdl"", ""MbedTLS_jll"", ""Pkg"", ""Zlib_jll"", ""nghttp2_jll""]; git-tree-sha1 = ""d5835f95aea3b93965a1a7c06de9aace8cb82d99""; uuid = ""7243133f-43d8-5620-bbf4-c2c921802cf3""; version = ""400.701.400+0"". [[Oceananigans]]; deps = [""Adapt"", ""CUDA"", ""Crayons"", ""CubedSphere"", ""Dates"", ""FFTW"", ""Glob"", ""InteractiveUtils"", ""JLD2"", ""KernelAbstractions"", ""LinearAlgebra"", ""Logging"", ""MPI"", ""NCDatasets"", ""OffsetArrays"", ""OrderedCollections"", ""PencilFFTs"", ""Pkg"", ""Printf"", ""Random"", ""Rotations"", ""SafeTestsets"", ""SeawaterPolynomials"", ""Statistics"", ""StructArrays"", ""Tullio""]; git-tree-sha1 = ""861d8cca4447304a21a94110e3ffc786cab52dce""; uuid = ""9e8cae18-63c1-5223-a75c-80ca9d6e9a09""; version = ""0.56.0"". [[OffsetArrays]]; deps = [""Adapt""]; git-tree-sha1 = ""87a728aebb76220bd72855e1c85284c5fdb9774c""; uuid = ""6fe1bfb0-de20-5000-8ca7-80f57d26f881""; version = ""1.7.0"". [[OpenMPI_jll]]; deps = [""Libdl"", ""Pkg""]; git-tree-sha1 = ""41b983e26a7ab8c9bf05f7d70c274b817d541b46""; uuid = ""fe0851c0-eecd-5654-98d4-656369965a5c""; version = ""4.0.2+2"". [[OpenSSL_jll]]; deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]; git-tree-sha1 = ""71bbbc616a1d710879f5a1021bcba65ffba6ce58""; uuid = ""458c3c95-2e84-50aa-8efc-19380b2a3a95""; version = ""1.1.1+6"". [[OpenSpecFun_jll]]; deps = [""Artifacts"", ""CompilerSupportLibraries_jll"", ""JLLWrappers"", ""Libdl"", ""Pkg""]; git-tree-sha1 = ""9db77584158d0ab52307f8c04f8e7c08ca76b5b3""; uuid = ""efe28fd5-8261-553b-a9e1-b2916fc3738e""; version",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827235838:11205,Log,Logging,11205,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827235838,1,['Log'],['Logging']
Testability,faa095f] x265_jll v3.5.0+0; [d8fb68d0] xkbcommon_jll v1.4.1+0; [0dad84c5] ArgTools `@stdlib/ArgTools`; [56f22d72] Artifacts `@stdlib/Artifacts`; [2a0f44e3] Base64 `@stdlib/Base64`; [ade2ca70] Dates `@stdlib/Dates`; [8bb1440f] DelimitedFiles `@stdlib/DelimitedFiles`; [8ba89e20] Distributed `@stdlib/Distributed`; [f43a241f] Downloads `@stdlib/Downloads`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [4af54fe1] LazyArtifacts `@stdlib/LazyArtifacts`; [b27032c2] LibCURL `@stdlib/LibCURL`; [76f85450] LibGit2 `@stdlib/LibGit2`; [8f399da3] Libdl `@stdlib/Libdl`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [d6f4376e] Markdown `@stdlib/Markdown`; [a63ad114] Mmap `@stdlib/Mmap`; [ca575930] NetworkOptions `@stdlib/NetworkOptions`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9abbd945] Profile `@stdlib/Profile`; [3fa0cd96] REPL `@stdlib/REPL`; [9a3f8284] Random `@stdlib/Random`; [ea8e919c] SHA `@stdlib/SHA`; [9e88b42a] Serialization `@stdlib/Serialization`; [1a1011a3] SharedArrays `@stdlib/SharedArrays`; [6462fe0b] Sockets `@stdlib/Sockets`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`; [fa267f1f] TOML `@stdlib/TOML`; [a4e569a6] Tar `@stdlib/Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfull,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:8993,Log,Logging,8993,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,4,"['Log', 'Test']","['Logging', 'Test']"
Testability,"field to accept a list of callable objects or functions. Or even better, a list of objects that look something like. ```julia; struct PrintableDiagnostic{D}; diagnostic :: D; format :: String; name :: String; units :: String; end. function pretty_diagnostic(pd::PrintableDiagnostic, model); return @sprintf(""%s: $(pd.format) %s"", pd.name, pd.diagnostic(model), pd.units); end; ```. with this design, the user can pass a list of `PrintableDiagnostics` to `ProgressPrinter`, which are then evaluated and the results turned into a string via the function `pretty_diagnostic`. As for option 1 of using a logging package, perhaps it could be nice to use some logging functionality that's configurable with global variables (?) rather than manually creating a `ProgressPrinter` that does ""brute force"" printing as I have described above. However I think that it would require some customization of existing logging packages, since the typical `info` or `debug` settings are not sufficient for the purposes of logging simulation output (right?) Instead, we would need more options, and it'd be nice to obtain the ability to also print the output of diagnostics / monitoring functions, as we do in the example script. And I think doing it this way might involve adding some lines to our time stepping loop. Perhaps @ali-ramadhan has more to say. Another thing we have talked about is somehow having the ability to live-update messages in the terminal (rather than printing a stream of message). This would be nice because it could dramatically reduce the text-noise that a stream of messages invokes, allowing the user to much more easily read and interpret the output of a simulation progress (in addition to creating the possibility for nice pseudo-animations via `UnicodePlots.jl`). I'm not 100% sure how to do this; one places to start could be https://github.com/ronisbr/TextUserInterfaces.jl. Any work on any of these ideas could be useful! I'd be happy to Skype to talk more and clarify any questions.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-540828221:3483,log,logging,3483,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-540828221,2,['log'],['logging']
Testability,"for example, there is no tridiagonal solver in the pure FFT solver. You might argue that we just put nothing if we don't need it, but then we have more ""ambiguous"" fields like eigenvalues that are not needed in the tridiagonal solver and source_term that is not needed in the FFT. I am not convinced that a single solver would lead to less (or cleaner) code. Mostly because the underlying code (constructor and `solve!` functions) is compact and slender enough to justify writing individual functions for different grids (the number of lines in the docstring for the `DistributedFourierTridiagonalPoissonSolver` is comparable to the code related to the solver). I think this improves the interpretability of the algorithm. Maybe an improvement would be writing a unified constructor that would spit out the different solvers. > 2. It might make sense to split the constructor into two parts, so that we can build a tridiagonal solver even when all three directions are regular. That could be useful for testing, for example. . I have added this capability by passing the `stretched_direction` kwarg. > Also note that in terms of operation count the tridiagonal solve is cheaper than FFT... I think, all things considered, the mixed FFT / tridiagonal solve will have basically the same computational cost as the pure FFT solve only for a stretched x direction. The additional transposes required for a y or stretched z direction will completely dominate the cost of the actual operations. As an example, this is a slab decomposition with a fairly big grid (512 x 256^2) split on 2 GPUs on Tartarus; ![311333172-43dba752-a91f-4b33-8ade-5a6ec57c982b](https://github.com/user-attachments/assets/1a376c1e-9912-4e00-8dca-91deb46338f8); The AlltoAllv is the dominant cost, while the FFT (in between the two transposes) is quite irrelevant. In the near future, I'll perform scaling tests on Perlmutter, which has a much better network, so it might be that (even if I think it's unlikely) the cost is not all c",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2276030073:1481,test,testing,1481,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2276030073,1,['test'],['testing']
Testability,"ge a percentage as the additional time incurred by the CPU architecture cases. . Please see https://github.com/CliMA/Oceananigans.jl/issues/1722#issue-905780649 for benchmark results without WENO5. ```; Oceananigans v0.58.1; Julia Version 1.6.0; Commit f9720dc2eb (2021-03-24 12:55 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4216 CPU @ 2.10GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; EBVERSIONJULIA = 1.6.0; JULIA_DEPOT_PATH = :; EBROOTJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0; EBDEVELJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0/easybuild/avx2-Core-julia-1.6.0-easybuild-devel; JULIA_LOAD_PATH = :; GPU: Tesla V100-SXM2-32GB. Shallow water model benchmarks; ┌───────────────┬─────────────┬───────┬────────────┬────────────┬────────────┬────────────┬───────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼───────┼────────────┼────────────┼────────────┼────────────┼───────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 2.677 ms │ 2.876 ms │ 3.047 ms │ 4.806 ms │ 1.36 MiB │ 2253 │ 10 │; │ CPU │ Float64 │ 64 │ 5.795 ms │ 5.890 ms │ 6.073 ms │ 7.770 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 128 │ 16.979 ms │ 17.350 ms │ 17.578 ms │ 19.993 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 256 │ 62.543 ms │ 63.222 ms │ 63.544 ms │ 67.347 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 512 │ 250.149 ms │ 251.023 ms │ 251.092 ms │ 252.389 ms │ 1.36 MiB │ 2315 │ 10 │; │ CPU │ Float64 │ 1024 │ 990.901 ms │ 993.115 ms │ 993.360 ms │ 996.091 ms │ 1.36 MiB │ 2315 │ 6 │; │ CPU │ Float64 │ 2048 │ 4.002 s │ 4.004 s │ 4.004 s │ 4.007 s │ 1.36 MiB │ 2315 │ 2 │; │ CPU │ Float64 │ 4096 │ 16.371 s │ 16.371 s │ 16.371 s │ 16.371 s │ 1.36 MiB │ 2315 │ 1 │; │ CPU │ Float64 │ 8192 │ 64.657 s │ 64.657 s │ 64.657 s │ 64.657 s │ 1.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-868941194:1220,benchmark,benchmarks,1220,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-868941194,1,['benchmark'],['benchmarks']
Testability,"gence\_tests/point\_exponential\_decay.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL3BvaW50X2V4cG9uZW50aWFsX2RlY2F5Lmps) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | [benchmark/benchmark\_ffts.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mZnRzLmps) | | |; | [...ts/one\_dimensional\_gaussian\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9nYXVzc2lhbl9hZHZlY3Rpb25fZGlmZnVzaW9uLmps) | | |; | [...ests/one\_dimensional\_cosine\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9jb3NpbmVfYWR2ZWN0aW9uX2RpZmZ1c2lvbi5qbA==) | | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | | |; | [test/test\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X29wZXJhdG9ycy5qbA==) | | |; | ... and [49 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792?src=pr&el=footer). Last update [d383b6a...ad6a215](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/792#issuecomment-657511230:2763,test,test,2763,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/792#issuecomment-657511230,2,['test'],['test']
Testability,"ggest leaving a caution statement on the simulation tips page. But I agree it has to be less strongly worded...; > ; > I'll try to provide a MWE that reproduces the behavior, but I'm currently having trouble getting my hands on some GPU, so I'm not sure how fast I can do that. Ok, no rush!. Trig functions aren't generically slower on GPUs than CPUs. On CPUs I think our code is fairly non-optimal right now, so various sources of overhead (eg non-optimal threading) can ""hide"" slow operations on the CPU. On the GPU we are more efficient, so overall speed might depend more sensitively on user code when it's injected. (I'd also argue that the beginning of this section is a bit misleading in how it claims we ""try to optimize"" internal source code. In fact, we have performed almost no performance optimization, and this is an important topic for future work.). I found this reference for the cost of various floating point operations on the CPU:. https://latkin.org/blog/2014/11/09/a-simple-benchmark-of-various-math-operations/. We could reproduce this chart on a GPU with CUDA.jl if we want to provide some useful information to users. I think if we're talking about a _constant_ (the current case), then precomputation hardly harms code complexity (both examples are equally readable to me). Precomputing an _array_ is another story (for example, a forcing function or boundary condition that depends on `sin(x)`). This lesson is definitely not restricted to trigonometric functions or the GPU. The basic principle here is that _there is a trade-off_ between precomputing a potentially expensive operation, and performing it on-the-fly. For constants, precomputation is harmless. For arrays, on-the-fly computation has significant benefits, both for code readability and also possibly for performance (in memory-bound computations). Enlightening users on 1) the existence of this trade-off and 2) how to use benchmarking to find the optimal solution for their problem would probably be useful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2029#issuecomment-952107151:2427,benchmark,benchmarking,2427,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2029#issuecomment-952107151,2,['benchmark'],['benchmarking']
Testability,gh/CliMA/Oceananigans.jl/commit/ee14f8a6047e9ef8ebfc3a221f7ea03cabfcc0e2?el=desc) will **decrease** coverage by `0.89%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1017 +/- ##; ==========================================; - Coverage 70.70% 69.81% -0.90% ; ==========================================; Files 223 155 -68 ; Lines 6554 3412 -3142 ; ==========================================; - Hits 4634 2382 -2252 ; + Misses 1920 1030 -890 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | | |; | [test/test\_coriolis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2NvcmlvbGlzLmps) | | |; | [examples/internal\_wave.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvaW50ZXJuYWxfd2F2ZS5qbA==) | | |; | [examples/ocean\_wind\_mixing\_and\_convection.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb2NlYW5fd2luZF9taXhpbmdfYW5kX2NvbnZlY3Rpb24uamw=) | | |; | [...erification/lid\_driven\_cavity/lid\_driven\_cavity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2xpZF9kcml2ZW5fY2F2aXR5L2xpZF9kcml2ZW5fY2F2aXR5Lmps) | | |; | [test/test\_surface\_waves.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3N1cmZhY2V,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1017#issuecomment-701768991:1212,test,test,1212,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1017#issuecomment-701768991,2,['test'],['test']
Testability,gh/CliMA/Oceananigans.jl/pull/850?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #850 +/- ##; ==========================================; - Coverage 72.70% 72.62% -0.09% ; ==========================================; Files 188 188 ; Lines 5353 5337 -16 ; ==========================================; - Hits 3892 3876 -16 ; Misses 1461 1461 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [benchmark/benchmark\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | `0.00% <ø> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100.00% <ø> (ø)` | |; | [test/test\_regression.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3JlZ3Jlc3Npb24uamw=) | `91.42% <ø> (-0.24%)` | :arrow_down: |; | [test/test\_turbulence\_closures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3R1cmJ1bGVuY2VfY2xvc3VyZXMuamw=) | `94.35% <ø> (+0.75%)` | :arrow_up: |; | [test/runtests\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC9ydW50ZXN0c191dGlscy5qbA==) | `67.56% <73.33%> (+42.56%)` | :arrow_up: |; | [src/Diagnostics/average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2F2ZXJhZ2Uuamw=) | `100.00% <100.00%> (ø)` | |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `92.06% <100.00%> (ø)` | |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `85.71% <100.00%> (ø)` | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pul,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/850#issuecomment-672128397:1523,test,test,1523,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/850#issuecomment-672128397,2,['test'],['test']
Testability,gh/CliMA/Oceananigans.jl/pull/964/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #964 +/- ##; ==========================================; - Coverage 72.52% 72.43% -0.09% ; ==========================================; Files 203 204 +1 ; Lines 5944 5932 -12 ; ==========================================; - Hits 4311 4297 -14 ; - Misses 1633 1635 +2 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/AbstractOperations/interpolation\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9pbnRlcnBvbGF0aW9uX3V0aWxzLmps) | `64.51% <0.00%> (-6.92%)` | :arrow_down: |; | [src/Fields/Fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `75.00% <ø> (ø)` | |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `90.33% <ø> (-0.75%)` | :arrow_down: |; | [src/AbstractOperations/binary\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9iaW5hcnlfb3BlcmF0aW9ucy5qbA==) | `92.30% <100.00%> (+0.20%)` | :arrow_up: |; | [src/Fields/pressure\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9wcmVzc3VyZV9maWVsZC5qbA==) | `100.00% <100.00%> (ø)` | |; | [src/OutputWriters/windowed\_time\_average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvd2luZG93ZWRfdGltZV9hdmVyYWdlLmps) | `97.05% <100.00%> (+3.51%)` | :arrow_up: |; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) ,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/964#issuecomment-695015162:1406,test,test,1406,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/964#issuecomment-695015162,2,['test'],['test']
Testability,"gh/climate-machine/Oceananigans.jl/pull/585?src=pr&el=h1) Report; > Merging [#585](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/588890004e69cfc7db10472b12a9840b8a9ad7b6?src=pr&el=desc) will **increase** coverage by `0.97%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #585 +/- ##; ==========================================; + Coverage 72.17% 73.14% +0.97% ; ==========================================; Files 70 70 ; Lines 2016 2011 -5 ; ==========================================; + Hits 1455 1471 +16 ; + Misses 561 540 -21; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `61.05% <0%> (ø)` | :arrow_up: |; | [src/logger.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585/diff?src=pr&el=tree#diff-c3JjL2xvZ2dlci5qbA==) | `76.19% <0%> (+76.19%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585?src=pr&el=footer). Last update [5888900...01ec7b4](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/585#issuecomment-568143084:1266,log,logger,1266,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/585#issuecomment-568143084,1,['log'],['logger']
Testability,"gression(arch, formulation; regenerate_data = false)VectorInvariantFormulation()^C; > ; > julia> run_shallow_water_regression(arch, VectorInvariantFormulation(); regenerate_data = false); > [2023/02/15 08:10:46.432] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /g/data/v45/nc3020/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; > [2023/02/15 08:10:46.449] INFO Initializing simulation...; > [2023/02/15 08:10:46.450] INFO ... simulation initialization complete (580.963 μs); > [2023/02/15 08:10:46.450] INFO Executing initial time step...; > [2023/02/15 08:10:46.453] INFO ... initial time step complete (3.038 ms).; > [2023/02/15 08:10:46.490] INFO Simulation is stopping after running for 39.012 ms.; > [2023/02/15 08:10:46.490] INFO Model iteration 20 equals or exceeds stop iteration 20.; > [2023/02/15 08:10:46.492] INFO Δu: min=-2.910407e-08, max=+2.965560e-08, mean=+4.423683e-11, absmean=+1.880294e-09, std=+5.514070e-09 (16384/16384 matching grid points); > [2023/02/15 08:10:46.492] INFO Δv: min=-2.905665e-11, max=+2.481851e-11, mean=-8.868305e-14, absmean=+1.029733e-12, std=+2.802455e-12 (16512/16512 matching grid points); > [2023/02/15 08:10:46.492] INFO Δh: min=-4.765574e-07, max=+4.768079e-07, mean=+3.492460e-09, absmean=+2.039438e-07, std=+2.510525e-07 (16384/16384 matching grid points); > Test Passed; > ```; > ; > Weird.; > ; > Why we get that warning for the VectorInvariant formulation?. @navidcy do you know the GPU and driver info for these tests?. As a reference [here's the info for tests on buildkite](https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880):. ```; glwagner@sverdrup:~$ nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Sun Feb 5 17:58:59 2023; Driver Version : 465.27; CUDA Version : 11.3. Attached GPUs : 1; GPU 00000000:82:00.0; Product Name : NVIDIA Quadro P6000; Product Brand : Quadro; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430398013:2608,Test,Test,2608,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430398013,4,"['LOG', 'Test', 'test']","['LOG', 'Test', 'tests']"
Testability,"gumentError: length(size) must be 2.;   | Stacktrace:;   | [1] validate_tupled_argument(::Tuple{Int64,Int64,Int64}, ::Type{T} where T, ::String, ::Int64; greater_than::Int64) at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/src/Grids/input_validation.jl:24;   | [2] validate_tupled_argument(::Tuple{Int64,Int64,Int64}, ::Type{T} where T, ::String, ::Int64) at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/src/Grids/input_validation.jl:24;   | [3] validate_size(::Type{T} where T, ::Type{T} where T, ::Type{T} where T, ::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/src/Grids/input_validation.jl:48;   | [4] VerticallyStretchedRectilinearGrid(::Type{T} where T; architecture::CPU, size::Tuple{Int64,Int64,Int64}, x::Tuple{Int64,Int64}, y::Tuple{Int64,Int64}, zF::UnitRange{Int64}, halo::Tuple{Int64,Int64,Int64}, topology::Tuple{DataType,DataType,DataType}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/src/Grids/vertically_stretched_rectilinear_grid.jl:50;   | [5] vertically_stretched_poisson_solver_correct_answer(::Type{T} where T, ::CPU, ::Tuple{DataType,DataType,DataType}, ::Int64, ::Int64, ::UnitRange{Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/test/test_poisson_solvers.jl:140;   | [6] top-level scope at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/test/test_poisson_solvers.jl:272;   | [7] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119;   | [8] top-level scope at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/test/test_poisson_solvers.jl:270;   | [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119;   | [10] top-level scope at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/test/test_poisson_solvers.jl:175. ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-819603114:1926,test,test,1926,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-819603114,8,"['Test', 'test']","['Test', 'test']"
Testability,"h/CliMA/Oceananigans.jl/commit/b0226271e0353289a785ca323683d2d002029428&el=desc) will **increase** coverage by `0.18%`.; > The diff coverage is `0.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #803 +/- ##; ==========================================; + Coverage 71.05% 71.24% +0.18% ; ==========================================; Files 186 186 ; Lines 4823 4854 +31 ; ==========================================; + Hits 3427 3458 +31 ; Misses 1396 1396 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [examples/one\_dimensional\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb25lX2RpbWVuc2lvbmFsX2RpZmZ1c2lvbi5qbA==) | `0.00% <0.00%> (ø)` | |; | [test/test\_examples.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2V4YW1wbGVzLmps) | `79.54% <0.00%> (ø)` | |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `94.11% <0.00%> (+3.37%)` | :arrow_up: |; | [src/OutputWriters/output\_writer\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `69.64% <0.00%> (+10.66%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803?src=pr&el=footer). Last update [b022627",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/803#issuecomment-660244336:1206,test,test,1206,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/803#issuecomment-660244336,2,['test'],['test']
Testability,h/CliMA/Oceananigans.jl/commit/d383b6a27fc95837b591bd1e68e1aaca50f97da6&el=desc) will **increase** coverage by `0.12%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #793 +/- ##; ==========================================; + Coverage 71.67% 71.80% +0.12% ; ==========================================; Files 184 124 -60 ; Lines 4781 2476 -2305 ; ==========================================; - Hits 3427 1778 -1649 ; + Misses 1354 698 -656 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [...ests/one\_dimensional\_cosine\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9jb3NpbmVfYWR2ZWN0aW9uX2RpZmZ1c2lvbi5qbA==) | | |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | | |; | [...ion/convergence\_tests/ConvergenceTests/analysis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvYW5hbHlzaXMuamw=) | | |; | [...gence\_tests/ConvergenceTests/ForcedFlowFreeSlip.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvRm9yY2VkRmxvd0ZyZWVTbGlwLmps) | | |; | [test/test\_forcings.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZvcmNpbmdzLmps) | | |; | [...vergence\_tests/analyze\_single\_forced\_fixed\_slip.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcm,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/793#issuecomment-657517751:1268,test,test,1268,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/793#issuecomment-657517751,2,['test'],['test']
Testability,h/CliMA/Oceananigans.jl/pull/839?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #839 +/- ##; =======================================; Coverage 72.51% 72.52% ; =======================================; Files 189 189 ; Lines 5210 5299 +89 ; =======================================; + Hits 3778 3843 +65 ; - Misses 1432 1456 +24 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Fields/show\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zaG93X2ZpZWxkcy5qbA==) | `0.00% <0.00%> (ø)` | |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `88.88% <ø> (ø)` | |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `85.71% <ø> (ø)` | |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `91.78% <69.23%> (-6.70%)` | :arrow_down: |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `92.06% <85.71%> (+0.99%)` | :arrow_up: |; | [src/Fields/field\_tuples.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZF90dXBsZXMuamw=) | `89.18% <100.00%> (ø)` | |; | [src/OutputWriters/output\_writer\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `64.28% <100.00%> (+5.31%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/do,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/839#issuecomment-670153251:1523,test,test,1523,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/839#issuecomment-670153251,2,['test'],['test']
Testability,"ha1 = ""5402b5674b3068ca570771c11da9a57bfa70acd4""; uuid = ""d360d2e6-b24c-11e9-a2a3-2a2ae2dbcce4""; version = ""0.9.39"". [[Compat]]; deps = [""Base64"", ""Dates"", ""DelimitedFiles"", ""Distributed"", ""InteractiveUtils"", ""LibGit2"", ""Libdl"", ""LinearAlgebra"", ""Markdown"", ""Mmap"", ""Pkg"", ""Printf"", ""REPL"", ""Random"", ""SHA"", ""Serialization"", ""SharedArrays"", ""Sockets"", ""SparseArrays"", ""Statistics"", ""Test"", ""UUIDs"", ""Unicode""]; git-tree-sha1 = ""ac4132ad78082518ec2037ae5770b6e796f7f956""; uuid = ""34da2185-b29b-5c13-b0c7-acf172513d20""; version = ""3.27.0"". [[CompilerSupportLibraries_jll]]; deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]; git-tree-sha1 = ""8e695f735fca77e9708e795eda62afdb869cbb70""; uuid = ""e66e0078-7015-5450-92f7-15fbd957f2ae""; version = ""0.3.4+0"". [[Crayons]]; git-tree-sha1 = ""3f71217b538d7aaee0b69ab47d9b7724ca8afa0d""; uuid = ""a8cc5b0e-0ffa-5ad4-8c14-923d3ee1735f""; version = ""4.0.4"". [[CubedSphere]]; deps = [""Elliptic"", ""Printf"", ""Requires"", ""Rotations"", ""TaylorSeries"", ""Test""]; git-tree-sha1 = ""b7df0c21789cb6adf5f1e2eb7a52accae5b867f6""; uuid = ""7445602f-e544-4518-8976-18f8e8ae6cdb""; version = ""0.1.0"". [[DataAPI]]; git-tree-sha1 = ""dfb3b7e89e395be1e25c2ad6d7690dc29cc53b1d""; uuid = ""9a962f9c-6df0-11e9-0e5d-c546b8b5ee8a""; version = ""1.6.0"". [[DataStructures]]; deps = [""Compat"", ""InteractiveUtils"", ""OrderedCollections""]; git-tree-sha1 = ""4437b64df1e0adccc3e5d1adbc3ac741095e4677""; uuid = ""864edb3b-99cc-5e75-8d2d-829cb0a9cfe8""; version = ""0.18.9"". [[DataValueInterfaces]]; git-tree-sha1 = ""bfc1187b79289637fa0ef6d4436ebdfe6905cbd6""; uuid = ""e2d170a0-9d28-54be-80f0-106bbe20a464""; version = ""1.0.0"". [[Dates]]; deps = [""Printf""]; uuid = ""ade2ca70-3891-5945-98fb-dc099432e06a"". [[DelimitedFiles]]; deps = [""Mmap""]; uuid = ""8bb1440f-4735-579b-a4ab-409b98df4dab"". [[DiffRules]]; deps = [""NaNMath"", ""Random"", ""SpecialFunctions""]; git-tree-sha1 = ""214c3fcac57755cfda163d91c58893a8723f93e9""; uuid = ""b552c78f-8df3-52c6-915a-8e097449b14b""; version = ""1.0.2"". [[Distributed]]; deps = [""Random"", ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827235838:3148,Test,Test,3148,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827235838,1,['Test'],['Test']
Testability,happy to merge this as is and then test it with the example,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3815#issuecomment-2388998683:35,test,test,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3815#issuecomment-2388998683,1,['test'],['test']
Testability,happy to merge this whenever. there's a few experimental things in there but we can add tests later,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2864#issuecomment-1384668360:88,test,tests,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2864#issuecomment-1384668360,1,['test'],['tests']
Testability,he diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #564 +/- ##; ==========================================; - Coverage 70.90% 68.67% -2.24% ; ==========================================; Files 187 126 -61 ; Lines 5180 2678 -2502 ; ==========================================; - Hits 3673 1839 -1834 ; + Misses 1507 839 -668 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [test/test\_surface\_waves.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3N1cmZhY2Vfd2F2ZXMuamw=) | | |; | [test/test\_pressure\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ByZXNzdXJlX3NvbHZlcnMuamw=) | | |; | [test/test\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZpZWxkcy5qbA==) | | |; | [test/test\_dynamics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2R5bmFtaWNzLmps) | | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | | |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | | |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [test/test\_abstract\_operations.jl](https://codecov.io,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/564#issuecomment-564625738:1359,test,test,1359,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/564#issuecomment-564625738,2,['test'],['test']
Testability,"he problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the issue about the pressure gradient term with bathymetry but happy to get into it sometime.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:1178,test,tests,1178,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496,8,['test'],"['test', 'tests']"
Testability,"he two and the answer is yes. I am including `vtruth.png`, `vnew.png` and `vdiff.png`, One observation is the amplitude of the `truth` is significantly larger and noisier. I wonder whether the noise that was added before was of larger amplitude than what we have here?. ![vdiff](https://user-images.githubusercontent.com/8239041/221380109-96ff99c1-d6cf-4ce5-9b40-52c38eaaca11.png); ![vtruth](https://user-images.githubusercontent.com/8239041/221380111-3ee2224e-3ba3-4169-90e2-3f03cd00e78b.png); ![vnew](https://user-images.githubusercontent.com/8239041/221380112-8a34bccf-4485-406b-92e6-74f6a13f479e.png). ```; julia> include(""test_shallow_water_regression.jl""); [2023/02/25 15:42:20.222] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/25 15:42:20.223] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/25 15:42:20.355] INFO Running shallow water regression tests...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initialization complete (685.283 μs); [2023/02/25 15:42:21.129] INFO Executing initial time step...; [2023/02/25 15:42:23.148] INFO ... initial time step complete (2.019 seconds).; [2023/02/25 15:42:23.672] INFO Simulation is stopping after running for 2.521 seconds.; [2023/02/25 15:42:23.672] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/25 15:42:23.814] INFO Δu: min=-1.673332e-04, max=+1.094476e-04, mean=+2.507827e-07, absmean=+5.538768e-06, std=+1.574960e-05 (16384/16384 matching grid points); [2023/02/25 15:42:23.814] INFO Δv: min=-2.878156e-04, max=+1.230686e-04, mean=+1.406671e-07, absmean=+2.141572e-05, std=+4.550342e-05 (256/16512 matching grid points); [2023/02/25 15:42:23.814] INFO Δh: min=-1.126421e-03,",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:1758,test,tests,1758,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446,1,['test'],['tests']
Testability,"help a lot. Went from being 2.1x slower to being 1.3x slower. Still a significant slowdown considering that these forcing functions aren't as computationally demanding as the rest of the right-hand-side calculation. But good enough for me right now. It can be a very powerful feature (essentially replacing the MITgcm RBCS package, for one example) so would be good to get maximum performance out of the forcing functions. But it will probably always depend on exactly how you write them. So might make sense to have guidelines on writing ""performant forcing functions"" in the documentation. ---; Attempt 1:; ```julia; @inline function Fu(grid, U, Φ, i, j, k); if k == 1; return -2*0.1/grid.Δz^2 * (U.u[i, j, 1] - 0); elseif k == grid.Nz; return -2*0.1/grid.Δz^2 * (U.u[i, j, grid.Nz] - 0); else; return 0; end; end. @inline FT(grid, U, Φ, i, j, k) = ifelse(k == 1, -1e-4 * (Φ.T[i, j, 1] - 0), 0); ```; ```; ──────────────────────────────────────────────────────────────────────────────────────────────────; Forcing function benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 59.9s / 0.41% 7.38GiB / 0.36% . Section ncalls time %tot avg alloc %tot avg; ──────────────────────────────────────────────────────────────────────────────────────────────────; 128×128×128 with forcing (GPU, Float64) 10 166ms 68.2% 16.6ms 13.8MiB 51.2% 1.38MiB; 128×128×128 no forcing (GPU, Float64) 10 77.4ms 31.8% 7.74ms 13.1MiB 48.8% 1.31MiB; ──────────────────────────────────────────────────────────────────────────────────────────────────; ```; ---; Attempt 2:; ```julia. @inline function Fu(grid, U, Φ, i, j, k); if k == 1; return @inbounds -2*0.1/grid.Δz^2 * (U.u[i, j, 1] - 0); elseif k == grid.Nz; return @inbounds -2*0.1/grid.Δz^2 * (U.u[i, j, grid.Nz] - 0); else; return 0; end; end. @inline FT(grid, U, Φ, i, j, k) = @inbounds ifelse(k == 1, -1e-4 * (Φ.T[i, j, 1] - 0), 0); ```; ```; ───────────────────────────────────────────────────────────────────────────────────",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/365#issuecomment-525326208:1408,benchmark,benchmarks,1408,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/365#issuecomment-525326208,1,['benchmark'],['benchmarks']
Testability,"hing, Nothing, Nothing, Nothing}, buoyancy::Nothing, coriolis::Nothing, free_surface::ImplicitFreeSurface{Nothing, Float64, Nothing, Nothing, Symbol, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, forcing::NamedTuple{(), Tuple{}}, closure::Nothing, boundary_conditions::NamedTuple{(), Tuple{}}, tracers::Nothing, particles::Nothing, velocities::Nothing, pressure::Nothing, diffusivity_fields::Nothing, auxiliary_fields::NamedTuple{(), Tuple{}});   | @ Oceananigans.Models.HydrostaticFreeSurfaceModels ~/builds/tartarus-1/clima/oceananigans/src/Models/HydrostaticFreeSurfaceModels/hydrostatic_free_surface_model.jl:113;   | [2] macro expansion;   | @ ~/builds/tartarus-1/clima/oceananigans/test/test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl:41 [inlined];   | [3] macro expansion;   | @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined];   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/test/test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl:9;   | [5] include(fname::String);   | @ Base.MainInclude ./client.jl:444;   | [6] macro expansion;   | @ ~/builds/tartarus-1/clima/oceananigans/test/runtests.jl:65 [inlined];   | [7] macro expansion;   | @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined];   | [8] macro expansion;   | @ ~/builds/tartarus-1/clima/oceananigans/test/runtests.jl:58 [inlined];   | [9] macro expansion;   | @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined];   | [10] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/test/runtests.jl:4;   | [11] include(fname::String);   | @ Base.MainInclude ./client.jl:444;   | [12] top-level scope;   | @ none:6;   | [13] eval;   | @ ./boot.jl:360 [inlined];   | [14] exec_options(opts::Base.JLOptions);   | @ Base ./client.jl:261;   | [15] _start();   | @ Base ./client.jl:485;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1001728185:2526,test,test,2526,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1001728185,7,"['Test', 'test']","['Test', 'test']"
Testability,"hm, on second thought I think what you did there @elise-palethorpe is fine!; ```Julia; julia> using BenchmarkTools. julia> @btime _solve!(φ_mg_array, ml, r_array);; 146.417 μs (0 allocations: 0 bytes); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1143185831:100,Benchmark,BenchmarkTools,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1143185831,1,['Benchmark'],['BenchmarkTools']
Testability,"hm... I merged master and the unit tests seem to fail saying. ```julia. [2021/04/09 19:34:17.876] WARN Checksum did not match -@-> /storage7/buildkite-agent/.julia-1983/packages/DataDeps/ooWXe/src/verification.jl:24; --;   | Do you wish to Abort, Retry download or Ignore;   | [a/r/i]; ```. Apparently buildkite is not answering so tests stop at that point indefinitely... https://buildkite.com/clima/oceananigans/builds/1983#a259cdda-aa8b-40f1-861f-e198c1e7c7f2",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1530#issuecomment-817029289:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1530#issuecomment-817029289,2,['test'],['tests']
Testability,hm... before we start pondering on that I just rerun the test and see what happens :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427116093:57,test,test,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427116093,1,['test'],['test']
Testability,hm... shall I have a look? seems like test are failing?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1971#issuecomment-917318770:38,test,test,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1971#issuecomment-917318770,1,['test'],['test']
Testability,"hm... so we get this [error](https://buildkite.com/clima/oceananigans/builds/11766#0188bd84-7a4a-4062-8e5d-a6ca143ab861/19-335) although we added a method. . Is it because we defined, e.g., `xspacing` inside `Oceananigans.Grids` and then added a new method in `Oceananigans.ImmersedBoundaries` but in the unit tests we only called: `using Oceananigans.Grids: xspacing`?. ```Julia; Grid initialization: Error During Test at /var/lib/buildkite-agent/builds/tartarus-7/clima/oceananigans/test/test_grids.jl:203; Test threw exception; Expression: minimum_xspacing(grid) ≈ FT(π / 3); MethodError: xspacing(::Int64, ::Int64, ::Int64, ::ImmersedBoundaryGrid{Float32, Periodic, Periodic, Bounded, RectilinearGrid{Float32, Periodic, Periodic, Bounded, Float32, Float32, Float32, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64, Int64}}, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64, Int64}}, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64, Int64}}, CPU}, GridFittedBottom{OffsetMatrix{Float32, Matrix{Float32}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, CPU}, ::Center, ::Center, ::Center) is ambiguous. Candidates:; xspacing(i, j, k, grid::ImmersedBoundaryGrid, args...) in Oceananigans.ImmersedBoundaries at /var/lib/buildkite-agent/builds/tartarus-7/clima/oceananigans/src/ImmersedBoundaries/immersed_grid_metrics.jl:40; xspacing(i, j, k, grid, ::Center, ::Center, ::Center) in Oceananigans.Operators at /var/lib/buildkite-agent/builds/tartarus-7/clima/oceananigans/src/Operators/spacings_and_areas_and_volumes.jl:264; Possible fix, define; xspacing(::Any, ::Any, ::Any, ::ImmersedBoundaryGrid, ::Center, ::Center, ::Center); Stacktrace:; [1] getindex; @ ~/builds/tartarus-7/clima/oceananigans/src/AbstractOperations/kernel_function_operation.jl:73 [inlined]; [2] getindex; @ ~/builds/tartarus-7/clima/oceananigans/src/AbstractOperations/conditional_operations.jl:120 [inlined]; [3] getindex; @ ./subarray.jl:282 [inlined]; [4] _getindex; ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-1592864091:310,test,tests,310,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-1592864091,4,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,hm... tests pass here after 3-4 days!; weird.; seems like just something made the code extremely slow?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1530#issuecomment-818242327:6,test,tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1530#issuecomment-818242327,1,['test'],['tests']
Testability,hm... the distributed tests are actually failing; they were passing after [1936d62](https://github.com/CliMA/Oceananigans.jl/pull/3580/commits/1936d629224951de2c7845b0eeaffbbba58dc8ff) and I don't see anything that would justify this in the commits that followed..,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3580#issuecomment-2369883036:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3580#issuecomment-2369883036,1,['test'],['tests']
Testability,https://clima.github.io/OceananigansDocumentation/previews/PR1940. But the docs log will also say if that has been deployed or not. If there was a DOCUMENTER_KEY issue or something else...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1940#issuecomment-901431732:80,log,log,80,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1940#issuecomment-901431732,1,['log'],['log']
Testability,https://codecov.io/gh/CliMA/Oceananigans.jl/commit/73a6798b6133f678f2c7ffd52f363f81ba9f097e?el=desc) will **increase** coverage by `0.26%`.; > The diff coverage is `59.09%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #994 +/- ##; ==========================================; + Coverage 71.75% 72.02% +0.26% ; ==========================================; Files 220 219 -1 ; Lines 6381 6399 +18 ; ==========================================; + Hits 4579 4609 +30 ; + Misses 1802 1790 -12 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Advection/Advection.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi9BZHZlY3Rpb24uamw=) | `100.00% <ø> (ø)` | |; | [test/test\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmcuamw=) | `100.00% <ø> (ø)` | |; | [...ification/periodic\_advection/periodic\_advection.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL3BlcmlvZGljX2FkdmVjdGlvbi9wZXJpb2RpY19hZHZlY3Rpb24uamw=) | `0.00% <0.00%> (ø)` | |; | [src/Advection/upwind\_biased\_fifth\_order.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi91cHdpbmRfYmlhc2VkX2ZpZnRoX29yZGVyLmps) | `65.00% <65.00%> (ø)` | |; | [src/Fields/Fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `75.00% <0.00%> (-5.00%)` | :arrow_down: |; | [src/Grids/Grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL0dyaWRzLmps) | `83.33% <0.00%> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/g,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/994#issuecomment-700312179:1185,test,test,1185,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/994#issuecomment-700312179,2,['test'],['test']
Testability,"https://github.com/CliMA/Oceananigans.jl/pull/1733 changes the advection schemes a bit and adds the ""boundary buffer"" as an integer that's known at compile time. Might be worth testing that PR since it changes the topological condition to use that type information. On master we have. https://github.com/CliMA/Oceananigans.jl/blob/383173d11a0c96182a4349fc1e33755207bf0886/src/Advection/topologically_conditional_interpolation.jl#L17-L22. whereas on https://github.com/CliMA/Oceananigans.jl/pull/1733 it's. https://github.com/CliMA/Oceananigans.jl/blob/17c01a9f3eca4e8576458f6c6f444f9cd2278cc3/src/Advection/topologically_conditional_interpolation.jl#L17-L22",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868100562:177,test,testing,177,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868100562,1,['test'],['testing']
Testability,"https://github.com/CliMA/Oceananigans.jl/pull/2502/commits/75f423d276352ecf96d845a64e46578b7f7a3a7d adds a method that allows us to broadcast with windowed fields. GPUArrays / CUDA include utilities for ""one-level"" wrapped arrays, ie `SubArray` / `view` of `CuArray`. But they do not include utilities for `OffsetArray` of GPU array (or heaven forbid, `OffsetArray` of `SubArray` of `CuArray`). So that commit supports experimental syntax for broadcasting with ""windowed fields"" which are created by `view`. It might only work with 3D windows (ie if a field is _not_ windowed in some direction it won't have expected behavior). But I think that experimental support is ok for now since it simplifies our tests...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2502#issuecomment-1114900588:704,test,tests,704,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2502#issuecomment-1114900588,2,['test'],['tests']
Testability,"https://github.com/MikeInnes/Requires.jl ?. On Fri, Jun 14, 2019 at 10:47 AM Ali Ramadhan <notifications@github.com>; wrote:. > I'm strongly opposed to having multiple small packages.; >; > Why is that, given the benefits?; >; > Mainly I think we can get all the same benefits by maintaining a single; > unified and tidy repository with sub-modules. I don't see Oceananigans as a; > complex project yet, we're barely at 2,500 lines of code (minus turbulence; > closure operators which aren't integrated yet).; >; > I can see reasons for having a separate repository for examples and; > tutorials if there are enough of them, but I don't see e.g. the output; > writers as being logically separate from the main code. As a stand alone; > package, OceananigansOutput.jl doesn't do anything useful. Something like; > TurbulenceClosures.jl could though.; >; > Keeping things in tidy submodules within a single repository increases; > code visibility, which I think is important. When I see a package or; > framework spread across multiply small packages I find it hard to get an; > idea about what it can do.; >; > Another nice thing is we currently have ""unified versioning"" so when; > releases occur we know everything works together. We don't have to worry; > about running with Oceananigans v0.x with OceananigansPlotting v0.y and; > OceananigansOutput#master to fix some issue.; >; > From a development perspective, issues and pull requests are now spread; > across multiple repositories and we can end up with pull requests that; > depend on other pull requests in other repositories, e.g. when adding in; > halo regions the main code got refactored but so did the output writers and; > plotting code would change as well. We can also end up with multiple test; > suites that need to pass, plus possibly multiple CI pipelines to manage. So; > right now it's easy to make atomic changes that touch upon multiple pieces; > of code (and we'll probably be in this stage where we need to refactor; > frequ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/284#issuecomment-502146049:677,log,logically,677,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/284#issuecomment-502146049,1,['log'],['logically']
Testability,"hydrostaticModel(; grid); simulation = Simulation(model; Δt, stop_time). progress_message(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress_message, TimeInterval(δt)). checkpointer = Checkpointer(model,; schedule = TimeInterval(stop_time),; prefix = ""test"",; cleanup = false). simulation.output_writers[:checkpointer] = checkpointer. return simulation; end. rm(""test_iteration*.jld2"", force=true). Δt = 1 # timestep (s); T1 = 4 # first simulation stop time (s); T2 = 2T1 # second simulation stop time (s); δt = 2 # progress message frequency. # Run a simulation that saves data to a checkpoint; simulation = test_simulation(T1, Δt, δt); run!(simulation). # Now try again, but picking up from the previous checkpoint; N = iteration(simulation); checkpoint = ""test_iteration$N.jld2""; simulation = test_simulation(T2, Δt, δt); run!(simulation, pickup=checkpoint); ```. This reproduces the issue because I get. ```julia; julia> include(""test.jl""); [ Info: Initializing simulation...; [ Info: Iter: 0, time: 0 seconds; [ Info: ... simulation initialization complete (2.697 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (5.721 seconds).; [ Info: Iter: 2, time: 2 seconds; [ Info: Simulation is stopping after running for 8.786 seconds.; [ Info: Simulation time 4 seconds equals or exceeds stop time 4 seconds.; [ Info: Iter: 4, time: 4 seconds; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (529.973 μs); [ Info: Executing initial time step...; [ Info: ... initial time step complete (575.447 μs).; [ Info: Iter: 5, time: 5 seconds; [ Info: Iter: 6, time: 6 seconds; [ Info: Iter: 7, time: 7 seconds; [ Info: Simulation is stopping after running for 5.469 ms.; [ Info: Simulation time 8 seconds equals or exceeds stop time 8 seconds.; [ Info: Iter: 8, time: 8 seconds; ```. When the second simulation runs, I think we expect to see `Iter: 6`, and t",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3657#issuecomment-2246064310:1345,test,test,1345,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3657#issuecomment-2246064310,2,['test'],['test']
Testability,"iMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `82.50% <30.00%> (-4.78%)` | :arrow_down: |; | [src/Fields/abstract\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hYnN0cmFjdF9maWVsZC5qbA==) | `60.37% <83.33%> (+7.43%)` | :arrow_up: |; | [src/BoundaryConditions/zero\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy96ZXJvX2hhbG9fcmVnaW9ucy5qbA==) | `78.94% <87.50%> (+2.47%)` | :arrow_up: |; | [src/Fields/averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hdmVyYWdlZF9maWVsZC5qbA==) | `94.44% <94.44%> (ø)` | |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `71.79% <100.00%> (ø)` | |; | [src/Diagnostics/average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2F2ZXJhZ2Uuamw=) | `96.42% <100.00%> (ø)` | |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | `99.33% <100.00%> (-0.01%)` | :arrow_down: |; | ... and [10 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930?src=pr&el=footer). Last update [0f33c1d...69d5cd7](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/930#issuecomment-690826704:2691,test,test,2691,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/930#issuecomment-690826704,2,['test'],['test']
Testability,"id = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo ; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Flat y; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Flat on vertically stretched grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Flat y; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, max(Δz)=0.5 ; [ Info: Testing Lagrangian particle tracking [CPU, RungeKutta3] with y Periodic on vertically uniform grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, RungeKutta3] with y Periodic on vertically stretched grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, max(Δz)=0.5; [ Info: Testing Lagrangian particle tracking [CPU, RungeKutta3] with y Flat on vertically uniform grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo ; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Flat y; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, RungeKutta3] with y Flat on vertically stretched grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo ; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Flat y; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232:2879,Test,Testing,2879,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232,1,['Test'],['Testing']
Testability,"idk why tests are failing here, but I think the change is good.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3385#issuecomment-1805888321:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3385#issuecomment-1805888321,1,['test'],['tests']
Testability,"idows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;""><div class=""JobLogOutputComponent__Body"" style=""box-sizing: border-box; font-family: SFMono-Regular, Monaco, Menlo, Consolas, &quot;Liberation Mono&quot;, Courier, monospace;"">; Oceananigans \| 818 12 830; --; &nbsp; | Distributed MPI Oceananigans \| 816 12 828; &nbsp; | Multi architectures rank connectivity \| 28 28; &nbsp; | Local grids for distributed models \| 24 24; &nbsp; | Injection of halo communication BCs \| 168 168; &nbsp; | Halo communication \| 588 12 600; &nbsp; | Time stepping IncompressibleModel \| 4 4; &nbsp; | Time stepping ShallowWaterModel \| 4 4; &nbsp; | Distributed FFT-based Poisson solver \| 2 2; &nbsp; | ERROR: ERROR: ERROR: ERROR: LoadError: LoadError: LoadError: LoadError: Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | ERROR: ERROR: ERROR: ERROR: Package Oceananigans errored during testing; &nbsp; | Stacktrace:Package Oceananigans errored during testing; &nbsp; | Stacktrace:Package Oceananigans errored during testing; &nbsp; | Stacktrace:; &nbsp; | [1] pkgerrorPackage Oceananigans errored during testing; &nbsp; | Stack",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081:1697,test,test,1697,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081,1,['test'],['test']
Testability,"ieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, b::Field{Center, Center, Center, Nothing, RectilinearGrid{Float64, Flat, Flat, Bounded, Float64, Float64, OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{Nothing, Nothing, Nothing, Nothing, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ Oceananigans.Fields /g/data/v45/nc3020/Oceananigans.jl/src/Fields/regridding_fields.jl:48; [19] macro expansion; @ /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:422 [inlined]; [20] macro expansion; @ /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/Test/src/Test.jl:1357 [inlined]; [21] macro expansion; @ /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:383 [inlined]; [22] macro expansion; @ /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/Test/src/Test.jl:1357 [inlined]; [23] top-level scope; @ /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:164; [24] include(fname::String); @ Base.MainInclude ./client.jl:476; [25] top-level scope; @ REPL[51]:1; [26] top-level scope; @ /g/data/v45/nc3020/.julia/packages/CUDA/DfvRa/src/initialization.jl:52; [27] eval; @ ./boot.jl:368 [inlined]; [28] eval_user_input(ast::Any, backend::REPL.REPLBackend); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:151; [29] repl_backend_loop(backend::REPL.REPLBackend); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:247; [30] start_repl_backend(backend::REPL.REPLBackend, c",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221177574:16826,test,test,16826,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221177574,1,['test'],['test']
Testability,"ields/field.jl:248; [5] view(f::Field{Center, Center, Face, Nothing, RectilinearGrid{…}, Tuple{…}, OffsetArrays.OffsetArray{…}, Float64, FieldBoundaryConditions{…}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{…}}, i::UnitRange{Int64}, j::UnitRange{Int64}, k::UnitRange{Int64}); @ Oceananigans.Fields ~/github/Oceananigans.jl/src/Fields/field.jl:316; [6] Field; @ ~/github/Oceananigans.jl/src/Fields/field.jl:182 [inlined]; [7] construct_output(user_output::Field{…}, grid::RectilinearGrid{…}, user_indices::Tuple{…}, with_halos::Bool); @ Oceananigans.OutputWriters ~/github/Oceananigans.jl/src/OutputWriters/output_construction.jl:50; [8] (::Oceananigans.OutputWriters.var""#28#29""{Tuple{…}, Bool, HydrostaticFreeSurfaceModel{…}})(name::Symbol); @ Oceananigans.OutputWriters ./none:0; [9] iterate; @ ./generator.jl:47 [inlined]; [10] merge(a::@NamedTuple{}, itr::Base.Generator{Tuple{Symbol}, Oceananigans.OutputWriters.var""#28#29""{Tuple{…}, Bool, HydrostaticFreeSurfaceModel{…}}}); @ Base ./namedtuple.jl:364; [11] NamedTuple(itr::Base.Generator{Tuple{Symbol}, Oceananigans.OutputWriters.var""#28#29""{Tuple{…}, Bool, HydrostaticFreeSurfaceModel{…}}}); @ Base ./namedtuple.jl:151; [12] JLD2OutputWriter(model::HydrostaticFreeSurfaceModel{…}, outputs::@NamedTuple{…}; filename::String, schedule::TimeInterval, dir::String, indices::Tuple{…}, with_halos::Bool, array_type::Type, file_splitting::Oceananigans.OutputWriters.NoFileSplitting, overwrite_existing::Bool, init::typeof(Oceananigans.OutputWriters.noinit), including::Vector{…}, verbose::Bool, part::Int64, jld2_kw::Dict{…}); @ Oceananigans.OutputWriters ~/github/Oceananigans.jl/src/OutputWriters/jld2_output_writer.jl:190; [13] top-level scope; @ ~/github/Oceananigans.jl/test.jl:19; [14] include(fname::String); @ Base.MainInclude ./client.jl:489; [15] top-level scope; @ REPL[1]:1; in expression starting at /Users/jmtzmo/github/Oceananigans.jl/test.jl:19; Some type information was truncated. Use `show(err)` to see complete types.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3260#issuecomment-2014615658:6007,test,test,6007,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3260#issuecomment-2014615658,2,['test'],['test']
Testability,iff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #937 +/- ##; =======================================; Coverage 72.61% 72.61% ; =======================================; Files 199 199 ; Lines 5806 5806 ; =======================================; Hits 4216 4216 ; Misses 1590 1590 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | `99.29% <ø> (ø)` | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | `100.00% <ø> (ø)` | |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `97.86% <100.00%> (ø)` | |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | `99.33% <100.00%> (ø)` | |; | [test/test\_forcings.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZvcmNpbmdzLmps) | `100.00% <100.00%> (ø)` | |; | [test/test\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmcuamw=) | `100.00% <100.00%> (ø)` | |; | [test/test\_turbulence\_closures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3R1cmJ1bGVuY2VfY2xvc3VyZXMuamw=) | `100.00% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/937#issuecomment-691244592:1321,test,test,1321,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/937#issuecomment-691244592,2,['test'],['test']
Testability,igans.jl/pull/1047/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2J1b3lhbmN5Lmps) | `100.00% <0.00%> (ø)` | |; | [...ergence\_tests/one\_dimensional\_advection\_schemes.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9hZHZlY3Rpb25fc2NoZW1lcy5qbA==) | `0.00% <0.00%> (ø)` | |; | [benchmark/benchmark\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | `0.00% <0.00%> (ø)` | |; | [...ests/ConvergenceTests/DoublyPeriodicTaylorGreen.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvRG91Ymx5UGVyaW9kaWNUYXlsb3JHcmVlbi5qbA==) | `0.00% <0.00%> (ø)` | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvZWFkeV90dXJidWxlbmNlLmps) | `0.00% <0.00%> (ø)` | |; | [test/test\_coriolis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2NvcmlvbGlzLmps) | `85.33% <0.00%> (ø)` | |; | [test/test\_time\_stepping\_bcs.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmdfYmNzLmps) | `98.21% <0.00%> (ø)` | |; | [docs/bibliography.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-ZG9jcy9iaWJsaW9ncmFwaHkuamw=) | `0.00% <0.00%> (ø)` | |; | [...ergence\_tests/ConvergenceTests/ConvergenceTests.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvQ29udmVyZ2VuY2VUZXN0cy5qbA==) | `0.00% <0.00%> (ø)` | |; | ... and [95 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047?src=pr&el=continue).; ,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1047#issuecomment-707893132:2252,test,test,2252,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1047#issuecomment-707893132,2,['test'],['test']
Testability,igans.jl/pull/815?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #815 +/- ##; ==========================================; - Coverage 71.54% 70.67% -0.88% ; ==========================================; Files 185 188 +3 ; Lines 5046 5111 +65 ; ==========================================; + Hits 3610 3612 +2 ; - Misses 1436 1499 +63 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/815?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Advection/centered\_fourth\_order.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/815/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi9jZW50ZXJlZF9mb3VydGhfb3JkZXIuamw=) | `0.00% <0.00%> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/815/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100.00% <ø> (ø)` | |; | [src/Operators/Operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/815/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9PcGVyYXRvcnMuamw=) | `100.00% <ø> (ø)` | |; | [test/runtests.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/815/diff?src=pr&el=tree#diff-dGVzdC9ydW50ZXN0cy5qbA==) | `77.77% <ø> (ø)` | |; | [src/TimeSteppers/time\_stepping\_kernels.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/815/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy90aW1lX3N0ZXBwaW5nX2tlcm5lbHMuamw=) | `73.46% <57.14%> (ø)` | |; | [src/Advection/Advection.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/815/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi9BZHZlY3Rpb24uamw=) | `100.00% <100.00%> (ø)` | |; | [src/Advection/centered\_second\_order.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/815/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi9jZW50ZXJlZF9zZWNvbmRfb3JkZXIuamw=) | `100.00% <100.00%> (ø)` | |; | [src/Advection/momentum\_advection\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/815/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi9tb21lbnR1bV9hZHZlY3Rpb25fb3BlcmF0b3JzLmps) | `100.00% <100.00%> (ø)` | |; | [src/Advection/tracer\_adve,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/815#issuecomment-662674506:1545,test,test,1545,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/815#issuecomment-662674506,1,['test'],['test']
Testability,"iguration/. * Configuring SLURM correctly may also require some trial and error, because the documentation is unclear and there are a huge number of options. I can't figure out if the documentation is wrong, in fact, or if instead the engaging cluster does not support some options. Either way, a small test script like. ```julia; using MPI. MPI.Init(); @show MPI.Comm_rank(MPI.COMM_WORLD); @show MPI.Comm_size(MPI.COMM_WORLD); ```. Is helpful for debugging. Also, I recommend first trying to start jobs interactively before using `sbatch`. Interactive jobs launch faster, so we get a faster trial-error iteration. I'm still working on things, but it seems like another point may be salient:. * Initialize / precompile outside of a parallel job before trying to launch a parallel job via `mpiexec`. Here are some notes that may be specific to engaging:. I'm using `srun` to get a 4-GPU node to use interactively:. ```; srun -p my_partition --tasks-per-node=4 --cpus-per-task=32 --gres=gpu:4 --gpus-per-node=4 --mem=0 -t 01:00:00 -N 1; ```. it seems we have to use the option `gpus-per-node`, rather than setting the total number of GPUs. Also we redundantly also have to specify `gres=gpu:4` (`gres` stands for ""generalized resource""). Why `gres` can't tell what `gpus-per-node` is, I don't know. `-N 1` means 1 node. Finally we also have to specify ``--tasks-per-node=4` (matching `gres` _and_ the number of GPUs per node), otherwise we cannot launch `mpiexec` with 4 tasks (1 for each GPU). It's helpful to have the maximum number of CPUs for precompilation. Otherwise precompilation is very slow. I also set. ```; export JULIA_NUM_PRECOMPILE_TASKS=64; ```. (half the total) --- adapt for your system. Here is also a small test script for debuggin Oceananigans:. ```julia; using Oceananigans; arch = Distributed(GPU()); @show arch; ```. as a side note, it would be nice if we could print to the screen from different ranks without them talking over one another. It makes it hard to read the output.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2389107436:2292,test,test,2292,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2389107436,2,['test'],['test']
Testability,"ildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | ERROR: ERROR: ERROR: ERROR: Package Oceananigans errored during testing; &nbsp; | Stacktrace:Package Oceananigans errored during testing; &nbsp; | Stacktrace:Package Oceananigans errored during testing; &nbsp; | Stacktrace:; &nbsp; | [1] pkgerrorPackage Oceananigans errored during testing; &nbsp; | Stacktrace:; &nbsp; | [1] (pkgerror; &nbsp; | [1] (pkgerror::(; &nbsp; | [1] ::pkgerrorString) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] (::test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1578; &nbsp; | [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] (),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:327; &nbsp; | [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:314; &nbsp; | [5] #test#61 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:67 [inlined]; &nbsp; | [6] test at /buildworker/worker/package_l",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081:2850,test,test,2850,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081,1,['test'],['test']
Testability,"ilinearGrid(arch, topology=topo, size=(4, 4, 4); domain...). λ1(x, y, z) = x + (1 - y)^2 + tanh(z); λ2(x, y, z) = x + (1 - y)^2 + tanh(4z). Fc1(x, y, z, t, c1) = - λ1(x, y, z) * c1; Fc2(x, y, z, t, c2) = - λ2(x, y, z) * c2; ; c1_forcing = Forcing(Fc1, field_dependencies=:c1); c2_forcing = Forcing(Fc2, field_dependencies=:c2). model = NonhydrostaticModel(; grid,; timestepper = :RungeKutta3,; tracers = (:c1, :c2),; forcing = (c1=c1_forcing, c2=c2_forcing)). Nx, Ny, Nz = size(grid); xs, ys, zs = nodes(model.tracers.c1). c̄1(z, t) = 1 / (Nx * Ny) * sum(exp(-λ1(x, y, z) * t) for x in xs for y in ys); c̄2(z, t) = 1 / (Nx * Ny) * sum(exp(-λ2(x, y, z) * t) for x in xs for y in ys). rtol = 1e-5 # need custom rtol for isapprox because roundoff errors accumulate (?). # Compute time averages...; c̄1(ts) = 1/length(ts) * sum(c̄1.(zs, t) for t in ts); c̄2(ts) = 1/length(ts) * sum(c̄2.(zs, t) for t in ts). #####; ##### Test strided windowed time average against analytic solution; ##### for *single* NetCDF output; #####; single_time_average_nc_filepath = ""single_decay_windowed_time_average_test.nc""; single_ds = NCDataset(single_time_average_nc_filepath). attribute_names = (""schedule"", ""interval"", ""output time interval"",; ""time_averaging_window"", ""time averaging window"",; ""time_averaging_stride"", ""time averaging stride""). for name in attribute_names; @test haskey(single_ds.attrib, name) && !isnothing(single_ds.attrib[name]); end. window_size = window_nΔt; window = window_size*Δt. time = single_ds[""time""][:]; data_plot = single_ds[""c1""][1:4, :]; c̄1_timeaverage = zeros(4,length(time[1:end])); for (n, t) in enumerate(time[1:end]); averaging_times = [t - n*Δt for n in 0:stride:window_size-1 if t - n*Δt >= 0]; # @info n,t,averaging_times, c̄1(averaging_times); c̄1_timeaverage[:,n] = c̄1(averaging_times); # @test all(isapprox.(single_ds[""c1""][:, n+1], c̄1(averaging_times), rtol=rtol)); end. # Plot each of the four lines; pl = plot(); plot!(time, data_plot[1, :], label=""1"", color=:blue, l",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2380652629:5284,Test,Test,5284,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2380652629,1,['Test'],['Test']
Testability,"imilar).; >; > What does the jargon ""sounding"" mean?; >; > Merger means we need to think carefully about how to reduce boilerplate to; > minimize (within reason) the cost of maintaining two parallel models as we; > develop their shared subcomponents.; >; > I wonder if splitting off the output writers and diagnostics into a; > Simulation type that wraps AbstractModel may help. In this paradigm, a; > ""Model"" is reduced to numerics + physics specification. This would be easy; > to implement (while I think an Equation abstraction would be relatively; > difficult due to myriad difficult design problems, including the; > abstraction of tuples of terms with heterogeneous function signatures; > numerical aspects of the equation, implicit vs explicit treatment of terms,; > etc).; > The Simulation type can then be used to ""run"" simulations over multiple; > time steps, eg; >; > simulation = Simulation(model, Δt=1.0, end_time=8day, output=output_writers, diagnostics=diagnostics); > run!(simulation); >; > and is tasked with managing things like output writing, diagnostics; > calculation, adaptive time-stepping, and progress logging. Each Model; > then simply needs to define a function that performs a single time-step to; > interface with Simulation. This is discussed further in #447; > <https://github.com/climate-machine/Oceananigans.jl/issues/447>. Such a; > orthogonalization of the code means we can develop the Simulation; > abstraction without having to worry about updating each AbstractModel; > individually.; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/climate-machine/Oceananigans.jl/issues/605?email_source=notifications&email_token=AKXUEQRA7COBFTVWBSDE3ATRALQCRA5CNFSM4KNLLK52YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEKLF25Y#issuecomment-580279671>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AKXUEQSOSWBJGZJKTTSGCZ3RALQCRANCNFSM4KNLLK5Q>; > .; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/605#issuecomment-580309805:2217,log,logging,2217,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/605#issuecomment-580309805,1,['log'],['logging']
Testability,"in general. We currently handle this only during time-stepping --- there is no guarantee, for example, that the diffusivities or ghost cell values are consistent with the velocity field if the velocity field is set by the function `set!` (in fact, the diffusivities are *always* inconsistent with the current velocity field due to the fact that they are calculated *prior* to taking a time-step). If we want to guarantee such a consistency, we can develop the concept of a model ""state"" and apply it to both ocean and atmospheric models (eg a function `update_state!(model)`, or something similar). What does the jargon ""sounding"" mean?. Merger means we need to think carefully about how to reduce boilerplate to minimize (within reason) the cost of maintaining two parallel models as we develop their shared subcomponents. I wonder if splitting off the output writers and diagnostics into a `Simulation` type that wraps `AbstractModel` may help. In this paradigm, a ""Model"" is reduced to numerics + physics specification. This would be easy to implement (while I think an `Equation` abstraction would be relatively difficult due to myriad difficult design problems, including the abstraction of tuples of terms with heterogeneous function signatures, numerical aspects of the equation, implicit vs explicit treatment of terms, etc).; The `Simulation` type can then be used to ""run"" simulations over multiple time steps, eg. ```julia; simulation = Simulation(model, Δt=1.0, end_time=8day, output=output_writers, diagnostics=diagnostics); run!(simulation); ```. and is tasked with managing things like output writing, diagnostics calculation, adaptive time-stepping, and progress logging. Each `Model` then simply needs to define a function that performs a single time-step to interface with `Simulation`. This is discussed further in #447. Such a orthogonalization of the code means we can develop the `Simulation` abstraction without having to worry about updating each `AbstractModel` individually.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/605#issuecomment-580279671:1997,log,logging,1997,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/605#issuecomment-580279671,1,['log'],['logging']
Testability,"increased resolution and see that it is converging nicely, as this method should be exact except for the pressure correction, which will scale. ![Bickley_normal](https://user-images.githubusercontent.com/67593861/122986244-2e807a80-d36d-11eb-924a-074ca0ad127c.png). ### Tracer Conservation; We can also look at tracer conservation. The initial concentration is sinusoidal, so the area integrated concentration is zero over the domain initially. I've plotted both the IBM and non-IBM (lighter colors) results to see the differences. This one is on a log plot. You can see that leakage is happening in the IBM versions. It's hard to say how bad the leakage is here, and it'll probably be better to consider an initial constant concentration rather than sinusoidal to see how much leakage is occurring due to the immersed solid. ![volint_Concentration_log](https://user-images.githubusercontent.com/67593861/122986580-a058c400-d36d-11eb-9a7c-e3e8d2a7367e.png). It might be easier to see what is going on in the IBM cases without the log scaling:. ![volint_Concentration](https://user-images.githubusercontent.com/67593861/122989251-984e5380-d370-11eb-88cc-ccf4444fb331.png). ### Integrated Boundary Stress; Finally, I looked at the integrated boundary stress along the top wall. The error between the nonIBM and IBM versions at these same grid sizes are below. Unfortunately this is not getting better with increased resolution. This could be due to base state changes causing the stress to change and not necessarily something wrong with the method. It might take better refinement than 256 x 256 to really see a trend here. ![Bickley_dudy_diff](https://user-images.githubusercontent.com/67593861/122987679-dc405900-d36e-11eb-895a-0f66daf9a473.png). Any thought on these results would be greatly appreciated, or if there is something else that might be good to look at with this particular test case. Further refinements to the grid are taking quite a long time to run on my PC, but they can be done. T",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866285588:1398,log,log,1398,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866285588,1,['log'],['log']
Testability,info.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [test/test\_forcings.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZvcmNpbmdzLmps) | | |; | [docs/bibliography.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-ZG9jcy9iaWJsaW9ncmFwaHkuamw=) | | |; | [...nceTests/OneDimensionalCosineAdvectionDiffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvT25lRGltZW5zaW9uYWxDb3NpbmVBZHZlY3Rpb25EaWZmdXNpb24uamw=) | | |; | [benchmark/benchmark\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | | |; | [test/test\_buoyancy.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2J1b3lhbmN5Lmps) | | |; | [test/test\_time\_stepping\_bcs.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmdfYmNzLmps) | | |; | [...ests/one\_dimensional\_cosine\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9jb3NpbmVfYWR2ZWN0aW9uX2RpZmZ1c2lvbi5qbA==) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | [test/test\_turbulence\_closures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3R1cmJ1bGVuY2VfY2xvc3VyZXMuamw=) | | |; | ... and [53 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966?src=pr&el=continue).; ,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/966#issuecomment-696645202:2055,test,test,2055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/966#issuecomment-696645202,2,['test'],['test']
Testability,"is in isolation I get the following error. Any suggestions on what to do here?; > ; > ```; > [2024/02/27 10:33:43.977] INFO Testing ShallowWaterModel cosine viscous diffusion [u, ConservativeFormulation()]; > [2024/02/27 10:33:43.977] WARN The ShallowWaterModel is currently unvalidated, subject to change, and should not be used for scientific research without adequate validation. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/ShallowWaterModels/shallow_water_model.jl:129; > ERROR: Scalar indexing is disallowed.; > Invocation of getindex resulted in scalar indexing of a GPU array.; > This is typically caused by calling an iterating implementation of a method.; > Such implementations *do not* execute on the GPU, but very slowly on the CPU,; > and therefore are only permitted from the REPL for prototyping purposes.; > If you did intend to index this array, annotate the caller with @allowscalar.; > Stacktrace:; > [1] error(s::String); > @ Base ./error.jl:35; > [2] assertscalar(op::String); > @ GPUArraysCore ~/.julia/packages/GPUArraysCore/uOYfN/src/GPUArraysCore.jl:103; > [3] getindex(xs::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, I::Int64); > @ GPUArrays ~/.julia/packages/GPUArrays/EZkix/src/host/indexing.jl:9; > [4] getindex; > @ ~/.julia/packages/OffsetArrays/0MOrf/src/OffsetArrays.jl:438 [inlined]; > [5] _getindex; > @ ./abstractarray.jl:1321 [inlined]; > [6] getindex; > @ ./abstractarray.jl:1288 [inlined]; > [7] getindex; > @ ~/Software/Oceananigans.jl/src/Fields/field.jl:399 [inlined]; > [8] _broadcast_getindex; > @ ./broadcast.jl:675 [inlined]; > [9] _getindex; > @ ./broadcast.jl:705 [inlined]; > [10] _broadcast_getindex; > @ ./broadcast.jl:681 [inlined]; > [11] getindex; > @ ./broadcast.jl:636 [inlined]; > [12] macro expansion; > @ ./broadcast.jl:1004 [inlined]; > [13] macro expansion; > @ ./simdloop.jl:77 [inlined]; > [14] copyto!; > @ ./broadcast.jl:1003 [inlined]; > [15] copyto!; > @ ./broadcast.jl:956 [inlined]; > [16] copy; > @ ./broadcast.jl:928 [",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1968123748:1185,assert,assertscalar,1185,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1968123748,1,['assert'],['assertscalar']
Testability,"is used in this composition --- it squares a _function_, rather than a _field_. So `ℑxzᶜᵃᶜ(i, j, k, grid, f², ∂zᶠᶜᶠ, U.u)` represents a stencil that interpolates `∂zᶠᶜᶠ(i, j, k, grid, u)^2` from `Face` to `Center` in both x and z. > For instance, you could first create the model, define Ri and closure and then set! the model with this new closure and auxiliary field. Yes, your question makes a lot of sense! The reason we can't do that is because _type_ of any of the properties of `model` cannot change. This means we need to know the type of `model.closure` _before_ we build it. Another way to say this is that `HydrostaticFreeSurfaceModel` is _concretely typed_, which means that functions of `model` can be optimized based on the types of _every_ property of `HydrostaticFreeSurfaceModel`. This gives us performance advantages / reduces overhead, but also creates some limitations like: we have to define a `closure` before building model. Here's a simple example:. ```julia; julia> mutable struct Test{T}; a :: T; end. julia> t = Test(1.0); Test{Float64}(1.0). julia> t.a = 2.0; 2.0. julia> t.a = ""hi""; ERROR: MethodError: Cannot `convert` an object of type String to an object of type Float64; Closest candidates are:; convert(::Type{T}, ::T) where T<:Number at number.jl:6; convert(::Type{T}, ::Number) where T<:Number at number.jl:7; convert(::Type{T}, ::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250; ...; Stacktrace:; [1] setproperty!(x::Test{Float64}, f::Symbol, v::String); @ Base ./Base.jl:34; [2] top-level scope; @ REPL[6]:1; ```. Here, `t` is `Test{Float64}`. We can change `a` as long as the new value can be converted to `Float64` via `convert(Float64, new_value)`. Otherwise we can't and we just have to write `s = Test(""hi"")` instead. Another possible solution is to build a ""dummy"" closure with the correct type, and then replace it with the ""real"" closure after constructing model by writing `model.closure = real_closure`. It could be fun to try that and se",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1066113513:1613,Test,Test,1613,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1066113513,1,['Test'],['Test']
Testability,"iter.jl). However, when running the existing MWE, [test_netcdf_time_averaging ](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_netcdf_output_writer.jl#L636), setting [Δt](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_netcdf_output_writer.jl#L657) to 0.01 and an average window of 3Δt produces a similar discontinuity to what was observed in https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2259395775, as shown in the figure below. The vertical lines indicate the start and end of the windows.; <img width=""584"" alt=""image"" src=""https://github.com/user-attachments/assets/6a14b489-622a-440a-a73a-4030b52b71e9"">. With this new [PR](https://github.com/CliMA/Oceananigans.jl/pull/3721/commits/a52812b00eb38e712ed20c7a6db3cf2e0c3a7877), the same test now yields a smooth solution: ; <img width=""593"" alt=""image"" src=""https://github.com/user-attachments/assets/0a436474-cd81-4378-bfbd-110eb8417b5d"">. While the discontinuity caused by rounding errors has been resolved, not all cases with different Δt pass the test, e.g., ; ```julia; for (n, t) in enumerate(single_ds[""time""][2:end]); averaging_times = [t - n*Δt for n in 0:stride:window_size-1 if t - n*Δt >= 0]; @test all(isapprox.(single_ds[""c1""][:, n+1], c̄1(averaging_times), rtol=1e-5)); end; ```; Here is an example of a case that does not pass the test:; ```julia; using Oceananigans; using Plots; using NCDatasets; using Test. arch = CPU(); topo = (Periodic, Periodic, Periodic); domain = (x=(0, 1), y=(0, 1), z=(0, 1)); grid = RectilinearGrid(arch, topology=topo, size=(4, 4, 4); domain...). λ1(x, y, z) = x + (1 - y)^2 + tanh(z); λ2(x, y, z) = x + (1 - y)^2 + tanh(4z). Fc1(x, y, z, t, c1) = - λ1(x, y, z) * c1; Fc2(x, y, z, t, c2) = - λ2(x, y, z) * c2; ; c1_forcing = Forcing(Fc1, field_dependencies=:c1); c2_forcing = Forcing(Fc2, field_dependencies=:c2). model = NonhydrostaticModel(; grid,; timestepper = :RungeKutta3,; tracers = (:c1, :c2),; forcing = (c1=c1_forcing, c2=c2_forcing)). set!(mod",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2378113073:1368,test,test,1368,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2378113073,1,['test'],['test']
Testability,"ith Δx=0.5; > ├── Periodic y ∈ [0.0, 2.0) regularly spaced with Δy=1.0; > └── Bounded z ∈ [-3.0, 0.0] regularly spaced with Δz=1.5; > ; > julia> closure = ""not a closure""; > ""not a closure""; > ; > julia> NonhydrostaticModel(; grid, closure); > ERROR: MethodError: no method matching with_tracers(::Tuple{}, ::String); > ; > Closest candidates are:; > with_tracers(::Any, ::Nothing, Any...; kwargs...); > @ Oceananigans ~/Research/OC11.jl/src/Utils/with_tracers.jl:44; > with_tracers(::Any, ::Oceananigans.TurbulenceClosures.TwoDimensionalLeith{FT}) where FT; > @ Oceananigans ~/Research/OC11.jl/src/TurbulenceClosures/turbulence_closure_implementations/leith_enstrophy_diffusivity.jl:61; > with_tracers(::Any, ::ScalarBiharmonicDiffusivity{F, N}) where {F, N}; > @ Oceananigans ~/Research/OC11.jl/src/TurbulenceClosures/turbulence_closure_implementations/scalar_biharmonic_diffusivity.jl:85; > ...; > ; > Stacktrace:; > [1] NonhydrostaticModel(; grid::RectilinearGrid{…}, clock::Clock{…}, advection::Centered{…}, buoyancy::Nothing, coriolis::Nothing, stokes_drift::Nothing, forcing::@NamedTuple{}, closure::String, boundary_conditions::@NamedTuple{}, tracers::Tuple{}, timestepper::Symbol, background_fields::@NamedTuple{}, particles::Nothing, biogeochemistry::Nothing, velocities::Nothing, hydrostatic_pressure_anomaly::Oceananigans.Models.NonhydrostaticModels.DefaultHydrostaticPressureAnomaly, nonhydrostatic_pressure::Field{…}, diffusivity_fields::Nothing, pressure_solver::Nothing, immersed_boundary::Nothing, auxiliary_fields::@NamedTuple{}); > @ Oceananigans.Models.NonhydrostaticModels ~/Research/OC11.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:205; > [2] top-level scope; > @ REPL[4]:1; > Some type information was truncated. Use `show(err)` to see complete types.; > ```. Heh yeah. `with_tracers` is a better place for the error I think! I ran into the problem with the hydrostatic model but the test is for the nonhydrostatic model. I guess we should test both, I'll fix it",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325346266:2440,test,test,2440,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325346266,2,['test'],['test']
Testability,"itializing simulation...; [ Info: ... simulation initialization complete (15.100 minutes); [ Info: Executing initial time step...; [ Info: ... initial time step complete (8.244 seconds).; [ Info: Simulation is stopping after running for 15.251 minutes.; [ Info: Simulation time 1.333 hours equals or exceeds stop time 1.333 hours.; 919.254871 seconds (2.19 G allocations: 1.143 TiB, 12.80% gc time, 100.00% compilation time); ```. Way, way too long. (So it's good we have this issue.). But on julia 1.10-beta3 I get. ```; [ Info: Simulation time 1.333 hours equals or exceeds stop time 1.333 hours.; 17.237010 seconds (26.28 M allocations: 1.741 GiB, 2.14% gc time, 99.58% compilation time: <1% of which was recompilation); ```. much better. (Note that on 1.10 we get a lot of annoying warnings which is documented on #3374 and is relatively easily fixed.). Also, things are fine if I use the Oceananigans Manifest.toml, even with julia 1.9:. ```; (base) gregorywagner:Oceananigans.jl/ (main✗) $ julia19 --project test.jl [3:13:09]; ┌ Warning: Overwriting existing ./mwe.nc.; └ @ Oceananigans.OutputWriters ~/Projects/Oceananigans.jl/src/OutputWriters/netcdf_output_writer.jl:359; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (2.381 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (8.751 seconds).; [ Info: Simulation is stopping after running for 12.013 seconds.; [ Info: Simulation time 1.333 hours equals or exceeds stop time 1.333 hours.; 16.285006 seconds (38.66 M allocations: 2.598 GiB, 5.35% gc time, 99.82% compilation time); ```. That's weird... # What's the problem?. We haven't figured it out. One clue could be that downgrading to 0.85.0 fixes the problem. For completeness, here's a `diff` of the Oceananigans Manifest.toml, and the Manifest.toml in my ""clean"" environment:. <details>; <summary>Click me</summary>; ; ```; 3c3; < julia_version = ""1.9.3""; ---; > julia_version = ""1.9.2""; 5c5; < project_hash = ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1807091361:1518,test,test,1518,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1807091361,1,['test'],['test']
Testability,"itions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.identity3), RectilinearGrid{Float64, Flat, Periodic, Bounded, Float64, Float64, Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Float64}, typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.identity5), RectilinearGrid{Float64, Flat, Periodic, Bounded, Float64, Float64, Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Float64}}}; filename::String, schedule::TimeInterval, dir::String, array_type::Type{Array{Float64}}, indices::Tuple{Colon, Colon, Colon}, with_halos::Bool, global_attributes::Dict{Any, Any}, output_attributes::Dict{Any, Any}, dimensions::Dict{Any, Any}, overwrite_existing::Bool, deflatelevel::Int64, verbose::Bool); @ Oceananigans.OutputWriters ~/.julia/packages/Oceananigans/Feeqx/src/OutputWriters/netcdf_output_writer.jl:392; [6] top-level scope; @ ~/Documents/GitHub/BottomBoundaryLayer/PSI_Base_Test.jl:101; in expression starting at /Users/loganknudsen/Documents/GitHub/BottomBoundaryLayer/PSI_Base_Test.jl:101; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1747397784:31439,log,loganknudsen,31439,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1747397784,1,['log'],['loganknudsen']
Testability,"itle=""Incompressible Model Benchmarks: CPU/GPU""); > benchmark/benchmark_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model benchmarks""); > benchmark/benchmark_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Incompressible model CPU to GPU speedup""); > benchmark/strong_scaling_incompressible_model.jl: @info ""Benchmarking distributed incompressible model strong scaling with $(typeof(decomposition)) decomposition [N=($Nx, $Ny, $Nz), ranks=($Rx, $Ry, $Rz)]...""; > benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model strong scaling benchmark""); > benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); > benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; > benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); > benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Warming up distributed incompressible model on rank $local_rank...""; > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Benchmarking distributed incompressible model on rank $local_rank...""; > docs/src/physics/incompressible_model.md:# Incompressible model; > docs/src/numerical_implementation/time_stepping.md",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932:1300,test,test,1300,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932,1,['test'],['test']
Testability,"jl$ grep -ri ""incompressible model"" *; > benchmark/benchmark_incompressible_model.jl: xlabel=""Nx"", ylabel=""Times (ms)"", title=""Incompressible Model Benchmarks: CPU vs GPU""); > benchmark/benchmark_incompressible_model.jl: xlabel=""Nx"", ylabel=""Speedup Ratio"", title=""Incompressible Model Benchmarks: CPU/GPU""); > benchmark/benchmark_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model benchmarks""); > benchmark/benchmark_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Incompressible model CPU to GPU speedup""); > benchmark/strong_scaling_incompressible_model.jl: @info ""Benchmarking distributed incompressible model strong scaling with $(typeof(decomposition)) decomposition [N=($Nx, $Ny, $Nz), ranks=($Rx, $Ry, $Rz)]...""; > benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model strong scaling benchmark""); > benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); > benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; > benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); > benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Warming up distributed incompressible model on rank $local_rank..",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932:1114,benchmark,benchmark,1114,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932,1,['benchmark'],['benchmark']
Testability,"jl/src/compiler/utils.jl:183 [inlined]; [3] calling_conv_fixup(builder::LLVM.IRBuilder, val::LLVM.AddrSpaceCastInst, tape::LLVM.PointerType); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler/utils.jl:183; [4] enzyme_custom_common_rev(forward::Bool, B::LLVM.IRBuilder, orig::LLVM.CallInst, gutils::Enzyme.Compiler.GradientUtils, normalR::Ptr{Nothing}, shadowR::Ptr{Nothing}, tape::LLVM.ExtractValueInst); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:4610; [5] enzyme_custom_rev(B::LLVM.IRBuilder, orig::LLVM.CallInst, gutils::Enzyme.Compiler.GradientUtils, tape::LLVM.ExtractValueInst); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:4770; [6] (::Enzyme.Compiler.var""#201#202"")(B::Ptr{LLVM.API.LLVMOpaqueBuilder}, OrigCI::Ptr{LLVM.API.LLVMOpaqueValue}, gutils::Ptr{Nothing}, tape::Ptr{LLVM.API.LLVMOpaqueValue}); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:6657; [7] EnzymeCreatePrimalAndGradient(logic::Enzyme.Logic, todiff::LLVM.Function, retType::Enzyme.API.CDIFFE_TYPE, constant_args::Vector{…}, TA::Enzyme.TypeAnalysis, returnValue::Bool, dretUsed::Bool, mode::Enzyme.API.CDerivativeMode, width::Int64, additionalArg::Ptr{…}, forceAnonymousTape::Bool, typeInfo::Enzyme.FnTypeInfo, uncacheable_args::Vector{…}, augmented::Ptr{…}, atomicAdd::Bool); @ Enzyme.API ~/Projects/Enzymantics/Enzyme.jl/src/api.jl:141; [8] enzyme!(job::GPUCompiler.CompilerJob{…}, mod::LLVM.Module, primalf::LLVM.Function, TT::Type, mode::Enzyme.API.CDerivativeMode, width::Int64, parallel::Bool, actualRetType::Type, wrap::Bool, modifiedBetween::Tuple{…}, returnPrimal::Bool, jlrules::Vector{…}, expectedTapeType::Type, loweredArgs::Set{…}, boxedArgs::Set{…}); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:7715; [9] codegen(output::Symbol, job::GPUCompiler.CompilerJob{…}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, toplevel::Bool, strip::Bool, validate::Bool, only_entry::Bool, parent_job::Nothing); @ Enz",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3360#issuecomment-1791250259:1409,Log,Logic,1409,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3360#issuecomment-1791250259,1,['Log'],['Logic']
Testability,"jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates; [b77e0a4c] InteractiveUtils; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [44cfe95a] Pkg; [de0858da] Printf; [9a3f8284] Random; [2f01184e] Sparse",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17547,test,testing,17547,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['test'],['testing']
Testability,"jl:1119 [inlined]; &nbsp; | [6] top-level scope at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:448; &nbsp; | Halo communication: Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | Expression: all(south_halo(field, include_corners = false) .== arch.connectivity.south); &nbsp; | Stacktrace:; &nbsp; | [1] test_triply_periodic_halo_communication_with_411_ranks(::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | [2] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:477 [inlined]; &nbsp; | [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [4] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:475 [inlined]; &nbsp; | [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [6] top-level scope at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:448; &nbsp; | Halo communication: Halo communication: Test Failed at Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:365; &nbsp; | /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:365; &nbsp; | Halo communication: Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:365; &nbsp; | Expression: Expression: all(north_halo(field, include_corners = all(north_halo(field, include_corners = false) .== arch.connectivity.north)false) .== arch.connectivity.north); &nbsp;. ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802:2315,Test,Test,2315,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802,9,"['Test', 'test']","['Test', 'test']"
Testability,ken=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #564 +/- ##; ==========================================; - Coverage 70.90% 68.67% -2.24% ; ==========================================; Files 187 126 -61 ; Lines 5180 2678 -2502 ; ==========================================; - Hits 3673 1839 -1834 ; + Misses 1507 839 -668 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [test/test\_surface\_waves.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3N1cmZhY2Vfd2F2ZXMuamw=) | | |; | [test/test\_pressure\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ByZXNzdXJlX3NvbHZlcnMuamw=) | | |; | [test/test\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZpZWxkcy5qbA==) | | |; | [test/test\_dynamics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2R5bmFtaWNzLmps) | | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | | |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | | |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | | |; | [test/test\_time\_stepping.jl](https://co,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/564#issuecomment-564625738:1522,test,test,1522,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/564#issuecomment-564625738,2,['test'],['test']
Testability,"kgId, path::String, internal_stderr::IO, internal_stdout::IO, keep_loaded_modules::Bool); @ Base ./loading.jl:2468; [3] compilecache; @ ./loading.jl:2340 [inlined]; [4] (::Base.var""#968#969""{Base.PkgId})(); @ Base ./loading.jl:1974; [5] mkpidlock(f::Base.var""#968#969""{Base.PkgId}, at::String, pid::Int32; kwopts::@Kwargs{stale_age::Int64, wait::Bool}); @ FileWatching.Pidfile /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.10.2/gcc/7.5.0/apod/share/julia/stdlib/v1.10/FileWatching/src/pidfile.jl:93; [6] #mkpidlock#6; @ /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.10.2/gcc/7.5.0/apod/share/julia/stdlib/v1.10/FileWatching/src/pidfile.jl:88 [inlined]; [7] trymkpidlock(::Function, ::Vararg{Any}; kwargs::@Kwargs{stale_age::Int64}); @ FileWatching.Pidfile /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.10.2/gcc/7.5.0/apod/share/julia/stdlib/v1.10/FileWatching/src/pidfile.jl:111; [8] #invokelatest#2; @ ./essentials.jl:894 [inlined]; [9] invokelatest; @ ./essentials.jl:889 [inlined]; [10] maybe_cachefile_lock(f::Base.var""#968#969""{Base.PkgId}, pkg::Base.PkgId, srcpath::String; stale_age::Int64); @ Base ./loading.jl:2983; [11] maybe_cachefile_lock; @ ./loading.jl:2980 [inlined]; [12] _require(pkg::Base.PkgId, env::String); @ Base ./loading.jl:1970; [13] __require_prelocked(uuidkey::Base.PkgId, env::String); @ Base ./loading.jl:1812; [14] #invoke_in_world#3; @ ./essentials.jl:926 [inlined]; [15] invoke_in_world; @ ./essentials.jl:923 [inlined]; [16] _require_prelocked(uuidkey::Base.PkgId, env::String); @ Base ./loading.jl:1803; [17] macro expansion; @ ./loading.jl:1790 [inlined]; [18] macro expansion; @ ./lock.jl:267 [inlined]; [19] __require(into::Module, mod::Symbol); @ Base ./loading.jl:1753; [20] #invoke_in_world#3; @ ./essentials.jl:926 [inlined]; [21] invoke_in_world; @ ./essentials.jl:923 [inlined]; [22] require(into::Module, mod::Symbol); @ Base ./loading.jl:1746; in expression starting at /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/testcode.jl:1; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2231635812:7756,test,testcode,7756,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2231635812,1,['test'],['testcode']
Testability,"kgId, path::String, internal_stderr::IO, internal_stdout::IO, keep_loaded_modules::Bool); @ Base ./loading.jl:2468; [3] compilecache; @ ./loading.jl:2340 [inlined]; [4] (::Base.var""#968#969""{Base.PkgId})(); @ Base ./loading.jl:1974; [5] mkpidlock(f::Base.var""#968#969""{Base.PkgId}, at::String, pid::Int32; kwopts::@Kwargs{stale_age::Int64, wait::Bool}); @ FileWatching.Pidfile /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.10.2/gcc/7.5.0/apod/share/julia/stdlib/v1.10/FileWatching/src/pidfile.jl:93; [6] #mkpidlock#6; @ /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.10.2/gcc/7.5.0/apod/share/julia/stdlib/v1.10/FileWatching/src/pidfile.jl:88 [inlined]; [7] trymkpidlock(::Function, ::Vararg{Any}; kwargs::@Kwargs{stale_age::Int64}); @ FileWatching.Pidfile /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.10.2/gcc/7.5.0/apod/share/julia/stdlib/v1.10/FileWatching/src/pidfile.jl:111; [8] #invokelatest#2; @ ./essentials.jl:894 [inlined]; [9] invokelatest; @ ./essentials.jl:889 [inlined]; [10] maybe_cachefile_lock(f::Base.var""#968#969""{Base.PkgId}, pkg::Base.PkgId, srcpath::String; stale_age::Int64); @ Base ./loading.jl:2983; [11] maybe_cachefile_lock; @ ./loading.jl:2980 [inlined]; [12] _require(pkg::Base.PkgId, env::String); @ Base ./loading.jl:1970; [13] __require_prelocked(uuidkey::Base.PkgId, env::String); @ Base ./loading.jl:1812; [14] #invoke_in_world#3; @ ./essentials.jl:926 [inlined]; [15] invoke_in_world; @ ./essentials.jl:923 [inlined]; [16] _require_prelocked(uuidkey::Base.PkgId, env::String); @ Base ./loading.jl:1803; [17] macro expansion; @ ./loading.jl:1790 [inlined]; [18] macro expansion; @ ./lock.jl:267 [inlined]; [19] __require(into::Module, mod::Symbol); @ Base ./loading.jl:1753; [20] #invoke_in_world#3; @ ./essentials.jl:926 [inlined]; [21] invoke_in_world; @ ./essentials.jl:923 [inlined]; [22] require(into::Module, mod::Symbol); @ Base ./loading.jl:1746; in expression starting at /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/testcode.jl:3; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472:7085,test,testcode,7085,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472,1,['test'],['testcode']
Testability,"king distributed incompressible model strong scaling with $(typeof(decomposition)) decomposition [N=($Nx, $Ny, $Nz), ranks=($Rx, $Ry, $Rz)]...""; > benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model strong scaling benchmark""); > benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); > benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; > benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); > benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Warming up distributed incompressible model on rank $local_rank...""; > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Benchmarking distributed incompressible model on rank $local_rank...""; > docs/src/physics/incompressible_model.md:# Incompressible model; > docs/src/numerical_implementation/time_stepping.md:where, e.g., for the incompressible model, ; > docs/make.jl: ""Incompressible model"" => ""physics/incompressible_model.md"",; > src/Distributed/distributed_incompressible_model.jl:##### Distributed incompressible model constructor; > validation/immersed_boundaries/flow_around_cylinder.jl:# setting up incompressible model with immersed boundary; > ```; > ; > If",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932:1724,benchmark,benchmark,1724,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932,1,['benchmark'],['benchmark']
Testability,"kite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1794; [18] mktempdir(fn::Pkg.Operations.var""#115#120""{Dict{String, Any}, Bool, Bool, Bool, Pkg.Operations.var""#130#134""{Bool, Cmd, Cmd, Nothing, Pkg.Types.Context, Vector{Tuple{String, Base.Process}}, String, Pkg.Types.PackageSpec}, Pkg.Types.Context, Pkg.Types.PackageSpec, String, Pkg.Types.Project, String}, parent::String; prefix::String); @ Base.Filesystem ./file.jl:766; [19] mktempdir(fn::Function, parent::String); @ Base.Filesystem ./file.jl:762; [20] mktempdir; @ ./file.jl:762 [inlined]; [21] sandbox(fn::Function, ctx::Pkg.Types.Context, target::Pkg.Types.PackageSpec, target_path::String, sandbox_path::String, sandbox_project_override::Pkg.Types.Project; preferences::Dict{String, Any}, force_latest_compatible_version::Bool, allow_earlier_backwards_compatible_versions::Bool, allow_reresolve::Bool); @ Pkg.Operations /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1752; [22] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing, force_latest_compatible_version::Bool, allow_earlier_backwards_compatible_versions::Bool, allow_reresolve::Bool); @ Pkg.Operations /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1955; [23] test; @ /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1899 [inlined]; [24] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, force_latest_compatible_version::Bool, allow_earlier_backwards_compatible_versions::Bool, allow_reresolve::Bool, kwargs::@Kwargs{io::Base.TTY}); @ Pkg.API /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:444; [25] test(pkgs::Vector{Pkg.Types.PackageSpec}; io::Base.TTY, kwargs::@Kwargs{}); @ Pkg.API /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1988500458:6390,test,test,6390,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1988500458,1,['test'],['test']
Testability,"ks of time are doing so.; ```; Oceananigans v0.60.0; Julia Version 1.6.2; Commit 1b93d53fc4 (2021-07-14 15:36 UTC); Platform Info:; OS: Linux (powerpc64le-unknown-linux-gnu); CPU: unknown; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, pwr9); GPU: Tesla V100-SXM2-32GB. CUDA toolkit 10.2.89, local installation; CUDA driver 10.2.0; NVIDIA driver 440.64.0. Libraries: ; - CUBLAS: 10.2.2; - CURAND: 10.1.2; - CUFFT: 10.1.2; - CUSOLVER: 10.3.0; - CUSPARSE: 10.3.1; - CUPTI: 12.0.0; - NVML: 10.0.0+440.64.0; - CUDNN: missing; - CUTENSOR: missing. Toolchain:; - Julia: 1.6.2; - LLVM: 11.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5; - Device capability support: sm_30, sm_32, sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75. 2 devices:; 0: Tesla V100-SXM2-32GB (sm_70, 4.367 GiB / 31.749 GiB available); 1: Tesla V100-SXM2-32GB (sm_70, 4.805 GiB / 31.749 GiB available); nothing. [2021/08/05 12:11:43.425] INFO Setting up benchmark: (GPU, Float64, 128)...; [2021/08/05 12:12:45.688] INFO warming up; [2021/08/05 12:15:06.837] INFO Simulation is stopping. Model iteration 1 has hit or exceeded simulation stop iteration 1.; [2021/08/05 12:15:07.841] INFO Simulation is stopping. Model iteration 11 has hit or exceeded simulation stop iteration 11.; [2021/08/05 12:15:10.060] INFO done profiling (GPU, Float64, 128); ==45925== Profiling application: /nobackup/users/henryguo/projects/henry-test/julia-1.6.2/bin/julia --project nonhydrostatic_profiler.jl; ==45925== Profiling result:; Type Time(%) Time Calls Avg Min Max Name; GPU activities: 20.46% 17.966ms 10 1.7966ms 1.7946ms 1.7987ms _Z23julia_gpu_calculate_Gv_7ContextI14__CUDACtx_Namevv14__PassType_257v12DisableHooksE18_gpu_calculate_Gv_16CompilerMetadataI10StaticSizeI15_128__128__128_E12DynamicCheckvv7NDRangeILi3ES5_I11_8__8__128_ES5_I11_16__16__1_EvvEE11OffsetArrayI7Float64Li3E13CuDeviceArrayIS9_Li3ELi1EEE22RegularRectilinearGridIS9_8PeriodicS12_7BoundedS8_IS9_Li1E1",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-893914746:1302,benchmark,benchmark,1302,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-893914746,1,['benchmark'],['benchmark']
Testability,"l Benchmarks: CPU vs GPU""); > benchmark/benchmark_incompressible_model.jl: xlabel=""Nx"", ylabel=""Speedup Ratio"", title=""Incompressible Model Benchmarks: CPU/GPU""); > benchmark/benchmark_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model benchmarks""); > benchmark/benchmark_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Incompressible model CPU to GPU speedup""); > benchmark/strong_scaling_incompressible_model.jl: @info ""Benchmarking distributed incompressible model strong scaling with $(typeof(decomposition)) decomposition [N=($Nx, $Ny, $Nz), ranks=($Rx, $Ry, $Rz)]...""; > benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model strong scaling benchmark""); > benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); > benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; > benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); > benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Warming up distributed incompressible model on rank $local_rank...""; > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Benchmarking distributed incompressible model on rank $local_rank...""; > docs/",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932:1213,test,tests,1213,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932,1,['test'],['tests']
Testability,"l/564/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [test/test\_surface\_waves.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3N1cmZhY2Vfd2F2ZXMuamw=) | | |; | [test/test\_pressure\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ByZXNzdXJlX3NvbHZlcnMuamw=) | | |; | [test/test\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZpZWxkcy5qbA==) | | |; | [test/test\_dynamics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2R5bmFtaWNzLmps) | | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | | |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | | |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | | |; | [test/test\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmcuamw=) | | |; | ... and [52 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564?src=pr&el=footer",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/564#issuecomment-564625738:2122,test,test,2122,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/564#issuecomment-564625738,2,['test'],['test']
Testability,"l`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfully precompiled in 7 seconds (205 already precompiled); 2 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages; Testing Running tests...; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:18.729] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:19.136] INFO Running shallow water regression tests...; [2023/02/21 06:36:19.143] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/21 06:36:29.566] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:36:32.345] WARN ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:11046,test,test,11046,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['test'],['test']
Testability,"lain why this can't be implemented with a Callback (or forcing function)? I.e., why do we desire this as a source code feature? Just to be clear, I'm not saying it should be one way or another, but it's good to have explicit justification for source code features (which are expensive to maintain and require resources to test)!; > ; > No problem at all, [heres](https://gist.github.com/jagoosw/213d7f2ce3707768d4ddb07f8827cdd2) an example (not sure where best to put this/if you'd want it in the examples folder). This is about the simplest version I could think of where we have a particle randomly walking around converting tracer a into tracer b. The specific use case we've been using this for is modelling kelp fronds as particles which grow (variety of particle properties change) depending on how much nutrients the particles uptake from a biogeochemical model, and also release tracer back into the model. I also envisage using this to exert drag on the flow at some point.; > ; > ![test](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif) [ ![test](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif) ](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif) [ ](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif); > ; > Although I've had this working as custom dynamics of the particles the effect of the particles tendency can only be integrated with explicit Euler, i.e. at each substep it just does `tracer[i, j, k] += value*Δt`, where as this solution allows it to be properly integrated along with the other tendencies. I couldn't think of a way to implement this as a forcing function before, but perhaps I could use a callback to update an auxiliary field with the tendencies of the particles, and then add this as a forcing function, although I imagine that could use a lot more ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1239608678:1131,test,test,1131,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1239608678,2,['test'],['test']
Testability,"lc3RzL0NvbnZlcmdlbmNlVGVzdHMvYW5hbHlzaXMuamw=) | | |; | [test/test\_verification.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ZlcmlmaWNhdGlvbi5qbA==) | | |; | [...nvergence\_tests/ConvergenceTests/file\_wrangling.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvZmlsZV93cmFuZ2xpbmcuamw=) | | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvZWFkeV90dXJidWxlbmNlLmps) | | |; | [test/test\_pressure\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ByZXNzdXJlX3NvbHZlcnMuamw=) | | |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [...\_tests/ConvergenceTests/TwoDimensionalDiffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvVHdvRGltZW5zaW9uYWxEaWZmdXNpb24uamw=) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | ... and [53 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797?src=pr&el=footer). Last update [162159d...a538a52](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/797#issuecomment-657830968:2789,benchmark,benchmark,2789,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/797#issuecomment-657830968,2,['benchmark'],['benchmark']
Testability,"le=""box-sizing: border-box; font-family: SFMono-Regular, Monaco, Menlo, Consolas, &quot;Liberation Mono&quot;, Courier, monospace;"">; Oceananigans \| 818 12 830; --; &nbsp; | Distributed MPI Oceananigans \| 816 12 828; &nbsp; | Multi architectures rank connectivity \| 28 28; &nbsp; | Local grids for distributed models \| 24 24; &nbsp; | Injection of halo communication BCs \| 168 168; &nbsp; | Halo communication \| 588 12 600; &nbsp; | Time stepping IncompressibleModel \| 4 4; &nbsp; | Time stepping ShallowWaterModel \| 4 4; &nbsp; | Distributed FFT-based Poisson solver \| 2 2; &nbsp; | ERROR: ERROR: ERROR: ERROR: LoadError: LoadError: LoadError: LoadError: Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | ERROR: ERROR: ERROR: ERROR: Package Oceananigans errored during testing; &nbsp; | Stacktrace:Package Oceananigans errored during testing; &nbsp; | Stacktrace:Package Oceananigans errored during testing; &nbsp; | Stacktrace:; &nbsp; | [1] pkgerrorPackage Oceananigans errored during testing; &nbsp; | Stacktrace:; &nbsp; | [1] (pkgerror; &nbsp; | [1] (pkgerror::(; &nbsp; | [1] ::pkgerrorString) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] (::test(:",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081:1903,test,test,1903,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081,1,['test'],['test']
Testability,"les. You can advect ~100,000,000 particles and your model only slows down by a factor of 4x. In this scenario, the GPU is ~620x faster than a single CPU core.; 3. Calculated using `(t_100000000 - t_0) / 100000000`, advecting a single particle on the CPU takes ~110 ns while on the GPU it only takes ~0.127 ns. This seems a little too good to be true but I'll double check this. I'll start refactoring this PR using @glwagner's and @zhenwu0728's feedback, but I think it would be really great if we can keep this performance. # Benchmarks. ```; Oceananigans v0.44.1; Julia Version 1.5.2; Commit 539f3ce943 (2020-09-23 23:17 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-9.0.1 (ORCJIT, cascadelake); GPU: TITAN V; ```. ```; Lagrangian particle tracking benchmarks; ┌───────────────┬─────────────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ Architectures │ N_particles │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────────────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ CPU │ 0 │ 361.749 ms │ 364.041 ms │ 364.293 ms │ 368.854 ms │ 293.44 KiB │ 1876 │; │ CPU │ 1 │ 375.030 ms │ 376.591 ms │ 377.959 ms │ 385.248 ms │ 297.16 KiB │ 1906 │; │ CPU │ 10 │ 377.251 ms │ 380.792 ms │ 387.560 ms │ 443.325 ms │ 297.16 KiB │ 1906 │; │ CPU │ 100 │ 378.867 ms │ 381.194 ms │ 381.328 ms │ 383.461 ms │ 297.16 KiB │ 1906 │; │ CPU │ 1000 │ 378.076 ms │ 384.114 ms │ 383.611 ms │ 388.507 ms │ 297.16 KiB │ 1906 │; │ CPU │ 10000 │ 381.209 ms │ 383.687 ms │ 387.584 ms │ 419.196 ms │ 297.16 KiB │ 1906 │; │ CPU │ 100000 │ 389.478 ms │ 390.299 ms │ 390.442 ms │ 391.984 ms │ 297.16 KiB │ 1906 │; │ CPU │ 1000000 │ 484.920 ms │ 487.836 ms │ 488.382 ms │ 493.664 ms │ 297.16 KiB │ 1906 │; │ CPU │ 10000000 │ 1.484 s │ 1.489 s │ 1.497 s │ 1.525 s │ 297.16 KiB │ 1906 │; │ CPU │ 100000000 │ 11.523 s │ 11.523 s │ 11.523 s │ 11.5",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-732529975:1264,benchmark,benchmarks,1264,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-732529975,1,['benchmark'],['benchmarks']
Testability,"limate-machine/Oceananigans.jl/pull/584?src=pr&el=h1) Report; > Merging [#584](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/588890004e69cfc7db10472b12a9840b8a9ad7b6?src=pr&el=desc) will **increase** coverage by `0.65%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #584 +/- ##; ==========================================; + Coverage 72.17% 72.82% +0.65% ; ==========================================; Files 70 70 ; Lines 2016 2050 +34 ; ==========================================; + Hits 1455 1493 +38 ; + Misses 561 557 -4; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `62.5% <0%> (+1.44%)` | :arrow_up: |; | [src/logger.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584/diff?src=pr&el=tree#diff-c3JjL2xvZ2dlci5qbA==) | `59.25% <0%> (+59.25%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584?src=pr&el=footer). Last update [5888900...b7cae54](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/584#issuecomment-568103734:1270,log,logger,1270,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/584#issuecomment-568103734,1,['log'],['logger']
Testability,"lization complete (1.081 ms); [2023/02/27 18:57:23.526] INFO Executing initial time step...; [2023/02/27 18:57:24.661] INFO ... initial time step complete (1.135 seconds).; [2023/02/27 18:57:46.538] INFO Simulation is stopping after running for 21.864 seconds.; [2023/02/27 18:57:46.538] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/27 18:57:46.680] INFO Δu: min=-2.958580e-08, max=+2.921001e-08, mean=-7.420989e-11, absmean=+1.893230e-09, std=+5.534008e-09 (16384/16384 matching grid points); [2023/02/27 18:57:46.680] INFO Δv: min=-1.426954e-11, max=+1.432324e-11, mean=-2.560603e-14, absmean=+6.119071e-13, std=+1.792743e-12 (16512/16512 matching grid points); [2023/02/27 18:57:46.680] INFO Δh: min=-4.754092e-07, max=+4.764754e-07, mean=+2.561137e-09, absmean=+2.079621e-07, std=+2.556520e-07 (16384/16384 matching grid points); FJP: arch and formulation = CPU()ConservativeFormulation(); [2023/02/27 18:57:46.680] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/27 18:57:49.567] INFO Initializing simulation...; [2023/02/27 18:57:49.625] INFO ... simulation initialization complete (57.503 ms); [2023/02/27 18:57:49.625] INFO Executing initial time step...; [2023/02/27 18:58:00.006] INFO ... initial time step complete (10.381 seconds).; [2023/02/27 18:58:00.502] INFO Simulation is stopping after running for 10.911 seconds.; [2023/02/27 18:58:00.502] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/27 18:58:00.509] INFO Δu: min=-2.972623e-08, max=+2.977460e-08, mean=+3.472408e-11, absmean=+2.084662e-09, std=+5.973908e-09 (16384/16384 matching grid points); [2023/02/27 18:58:00.509] INFO Δv: min=-1.453264e-11, max=+1.436524e-11, mean=+4.659518e-15, absmean=+6.267771e-13, std=+1.805375e-12 (16512/16512 matching grid points); [2023/02/27 18:58:00.509] INFO Δh: min=-4.766880e-07, max=+4.767828e-07, mean=-9.313224e-10, absmean=+2.070016e-07, std=+2.552765e-07 (16384/16384 matching gri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:2486,Test,Testing,2486,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226,1,['Test'],['Testing']
Testability,"llect(0:192), architecture = Arch()). if Scheme == :Uniform; scheme = WENO5(); elseif Scheme == :Stretched; scheme = WENO5(grid = grid); elseif Scheme == :StretchedSmoothness; scheme = WENO5(grid = grid, stretched_smoothness = true); elseif Scheme == :ZFormulation; scheme = WENO5(zweno = true); end; model = NonhydrostaticModel(architecture=Arch(), grid=grid, advection=scheme). time_step!(model, 1) # warmup. trial = @benchmark begin; @sync_gpu time_step!($model, 1); end samples=10. return trial; end. Schemes = (:Uniform, :Stretched, :StretchedSmoothness, :ZFormulation); ```; This PR, with a ""stretched"" vertical direction ; ```; ┌───────────────┬─────────────────────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Schemes │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────────────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┼─────────┤; │ CPU │ Stretched │ 7.122 s │ 7.122 s │ 7.122 s │ 7.122 s │ 949.91 KiB │ 1716 │ 1 │; │ CPU │ StretchedSmoothness │ 11.042 s │ 11.042 s │ 11.042 s │ 11.042 s │ 956.47 KiB │ 1716 │ 1 │; │ CPU │ Uniform │ 6.373 s │ 6.373 s │ 6.373 s │ 6.373 s │ 945.38 KiB │ 1706 │ 1 │; │ CPU │ ZFormulation │ 7.725 s │ 7.725 s │ 7.725 s │ 7.725 s │ 945.38 KiB │ 1706 │ 1 │; │ GPU │ Stretched │ 25.646 ms │ 25.920 ms │ 26.501 ms │ 32.101 ms │ 2.15 MiB │ 30442 │ 10 │; │ GPU │ StretchedSmoothness │ 109.080 ms │ 109.493 ms │ 109.676 ms │ 111.118 ms │ 3.78 MiB │ 134069 │ 10 │; │ GPU │ Uniform │ 25.133 ms │ 25.394 ms │ 25.468 ms │ 26.710 ms │ 2.06 MiB │ 27799 │ 10 │; │ GPU │ ZFormulation │ 30.554 ms │ 32.780 ms │ 32.569 ms │ 32.922 ms │ 2.20 MiB │ 37382 │ 10 │; └───────────────┴─────────────────────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┴─────────┘; ```; Apparently on a much larger grid than what I tested, StretchedSmoothness is much less efficient, another reason to try to avoid it if not strictly necessary!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-974843738:5422,test,tested,5422,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-974843738,1,['test'],['tested']
Testability,"locations: 276.81 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 320.139 ms (48245 allocations: 269.93 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 14.721 ms (36840 allocations: 12.11 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 23.795 ms (40688 allocations: 12.18 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 17.219 ms (38055 allocations: 12.14 MiB); ```. ## This PR. ```julia; julia> include(""benchmark_two_dimensional_models.jl""); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 104.521 ms (77858 allocations: 25.03 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 235.623 ms (120254 allocations: 26.49 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 137.914 ms (72488 allocations: 19.41 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 14.675 ms (37239 allocations: 11.65 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 22.468 ms (41731 allocations: 11.71 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 14.661 ms (37308 allocations: 11.65 MiB); ```. This PR makes substantial improvements on the CPU at 256^2 (all models are faster, and 2D models in xz or yz are more than 2x faster). For GPU I think the benchmark might need to be bigger (or smaller?!) to see di",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2035#issuecomment-961064605:1480,Benchmark,Benchmarking,1480,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2035#issuecomment-961064605,1,['Benchmark'],['Benchmarking']
Testability,looking at the benchmarks in #2335 it seems that it does. But only for some configurations,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2754#issuecomment-1261412615:15,benchmark,benchmarks,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2754#issuecomment-1261412615,1,['benchmark'],['benchmarks']
Testability,"losures for LES and ocean modeling (Dynamic Smagorinsky, Deardorff, k-epsilon, Gent-McWilliams, convective adjustment (?) etc --- physics). We have a need to implement new turbulence closures new and old alike. Gent-McWilliams is probably easy since we already have a Leith closure implemented which calculates the tensor needed to rotate the diffusivity into an isopycnal coordinate. The others are a bit more challenging. 4. Extensive profiling and benchmarking on the GPU to identify bottlenecks / places for improvement in the algorithm (numerics). We might be able to make the code a lot faster (but we aren't sure). 5. A solver for hydrostatic problems with a free surface that uses a split-explicit time-integration method. This is notoriously tricky, but we've made a lot of progress on this for the purposes of the ClimateMachine and it might be interesting to translate what we've learned into Oceananigans. There's also some minor package stuff that I want to work on, such as refactoring the output writer (#963), improving logging / feedback while oceananigans builds a model or runs a simulation (#1013), getting arrays with named axes to work (#457), and figuring out what's going wrong with models that have `Flat` dimensions (#1024). A more fun project is to come up with cool plotting recipes in 1D, 2D, and 3D (!) We'd like to show people how to use Makie (for example) to create really cool visualizations / animations of turbulence. The examples do some animation, but more complicated stuff (such as 3D contourf plots, or volume rendering) might require dedicated scripts. @navidcy and I have also discussed projects to implement 1) a shallow water model using Oceananigans functionality and 2) a quasi-geostrophic model in Oceananigans (which would use the tridiagonal solver I mentioned earlier). What else? The best project is probably one that aligns with you and your students' research... ? Definitely happy to chat further and also collaborate on something if you'd like.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724262281:2702,log,logging,2702,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724262281,1,['log'],['logging']
Testability,"ltiCPU`) that know about rank connectivity.; 2. Halo communication between ranks is done via multiple dispatch on a new `HaloCommunicationBC` type.; 3. A `DistributedFFTBasedPoissonSolver` for solving Poisson equations across ranks.; 4. A `DistributedModel` that creates local grids for each ranks, injects halo communication BCs, and passes the distributed pressure solver to a local `IncompressibleModel`. I also added some simple tests for multi architecture rank connectivity, local grid construction, injection of halo communication BCs, and halo communication (testing x, y, and z slab decompositions). Also added tests for the distributed Poisson solver ensuring the solution is divergence-free. Next step for testing would probably be to test that the code handles `Bounded` topologies correctly then add tests that reproduce the regression tests but on multiple ranks and ensure the output matches the regression output. ## Some notes. ### Domain decomposition. Domain decomposition is supported and tested in x, y, and z. But for `IncompressibleModel` z-decomposition won't work right now because vertical integrals are done inside GPU kernels (so we probably don't want to decompose in z). And PencilFFTs.jl supports decompositions in dimensions 2 and 3 (since dimension 1 FFTs are the fastest). As a result, right now Oceananigans.jl only supports slab decompositions in y although we should figure out if pencil decompositions are possible. ### Local topologies. The local grid topology may need to be different from the global/full grid topology. This isn't an issue for triply-periodic so I haven't thought about how to tackle it yet. How would topologies work for grids on a single rank (i.e. a piece of a larger grid)? Do we need a new `Communication` topology?. In the case of being `Periodic` on the left and communicating with another rank on the right, then it makes sense to be `Communication` on the left and right. But you could be `Bounded` on the left and communicating with ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-775301066:1596,test,tested,1596,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-775301066,1,['test'],['tested']
Testability,"lux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Clock{Float64}}}); @ Oceananigans.AbstractOperations ~/.julia/packages/Oceananigans/RnhUQ/src/AbstractOperations/computed_field.jl:37; [12] test_ke_dissipation_rate_terms(grid::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}; model_type::Type{NonhydrostaticModel}, closure::ScalarDiffusivity{Oceananigans.TurbulenceClosures.ExplicitTimeDiscretization, ThreeDimensionalFormulation, Float64, Float64}); @ Main ~/work/Oceanostics.jl/Oceanostics.jl/test/runtests.jl:218; [13] macro expansion; @ ~/work/Oceanostics.jl/Oceanostics.jl/test/runtests.jl:418 [inlined]; [14] macro expansion; @ /opt/hostedtoolcache/julia/1.9.2/x64/share/julia/stdlib/v1.9/Test/src/Test.jl:1498 [inlined]; [15] top-level scope; @ ~/work/Oceanostics.jl/Oceanostics.jl/test/runtests.jl:400; [16] include(fname::String); @ Base.MainInclude ./client.jl:478; [17] top-level scope; @ none:6; [18] eval; @ ./boot.jl:[370](https://github.com/tomchor/Oceanostics.jl/actions/runs/5955695197/job/16154870828?pr=151#step:6:373) [inlined]; [19] exec_options(opts::Base.JLOptions); @ Base ./client.jl:280; [20] _start(); @ Base ./client.jl:522; Test Summary: | Pass Error Total Time; Oceanostics | 58 1 59 2m45.4s; ERROR: LoadError: Some tests did not pass: 58 passed, 0 failed, 1 errored, 0 broken.; in expression starting at /home/runner/work/Oceanostics.jl/Oceanostics.jl/test/runtests.jl:399; ERROR: LoadError: Package Oceanostics errored during testing; Stacktrace:; ```. If so, can we register a bugfix version asap?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3227#issuecomment-1690550352:30502,test,test,30502,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3227#issuecomment-1690550352,8,"['Test', 'test']","['Test', 'test', 'testing', 'tests']"
Testability,"ly blow up if the mean is not zero \(which means there is no solution\). However, dealing with round-off errors is always tricky, especially in this case where fast convergence leads to a rapid decrease in the ""signal-to-error ratio"". . ```Python; import numpy as np; import matplotlib.pyplot as plt. def gram_schmidt(X, row_vecs=True, norm = True):; if not row_vecs:; X = X.T; Y = X[0:1,:].copy(); for i in range(1, X.shape[0]):; proj = np.diag((X[i,:].dot(Y.T)/np.linalg.norm(Y,axis=1)**2).flat).dot(Y); Y = np.vstack((Y, X[i,:] - proj.sum(0))); if norm:; Y = np.diag(1/np.linalg.norm(Y,axis=1)).dot(Y); if row_vecs:; return Y; else:; return Y.T. def cg_solve(A,b,N):. x = np.zeros_like(b). r = b - A.dot(x). p = r.copy(). rs = []. for i in range(N):. rs.append(np.linalg.norm(r)). Ap = A.dot(p). alpha = np.dot(p,r)/np.dot(p,Ap); x = x + alpha*p. # r = b - A.dot(x) # a numerically more stable version; r -= alpha * Ap. beta = -np.dot(r,Ap)/np.dot(p,Ap); p = r + beta*p. return np.array(rs). def main():; N = 256. # create a positive definite diagonal matrix; matrix_D = np.diag(np.random.rand(N) + 1.0). # create a vector; b0 = np.random.normal(size=N); b0 /= np.linalg.norm(b0). # set one eigenvalue value to zero and update the vector; matrix_D[0, 0] = 0.0; b0[0] = 0.0. # create an orthogonal matrix; matrix_q = gram_schmidt(np.random.normal(size=(N, N))). # create a positive semi-definite symmetric matrix; matrix_A = np.dot(matrix_q, np.dot(matrix_D, matrix_q.T)); b = np.dot(matrix_q, b0). # add a random perturbation; # b += 1e-5 * np.random.normal(size=N). # return the residuals at every iteration; rs = cg_solve(matrix_A, b, N=64). # plot residuals as a function of iterations; fig, ax = plt.subplots(). ax.plot(rs, marker='o'). ax.set_yscale('log'). ax.set_xlabel('Number of Iterations'); ax.set_ylabel('Residual'). plt.savefig('cg_residual.png'). if __name__ == '__main__':; main(); ```; ![cg_residual](https://github.com/user-attachments/assets/2091ea48-2e34-41f6-93c2-a5f0ee7f0b75)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3802#issuecomment-2397713089:2790,log,log,2790,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3802#issuecomment-2397713089,1,['log'],['log']
Testability,"mNlLmps) | | |; | [...ation/convergence\_tests/point\_exponential\_decay.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL3BvaW50X2V4cG9uZW50aWFsX2RlY2F5Lmps) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | [benchmark/benchmark\_ffts.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mZnRzLmps) | | |; | [...ts/one\_dimensional\_gaussian\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9nYXVzc2lhbl9hZHZlY3Rpb25fZGlmZnVzaW9uLmps) | | |; | [...ests/one\_dimensional\_cosine\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9jb3NpbmVfYWR2ZWN0aW9uX2RpZmZ1c2lvbi5qbA==) | | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | | |; | [test/test\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X29wZXJhdG9ycy5qbA==) | | |; | ... and [49 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792?src=pr&el=footer). Last update [d383b6a...ad6a215](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792?src=pr&el=lastupdated). Read the [comment docs](https://docs.codeco",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/792#issuecomment-657511230:2615,test,test,2615,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/792#issuecomment-657511230,2,['test'],['test']
Testability,"m_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75. 2 devices:; 0: Tesla V100-SXM2-32GB (sm_70, 31.432 GiB / 31.749 GiB available); 1: Tesla V100-SXM2-32GB (sm_70, 31.738 GiB / 31.749 GiB available); nothing. [2021/08/11 22:39:51.084] INFO Setting up benchmark: (GPU, Float64, 2048)...; [2021/08/11 22:40:32.330] INFO warming up; [2021/08/11 22:41:32.311] INFO Simulation is stopping. Model iteration 1 has hit or exceeded simulation stop iteration 1.; [2021/08/11 22:41:32.729] WARN Calling CUDA.@profile only informs an external profiler to start.; The user is responsible for launching Julia under a CUDA profiler. It is recommended to use Nsight Systems, which supports interactive profiling:; $ nsys launch julia -@-> /home/henryguo/.julia/packages/CUDA/CtvPY/lib/cudadrv/profile.jl:71; [2021/08/11 22:41:32.777] INFO Simulation is stopping. Model iteration 11 has hit or exceeded simulation stop iteration 11.; [2021/08/11 22:41:34.842] INFO done profiling (GPU, Float64, 2048); ==41185== Profiling application: /nobackup/users/henryguo/projects/henry-test/julia-1.6.2/bin/julia --project shallow_water_profiler.jl; ==41185== Profiling result:; Type Time(%) Time Calls Avg Min Max Name; GPU activities: 36.32% 15.483ms 10 1.5483ms 1.5398ms 1.5571ms _Z24julia_gpu_calculate_Gvh_7ContextI14__CUDACtx_Namevv14__PassType_257v12DisableHooksE19_gpu_calculate_Gvh_16CompilerMetadataI10StaticSizeI15_2048__2048__1_E12DynamicCheckvv7NDRangeILi3ES5_I13_128__128__1_ES5_I11_16__16__1_EvvEE11OffsetArrayI7Float64Li3E13CuDeviceArrayIS9_Li3ELi1EEE22RegularRectilinearGridIS9_8PeriodicS12_4FlatS8_IS9_Li1E12StepRangeLenIS9_14TwicePrecisionIS9_ES15_IS9_EEEES9_5WENO5vvv10NamedTupleI14__uh___vh___h_5TupleIS8_IS9_Li3ES10_IS9_Li3ELi1EEES8_IS9_Li3ES10_IS9_Li3ELi1EEES8_IS9_Li3ES10_IS9_Li3ELi1EEEEES17_I2__S18_EvS17_I14__uh___vh___h_S18_I12_zeroforcingS19_S19_EES17_I27__time___iteration___stage_S18_IS9_5Int64S20_EE; 35.40% 15.088ms 10 1.5088ms 1.5042ms 1.5122ms _Z24julia_gpu_calculate_Guh_7ContextI14__CUDACtx_Namevv",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-898095311:2790,test,test,2790,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-898095311,1,['test'],['test']
Testability,"mal bubble test, which is the worst offender, as an example:. ```julia; | [2023/05/22 15:07:12.173] INFO Δu: min=-1.559869e-13, max=+1.317666e-13, mean=+7.650904e-22, absmean=+2.393027e-14, std=+3.376841e-14 (3926/4096 matching grid points);   | [2023/05/22 15:07:12.174] INFO Δv: min=-1.339960e-13, max=+1.403664e-13, mean=+1.756466e-22, absmean=+1.796207e-14, std=+2.558788e-14 (3971/4096 matching grid points);   | [2023/05/22 15:07:12.175] INFO Δw: min=-4.886854e-13, max=+5.149812e-13, mean=+2.845466e-16, absmean=+5.854449e-14, std=+8.803219e-14 (4318/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Expression: all(test_fields.v .≈ correct_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/c",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:1287,Test,Test,1287,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586,2,"['Test', 'test']","['Test', 'test']"
Testability,"mark""); > benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); > benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; > benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); > benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Warming up distributed incompressible model on rank $local_rank...""; > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Benchmarking distributed incompressible model on rank $local_rank...""; > docs/src/physics/incompressible_model.md:# Incompressible model; > docs/src/numerical_implementation/time_stepping.md:where, e.g., for the incompressible model, ; > docs/make.jl: ""Incompressible model"" => ""physics/incompressible_model.md"",; > src/Distributed/distributed_incompressible_model.jl:##### Distributed incompressible model constructor; > validation/immersed_boundaries/flow_around_cylinder.jl:# setting up incompressible model with immersed boundary; > ```; > ; > If you're okay with it I can make these alterations myself (idk what are the protocols about modifying other people's PRs...). Thanks that's helpful!; Hm... Are you sure you are looking at the latest version? Because some of those incompressible things I've changed already!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932:1950,benchmark,benchmark,1950,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932,3,"['Benchmark', 'benchmark']","['Benchmarking', 'benchmark']"
Testability,"maximum iterations for this test are 20 with a 128 grid size, so I think we need to exclude the boundary condition possibility and look at other synchronization issues (maybe particular to the shallow water model)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430067998:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430067998,1,['test'],['test']
Testability,maybe adding a test for cases in which `immersed_condition = FaceImmersedCondition()`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2905#issuecomment-1427078258:15,test,test,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2905#issuecomment-1427078258,1,['test'],['test']
Testability,merge when tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2995#issuecomment-1480341742:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2995#issuecomment-1480341742,1,['test'],['tests']
Testability,"mething to do with it.; ```; Oceananigans v0.61.0; Julia Version 1.6.2; Commit 1b93d53fc4 (2021-07-14 15:36 UTC); Platform Info:; OS: Linux (powerpc64le-unknown-linux-gnu); CPU: unknown; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, pwr9); GPU: Tesla V100-SXM2-32GB. CUDA toolkit 10.2.89, local installation; CUDA driver 10.2.0; NVIDIA driver 440.64.0. Libraries: ; - CUBLAS: 10.2.2; - CURAND: 10.1.2; - CUFFT: 10.1.2; - CUSOLVER: 10.3.0; - CUSPARSE: 10.3.1; - CUPTI: 12.0.0; - NVML: 10.0.0+440.64.0; - CUDNN: missing; - CUTENSOR: missing. Toolchain:; - Julia: 1.6.2; - LLVM: 11.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5; - Device capability support: sm_30, sm_32, sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75. 2 devices:; 0: Tesla V100-SXM2-32GB (sm_70, 31.432 GiB / 31.749 GiB available); 1: Tesla V100-SXM2-32GB (sm_70, 31.738 GiB / 31.749 GiB available); nothing. [2021/08/11 22:39:51.084] INFO Setting up benchmark: (GPU, Float64, 2048)...; [2021/08/11 22:40:32.330] INFO warming up; [2021/08/11 22:41:32.311] INFO Simulation is stopping. Model iteration 1 has hit or exceeded simulation stop iteration 1.; [2021/08/11 22:41:32.729] WARN Calling CUDA.@profile only informs an external profiler to start.; The user is responsible for launching Julia under a CUDA profiler. It is recommended to use Nsight Systems, which supports interactive profiling:; $ nsys launch julia -@-> /home/henryguo/.julia/packages/CUDA/CtvPY/lib/cudadrv/profile.jl:71; [2021/08/11 22:41:32.777] INFO Simulation is stopping. Model iteration 11 has hit or exceeded simulation stop iteration 11.; [2021/08/11 22:41:34.842] INFO done profiling (GPU, Float64, 2048); ==41185== Profiling application: /nobackup/users/henryguo/projects/henry-test/julia-1.6.2/bin/julia --project shallow_water_profiler.jl; ==41185== Profiling result:; Type Time(%) Time Calls Avg Min Max Name; GPU activities: 36.32% 15.483ms 10 1.5483ms 1.5398ms 1.5571ms _Z",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-898095311:1983,benchmark,benchmark,1983,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-898095311,1,['benchmark'],['benchmark']
Testability,"milar discontinuity to what was observed in https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2259395775, as shown in the figure below. The vertical lines indicate the start and end of the windows.; <img width=""584"" alt=""image"" src=""https://github.com/user-attachments/assets/6a14b489-622a-440a-a73a-4030b52b71e9"">. With this new [PR](https://github.com/CliMA/Oceananigans.jl/pull/3721/commits/a52812b00eb38e712ed20c7a6db3cf2e0c3a7877), the same test now yields a smooth solution: ; <img width=""593"" alt=""image"" src=""https://github.com/user-attachments/assets/0a436474-cd81-4378-bfbd-110eb8417b5d"">. While the discontinuity caused by rounding errors has been resolved, not all cases with different Δt pass the test, e.g., ; ```julia; for (n, t) in enumerate(single_ds[""time""][2:end]); averaging_times = [t - n*Δt for n in 0:stride:window_size-1 if t - n*Δt >= 0]; @test all(isapprox.(single_ds[""c1""][:, n+1], c̄1(averaging_times), rtol=1e-5)); end; ```; Here is an example of a case that does not pass the test:; ```julia; using Oceananigans; using Plots; using NCDatasets; using Test. arch = CPU(); topo = (Periodic, Periodic, Periodic); domain = (x=(0, 1), y=(0, 1), z=(0, 1)); grid = RectilinearGrid(arch, topology=topo, size=(4, 4, 4); domain...). λ1(x, y, z) = x + (1 - y)^2 + tanh(z); λ2(x, y, z) = x + (1 - y)^2 + tanh(4z). Fc1(x, y, z, t, c1) = - λ1(x, y, z) * c1; Fc2(x, y, z, t, c2) = - λ2(x, y, z) * c2; ; c1_forcing = Forcing(Fc1, field_dependencies=:c1); c2_forcing = Forcing(Fc2, field_dependencies=:c2). model = NonhydrostaticModel(; grid,; timestepper = :RungeKutta3,; tracers = (:c1, :c2),; forcing = (c1=c1_forcing, c2=c2_forcing)). set!(model, c1=1, c2=1). Δt = .01 #1/64 # Nice floating-point number; simulation = Simulation(model, Δt=Δt, stop_time=150Δt). ∫c1_dxdy = Field(Average(model.tracers.c1, dims=(1, 2))); ∫c2_dxdy = Field(Average(model.tracers.c2, dims=(1, 2))); ; nc_outputs = Dict(""c1"" => ∫c1_dxdy, ""c2"" => ∫c2_dxdy); nc_dimensions = Dict(""c1"" => (""zC""",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2378113073:1664,test,test,1664,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2378113073,2,"['Test', 'test']","['Test', 'test']"
Testability,"most tests fail now...... :( . Also I get; ```Julia; julia> ∫ᶻ_Axᶠᶜᶜ = Field{Face, Center, Nothing}(with_halo((3, 3, 1), grid), indices = grid.Nz); ERROR: BoundsError: attempt to access Tuple{Int64} at index [2]; Stacktrace:; [1] indexed_iterate; @ ./tuple.jl:86 [inlined]; [2] new_data(FT::DataType, grid::ImmersedBoundaryGrid{Float64, Bounded, Periodic, Bounded, RectilinearGrid{Float64, Bounded, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, CPU}, GridFittedBottom{OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, loc::Tuple{DataType, DataType, DataType}, indices::Int64); @ Oceananigans.Grids ~/Research/OC2.jl/src/Grids/new_data.jl:59; [3] (Field{Face, Center, Nothing, O, G, I, D, T, B, S, F} where {O, G, I, D, T, B, S, F})(grid::ImmersedBoundaryGrid{Float64, Bounded, Periodic, Bounded, RectilinearGrid{Float64, Bounded, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, CPU}, GridFittedBottom{OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, T::DataType; kw::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:indices,), Tuple{Int64}}}); @ Oceananigans.Fields ~/Research/OC2.jl/src/Fields/field.jl:158; [4] top-level scope; @ REPL[24]:1; [5] top-level scope; @ ~/.julia/packages/CUDA/DfvRa/src/initialization.jl:52; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2723#issuecomment-1247516012:5,test,tests,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2723#issuecomment-1247516012,1,['test'],['tests']
Testability,"mpiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; [ Info: Oceananigans will use 24 threads; [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 176.874 ms (66322 allocations: 23.79 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 500.601 ms (111291 allocations: 276.81 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 320.139 ms (48245 allocations: 269.93 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 14.721 ms (36840 allocations: 12.11 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 23.795 ms (40688 allocations: 12.18 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 17.219 ms (38055 allocations: 12.14 MiB); ```. ## This PR. ```julia; julia> include(""benchmark_two_dimensional_models.jl""); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 104.521 ms (77858 allocations: 25.03 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 235.623 ms (120254 allocations: 26.49 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 137.914 ms (72488 allocations: 19.41 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 14.675 ms (37239 allocations: 11.65 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 22.468 ms ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2035#issuecomment-961064605:1063,Benchmark,Benchmarking,1063,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2035#issuecomment-961064605,1,['Benchmark'],['Benchmarking']
Testability,"mple, there is no tridiagonal solver in the pure FFT solver. You might argue that we just put nothing if we don't need it, but then we have more ""ambiguous"" fields like eigenvalues that are not needed in the tridiagonal solver and source_term that is not needed in the FFT. I am not convinced that a single solver would lead to less (or cleaner) code. Mostly because the underlying code (constructor and `solve!` functions) is compact and slender enough to justify writing individual functions for different grids (the number of lines in the docstring for the `DistributedFourierTridiagonalPoissonSolver` is comparable to the code related to the solver). I think this improves the interpretability of the algorithm. Maybe an improvement would be writing a unified constructor that would spit out the different solvers.; > ; > > 2. It might make sense to split the constructor into two parts, so that we can build a tridiagonal solver even when all three directions are regular. That could be useful for testing, for example.; > ; > I have added this capability by passing the `stretched_direction` kwarg.; > ; > > Also note that in terms of operation count the tridiagonal solve is cheaper than FFT...; > ; > I think, all things considered, the mixed FFT / tridiagonal solve will have basically the same computational cost as the pure FFT solve only for a stretched x direction. The additional transposes required for a y or stretched z direction will completely dominate the cost of the actual operations.; > ; > As an example, this is a slab decomposition with a fairly big grid (512 x 256^2) split on 2 GPUs on Tartarus ![311333172-43dba752-a91f-4b33-8ade-5a6ec57c982b](https://private-user-images.githubusercontent.com/33547697/356260457-1a376c1e-9912-4e00-8dca-91deb46338f8.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjMyMjUwMzMsIm5iZiI6MTcyMzIyNDczMywicGF0aCI6Ii8zMzU0NzY5Ny8zNTYyNjA0NTctMWEzN",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2278419522:1494,test,testing,1494,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2278419522,1,['test'],['testing']
Testability,ms │ 1.73 MiB │ 4416 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴─────────┴─────────┘. ShallowWater model benchmarks (Ns²); ┌───────────────┬─────────────┬─────┬───────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ median │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼───────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 64 │ 2.130 ms │ 796.97 KiB │ 1460 │ 10 │; │ CPU │ Float64 │ 128 │ 6.043 ms │ 796.97 KiB │ 1460 │ 10 │; │ CPU │ Float64 │ 256 │ 34.627 ms │ 796.97 KiB │ 1460 │ 10 │; │ GPU │ Float64 │ 64 │ 2.164 ms │ 1.06 MiB │ 3315 │ 10 │; │ GPU │ Float64 │ 128 │ 2.112 ms │ 1.06 MiB │ 3315 │ 10 │; │ GPU │ Float64 │ 256 │ 2.614 ms │ 1.06 MiB │ 3315 │ 10 │; └───────────────┴─────────────┴─────┴───────────┴────────────┴────────┴─────────┘. origin/main. Nonhydrostatic model benchmarks (Ns³); ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ median │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 64 │ 81.958 ms │ 636.84 KiB │ 1576 │ 10 │; │ CPU │ Float64 │ 128 │ 405.241 ms │ 636.84 KiB │ 1576 │ 10 │; │ CPU │ Float64 │ 256 │ 6.018 s │ 636.84 KiB │ 1576 │ 1 │; │ GPU │ Float64 │ 64 │ 3.386 ms │ 953.50 KiB │ 4124 │ 10 │; │ GPU │ Float64 │ 128 │ 11.686 ms │ 979.23 KiB │ 5771 │ 10 │; │ GPU │ Float64 │ 256 │ 68.086 ms │ 1.24 MiB │ 24592 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────┴─────────┘. HydrostaticFreeSurface model benchmarks (Ns²×10); ┌───────────────┬─────────────┬─────┬────────────┬────────────┬─────────┬─────────┐; │ Architectures │ Float_types │ Ns │ median │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼─────────┼─────────┤; │ CPU │ Float64 │ 64 │ 9.178 ms │ 1.39 MiB │ 2714 │ 10 │; │ CPU │ Float64 │ 128 │ 29.660 ms │ 1.39 MiB │ 2714 │ 10 │; │ CPU │ F,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1066030763:2257,benchmark,benchmarks,2257,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1066030763,1,['benchmark'],['benchmarks']
Testability,ms │ 3.709 ms │ 547.70 KiB │ 6657 │; │ GPU │ Float64 │ 128 │ 4.682 ms │ 4.725 ms │ 4.880 ms │ 5.654 ms │ 632.67 KiB │ 6655 │; │ GPU │ Float64 │ 256 │ 25.907 ms │ 32.091 ms │ 31.487 ms │ 32.483 ms │ 801.86 KiB │ 6763 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┘; ```. ### CPU to GPU speedup. ```; ┌─────────────┬─────┬─────────┬─────────┬─────────┐; │ Float_types │ Ns │ speedup │ memory │ allocs │; ├─────────────┼─────┼─────────┼─────────┼─────────┤; │ Float32 │ 32 │ 2.93732 │ 3.62888 │ 3.63319 │; │ Float32 │ 64 │ 17.443 │ 3.9155 │ 3.63373 │; │ Float32 │ 128 │ 86.446 │ 4.52412 │ 3.63264 │; │ Float32 │ 256 │ 127.777 │ 5.72434 │ 3.63483 │; │ Float64 │ 32 │ 2.51868 │ 3.63039 │ 3.63319 │; │ Float64 │ 64 │ 17.1005 │ 3.91654 │ 3.63373 │; │ Float64 │ 128 │ 86.4912 │ 4.52413 │ 3.63264 │; │ Float64 │ 256 │ 135.031 │ 5.73397 │ 3.69159 │; └─────────────┴─────┴─────────┴─────────┴─────────┘; ```. ---. ## Incompressible model benchmarks (regular Rectilinear grid). ### Raw benchmarks. ```; Incompressible model benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ CPU │ Float32 │ 32 │ 5.408 ms │ 5.713 ms │ 5.871 ms │ 6.634 ms │ 287.98 KiB │ 2136 │; │ CPU │ Float32 │ 64 │ 36.120 ms │ 38.174 ms │ 38.435 ms │ 41.795 ms │ 287.98 KiB │ 2136 │; │ CPU │ Float32 │ 128 │ 304.741 ms │ 311.332 ms │ 311.085 ms │ 315.204 ms │ 287.98 KiB │ 2136 │; │ CPU │ Float32 │ 256 │ 2.598 s │ 2.598 s │ 2.598 s │ 2.599 s │ 287.98 KiB │ 2136 │; │ CPU │ Float64 │ 32 │ 6.419 ms │ 6.647 ms │ 6.733 ms │ 7.657 ms │ 350.52 KiB │ 2136 │; │ CPU │ Float64 │ 64 │ 42.856 ms │ 46.229 ms │ 45.719 ms │ 47.103 ms │ 350.52 KiB │ 2136 │; │ CPU │ Float64 │ 128 │ 369.043 ms │ 380.330 ms │ 380.214 ,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1403#issuecomment-786398050:3505,benchmark,benchmarks,3505,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1403#issuecomment-786398050,1,['benchmark'],['benchmarks']
Testability,ms │ 32.198 ms │ 876.83 KiB │ 11247 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┘; ```. ```; Incompressible model CPU -> GPU speedup; ┌─────────────┬─────┬─────────┬─────────┬─────────┐; │ Float_types │ Ns │ speedup │ memory │ allocs │; ├─────────────┼─────┼─────────┼─────────┼─────────┤; │ Float32 │ 32 │ 1.9749 │ 3.31118 │ 6.08689 │; │ Float32 │ 64 │ 11.72 │ 3.31041 │ 6.08475 │; │ Float32 │ 128 │ 77.0954 │ 3.31041 │ 6.08475 │; │ Float32 │ 256 │ 119.98 │ 3.31028 │ 6.08369 │; │ Float64 │ 32 │ 1.91043 │ 2.98887 │ 5.9984 │; │ Float64 │ 64 │ 12.3861 │ 2.98823 │ 5.99627 │; │ Float64 │ 128 │ 79.9049 │ 2.98727 │ 5.98667 │; │ Float64 │ 256 │ 113.772 │ 2.98813 │ 5.9952 │; └─────────────┴─────┴─────────┴─────────┴─────────┘; ```. # This branch. ```; Incompressible model benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ CPU │ Float32 │ 32 │ 5.444 ms │ 5.636 ms │ 6.018 ms │ 9.357 ms │ 247.69 KiB │ 1916 │; │ CPU │ Float32 │ 64 │ 36.689 ms │ 37.147 ms │ 37.348 ms │ 38.446 ms │ 247.69 KiB │ 1916 │; │ CPU │ Float32 │ 128 │ 314.926 ms │ 316.673 ms │ 318.545 ms │ 338.621 ms │ 247.69 KiB │ 1916 │; │ CPU │ Float32 │ 256 │ 2.778 s │ 2.781 s │ 2.781 s │ 2.783 s │ 247.69 KiB │ 1916 │; │ CPU │ Float64 │ 32 │ 5.735 ms │ 6.063 ms │ 6.136 ms │ 7.018 ms │ 299.80 KiB │ 1916 │; │ CPU │ Float64 │ 64 │ 43.243 ms │ 43.446 ms │ 43.607 ms │ 44.871 ms │ 299.80 KiB │ 1916 │; │ CPU │ Float64 │ 128 │ 366.596 ms │ 367.479 ms │ 367.682 ms │ 369.125 ms │ 299.80 KiB │ 1916 │; │ CPU │ Float64 │ 256 │ 3.281 s │ 3.331 s │ 3.331 s │ 3.381 s │ 299.80 KiB │ 1916 │; │ GPU │ Float32 │ 32 │ 2.888 ms │ 2.939 ms │ 2.994 ms │ 3.485 ms │ 814.47 KiB │ 11744 │; │ GPU │ Float32 │ 64 │ 3.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-736692263:3483,benchmark,benchmarks,3483,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-736692263,1,['benchmark'],['benchmarks']
Testability,"n [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/21 06:38:01.772] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:30.393] INFO Initializing simulation...; [2023/02/21 06:38:30.504] INFO ... simulation initialization complete (110.043 ms); [2023/02/21 06:38:30.504] INFO Executing initial time step...; [2023/02/21 06:38:40.776] INFO ... initial time step complete (10.272 seconds).; [2023/02/21 06:38:42.742] INFO Simulation is stopping. Mo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:14525,Test,Testing,14525,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['Test'],['Testing']
Testability,"n complete (57.503 ms); [2023/02/27 18:57:49.625] INFO Executing initial time step...; [2023/02/27 18:58:00.006] INFO ... initial time step complete (10.381 seconds).; [2023/02/27 18:58:00.502] INFO Simulation is stopping after running for 10.911 seconds.; [2023/02/27 18:58:00.502] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/27 18:58:00.509] INFO Δu: min=-2.972623e-08, max=+2.977460e-08, mean=+3.472408e-11, absmean=+2.084662e-09, std=+5.973908e-09 (16384/16384 matching grid points); [2023/02/27 18:58:00.509] INFO Δv: min=-1.453264e-11, max=+1.436524e-11, mean=+4.659518e-15, absmean=+6.267771e-13, std=+1.805375e-12 (16512/16512 matching grid points); [2023/02/27 18:58:00.509] INFO Δh: min=-4.766880e-07, max=+4.767828e-07, mean=-9.313224e-10, absmean=+2.070016e-07, std=+2.552765e-07 (16384/16384 matching grid points); FJP: arch and formulation = GPU()VectorInvariantFormulation(); [2023/02/27 18:58:00.510] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/27 18:58:00.515] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:223; [2023/02/27 18:58:00.613] INFO Initializing simulation...; [2023/02/27 18:58:00.613] INFO ... simulation initialization complete (299.591 μs); [2023/02/27 18:58:00.613] INFO Executing initial time step...; [2023/02/27 18:58:00.615] INFO ... initial time step complete (1.524 ms).; [2023/02/27 18:58:00.636] INFO Simulation is stopping after running for 21.966 ms.; [2023/02/27 18:58:00.636] INFO Model iteration 20 equals or exceeds stop iteration 20.; --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.644] INFO Δu: min=-2.958580e-08, max=+2.921001e-08, mean=-7.420989e-11, a",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:3641,Test,Testing,3641,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226,1,['Test'],['Testing']
Testability,"n interpolate in between and back to the sphere to get the other staggered grid coordinates. The file should provide this. > 5. We need to use the sine and cosine of the local angle between the grid orientation (e.g., u-velocity) and zonal west-east direction at the grid-cell centers to `set!` velocity fields. Right now we're limited to setting velocity fields from a streamfunction... Let's come up with an abstraction for vectors and use this for `HydrostaticFreeSurfaceModel`. > 6. Should we be filling the halos of the grid metrics? Seems like they should be filled like velocity halos but without any sign changes. Yes. > 7. Make sure that calling `fill_halo_regions!` on a horizontal velocity field only fills the halos with non-`CubedSphereExchange` boundary conditions. Seems easy, but setting boundary conditions will require an abstraction for vectors and coordinate system transformations. > 8. Add the cubed sphere passive tracer advection and surface gravity waves validation experiments to validation CI pipeline. Not urgent. > 9. Figure out a way to abstract and clean up `fill_horizontal_velocity_halos!` and `fill_*_halo!`... Let's come up with an abstraction for vectors and use this for `HydrostaticFreeSurfaceModel`. We want to write `fill_halo_regions!(::HorizontalVectorField, ...)`. > 10. Merge utils from `src/CubedSpheres/cubed_sphere_utils.jl` and `src/Distributed/distributed_utils.jl` into `Oceananigans.Grids`. No rush... > 11. Figure out if the tests in `test_cubed_sphere_halo_exchange.jl` can be abstracted and run for all six faces. It's tedious to have to type them out but could be clearer and easier to debug in its current form... I don't think less abstraction is more clear. > 12. Fix tests!. Tests must pass or we can't develop. > 13. I think cubed sphere performance can be improved, especially for halo filling. We might need some benchmarks and profiling to figure out where cubed sphere simulations are allocating too much memory. Not urgent for this PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1522#issuecomment-818046333:2560,test,tests,2560,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1522#issuecomment-818046333,7,"['Test', 'benchmark', 'test']","['Tests', 'benchmarks', 'tests']"
Testability,"n of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore ~/.julia/packages/GPUArraysCore/uOYfN/src/GPUArraysCore.jl:103; [3] getindex(xs::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, I::Int64); @ GPUArrays ~/.julia/packages/GPUArrays/EZkix/src/host/indexing.jl:9; [4] getindex; @ ~/.julia/packages/OffsetArrays/0MOrf/src/OffsetArrays.jl:438 [inlined]; [5] _getindex; @ ./abstractarray.jl:1321 [inlined]; [6] getindex; @ ./abstractarray.jl:1288 [inlined]; [7] getindex; @ ~/Software/Oceananigans.jl/src/Fields/field.jl:399 [inlined]; [8] _broadcast_getindex; @ ./broadcast.jl:675 [inlined]; [9] _getindex; @ ./broadcast.jl:705 [inlined]; [10] _broadcast_getindex; @ ./broadcast.jl:681 [inlined]; [11] getindex; @ ./broadcast.jl:636 [inlined]; [12] macro expansion; @ ./broadcast.jl:1004 [inlined]; [13] macro expansion; @ ./simdloop.jl:77 [inlined]; [14] copyto!; @ ./broadcast.jl:1003 [inlined]; [15] copyto!; @ ./broadcast.jl:956 [inlined]; [16] copy; @ ./broadcast.jl:928 [inlined]; [17] materialize; @ ./broadcast.jl:903 [inlined]; [18] isapprox(a::Field{…}, b::Field{…}; kw::@Kwargs{…}); @ Oceananigans.Fields ~/Software/Oceananigans.jl/src/Fields/field.jl:712; [19] test_shallow_water_diffusion_cosine(grid::RectilinearGrid{…}, formulation::ConservativeFormulation, fieldname::Symbol, ξ::Base.ReshapedArray{…}); @ Main ~/Software/Oceananigans.jl/test/test_shallow_water_models.jl:84; [20] top-level scope; @ ./REPL[25]:4; [21] top-level scope; @ ~/.julia/packages/CUDA/nbRJk/src/initialization.jl:205; Some type information was truncated. Use `show(err)` to see complete types. ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1966839141:2481,test,test,2481,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1966839141,1,['test'],['test']
Testability,"n script?. > @glwagner also suggested we test this with lat-lon grids and create tests. I think that should be the case for lat-lon and rectilinear grids, no? At the moment I think we're kinda limited with IBM tests:. ```; ~/repos/Oceananigans.jl/test $ grep -r ""\<Immersed"" * ; test_boundary_conditions_integration.jl: immersed_rectilinear_grid(topology) = ImmersedBoundaryGrid(RectilinearGrid(arch; topology, z=(-Lz, Lz), grid_kw...), ib); test_boundary_conditions_integration.jl: if grid isa ImmersedBoundaryGrid && side == :bottom; test_boundary_conditions_integration.jl: if grid isa ImmersedBoundaryGrid && side == :bottom; test_boundary_conditions_integration.jl: # Omit ImmersedBoundaryGrid from vertically-periodic test; test_conditional_reductions.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBoundary; test_conditional_reductions.jl:using Oceananigans.ImmersedBoundaries: conditional_length; test_conditional_reductions.jl: @info "" Testing Reductions on Immersed fields""; test_conditional_reductions.jl: ibg = ImmersedBoundaryGrid(grid, GridFittedBoundary((x, y, z) -> (x < 0.5))); test_dynamics.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBoundary, GridFittedBottom, mask_immersed_field!; test_dynamics.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom((x, y) -> 0)); test_dynamics.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(bathymetry)); test_dynamics.jl: # Immersed grid cases; test_dynamics.jl: immersed_vertical_grid = ImmersedBoundaryGrid(RectilinearGrid(arch,; test_dynamics.jl: ImmersedBoundaryGrid(RectilinearGrid(arch,; test_hydrostatic_free_surface_immersed_boundaries_implicit_solve.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom; test_hydrostatic_free_surface_immersed_boundaries_implicit_solve.jl:@testset ""Immersed boundaries test divergent flow solve with hydrostatic free surface models"" begin; test_hydrostatic_free_surface_immersed_bounda",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1126367199:1674,Test,Testing,1674,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1126367199,1,['Test'],['Testing']
Testability,"nZlY3Rpb24uamw=) | `0.00% <ø> (ø)` | |; | [examples/one\_dimensional\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb25lX2RpbWVuc2lvbmFsX2RpZmZ1c2lvbi5qbA==) | `0.00% <ø> (ø)` | |; | [src/AbstractOperations/averages\_of\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9hdmVyYWdlc19vZl9vcGVyYXRpb25zLmps) | `66.66% <ø> (ø)` | |; | [src/Diagnostics/Diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL0RpYWdub3N0aWNzLmps) | `100.00% <ø> (ø)` | |; | [src/OutputWriters/OutputWriters.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvT3V0cHV0V3JpdGVycy5qbA==) | `66.66% <ø> (ø)` | |; | [src/Simulations/run.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `93.61% <ø> (ø)` | |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | `99.25% <ø> (-0.08%)` | :arrow_down: |; | [...ests/ConvergenceTests/DoublyPeriodicTaylorGreen.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvRG91Ymx5UGVyaW9kaWNUYXlsb3JHcmVlbi5qbA==) | `0.00% <0.00%> (ø)` | |; | ... and [10 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932?src=pr&el=footer). Last update [3b45ce5...82d362a](https://codecov.io/gh/CliMA/",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/932#issuecomment-691237401:2541,test,test,2541,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/932#issuecomment-691237401,2,['test'],['test']
Testability,"n_simple_particle_tracking_tests(arch, grid, timestepper); @show grid; end; ```. which would give us these 8 (per architecture) test cases. ```julia; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Periodic on vertically uniform grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Periodic on vertically stretched grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, max(Δz)=0.5; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Flat on vertically uniform grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo ; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Flat y; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Flat on vertically stretched grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Flat y; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, max(Δz)=0.5 ; [ Info: Testing Lagrangian particle tracking [CPU, RungeKutta3] with y Periodic on vertically uniform grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] regularly spaced wi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232:1813,Test,Testing,1813,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232,1,['Test'],['Testing']
Testability,"n_wind_mixing_and_convection.jl""); i: 0010, t: 11.000 s, Δt: 1.100 s, wmax = 7.8e-04 ms⁻¹, wall time: 594.383 ms; i: 0020, t: 23.100 s, Δt: 1.210 s, wmax = 1.5e-03 ms⁻¹, wall time: 581.628 ms; i: 0030, t: 36.410 s, Δt: 1.331 s, wmax = 2.3e-03 ms⁻¹, wall time: 567.346 ms; i: 0040, t: 51.051 s, Δt: 1.464 s, wmax = 3.2e-03 ms⁻¹, wall time: 562.455 ms; i: 0050, t: 1.119 min, Δt: 1.611 s, wmax = 4.2e-03 ms⁻¹, wall time: 576.511 ms; i: 0060, t: 1.415 min, Δt: 1.772 s, wmax = 5.2e-03 ms⁻¹, wall time: 571.096 ms; ```. In this case, the information we decide to print is:. * iteration number `i`; * the simulation time `t`; * the time-step (because we are using adaptive time-stepping); * the maximum vertical velocity; * the elapsed wall time for time stepping *only* (not including plotting) between print messages. I think this issue is about a better way to achieve the printing of simulation progress. Two ideas are:. 1. Somehow use a logging package (though I'm not 100% what this would look like --- perhaps this means adding lines to our [time-stepping loop](https://github.com/climate-machine/Oceananigans.jl/blob/ca814dbe608487857c06a51a7383350dcf1e46f4/src/time_steppers.jl#L28)?; 2. Create some types that allow the user to more easily manage the printing of progress messages, expanding on the pattern used in our example. I've thought a bit about 2: I think a generic progress messenger would be both configurable but also include some comforting defaults. A simple way to start could be something like. ```julia; struct ProgressPrinter{DT, M, D}; Δt :: DT; model :: M; diagnostics :: D; end; ```. with some kind of print function, something like. ```julia; pretty_Δt(Δt::Number) = prettytime(Δt); pretty_Δt(Δt::TimeStepWizard) = prettytime(wizard.Δt). function Base.print(progress::ProgressMessenger); @printf(""i: %04d, t: %s, Δt: %s, ; progress.model.clock.iteration, prettytime(progress.model.clock.time), pretty_Δt(progress.Δt)) ; return nothing; end; ```. One could then expand on this",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-540828221:1478,log,logging,1478,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-540828221,1,['log'],['logging']
Testability,"ndition{Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}}, _tupled_implicit_linear_coefficients::@NamedTuple{b::ZeroField{Int64, 3}, e::Field{Center, Center, Center, Nothing, RectilinearGrid{Float64, Flat, Flat, Bounded, Float64, Float64, Float64, Nothing, Nothing, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{Nothing, Nothing, Nothing, Nothing, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, @NamedTuple{}}}, ::Active{Float64}); @ Enzyme ~/.julia/packages/Enzyme/8GSlk/src/Enzyme.jl:504; [63] macro expansion; @ ~/Projects/Oceananigans.jl/test/test_enzyme.jl:285 [inlined]; [64] macro expansion; @ ~/.julia/juliaup/julia-1.10.5+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/Test/src/Test.jl:1577 [inlined]; [65] top-level scope; @ ~/Projects/Oceananigans.jl/test/test_enzyme.jl:265; [66] include(fname::String); @ Base.MainInclude ./client.jl:489; [67] top-level scope; @ REPL[6]:1; [68] eval; @ ./boot.jl:385 [inlined]; [69] eval_user_input(ast::Any, backend::REPL.REPLBackend, mod::Module); @ REPL ~/.julia/juliaup/julia-1.10.5+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/REPL/src/REPL.jl:150; [70] repl_backend_loop(backend::REPL.REPLBackend, get_module::Function); @ REPL ~/.julia/juliaup/julia-1.10.5+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/REPL/src/REPL.jl:246; [71] start_repl_backend(backend::REPL.REPLBackend, consumer::Any; get_module::Function); @ REPL ~/.julia/juliaup/julia-1.10.5+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/REPL/src/REPL.jl:231; [72] run_repl(repl::REPL.AbstractREPL, consumer::Any; backen",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3837#issuecomment-2400785596:151400,test,test,151400,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3837#issuecomment-2400785596,1,['test'],['test']
Testability,"nearGrid{Float64, Bounded, Bounded, Flat, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}; abstol::Float64, reltol::Float64, maxiter::Int64, log::Bool, statevars::CGStateVariables{Float64, Vector{Float64}}, verbose::Bool, Pl::Identity, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ IterativeSolvers ~/.julia/packages/IterativeSolvers/rhYBz/src/cg.jl:224; [4] solve!(x::Field{Center, Center, Center, Nothing, RectilinearGrid{Float64, Bounded, Bounded, Flat, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryCo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1139036029:7752,log,log,7752,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1139036029,1,['log'],['log']
Testability,"nearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo ; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Flat y; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Flat on vertically stretched grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Flat y; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, max(Δz)=0.5 ; [ Info: Testing Lagrangian particle tracking [CPU, RungeKutta3] with y Periodic on vertically uniform grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, RungeKutta3] with y Periodic on vertically stretched grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, max(Δz)=0.5; [ Info: Testing Lagrangian particle tracking [CPU, RungeKutta3] with y Flat on vertically uniform grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo ; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Flat y; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, RungeKutta3] with y Flat on vertically stretched grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo ; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Flat y; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, max(Δz)=0.5 ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232:3277,Test,Testing,3277,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232,2,['Test'],['Testing']
Testability,need a test too I think. Probably some refactoring to come for Lagrangian particles...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2397#issuecomment-1083725453:7,test,test,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2397#issuecomment-1083725453,1,['test'],['test']
Testability,"ngeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::Function, ::Array{Float64, 3}, ::Vararg{Any}); @ Oceananigans.Utils ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; [5] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [6] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; [7] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [8] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; [9] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [10] top-level scope; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; ```. I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be. Let me know if you want me to push the code I have with `ZDirection` and this error to the branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:3482,test,test,3482,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506,10,"['Test', 'test']","['Test', 'test']"
Testability,nhydrostaticModel benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 2.775 ms │ 2.790 ms │ 2.823 ms │ 3.051 ms │ 520.84 KiB │ 1044 │ 10 │; │ CPU │ Float64 │ 64 │ 20.168 ms │ 20.463 ms │ 20.409 ms │ 20.515 ms │ 520.84 KiB │ 1044 │ 10 │; │ CPU │ Float64 │ 128 │ 211.542 ms │ 211.646 ms │ 211.700 ms │ 212.026 ms │ 520.84 KiB │ 1044 │ 10 │; │ CPU │ Float64 │ 256 │ 2.511 s │ 2.532 s │ 2.532 s │ 2.552 s │ 520.84 KiB │ 1044 │ 2 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┴─────────┘; HydrostaticFreeSurfaceModel benchmarks; ┌───────────────┬─────────────┬─────┬───────────┬───────────┬───────────┬───────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼───────────┼───────────┼───────────┼───────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 1.195 ms │ 1.205 ms │ 1.254 ms │ 1.626 ms │ 830.98 KiB │ 1831 │ 10 │; │ CPU │ Float64 │ 64 │ 2.041 ms │ 2.051 ms │ 2.100 ms │ 2.503 ms │ 830.98 KiB │ 1831 │ 10 │; │ CPU │ Float64 │ 128 │ 5.778 ms │ 5.833 ms │ 5.873 ms │ 6.254 ms │ 830.98 KiB │ 1831 │ 10 │; │ CPU │ Float64 │ 256 │ 23.662 ms │ 23.740 ms │ 23.730 ms │ 23.840 ms │ 830.98 KiB │ 1831 │ 10 │; └───────────────┴─────────────┴─────┴───────────┴───────────┴───────────┴───────────┴────────────┴────────┴─────────┘; ShallowWaterModel benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬──────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├────────────,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116031428:1023,benchmark,benchmarks,1023,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116031428,1,['benchmark'],['benchmarks']
Testability,nhydrostaticModel benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 2.910 ms │ 2.939 ms │ 2.978 ms │ 3.237 ms │ 531.84 KiB │ 1061 │ 10 │; │ CPU │ Float64 │ 64 │ 20.486 ms │ 20.627 ms │ 20.772 ms │ 22.253 ms │ 531.84 KiB │ 1061 │ 10 │; │ CPU │ Float64 │ 128 │ 194.118 ms │ 194.567 ms │ 194.744 ms │ 196.546 ms │ 531.84 KiB │ 1061 │ 10 │; │ CPU │ Float64 │ 256 │ 2.632 s │ 2.659 s │ 2.659 s │ 2.686 s │ 531.84 KiB │ 1061 │ 2 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┴─────────┘; HydrostaticFreeSurfaceModel benchmarks; ┌───────────────┬─────────────┬─────┬───────────┬───────────┬───────────┬───────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼───────────┼───────────┼───────────┼───────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 1.157 ms │ 1.182 ms │ 1.220 ms │ 1.607 ms │ 784.72 KiB │ 1801 │ 10 │; │ CPU │ Float64 │ 64 │ 2.152 ms │ 2.298 ms │ 2.342 ms │ 2.857 ms │ 784.72 KiB │ 1801 │ 10 │; │ CPU │ Float64 │ 128 │ 5.851 ms │ 6.036 ms │ 6.061 ms │ 6.579 ms │ 784.72 KiB │ 1801 │ 10 │; │ CPU │ Float64 │ 256 │ 24.192 ms │ 24.634 ms │ 24.702 ms │ 25.757 ms │ 784.72 KiB │ 1801 │ 10 │; └───────────────┴─────────────┴─────┴───────────┴───────────┴───────────┴───────────┴────────────┴────────┴─────────┘; ShallowWaterModel benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├──────────,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116031428:3659,benchmark,benchmarks,3659,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116031428,1,['benchmark'],['benchmarks']
Testability,no bug @francispoulin. I just had a mistake in my logic. ; 9191c0d fixes it. Thanks!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2562#issuecomment-1131952753:50,log,logic,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2562#issuecomment-1131952753,2,['log'],['logic']
Testability,now at least all the CPU tests pass... note how `CUDA.@allowscalar` had to be changed in https://github.com/CliMA/Oceananigans.jl/pull/1514/commits/8313b7d3e0524d5891611e2b7431793b8d6cc68b,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-820938485:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-820938485,1,['test'],['tests']
Testability,now it's getting stuck on equality of two cuda subarrays... could you have a look at the GPU unit tests @glwagner?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2991#issuecomment-1479467667:98,test,tests,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2991#issuecomment-1479467667,1,['test'],['tests']
Testability,"ns.Models.HydrostaticFreeSurfaceModels ~/Research/OC5.jl/src/Models/HydrostaticFreeSurfaceModels/hydrostatic_free_surface_model.jl:175; [21] test_biogeochemistry!(grid::LatitudeLongitudeGrid{Float64, Periodic, Flat, Bounded, Nothing, Nothing, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, MinimalBiogeochemistryType::Type{MinimalDiscreteBiogeochemistry}, ModelType::Type{HydrostaticFreeSurfaceModel}); @ Main ~/Research/OC5.jl/test/test_biogeochemistry.jl:109; [22] macro expansion; @ ~/Research/OC5.jl/test/test_biogeochemistry.jl:139 [inlined]; [23] macro expansion; @ ~/julia-1.9/usr/share/julia/stdlib/v1.9/Test/src/Test.jl:1498 [inlined]; [24] top-level scope; @ ~/Research/OC5.jl/test/test_biogeochemistry.jl:127; [25] include(fname::String); @ Base.MainInclude ./client.jl:478; [26] top-level scope; @ REPL[2]:1; [27] eval; @ ./boot.jl:370 [inlined]; [28] eval_user_input(ast::Any, backend::REPL.REPLBackend, mod::Module); @ REPL ~/julia-1.9/usr/share/julia/stdlib/v1.9/REPL/src/REPL.jl:153; [29] repl_backend_loop(backend::REPL.REPLBackend, get_module::Function); @ REPL ~/julia-1.9/usr/share/julia/stdlib/v1.9/REPL/src/REPL.jl:249; [30] start_repl_backend(backend::REPL.REPLBackend, consumer::Any; get_module::Function); @ REPL ~/julia-1.9/usr/share/julia/stdlib/v1.9/REPL/src/REPL.jl:234; [31] run_repl(repl::REPL.AbstractREPL, consumer::Any; backend_on_current_task::Bool, backend::Any); @ REPL ~/julia-1.9/usr/share/julia/stdlib/v1.9/REPL/src/REPL.jl:379; [32] run_repl(repl::REPL.AbstractREPL, consumer::Any); @ REPL ~/julia-1.9/usr/share/julia/stdlib/v1.9/REPL/src/REPL.jl:365; [33] (::Base.var""#1017#1019""{Bool, Bool, Bool})(REPL::Module); @ Base ./client.jl:421; [34] #invokelatest#",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630460635:21850,test,test,21850,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630460635,1,['test'],['test']
Testability,"nt64}}, CPU}, ::Nothing, ::Function, ::Array{Float64, 3}, ::Vararg{Any}); > @ Oceananigans.Utils ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; > [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); > @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; > [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); > @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; > [5] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; > [6] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; > [7] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [8] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; > [9] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [10] top-level scope; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; > ```; > ; > I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be.; > ; > Let me know if you want me to push the code I have with `ZDirection` and this error to the branch. I don't know what you did bu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:3522,test,test,3522,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399,1,['test'],['test']
Testability,"nvariant/Conservative`. Maybe this needs to be done on the other servers to get the test to pass?. I will point out that for the `VectorInvariantFormulation` the absmean and std are identical to four or more decimals for GPU and CPU. However, for the `ConservativeFormulation`, the values for `v` and `h` are as good but the `u` value for absmean and std off by about 100. Maybe this is a concern, even though the tests pass?. ```; julia> include(""test/test_shallow_water_regression.jl""); [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:23.118] INFO Running shallow water regression tests...; FJP: arch and formulation = CPU()VectorInvariantFormulation(); [2023/02/27 18:57:23.119] INFO Testing shallow water Bickley jet simulation regression [CPU, VectorInvariantFormulation]; [2023/02/27 18:57:23.124] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:223; [2023/02/27 18:57:23.525] INFO Initializing simulation...; [2023/02/27 18:57:23.526] INFO ... simulation initialization complete (1.081 ms); [2023/02/27 18:57:23.526] INFO Executing initial time step...; [2023/02/27 18:57:24.661] INFO ... initial time step complete (1.135 seconds).; [2023/02/27 18:57:46.538] INFO Simulation is stopping after running for 21.864 seconds.; [2023/02/27 18:57:46.538] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/27 18:57:46.680] INFO Δu: min=-2.958580e-08, max=+2.921001e-08, mean=-7.420989e-11, absmean=+1.893230e-09, std=+5.534008e-09 (16384/16384 matching grid points); [2023/02/27 18:57:46.680] INFO Δv: min=-1.426954e-11, max=+1.432",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:1068,Test,Testing,1068,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226,1,['Test'],['Testing']
Testability,"o ""Benchmarking distributed incompressible model strong scaling with $(typeof(decomposition)) decomposition [N=($Nx, $Ny, $Nz), ranks=($Rx, $Ry, $Rz)]...""; benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model strong scaling benchmark""); benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; benchmark/strong_scaling_incompressible_model_single.jl:@info ""Warming up distributed incompressible model on rank $local_rank...""; benchmark/strong_scaling_incompressible_model_single.jl:@info ""Benchmarking distributed incompressible model on rank $local_rank...""; docs/src/physics/incompressible_model.md:# Incompressible model; docs/src/numerical_implementation/time_stepping.md:where, e.g., for the incompressible model, ; docs/make.jl: ""Incompressible model"" => ""physics/incompressible_model.md"",; src/Distributed/distributed_incompressible_model.jl:##### Distributed incompressible model constructor; validation/immersed_boundaries/flow_around_cylinder.jl:# setting up incompressible model with immersed boundary; ```. If you're okay with it I ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326:1692,benchmark,benchmark,1692,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326,1,['benchmark'],['benchmark']
Testability,"o/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3N1cmZhY2Vfd2F2ZXMuamw=) | | |; | [test/test\_pressure\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ByZXNzdXJlX3NvbHZlcnMuamw=) | | |; | [test/test\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZpZWxkcy5qbA==) | | |; | [test/test\_dynamics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2R5bmFtaWNzLmps) | | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | | |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | | |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | | |; | [test/test\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmcuamw=) | | |; | ... and [52 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564?src=pr&el=footer). Last update [810a3a1...cc58382](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/doc",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/564#issuecomment-564625738:2277,test,test,2277,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/564#issuecomment-564625738,2,['test'],['test']
Testability,o/gh/CliMA/Oceananigans.jl/pull/564?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [test/test\_surface\_waves.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3N1cmZhY2Vfd2F2ZXMuamw=) | | |; | [test/test\_pressure\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ByZXNzdXJlX3NvbHZlcnMuamw=) | | |; | [test/test\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZpZWxkcy5qbA==) | | |; | [test/test\_dynamics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2R5bmFtaWNzLmps) | | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | | |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | | |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | | |; | [test/test\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmcuamw=) | | |; | ... and [52 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = abs,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/564#issuecomment-564625738:1952,test,test,1952,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/564#issuecomment-564625738,2,['test'],['test']
Testability,"oat64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, CPU}, GridFittedBottom{OffsetMatrix{Float64, Matrix{Float64}}}, CPU}, clock::Clock{Float64}, momentum_advection::CenteredSecondOrder, tracer_advection::WENO5{Float64, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, buoyancy::Nothing, coriolis::Nothing, free_surface::ImplicitFreeSurface{Nothing, Float64, Nothing, Nothing, Symbol, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, forcing::NamedTuple{(), Tuple{}}, closure::Nothing, boundary_conditions::NamedTuple{(), Tuple{}}, tracers::Nothing, particles::Nothing, velocities::Nothing, pressure::Nothing, diffusivity_fields::Nothing, auxiliary_fields::NamedTuple{(), Tuple{}});   | @ Oceananigans.Models.HydrostaticFreeSurfaceModels ~/builds/tartarus-1/clima/oceananigans/src/Models/HydrostaticFreeSurfaceModels/hydrostatic_free_surface_model.jl:113;   | [2] macro expansion;   | @ ~/builds/tartarus-1/clima/oceananigans/test/test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl:41 [inlined];   | [3] macro expansion;   | @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined];   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/test/test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl:9;   | [5] include(fname::String);   | @ Base.MainInclude ./client.jl:444;   | [6] macro expansion;   | @ ~/builds/tartarus-1/clima/oceananigans/test/runtests.jl:65 [inlined];   | [7] macro expansion;   | @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined];   | [8] macro expansion;   | @ ~/builds/tartarus-1/clima/oceananigans/test/runtests.jl:58 [inlined];   | [9] macro expansion;   | @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined];   | [10] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/test/runtests.jl:4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1001728185:2019,test,test,2019,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1001728185,1,['test'],['test']
Testability,odecov.io/gh/CliMA/Oceananigans.jl/commit/40e7caf545cadb41733602989511d96c62687c7a&el=desc) will **increase** coverage by `0.66%`.; > The diff coverage is `90.10%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #823 +/- ##; ==========================================; + Coverage 70.72% 71.38% +0.66% ; ==========================================; Files 188 189 +1 ; Lines 5113 5270 +157 ; ==========================================; + Hits 3616 3762 +146 ; - Misses 1497 1508 +11 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [benchmark/benchmark\_ffts.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mZnRzLmps) | `0.00% <ø> (ø)` | |; | [benchmark/benchmark\_forcing\_functions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mb3JjaW5nX2Z1bmN0aW9ucy5qbA==) | `0.00% <ø> (ø)` | |; | [benchmark/benchmark\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | `0.00% <ø> (ø)` | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | `0.00% <ø> (ø)` | |; | [docs/make.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/diff?src=pr&el=tree#diff-ZG9jcy9tYWtlLmps) | `0.00% <ø> (ø)` | |; | [src/Utils/Utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL1V0aWxzLmps) | `100.00% <ø> (ø)` | |; | [src/Grids/regular\_cartesian\_grid.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL3JlZ3VsYXJfY2FydGVzaWFuX2dyaWQ,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/823#issuecomment-664396956:1187,benchmark,benchmark,1187,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/823#issuecomment-664396956,2,['benchmark'],['benchmark']
Testability,"odel::NonhydrostaticModel{…}, callbacks::Vector{…}); > @ Oceananigans.Models.NonhydrostaticModels ~/Research/OC10.jl/src/Models/NonhydrostaticModels/compute_nonhydrostatic_tendencies.jl:31; > [11] #apply_regionally!#56; > @ ~/Research/OC10.jl/src/Utils/multi_region_transformation.jl:121 [inlined]; > [12] apply_regionally!; > @ ~/Research/OC10.jl/src/Utils/multi_region_transformation.jl:118 [inlined]; > [13] macro expansion; > @ ~/Research/OC10.jl/src/Utils/multi_region_transformation.jl:206 [inlined]; > [14] update_state!(model::NonhydrostaticModel{…}, callbacks::Vector{…}; compute_tendencies::Bool); > @ Oceananigans.Models.NonhydrostaticModels ~/Research/OC10.jl/src/Models/NonhydrostaticModels/update_nonhydrostatic_model_state.jl:47; > [15] update_state!; > @ ~/Research/OC10.jl/src/Models/NonhydrostaticModels/update_nonhydrostatic_model_state.jl:19 [inlined]; > [16] update_state!(model::NonhydrostaticModel{…}); > @ Oceananigans.Models.NonhydrostaticModels ~/Research/OC10.jl/src/Models/NonhydrostaticModels/update_nonhydrostatic_model_state.jl:19; > [17] NonhydrostaticModel(; grid::RectilinearGrid{…}, clock::Clock{…}, advection::Centered{…}, buoyancy::Nothing, coriolis::Nothing, stokes_drift::Nothing, forcing::@NamedTuple{…}, closure::Nothing, boundary_conditions::@NamedTuple{}, tracers::Tuple{}, timestepper::Symbol, background_fields::@NamedTuple{}, particles::Nothing, biogeochemistry::Nothing, velocities::Nothing, pressures::Nothing, diffusivity_fields::Nothing, pressure_solver::Nothing, immersed_boundary::Nothing, auxiliary_fields::@NamedTuple{}); > @ Oceananigans.Models.NonhydrostaticModels ~/Research/OC10.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:198; > [18] top-level scope; > @ REPL[5]:1; > Some type information was truncated. Use `show(err)` to see complete types.; > ```. Ok I fixed that. Probably we should use a `Field` rather than `ones` for the test and examples, because it automatically adapts to GPU, distributed, etc, so its a bit better.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1986430708:5168,test,test,5168,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1986430708,1,['test'],['test']
Testability,"oh I see, do you mean the proper use of `Val(grid.Hx)` e.g. in . https://github.com/CliMA/Oceananigans.jl/blob/079a88250d7bf9d01c31ce79fb8e756be222c58f/src/BoundaryConditions/fill_halo_regions_periodic.jl#L20. Unfortunately we don't know because the distributed CI was broken at that point; I only fixed it after with [e8da741](https://github.com/CliMA/Oceananigans.jl/pull/3403/commits/e8da74141d2b07c45b2d24f2f2e0f8b570ed14fa). To test this hypothesis we should remove the `Val(grid.Hx)` etc and see.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1931591461:433,test,test,433,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1931591461,1,['test'],['test']
Testability,"oh, now tests related to the checkpointer started failing in this PR :(",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1994#issuecomment-929553002:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1994#issuecomment-929553002,1,['test'],['tests']
Testability,"ok, @simone-silvestri, I did what you were suggesting.; we now need to refactor the tests....... oh dear........",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3503#issuecomment-1994981771:84,test,tests,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3503#issuecomment-1994981771,1,['test'],['tests']
Testability,"ok, all tests pass!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1306#issuecomment-762617819:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1306#issuecomment-762617819,1,['test'],['tests']
Testability,"ok, let's see how many things I broke now... (I'll see what happens with the tests and try to fix them...!)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1464182824:77,test,tests,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1464182824,1,['test'],['tests']
Testability,"ok, test passed here...; can someone review? it's really minor",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3517#issuecomment-2014489728:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3517#issuecomment-2014489728,1,['test'],['test']
Testability,"ok... maybe this is a minimal. ```julia; using Oceananigans; using Oceananigans.Architectures: device; using Oceananigans.BoundaryConditions: fill_halo_regions!; using Oceananigans.Utils: launch!; using Oceananigans.Operators: ∇²ᶜᶜᶜ. using KernelAbstractions: @kernel, @index; using BenchmarkTools. @inline laplacian(i, j, k, grid, c, args...) = ∇²ᶜᶜᶜ(i, j, k, grid, c). @kernel function _diffuse!(c, Δt, args...); i, j, k = @index(Global, NTuple); @inbounds c[i, j, k] += Δt * laplacian(i, j, k, grid, c, args...); end. function diffuse!(c, Δt); grid = c.grid. Nargs = 2 # this is the key. args = Tuple(grid for i = 1:Nargs); arch = grid.architecture; fill_halo_regions!(c); ev = launch!(arch, grid, :xyz, _diffuse!, c, Δt, args...); wait(device(arch), ev); return nothing; end. function lots_of_steps!(c, Δt, steps=100); for _ = 1:steps; diffuse!(c, Δt); end; end. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); c = CenterField(grid); @btime lots_of_steps!(c, 0.01); ```. Ok, so with _nothing difference except KA version_, this is what we find:. | Nargs | KA 0.8 | KA 0.72 | ; | -- | ----------- | ----------- |; | 1 | 479.273 ms (9847200 allocations: 977.66 MiB) | 686.707 ms (11485600 allocations: 2.57 GiB) |; | 2 | 1.281 s (14801200 allocations: 4.75 GiB) | 840.756 ms (13124400 allocations: 3.32 GiB) |; | 3 | 1.399 s (16447200 allocations: 5.52 GiB) | 981.717 ms (14764000 allocations: 4.08 GiB) |",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481406866:283,Benchmark,BenchmarkTools,283,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481406866,1,['Benchmark'],['BenchmarkTools']
Testability,"omg, @ali-ramadhan! gpu-simulation tests passed!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-930576098:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-930576098,1,['test'],['tests']
Testability,"omg, I merged main and I noticed that the file changes in buildkite bringing back the SWE regression remained! it was commented out in main! I am sure I uncommented that at some point... anyway, given that tests pass we should merge this",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1484466427:206,test,tests,206,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1484466427,1,['test'],['tests']
Testability,"omg, tests seems to be going to pass...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468643420:5,test,tests,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468643420,1,['test'],['tests']
Testability,"omg, there is only one test pending... smells like merging is close by...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1145558997:23,test,test,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1145558997,1,['test'],['test']
Testability,"ompiler.CompilerJob{…}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, toplevel::Bool, strip::Bool, validate::Bool, only_entry::Bool, parent_job::Nothing); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:9278; [10] codegen; @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:8886 [inlined]; [11] _thunk(job::GPUCompiler.CompilerJob{Enzyme.Compiler.EnzymeTarget, Enzyme.Compiler.EnzymeCompilerParams}, postopt::Bool) (repeats 2 times); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:9830; [12] cached_compilation; @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:9864 [inlined]; [13] (::Enzyme.Compiler.var""#474#475""{DataType, DataType, DataType, Enzyme.API.CDerivativeMode, Tuple{Bool, Bool, Bool}, Int64, Bool, Bool, UInt64, DataType})(ctx::LLVM.Context); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:9921; [14] JuliaContext(f::Enzyme.Compiler.var""#474#475""{DataType, DataType, DataType, Enzyme.API.CDerivativeMode, Tuple{Bool, Bool, Bool}, Int64, Bool, Bool, UInt64, DataType}); @ GPUCompiler ~/.julia/packages/GPUCompiler/2mJjc/src/driver.jl:47; [15] #s324#473; @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:9882 [inlined]; [16]; @ Enzyme.Compiler ./none:0; [17] (::Core.GeneratedFunctionStub)(::UInt64, ::LineNumberNode, ::Any, ::Vararg{Any}); @ Core ./boot.jl:600; [18] runtime_generic_augfwd(activity::Type{…}, width::Val{…}, ModifiedBetween::Val{…}, RT::Val{…}, f::Type{…}, df::Nothing, primal_1::var""#cᵢ#1""{…}, shadow_1_1::var""#cᵢ#1""{…}, primal_2::RectilinearGrid{…}, shadow_2_1::RectilinearGrid{…}); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:1386; [19] FunctionField; @ ~/Projects/Enzymantics/Oceananigans.jl/src/Fields/function_field.jl:54 [inlined]; ```. I guess we don't hit any of the `if` statments in `calling_conv_fixup` so then we get to the end where `@assert false`. The problem is that we don't match any of those conditions?????",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3360#issuecomment-1791250259:4170,assert,assert,4170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3360#issuecomment-1791250259,1,['assert'],['assert']
Testability,"on \| 588 12 600; &nbsp; | Time stepping IncompressibleModel \| 4 4; &nbsp; | Time stepping ShallowWaterModel \| 4 4; &nbsp; | Distributed FFT-based Poisson solver \| 2 2; &nbsp; | ERROR: ERROR: ERROR: ERROR: LoadError: LoadError: LoadError: LoadError: Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | ERROR: ERROR: ERROR: ERROR: Package Oceananigans errored during testing; &nbsp; | Stacktrace:Package Oceananigans errored during testing; &nbsp; | Stacktrace:Package Oceananigans errored during testing; &nbsp; | Stacktrace:; &nbsp; | [1] pkgerrorPackage Oceananigans errored during testing; &nbsp; | Stacktrace:; &nbsp; | [1] (pkgerror; &nbsp; | [1] (pkgerror::(; &nbsp; | [1] ::pkgerrorString) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] (::test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1578; &nbsp; | [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081:2315,test,test,2315,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081,1,['test'],['test']
Testability,"on is stopping. Model iteration 20 has hit or exceeded simulation stop iteration 20.; [2023/02/21 06:38:46.004] INFO Δu: min=-3.698171e-08, max=+2.977649e-08, mean=-9.793714e-11, absmean=+2.315996e-09, std=+6.206031e-09 (16384/16384 matching grid points); [2023/02/21 06:38:46.005] INFO Δv: min=-5.495966e-10, max=+1.063640e-09, mean=-3.441143e-13, absmean=+4.699188e-11, std=+1.347006e-10 (16508/16512 matching grid points); [2023/02/21 06:38:46.005] INFO Δh: min=-4.766520e-07, max=+4.757091e-07, mean=+1.373701e-08, absmean=+2.044884e-07, std=+2.513218e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:16529,test,test,16529,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['test'],['test']
Testability,"onjugate_gradient_solver.jl:190; [2021/12/29 11:50:08.131] DEBUG PreconditionedConjugateGradientSolver 0, |z|: 0.00044721359549995795 -@-> /Users/chrishill/projects/onan-2021-12-29/src/Solvers/preconditioned_conjugate_gradient_solver.jl:191; [2021/12/29 11:50:08.132] DEBUG PreconditionedConjugateGradientSolver 0, |q|: 4.4721359549995796e-8 -@-> /Users/chrishill/projects/onan-2021-12-29/src/Solvers/preconditioned_conjugate_gradient_solver.jl:206; [2021/12/29 11:50:08.132] DEBUG PreconditionedConjugateGradientSolver 0, α: -10000.0 -@-> /Users/chrishill/projects/onan-2021-12-29/src/Solvers/preconditioned_conjugate_gradient_solver.jl:207; model.free_surface.gravitational_acceleration = 10000.0; ∫ᶻQ.u; 5×5×1 view(::Array{Float64, 3}, 4:8, 4:8, 1:1) with eltype Float64:; [:, :, 1] =; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 1.0 0.0 0.0; 0.0 0.0 -1.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0; η; 5×5×1 view(::Array{Float64, 3}, 4:8, 4:8, 1:1) with eltype Float64:; [:, :, 1] =; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 -1.0 0.0 0.0; 0.0 -1.0 4.0 -1.0 0.0; 0.0 0.0 -1.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0; u before; 5×5×1 view(::Array{Float64, 3}, 4:8, 4:8, 4:4) with eltype Float64:; [:, :, 1] =; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 1.0 0.0 0.0; 0.0 0.0 -1.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0; v before; 5×5×1 view(::Array{Float64, 3}, 4:8, 4:8, 4:4) with eltype Float64:; [:, :, 1] =; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 1.0 0.0 0.0; 0.0 0.0 -1.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0; u after; 5×5×1 view(::Array{Float64, 3}, 4:8, 4:8, 4:4) with eltype Float64:; [:, :, 1] =; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 10000.0 0.0 0.0; 0.0 10000.0 -49999.0 10000.0 0.0; 0.0 -10000.0 49999.0 -10000.0 0.0; 0.0 0.0 -10000.0 0.0 0.0; v after; 5×5×1 view(::Array{Float64, 3}, 4:8, 4:8, 4:4) with eltype Float64:; [:, :, 1] =; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 10000.0 0.0 0.0; 0.0 10000.0 -49999.0 10000.0 0.0; 0.0 -10000.0 49999.0 -10000.0 0.0; 0.0 0.0 -10000.0 0.0 0.0; Test Summary: | Pass Total; Oceananigans | 1 1. ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002686167:8780,Test,Test,8780,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002686167,1,['Test'],['Test']
Testability,"operties of `model` cannot change. This means we need to know the type of `model.closure` _before_ we build it. Another way to say this is that `HydrostaticFreeSurfaceModel` is _concretely typed_, which means that functions of `model` can be optimized based on the types of _every_ property of `HydrostaticFreeSurfaceModel`. This gives us performance advantages / reduces overhead, but also creates some limitations like: we have to define a `closure` before building model. Here's a simple example:. ```julia; julia> mutable struct Test{T}; a :: T; end. julia> t = Test(1.0); Test{Float64}(1.0). julia> t.a = 2.0; 2.0. julia> t.a = ""hi""; ERROR: MethodError: Cannot `convert` an object of type String to an object of type Float64; Closest candidates are:; convert(::Type{T}, ::T) where T<:Number at number.jl:6; convert(::Type{T}, ::Number) where T<:Number at number.jl:7; convert(::Type{T}, ::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250; ...; Stacktrace:; [1] setproperty!(x::Test{Float64}, f::Symbol, v::String); @ Base ./Base.jl:34; [2] top-level scope; @ REPL[6]:1; ```. Here, `t` is `Test{Float64}`. We can change `a` as long as the new value can be converted to `Float64` via `convert(Float64, new_value)`. Otherwise we can't and we just have to write `s = Test(""hi"")` instead. Another possible solution is to build a ""dummy"" closure with the correct type, and then replace it with the ""real"" closure after constructing model by writing `model.closure = real_closure`. It could be fun to try that and see if the code is simpler. I suspect it might not be but it's worth a shot (you might learn something). . > Thinking on a more general way, it would be awesome to give a general function that could depend on any field in the model, including auxiliary. I am thinking that this way it would be easier for users to create and implement their own parameterizations. I guess that's sort of what we're doing here. The main issue is reducing boilerplate / making this as easy as po",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1066113513:2075,Test,Test,2075,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1066113513,1,['Test'],['Test']
Testability,or `test_field.jl`? where are other tests for background fields? (which I hope exist ;)),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-875933573:36,test,tests,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-875933573,1,['test'],['tests']
Testability,"or is the problem ""out of memory errors""? Because the second might have to do with temporary allocations. That's a good point! I've been measuring the memory usage right after defining `model` and right before calling `run!()` (the only things in between are the definition of `simulation` and a bunch of diagnostics), but I've definitely been focusing more on the errors. Here are some numbers that I think bring some clarity:. - Using Julia 1.6 and Oceananigans 0.77.5:; - Biggest grid I can run: `997×997×96 ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded} on GPU with 4×4×4 halo`; - Memory usage right after building `model`: 19712MiB / 32768MiB; - Memory usage right before running and after adding simulation and diagnostics: 25778MiB / 32768MiB; - Using Julia 1.7 and Oceanaigans 0.78.0:; - Biggest grid I can run: `941×941×90 ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded} on GPU with 4×4×4 halo`; - Memory usage right after building `model`: 16576MiB / 32768MiB; - Memory usage right before running and after adding simulation and diagnostics: 31026MiB / 32768MiB; - Using Julia 1.8 and Oceanaigans 0.78.0:; - Biggest grid I can run: `941×941×90 ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded} on GPU with 4×4×4 halo`; - Memory usage right after building `model`: 16576MiB / 32768MiB; - Memory usage right before running and after adding simulation and diagnostics: 31026MiB / 32768MiB. Note that although Julia 1.6 + Oceananigans 0.77 ends up with the smaller memory usage in the end, it apparently uses a lot of temporary allocations because I get an out-of-memory error when adding diagnostics with bigger grids. That said, it still manages to have the smallest ""permanent"" memory usage and allows me to run larger simulations. Interesting results. The biggest difference seems to be in the allocations required for the diagnostics (or maybe `Simulation`?). I can tests without diagnostics at some point and compare the results if you agree that's useful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299523285:2013,test,tests,2013,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299523285,1,['test'],['tests']
Testability,"orage7/buildkite-agent/julia-1.5.4/lib/julia/sys.so: ELF load command past end of file; &nbsp; | ERROR: LoadError: Failed to precompile PlotUtils [995b91a9-d308-5afd-9ec6-746e21dbc043] to /storage7/buildkite-agent/.julia-2556/compiled/v1.5/PlotUtils/YveHG_R3lk8.ji.; &nbsp; | Stacktrace:; &nbsp; | [1] top-level scope at none:2; &nbsp; | [2] eval at ./boot.jl:347 [inlined]; &nbsp; | in expression starting at /storage7/buildkite-agent/.julia-2556/packages/Plots/SjqWU/src/Plots.jl:20; &nbsp; | ERROR: LoadError: Failed to precompile Plots [91a5bcdd-55d7-5caf-9e0b-520d859cae80] to /storage7/buildkite-agent/.julia-2556/compiled/v1.5/Plots/ld3vC_R3lk8.ji.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-1/clima/oceananigans/docs/make.jl:6; &nbsp; | 🚨 Error: The command exited with status 1. ```. CPU test; ```; [8] test() at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:72; --; &nbsp; | [9] top-level scope at none:1; &nbsp; | Union{},Union{},Tuple{},NamedTuple{(test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; ERROR: failed process: Process(`/storage7/buildkite-agent/.julia-2556/artifacts/2fcd463fb9498f362be9d1c4ef70a63c920b0e96/bin/mpiexec -np 4 /storage7/buildkite-agent/julia-1.5.4/bin/julia -O0 --color=yes -e 'using Pkg; Pkg.test()'`, ProcessExited(1)) [1]; &nbsp; | &nbsp;; &nbsp; | Stacktrace:; &nbsp; | [1] pipeline_error at ./process.jl:525 [inlined]; &nbsp; | [2] run(::Cmd; wait::Bool) at ./process.jl:440; &nbsp; | [3] run(::Cmd) at process.jl:438; &nbsp; | [4] (::var""#1#2"")(::Cmd) at none:4; &nbsp; | [5] (::MPI.var""#8#9""{var""#1#2""})(::String) at /storage7/buildkite-agent/.julia-2556/packages/MPI/b7MVG/src/environment.jl:25; &nbsp; | [6] (::MPICH_jll.var""#8#9""{MPI.var""#8#9""{var""#1#2""}})() at /storage7/buildkite-agent/.julia-2556/packages/MPICH_jll/ekpo2/src/wrappers/x86_64-linux-gnu-libgfortran4.jl:79; &nbsp; | [7] withenv(::MPICH_jll.var""#8#9""{MPI.var""#8#9""{var""#1#2""}}, ::Pair{String,",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842643141:1590,test,test,1590,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842643141,1,['test'],['test']
Testability,"ordering requirements are necessary for filling corner halos. ; This is done by `Periodic` boundary conditions in non-distributed simulations.; Additionally, since communication boundary conditions can be asynchronous, distributed (and multi-region) BCS need to be filled last. To remove order requirements we would need to fill the halo for flux, value, and gradient also in the corners.; I thought that might be a good idea but we hit a problem when having an `AbstractArray` boundary condition because we would need to construct the associated `OffsetArray`. . This can be prevented by wrapping the array in a `Field` and filling the halo regions but it seems like a heavy requirement to do it, and generally, a large API change that we might want to think about a little more. In #3338 I fixed the problem by separating out communicating boundary conditions which wasn't that complicated and maintained the current logic. . Maybe in the future, we might want to eliminate the order requirement though. So we can keep this issue open.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3342#issuecomment-1765302174:919,log,logic,919,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3342#issuecomment-1765302174,1,['log'],['logic']
Testability,"org/wiki/Atmospheric_sounding). From talking to @thabbott apparently it's pretty common to initialize a model using observational data obtained from e.g. a weather balloon. Apparently some models get pretty fancy and construct a hydrostatic base state from the sounding to avoid transient acoustic waves when running the model. > I wonder if splitting off the output writers and diagnostics into a `Simulation` type that wraps `AbstractModel` may help. Hmmm, I wasn't super into the idea of a new `Simulation` type before but with multiple model types it makes more sense and would simplify the `Model` type by moving out output writers and diagnostics. I still think we don't need a new type and can simply define a new function like; ```julia; run_model!(model, Δt=1.0, end_time=8day, output=output_writers, diagnostics=diagnostics); ```; which just needs `time_step!` to be defined. > Nice work with the test cases @ali-ramadhan! No objections to merging from me, but I think we should have a discussion (in person or in a separate issue) about ways to separate aspects of the model that make it an atmosphere vs. an ocean model from things that make it a compressible vs. incompressible model. Thanks! Hmmm, that's a good point that currently the `IncompressibleModel` is really more of an `OceanModel` as evidence by the `surface_waves` functionality and the `SeawaterBuoyancy` default. And the proposed `CompressibleModel` is already more of an `AtmosphericModel` as tracers representing mixing ratios like ql, qv, qi, etc. are given special treatment (they contribute to the moist density). > The Boussinesq solver in Oceananigans is already useful for atmospheric simulations with depths small relative to a scale height and could be great for cloud modeling if there's any easy way to convert it to an anelastic solver. My understanding (maybe @jm-c or someone else can confirm for the MITgcm) is that the current Boussinesq solver can be repurposed for anelastic simulations but it would hav",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/605#issuecomment-580555155:2764,test,test,2764,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/605#issuecomment-580555155,1,['test'],['test']
Testability,"osition [N=($Nx, $Ny, $Nz), ranks=($Rx, $Ry, $Rz)]...""; benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model strong scaling benchmark""); benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; benchmark/strong_scaling_incompressible_model_single.jl:@info ""Warming up distributed incompressible model on rank $local_rank...""; benchmark/strong_scaling_incompressible_model_single.jl:@info ""Benchmarking distributed incompressible model on rank $local_rank...""; docs/src/physics/incompressible_model.md:# Incompressible model; docs/src/numerical_implementation/time_stepping.md:where, e.g., for the incompressible model, ; docs/make.jl: ""Incompressible model"" => ""physics/incompressible_model.md"",; src/Distributed/distributed_incompressible_model.jl:##### Distributed incompressible model constructor; validation/immersed_boundaries/flow_around_cylinder.jl:# setting up incompressible model with immersed boundary; ```. If you're okay with it I can make these alterations myself (idk what are the protocols about modifying other people's PRs...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326:1916,benchmark,benchmark,1916,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326,3,"['Benchmark', 'benchmark']","['Benchmarking', 'benchmark']"
Testability,"ot* execute on the GPU, but very slowly on the CPU,; > and therefore are only permitted from the REPL for prototyping purposes.; > If you did intend to index this array, annotate the caller with @allowscalar.; > Stacktrace:; > [1] error(s::String); > @ Base ./error.jl:35; > [2] assertscalar(op::String); > @ GPUArraysCore ~/.julia/packages/GPUArraysCore/uOYfN/src/GPUArraysCore.jl:103; > [3] getindex(xs::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, I::Int64); > @ GPUArrays ~/.julia/packages/GPUArrays/EZkix/src/host/indexing.jl:9; > [4] getindex; > @ ~/.julia/packages/OffsetArrays/0MOrf/src/OffsetArrays.jl:438 [inlined]; > [5] _getindex; > @ ./abstractarray.jl:1321 [inlined]; > [6] getindex; > @ ./abstractarray.jl:1288 [inlined]; > [7] getindex; > @ ~/Software/Oceananigans.jl/src/Fields/field.jl:399 [inlined]; > [8] _broadcast_getindex; > @ ./broadcast.jl:675 [inlined]; > [9] _getindex; > @ ./broadcast.jl:705 [inlined]; > [10] _broadcast_getindex; > @ ./broadcast.jl:681 [inlined]; > [11] getindex; > @ ./broadcast.jl:636 [inlined]; > [12] macro expansion; > @ ./broadcast.jl:1004 [inlined]; > [13] macro expansion; > @ ./simdloop.jl:77 [inlined]; > [14] copyto!; > @ ./broadcast.jl:1003 [inlined]; > [15] copyto!; > @ ./broadcast.jl:956 [inlined]; > [16] copy; > @ ./broadcast.jl:928 [inlined]; > [17] materialize; > @ ./broadcast.jl:903 [inlined]; > [18] isapprox(a::Field{…}, b::Field{…}; kw::@Kwargs{…}); > @ Oceananigans.Fields ~/Software/Oceananigans.jl/src/Fields/field.jl:712; > [19] test_shallow_water_diffusion_cosine(grid::RectilinearGrid{…}, formulation::ConservativeFormulation, fieldname::Symbol, ξ::Base.ReshapedArray{…}); > @ Main ~/Software/Oceananigans.jl/test/test_shallow_water_models.jl:84; > [20] top-level scope; > @ ./REPL[25]:4; > [21] top-level scope; > @ ~/.julia/packages/CUDA/nbRJk/src/initialization.jl:205; > Some type information was truncated. Use `show(err)` to see complete types.; > ```. Looks like it's a problem with the test, not really with the model",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1968123748:2590,test,test,2590,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1968123748,2,['test'],['test']
Testability,"ou add the output writer in @glwagner's example makes the issue pop up. In @glwagner's original example the JLD2 writer is added first, and then the netcdf writer, and there's no issue. The example below (which is pretty much the same example, except with that order switched) fails for me:. ```julia; using Oceananigans; using NCDatasets. Nx = Ny = Nz = 16; grid = RectilinearGrid(size=(Nx, Ny, Nz), extent=(1, 1, 1)). tracer_names = Tuple(Symbol(:τ, n) for n = 1:6); model = NonhydrostaticModel(; grid, tracers=tracer_names). uᵢ(x, y, z) = randn(); cᵢ(x, y, z) = sin(2π * z / grid.Lz); kw = NamedTuple(c => cᵢ for c in tracer_names); set!(model; u=uᵢ, v=uᵢ, w=uᵢ, kw...). simulation = Simulation(model, Δt=0.1/Nx, stop_iteration=100). u, v, w = model.velocities; fluxes = NamedTuple(Symbol(""wτ$n"") => Field(w*c) for (n, c) in enumerate(model.tracers)); averaged_fluxes = NamedTuple(Symbol(""avg_wτ$n"") => Average(flux, dims=2) for (n, flux) in enumerate(fluxes)). jld2_filename = ""test.jld2""; nc_filename = ""test.nc""; kwargs = (schedule = IterationInterval(1),; verbose = true,; indices = (:, 1, :),; overwrite_existing = true). simulation.output_writers[:nc] = NetCDFOutputWriter(model, merge(fluxes, averaged_fluxes);; filename = nc_filename,; kwargs...); simulation.output_writers[:jld2] = JLD2OutputWriter(model, merge(fluxes, averaged_fluxes);; filename = jld2_filename,; kwargs...). run!(simulation). ds = Dataset(nc_filename). Ntracers = length(tracer_names); flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(jld2_filename, ""wτ$n"") for n = 1:Ntracers); average_flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(jld2_filename, ""avg_wτ$n"") for n = 1:Ntracers). avg_flux_1_nc = ds[""avg_wτ1""]; avg_flux_1 = average_flux_timeseries[""wτ1""]. for n = 2:Ntracers; flux_n = flux_timeseries[""wτ$n""]; avg_flux_n = average_flux_timeseries[""wτ$n""]. @show ""Fluxes for tracer $n:""; @show all(avg_flux_1[:, 1, :, :] .≈ avg_flux_n[:, 1, :, :]); @show all(avg_flux_1_nc .≈ ds[""avg_wτ$n""]); end. close(ds); ```. Th",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437330069:1051,test,test,1051,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437330069,1,['test'],['test']
Testability,"oundaryGrid(RectilinearGrid(arch,; test_hydrostatic_free_surface_immersed_boundaries_implicit_solve.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom; test_hydrostatic_free_surface_immersed_boundaries_implicit_solve.jl:@testset ""Immersed boundaries test divergent flow solve with hydrostatic free surface models"" begin; test_hydrostatic_free_surface_immersed_boundaries_implicit_solve.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(B)); test_hydrostatic_free_surface_immersed_boundaries.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBoundary, GridFittedBottom; test_hydrostatic_free_surface_immersed_boundaries.jl:@testset ""Immersed boundaries with hydrostatic free surface models"" begin; test_hydrostatic_free_surface_immersed_boundaries.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBoundary(bump)); test_hydrostatic_free_surface_immersed_boundaries.jl: @info "" Testing surface boundary conditions with ImmersedBoundaries in HydrostaticFreeSurfaceModel [$arch_str]...""; test_hydrostatic_free_surface_immersed_boundaries.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(bathymetry)); test_hydrostatic_free_surface_immersed_boundaries.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(B)); test_multi_region_unit.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom, GridFittedBoundary; test_multi_region_unit.jl: ibg = ImmersedBoundaryGrid(grid, immersed_boundary); test_shallow_water_models.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBoundary; test_shallow_water_models.jl: @testset ""ShallowWaterModels with ImmersedBoundaryGrid"" begin; test_shallow_water_models.jl: @testset ""ShallowWaterModels with ImmersedBoundaryGrid [$arch]"" begin; test_shallow_water_models.jl: @info ""Testing ShallowWaterModels with ImmersedBoundaryGrid [$arch]""; test_shallow_water_models.jl: grid_with_bump = ImmersedBoundaryGrid(grid, Grid",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1126367199:3261,Test,Testing,3261,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1126367199,1,['Test'],['Testing']
Testability,overage is `83.67%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #850 +/- ##; ==========================================; - Coverage 72.70% 72.62% -0.09% ; ==========================================; Files 188 188 ; Lines 5353 5337 -16 ; ==========================================; - Hits 3892 3876 -16 ; Misses 1461 1461 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [benchmark/benchmark\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | `0.00% <ø> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100.00% <ø> (ø)` | |; | [test/test\_regression.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3JlZ3Jlc3Npb24uamw=) | `91.42% <ø> (-0.24%)` | :arrow_down: |; | [test/test\_turbulence\_closures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3R1cmJ1bGVuY2VfY2xvc3VyZXMuamw=) | `94.35% <ø> (+0.75%)` | :arrow_up: |; | [test/runtests\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC9ydW50ZXN0c191dGlscy5qbA==) | `67.56% <73.33%> (+42.56%)` | :arrow_up: |; | [src/Diagnostics/average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2F2ZXJhZ2Uuamw=) | `100.00% <100.00%> (ø)` | |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `92.06% <100.00%> (ø)` | |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Ocean,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/850#issuecomment-672128397:1340,test,test,1340,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/850#issuecomment-672128397,2,['test'],['test']
Testability,"p/update-convergence-tests/src/Models/ShallowWaterModels/solution_and_tracer_tendencies.jl#L71. In line 69 above you will see that I tried doing this by definig a new operator, div_UV, for partial_x U + partial_y V. This was clunky because I needed to pass variables U and V, and I had an error. The details can be found here,. https://github.com/CliMA/Oceananigans.jl/blob/9402a90af072a495ef130d540661be9327a51552/src/Models/ShallowWaterModels/shallow_water_advection_operators.jl#L24. Can you suggest a better way of doing this?. When I try running the tests most of the pass except at line 82 I get the following error . ```; [2021/01/11 15:36:04.735] INFO Testing time-stepping ShallowWaterModels [GPU(), (Periodic, Periodic, Bounded)]...; ERROR: a exception was thrown during kernel execution.; Run Julia on debug level 2 for device stack traces.; Time-stepping ShallowWaterModels [GPU(), (Periodic, Periodic, Bounded)]: Error During Test at /home/fpoulin/software/Oceananigans.jl/test/test_shallow_water_models.jl:82; Test threw exception; Expression: time_stepping_shallow_water_model_works(arch, topo, nothing); KernelException: exception thrown during kernel execution on device Quadro P400; Stacktrace:; [1] check_exceptions() at /home/fpoulin/.julia/packages/CUDA/YeS8q/src/compiler/exceptions.jl:94; [2] prepare_cuda_call() at /home/fpoulin/.julia/packages/CUDA/YeS8q/src/state.jl:85; [3] initialize_api() at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/error.jl:92; [4] macro expansion at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/libcuda.jl:975 [inlined]; [5] macro expansion at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/error.jl:102 [inlined]; [6] cuStreamWaitEvent(::CuStream, ::CuEvent, ::Int64) at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/utils/call.jl:93; [7] wait at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/events.jl:77 [inlined]; [8] wait(::KernelAbstractions.CUDADevice, ::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.Cud",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-758077952:1359,test,test,1359,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-758077952,1,['test'],['test']
Testability,"pInfo]]; > git-tree-sha1 = ""2e5c102cfc41f48ae4740c7eca7743cc7e7b75ea""; > uuid = ""8b046642-f1f6-4319-8d3c-209ddc03c586""; > version = ""1.0.0""; 412c431; < git-tree-sha1 = ""f2355693d6778a178ade15952b7ac47a4ff97996""; ---; > git-tree-sha1 = ""50901ebc375ed41dbf8058da26f9de442febbbec""; 414c433; < version = ""1.3.0""; ---; > version = ""1.3.1""; 499c518; < git-tree-sha1 = ""781916a2ebf2841467cda03b6f1af43e23839d85""; ---; > git-tree-sha1 = ""8f6af051b9e8ec597fa09d8885ed79fd582f33c9""; 501c520; < version = ""0.1.9""; ---; > version = ""0.1.10""; 526c545; < git-tree-sha1 = ""a7023883872e52bc29bcaac74f19adf39347d2d5""; ---; > git-tree-sha1 = ""b01beb91d20b0d1312a9471a36017b5b339d26de""; 528c547; < version = ""10.1.4+0""; ---; > version = ""10.1.4+1""; 570a590,601; > [[deps.Oceananigans]]; > deps = [""Adapt"", ""CUDA"", ""Crayons"", ""CubedSphere"", ""Dates"", ""Distances"", ""DocStringExtensions"", ""FFTW"", ""Glob"", ""IncompleteLU"", ""InteractiveUtils"", ""IterativeSolvers"", ""JLD2"", ""KernelAbstractions"", ""LinearAlgebra"", ""Logging"", ""MPI"", ""NCDatasets"", ""OffsetArrays"", ""OrderedCollections"", ""PencilArrays"", ""PencilFFTs"", ""Pkg"", ""Printf"", ""Random"", ""Rotations"", ""SeawaterPolynomials"", ""SparseArrays"", ""Statistics"", ""StructArrays""]; > path = ""/Users/gregorywagner/Projects/Oceananigans.jl""; > uuid = ""9e8cae18-63c1-5223-a75c-80ca9d6e9a09""; > version = ""0.90.1""; >; > [deps.Oceananigans.extensions]; > OceananigansEnzymeCoreExt = ""EnzymeCore""; >; > [deps.Oceananigans.weakdeps]; > EnzymeCore = ""f151be2c-9106-41f4-ab19-57ee4f262869""; >; 588,589c619,620; < deps = [""Artifacts"", ""CompilerSupportLibraries_jll"", ""JLLWrappers"", ""LazyArtifacts"", ""Libdl"", ""MPIPreferences"", ""TOML""]; < git-tree-sha1 = ""e25c1778a98e34219a00455d6e4384e017ea9762""; ---; > deps = [""Artifacts"", ""CompilerSupportLibraries_jll"", ""Hwloc_jll"", ""JLLWrappers"", ""LazyArtifacts"", ""Libdl"", ""MPIPreferences"", ""PMIx_jll"", ""TOML"", ""Zlib_jll"", ""libevent_jll"", ""prrte_jll""]; > git-tree-sha1 = ""694458ae803b684f09c07f90459cb79655fb377d""; 591c622; < version = ""4.1.6+0""; ---; > versi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1807091361:8078,Log,Logging,8078,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1807091361,1,['Log'],['Logging']
Testability,"pbWVfc3RlcHBpbmcuamw=) | `100.00% <ø> (ø)` | |; | [...ification/periodic\_advection/periodic\_advection.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL3BlcmlvZGljX2FkdmVjdGlvbi9wZXJpb2RpY19hZHZlY3Rpb24uamw=) | `0.00% <0.00%> (ø)` | |; | [src/Advection/upwind\_biased\_fifth\_order.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi91cHdpbmRfYmlhc2VkX2ZpZnRoX29yZGVyLmps) | `65.00% <65.00%> (ø)` | |; | [src/Fields/Fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `75.00% <0.00%> (-5.00%)` | :arrow_down: |; | [src/Grids/Grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL0dyaWRzLmps) | `83.33% <0.00%> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <0.00%> (ø)` | |; | [test/test\_forcings.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZvcmNpbmdzLmps) | `100.00% <0.00%> (ø)` | |; | [src/Utils/tuple\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3R1cGxlX3V0aWxzLmps) | `44.44% <0.00%> (ø)` | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvZWFkeV90dXJidWxlbmNlLmps) | `0.00% <0.00%> (ø)` | |; | ... and [27 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994?src=pr&el=footer). Las",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/994#issuecomment-700312179:2307,test,test,2307,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/994#issuecomment-700312179,2,['test'],['test']
Testability,"pe and type of A. (The first two arguments have the same meaning as for fft.) Returns an object P which; represents the linear operator computed by the FFT, and which contains all of the information needed to compute fft(A, dims) quickly. To apply P to an array A, use P * A; in general, the syntax for applying plans is much like that of matrices. (A plan can only be applied to arrays of the same size as the A for which; the plan was created.) You can also apply a plan with a preallocated output array Â by calling mul!(Â, plan, A). (For mul!, however, the input array A must be a complex floating-point; array like the output Â.) You can compute the inverse-transform plan by inv(P) and apply the inverse plan with P \ Â (the inverse plan is cached and reused for subsequent calls to inv or; \), and apply the inverse plan to a pre-allocated output array A with ldiv!(A, P, Â). The flags argument is a bitwise-or of FFTW planner flags, defaulting to FFTW.ESTIMATE. e.g. passing FFTW.MEASURE or FFTW.PATIENT will instead spend several seconds (or more) benchmarking; different possible FFT algorithms and picking the fastest one; see the FFTW manual for more information on planner flags. The optional timelimit argument specifies a rough upper bound on; the allowed planning time, in seconds. Passing FFTW.MEASURE or FFTW.PATIENT may cause the input array A to be overwritten with zeros during plan creation. plan_fft! is the same as plan_fft but creates a plan that operates in-place on its argument (which must be an array of complex floating-point numbers). plan_ifft and so on are similar; but produce plans that perform the equivalent of the inverse transforms ifft and so on. help?> plan_fft!; search: plan_fft! plan_ifft! plan_bfft! plan_fft plan_rfft plan_ifft plan_bfft plan_irfft plan_brfft. plan_fft!(A [, dims]; flags=FFTW.ESTIMATE, timelimit=Inf). Same as plan_fft, but operates in-place on A.; ```. But I just learned that you can apply the inverse plan with `P \ Â` which is cool!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/119#issuecomment-471179127:1376,benchmark,benchmarking,1376,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/119#issuecomment-471179127,1,['benchmark'],['benchmarking']
Testability,perhaps resolve merge conflict also so that when/if tests pass we are good to merge?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1185618552:52,test,tests,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1185618552,1,['test'],['tests']
Testability,perhaps test fail because there is no manifest and different KA/CUDA/whatnot versions are being installed.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528953866:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528953866,1,['test'],['test']
Testability,ples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 64 │ 81.958 ms │ 636.84 KiB │ 1576 │ 10 │; │ CPU │ Float64 │ 128 │ 405.241 ms │ 636.84 KiB │ 1576 │ 10 │; │ CPU │ Float64 │ 256 │ 6.018 s │ 636.84 KiB │ 1576 │ 1 │; │ GPU │ Float64 │ 64 │ 3.386 ms │ 953.50 KiB │ 4124 │ 10 │; │ GPU │ Float64 │ 128 │ 11.686 ms │ 979.23 KiB │ 5771 │ 10 │; │ GPU │ Float64 │ 256 │ 68.086 ms │ 1.24 MiB │ 24592 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────┴─────────┘. HydrostaticFreeSurface model benchmarks (Ns²×10); ┌───────────────┬─────────────┬─────┬────────────┬────────────┬─────────┬─────────┐; │ Architectures │ Float_types │ Ns │ median │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼─────────┼─────────┤; │ CPU │ Float64 │ 64 │ 9.178 ms │ 1.39 MiB │ 2714 │ 10 │; │ CPU │ Float64 │ 128 │ 29.660 ms │ 1.39 MiB │ 2714 │ 10 │; │ CPU │ Float64 │ 256 │ 225.186 ms │ 1.39 MiB │ 2714 │ 10 │; │ GPU │ Float64 │ 64 │ 6.415 ms │ 1.82 MiB │ 5793 │ 10 │; │ GPU │ Float64 │ 128 │ 6.660 ms │ 1.82 MiB │ 5806 │ 10 │; │ GPU │ Float64 │ 256 │ 4.325 ms │ 1.82 MiB │ 5813 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴─────────┴─────────┘. ShallowWater model benchmarks (Ns²); ┌───────────────┬─────────────┬─────┬───────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ median │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼───────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 64 │ 2.512 ms │ 801.66 KiB │ 1742 │ 10 │; │ CPU │ Float64 │ 128 │ 9.964 ms │ 801.66 KiB │ 1742 │ 10 │; │ CPU │ Float64 │ 256 │ 33.379 ms │ 801.66 KiB │ 1742 │ 10 │; │ GPU │ Float64 │ 64 │ 3.847 ms │ 1.05 MiB │ 4029 │ 10 │; │ GPU │ Float64 │ 128 │ 3.874 ms │ 1.05 MiB │ 4029 │ 10 │; │ GPU │ Float64 │ 256 │ 4.248 ms │ 1.05 MiB │ 4029 │ 10 │; └───────────────┴─────────────┴─────┴───────────┴────────────┴────────┴─────────┘; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1066030763:3722,benchmark,benchmarks,3722,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1066030763,1,['benchmark'],['benchmarks']
Testability,"plicit_solve.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom; test_hydrostatic_free_surface_immersed_boundaries_implicit_solve.jl:@testset ""Immersed boundaries test divergent flow solve with hydrostatic free surface models"" begin; test_hydrostatic_free_surface_immersed_boundaries_implicit_solve.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(B)); test_hydrostatic_free_surface_immersed_boundaries.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBoundary, GridFittedBottom; test_hydrostatic_free_surface_immersed_boundaries.jl:@testset ""Immersed boundaries with hydrostatic free surface models"" begin; test_hydrostatic_free_surface_immersed_boundaries.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBoundary(bump)); test_hydrostatic_free_surface_immersed_boundaries.jl: @info "" Testing surface boundary conditions with ImmersedBoundaries in HydrostaticFreeSurfaceModel [$arch_str]...""; test_hydrostatic_free_surface_immersed_boundaries.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(bathymetry)); test_hydrostatic_free_surface_immersed_boundaries.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(B)); test_multi_region_unit.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom, GridFittedBoundary; test_multi_region_unit.jl: ibg = ImmersedBoundaryGrid(grid, immersed_boundary); test_shallow_water_models.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBoundary; test_shallow_water_models.jl: @testset ""ShallowWaterModels with ImmersedBoundaryGrid"" begin; test_shallow_water_models.jl: @testset ""ShallowWaterModels with ImmersedBoundaryGrid [$arch]"" begin; test_shallow_water_models.jl: @info ""Testing ShallowWaterModels with ImmersedBoundaryGrid [$arch]""; test_shallow_water_models.jl: grid_with_bump = ImmersedBoundaryGrid(grid, GridFittedBoundary(bump)); ```. Although maybe added tests could be done in a separate PR?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1126367199:3966,test,testset,3966,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1126367199,7,"['Test', 'test']","['Testing', 'tests', 'testset']"
Testability,"port Δxᶜᶜᵃ, Δxᶠᶜᵃ, Δxᶠᶠᵃ, Δxᶜᶠᵃ; export Δyᶜᶜᵃ, Δyᶠᶜᵃ, Δyᶠᶠᵃ, Δyᶜᶠᵃ; export Axᵃᵃᶜ, Axᵃᵃᶠ, Axᶜᶜᶜ, Axᶠᶜᶜ, Axᶠᶠᶜ, Axᶠᶜᶠ, Axᶜᶠᶜ, Axᶜᶜᶠ; diff --git a/src/Operators/spacings_and_areas_and_volumes.jl b/src/Operators/spacings_and_areas_and_volumes.jl; index 8b7aaeb7..9988b320 100644; --- a/src/Operators/spacings_and_areas_and_volumes.jl; +++ b/src/Operators/spacings_and_areas_and_volumes.jl; @@ -46,6 +46,9 @@ The operators in this file fall into three categories:; @inline Δzᵃᵃᶜ(i, j, k, grid::RegularRectilinearGrid) = grid.Δz; @inline Δzᵃᵃᶜ(i, j, k, grid::VerticallyStretchedRectilinearGrid) = @inbounds grid.Δzᵃᵃᶜ[k]; ; +@inline Δzᶠᶜᶜ(i, j, k, grid::RegularRectilinearGrid) = grid.Δz; +@inline Δzᶜᶠᶜ(i, j, k, grid::VerticallyStretchedRectilinearGrid) = @inbounds grid.Δzᵃᵃᶜ[k]; +; #####; ##### ""Spacings"" in Flat directions for rectilinear grids.; ##### Here we dispatch all spacings to `one`. This abuse of notation; diff --git a/test/runtests.jl b/test/runtests.jl; index 246192f6..d9d520f0 100644; --- a/test/runtests.jl; +++ b/test/runtests.jl; @@ -131,6 +131,7 @@ group = get(ENV, ""TEST_GROUP"", :all) |> Symbol; include(""test_vertical_vorticity_field.jl""); include(""test_implicit_free_surface_solver.jl""); include(""test_hydrostatic_free_surface_immersed_boundaries_apply_surf_bc.jl""); + include(""test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl""); end; end; ; diff --git a/test/test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl b/test/test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl; new file mode 100644; index 00000000..5241929b; --- /dev/null; +++ b/test/test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl; @@ -0,0 +1,56 @@; +using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom; +using Oceananigans.TurbulenceClosures: VerticallyImplicitTimeDiscretization; +; +@testset ""Immersed boundaries with hydrostatic free surface models"" begin; + @info ""Testing immersed boundaries vertic",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2049#issuecomment-966735406:3901,test,test,3901,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2049#issuecomment-966735406,1,['test'],['test']
Testability,"pressible Model Benchmarks: CPU vs GPU""); benchmark/benchmark_incompressible_model.jl: xlabel=""Nx"", ylabel=""Speedup Ratio"", title=""Incompressible Model Benchmarks: CPU/GPU""); benchmark/benchmark_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model benchmarks""); benchmark/benchmark_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Incompressible model CPU to GPU speedup""); benchmark/strong_scaling_incompressible_model.jl: @info ""Benchmarking distributed incompressible model strong scaling with $(typeof(decomposition)) decomposition [N=($Nx, $Ny, $Nz), ranks=($Rx, $Ry, $Rz)]...""; benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model strong scaling benchmark""); benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; benchmark/strong_scaling_incompressible_model_single.jl:@info ""Warming up distributed incompressible model on rank $local_rank...""; benchmark/strong_scaling_incompressible_model_single.jl:@info ""Benchmarking distributed incompressible model on rank $local_rank...""; docs/src/physics/",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326:1187,test,tests,1187,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326,1,['test'],['tests']
Testability,ps://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #886 +/- ##; ==========================================; + Coverage 70.99% 71.67% +0.67% ; ==========================================; Files 188 188 ; Lines 5230 5433 +203 ; ==========================================; + Hits 3713 3894 +181 ; - Misses 1517 1539 +22 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Simulations/run.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `93.61% <83.33%> (-1.63%)` | :arrow_down: |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `93.15% <100.00%> (+0.36%)` | :arrow_up: |; | [test/test\_simulations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3NpbXVsYXRpb25zLmps) | `100.00% <100.00%> (ø)` | |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `66.66% <0.00%> (+1.04%)` | :arrow_up: |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `72.34% <0.00%> (+1.28%)` | :arrow_up: |; | [src/Grids/grid\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `90.50% <0.00%> (+2.33%)` | :arrow_up: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `83.33% <0.00%> (+2.81%)` | :arrow_up: |; | [src/Diagnostics/av,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/886#issuecomment-683319943:1394,test,test,1394,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/886#issuecomment-683319943,2,['test'],['test']
Testability,"puted by the FFT, and which contains all of the information needed to compute fft(A, dims) quickly.; >; >; >; > To apply P to an array A, use P * A; in general, the syntax for applying plans is much like that of matrices. (A plan can only be applied to arrays of the same size as the A for which; >; > the plan was created.) You can also apply a plan with a preallocated output array Â by calling mul!(Â, plan, A). (For mul!, however, the input array A must be a complex floating-point; >; > array like the output Â.) You can compute the inverse-transform plan by inv(P) and apply the inverse plan with P \ Â (the inverse plan is cached and reused for subsequent calls to inv or; >; > \), and apply the inverse plan to a pre-allocated output array A with ldiv!(A, P, Â).; >; >; >; > The flags argument is a bitwise-or of FFTW planner flags, defaulting to FFTW.ESTIMATE. e.g. passing FFTW.MEASURE or FFTW.PATIENT will instead spend several seconds (or more) benchmarking; >; > different possible FFT algorithms and picking the fastest one; see the FFTW manual for more information on planner flags. The optional timelimit argument specifies a rough upper bound on; >; > the allowed planning time, in seconds. Passing FFTW.MEASURE or FFTW.PATIENT may cause the input array A to be overwritten with zeros during plan creation.; >; >; >; > plan_fft! is the same as plan_fft but creates a plan that operates in-place on its argument (which must be an array of complex floating-point numbers). plan_ifft and so on are similar; >; > but produce plans that perform the equivalent of the inverse transforms ifft and so on.; >; >; >; > help?> plan_fft!; >; > search: plan_fft! plan_ifft! plan_bfft! plan_fft plan_rfft plan_ifft plan_bfft plan_irfft plan_brfft; >; >; >; > plan_fft!(A [, dims]; flags=FFTW.ESTIMATE, timelimit=Inf); >; >; >; > Same as plan_fft, but operates in-place on A.; >; >; > But I just learned that you can apply the inverse plan with P \ Â which is; > cool!; >; > —; > You are receiving t",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/119#issuecomment-471179341:1677,benchmark,benchmarking,1677,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/119#issuecomment-471179341,1,['benchmark'],['benchmarking']
Testability,"quares a _function_, rather than a _field_. So `ℑxzᶜᵃᶜ(i, j, k, grid, f², ∂zᶠᶜᶠ, U.u)` represents a stencil that interpolates `∂zᶠᶜᶠ(i, j, k, grid, u)^2` from `Face` to `Center` in both x and z. > For instance, you could first create the model, define Ri and closure and then set! the model with this new closure and auxiliary field. Yes, your question makes a lot of sense! The reason we can't do that is because _type_ of any of the properties of `model` cannot change. This means we need to know the type of `model.closure` _before_ we build it. Another way to say this is that `HydrostaticFreeSurfaceModel` is _concretely typed_, which means that functions of `model` can be optimized based on the types of _every_ property of `HydrostaticFreeSurfaceModel`. This gives us performance advantages / reduces overhead, but also creates some limitations like: we have to define a `closure` before building model. Here's a simple example:. ```julia; julia> mutable struct Test{T}; a :: T; end. julia> t = Test(1.0); Test{Float64}(1.0). julia> t.a = 2.0; 2.0. julia> t.a = ""hi""; ERROR: MethodError: Cannot `convert` an object of type String to an object of type Float64; Closest candidates are:; convert(::Type{T}, ::T) where T<:Number at number.jl:6; convert(::Type{T}, ::Number) where T<:Number at number.jl:7; convert(::Type{T}, ::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250; ...; Stacktrace:; [1] setproperty!(x::Test{Float64}, f::Symbol, v::String); @ Base ./Base.jl:34; [2] top-level scope; @ REPL[6]:1; ```. Here, `t` is `Test{Float64}`. We can change `a` as long as the new value can be converted to `Float64` via `convert(Float64, new_value)`. Otherwise we can't and we just have to write `s = Test(""hi"")` instead. Another possible solution is to build a ""dummy"" closure with the correct type, and then replace it with the ""real"" closure after constructing model by writing `model.closure = real_closure`. It could be fun to try that and see if the code is simpler. I suspect i",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1066113513:1646,Test,Test,1646,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1066113513,1,['Test'],['Test']
Testability,"r * v; @inline immersed_drag_u(x, z, t, u, p) = - p.r * u; @inline immersed_drag_v(x, z, t, v, p) = - p.r * v. wind_stress_bc_u = FluxBoundaryCondition(wind_stress_u, parameters=(; τx₀, Twind)); wind_stress_bc_v = FluxBoundaryCondition(wind_stress_v, parameters=(; τy₀, Twind)). drag_bc_u = FluxBoundaryCondition(drag_u, field_dependencies=(:u), parameters=(; r)); drag_bc_v = FluxBoundaryCondition(drag_v, field_dependencies=(:v), parameters=(; r)); immersed_drag_bc_u = FluxBoundaryCondition(immersed_drag_u, field_dependencies=(:u), parameters=(; r)); immersed_drag_bc_v = FluxBoundaryCondition(immersed_drag_v, field_dependencies=(:v), parameters=(; r)). u_bcs = FieldBoundaryConditions(top=wind_stress_bc_u, bottom=drag_bc_u, immersed=immersed_drag_bc_u); v_bcs=FieldBoundaryConditions(top=wind_stress_bc_v, bottom=drag_bc_v, immersed=immersed_drag_bc_v); bcs = (; u=u_bcs, v=v_bcs). turbulence_closure = ScalarDiffusivity(VerticallyImplicitTimeDiscretization(), ν=Av). model = HydrostaticFreeSurfaceModel(grid=grid, boundary_conditions=bcs,; momentum_advection=nothing, # Linear to compare with analytical solution.; closure=turbulence_closure,; buoyancy=nothing,; coriolis=FPlane(f=f)). g = 0.01; cgw = dx/sqrt(g*hmin); Δt₀ = cgw*maxcfl/5; simulation = Simulation(model; Δt=Δt₀, stop_time=te). start_time = time_ns(); function log_message(sim); prog = 100*time(sim)/sim.stop_time; @printf(""[%05.2f%%] t: %1.1f Ti, Δt: %s, max|u, v, w|: %1.2f, %1.2f, %1.1e m s⁻¹, walltime: %s\n"",; prog, time(sim)/Ti, prettytime(sim.Δt),; maximum(abs, sim.model.velocities.u), maximum(abs, sim.model.velocities.v), maximum(abs, sim.model.velocities.w),; prettytime((time_ns() - start_time) * 1e-9)); end. simulation.callbacks[:progress] = Callback(log_message, TimeInterval(logdt)); outputs = (; u=model.velocities.u, v=model.velocities.v); simulation.output_writers[:fields2D] = NetCDFOutputWriter(model, outputs,; schedule=TimeInterval(outdt),; filename=fout,; overwrite_existing=true). run!(simulation); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/775#issuecomment-2132214906:3937,log,logdt,3937,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/775#issuecomment-2132214906,1,['log'],['logdt']
Testability,"rGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, max(Δz)=0.5; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Flat on vertically uniform grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo ; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Flat y; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Flat on vertically stretched grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Flat y; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, max(Δz)=0.5 ; [ Info: Testing Lagrangian particle tracking [CPU, RungeKutta3] with y Periodic on vertically uniform grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, RungeKutta3] with y Periodic on vertically stretched grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, max(Δz)=0.5; [ Info: Testing Lagrangian particle tracking [CPU, RungeKutta3] with y Flat on vertically uniform grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo ; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Flat y; └── Boun",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232:2500,Test,Testing,2500,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232,1,['Test'],['Testing']
Testability,"rGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [1.54466e-16, 47.1239) regularly spaced with Δx=0.736311; ├── Periodic y ∈ [1.54466e-16, 47.1239) regularly spaced with Δy=0.736311; └── Bounded z ∈ [-15.0, 0.0] regularly spaced with Δz=0.234375. julia> using Oceananigans.Grids: zspacing. julia> zspacing(1, 1, 1, grid, Center(), Center(), Center())/2 # Half the distance around a center point; 0.1171875; ```. This is clearer, and will give you the correct value even if you change the grid in the future. Note that in the call to `zspacing()` above, we need to specify the x, y and z positions to get the spacing, but in a `RectilinearGrid` Δz is constant in x and y so those arguments don't really matter. Also note that the code above is written for the most recent Oceananigans version (for which you'll need Julia 1.9). 3. Now to your main point (sorry for the tangents! :grimacing:), I don't see anything obviously wrong with the code. Just from looking at it, it looks like it _should_ work. (Btw, when I say that, I assume this is a _only snippet, and not the full-code_, since I get errors when I try to run your code (`coriolis`, `T_bcs` and `S_bcs` aren't defined, `Fx` looks like it'd cause an error, etc.), so I haven't been able to properly run and test your snippet.). That said, there are things I personally would try:; - Have you tried better resolving the model? A 64^3 model _should_ be able to achieve a log-law, but it's still worth investigating.; - Have you tried using the `SmagorinskyLilly` closure? I've had some issues with AMD in the past (although not exactly the same as yours), and I remember @glwagner mentioning having an issue with AMD near boundaries that could explain the behavior you're seeing.; - Finally, I'd suggest starting with a very simple model first for debugging/investigating. Just the bare minimum to reproduce a log-law. (i.e., no tracers, buoyancy, Coriolis, forcing...). @Tinydog8 @chabbymark Hope this helps!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1649999408:2373,test,test,2373,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1649999408,6,"['log', 'test']","['log-law', 'test']"
Testability,"rations/interpolation\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9pbnRlcnBvbGF0aW9uX3V0aWxzLmps) | `64.51% <0.00%> (-6.92%)` | :arrow_down: |; | [src/Fields/Fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `75.00% <ø> (ø)` | |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `90.33% <ø> (-0.75%)` | :arrow_down: |; | [src/AbstractOperations/binary\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9iaW5hcnlfb3BlcmF0aW9ucy5qbA==) | `92.30% <100.00%> (+0.20%)` | :arrow_up: |; | [src/Fields/pressure\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9wcmVzc3VyZV9maWVsZC5qbA==) | `100.00% <100.00%> (ø)` | |; | [src/OutputWriters/windowed\_time\_average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvd2luZG93ZWRfdGltZV9hdmVyYWdlLmps) | `97.05% <100.00%> (+3.51%)` | :arrow_up: |; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | `99.38% <100.00%> (+0.04%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964?src=pr&el=footer). Last update [d6ce0fe...98b825f](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/964?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/964#issuecomment-695015162:2249,test,test,2249,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/964#issuecomment-695015162,2,['test'],['test']
Testability,"rc/Operations.jl:720;   | [4] collect_artifacts;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:706 [inlined];   | [5] download_artifacts(env::Pkg.Types.EnvCache; platform::Base.BinaryPlatforms.Platform, julia_version::VersionNumber, verbose::Bool, io::Base.DevNull);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:752;   | [6] up(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}, level::Pkg.Types.UpgradeLevel; skip_writing_project::Bool, preserve::Nothing);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1542;   | [7] up(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; level::Pkg.Types.UpgradeLevel, mode::Pkg.Types.PackageMode, preserve::Nothing, update_registry::Bool, skip_writing_project::Bool, kwargs::@Kwargs{io::Base.DevNull});   | @ Pkg.API /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:351;   | [8] up;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:326 [inlined];   | [9] up;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:164 [inlined];   | [10] #resolve#143;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:357 [inlined];   | [11] resolve;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:356 [inlined]; ```. There may be some clues here: https://discourse.julialang.org/t/how-do-i-activate-the-test-environment-of-a-package/86740/3. but we may also want to reach out on the Julia slack",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250997136:2519,test,test-environment-of-a-package,2519,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250997136,1,['test'],['test-environment-of-a-package']
Testability,"ree#diff-c3JjL0ZpZWxkcy9hYnN0cmFjdF9maWVsZC5qbA==) | `52.94% <52.94%> (ø)` | |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `81.25% <66.66%> (+20.83%)` | :arrow_up: |; | [src/Grids/grid\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `87.27% <70.00%> (-4.73%)` | :arrow_down: |; | [src/Fields/reduced\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9yZWR1Y2VkX2ZpZWxkLmps) | `76.47% <76.47%> (ø)` | |; | [src/Fields/new\_data.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9uZXdfZGF0YS5qbA==) | `76.92% <100.00%> (+10.25%)` | :arrow_up: |; | [src/Utils/kernel\_launching.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL2tlcm5lbF9sYXVuY2hpbmcuamw=) | `100.00% <100.00%> (ø)` | |; | [test/test\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZpZWxkcy5qbA==) | `100.00% <100.00%> (ø)` | |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `85.71% <0.00%> (-3.18%)` | :arrow_down: |; | ... and [3 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920?src=pr&el=footer). Last update [01b2481...cd8c943](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920?src=pr&el=lastupdated). Read the [comment docs](ht",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/920#issuecomment-689748446:2444,test,test,2444,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/920#issuecomment-689748446,2,['test'],['test']
Testability,"ressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model benchmarks""); benchmark/benchmark_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Incompressible model CPU to GPU speedup""); benchmark/strong_scaling_incompressible_model.jl: @info ""Benchmarking distributed incompressible model strong scaling with $(typeof(decomposition)) decomposition [N=($Nx, $Ny, $Nz), ranks=($Rx, $Ry, $Rz)]...""; benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model strong scaling benchmark""); benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; benchmark/strong_scaling_incompressible_model_single.jl:@info ""Warming up distributed incompressible model on rank $local_rank...""; benchmark/strong_scaling_incompressible_model_single.jl:@info ""Benchmarking distributed incompressible model on rank $local_rank...""; docs/src/physics/incompressible_model.md:# Incompressible model; docs/src/numerical_implementation/time_stepping.md:where, e.g., for the incompressible model, ; docs/make.jl: ""Incompressible model"" => ""physics/incompr",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326:1369,benchmark,benchmark,1369,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326,1,['benchmark'],['benchmark']
Testability,"ression.jl:93; [2023/02/14 16:24:51.806] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/14 16:25:16.858] INFO Initializing simulation...; [2023/02/14 16:25:16.992] INFO ... simulation initialization complete (134.028 ms); [2023/02/14 16:25:16.992] INFO Executing initial time step...; [2023/02/14 16:25:47.962] INFO ... initial time step complete (30.969 seconds).; [2023/02/14 16:25:48.168] INFO Simulation is stopping after running for 31.304 seconds.; [2023/02/14 16:25:48.168] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:25:48.190] INFO Δu: min=-1.672000e-04, max=+4.242261e-06, mean=-8.684623e-06, absmean=+8.777260e-06, std=+2.661194e-05 (16384/16384 matching grid points); [2023/02/14 16:25:48.191] INFO Δv: min=-2.345113e-05, max=+4.749113e-05, mean=+1.747024e-06, absmean=+3.169309e-06, std=+8.512156e-06 (10620/16512 matching grid points); [2023/02/14 16:25:48.191] INFO Δh: min=-1.338214e-04, max=+1.449336e-04, mean=-4.033232e-17, absmean=+1.028773e-05, std=+2.832882e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /home/ssilvest/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/julia-1.8.0/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Test Summary: | Pass Fail Total Time; Oceananigans | 4 2 6 3m14.4s; Single file test | 4 2 6 3m14.4s; Shallow Water Regression | 4 2 6 3m09.1s; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3 2m11.7s; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3 56.4s; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:3689,Test,Test,3689,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637,7,"['Test', 'test']","['Test', 'test']"
Testability,"rettytime(wizard.Δt). function Base.print(progress::ProgressMessenger); @printf(""i: %04d, t: %s, Δt: %s, ; progress.model.clock.iteration, prettytime(progress.model.clock.time), pretty_Δt(progress.Δt)) ; return nothing; end; ```. One could then expand on this design by setting up the `diagnostics` field to accept a list of callable objects or functions. Or even better, a list of objects that look something like. ```julia; struct PrintableDiagnostic{D}; diagnostic :: D; format :: String; name :: String; units :: String; end. function pretty_diagnostic(pd::PrintableDiagnostic, model); return @sprintf(""%s: $(pd.format) %s"", pd.name, pd.diagnostic(model), pd.units); end; ```. with this design, the user can pass a list of `PrintableDiagnostics` to `ProgressPrinter`, which are then evaluated and the results turned into a string via the function `pretty_diagnostic`. As for option 1 of using a logging package, perhaps it could be nice to use some logging functionality that's configurable with global variables (?) rather than manually creating a `ProgressPrinter` that does ""brute force"" printing as I have described above. However I think that it would require some customization of existing logging packages, since the typical `info` or `debug` settings are not sufficient for the purposes of logging simulation output (right?) Instead, we would need more options, and it'd be nice to obtain the ability to also print the output of diagnostics / monitoring functions, as we do in the example script. And I think doing it this way might involve adding some lines to our time stepping loop. Perhaps @ali-ramadhan has more to say. Another thing we have talked about is somehow having the ability to live-update messages in the terminal (rather than printing a stream of message). This would be nice because it could dramatically reduce the text-noise that a stream of messages invokes, allowing the user to much more easily read and interpret the output of a simulation progress (in addition to ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-540828221:3182,log,logging,3182,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-540828221,2,['log'],['logging']
Testability,"rgy[1, 1, 1]) ; #rescale_factor = √(target_kinetic_energy / energy[1, 1, 1]). for f in merge(model.velocities, model.tracers); f .*= rescale_factor; end. return nothing; end; ```; Error:; ```; Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore should be avoided. If you want to allow scalar iteration, use `allowscalar` or `@allowscalar`; to enable scalar iteration globally or for the operations in question. Stacktrace:; [1] error(s::String); @ Base .\error.jl:35; [2] errorscalar(op::String); @ GPUArraysCore C:\Users\ADMIN\.julia\packages\GPUArraysCore\GMsgk\src\GPUArraysCore.jl:155; [3] _assertscalar(op::String, behavior::GPUArraysCore.ScalarIndexing); @ GPUArraysCore C:\Users\ADMIN\.julia\packages\GPUArraysCore\GMsgk\src\GPUArraysCore.jl:128; [4] assertscalar(op::String); @ GPUArraysCore C:\Users\ADMIN\.julia\packages\GPUArraysCore\GMsgk\src\GPUArraysCore.jl:116; [5] getindex(A::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, I::Int64); @ GPUArrays C:\Users\ADMIN\.julia\packages\GPUArrays\Hd5Sk\src\host\indexing.jl:48; [6] scalar_getindex; @ C:\Users\ADMIN\.julia\packages\GPUArrays\Hd5Sk\src\host\indexing.jl:34 [inlined]; [7] _getindex; @ C:\Users\ADMIN\.julia\packages\GPUArrays\Hd5Sk\src\host\indexing.jl:17 [inlined]; [8] getindex; @ C:\Users\ADMIN\.julia\packages\GPUArrays\Hd5Sk\src\host\indexing.jl:15 [inlined]; [9] getindex; @ .\subarray.jl:290 [inlined]; [10] macro expansion; @ .\multidimensional.jl:917 [inlined]; [11] macro expansion; @ .\cartesian.jl:64 [inlined]; [12] macro expansion; @ .\multidimensional.jl:912 [inlined]; [13] _unsafe_getindex!; @ .\multidimensional.jl:925 [inlined]; [14] _unsafe_getindex(::IndexCartesian, ::SubArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3522#issuecomment-2022273164:1309,assert,assertscalar,1309,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3522#issuecomment-2022273164,1,['assert'],['assertscalar']
Testability,"right, remaking the performance benchmark is definitely on the todo list!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3758#issuecomment-2326784686:32,benchmark,benchmark,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3758#issuecomment-2326784686,1,['benchmark'],['benchmark']
Testability,"ring}, parent::String; prefix::String); @ Base.Filesystem ./file.jl:766; [19] mktempdir(fn::Function, parent::String); @ Base.Filesystem ./file.jl:762; [20] mktempdir; @ ./file.jl:762 [inlined]; [21] sandbox(fn::Function, ctx::Pkg.Types.Context, target::Pkg.Types.PackageSpec, target_path::String, sandbox_path::String, sandbox_project_override::Pkg.Types.Project; preferences::Dict{String, Any}, force_latest_compatible_version::Bool, allow_earlier_backwards_compatible_versions::Bool, allow_reresolve::Bool); @ Pkg.Operations /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1752; [22] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing, force_latest_compatible_version::Bool, allow_earlier_backwards_compatible_versions::Bool, allow_reresolve::Bool); @ Pkg.Operations /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1955; [23] test; @ /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1899 [inlined]; [24] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, force_latest_compatible_version::Bool, allow_earlier_backwards_compatible_versions::Bool, allow_reresolve::Bool, kwargs::@Kwargs{io::Base.TTY}); @ Pkg.API /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:444; [25] test(pkgs::Vector{Pkg.Types.PackageSpec}; io::Base.TTY, kwargs::@Kwargs{}); @ Pkg.API /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:159; [26] test(pkgs::Vector{Pkg.Types.PackageSpec}); @ Pkg.API /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:148; [27] test(; name::Nothing, uuid::Nothing, version::Nothing, url::Nothing, rev::Nothing, path::Nothing, mode::Pkg.Types.PackageMode, subdir::Nothing, kwargs::@Kwargs{}); @ Pkg.API /storage5/buildkite-agent/julia",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1988500458:6751,test,test,6751,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1988500458,1,['test'],['test']
Testability,"rn illustrated below:. ```julia; julia> grid = RectilinearGrid(size=(4, 4, 1), extent=(1,1,1)); 4×4×1 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.25; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.25; └── Bounded z ∈ [-1.0, 0.0] regularly spaced with Δz=1.0. julia> xnodes(grid, Center(), Center(), Face()); 4-element view(OffsetArray(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, -2:7), 1:4) with eltype Float64:; 0.125; 0.375; 0.625; 0.875. julia> xnode(2,2,2, grid, Center(), Center(), Face()); 0.375. julia> xspacings(grid, Center(), Center(), Face()); 0.25. julia> xspacing(1, 2, 3, grid, Center(), Center(), Face()); 0.25; ```. These functions also appropriately handle stretched coordinates. In addition, both `xspacings()` and `xnodes()` have a `with_halos` kwarg that controls whether of not halos points are included. Convenience functions with fewer arguments are also defined for the cases where that's possible. For example:. ```julia; julia> xnode(2,2,2, grid, Center(), Center(), Face()); 0.375. julia> xnode(2, grid, Center()); 0.375; ```. I added tests for these functions for every grid in a way that doesn't create new grid instantiations. @glwagner the only issue left on my end is what to do about `xnodes_reshaped()`. For now I've renamed it to `reshaped_xnodes()` like you suggested, but I'm reluctant to merge that functionality into `xnodes()` since it would complicate the code and I couldn't find much use for the reshaped array. I've tried plotting different types of plots with different packages and none of them required reshaping the nodes array, so maybe that behavior comes from old versions of some plotting packages. I'd vote for us keeping things as it is (a separate function called `reshaped_xnodes()` (and same for y, z)). Or to just nuke that function, since reshaping the array isn't hard for the user to do anyway.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1427140335:1413,test,tests,1413,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1427140335,1,['test'],['tests']
Testability,"rostaticModel(; grid, tracers = (tracer_symbols...,)); @info model. uᵢ(x, y, z) = 1e-2 * randn(); set!(model, w=uᵢ). tracer_IC_odd(x, y, z) = sin(2π * z / grid.Lz); for i in 1:n_tracers; @info ""Setting tracer $i""; expression = Meta.parse(""set!(model, τ$i=tracer_IC_odd)""); eval(expression); end. simulation = Simulation(model, Δt=30, stop_iteration=4). u, v, w = model.velocities. wτ = NamedTuple(Symbol(:w, key) => Field(w*τ) for (key, τ) in pairs(model.tracers)). outputs_full = (; wτ...). outputs_yavg = NamedTuple( Symbol(key, :_yavg)=>Average(val, dims=(2,)) for (key, val) in zip(keys(outputs_full), outputs_full)). outputs_xz1 = merge(outputs_full, outputs_yavg); simulation.output_writers[:xz1_writer] = NetCDFOutputWriter(model, outputs_xz1;; filename = ""test.nc"",; schedule = TimeInterval(simulation.stop_time),; verbose=true,; indices = (:, 1, :),; overwrite_existing = true,; ); run!(simulation); ```. and got; ```Julia; [ Info: Initializing simulation...; [ Info: Writing to NetCDF: ./test.nc...; [ Info: Computing NetCDF outputs for time index 1: [""wτ3"", ""wτ2_yavg"", ""wτ6_yavg"", ""wτ1"", ""wτ5_yavg"", ""wτ6"", ""wτ2"", ""wτ5"", ""wτ4"", ""wτ1_yavg"", ""wτ4_yavg"", ""wτ3_yavg""]...; [ Info: Computing wτ3 done: time=439.823 ms; [ Info: Computing wτ2_yavg done: time=3.404 seconds; [ Info: Computing wτ6_yavg done: time=3.018 seconds; [ Info: Computing wτ1 done: time=225.326 ms; [ Info: Computing wτ5_yavg done: time=2.950 seconds; [ Info: Computing wτ6 done: time=292.708 μs; [ Info: Computing wτ2 done: time=192.674 ms; [ Info: Computing wτ5 done: time=190.263 ms; [ Info: Computing wτ4 done: time=193.185 ms; [ Info: Computing wτ1_yavg done: time=1.210 seconds; [ Info: Computing wτ4_yavg done: time=2.954 seconds; [ Info: Computing wτ3_yavg done: time=2.953 seconds; [ Info: Writing done: time=17.732 seconds, size=19.5 KiB, Δsize=0.0 B; [ Info: ... simulation initialization complete (18.528 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (30.965 seconds).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387:1196,test,test,1196,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387,1,['test'],['test']
Testability,"rtically-implicit time-stepping for diffusion terms (numerics). Ocean models typically use a time-stepping method that treats vertical diffusion terms implicitly. We haven't worried about this because we are focused on LES for the most part, or problems with very little diffusion. But ultimately we will need this, especially when we get around to implementing boundary layer closures. We have a tridiagonal solver that works on the GPU, so in some respects the hard work is already done for this problem. 3. Closures for LES and ocean modeling (Dynamic Smagorinsky, Deardorff, k-epsilon, Gent-McWilliams, convective adjustment (?) etc --- physics). We have a need to implement new turbulence closures new and old alike. Gent-McWilliams is probably easy since we already have a Leith closure implemented which calculates the tensor needed to rotate the diffusivity into an isopycnal coordinate. The others are a bit more challenging. 4. Extensive profiling and benchmarking on the GPU to identify bottlenecks / places for improvement in the algorithm (numerics). We might be able to make the code a lot faster (but we aren't sure). 5. A solver for hydrostatic problems with a free surface that uses a split-explicit time-integration method. This is notoriously tricky, but we've made a lot of progress on this for the purposes of the ClimateMachine and it might be interesting to translate what we've learned into Oceananigans. There's also some minor package stuff that I want to work on, such as refactoring the output writer (#963), improving logging / feedback while oceananigans builds a model or runs a simulation (#1013), getting arrays with named axes to work (#457), and figuring out what's going wrong with models that have `Flat` dimensions (#1024). A more fun project is to come up with cool plotting recipes in 1D, 2D, and 3D (!) We'd like to show people how to use Makie (for example) to create really cool visualizations / animations of turbulence. The examples do some animation, but",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724262281:2117,benchmark,benchmarking,2117,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724262281,1,['benchmark'],['benchmarking']
Testability,"running on my new PR (#2888) where this test fails for the v velocity, I get this. `diff = Bool.(1 .- (truth_fields.v .≈ test_fields.v))`. ![Screenshot 2023-02-14 at 10 41 48 AM](https://user-images.githubusercontent.com/33547697/218787450-f6426596-03bc-4680-bc6b-89e9be925357.png). which seems to suggest that it is not a BC issue; It is true that on that PR more nodes are failing, so it might have introduced another issue; ```; [2023/02/14 10:33:50.948] INFO Δv: min=-2.345113e-05, max=+4.749113e-05, mean=+1.747024e-06, absmean=+3.169309e-06, std=+8.512156e-06 (10620/16512 matching grid points); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1429963449:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1429963449,1,['test'],['test']
Testability,"s (like the models implemented in OceanBioME) to ""opt-in"" to a substepping scheme. In this design, there's no need to change the existing ""slow"" kernels I don't think. However, we could consider changing the name of them. For example, all that's needed is for the _implementation_ to know when to return a slow source term vs fast source term. > this is where I had to make some more changes to the existing code (and probably the messiest part of what I did), because the code often expects the tendencies to live at timestepper.G / $G^-$, so I made functions that dispatched on the timestepper and usually returned that, but for the new timestepepr returned timestepper.physics.G etc. I'm not sure that new tendencies are needed for substepping. The substepping scheme for CATKE manages to avoid allocating any additional tendencies by preserving the ""slow"" source term:. https://github.com/CliMA/Oceananigans.jl/blob/6c40d7e225c2127051b2703b9c62a8b18260e3a5/src/TurbulenceClosures/turbulence_closure_implementations/TKEBasedVerticalDiffusivities/time_step_catke_equation.jl#L167-L171. The only change that is needed within Oceananigans (in principle) --- as far as I can tell --- is to skip the tracer update for certain tracers (like we do for CATKE and TKEDissipation):. https://github.com/CliMA/Oceananigans.jl/blob/6c40d7e225c2127051b2703b9c62a8b18260e3a5/src/Models/HydrostaticFreeSurfaceModels/hydrostatic_free_surface_ab2_step.jl#L78-L85. Then the implementer of the BGC model has to perform the substepping inside `update_biogeochemical_state!`:. https://github.com/CliMA/Oceananigans.jl/blob/6c40d7e225c2127051b2703b9c62a8b18260e3a5/src/Models/HydrostaticFreeSurfaceModels/update_hydrostatic_free_surface_model_state.jl#L49. Possibly we can go further and define an interface that does the substepping automatically though. I think that an effort like this would be good not to go so far, and first test ideas in a ""minimal"" implementation that simply uses `update_biogeochemical_state!`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3888#issuecomment-2455670851:2454,test,test,2454,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3888#issuecomment-2455670851,2,['test'],['test']
Testability,s 3427 1778 -1649 ; + Misses 1354 698 -656 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [...ests/one\_dimensional\_cosine\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9jb3NpbmVfYWR2ZWN0aW9uX2RpZmZ1c2lvbi5qbA==) | | |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | | |; | [...ion/convergence\_tests/ConvergenceTests/analysis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvYW5hbHlzaXMuamw=) | | |; | [...gence\_tests/ConvergenceTests/ForcedFlowFreeSlip.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvRm9yY2VkRmxvd0ZyZWVTbGlwLmps) | | |; | [test/test\_forcings.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZvcmNpbmdzLmps) | | |; | [...vergence\_tests/analyze\_single\_forced\_fixed\_slip.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL2FuYWx5emVfc2luZ2xlX2ZvcmNlZF9maXhlZF9zbGlwLmps) | | |; | [test/test\_regression.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3JlZ3Jlc3Npb24uamw=) | | |; | [examples/ocean\_convection\_with\_plankton.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb2NlYW5fY29udmVjdGlvbl93aXRoX3BsYW5rdG9uLmps) | | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/793/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvZWFkeV90dXJidWxlbmNlLmps) | | |; | [...tion/convergence\_tests/analyze\_forced\_free\_slip.jl](http,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/793#issuecomment-657517751:1902,test,test,1902,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/793#issuecomment-657517751,2,['test'],['test']
Testability,s v1.4.2; [6aa5eb33] TaylorSeries v0.10.13; [a759f4b9] TimerOutputs v0.5.8; [3bb67fe8] TranscodingStreams v0.9.5; [bc48ee85] Tullio v0.2.13; [5c2747f8] URIs v1.2.0; [a2964d1f] Wayland_jll v1.17.0+4; [2381bf8a] Wayland_protocols_jll v1.18.0+4; [02c8fc9c] XML2_jll v2.9.10+3; [aed1982a] XSLT_jll v1.1.33+4; [4f6342f7] Xorg_libX11_jll v1.6.9+4; [0c0b7dd1] Xorg_libXau_jll v1.0.9+4; [935fb764] Xorg_libXcursor_jll v1.2.0+4; [a3789734] Xorg_libXdmcp_jll v1.1.3+4; [1082639a] Xorg_libXext_jll v1.3.4+4; [d091e8ba] Xorg_libXfixes_jll v5.0.3+4; [a51aa0fd] Xorg_libXi_jll v1.7.10+4; [d1454406] Xorg_libXinerama_jll v1.1.4+4; [ec84b674] Xorg_libXrandr_jll v1.5.2+4; [ea2f1a96] Xorg_libXrender_jll v0.9.10+4; [14d82f49] Xorg_libpthread_stubs_jll v0.1.0+3; [c7cfdc94] Xorg_libxcb_jll v1.13.0+3; [cc61e674] Xorg_libxkbfile_jll v1.1.0+4; [12413925] Xorg_xcb_util_image_jll v0.4.0+1; [2def613f] Xorg_xcb_util_jll v0.4.0+1; [975044d2] Xorg_xcb_util_keysyms_jll v0.4.0+1; [0d47668e] Xorg_xcb_util_renderutil_jll v0.3.9+1; [c22f9ab0] Xorg_xcb_util_wm_jll v0.4.1+1; [35661453] Xorg_xkbcomp_jll v1.4.2+4; [33bec58e] Xorg_xkeyboard_config_jll v2.27.0+4; [c5fb5394] Xorg_xtrans_jll v1.4.0+3; [83775a58] Zlib_jll v1.2.11+18; [3161d3a3] Zstd_jll v1.4.8+0; [0ac62f75] libass_jll v0.14.0+4; [f638f0a6] libfdk_aac_jll v0.1.6+4; [b53b4c65] libpng_jll v1.6.37+6; [f27f6e37] libvorbis_jll v1.3.6+6; [8e850ede] nghttp2_jll v1.40.0+2; [1270edf5] x264_jll v2020.7.14+2; [dfaa095f] x265_jll v3.0.0+3; [d8fb68d0] xkbcommon_jll v0.9.1+5; [2a0f44e3] Base64; [ade2ca70] Dates; [8bb1440f] DelimitedFiles; [8ba89e20] Distributed; [b77e0a4c] InteractiveUtils; [76f85450] LibGit2; [8f399da3] Libdl; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [d6f4376e] Markdown; [a63ad114] Mmap; [44cfe95a] Pkg; [de0858da] Printf; [3fa0cd96] REPL; [9a3f8284] Random; [ea8e919c] SHA; [9e88b42a] Serialization; [1a1011a3] SharedArrays; [6462fe0b] Sockets; [2f01184e] SparseArrays; [10745b16] Statistics; [8dfed614] Test; [cf7118a7] UUIDs; [4ec0a83e] Unicode,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-824063115:5852,Log,Logging,5852,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-824063115,2,"['Log', 'Test']","['Logging', 'Test']"
Testability,"s was a page taken out of `ImplicitGlobalGrid.jl`'s book, more specifically https://github.com/eth-cscs/ImplicitGlobalGrid.jl/blob/master/src/select_device.jl.; Much better results:; <html>; <body>; <!--StartFragment-->. size | ranks | min | median | mean | max | memory | allocs | samples; -- | -- | -- | -- | -- | -- | -- | -- | --; (4096, 256) | (1, 1) | 2.702 ms | 2.728 ms | 2.801 ms | 3.446 ms | 2.03 MiB | 5535 | 10; (4096, 512) | (1, 2) | 3.510 ms | 3.612 ms | 4.287 ms | 16.546 ms | 2.03 MiB | 5859 | 20; (4096, 768) | (1, 3) | 3.553 ms | 3.653 ms | 5.195 ms | 39.152 ms | 2.03 MiB | 5859 | 30. <!--EndFragment-->; </body>; </html>; <html>; <body>; <!--StartFragment-->. size | ranks | slowdown | efficiency | memory | allocs; -- | -- | -- | -- | -- | --; (4096, 256) | (1, 1) | 1.0 | 1.0 | 1.0 | 1.0; (4096, 512) | (1, 2) | 1.32399 | 0.755293 | 1.00271 | 1.05854; (4096, 768) | (1, 3) | 1.33901 | 0.746818 | 1.00271 | 1.05854. <!--EndFragment-->; </body>; </html>; I could only get up to 3 GPUs because I'm still doing this on only one node. I will try to do more ranks and GPUs once more significant changes than my single line of code is added. ; This was done on Satori with setup instructions shown here: . https://github.com/christophernhill/onan-jcon2021-bits/blob/main/run/satori/run-on-bench-on-rhel7-satori-with-mpi; The better efficiency is not caused by a slowdown on the non-MPI case either. Both this result and the original one posted above had median one-rank times of around 2.7ms. System info:; ```; Julia Version 1.6.2; Commit 1b93d53fc4 (2021-07-14 15:36 UTC); Platform Info:; OS: Linux (powerpc64le-unknown-linux-gnu); CPU: unknown; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, pwr9); Environment:; JULIA_MPI_PATH = /home/software/spack/openmpi/3.1.4-nhjzelonyovxks5ydtrxehceqxsbf7ik; JULIA_CUDA_USE_BINARYBUILDER = false; JULIA_DEPOT_PATH = /nobackup/users/henryguo/projects/henry-test/Oceananigans.jl/benchmark/.julia; GPU: Tesla V100-SXM2-32GB; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-887163300:2169,test,test,2169,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-887163300,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,s │ 1.25 MiB │ 37738 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────┴─────────┘. HydrostaticFreeSurface model benchmarks (Ns²×10); ┌───────────────┬─────────────┬─────┬────────────┬────────────┬─────────┬─────────┐; │ Architectures │ Float_types │ Ns │ median │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼─────────┼─────────┤; │ CPU │ Float64 │ 64 │ 14.389 ms │ 1.33 MiB │ 2157 │ 10 │; │ CPU │ Float64 │ 128 │ 26.194 ms │ 1.33 MiB │ 2157 │ 10 │; │ CPU │ Float64 │ 256 │ 127.087 ms │ 1.33 MiB │ 2157 │ 10 │; │ GPU │ Float64 │ 64 │ 4.682 ms │ 1.73 MiB │ 4444 │ 10 │; │ GPU │ Float64 │ 128 │ 3.091 ms │ 1.73 MiB │ 4457 │ 10 │; │ GPU │ Float64 │ 256 │ 3.346 ms │ 1.73 MiB │ 4416 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴─────────┴─────────┘. ShallowWater model benchmarks (Ns²); ┌───────────────┬─────────────┬─────┬───────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ median │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼───────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 64 │ 2.130 ms │ 796.97 KiB │ 1460 │ 10 │; │ CPU │ Float64 │ 128 │ 6.043 ms │ 796.97 KiB │ 1460 │ 10 │; │ CPU │ Float64 │ 256 │ 34.627 ms │ 796.97 KiB │ 1460 │ 10 │; │ GPU │ Float64 │ 64 │ 2.164 ms │ 1.06 MiB │ 3315 │ 10 │; │ GPU │ Float64 │ 128 │ 2.112 ms │ 1.06 MiB │ 3315 │ 10 │; │ GPU │ Float64 │ 256 │ 2.614 ms │ 1.06 MiB │ 3315 │ 10 │; └───────────────┴─────────────┴─────┴───────────┴────────────┴────────┴─────────┘. origin/main. Nonhydrostatic model benchmarks (Ns³); ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ median │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 64 │ 81.958 ms │ 636.84 KiB │ 1576 │ 10 │; │ CPU │ Float64 │ 128 │ 405.241 ms │ 636.84 KiB │ 1576 │ 10 │; │ CPU │ Floa,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1066030763:1522,benchmark,benchmarks,1522,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1066030763,1,['benchmark'],['benchmarks']
Testability,"s │ 1.458 s │ 1.458 s │ 1.37 MiB │ 2318 │ 4 │; │ (8192, 1024) │ 2 │ 2.925 s │ 2.989 s │ 2.989 s │ 3.052 s │ 18.06 MiB │ 1076944 │ 2 │; │ (8192, 2048) │ 4 │ 2.296 s │ 2.381 s │ 2.397 s │ 2.515 s │ 13.60 MiB │ 760190 │ 3 │; │ (8192, 4096) │ 8 │ 2.347 s │ 2.369 s │ 2.377 s │ 2.415 s │ 16.36 MiB │ 891860 │ 3 │; │ (8192, 8192) │ 16 │ 2.407 s │ 2.548 s │ 2.517 s │ 2.595 s │ 17.44 MiB │ 863941 │ 3 │; │ (8192, 16384) │ 32 │ 3.023 s │ 3.069 s │ 3.069 s │ 3.115 s │ 23.03 MiB │ 1034063 │ 2 │; └───────────────┴─────────┴─────────┴─────────┴─────────┴─────────┴───────────┴─────────┴─────────┘. Shallow water model weak multithreading scaling speedup; ┌───────────────┬─────────┬──────────┬────────────┬─────────┬─────────┐; │ size │ threads │ slowdown │ efficiency │ memory │ allocs │; ├───────────────┼─────────┼──────────┼────────────┼─────────┼─────────┤; │ (8192, 512) │ 1 │ 1.0 │ 1.0 │ 1.0 │ 1.0 │; │ (8192, 1024) │ 2 │ 2.04972 │ 0.487872 │ 13.2156 │ 464.601 │; │ (8192, 2048) │ 4 │ 1.63302 │ 0.612363 │ 9.95278 │ 327.951 │; │ (8192, 4096) │ 8 │ 1.62507 │ 0.615359 │ 11.9706 │ 384.754 │; │ (8192, 8192) │ 16 │ 1.74747 │ 0.572257 │ 12.755 │ 372.71 │; │ (8192, 16384) │ 32 │ 2.10486 │ 0.47509 │ 16.846 │ 446.101 │; └───────────────┴─────────┴──────────┴────────────┴─────────┴─────────┘; ```; Also, after reviewing the new benchmarks and comparing them to the old benchmarks currently displayed on [`benchmarks.md`](https://github.com/CliMA/Oceananigans.jl/blob/master/docs/src/appendix/benchmarks.md), it seems like all the CPU vs GPU benchmarks use the same CPU and all the MPI and threaded benchmarks use another type of CPUs.; The MPI and threaded benchmarks use Intel(R) Xeon(R) CPU E5-2683 v4 @ 2.10GHz, while every other benchmark including the CPU to GPU speedup benchmarks use Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz. ; This is mainly because the speedup benchmarks need a single better CPU and the MPI benchmarks need many CPUs and the exact types worked out to be like this on the cluster.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-881473478:2510,benchmark,benchmarks,2510,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-881473478,11,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"s). #Coefficient of Thermal expansion; const alpha= 2e-4. #Coefficient of Salinity; const beta=8e-4; #heat flux; const Bo=3.6e-4; #coriolis parameter; const f=-0.5; #gravitational acceleration; const g=300. Q = Bo; const dTdz = 0 # K m⁻¹; T_bcs = FieldBoundaryConditions(; top = FluxBoundaryCondition(Q),; bottom = GradientBoundaryCondition(dTdz)). const Qᵘ=0; u_bcs = FieldBoundaryConditions(top = FluxBoundaryCondition(Qᵘ), bottom=ValueBoundaryCondition(0.0)); v_bcs = FieldBoundaryConditions(top = FluxBoundaryCondition(Qᵘ), bottom=ValueBoundaryCondition(0.0)). buoyancy = SeawaterBuoyancy(gravitational_acceleration = g,equation_of_state=LinearEquationOfState(α=alpha, β=beta)). using Oceananigans.Advection; using Oceananigans.TurbulenceClosures. model = NonhydrostaticModel(architecture = CPU(),; advection = UpwindBiasedFifthOrder(),; timestepper = :RungeKutta3,; grid = computational_grid,; tracers = (:T, :S),; coriolis = FPlane(f=f),; buoyancy = buoyancy,; closure = SmagorinskyLilly(),; boundary_conditions = (u=u_bcs, v=v_bcs, T=T_bcs)); using Oceananigans.Diagnostics: accurate_cell_advection_timescale; wizard = TimeStepWizard(cfl=0.5,Δt=0.1, max_change=1.1, max_Δt=1minutes,cell_advection_timescale = accurate_cell_advection_timescale); start_time = time_ns() # so we can print the total elapsed wall time. # Print a progress message; progress_message(sim) =; @printf(""i: %04d, t: %s, Δt: %s, wmax = %.1e ms⁻¹, wall time: %s\n"",; sim.model.clock.iteration, prettytime(model.clock.time),; prettytime(wizard), maximum(abs, sim.model.velocities.w),; prettytime((time_ns() - start_time) * 1e-9)). simulation = Simulation(model,; Δt = wizard,; stop_time = 12minutes,; iteration_interval = 1,; progress = progress_message; ); fields = Dict(""u"" => model.velocities.u,""v"" => model.velocities.v,""w"" => model.velocities.w, ""T"" => model.tracers.T). simulation.output_writers[:fields] =; NetCDFOutputWriter(model, fields, filepath=""TestSetup.nc"",; schedule=TimeInterval(6) ); run!(simulation); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1946#issuecomment-902839166:3084,Test,TestSetup,3084,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1946#issuecomment-902839166,1,['Test'],['TestSetup']
Testability,"s.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},OffsetArrays.OffsetArray{Float64,1,Array{Float64,1}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Flux,Nothing},BoundaryCondition{Flux,Nothing}}}}},Field{Center,Center,Face,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},VerticallyStretchedRectilinearGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},OffsetArrays.OffsetArray{Float64,1,Array{Float64,1}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{NormalFlow,Nothing},BoundaryCondition{NormalFlow,Nothing}}}}}}}; filepath::String, schedule::TimeInterval, array_type::Type{T} where T, field_slicer::FieldSlicer{Colon,Colon,Colon}, global_attributes::Dict{Any,Any}, output_attributes::Dict{Any,Any}, dimensions::Dict{Any,Any}, mode::String, compression::Int64, verbose::Bool) at /home/tomas/repos2/Oceananigans.jl/src/OutputWriters/netcdf_output_writer.jl:318; [4] top-level scope at /home/tomas/repos2/Oceananigans.jl/sandbox/stretch.jl:38; [5] include(::String) at ./client.jl:457; [6] top-level scope at REPL[21]:1; in expression starting at /home/tomas/repos2/Oceananigans.jl/sandbox/stretch.jl:34; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1466#issuecomment-799790013:17418,sandbox,sandbox,17418,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1466#issuecomment-799790013,2,['sandbox'],['sandbox']
Testability,"s.jl: 0.1.11; MPICH_jll: 4.2.3+0. Library information:; libmpi: /Users/gregorywagner/.julia/artifacts/5b62c899cf8329a8d07e8fe6eda96039010046c7/lib/libmpi.12.dylib; libmpi dlpath: /Users/gregorywagner/.julia/artifacts/5b62c899cf8329a8d07e8fe6eda96039010046c7/lib/libmpi.12.dylib; MPI version: 4.1.0; Library version:; MPICH Version: 4.2.3; MPICH Release date: Wed Oct 2 09:35:21 AM CDT 2024; MPICH ABI: 16:3:4; MPICH Device: ch3:nemesis; MPICH configure: --prefix=/workspace/destdir --build=x86_64-linux-musl --host=aarch64-apple-darwin20 --disable-dependency-tracking --disable-doc --enable-fast=all,O3 --enable-static=no --with-device=ch3 --with-hwloc=/workspace/destdir FFLAGS=-fallow-argument-mismatch FCFLAGS=-fallow-argument-mismatch; MPICH CC: cc -fno-common -DNDEBUG -DNVALGRIND -O3; MPICH CXX: c++ -DNDEBUG -DNVALGRIND -O3; MPICH F77: gfortran -fallow-argument-mismatch -O3; MPICH FC: gfortran -fallow-argument-mismatch -O3; MPICH features:. Enzyme with CATKEVerticalDiffusivity: Error During Test at /Users/gregorywagner/Projects/Oceananigans.jl/test/test_enzyme.jl:264; Got exception outside of a @test; MethodError: no method matching getindex(::Base.RefValue{Tuple{Base.RefValue{Float64}, Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Flat, Flat, Bounded, Float64, Float64, Float64, Nothing, Nothing, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{Nothing, Nothing, Nothing, Nothing, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Field{Center, Face, Center, Nothing, RectilinearGrid{Float64, Flat, Flat, Bounded, Float64, Float64, Float64, Nothing, Nothing, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePre",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3837#issuecomment-2400785596:1160,Test,Test,1160,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3837#issuecomment-2400785596,1,['Test'],['Test']
Testability,"s/Oceananigans.jl$ grep -ri ""incompressible model"" *; benchmark/benchmark_incompressible_model.jl: xlabel=""Nx"", ylabel=""Times (ms)"", title=""Incompressible Model Benchmarks: CPU vs GPU""); benchmark/benchmark_incompressible_model.jl: xlabel=""Nx"", ylabel=""Speedup Ratio"", title=""Incompressible Model Benchmarks: CPU/GPU""); benchmark/benchmark_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model benchmarks""); benchmark/benchmark_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Incompressible model CPU to GPU speedup""); benchmark/strong_scaling_incompressible_model.jl: @info ""Benchmarking distributed incompressible model strong scaling with $(typeof(decomposition)) decomposition [N=($Nx, $Ny, $Nz), ranks=($Rx, $Ry, $Rz)]...""; benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model strong scaling benchmark""); benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; benchmark/strong_scaling_incompressible_model_single.jl:@info ""Warming up distributed incompressible model on rank $local_rank...""; bench",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326:1088,benchmark,benchmark,1088,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326,1,['benchmark'],['benchmark']
Testability,"s/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; > [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); > @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; > [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); > @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; > [5] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; > [6] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; > [7] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [8] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; > [9] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [10] top-level scope; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; > ```; > ; > I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be.; > ; > Let me know if you want me to push the code I have with `ZDirection` and this error to the branch. I don't know what you did but note that for `tridiagonal_direction isa ZDirection`, then `work_layout = :xy`. We don't need to def",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:3635,Test,Test,3635,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399,2,['Test'],['Test']
Testability,"s://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9hZHZlY3Rpb25fc2NoZW1lcy5qbA==) | `0.00% <0.00%> (ø)` | |; | [benchmark/benchmark\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | `0.00% <0.00%> (ø)` | |; | [...ests/ConvergenceTests/DoublyPeriodicTaylorGreen.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvRG91Ymx5UGVyaW9kaWNUYXlsb3JHcmVlbi5qbA==) | `0.00% <0.00%> (ø)` | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvZWFkeV90dXJidWxlbmNlLmps) | `0.00% <0.00%> (ø)` | |; | [test/test\_coriolis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2NvcmlvbGlzLmps) | `85.33% <0.00%> (ø)` | |; | [test/test\_time\_stepping\_bcs.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmdfYmNzLmps) | `98.21% <0.00%> (ø)` | |; | [docs/bibliography.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-ZG9jcy9iaWJsaW9ncmFwaHkuamw=) | `0.00% <0.00%> (ø)` | |; | [...ergence\_tests/ConvergenceTests/ConvergenceTests.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvQ29udmVyZ2VuY2VUZXN0cy5qbA==) | `0.00% <0.00%> (ø)` | |; | ... and [95 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Pow",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1047#issuecomment-707893132:2416,test,test,2416,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1047#issuecomment-707893132,2,['test'],['test']
Testability,"setVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{Nothing, Nothing, Nothing, Nothing, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ Oceananigans.Fields /g/data/v45/nc3020/Oceananigans.jl/src/Fields/regridding_fields.jl:48; [19] macro expansion; @ /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:422 [inlined]; [20] macro expansion; @ /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/Test/src/Test.jl:1357 [inlined]; [21] macro expansion; @ /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:383 [inlined]; [22] macro expansion; @ /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/Test/src/Test.jl:1357 [inlined]; [23] top-level scope; @ /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:164; [24] include(fname::String); @ Base.MainInclude ./client.jl:476; [25] top-level scope; @ REPL[51]:1; [26] top-level scope; @ /g/data/v45/nc3020/.julia/packages/CUDA/DfvRa/src/initialization.jl:52; [27] eval; @ ./boot.jl:368 [inlined]; [28] eval_user_input(ast::Any, backend::REPL.REPLBackend); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:151; [29] repl_backend_loop(backend::REPL.REPLBackend); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:247; [30] start_repl_backend(backend::REPL.REPLBackend, consumer::Any); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:232; [31] run_repl(repl::REPL.AbstractREPL, consumer::Any; backend_on_current_task::Bool); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:369; [32] run_repl(repl::REPL.AbstractREPL, consumer::Any); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:355; ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221177574:17240,test,test,17240,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221177574,1,['test'],['test']
Testability,shall I test this?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2710#issuecomment-1224876067:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2710#issuecomment-1224876067,1,['test'],['test']
Testability,should I merge when tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1591092638:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1591092638,1,['test'],['tests']
Testability,should also take off `BenchmarkTools` that I added by mistake to `deps` in #2253? (closing #2517),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2518#issuecomment-1118126410:22,Benchmark,BenchmarkTools,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2518#issuecomment-1118126410,1,['Benchmark'],['BenchmarkTools']
Testability,should we add a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3634#issuecomment-2197399754:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3634#issuecomment-2197399754,1,['test'],['test']
Testability,should we include an interpolation test on the distributed CI?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3499#issuecomment-1981313981:35,test,test,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3499#issuecomment-1981313981,1,['test'],['test']
Testability,"simulation = Simulation(model, Δt=10.0, stop_iteration=1000); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(10)). u, v, w = model.velocities; e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). fig = Figure(resolution=(1800, 900)). axw = Axis(fig[2, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[2, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[2, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[3, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). slider = Slider(fig[1, 1:2], range=1:Nt, startvalue=1); n = slider.value. wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:balance); heatmap!(axe, x, z, en, colorrange=(0, elim), colormap=:solar); heatmap!(axb, x, z, bn, colorrange=(0, 1e-3), colormap=:thermal). t = @lift times[$n]; lines!(axE, times, Et[:]); vlines!(axE, t). display(fig). record(fig, ""test.mp4"", 1:Nt) do nn; @info ""Recording frame $nn of $Nt""; n[] = nn; end; ```. github won't let me attach the movie or image but basically at first energy decreases, then there is a lot of grid scale noise with wave dynamics. So nothing is resolved, and the energy oscillates around. Perhaps later it increases. This might need a background diffusivity?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976:2138,test,test,2138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976,1,['test'],['test']
Testability,simulation tests take forever? I'll restart them...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3580#issuecomment-2101938583:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3580#issuecomment-2101938583,1,['test'],['tests']
Testability,"sivity_fields::Nothing, auxiliary_fields::NamedTuple{(), Tuple{}}); @ Oceananigans.Models.HydrostaticFreeSurfaceModels ~/Research/OC5.jl/src/Models/HydrostaticFreeSurfaceModels/hydrostatic_free_surface_model.jl:175; [21] test_biogeochemistry!(grid::LatitudeLongitudeGrid{Float64, Periodic, Flat, Bounded, Nothing, Nothing, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, MinimalBiogeochemistryType::Type{MinimalDiscreteBiogeochemistry}, ModelType::Type{HydrostaticFreeSurfaceModel}); @ Main ~/Research/OC5.jl/test/test_biogeochemistry.jl:109; [22] macro expansion; @ ~/Research/OC5.jl/test/test_biogeochemistry.jl:139 [inlined]; [23] macro expansion; @ ~/julia-1.9/usr/share/julia/stdlib/v1.9/Test/src/Test.jl:1498 [inlined]; [24] top-level scope; @ ~/Research/OC5.jl/test/test_biogeochemistry.jl:127; [25] include(fname::String); @ Base.MainInclude ./client.jl:478; [26] top-level scope; @ REPL[2]:1; [27] eval; @ ./boot.jl:370 [inlined]; [28] eval_user_input(ast::Any, backend::REPL.REPLBackend, mod::Module); @ REPL ~/julia-1.9/usr/share/julia/stdlib/v1.9/REPL/src/REPL.jl:153; [29] repl_backend_loop(backend::REPL.REPLBackend, get_module::Function); @ REPL ~/julia-1.9/usr/share/julia/stdlib/v1.9/REPL/src/REPL.jl:249; [30] start_repl_backend(backend::REPL.REPLBackend, consumer::Any; get_module::Function); @ REPL ~/julia-1.9/usr/share/julia/stdlib/v1.9/REPL/src/REPL.jl:234; [31] run_repl(repl::REPL.AbstractREPL, consumer::Any; backend_on_current_task::Bool, backend::Any); @ REPL ~/julia-1.9/usr/share/julia/stdlib/v1.9/REPL/src/REPL.jl:379; [32] run_repl(repl::REPL.AbstractREPL, consumer::Any); @ REPL ~/julia-1.9/usr/share/julia/stdlib/v1.9/REPL/src/REPL.jl:365; [33] (::Base.var""#1017#10",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630460635:21775,Test,Test,21775,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630460635,2,['Test'],['Test']
Testability,some tests didn't make it through,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1461215465:5,test,tests,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1461215465,1,['test'],['tests']
Testability,some tests require attention :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3060#issuecomment-1504687297:5,test,tests,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3060#issuecomment-1504687297,1,['test'],['tests']
Testability,"something's going wrong here, because it looks like we do actually try to support this. Not sure if the test is broken or non-existent",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3816#issuecomment-2389795021:104,test,test,104,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3816#issuecomment-2389795021,1,['test'],['test']
Testability,"sp; | [1] ::pkgerrorString) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] (::test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1578; &nbsp; | [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] (),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:327; &nbsp; | [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:314; &nbsp; | [5] #test#61 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:67 [inlined]; &nbsp; | [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:67 [inlined]; &nbsp; | [7] test(; name::Nothing, uuid::Nothing, version::Nothing, url::Nothing, rev::Nothing, path::Nothing, mode::Pkg.Types.PackageMode, subdir::Nothing, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:80; &nbsp; | [8] test() at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:72; &nbsp; | [9] top-level scope at none:1; &nbsp; | ::test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081:3684,test,test,3684,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081,1,['test'],['test']
Testability,"st/test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl; @@ -0,0 +1,56 @@; +using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom; +using Oceananigans.TurbulenceClosures: VerticallyImplicitTimeDiscretization; +; +@testset ""Immersed boundaries with hydrostatic free surface models"" begin; + @info ""Testing immersed boundaries vertical integrals""; +; + for arch in archs; + Nx = 5; + Ny = 5; +; + # A spherical domain; + underlying_grid =; + RegularRectilinearGrid(size=(Nx, Ny, 3), extent=(Nx, Ny, 3), topology=(Periodic,Periodic,Bounded)); +; + B = [-3. for i=1:Nx, j=1:Ny ]; + B[2:Nx-1,2:Ny-1] .= [-2. for i=2:Nx-1, j=2:Ny-1 ]; + B[3:Nx-2,3:Ny-2] .= [-1. for i=3:Nx-2, j=3:Ny-2 ]; + grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(B)); +; + free_surface = ImplicitFreeSurface(gravitational_acceleration=0.1); +; + model = HydrostaticFreeSurfaceModel(grid = grid,; + architecture = arch,; + #free_surface = ExplicitFreeSurface(),; + #free_surface = ImplicitFreeSurface(maximum_iterations=10),; + free_surface = ImplicitFreeSurface(),; + momentum_advection = nothing,; + tracer_advection = WENO5(),; + coriolis = nothing,; + buoyancy = nothing,; + tracers = nothing,; + closure = nothing); +; + x_ref = [0.0 0.0 0.0 0.0 0.0 0.0 0.0; + 0.0 3.0 3.0 3.0 3.0 3.0 0.0; + 0.0 3.0 2.0 2.0 2.0 2.0 0.0; + 0.0 3.0 2.0 1.0 1.0 2.0 0.0; + 0.0 3.0 2.0 2.0 2.0 2.0 0.0; + 0.0 3.0 3.0 3.0 3.0 3.0 0.0; + 0.0 0.0 0.0 0.0 0.0 0.0 0.0]'; +; + y_ref = [0.0 0.0 0.0 0.0 0.0 0.0 0.0; + 0.0 3.0 3.0 3.0 3.0 3.0 0.0; + 0.0 3.0 2.0 2.0 2.0 3.0 0.0; + 0.0 3.0 2.0 1.0 2.0 3.0 0.0; + 0.0 3.0 2.0 1.0 2.0 3.0 0.0; + 0.0 3.0 2.0 2.0 2.0 3.0 0.0; + 0.0 0.0 0.0 0.0 0.0 0.0 0.0]'; +; + fs=model.free_surface; + xok=parent(fs.implicit_step_solver.vertically_integrated_lateral_areas.xᶠᶜᶜ.data[:,:,1])-x_ref == zeros(7,7); + yok=parent(fs.implicit_step_solver.vertically_integrated_lateral_areas.yᶜᶠᶜ.data[:,:,1])-y_ref == zeros(7,7); + @test (xok & yok); + end; +end; +; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2049#issuecomment-966735406:6486,test,test,6486,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2049#issuecomment-966735406,1,['test'],['test']
Testability,"st_dynamics.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(bathymetry)); test_dynamics.jl: # Immersed grid cases; test_dynamics.jl: immersed_vertical_grid = ImmersedBoundaryGrid(RectilinearGrid(arch,; test_dynamics.jl: ImmersedBoundaryGrid(RectilinearGrid(arch,; test_hydrostatic_free_surface_immersed_boundaries_implicit_solve.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom; test_hydrostatic_free_surface_immersed_boundaries_implicit_solve.jl:@testset ""Immersed boundaries test divergent flow solve with hydrostatic free surface models"" begin; test_hydrostatic_free_surface_immersed_boundaries_implicit_solve.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(B)); test_hydrostatic_free_surface_immersed_boundaries.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBoundary, GridFittedBottom; test_hydrostatic_free_surface_immersed_boundaries.jl:@testset ""Immersed boundaries with hydrostatic free surface models"" begin; test_hydrostatic_free_surface_immersed_boundaries.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBoundary(bump)); test_hydrostatic_free_surface_immersed_boundaries.jl: @info "" Testing surface boundary conditions with ImmersedBoundaries in HydrostaticFreeSurfaceModel [$arch_str]...""; test_hydrostatic_free_surface_immersed_boundaries.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(bathymetry)); test_hydrostatic_free_surface_immersed_boundaries.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(B)); test_multi_region_unit.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom, GridFittedBoundary; test_multi_region_unit.jl: ibg = ImmersedBoundaryGrid(grid, immersed_boundary); test_shallow_water_models.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBoundary; test_shallow_water_models.jl: @testset ""ShallowWaterModels with ImmersedBoundaryGrid"" begin; test_shallow_water_models.jl: @",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1126367199:2999,test,testset,2999,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1126367199,2,['test'],['testset']
Testability,"stol=1.49e-08, solver iterations: 0, residual: (mean=0.00e+00, abs(max)=0.00e+00); [ Info: ... simulation initialization complete (109.482 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (4.840 seconds).; iteration: 1, time: 0.1000, U_max=(1.19e-02, 5.23e-03, 5.19e-03); reltol=1.49e-08, abstol=1.49e-08, solver iterations: 4096, residual: (mean=-1.78e-03, abs(max)=1.06e-02); iteration: 2, time: 0.2000, U_max=(1.21e-02, 4.93e-03, 5.20e-03); reltol=1.49e-08, abstol=1.49e-08, solver iterations: 4096, residual: (mean=-9.30e-04, abs(max)=5.56e-03); iteration: 3, time: 0.3000, U_max=(1.25e-02, 5.02e-03, 5.32e-03); reltol=1.49e-08, abstol=1.49e-08, solver iterations: 4096, residual: (mean=-4.85e-04, abs(max)=2.74e-03); iteration: 4, time: 0.4000, U_max=(6.23e+24, 4.49e+24, 6.19e+24); reltol=1.49e-08, abstol=1.49e-08, solver iterations: 4096, residual: (mean=-2.39e+23, abs(max)=1.51e+24); iteration: 5, time: 0.5000, U_max=(5.48e+179, 4.19e+179, 9.91e+179); reltol=1.49e-08, abstol=1.49e-08, solver iterations: 0, residual: (mean=-1.70e+174, abs(max)=1.13e+181); ERROR: LoadError: time = 0.6, iteration = 6: NaN found in field u. Aborting simulation.; ```. I tried reducing the time step from 0.1 to 0.01 but now it always blows up at iteration 1. Increasing the time step kept it blowing up after ~5 iterations. ---. > You can test this by omitting the preconditioner. Running with `preconditioner = nothing` causes it to always blow up on iteration 1 no matter the time step (after 4096 iterations). ```; [ Info: Initializing simulation...; iteration: 0, time: 0.0000, U_max=(0.00e+00, 0.00e+00, 0.00e+00); reltol=1.49e-08, abstol=1.49e-08, solver iterations: 0, residual: (mean=0.00e+00, abs(max)=0.00e+00); [ Info: ... simulation initialization complete (99.042 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (1.896 seconds).; ERROR: LoadError: time = 0.1, iteration = 1: NaN found in field u. Aborting simulation.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2412573112:3774,test,test,3774,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2412573112,1,['test'],['test']
Testability,"stopping. Model iteration 20 has hit or exceeded simulation stop iteration 20.; [2023/02/21 06:38:00.743] INFO Δu: min=-3.188983e-08, max=+2.966291e-08, mean=+3.932481e-11, absmean=+1.978398e-09, std=+5.640766e-09 (16384/16384 matching grid points); [2023/02/21 06:38:00.744] INFO Δv: min=-2.539346e-09, max=+1.967717e-09, mean=+2.462280e-12, absmean=+1.480658e-10, std=+4.143014e-10 (16488/16512 matching grid points); [2023/02/21 06:38:00.744] INFO Δh: min=-4.767265e-07, max=+4.779508e-07, mean=+3.492460e-09, absmean=+2.039559e-07, std=+2.510841e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/21 06:38:01.772] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not in",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:13921,test,test,13921,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['test'],['test']
Testability,"t to make this code run. timesteppers = (:QuasiAdamsBashforth2, :RungeKutta3); y_topologies = (Periodic(), Flat()); vertical_grids = (uniform=(-1,1), stretched=[-1, -0.5, 0.0, 0.4, 0.7, 1]). lagrangian_particle_test_grid(arch, ::Periodic, z) = RectilinearGrid(arch; topology=(Periodic, Periodic, Bounded), size=(5, 5, 5), x=(-1, 1), y=(-1, 1), z); lagrangian_particle_test_grid(arch, ::Flat, z) = RectilinearGrid(arch; topology=(Periodic, Flat, Bounded), size=(5, 5), x=(-1, 1), z). for arch in archs, timestepper in timesteppers, y_topo in y_topologies, (z_grid_type, z) in pairs(vertical_grids); @info "" Testing Lagrangian particle tracking [$(typeof(arch)), $timestepper] with y $(typeof(y_topo)) on vertically $z_grid_type grid ...""; grid = lagrangian_particle_test_grid(arch, y_topo, z); # run_simple_particle_tracking_tests(arch, grid, timestepper); @show grid; end; ```. which would give us these 8 (per architecture) test cases. ```julia; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Periodic on vertically uniform grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Periodic on vertically stretched grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, max(Δz)=0.5; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Flat on vertically uniform grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo ; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232:1018,Test,Testing,1018,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232,1,['Test'],['Testing']
Testability,"t...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfully precompiled in 7 seconds (205 already precompiled); 2 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages; Testing Running tests...; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:18.729] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:19.136] INFO Running shallow water regression tests...; [2023/02/21 06:36:19.143] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/21 06:36:29.566] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:36:32.345] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:36:32.346] WARN defaulting to uniform WENO scheme w",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:11287,test,test,11287,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['test'],['test']
Testability,"t; > writers as being logically separate from the main code. As a stand alone; > package, OceananigansOutput.jl doesn't do anything useful. Something like; > TurbulenceClosures.jl could though.; >; > Keeping things in tidy submodules within a single repository increases; > code visibility, which I think is important. When I see a package or; > framework spread across multiply small packages I find it hard to get an; > idea about what it can do.; >; > Another nice thing is we currently have ""unified versioning"" so when; > releases occur we know everything works together. We don't have to worry; > about running with Oceananigans v0.x with OceananigansPlotting v0.y and; > OceananigansOutput#master to fix some issue.; >; > From a development perspective, issues and pull requests are now spread; > across multiple repositories and we can end up with pull requests that; > depend on other pull requests in other repositories, e.g. when adding in; > halo regions the main code got refactored but so did the output writers and; > plotting code would change as well. We can also end up with multiple test; > suites that need to pass, plus possibly multiple CI pipelines to manage. So; > right now it's easy to make atomic changes that touch upon multiple pieces; > of code (and we'll probably be in this stage where we need to refactor; > frequently for a while).; >; > I also don't have to git clone a bunch of repositories just to work on a; > simple example.; >; > But this is getting off-topic.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/climate-machine/Oceananigans.jl/issues/284?email_source=notifications&email_token=AA27DYA55SSJKHXQBFUSJDLP2OVODA5CNFSM4HXEYRJ2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODXXAHFI#issuecomment-502137749>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AA27DYEHNERHN4MHAGJQZH3P2OVODANCNFSM4HXEYRJQ>; > .; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/284#issuecomment-502146049:1757,test,test,1757,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/284#issuecomment-502146049,1,['test'],['test']
Testability,tArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2; [ab4f0b2a] BFloat16s v0.2.0; [6e4b80f9] BenchmarkTools v1.3.2; [d1d4a3ce] BitFlags v0.1.7; [fa961155] CEnum v0.4.2; [179af706] CFTime v0.1.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [49dc2e85] Calculus v0.5.1; [7057c7e9] Cassette v0.3.10; [d360d2e6] ChainRulesCore v1.15.0; [9e997f8a] ChangesOfVariables v0.1.3; [944b1d66] CodecZlib v0.7.1; [35d6a980] ColorSchemes v3.20.0; [3da002f7] ColorTypes v0.11.4; [c3611d14] ColorVectorSpace v0.9.10; [5ae59095] Colors v0.12.10; [34da2185] Compat v3.43.0; [a216cea6] CompoundPeriods v0.5.1; [d38c429a] Contour v0.6.2; [a2441757] Coverage v1.6.0; [c36e975a] CoverageTools v1.3.0; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [9a962f9c] DataAPI v1.10.0; [124859b0] DataDeps v0.7.10; [864edb3b] DataStructures v0.18.12; [e2d170a0] DataValueInterfaces v1.0.0; [b552c78f] DiffRules v1.11.0; [ffbed154] DocStringExtensions v0.8.6; [fa6b7ba4] DualNumbers v0.6.8; [b305315f] Elliptic v1.0.1; [e2ba6199] ExprTools v0.1.8; [c87230d0] FFMPEG v0.4.1; [7a1cc6ca] FFTW v1.4.6; [5789e2e9,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:2043,Benchmark,BenchmarkTools,2043,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['Benchmark'],['BenchmarkTools']
Testability,"t_conditional_reductions.jl: @info "" Testing Reductions on Immersed fields""; test_conditional_reductions.jl: ibg = ImmersedBoundaryGrid(grid, GridFittedBoundary((x, y, z) -> (x < 0.5))); test_dynamics.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBoundary, GridFittedBottom, mask_immersed_field!; test_dynamics.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom((x, y) -> 0)); test_dynamics.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(bathymetry)); test_dynamics.jl: # Immersed grid cases; test_dynamics.jl: immersed_vertical_grid = ImmersedBoundaryGrid(RectilinearGrid(arch,; test_dynamics.jl: ImmersedBoundaryGrid(RectilinearGrid(arch,; test_hydrostatic_free_surface_immersed_boundaries_implicit_solve.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom; test_hydrostatic_free_surface_immersed_boundaries_implicit_solve.jl:@testset ""Immersed boundaries test divergent flow solve with hydrostatic free surface models"" begin; test_hydrostatic_free_surface_immersed_boundaries_implicit_solve.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(B)); test_hydrostatic_free_surface_immersed_boundaries.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBoundary, GridFittedBottom; test_hydrostatic_free_surface_immersed_boundaries.jl:@testset ""Immersed boundaries with hydrostatic free surface models"" begin; test_hydrostatic_free_surface_immersed_boundaries.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBoundary(bump)); test_hydrostatic_free_surface_immersed_boundaries.jl: @info "" Testing surface boundary conditions with ImmersedBoundaries in HydrostaticFreeSurfaceModel [$arch_str]...""; test_hydrostatic_free_surface_immersed_boundaries.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(bathymetry)); test_hydrostatic_free_surface_immersed_boundaries.jl: grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(B)); test_multi_region_",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1126367199:2557,test,testset,2557,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1126367199,4,['test'],"['test', 'testset']"
Testability,"tcdf_output_writer.jl#L636), setting [Δt](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_netcdf_output_writer.jl#L657) to 0.01 and an average window of 3Δt produces a similar discontinuity to what was observed in https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2259395775, as shown in the figure below. The vertical lines indicate the start and end of the windows.; <img width=""584"" alt=""image"" src=""https://github.com/user-attachments/assets/6a14b489-622a-440a-a73a-4030b52b71e9"">. With this new [PR](https://github.com/CliMA/Oceananigans.jl/pull/3721/commits/a52812b00eb38e712ed20c7a6db3cf2e0c3a7877), the same test now yields a smooth solution: ; <img width=""593"" alt=""image"" src=""https://github.com/user-attachments/assets/0a436474-cd81-4378-bfbd-110eb8417b5d"">. While the discontinuity caused by rounding errors has been resolved, not all cases with different Δt pass the test, e.g., ; ```julia; for (n, t) in enumerate(single_ds[""time""][2:end]); averaging_times = [t - n*Δt for n in 0:stride:window_size-1 if t - n*Δt >= 0]; @test all(isapprox.(single_ds[""c1""][:, n+1], c̄1(averaging_times), rtol=1e-5)); end; ```; Here is an example of a case that does not pass the test:; ```julia; using Oceananigans; using Plots; using NCDatasets; using Test. arch = CPU(); topo = (Periodic, Periodic, Periodic); domain = (x=(0, 1), y=(0, 1), z=(0, 1)); grid = RectilinearGrid(arch, topology=topo, size=(4, 4, 4); domain...). λ1(x, y, z) = x + (1 - y)^2 + tanh(z); λ2(x, y, z) = x + (1 - y)^2 + tanh(4z). Fc1(x, y, z, t, c1) = - λ1(x, y, z) * c1; Fc2(x, y, z, t, c2) = - λ2(x, y, z) * c2; ; c1_forcing = Forcing(Fc1, field_dependencies=:c1); c2_forcing = Forcing(Fc2, field_dependencies=:c2). model = NonhydrostaticModel(; grid,; timestepper = :RungeKutta3,; tracers = (:c1, :c2),; forcing = (c1=c1_forcing, c2=c2_forcing)). set!(model, c1=1, c2=1). Δt = .01 #1/64 # Nice floating-point number; simulation = Simulation(model, Δt=Δt, stop_time=150Δt). ∫c1_dxdy = Field(Average(",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2378113073:1523,test,test,1523,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2378113073,1,['test'],['test']
Testability,"tdlib/v1.5/Pkg/src/API.jl:67 [inlined]; &nbsp; | [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:67 [inlined]; &nbsp; | [7] test(; name::Nothing, uuid::Nothing, version::Nothing, url::Nothing, rev::Nothing, path::Nothing, mode::Pkg.Types.PackageMode, subdir::Nothing, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:80; &nbsp; | [8] test() at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:72; &nbsp; | [9] top-level scope at none:1; &nbsp; | ::test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1578; &nbsp; | [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{ERROR: failed process: Process(`/storage7/buildkite-agent/.julia-2578/artifacts/2fcd463fb9498f362be9d1c4ef70a63c920b0e96/bin/mpiexec -np 4 /storage7/buildkite-agent/julia-1.5.4/bin/julia -O0 --color=yes -e 'using Pkg; Pkg.test()'`, ProcessExited(1)) [1]; &nbsp; | &nbsp;; &nbsp; | Stacktrace:; &nbsp; | [1] pipeline_error at ./process.jl:525 [inlined]; &nbsp; | [2] run(::Cmd; wait::Bool) at ./process.jl:440; &nbsp; | [3] run(::Cmd) at process.jl:438; &nbsp; | [4] (::var""#1#2"")(::Cmd) at none:4; &nbsp; | [5] (::MPI.var""#8#9""{var""#1#2""})(::String) at /storage7/buildkite-agent/.julia-2578/packages/MPI/b7MVG/src/environment.jl:25; &nbsp; | [6] (::MPICH_jll.var""#8#9""{MPI.var""#8#9""{var""#1#2""}})() at /storage7/buildkite-agent/.julia-2578/packages/MPICH_jll/ekpo2/src/wrappers/x86_64-linux-gnu-libgfortra",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081:4760,test,test,4760,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081,1,['test'],['test']
Testability,"ted models \| 24 24; &nbsp; | Injection of halo communication BCs \| 168 168; &nbsp; | Halo communication \| 588 12 600; &nbsp; | Time stepping IncompressibleModel \| 4 4; &nbsp; | Time stepping ShallowWaterModel \| 4 4; &nbsp; | Distributed FFT-based Poisson solver \| 2 2; &nbsp; | ERROR: ERROR: ERROR: ERROR: LoadError: LoadError: LoadError: LoadError: Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | ERROR: ERROR: ERROR: ERROR: Package Oceananigans errored during testing; &nbsp; | Stacktrace:Package Oceananigans errored during testing; &nbsp; | Stacktrace:Package Oceananigans errored during testing; &nbsp; | Stacktrace:; &nbsp; | [1] pkgerrorPackage Oceananigans errored during testing; &nbsp; | Stacktrace:; &nbsp; | [1] (pkgerror; &nbsp; | [1] (pkgerror::(; &nbsp; | [1] ::pkgerrorString) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] (::test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1578; &nbsp; | [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081:2144,test,tests,2144,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081,1,['test'],['tests']
Testability,"tepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{Nothing, Nothing, Nothing, Nothing, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ Oceananigans.Fields /g/data/v45/nc3020/Oceananigans.jl/src/Fields/regridding_fields.jl:48; [19] macro expansion; @ /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:422 [inlined]; [20] macro expansion; @ /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/Test/src/Test.jl:1357 [inlined]; [21] macro expansion; @ /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:383 [inlined]; [22] macro expansion; @ /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/Test/src/Test.jl:1357 [inlined]; [23] top-level scope; @ /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:164; [24] include(fname::String); @ Base.MainInclude ./client.jl:476; [25] top-level scope; @ REPL[51]:1; [26] top-level scope; @ /g/data/v45/nc3020/.julia/packages/CUDA/DfvRa/src/initialization.jl:52; [27] eval; @ ./boot.jl:368 [inlined]; [28] eval_user_input(ast::Any, backend::REPL.REPLBackend); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:151; [29] repl_backend_loop(backend::REPL.REPLBackend); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:247; [30] start_repl_backend(backend::REPL.REPLBackend, consumer::Any); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:232; [31] run_repl(repl::REPL.AbstractREPL, consumer::Any; backend_on_current_task::Bool); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:369; [32] run_repl(repl::REPL.AbstractREPL, consumer:",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221177574:17148,Test,Test,17148,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221177574,2,['Test'],['Test']
Testability,"ter branch (twice) and this branch (also twice), and ; actually see a tiny bit of a speedup, maybe only significant for larger CPU models though. Hard to say whether it's noise, it might be more due to other processes causing small variations in runtime. To me I don't think this PR slows down or speeds up the code, but it simplifies and improves the time stepping code so it should be merged. There's a few more memory allocations now (due to extra kernel launches) but this shouldn't affect performance. # System info. ```; Oceananigans v0.44.1; Julia Version 1.5.2; Commit 539f3ce943 (2020-09-23 23:17 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-9.0.1 (ORCJIT, cascadelake); GPU: TITAN V; ```. # Master branch; ```; Incompressible model benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ CPU │ Float32 │ 32 │ 5.399 ms │ 5.668 ms │ 5.758 ms │ 7.186 ms │ 242.42 KiB │ 1876 │; │ CPU │ Float32 │ 64 │ 36.710 ms │ 37.583 ms │ 37.974 ms │ 41.678 ms │ 242.42 KiB │ 1876 │; │ CPU │ Float32 │ 128 │ 312.780 ms │ 313.477 ms │ 313.622 ms │ 314.726 ms │ 242.42 KiB │ 1876 │; │ CPU │ Float32 │ 256 │ 2.802 s │ 2.819 s │ 2.819 s │ 2.836 s │ 242.42 KiB │ 1876 │; │ CPU │ Float64 │ 32 │ 5.828 ms │ 6.049 ms │ 6.157 ms │ 7.044 ms │ 293.44 KiB │ 1876 │; │ CPU │ Float64 │ 64 │ 43.084 ms │ 43.619 ms │ 43.650 ms │ 44.363 ms │ 293.44 KiB │ 1876 │; │ CPU │ Float64 │ 128 │ 365.051 ms │ 365.317 ms │ 365.475 ms │ 366.288 ms │ 293.44 KiB │ 1876 │; │ CPU │ Float64 │ 256 │ 3.602 s │ 3.653 s │ 3.653 s │ 3.703 s │ 293.44 KiB │ 1876 │; │ GPU │ Float32 │ 32 │ 2.797 ms │ 2.870 ms │ 2.918 ms │ 3.435 ms │ 802.70 KiB │ 11419 │; │ GPU │ Float32 │",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-736692263:912,benchmark,benchmarks,912,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-736692263,1,['benchmark'],['benchmarks']
Testability,"test pass, let's merge this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2582#issuecomment-1166384070:0,test,test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2582#issuecomment-1166384070,1,['test'],['test']
Testability,test passed; https://buildkite.com/clima/oceananigans/builds/14123; https://buildkite.com/clima/oceananigans-distributed/builds/973,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3446#issuecomment-1911576248:0,test,test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3446#issuecomment-1911576248,1,['test'],['test']
Testability,"test. ```julia; grid = RectilinearGrid(size = (1, 1, 1), extent = (1, 1, 1)); c = CenterField(grid); set!(c, 1); at_ijk(i, j, k, grid, a) = a[i, j, k]. one_c = Field(1 * c); two_c = tuple(Field(2 * c)); ten_c = (; ten_c = Field(10 * c)). one_c_op = KernelFunctionOperation{Center, Center, Center}(at_ijk, grid, one_c); two_c_op = KernelFunctionOperation{Center, Center, Center}(at_ijk, grid, two_c); ten_c_op = KernelFunctionOperation{Center, Center, Center}(at_ijk, grid, ten_c). one_c_field = Field(one_c_op); two_c_field = Field(two_c_op); ten_c_field = Field(ten_c_op). compute!(one_c_field); compute!(two_c_field); compute!(ten_c_field). @test all(interior(one_c) .== 1); @test all(interior(two_c) .== 2); @test all(interior(ten_c) .== 10); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3455#issuecomment-1930089096:0,test,test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3455#issuecomment-1930089096,4,['test'],['test']
Testability,"th gravity tilted at 45 degrees; >; > [image: tilted_gravity_plume]; > <https://user-images.githubusercontent.com/20099589/100940093-5ab5d600-34c5-11eb-918e-f574f284f024.gif>; >; > This is an experimental feature since it needs more rigorous testing and; > because full support for tilted gravity may require more work, e.g.; >; > 1. Should AMD use z_dot_g_b now?; > 2. Should ∂x_b return a vector or should it be split up into x_dot_∂x_b,; > etc.? The Leith closure uses ∂x_b.; > 3. We may want to clean up and refactor the implementation, taking; > some suggestions from #1151; > <https://github.com/CliMA/Oceananigans.jl/issues/1151>.; >; > cc @tomchor <https://github.com/tomchor>; >; > Resolves #1151 <https://github.com/CliMA/Oceananigans.jl/issues/1151>; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/CliMA/Oceananigans.jl/pull/1242; > Commit Summary; >; > - Make room for tuple gravity; > - Some `{x,y,z}_dot_g_b`; > - Tilted gravity plume sandbox; >; > File Changes; >; > - *A* sandbox/tilted_gravity_plume.jl; > <https://github.com/CliMA/Oceananigans.jl/pull/1242/files#diff-9f5abd06fd694cf6f0d35019ea409e07e100a801fbfcd9a2a8d3737801a341b0>; > (53); > - *M* src/Buoyancy/Buoyancy.jl; > <https://github.com/CliMA/Oceananigans.jl/pull/1242/files#diff-55d14f16043b022b6a286fd9881d334208e6b6251d122555d3ede4014ea59e55>; > (10); > - *A* src/Buoyancy/gravitational_acceleration.jl; > <https://github.com/CliMA/Oceananigans.jl/pull/1242/files#diff-bb73385a8b574af8f9b259bd480acf1bdd913e8969bb440833342c0fba3f1150>; > (7); > - *M* src/Buoyancy/linear_equation_of_state.jl; > <https://github.com/CliMA/Oceananigans.jl/pull/1242/files#diff-f3c384915af5bdd55a7a9cb929dee20fcca1682630706def515ed65b5a3cb490>; > (42); > - *M* src/Buoyancy/seawater_buoyancy.jl; > <https://github.com/CliMA/Oceananigans.jl/pull/1242/files#diff-17b154b6d4fa0d986ee4ef99715cced4bc7eac3c93690c52239d83745090c334>; > (56); > - *M* src/Models/Incom",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-737549819:1604,sandbox,sandbox,1604,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-737549819,2,['sandbox'],['sandbox']
Testability,"th the `ScaleInvSmag`. I'm also plotting the value of the Smagorinsky constant from the dynamic model. For similar conditions (3D homogeneous tubrulence), Lilly assumed a sharp spectral filter in the inertial subrange, matched the SGS dissipation rate to the TKE dissipation rate and obtained the theoretical value of the Smag constant of $c_s$ ≈ 0.165. I think these assumptions should be roughly valid in this validation script, and indeed the value that we obtain for $c_s$ is kinda close:. https://github.com/user-attachments/assets/f210d18b-82bf-4e9e-bb26-58bbd4251820. Although to be honest I expected the value to be closer. That said, I believe Lilly also assumed a _stationary_ turbulent flow (although I'd have to double check that), which is not the case here and may be affecting the coefficient value. Btw, I had posted a similar video before but I made some modifications to the model since then. I also reproduced the first test simulation in the original Bou-Zeid (2005) paper: namely a channel flow forced by a pressure gradient, with a Monin-Obukhov-compliant bottom drag. I couldn't reproduce the simulation perfectly (for example, they use a pseudo-spectral scheme in the horizontal directions, force their drag with a horizontal average, and modify the `SmagLilly` constant slightly) so the results are a bit different from what's in their paper, but I think that's okay. Let me know if anyone thinks otherwise. Importantly, the `ScaleInvSmag` shows an improvement over the `SmagLilly`, with the later being expectedly overly diffusive and pretty much killing any turbulence at this resolution:. https://github.com/user-attachments/assets/6440450d-52f4-43ef-9ad5-0f8fcd9993d5. For reference, this is what similar plots from the paper look like (the equivalent for us here would be SMAG and PASI):. ![image](https://github.com/user-attachments/assets/5607d340-d4b4-4405-a0a6-67ed43bfd274). Some quick notes:. - Many tests are failing become I made an ad-hoc modification for now w",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2417879667:1149,test,test,1149,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2417879667,2,['test'],['test']
Testability,"thank you for replying, here is the output from the environment that I run the code in:. ```; julia> Pkg.status(); Status `~/.julia/environments/oc/Project.toml`; [6e4b80f9] BenchmarkTools v1.3.2; [336ed68f] CSV v0.10.11; ⌅ [052768ef] CUDA v4.3.2; [13f3f980] CairoMakie v0.10.6; [8f4d0f93] Conda v1.9.0; [f68482b8] Cthulhu v2.9.1; [d58978e5] Dagger v0.17.0; [a93c6f00] DataFrames v1.5.0; ⌃ [2b5f629d] DiffEqBase v6.125.1; [0c46a032] DifferentialEquations v7.8.0; ⌃ [31c24e10] Distributions v0.25.96; [587475ba] Flux v0.13.17; ⌃ [cd3eb016] HTTP v1.9.6; [0f8b85d8] JSON3 v1.13.1; [63c18a36] KernelAbstractions v0.9.6; [da04e1cc] MPI v0.20.11; [eff96d63] Measurements v2.9.0; [9e8cae18] Oceananigans v0.84.0 `~/Oceananigans.jl`; [1dea7af3] OrdinaryDiffEq v6.53.2; [98572fba] Parquet2 v0.2.17; [91a5bcdd] Plots v1.38.16; ⌃ [438e738f] PyCall v1.95.2; [3646fa90] ScikitLearn v0.7.0; ⌃ [9e226e20] SpeedyWeather v0.2.1; [90137ffa] StaticArrays v1.5.26; Info Packages marked with ⌃ and ⌅ have new versions available, but those with ⌅ are restricted by compatibility constraints from upgrading. To see why use `status --outdated`. ```. I'm able to set breakpoints and debug the code for all of the other Julia code that I run - I'm also able to run the quick start example when I run the julia script. I only get the error I shared above while setting breakpoints for the quick start example. I have installed Oceananigans in editable/dev mode - the debugger does refer to the installed package - I get the same error even when I install Oceananigans via `Pkg.add()`. thank you for helping me!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1616804799:174,Benchmark,BenchmarkTools,174,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1616804799,1,['Benchmark'],['BenchmarkTools']
Testability,"thank you so much for sharing that @glwagner . after making the change you suggested, I'm getting the exact same error. please let me know if there's any other change I could test - thank you again",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1622227332:175,test,test,175,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1622227332,1,['test'],['test']
Testability,thanks @glwagner . Maybe we could plan to meet for an hour this week and give this a try? It would be great for `ShallowWaterModel` and could also be helpful for testing the immersed boundary methods in a simpler model. Happy to disucss on slack as you like.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1458#issuecomment-798606318:162,test,testing,162,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1458#issuecomment-798606318,2,['test'],['testing']
Testability,"thanks for testing, both problems should be solved",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1303948893:11,test,testing,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1303948893,1,['test'],['testing']
Testability,"that looks very weird! But it is structured in some sense, it looks like the initial condition has some inbalances that generate noise which gets cleaned up by numerical diffusion. Interesting also that buoyancy extrema are continuously increasing in magnitude. If this is not happening with z-directed gravity, it might really be that there is some bug/incorrectness in the buoyancy model. A way to test this would be to recreate the same setup with z-directed gravity and use an immersed boundary to represent the tilt. If that case behaves as expected we know where to focus.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517138575:400,test,test,400,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517138575,1,['test'],['test']
Testability,that test is explicitly not testing the points near the boundary. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/test/test_computed_field.jl#L67-L68,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557205538:5,test,test,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557205538,3,['test'],"['test', 'testing']"
Testability,the /tmp directory in sverdrup (the server on which we run the tests) is full. We have to clean it up first then we can rerun the tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1582705245:63,test,tests,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1582705245,2,['test'],['tests']
Testability,the current regriding tests fail... is this alarming?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2881#issuecomment-1441761614:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2881#issuecomment-1441761614,1,['test'],['tests']
Testability,the matrix solver tests seem ok ;); https://buildkite.com/clima/oceananigans/builds/8008#0181cb59-5724-4983-8405-c00440044a02,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2640#issuecomment-1174587288:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2640#issuecomment-1174587288,1,['test'],['tests']
Testability,"the offender is this line ; https://github.com/CliMA/Oceananigans.jl/blob/17e6fc045a32fcbd685737878ccf9638197c7b50/src/ImmersedBoundaries/grid_fitted_bottom.jl#L75. `MultiRegionGrid` is created by wrapping around an `ImmersedBoundaryGrid` where the letter are constructed with `construct_regionally(construct_grid, args...)`; https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L83; https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L110. `fill_halo_regions!` cannot be called within a regional `@apply_regionally` call, so we probably have to shift around the construction when there is an ImmersedBoundaryGrid. (I wonder how this test is passing on main). I see two solutions here:; 1) change the constructor of `MultiRegionGrid` to make sure that fill_halo is called outside, aka partition the immersed_boundary outside the `construct_regionally`, fill_halo and then build the immersed grid with an offsetarray (simple but probably worst long term); 2) Make `ImmersedBoundaryGrid` wrap around `MultiRegionGrid`(slightly more complex, maybe for another PR, but probably useful for the cubed sphere grid?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603029063:778,test,test,778,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603029063,2,['test'],['test']
Testability,"the stacktrace is. ```Julia; Biogeochemistry: Error During Test at /Users/navid/Research/OC5.jl/test/test_biogeochemistry.jl:126; Got exception outside of a @test; BoundsError: attempt to access 1-element StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64} at index [2]; Stacktrace:; [1] throw_boundserror(A::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, I::Tuple{Int64}); @ Base ./abstractarray.jl:744; [2] checkbounds; @ ./abstractarray.jl:709 [inlined]; [3] getindex; @ ./range.jl:940 [inlined]; [4] Azᶜᶜᵃ; @ ~/Research/OC5.jl/src/Operators/spacings_and_areas_and_volumes.jl:209 [inlined]; [5] Azᶜᶜᶠ; @ ~/Research/OC5.jl/src/Operators/spacings_and_areas_and_volumes.jl:192 [inlined]; [6] macro expansion; @ ~/Research/OC5.jl/src/Models/HydrostaticFreeSurfaceModels/matrix_implicit_free_surface_solver.jl:135 [inlined]; [7] cpu__compute_coefficients!; @ ~/.julia/packages/KernelAbstractions/lhhMo/src/macros.jl:276 [inlined]; [8] cpu__compute_coefficients!(__ctx__::KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(5, 1)}, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{2}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(5, 1)}, Nothing, Nothing}}, diag::Array{Float64, 3}, Ax::Array{Float64, 3}, Ay::Array{Float64, 3}, ∫Ax::Field{Face, Center, Nothing, Nothing, LatitudeLongitudeGrid{Float64, Periodic, Flat, Bounded, Nothing, Nothing, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBou",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630460635:59,Test,Test,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630460635,3,"['Test', 'test']","['Test', 'test']"
Testability,"the tests are run single-threaded, right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308176999:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308176999,1,['test'],['tests']
Testability,the tests don't even pass locally... even with the warning -> info... even if I convert them to examples; at this point I am worn out... perhaps I'll return to it later in the week. we might register v0.80.0 and whenever this merges we bump up another version? @glwagner?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1475113508:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1475113508,1,['test'],['tests']
Testability,the tests were not passing here,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2919#issuecomment-1427136406:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2919#issuecomment-1427136406,1,['test'],['tests']
Testability,there are other places that this can change -- just wanna see if all tests are OK first,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3467#issuecomment-1934848060:69,test,tests,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3467#issuecomment-1934848060,1,['test'],['tests']
Testability,"they seem to be finishing (~ 3hrs maybe). We should definitely separate the docs testing for when the PR is ready to merge, 3 hrs is a very long time for little returns",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482092225:81,test,testing,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482092225,1,['test'],['testing']
Testability,"this is that `HydrostaticFreeSurfaceModel` is _concretely typed_, which means that functions of `model` can be optimized based on the types of _every_ property of `HydrostaticFreeSurfaceModel`. This gives us performance advantages / reduces overhead, but also creates some limitations like: we have to define a `closure` before building model. Here's a simple example:. ```julia; julia> mutable struct Test{T}; a :: T; end. julia> t = Test(1.0); Test{Float64}(1.0). julia> t.a = 2.0; 2.0. julia> t.a = ""hi""; ERROR: MethodError: Cannot `convert` an object of type String to an object of type Float64; Closest candidates are:; convert(::Type{T}, ::T) where T<:Number at number.jl:6; convert(::Type{T}, ::Number) where T<:Number at number.jl:7; convert(::Type{T}, ::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250; ...; Stacktrace:; [1] setproperty!(x::Test{Float64}, f::Symbol, v::String); @ Base ./Base.jl:34; [2] top-level scope; @ REPL[6]:1; ```. Here, `t` is `Test{Float64}`. We can change `a` as long as the new value can be converted to `Float64` via `convert(Float64, new_value)`. Otherwise we can't and we just have to write `s = Test(""hi"")` instead. Another possible solution is to build a ""dummy"" closure with the correct type, and then replace it with the ""real"" closure after constructing model by writing `model.closure = real_closure`. It could be fun to try that and see if the code is simpler. I suspect it might not be but it's worth a shot (you might learn something). . > Thinking on a more general way, it would be awesome to give a general function that could depend on any field in the model, including auxiliary. I am thinking that this way it would be easier for users to create and implement their own parameterizations. I guess that's sort of what we're doing here. The main issue is reducing boilerplate / making this as easy as possible. It'd be nice to write parameterizations with more abstract syntax rather than having to write a low-level kernel function.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1066113513:2361,Test,Test,2361,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1066113513,1,['Test'],['Test']
Testability,"this was the innovation that Alistair had when he was sorting out the; numerics of the cubed sphere out. One needs the vorticity at the corner. He; expressed it as a circulation integral snaking across three surfaces of the; cube, rather than differencing. I'm in full support. On Sun, Apr 30, 2023 at 11:25 AM Gregory L. Wagner ***@***.***>; wrote:. > Does it make sense to try to reconstruct vorticity in the same way? Ie; > have we tried reconstructing the circulation:; >; >; > https://github.com/CliMA/Oceananigans.jl/blob/98bcdde7ae679583ea88474ec0909469abccfc90/src/Operators/vorticity_operators.jl#L9; >; > and then computing vorticity by dividing by Azᶠᶜᶜ and Azᶜᶠᶜ?; >; > It makes a lot of sense to me that δx(Δy * u) + δy(Δx * v) is smoother; > than δx(Δy * u) + δy(Δx * v) / Azᶜᶜᶜ when the grid is strongly stretched.; >; > Maybe we should come up with test cases that have even more extreme; > stretching? It will be very very nice to have good properties on stretched; > grids for the cubed sphere.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529053452>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AKXUEQRBF7RYUYWS3KH4NGDXDZ75XANCNFSM6AAAAAAXQNM76E>; > .; > You are receiving this because you are subscribed to this thread.Message; > ID: ***@***.***>; >. -- ; ==========================================; Professor John Marshall; Earth, Atmospheric and Planetary Sciences, MIT; http://oceans.mit.edu/JohnMarshall/; ==========================================",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529054646:865,test,test,865,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529054646,1,['test'],['test']
Testability,this. https://github.com/CliMA/Oceananigans.jl/blob/44db08162be84920aee5c53f7534486ae649afc0/Project.toml#L66; implies that users *need* to have 1.8... but we can relax that compat requirement and keep the note in the docs that Oceananigans is tested on 1.8. what do you think?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1281153566:244,test,tested,244,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1281153566,1,['test'],['tested']
Testability,"tion equation for height is computed here using essentailly a second-order finite difference method. This is fine for a start, but as discussed elsehwere, it would be better to use finite volume and therefore using the advection schemes that already exist. https://github.com/CliMA/Oceananigans.jl/blob/fjp/update-convergence-tests/src/Models/ShallowWaterModels/solution_and_tracer_tendencies.jl#L71. In line 69 above you will see that I tried doing this by definig a new operator, div_UV, for partial_x U + partial_y V. This was clunky because I needed to pass variables U and V, and I had an error. The details can be found here,. https://github.com/CliMA/Oceananigans.jl/blob/9402a90af072a495ef130d540661be9327a51552/src/Models/ShallowWaterModels/shallow_water_advection_operators.jl#L24. Can you suggest a better way of doing this?. When I try running the tests most of the pass except at line 82 I get the following error . ```; [2021/01/11 15:36:04.735] INFO Testing time-stepping ShallowWaterModels [GPU(), (Periodic, Periodic, Bounded)]...; ERROR: a exception was thrown during kernel execution.; Run Julia on debug level 2 for device stack traces.; Time-stepping ShallowWaterModels [GPU(), (Periodic, Periodic, Bounded)]: Error During Test at /home/fpoulin/software/Oceananigans.jl/test/test_shallow_water_models.jl:82; Test threw exception; Expression: time_stepping_shallow_water_model_works(arch, topo, nothing); KernelException: exception thrown during kernel execution on device Quadro P400; Stacktrace:; [1] check_exceptions() at /home/fpoulin/.julia/packages/CUDA/YeS8q/src/compiler/exceptions.jl:94; [2] prepare_cuda_call() at /home/fpoulin/.julia/packages/CUDA/YeS8q/src/state.jl:85; [3] initialize_api() at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/error.jl:92; [4] macro expansion at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/libcuda.jl:975 [inlined]; [5] macro expansion at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/error.jl:102 [inlined]; [6] cu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-758077952:1033,Test,Testing,1033,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-758077952,1,['Test'],['Testing']
Testability,"tion, parent::String); @ Base.Filesystem ./file.jl:762; [20] mktempdir; @ ./file.jl:762 [inlined]; [21] sandbox(fn::Function, ctx::Pkg.Types.Context, target::Pkg.Types.PackageSpec, target_path::String, sandbox_path::String, sandbox_project_override::Pkg.Types.Project; preferences::Dict{String, Any}, force_latest_compatible_version::Bool, allow_earlier_backwards_compatible_versions::Bool, allow_reresolve::Bool); @ Pkg.Operations /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1752; [22] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing, force_latest_compatible_version::Bool, allow_earlier_backwards_compatible_versions::Bool, allow_reresolve::Bool); @ Pkg.Operations /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1955; [23] test; @ /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1899 [inlined]; [24] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, force_latest_compatible_version::Bool, allow_earlier_backwards_compatible_versions::Bool, allow_reresolve::Bool, kwargs::@Kwargs{io::Base.TTY}); @ Pkg.API /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:444; [25] test(pkgs::Vector{Pkg.Types.PackageSpec}; io::Base.TTY, kwargs::@Kwargs{}); @ Pkg.API /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:159; [26] test(pkgs::Vector{Pkg.Types.PackageSpec}); @ Pkg.API /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:148; [27] test(; name::Nothing, uuid::Nothing, version::Nothing, url::Nothing, rev::Nothing, path::Nothing, mode::Pkg.Types.PackageMode, subdir::Nothing, kwargs::@Kwargs{}); @ Pkg.API /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:174; [28] test(); @ Pkg.API /storage5/buildkite-",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1988500458:6866,test,test,6866,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1988500458,1,['test'],['test']
Testability,"tion::CenteredSecondOrder, tracer_advection::WENO5{Float64, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, buoyancy::Nothing, coriolis::Nothing, free_surface::ImplicitFreeSurface{Nothing, Float64, Nothing, Nothing, Symbol, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, forcing::NamedTuple{(), Tuple{}}, closure::Nothing, boundary_conditions::NamedTuple{(), Tuple{}}, tracers::Nothing, particles::Nothing, velocities::Nothing, pressure::Nothing, diffusivity_fields::Nothing, auxiliary_fields::NamedTuple{(), Tuple{}});   | @ Oceananigans.Models.HydrostaticFreeSurfaceModels ~/builds/tartarus-1/clima/oceananigans/src/Models/HydrostaticFreeSurfaceModels/hydrostatic_free_surface_model.jl:113;   | [2] macro expansion;   | @ ~/builds/tartarus-1/clima/oceananigans/test/test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl:41 [inlined];   | [3] macro expansion;   | @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined];   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/test/test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl:9;   | [5] include(fname::String);   | @ Base.MainInclude ./client.jl:444;   | [6] macro expansion;   | @ ~/builds/tartarus-1/clima/oceananigans/test/runtests.jl:65 [inlined];   | [7] macro expansion;   | @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined];   | [8] macro expansion;   | @ ~/builds/tartarus-1/clima/oceananigans/test/runtests.jl:58 [inlined];   | [9] macro expansion;   | @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined];   | [10] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/test/runtests.jl:4;   | [11] include(fname::String);   | @ Base.MainInclude ./client.jl:444;   | [12] top-level scope;   | @ none:6;   | [13] eval;   | @ ./boot.jl:360 [inlined];   | [14] exec_options(opts::Base.JLO",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1001728185:2206,Test,Test,2206,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1001728185,2,['Test'],['Test']
Testability,"tiveFormulation(); regenerate_data = false); [2023/02/15 08:09:30.057] INFO Initializing simulation...; [2023/02/15 08:09:30.137] INFO ... simulation initialization complete (79.862 ms); [2023/02/15 08:09:30.137] INFO Executing initial time step...; [2023/02/15 08:09:49.128] INFO ... initial time step complete (18.991 seconds).; [2023/02/15 08:09:49.218] INFO Simulation is stopping after running for 19.159 seconds.; [2023/02/15 08:09:49.218] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/15 08:09:49.338] INFO Δu: min=-2.979433e-08, max=+2.978377e-08, mean=-1.025389e-10, absmean=+1.911258e-09, std=+5.570608e-09 (16384/16384 matching grid points); [2023/02/15 08:09:49.338] INFO Δv: min=-2.709283e-11, max=+2.834728e-11, mean=-2.606411e-14, absmean=+1.007855e-12, std=+2.676083e-12 (16512/16512 matching grid points); [2023/02/15 08:09:49.339] INFO Δh: min=-4.765317e-07, max=+4.756881e-07, mean=+1.373701e-08, absmean=+2.044855e-07, std=+2.513230e-07 (16384/16384 matching grid points); Test Passed. julia> run_shallow_water_regression(arch, formulation; regenerate_data = false)VectorInvariantFormulation()^C. julia> run_shallow_water_regression(arch, VectorInvariantFormulation(); regenerate_data = false); [2023/02/15 08:10:46.432] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /g/data/v45/nc3020/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; [2023/02/15 08:10:46.449] INFO Initializing simulation...; [2023/02/15 08:10:46.450] INFO ... simulation initialization complete (580.963 μs); [2023/02/15 08:10:46.450] INFO Executing initial time step...; [2023/02/15 08:10:46.453] INFO ... initial time step complete (3.038 ms).; [2023/02/15 08:10:46.490] INFO Simulation is stopping after running for 39.012 ms.; [2023/02/15 08:10:46.490] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/15 08:10:46.492] INFO Δu: min=-2.91040",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430385749:1098,Test,Test,1098,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430385749,1,['Test'],['Test']
Testability,to anyone: when tests pass merge!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2313#issuecomment-1060065095:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2313#issuecomment-1060065095,1,['test'],['tests']
Testability,to test the code you can merge #3395 in this PR,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3396#issuecomment-1837246301:3,test,test,3,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3396#issuecomment-1837246301,1,['test'],['test']
Testability,"to two parts, so that we can build a tridiagonal solver even when all three directions are regular. That could be useful for testing, for example.; > ; > I have added this capability by passing the `stretched_direction` kwarg.; > ; > > Also note that in terms of operation count the tridiagonal solve is cheaper than FFT...; > ; > I think, all things considered, the mixed FFT / tridiagonal solve will have basically the same computational cost as the pure FFT solve only for a stretched x direction. The additional transposes required for a y or stretched z direction will completely dominate the cost of the actual operations.; > ; > As an example, this is a slab decomposition with a fairly big grid (512 x 256^2) split on 2 GPUs on Tartarus ![311333172-43dba752-a91f-4b33-8ade-5a6ec57c982b](https://private-user-images.githubusercontent.com/33547697/356260457-1a376c1e-9912-4e00-8dca-91deb46338f8.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjMyMjUwMzMsIm5iZiI6MTcyMzIyNDczMywicGF0aCI6Ii8zMzU0NzY5Ny8zNTYyNjA0NTctMWEzNzZjMWUtOTkxMi00ZTAwLThkY2EtOTFkZWI0NjMzOGY4LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA4MDklMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwODA5VDE3MzIxM1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPThhMGNhZDRiOTllYzFjOWFlNGZkMzAwYzI2NDVjY2Y3MzhmYzY5YmU0YzJjOTBlMzI2YzdmNTg4ODNlMGRmMTgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.6MqQHl0lgCvD7e15b8kOkTduQBQlvSRwfyHAPQuxAps) The AlltoAllv is the dominant cost, while the FFT (in between the two transposes) is quite irrelevant. In the near future, I'll perform scaling tests on Perlmutter, which has a much better network, so it might be that (even if I think it's unlikely) the cost is not all communication after all. Just to clarify --- the mixed tridiagonal + FFT solver also needs eigenvalues, doesn't it?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2278419522:3128,test,tests,3128,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2278419522,1,['test'],['tests']
Testability,"tput writers you need; > ; > ```julia; > u_subsampled = XFaceField(subset_grid); > ; > function subsample_u(model); > u = model.velocities.u; > interpolate!(u_subsampled, u); > return u_subsampled; > end; > ; > outputs = (; u=subsample_u); > ```. I tried. ```julia; subset_grid = RectilinearGrid(arch,; size = (grid.Nx, grid.Ny, div(grid.Nz, 20)),; extent = (grid.Lx, grid.Ly, grid.Lz); ). u_subsampled = XFaceField(subset_grid); v_subsampled = YFaceField(subset_grid); w_subsampled = ZFaceField(subset_grid). function subsample_u(model); u = model.velocities.u; interpolate!(u_subsampled, u); return u_subsampled; end. function subsample_v(model); v = model.velocities.v; interpolate!(v_subsampled, v); return v_subsampled; end. function subsample_w(model); w = model.velocities.w; interpolate!(w_subsampled, w); return w_subsampled; end. subset_outputs = (; u = subsample_u, v = subsample_v, w = subsample_w); ```. and. ```julia; simulation.output_writers[:xyz] = NetCDFOutputWriter(model, subset_outputs,; schedule = TimeInterval(300),; filename = ""test.nc"",; with_halos = false,; array_type = Array{Float32},; ); ```. is returning the following error. ```julia; Custom output v needs dimensions!. Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] define_output_variable!(dataset::NCDatasets.NCDataset{Nothing}, output::Function, name::String, array_type::Type, deflatelevel::Int64, output_attributes::Dict{String, String}, dimensions::Dict{Any, Any}); @ Oceananigans.OutputWriters ~/.julia/packages/Oceananigans/3LHMs/src/OutputWriters/netcdf_output_writer.jl:448; [3] NetCDFOutputWriter(model::NonhydrostaticModel{Oceananigans.TimeSteppers.RungeKutta3TimeStepper{Float64, NamedTuple{(:u, :v, :w, :b), Tuple{Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2032573594:1093,test,test,1093,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2032573594,1,['test'],['test']
Testability,"tring) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] (),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:327; &nbsp; | [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:314; &nbsp; | [5] #test#61 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:67 [inlined]; &nbsp; | [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:67 [inlined]; &nbsp; | [7] test(; name::Nothing, uuid::Nothing, version::Nothing, url::Nothing, rev::Nothing, path::Nothing, mode::Pkg.Types.PackageMode, subdir::Nothing, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:80; &nbsp; | [8] test() at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:72; &nbsp; | [9] top-level scope at none:1; &nbsp; | ::test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1578; &nbsp; | [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{ERROR: failed process: Process(`/storage7/buildkite-agent/.julia-2578/artifacts/2fcd463fb9498f362be9d1c4ef70a63c920b0e96/bin/mpiexec -np 4 /storage7/buildkite-agent/julia-1.5.4/bin/julia -O0 --color=yes -e 'using Pkg; Pkg.test()'`, ProcessExited(1)) [1]; &nbsp; | &nbsp;; &nbsp; | Stacktrace:; &nbsp; | [1] pipeline_error at ./proce",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081:4254,test,test,4254,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081,1,['test'],['test']
Testability,"tructuring:. * Break-out ""quick"" unit-tests to be run by github actions under a single configuration (ex: linux, julia 1.6) and be able to run them in parallel. We have a ""Team"" account donated by Github so we can have tons of concurrent GitHub actions so this is beneficial if you can take advantage (might be limited by compilation costs). These tests will be run for every PR push and fast fail on error.; * `bors try` trigger a more expensive CI job to be submitted to the cluster, allowing for GPU / MPI tests. The logic here is that if the cpu tests are not working then the GPU tests almost certainly won't so you can get away with executing them less often. We have a daemon running on the cluster that synchronizes the jobs from buildkite with the local slurm controller, so every step in the buildkite config is submitted as a separate slurm job and canceling buildkite jobs kills them with slum. What is nice about that setup is you can tailor the resources used for each buildkite step just as you would slurm (ex. ""gres:1"" for 1 gpu). You can run jobs on multiple ranks, multiple GPU's, different resource limits, timeouts, etc. basically anything you can pass through to as a cli argument to a slurm batch job is supported. Also it's running on a cluster so obviously your job parallelism is very good.; * `bors r+` trigger merging the PR into `main` branch. This serializes the commits to `main` (and roll-up concurrent PR's to be submitted) so that all merge commits will pass the tests. This is an opportunity to also maybe run more expensive tests (it's easy in buildkite to conditionally run steps if running on `staging` branch) because you'll probably only run the staging CI step one or at most a few times at the very end,. the general strategy is to tier the tests so that they get progressively more expensive and to maximize ci-parallelism to reduce the overall time. @glwagner can control who on the project can submit bors jobs by editing the bors access control settings.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-906541778:1643,test,tests,1643,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-906541778,3,['test'],['tests']
Testability,"ts - . I assume what @hennyg888 is running is based on this https://github.com/christophernhill/onan-jcon2021-bits/blob/main/run/satori/run-on-bench-on-rhel7-satori-with-mpi ? . There are quite a few things to double (triple) check. 1. **are you running on multiple GPUs?** ; There is some obscure foo for that here ( https://github.com/christophernhill/ImplicitGlobalGrid.jl/blob/5e4fd0698b7087467d9314bfa253d6bc9a09a40a/diffusion3D_multigpu_CuArrays_novis.jl#L21 ) that is not in Oceananigans or ImplicitGlobal as downloaded. Its not really particularly documented anywhere either (except in a blog post for this https://github.com/NVIDIA-developer-blog/code-samples/blob/master/posts/cuda-aware-mpi-example/src/CUDA_Aware_MPI.c as far as I can tell)! Without this bit you may end up running all ranks on the same GPU. The blog post here https://developer.nvidia.com/blog/benchmarking-cuda-aware-mpi/ gives a bit of background. . 2. **is there anything else running on the node when you test?** ; When I looked earlier in the week satori had become annoyingly busy. You need to request an exclusive node - and then wait unfortunately because of every else using. If you skip asking for exclusive you may end up sharing node - which is OK for getting work done, but confusing for benchmarking. . 3. **as @vchuravy mentions you may or may not be using messaging that goes direct GPU to GPU?** ; There is an issue with recent CUDA.jl that makes that hard (possibly not even possible). We are working to resolve that. @vchuravy has a suggested fix, but I found that caused other problems. The ImplicitGlobal team found @vchuravy fix to work, but with a very recent version of CUDA.jl where I think it isn't supposed to work - so they may have been mistaken. I was planning to look at this a bit more after having coffee with a Nvidia colleague who is involved in all this tomorrow. . The ImplciitGlobalGris stuff should get reasonable behavior with the `selectDevices()` addition - but I think Oceananig",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885334231:1033,test,test,1033,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885334231,1,['test'],['test']
Testability,ts 3427 1778 -1649 ; + Misses 1354 698 -656 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [...ts/one\_dimensional\_gaussian\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9nYXVzc2lhbl9hZHZlY3Rpb25fZGlmZnVzaW9uLmps) | | |; | [test/test\_coriolis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2NvcmlvbGlzLmps) | | |; | [examples/internal\_wave.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvaW50ZXJuYWxfd2F2ZS5qbA==) | | |; | [test/test\_verification.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ZlcmlmaWNhdGlvbi5qbA==) | | |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | | |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | | |; | [test/test\_models.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X21vZGVscy5qbA==) | | |; | [examples/netcdf\_ouput\_example.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvbmV0Y2RmX291cHV0X2V4YW1wbGUuamw=) | | |; | [...sts/ocean\_large\_eddy\_simulation\_regression\_test.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC9yZWdyZXNzaW9uX3Rlc3RzL29jZWFuX2xhcmdlX2VkZHlfc2ltdWxhdGlvbl9yZWdyZXNzaW9uX3Rlc3Quamw=) | | |; | [test/test\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZpZWxkcy5qbA==) | | |; | ... and [49 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree-more) | |. ------. [Continue to re,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/795#issuecomment-657824854:1867,test,test,1867,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/795#issuecomment-657824854,2,['test'],['test']
Testability,"ts...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initialization complete (685.283 μs); [2023/02/25 15:42:21.129] INFO Executing initial time step...; [2023/02/25 15:42:23.148] INFO ... initial time step complete (2.019 seconds).; [2023/02/25 15:42:23.672] INFO Simulation is stopping after running for 2.521 seconds.; [2023/02/25 15:42:23.672] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/25 15:42:23.814] INFO Δu: min=-1.673332e-04, max=+1.094476e-04, mean=+2.507827e-07, absmean=+5.538768e-06, std=+1.574960e-05 (16384/16384 matching grid points); [2023/02/25 15:42:23.814] INFO Δv: min=-2.878156e-04, max=+1.230686e-04, mean=+1.406671e-07, absmean=+2.141572e-05, std=+4.550342e-05 (256/16512 matching grid points); [2023/02/25 15:42:23.814] INFO Δh: min=-1.126421e-03, max=+1.182485e-03, mean=+9.255018e-09, absmean=+7.901569e-05, std=+2.067916e-04 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]: Test Failed at /home/fpoulin/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/Software/julia-1.8.2/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::CPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Test Summary: | Fail Total Time; Shallow Water Regression | 1 1 3.5s; Shallow Water Bickley jet simulation [CPU, ConservativeFormulation] | 1 1 3.5s; ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.; in expression starting at /home/fpoulin/Software/Oceananigans.jl/test/test_shallow_water_regression.jl:6; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:2926,Test,Test,2926,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446,8,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"ue to a finite time step. It's important to recognize that the dynamics of the _discrete_ linear equations are different than the continuous. When we have a smooth solution, such that our spatial discretization should approximate some exact smooth solution, we can test that refining the grid and time step leads to convergence to an exact solution. Moreover, we can estimate the time-scale of the dynamics using the time-scales of the smooth dynamics as a guide. An example is a resolved buoyancy oscillation: it has a timescale of roughly 1/N. This example is dominated by small amplitude (eg linear) noise at the grid scale. Therefore my initial time scale estimate of 1/N may not hold. Instead, we'd have to look at the discrete eigenvalues of the system at the very higheset wavenumbers (ie the Nyquist number 2pi / dx). We could then calculate the time-step that would be required to resolve these (completely unphysical) dynamics. I'm not sure what a lower bound on such spurious discrete dynamics might be. It could be far smaller than any physical time scale, ie as small as 1e-16, or smaller? Perhaps the evolution of grid scale noise also has to do with spatial resolution, so that could be another knob to vary. So if we want to investigate this further, we should conduct a systematic study of the dynamics of this grid-scale noise system affected by buoyancy, decreasing the time-step to zero. Or we can convince ourselves that non-noisy dynamics _are_ accurate --- eg by analyzing a system like the one we use for our ""internal wave"" dynamics test:. https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_internal_wave_dynamics.jl. that test verifies that a wave packet in our code propagates at the correct group speed, for example. But one could dive much deeper into that example and test a wide variety of wave numbers. It depends whether you are interested in the grid-scale noise system, or whether you are interested in verifying that smooth resolved dynamics are correct.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423:1787,test,test,1787,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423,8,['test'],['test']
Testability,"uggest leaving a caution statement on the simulation tips page. But I agree it has to be less strongly worded...; > ; > I'll try to provide a MWE that reproduces the behavior, but I'm currently having trouble getting my hands on some GPU, so I'm not sure how fast I can do that. Ok, no rush!. Trig functions aren't generically slower on GPUs than CPUs. On CPUs I think our code is fairly non-optimal right now, so various sources of overhead (eg non-optimal threading) can ""hide"" slow operations on the CPU. On the GPU we are more efficient, so overall speed might depend more sensitively on user code when it's injected. (I'd also argue that the beginning of this section is a bit misleading in how it claims we ""try to optimize"" internal source code. In fact, we have performed almost no performance optimization, and this is an important topic for future work.). I found this reference for the cost of various floating point operations on the CPU:. https://latkin.org/blog/2014/11/09/a-simple-benchmark-of-various-math-operations/. We could reproduce this chart on a GPU with CUDA.jl if we want to provide some useful information to users. I think if we're talking about a _constant_ (the current case), then precomputation hardly harms code complexity (both examples are equally readable to me). Precomputing an _array_ is another story (for example, a forcing function or boundary condition that depends on `sin(x)`). This lesson is definitely not restricted to trigonometric functions or the GPU. The basic principle here is that _there is a trade-off_ between precomputing a potentially expensive operation, and performing it on-the-fly. For constants, precomputation is harmless. For arrays, on-the-fly computation has significant benefits, both for code readability and also possibly for performance (in memory-bound computations). Enlightening users on 1) the existence of this trade-off and 2) how to use benchmarking to find the optimal solution for their problem would probably be useful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2029#issuecomment-952107151:1507,benchmark,benchmark-of-various-math-operations,1507,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2029#issuecomment-952107151,2,['benchmark'],['benchmark-of-various-math-operations']
Testability,"uildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1705; [17] (::Pkg.Operations.var""#115#120""{Dict{String, Any}, Bool, Bool, Bool, Pkg.Operations.var""#130#134""{Bool, Cmd, Cmd, Nothing, Pkg.Types.Context, Vector{Tuple{String, Base.Process}}, String, Pkg.Types.PackageSpec}, Pkg.Types.Context, Pkg.Types.PackageSpec, String, Pkg.Types.Project, String})(tmp::String); @ Pkg.Operations /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1794; [18] mktempdir(fn::Pkg.Operations.var""#115#120""{Dict{String, Any}, Bool, Bool, Bool, Pkg.Operations.var""#130#134""{Bool, Cmd, Cmd, Nothing, Pkg.Types.Context, Vector{Tuple{String, Base.Process}}, String, Pkg.Types.PackageSpec}, Pkg.Types.Context, Pkg.Types.PackageSpec, String, Pkg.Types.Project, String}, parent::String; prefix::String); @ Base.Filesystem ./file.jl:766; [19] mktempdir(fn::Function, parent::String); @ Base.Filesystem ./file.jl:762; [20] mktempdir; @ ./file.jl:762 [inlined]; [21] sandbox(fn::Function, ctx::Pkg.Types.Context, target::Pkg.Types.PackageSpec, target_path::String, sandbox_path::String, sandbox_project_override::Pkg.Types.Project; preferences::Dict{String, Any}, force_latest_compatible_version::Bool, allow_earlier_backwards_compatible_versions::Bool, allow_reresolve::Bool); @ Pkg.Operations /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1752; [22] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing, force_latest_compatible_version::Bool, allow_earlier_backwards_compatible_versions::Bool, allow_reresolve::Bool); @ Pkg.Operations /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1955; [23] test; @ /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1899 [inlined]; [24] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, jul",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1988500458:5965,sandbox,sandbox,5965,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1988500458,1,['sandbox'],['sandbox']
Testability,"umentation. ---; Attempt 1:; ```julia; @inline function Fu(grid, U, Φ, i, j, k); if k == 1; return -2*0.1/grid.Δz^2 * (U.u[i, j, 1] - 0); elseif k == grid.Nz; return -2*0.1/grid.Δz^2 * (U.u[i, j, grid.Nz] - 0); else; return 0; end; end. @inline FT(grid, U, Φ, i, j, k) = ifelse(k == 1, -1e-4 * (Φ.T[i, j, 1] - 0), 0); ```; ```; ──────────────────────────────────────────────────────────────────────────────────────────────────; Forcing function benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 59.9s / 0.41% 7.38GiB / 0.36% . Section ncalls time %tot avg alloc %tot avg; ──────────────────────────────────────────────────────────────────────────────────────────────────; 128×128×128 with forcing (GPU, Float64) 10 166ms 68.2% 16.6ms 13.8MiB 51.2% 1.38MiB; 128×128×128 no forcing (GPU, Float64) 10 77.4ms 31.8% 7.74ms 13.1MiB 48.8% 1.31MiB; ──────────────────────────────────────────────────────────────────────────────────────────────────; ```; ---; Attempt 2:; ```julia. @inline function Fu(grid, U, Φ, i, j, k); if k == 1; return @inbounds -2*0.1/grid.Δz^2 * (U.u[i, j, 1] - 0); elseif k == grid.Nz; return @inbounds -2*0.1/grid.Δz^2 * (U.u[i, j, grid.Nz] - 0); else; return 0; end; end. @inline FT(grid, U, Φ, i, j, k) = @inbounds ifelse(k == 1, -1e-4 * (Φ.T[i, j, 1] - 0), 0); ```; ```; ──────────────────────────────────────────────────────────────────────────────────────────────────; Forcing function benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 60.3s / 0.32% 7.38GiB / 0.36% . Section ncalls time %tot avg alloc %tot avg; ──────────────────────────────────────────────────────────────────────────────────────────────────; 128×128×128 with forcing (GPU, Float64) 10 109ms 57.2% 10.9ms 13.8MiB 51.2% 1.38MiB; 128×128×128 no forcing (GPU, Float64) 10 81.6ms 42.8% 8.16ms 13.1MiB 48.8% 1.31MiB; ──────────────────────────────────────────────────────────────────────────────────────────────────; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/365#issuecomment-525326208:2418,benchmark,benchmarks,2418,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/365#issuecomment-525326208,1,['benchmark'],['benchmarks']
Testability,"up Ratio"", title=""Incompressible Model Benchmarks: CPU/GPU""); benchmark/benchmark_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model benchmarks""); benchmark/benchmark_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Incompressible model CPU to GPU speedup""); benchmark/strong_scaling_incompressible_model.jl: @info ""Benchmarking distributed incompressible model strong scaling with $(typeof(decomposition)) decomposition [N=($Nx, $Ny, $Nz), ranks=($Rx, $Ry, $Rz)]...""; benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model strong scaling benchmark""); benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; benchmark/strong_scaling_incompressible_model_single.jl:@info ""Warming up distributed incompressible model on rank $local_rank...""; benchmark/strong_scaling_incompressible_model_single.jl:@info ""Benchmarking distributed incompressible model on rank $local_rank...""; docs/src/physics/incompressible_model.md:# Incompressible model; docs/src/numerical_implementation/time_stepping.md:where, e.g., ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326:1274,test,test,1274,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882146326,1,['test'],['test']
Testability,"ure out a clean way of integrating `fill_horizontal_velocity_halos!` with the existing time-stepping. Perhaps we just need a `maybe_fill_horizontal_velocity_halos!` function that only does something on a connected cubed sphere. 4. We need values for the grid coordinates `λᶜᶠᵃ`, `λᶠᶜᵃ`, `φᶜᶠᵃ`, and `φᶠᶜᵃ` so that we can use `set!` for velocities on the cubed sphere. They are not provided by the file but we should be able to convert the available coordinates back to the cubed sphere face in (ξ, η) coordinates where -1 ≤ ξ, η ≤ 1 which forms a regular grid then interpolate in between and back to the sphere to get the other staggered grid coordinates. 5. We need to use the sine and cosine of the local angle between the grid orientation (e.g., u-velocity) and zonal west-east direction at the grid-cell centers to `set!` velocity fields. Right now we're limited to setting velocity fields from a streamfunction... 6. Should we be filling the halos of the grid metrics? Seems like they should be filled like velocity halos but without any sign changes. 7. Make sure that calling `fill_halo_regions!` on a horizontal velocity field only fills the halos with non-`CubedSphereExchange` boundary conditions. 8. Add the cubed sphere passive tracer advection and surface gravity waves validation experiments to validation CI pipeline. 9. Figure out a way to abstract and clean up `fill_horizontal_velocity_halos!` and `fill_*_halo!`... 10. Merge utils from `src/CubedSpheres/cubed_sphere_utils.jl` and `src/Distributed/distributed_utils.jl` into `Oceananigans.Grids`. 11. Figure out if the tests in `test_cubed_sphere_halo_exchange.jl` can be abstracted and run for all six faces. It's tedious to have to type them out but could be clearer and easier to debug in its current form... 12. Fix tests!. 13. I think cubed sphere performance can be improved, especially for halo filling. We might need some benchmarks and profiling to figure out where cubed sphere simulations are allocating too much memory.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1522#issuecomment-816631979:1968,test,tests,1968,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1522#issuecomment-816631979,6,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,"uspect.; 3. Note: these forms of viscosity are not strictly positive preserving and they can increase kinetic energy. I know of a form of the harmonic case that is positive preserving and we could include that. But does anyone case about those levels of details? If yes I can include the form in the writeup and even a short derivation of how to get it from the 3D equations.; 4. @glwagner pointed out that `ShallowWaterModel` is very separate from everything else in Oceananigans and that is a bit of a pain to maintain. One advantage of a `VectorInvariant` form is that it could rely heavily on `HydrostaticModel`, that way they grow together. It might even ben an embarassingly simply application.; 5. I would like there to be a switch from free-surface to rigid-lid. In the latter we have to solve an elliptic problem, and again probably easier with a `VectorInvariant` form but probably not difficult with a conservative form either. How do people suggest this would work?; 6. I would like to have both `VectorInvariant` and `Conservative` forms. Each has their advantages and if you wanted to know if your results were robust, you could try both and if they give you the same result then you would have confidence in your results. But maybe people would think this is too much effort to maintain?. As for the utility of the shallow water model, I would like to get some students using it in Oceananigans to study oceanographic problems, and if we wanted to include coastlines I think we could do this using the `VectorInvariant` form but not the `Conservative` form. I don't expect this will be of huge demand, but it is also be useful for pedagogical reasons, for students learning about GFD and oceanography. I also think it's a nice way to test advection schemes as with the free-surface version we don't have to solve for the pressure, so it's simpler. I am of course very interested as to what others think about these issues as well. Maybe this should move to an issue instead of this PR?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064259381:3908,test,test,3908,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064259381,2,['test'],['test']
Testability,"ut creating a model behind it...):. ```julia; using Oceananigans; using Oceananigans.Utils; using Oceananigans.Fields. # Get simulation parameters; f0 = 1e-4; dudy = -1.25e-4; dudz = -4e-3; dbdz = 1e-5. #++++ GRID; topology = (Periodic, Bounded, Bounded); grid = RegularCartesianGrid(size=(1, 4, 4), extent=(1000, 1000, 200),; topology=topology). # Define our model!; u_g(x, y, z, t) = dudy * y + dudz * z; b_g(x, y, z, t) = dbdz * z; model = IncompressibleModel(architecture = CPU(),; grid = grid,; tracers = (:b,),; buoyancy = BuoyancyTracer(),; background_fields = (u=u_g, b=b_g,),; ). # START DIAGNOSTICS; import Oceananigans.Fields: ComputedField; using Oceananigans.AbstractOperations: @at, ∂x, ∂y, ∂z. u, v, w = model.velocities; b = model.tracers.b. U = model.background_fields.velocities.u; B = model.background_fields.tracers.b. u_tot = ComputedField(u + U); b_tot = ComputedField(b + B). # Get correct constant values; Ri_true = dbdz / dudz^2. # Abstract operations tests; Ri_abs = ComputedField(∂z(b_tot) / ∂z(u_tot)^2) # More complex. dbdz_abs = ComputedField(∂z(b_tot)) # Simple; dudz_abs = ComputedField(∂z(u_tot)) # Simple; Ri_abs2 = ComputedField(dbdz_abs/ dudz^2) # Try Ri again with but using other ComputedFields; ; compute!(Ri_abs); compute!(Ri_abs2); ```. In the code above `Ri_abs2` gets calculated correctly, but `Ri_abs` does not:. ```julia; julia> Ri_true; 0.6250000000000001. julia> interior(Ri_abs2); 1×4×5 view(OffsetArray(::Array{Float64,3}, 0:2, 0:5, 0:6), 1:1, 1:4, 1:5) with eltype Float64:; [:, :, 1] =; -2.1875 -2.1875 -2.1875 -2.1875. [:, :, 2] =; 0.625 0.625 0.625 0.625. [:, :, 3] =; 0.625 0.625 0.625 0.625. [:, :, 4] =; 0.625 0.625 0.625 0.625. [:, :, 5] =; 0.3125 0.3125 0.3125 0.3125. julia> interior(Ri_abs); 1×4×5 view(OffsetArray(::Array{Float64,3}, 0:2, 0:5, 0:6), 1:1, 1:4, 1:5) with eltype Float64:; [:, :, 1] =; -0.373637 -0.410247 -0.452514 -0.501666. [:, :, 2] =; 1.25 1.25 1.25 1.25. [:, :, 3] =; 1.25 1.25 1.25 1.25. [:, :, 4] =; 1.25 1.25 1.25 1.2",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1323#issuecomment-773439445:1497,test,tests,1497,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1323#issuecomment-773439445,1,['test'],['tests']
Testability,v.io/gh/CliMA/Oceananigans.jl/commit/162159d9ebc5b6b8a9accf84a598f4bfb43c1a37&el=desc) will **increase** coverage by `0.12%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #795 +/- ##; ==========================================; + Coverage 71.67% 71.80% +0.12% ; ==========================================; Files 184 124 -60 ; Lines 4781 2476 -2305 ; ==========================================; - Hits 3427 1778 -1649 ; + Misses 1354 698 -656 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [...ts/one\_dimensional\_gaussian\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9nYXVzc2lhbl9hZHZlY3Rpb25fZGlmZnVzaW9uLmps) | | |; | [test/test\_coriolis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2NvcmlvbGlzLmps) | | |; | [examples/internal\_wave.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvaW50ZXJuYWxfd2F2ZS5qbA==) | | |; | [test/test\_verification.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ZlcmlmaWNhdGlvbi5qbA==) | | |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | | |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | | |; | [test/test\_models.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X21vZGVscy5qbA==) | | |; | [examples/netcdf\_ouput\_example.jl](ht,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/795#issuecomment-657824854:1268,test,test,1268,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/795#issuecomment-657824854,2,['test'],['test']
Testability,"vant PR if there is a long list of PRs within a particular release, only one of which is important. (Note this information can also be obtained via `git blame` on `Project.toml`.). One concern I have is that we struggle to enforce conventions already, like style conventions in source code, branch naming conventions, etc. For example, issues should be labeled --- this issue itself needs a label!. What do we think about working on making PR titles more descriptive and helpful, rather than copying information that I think should be in PRs into release notes? It's nice to encourage people to look at PRs too; we can have conversations there (unlike release notes). As far as breaking changes go, by definition they should be encapsulated in a single PR so I think this will succeed. Another policy change that could help is to require two approving reviews (rather than just one), and to also informally try to be more strict about approving PRs. > Users can have an idea if their code will break with updating, which might prompt them to update more often; (I think in practice lots of users don't update their code regularly since there's a looming possibility of their code to stop running and them having to deal with errors.). Isn't trying an update and running some code / some kind of test the fastest and most effective way to deciding whether to update some package? . > If their code will break, users will have an idea as to what they should change in order to fix it (as opposed to running it and fixing the code error-by-error). I'm not sure this is feasible. To use `git blame` to find the PR, navigate to `Project.toml` and toggle the `Blame` key at the top left of the file:. <img width=""784"" alt=""image"" src=""https://github.com/CliMA/Oceananigans.jl/assets/15271942/2a5bbaa9-d6d2-4cda-8020-82ed2dbef46a"">. In this case the breaking change is supposedly on #2912. I started a discussion here: https://github.com/CliMA/Oceananigans.jl/commit/4ff41ab95c1313715e91863a9b3bc2dc8ab1d458",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3147#issuecomment-1595628085:1919,test,test,1919,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3147#issuecomment-1595628085,1,['test'],['test']
Testability,"vbGlzLmps) | | |; | [examples/internal\_wave.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvaW50ZXJuYWxfd2F2ZS5qbA==) | | |; | [test/test\_verification.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ZlcmlmaWNhdGlvbi5qbA==) | | |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | | |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | | |; | [test/test\_models.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X21vZGVscy5qbA==) | | |; | [examples/netcdf\_ouput\_example.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvbmV0Y2RmX291cHV0X2V4YW1wbGUuamw=) | | |; | [...sts/ocean\_large\_eddy\_simulation\_regression\_test.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC9yZWdyZXNzaW9uX3Rlc3RzL29jZWFuX2xhcmdlX2VkZHlfc2ltdWxhdGlvbl9yZWdyZXNzaW9uX3Rlc3Quamw=) | | |; | [test/test\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZpZWxkcy5qbA==) | | |; | ... and [49 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795?src=pr&el=footer). Last update [162159d...17a22a9](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/795#issuecomment-657824854:2576,test,test,2576,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/795#issuecomment-657824854,2,['test'],['test']
Testability,"veraged), which indicates that the issue doesn't necessarily have to do with `KernelComputedField`s. https://user-images.githubusercontent.com/13205162/112888062-c03b5d00-9088-11eb-9d70-82ecda21477b.mp4. https://user-images.githubusercontent.com/13205162/112888067-c3364d80-9088-11eb-8eb4-4c5174f45b62.mp4. Here are some line plots comparing dissipation calculated with both `ComputedFields` (cf) and `KernelComputedFields` (kcf) and output with both `TimeInterval` and `AveragedTimeInterval`. (Sorry for the colors being weird, but I wanna be able to see the overlaps.). ![Screenshot from 2021-03-29 12-23-18](https://user-images.githubusercontent.com/13205162/112888734-959dd400-9089-11eb-8423-44dfa0df94ff.png). As you can see the time-averaged results are consistent with each other, but not with the snapshot results. However, if I plot TKE I get somewhat different results:. ![Screenshot from 2021-03-29 12-22-55](https://user-images.githubusercontent.com/13205162/112888917-cbdb5380-9089-11eb-82c7-2de997138b1b.png). Here the snapshot results are consistent with each other, but the time-averaged TKE results computed with `ComputedFields` actually match the snapshots, but not the time-averaged TKE results computed with `KernelComputedFields`!. There's also a difference between the u-velocity using time-averaged results and snapshots:. ![Screenshot from 2021-03-29 12-32-23](https://user-images.githubusercontent.com/13205162/112889703-d8ac7700-908a-11eb-8e03-a5c3b6a70f02.png). I think this last plot provides us with a clue since the averages start at the right value, but the oscillations get dampened as time progresses. This may indicate that the average is being done with a window much bigger than the averaging period for some reason. Although this last one is hard to believe since, as @ali-ramadhan pointed out, there are many tests for `AveragedTimeInterval` and I feel like they'd have caught that. In any case, that's all I got for now! Some feedback is very much appreciated.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-809655170:2821,test,tests,2821,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-809655170,2,['test'],['tests']
Testability,"ving here for future reference):. * The ""Benchmarks"" module in `/benchmarks/src` causes a few issues like:; ```julia; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for Benchmarks are suppressed.; ```; It'd be nice to fix that eventually. * The output is kind of annoying:. ```julia; [2022/03/13 13:17:49.875] INFO Benchmarking weak scaling nonhydrostatic model with Slab decomposition [N=(128, 128, 32), ranks=(1, 2, 1)]...; Invalid MIT-MAGIC-COOKIE-1 keyInvalid MIT-MAGIC-COOKIE-1 keyNo protocol specified; [ Info: Oceananigans will use 24 threads; [ Info: Oceananigans will use 24 threads; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for Benchmarks are suppressed.; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for Benchmarks are suppressed.; [ Info: Oceananigans will use 24 threads; [ Info: Oceananigans will use 24 threads; ```; We don't need to be told `N` times how many threads Oceananigans is ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2338#issuecomment-1066145590:1162,Benchmark,Benchmarks,1162,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2338#issuecomment-1066145590,2,['Benchmark'],['Benchmarks']
Testability,wWaterModel benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬──────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼──────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 702.250 μs │ 750.875 μs │ 800.300 μs │ 1.115 ms │ 846.23 KiB │ 1475 │ 10 │; │ CPU │ Float64 │ 64 │ 1.085 ms │ 1.128 ms │ 1.140 ms │ 1.313 ms │ 846.23 KiB │ 1475 │ 10 │; │ CPU │ Float64 │ 128 │ 2.628 ms │ 2.718 ms │ 2.725 ms │ 2.901 ms │ 846.23 KiB │ 1475 │ 10 │; │ CPU │ Float64 │ 256 │ 8.693 ms │ 8.740 ms │ 8.766 ms │ 9.044 ms │ 846.23 KiB │ 1475 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴──────────┴────────────┴────────┴─────────┘; ```; #### this PR; ```; NonhydrostaticModel benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 2.910 ms │ 2.939 ms │ 2.978 ms │ 3.237 ms │ 531.84 KiB │ 1061 │ 10 │; │ CPU │ Float64 │ 64 │ 20.486 ms │ 20.627 ms │ 20.772 ms │ 22.253 ms │ 531.84 KiB │ 1061 │ 10 │; │ CPU │ Float64 │ 128 │ 194.118 ms │ 194.567 ms │ 194.744 ms │ 196.546 ms │ 531.84 KiB │ 1061 │ 10 │; │ CPU │ Float64 │ 256 │ 2.632 s │ 2.659 s │ 2.659 s │ 2.686 s │ 531.84 KiB │ 1061 │ 2 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┴─────────┘; HydrostaticFreeSurfaceModel benchmarks; ┌───────────────┬─────────────┬─────┬───────────┬───────────┬───────────┬───────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116031428:2775,benchmark,benchmarks,2775,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116031428,1,['benchmark'],['benchmarks']
Testability,"we can take out that function, we just have to test multiGPU and that part should have already been taken care of in KernelAbstraction.jl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2676#issuecomment-1192880737:47,test,test,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2676#issuecomment-1192880737,1,['test'],['test']
Testability,"weird that all the tests fail, when I run e.g. `RectilinearGrid(CPU(), FT, size=(16, 16, 16), extent=(1, 1, 1))` locally it works fine",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3288#issuecomment-1740676312:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3288#issuecomment-1740676312,1,['test'],['tests']
Testability,"wn: |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | | |; | [test/test\_coriolis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2NvcmlvbGlzLmps) | | |; | [examples/internal\_wave.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvaW50ZXJuYWxfd2F2ZS5qbA==) | | |; | [examples/ocean\_wind\_mixing\_and\_convection.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb2NlYW5fd2luZF9taXhpbmdfYW5kX2NvbnZlY3Rpb24uamw=) | | |; | [...erification/lid\_driven\_cavity/lid\_driven\_cavity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2xpZF9kcml2ZW5fY2F2aXR5L2xpZF9kcml2ZW5fY2F2aXR5Lmps) | | |; | [test/test\_surface\_waves.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3N1cmZhY2Vfd2F2ZXMuamw=) | | |; | [test/test\_examples.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2V4YW1wbGVzLmps) | | |; | [...regression\_tests/thermal\_bubble\_regression\_test.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC9yZWdyZXNzaW9uX3Rlc3RzL3RoZXJtYWxfYnViYmxlX3JlZ3Jlc3Npb25fdGVzdC5qbA==) | | |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | | |; | ... and [58 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1017#issuecomment-701768991:2235,test,test,2235,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1017#issuecomment-701768991,2,['test'],['test']
Testability,works on satori; works on my M1 MacBook Pro... I'll merge when tests pass,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2847#issuecomment-1345375567:63,test,tests,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2847#issuecomment-1345375567,1,['test'],['tests']
Testability,"x in xs for y in ys). rtol = 1e-5 # need custom rtol for isapprox because roundoff errors accumulate (?). # Compute time averages...; c̄1(ts) = 1/length(ts) * sum(c̄1.(zs, t) for t in ts); c̄2(ts) = 1/length(ts) * sum(c̄2.(zs, t) for t in ts). #####; ##### Test strided windowed time average against analytic solution; ##### for *single* NetCDF output; #####; single_time_average_nc_filepath = ""single_decay_windowed_time_average_test.nc""; single_ds = NCDataset(single_time_average_nc_filepath). attribute_names = (""schedule"", ""interval"", ""output time interval"",; ""time_averaging_window"", ""time averaging window"",; ""time_averaging_stride"", ""time averaging stride""). for name in attribute_names; @test haskey(single_ds.attrib, name) && !isnothing(single_ds.attrib[name]); end. window_size = window_nΔt; window = window_size*Δt. time = single_ds[""time""][:]; data_plot = single_ds[""c1""][1:4, :]; c̄1_timeaverage = zeros(4,length(time[1:end])); for (n, t) in enumerate(time[1:end]); averaging_times = [t - n*Δt for n in 0:stride:window_size-1 if t - n*Δt >= 0]; # @info n,t,averaging_times, c̄1(averaging_times); c̄1_timeaverage[:,n] = c̄1(averaging_times); # @test all(isapprox.(single_ds[""c1""][:, n+1], c̄1(averaging_times), rtol=rtol)); end. # Plot each of the four lines; pl = plot(); plot!(time, data_plot[1, :], label=""1"", color=:blue, legend=:topright); plot!(time, data_plot[2, :], label=""2"", color=:red); plot!(time, data_plot[3, :], label=""3"", color=:orange); plot!(time, data_plot[4, :], label=""4"", color=:green). plot!(time[1:end],c̄1_timeaverage[1,:], color=:black, linestyle=:dash, label=""1-analytic""); plot!(time[1:end],c̄1_timeaverage[2,:], color=:black, linestyle=:dash, label=""2-analytic""); plot!(time[1:end],c̄1_timeaverage[3,:], color=:black, linestyle=:dash, label=""3-analytic""); plot!(time[1:end],c̄1_timeaverage[4,:], color=:black, linestyle=:dash, label=""4-analytic""); ; tt = 0:window:T2; for i in 1:length(tt); plot!([tt[i], tt[i]],[0,1],color=:grey,label=""""); end; title!(pl, str",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2380652629:6184,test,test,6184,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2380652629,2,['test'],['test']
Testability,"x|η|: 2.08e+00 m; ```. But when they're put back, it still blows up (even with coefficients 1e-9):. ```julia; julia> include(""idealized_one_degree_simulation.jl""); grid = ImmersedBoundaryGrid on:; architecture: CPU(); grid: 360×150×48 LatitudeLongitudeGrid{Float64, Periodic, Bounded, Bounded} on CPU with 4×4×4 halo and with precomputed metrics; with immersed: GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}}; ┌ Warning: WENO on a curvilinear stretched coordinate is not validated, use at your own risk!!; └ @ Oceananigans.Advection ~/Projects/dev/Oceananigans.jl/src/Advection/weno_fifth_order.jl:160; [ Info: Initializing simulation...; ┌ Info: Iteration: 0, time: 0 seconds, wall time: 256.442 ms; │ ├── max(u): (0.00e+00, 0.00e+00, 0.00e+00) m s⁻¹; │ ├── extrema(T): (0.31, 30.00) ᵒC; └ └── max|η|: 0.00e+00 m; [ Info: ... simulation initialization complete (317.156 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (1.252 seconds).; ┌ Info: Iteration: 1, time: 20 minutes, wall time: 1.258 seconds; │ ├── max(u): (7.36e-02, 5.18e-02, 7.93e-04) m s⁻¹; │ ├── extrema(T): (0.31, 30.00) ᵒC; └ └── max|η|: 3.73e-01 m; ┌ Info: Iteration: 2, time: 40 minutes, wall time: 1.003 seconds; │ ├── max(u): (2.83e-01, 1.13e-01, 1.65e-03) m s⁻¹; │ ├── extrema(T): (-6.76, 50.82) ᵒC; └ └── max|η|: 8.05e-01 m; [ Info: Simulation is stopping. Model iteration 3 has hit or exceeded simulation stop iteration 3.; ┌ Info: Iteration: 3, time: 1 hour, wall time: 993.451 ms; │ ├── max(u): (6.23e-01, 2.08e-01, 2.96e-03) m s⁻¹; │ ├── extrema(T): (-4.27, 50.74) ᵒC; └ └── max|η|: 1.22e+00 m; ```. so there is almost certainly a bug with how `IsopycnalSkewSymmetricDiffusivity` is implemented. @navidcy @sandreza . Now I know we have tested the diffusivity a fair amount in `y, z` domains, but have we tested `x, z`? I don't think we've ever tried 3D either. We should probably put GM in a double gyre and see what happens (with and without immersed boundaries).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107311807:3483,test,tested,3483,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107311807,2,['test'],['tested']
Testability,"y); # return false; end. ImmersedBoundaryGrid(; underlying_grid,; GridFittedBoundary(is_ib); ); end. # pressure solver; pressure_solver = ImmersedPoissonSolver(; ib_grid,; preconditioner = :FFT,; solver_method = :PreconditionedConjugateGradient,; reltol = 0,; abstol = 0,; maxiter = 20,; ). # ---------------------------------------------------------------------- #; # test the solver. rhs = Field((Center, Center, Center), ib_grid); output = Field((Center, Center, Center), ib_grid). set!(output, 0.0). output[1, 1, 1] = 1.0 # use a random field as the solution. pressure_solver.pcg_solver.linear_operation!(rhs, output). rhs ./= norm(rhs). set!(output, 0.0). solve!(output, pressure_solver.pcg_solver, rhs). # ---------------------------------------------------------------------- #; # calculate the eigenvalues. const c0 = 0.1; const do_gauge_fixing = true; const active_cells = active_cells_map(ib_grid, ib_grid.immersed_boundary). const n_active_cells = length(active_cells). if do_gauge_fixing; @assert c0 > 0; end. function apply_linear_operation!(w, v, solver); solver.pcg_solver.linear_operation!(w, v); if do_gauge_fixing; w .-= c0 * mean(v); end; end. function apply_preconditioner!(w, v, solver); precondition!(w, solver.pcg_solver.preconditioner, v); mask_immersed_field!(w); if do_gauge_fixing; w .-= inv(c0) * mean(v); end; end. function get_matrix(f!, ib_grid, pressure_solver). # define fields; rhs = Field((Center, Center, Center), ib_grid); p = Field((Center, Center, Center), ib_grid). # use a matrix to represent the preconditioner. matrix = zeros((n_active_cells, n_active_cells)). for i in 1:n_active_cells; rhs .= 0.; rhs.data[active_cells[i]...] = 1.0; f!(p, rhs, pressure_solver); for j in 1:n_active_cells; v = p.data[active_cells[j]...]; matrix[i, j] = v; end; end; return -Symmetric(matrix); end. const A = get_matrix(apply_linear_operation!, ib_grid, pressure_solver); const M⁻¹ = get_matrix(apply_preconditioner!, ib_grid, pressure_solver). C = cholesky(M⁻¹). A1 = Symme",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3848#issuecomment-2420373611:3141,assert,assert,3141,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3848#issuecomment-2420373611,1,['assert'],['assert']
Testability,yeah in `test/test_distributed_models.jl`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3314#issuecomment-1749687259:9,test,test,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3314#issuecomment-1749687259,1,['test'],['test']
Testability,"yeah, but on a flat bottom, there are no continents. I would like to see continents that interact with the height in the shallow water model but leave out the immersed boundary that crashes the simulation. This test is required to see if we need to focus only on the immersed boundary, or there are other problems in this simulation that have to do with the dynamics of a non-flat bottom",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-2073299047:211,test,test,211,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-2073299047,1,['test'],['test']
Testability,"yeah, it helped me getting it working on julia 1.6 on my computer but tests which use julia 1.6 passed already when I merged https://github.com/CliMA/Oceananigans.jl/pull/2335. So maybe I would wait a bit before merging this. I ll assess a little bit more the problem.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2362#issuecomment-1069821739:70,test,tests,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2362#issuecomment-1069821739,1,['test'],['tests']
Testability,yons v4.1.1; [7445602f] CubedSphere v0.2.0; [124859b0] DataDeps v0.7.10; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2; [ab4f0b2a] BFloat16s v0.2.0; [6e4b80f9] BenchmarkTools v1.3.2; [d1d4a3ce] BitFlags v0.1.7; [fa961155] CEnum v0.4.2; [179af706] CFTime v0.1.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [49dc2e85] Calculus v0.5.1; [7057c7e9] Cassette v0.3.10; [d360d2e6] ChainRulesCore v1.15.0; [9e997f8a] ChangesOfVariables v0.1.3; [944b1d66] CodecZlib v0.7.1; [35d6a980] ColorSchemes v3.20.0; [3da002f7] ColorTypes v0.11.4; [c3611d14] ColorVectorSpace v0.9.10; [5ae59095] Colors v0.12.10; [34da2185] Compat v3.43.0; [a216cea6] CompoundPeriods v0.5.1; [d38c429a] Contour v0.6.2; [a2441757] Coverage v1.6.0; [c36e975a] Coverag,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:1562,Log,Logging,1562,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,4,"['Log', 'Test']","['Logging', 'Test']"
Testability,"you mean like this?. ```; ERROR: LoadError: AssertionError: false; Stacktrace:; [1] calling_conv_fixup(builder::LLVM.IRBuilder, val::LLVM.AddrSpaceCastInst, tape::LLVM.PointerType, prev::LLVM.UndefValue, lidxs::Vector{UInt32}, ridxs::Vector{UInt32}); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler/utils.jl:271; [2] calling_conv_fixup (repeats 2 times); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler/utils.jl:183 [inlined]; [3] calling_conv_fixup(builder::LLVM.IRBuilder, val::LLVM.AddrSpaceCastInst, tape::LLVM.PointerType); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler/utils.jl:183; [4] enzyme_custom_common_rev(forward::Bool, B::LLVM.IRBuilder, orig::LLVM.CallInst, gutils::Enzyme.Compiler.GradientUtils, normalR::Ptr{Nothing}, shadowR::Ptr{Nothing}, tape::LLVM.ExtractValueInst); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:4610; [5] enzyme_custom_rev(B::LLVM.IRBuilder, orig::LLVM.CallInst, gutils::Enzyme.Compiler.GradientUtils, tape::LLVM.ExtractValueInst); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:4770; [6] (::Enzyme.Compiler.var""#201#202"")(B::Ptr{LLVM.API.LLVMOpaqueBuilder}, OrigCI::Ptr{LLVM.API.LLVMOpaqueValue}, gutils::Ptr{Nothing}, tape::Ptr{LLVM.API.LLVMOpaqueValue}); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:6657; [7] EnzymeCreatePrimalAndGradient(logic::Enzyme.Logic, todiff::LLVM.Function, retType::Enzyme.API.CDIFFE_TYPE, constant_args::Vector{…}, TA::Enzyme.TypeAnalysis, returnValue::Bool, dretUsed::Bool, mode::Enzyme.API.CDerivativeMode, width::Int64, additionalArg::Ptr{…}, forceAnonymousTape::Bool, typeInfo::Enzyme.FnTypeInfo, uncacheable_args::Vector{…}, augmented::Ptr{…}, atomicAdd::Bool); @ Enzyme.API ~/Projects/Enzymantics/Enzyme.jl/src/api.jl:141; [8] enzyme!(job::GPUCompiler.CompilerJob{…}, mod::LLVM.Module, primalf::LLVM.Function, TT::Type, mode::Enzyme.API.CDerivativeMode, width::Int64, parallel::Bool, actualRetType::Type, wrap::B",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3360#issuecomment-1791250259:44,Assert,AssertionError,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3360#issuecomment-1791250259,1,['Assert'],['AssertionError']
Testability,"zC` but `VerticallyStretchedRectilinearGrid` calls it `grid.zᵃᵃᶠ` to be more consistent with the curvilinear grids being added, but the output writers might not know this yet. We should add some output writer tests for the different grids now. I think this might be an issue with `RegularLatitudeLongitudeGrid` as well. > 2. It didn't work with the `FT=Float64` argument. Ah how did you do call the constructor? Julia uses a `semicolon` to separate regular arguments from keyword arguments (https://docs.julialang.org/en/v1/manual/functions/#Keyword-Arguments). So maybe you meant to call. ```julia; grid = VerticallyStretchedRectilinearGrid(Float64, ...); ```. instead of. ```julia; grid = VerticallyStretchedRectilinearGrid(FT=Float64, ...); ```. ?. I guess it could be a bit confusing since `FT` is only what the function calls it but seems to be standard to include it in the docstring to give some idea of what the argument is. Well, the real solution would be a better docstring with examples. > 3. It asks me to use: `halo = (3, 3, 3)` and not `halo = (1, 1, 1)` . Yes. If you use higher-order advection schemes you might need larger halos. `RegularRectilinearGrid` automatically increased the halo size as needed but `VerticallyStretchedRectilinearGrid` doesn't do this yet. Should be possible to do it automatically though. > 4. For testing purposes, I tried using a linear grid with `zF = collect(-160:2.5:0)`. I ran for 1 short timestep and it produces NaN's in the `u` field. However, using the same linear grid with `RegularRectilinearGrid(size=(Nx, Ny, Nz), extent=(Δx*Nx, Δy*Ny, Δz*Nz), topology = (Periodic, Bounded, Bounded))` works fine. Hmmm, how small was the time step? There's a division by Δt in the pressure solve so that could blow things up but usually only if `Δt = 0` I think. Also, does it blow up with `topology = (Periodic, Periodic, Bounded)`?. All topologies should be fine but I tested it more with `(Periodic, Periodic, Bounded)` so maybe there's a lingering issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1429#issuecomment-791560413:1528,test,testing,1528,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1429#issuecomment-791560413,2,['test'],"['tested', 'testing']"
Testability,"{Float64, Flat, Flat, Bounded, Float64, Float64, OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{Nothing, Nothing, Nothing, Nothing, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ Oceananigans.Fields /g/data/v45/nc3020/Oceananigans.jl/src/Fields/regridding_fields.jl:48; [19] macro expansion; @ /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:422 [inlined]; [20] macro expansion; @ /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/Test/src/Test.jl:1357 [inlined]; [21] macro expansion; @ /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:383 [inlined]; [22] macro expansion; @ /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/Test/src/Test.jl:1357 [inlined]; [23] top-level scope; @ /g/data/v45/nc3020/Oceananigans.jl/test/test_field.jl:164; [24] include(fname::String); @ Base.MainInclude ./client.jl:476; [25] top-level scope; @ REPL[51]:1; [26] top-level scope; @ /g/data/v45/nc3020/.julia/packages/CUDA/DfvRa/src/initialization.jl:52; [27] eval; @ ./boot.jl:368 [inlined]; [28] eval_user_input(ast::Any, backend::REPL.REPLBackend); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:151; [29] repl_backend_loop(backend::REPL.REPLBackend); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:247; [30] start_repl_backend(backend::REPL.REPLBackend, consumer::Any); @ REPL /g/data/v45/nc3020/julia-1.8/usr/share/julia/stdlib/v1.8/REPL/src/REPL.jl:232; [31] run_repl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221177574:16941,Test,Test,16941,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221177574,2,['Test'],['Test']
Testability,"| :arrow_up: |; | [...vection/topologically\_conditional\_interpolation.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/972/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi90b3BvbG9naWNhbGx5X2NvbmRpdGlvbmFsX2ludGVycG9sYXRpb24uamw=) | `60.00% <60.00%> (ø)` | |; | [src/Advection/centered\_fourth\_order.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/972/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi9jZW50ZXJlZF9mb3VydGhfb3JkZXIuamw=) | `64.28% <62.50%> (+64.28%)` | :arrow_up: |; | [src/Advection/upwind\_biased\_third\_order.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/972/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi91cHdpbmRfYmlhc2VkX3RoaXJkX29yZGVyLmps) | `65.00% <65.00%> (ø)` | |; | [src/Advection/centered\_advective\_fluxes.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/972/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi9jZW50ZXJlZF9hZHZlY3RpdmVfZmx1eGVzLmps) | `100.00% <100.00%> (ø)` | |; | [src/Advection/upwind\_biased\_advective\_fluxes.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/972/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi91cHdpbmRfYmlhc2VkX2FkdmVjdGl2ZV9mbHV4ZXMuamw=) | `100.00% <100.00%> (ø)` | |; | [test/test\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/972/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmcuamw=) | `100.00% <100.00%> (ø)` | |; | ... and [6 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/972/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/972?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/972?src=pr&el=footer). Last update [7260ce8...5f6a3a0](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/972?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/972#issuecomment-699121507:2725,test,test,2725,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/972#issuecomment-699121507,2,['test'],['test']
Testability,"| Stacktrace:; &nbsp; | [1] test_triply_periodic_halo_communication_with_411_ranks(::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:365; &nbsp; | [2] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:477 [inlined]; &nbsp; | [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [4] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:475 [inlined]; &nbsp; | [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [6] top-level scope at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:448; &nbsp; | Halo communication: Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | Expression: all(south_halo(field, include_corners = false) .== arch.connectivity.south); &nbsp; | Stacktrace:; &nbsp; | [1] test_triply_periodic_halo_communication_with_411_ranks(::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | [2] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:477 [inlined]; &nbsp; | [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [4] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:475 [inlined]; &nbsp; | [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [6] top-le",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802:1328,Test,Test,1328,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802,2,"['Test', 'test']","['Test', 'test']"
Testability,"| [test/test\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3NvbHZlcnMuamw=) | `51.06% <ø> (ø)` | |; | [src/TimeSteppers/generic\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9nZW5lcmljX3RpbWVfc3RlcHBpbmcuamw=) | `95.23% <100.00%> (+0.23%)` | :arrow_up: |; | [...sts/ocean\_large\_eddy\_simulation\_regression\_test.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-dGVzdC9yZWdyZXNzaW9uX3Rlc3RzL29jZWFuX2xhcmdlX2VkZHlfc2ltdWxhdGlvbl9yZWdyZXNzaW9uX3Rlc3Quamw=) | `100.00% <100.00%> (ø)` | |; | [...egression\_tests/rayleigh\_benard\_regression\_test.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-dGVzdC9yZWdyZXNzaW9uX3Rlc3RzL3JheWxlaWdoX2JlbmFyZF9yZWdyZXNzaW9uX3Rlc3Quamw=) | `100.00% <100.00%> (ø)` | |; | [...regression\_tests/thermal\_bubble\_regression\_test.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-dGVzdC9yZWdyZXNzaW9uX3Rlc3RzL3RoZXJtYWxfYnViYmxlX3JlZ3Jlc3Npb25fdGVzdC5qbA==) | `100.00% <100.00%> (ø)` | |; | [test/test\_regression.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3JlZ3Jlc3Npb24uamw=) | `100.00% <100.00%> (ø)` | |; | ... and [26 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943?src=pr&el=footer). Last update [0f33c1d...8fe7c2a](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/943#issuecomment-692271816:2969,test,test,2969,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/943#issuecomment-692271816,2,['test'],['test']
Testability,"| |; | [...nceTests/OneDimensionalCosineAdvectionDiffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvT25lRGltZW5zaW9uYWxDb3NpbmVBZHZlY3Rpb25EaWZmdXNpb24uamw=) | | |; | [benchmark/benchmark\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | | |; | [test/test\_buoyancy.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2J1b3lhbmN5Lmps) | | |; | [test/test\_time\_stepping\_bcs.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmdfYmNzLmps) | | |; | [...ests/one\_dimensional\_cosine\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9jb3NpbmVfYWR2ZWN0aW9uX2RpZmZ1c2lvbi5qbA==) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | [test/test\_turbulence\_closures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3R1cmJ1bGVuY2VfY2xvc3VyZXMuamw=) | | |; | ... and [53 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966?src=pr&el=footer). Last update [b444acf...639be06](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/966?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/966#issuecomment-696645202:2634,test,test,2634,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/966#issuecomment-696645202,2,['test'],['test']
Testability,"|; | [src/OutputWriters/OutputWriters.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvT3V0cHV0V3JpdGVycy5qbA==) | `66.66% <0.00%> (-33.34%)` | :arrow_down: |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `76.54% <0.00%> (-5.28%)` | :arrow_down: |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `65.07% <0.00%> (-0.55%)` | :arrow_down: |; | [src/Simulations/run.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `95.23% <0.00%> (-0.12%)` | :arrow_down: |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [docs/bibliography.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-ZG9jcy9iaWJsaW9ncmFwaHkuamw=) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | ... and [44 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881?src=pr&el=footer). Last update [810a3a1...9128ab2](https://codecov.io/gh/C",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/881#issuecomment-682318992:2334,test,test,2334,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/881#issuecomment-682318992,2,['test'],['test']
Testability,"}}, CPU}, MinimalBiogeochemistryType::Type{MinimalDiscreteBiogeochemistry}, ModelType::Type{HydrostaticFreeSurfaceModel}); @ Main ~/Research/OC5.jl/test/test_biogeochemistry.jl:109; [22] macro expansion; @ ~/Research/OC5.jl/test/test_biogeochemistry.jl:139 [inlined]; [23] macro expansion; @ ~/julia-1.9/usr/share/julia/stdlib/v1.9/Test/src/Test.jl:1498 [inlined]; [24] top-level scope; @ ~/Research/OC5.jl/test/test_biogeochemistry.jl:127; [25] include(fname::String); @ Base.MainInclude ./client.jl:478; [26] top-level scope; @ REPL[2]:1; [27] eval; @ ./boot.jl:370 [inlined]; [28] eval_user_input(ast::Any, backend::REPL.REPLBackend, mod::Module); @ REPL ~/julia-1.9/usr/share/julia/stdlib/v1.9/REPL/src/REPL.jl:153; [29] repl_backend_loop(backend::REPL.REPLBackend, get_module::Function); @ REPL ~/julia-1.9/usr/share/julia/stdlib/v1.9/REPL/src/REPL.jl:249; [30] start_repl_backend(backend::REPL.REPLBackend, consumer::Any; get_module::Function); @ REPL ~/julia-1.9/usr/share/julia/stdlib/v1.9/REPL/src/REPL.jl:234; [31] run_repl(repl::REPL.AbstractREPL, consumer::Any; backend_on_current_task::Bool, backend::Any); @ REPL ~/julia-1.9/usr/share/julia/stdlib/v1.9/REPL/src/REPL.jl:379; [32] run_repl(repl::REPL.AbstractREPL, consumer::Any); @ REPL ~/julia-1.9/usr/share/julia/stdlib/v1.9/REPL/src/REPL.jl:365; [33] (::Base.var""#1017#1019""{Bool, Bool, Bool})(REPL::Module); @ Base ./client.jl:421; [34] #invokelatest#2; @ ./essentials.jl:816 [inlined]; [35] invokelatest; @ ./essentials.jl:813 [inlined]; [36] run_main_repl(interactive::Bool, quiet::Bool, banner::Bool, history_file::Bool, color_set::Bool); @ Base ./client.jl:405; [37] exec_options(opts::Base.JLOptions); @ Base ./client.jl:322; [38] _start(); @ Base ./client.jl:522; Test Summary: | Pass Error Total Time; Biogeochemistry | 9 1 10 1m32.9s; ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 1 errored, 0 broken.; in expression start; ```. so it seems like those lines are called by the matrix implicit solver somehow?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630460635:23181,Test,Test,23181,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630460635,2,"['Test', 'test']","['Test', 'tests']"
Testability,"~hm... @simone-silvestri (personal communication) suggested that the culprit was the commented out velocity halo filling in [852381a](https://github.com/CliMA/Oceananigans.jl/pull/2867/commits/852381af86ce09c3249e895626b7ade365d4dba3). But after bringing them back, still tests fail and code snippet in https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1651385198 gives the same output...~",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1651626130:272,test,tests,272,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1651626130,1,['test'],['tests']
Testability,"~~Can you link to the code?~~ Do you mean these lines:. https://github.com/CliMA/Oceananigans.jl/blob/45dbdf87b700e63247a40490f42a473100c24c46/test/test_enzyme.jl#L274-L278. Yes that's a bug -- fixed now. PS to generate a link to code, click the ""..."" on the left side. You'll get an option to create a permalink. You can edit the link to refer to a range of lines after creating it as I did above (to see what I wrote, attempt to edit my post and you will see the hyperlink). ![image](https://github.com/user-attachments/assets/92e79cfb-3da6-47bd-9d7d-59c4debe5aa3)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438713500:143,test,test,143,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438713500,1,['test'],['test']
Testability,~~I have found a solution. Just forcing the keyword argument `required_halo_size` with to be an integer `required_halo_size::Int =1` stabilized the constructor. I need to add a couple of tests and this PR should be ready~~. Edit: problem still stands,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2327771854:187,test,tests,187,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2327771854,1,['test'],['tests']
Testability,"~~I think I have two remaining problems to get all of the existing tests working:~~; - ~~Hydrostatic regression tests: these still failed locally when I restored the `fill_halo_region!` behaviour for hydrostatic models so I'm not sure why they're failing. I will investigate more.~~; - ~~Multi region grids: these give `update_boundary_conditions!` a `MultiRegionObject` which I am not familiar with. Can I just call `update_boundary_conditions!` on each `regional_object`? (cc: @simone-silvestri)~~. ~~Hopefully, the other tests now pass and I've reduced the changes that we need to make to them here.~~. I think these are solved now",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2150072166:67,test,tests,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2150072166,3,['test'],['tests']
Testability,"ø)` | |; | [examples/netcdf\_ouput\_example.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/836/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvbmV0Y2RmX291cHV0X2V4YW1wbGUuamw=) | `0.00% <ø> (ø)` | |; | [examples/ocean\_convection\_with\_plankton.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/836/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb2NlYW5fY29udmVjdGlvbl93aXRoX3BsYW5rdG9uLmps) | `0.00% <ø> (ø)` | |; | [examples/ocean\_wind\_mixing\_and\_convection.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/836/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb2NlYW5fd2luZF9taXhpbmdfYW5kX2NvbnZlY3Rpb24uamw=) | `0.00% <ø> (ø)` | |; | [examples/one\_dimensional\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/836/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb25lX2RpbWVuc2lvbmFsX2RpZmZ1c2lvbi5qbA==) | `0.00% <ø> (ø)` | |; | [src/Grids/regular\_cartesian\_grid.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/836/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL3JlZ3VsYXJfY2FydGVzaWFuX2dyaWQuamw=) | `81.81% <ø> (ø)` | |; | [src/Utils/Utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/836/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL1V0aWxzLmps) | `100.00% <ø> (ø)` | |; | [test/test\_examples.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/836/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2V4YW1wbGVzLmps) | `86.00% <ø> (ø)` | |; | ... and [27 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/836/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/836?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/836?src=pr&el=footer). Last update [66ddeb7...81d21f3](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/836?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/836#issuecomment-669319153:2688,test,test,2688,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/836#issuecomment-669319153,2,['test'],['test']
Testability,Δ | |; |---|---|---|; | [...ts/one\_dimensional\_gaussian\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9nYXVzc2lhbl9hZHZlY3Rpb25fZGlmZnVzaW9uLmps) | | |; | [test/test\_coriolis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2NvcmlvbGlzLmps) | | |; | [examples/internal\_wave.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvaW50ZXJuYWxfd2F2ZS5qbA==) | | |; | [test/test\_verification.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ZlcmlmaWNhdGlvbi5qbA==) | | |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | | |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | | |; | [test/test\_models.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X21vZGVscy5qbA==) | | |; | [examples/netcdf\_ouput\_example.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvbmV0Y2RmX291cHV0X2V4YW1wbGUuamw=) | | |; | [...sts/ocean\_large\_eddy\_simulation\_regression\_test.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC9yZWdyZXNzaW9uX3Rlc3RzL29jZWFuX2xhcmdlX2VkZHlfc2ltdWxhdGlvbl9yZWdyZXNzaW9uX3Rlc3Quamw=) | | |; | [test/test\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZpZWxkcy5qbA==) | | |; | ... and [49 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/795?src=pr&el=continue).; > **Legend** - [Click here to learn more](https,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/795#issuecomment-657824854:2024,test,test,2024,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/795#issuecomment-657824854,2,['test'],['test']
Testability,"── Field located at (Center, Face, Center);       │   │   └── AveragedField over dims=(1, 2) located at (⋅, ⋅, Center) of Field located at (Center, Face, Center);       │   └── 2;       └── ^ at (Center, Center, Face) via identity;          ├── Field located at (Center, Center, Face);          └── 2. julia> compute!(ComputedField(tke)); ERROR: InvalidIRError: compiling kernel gpu__compute!; ```. Interestingly, this works:. ```julia; julia> tke = ((u - U)^2 + (v - V)^2 + w^2) / 2; BinaryOperation at (Face, Center, Center); ├── grid: RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=1, Nz=1); │ └── domain: x ∈ [0.0, 1.0], y ∈ [0.0, 1.0], z ∈ [-1.0, 0.0]; └── tree: ; / at (Face, Center, Center) via identity;    ├── + at (Face, Center, Center);    │   ├── ^ at (Face, Center, Center) via identity;    │   │   ├── - at (Face, Center, Center) via identity;    │   │   │   ├── Field located at (Face, Center, Center);    │   │   │   └── AveragedField over dims=(1, 2) located at (⋅, ⋅, Center) of Field located at (Face, Center, Center);    │   │   └── 2;    │   ├── ^ at (Center, Face, Center) via identity;    │   │   ├── - at (Center, Face, Center) via identity;    │   │   │   ├── Field located at (Center, Face, Center);    │   │   │   └── AveragedField over dims=(1, 2) located at (⋅, ⋅, Center) of Field located at (Center, Face, Center);    │   │   └── 2;    │   └── ^ at (Center, Center, Face) via identity;       │   ├── Field located at (Center, Center, Face);       │   └── 2;    └── 2. julia> compute!(ComputedField(tke)); ```. So I guess we are almost there with `AveragedField`. I think the order or arguments could actually matter for compilation due to heuristics that are invoked during compilation... ?. We might update the test for computations with `AveragedField` because they might pass with a different ordering. We could also change how `AbstractOperations` are built and put `Number` as the second argument regardless of how the expression is written.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1241#issuecomment-821872338:7875,test,test,7875,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1241#issuecomment-821872338,1,['test'],['test']
Testability,"───────────────────┼──────────┼─────────┼─────────┤; │ GPU │ 192 │ (Bounded, Bounded, Bounded) │ 4.83605 │ 76.8 │ 29.1613 │; │ GPU │ 192 │ (Bounded, Bounded, Periodic) │ 3.90501 │ 52.5714 │ 21.0 │; │ GPU │ 192 │ (Bounded, Periodic, Bounded) │ 3.91006 │ 52.4 │ 20.8065 │; │ GPU │ 192 │ (Bounded, Periodic, Periodic) │ 5.59024 │ 25.4571 │ 9.48387 │; │ GPU │ 192 │ (Periodic, Bounded, Bounded) │ 3.88581 │ 52.5714 │ 21.0 │; │ GPU │ 192 │ (Periodic, Bounded, Periodic) │ 2.96267 │ 28.0 │ 12.4516 │; │ GPU │ 192 │ (Periodic, Periodic, Bounded) │ 2.03389 │ 25.4571 │ 9.48387 │; │ GPU │ 192 │ (Periodic, Periodic, Periodic) │ 1.0 │ 1.0 │ 1.0 │; └───────────────┴─────┴────────────────────────────────┴──────────┴─────────┴─────────┘; ```. # Static ocean benchmarks for all topologies. ## Raw numbers. ```; Topologies benchmarks; ┌───────────────┬─────┬────────────────────────────────┬───────────┬───────────┬───────────┬───────────┬────────────┬────────┐; │ Architectures │ Ns │ Topologies │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────┼────────────────────────────────┼───────────┼───────────┼───────────┼───────────┼────────────┼────────┤; │ CPU │ 192 │ (Bounded, Bounded, Bounded) │ 2.402 s │ 2.412 s │ 2.413 s │ 2.424 s │ 405.84 KiB │ 2460 │; │ CPU │ 192 │ (Bounded, Bounded, Periodic) │ 2.247 s │ 2.250 s │ 2.252 s │ 2.259 s │ 363.28 KiB │ 2162 │; │ CPU │ 192 │ (Bounded, Periodic, Bounded) │ 1.890 s │ 1.890 s │ 1.890 s │ 1.890 s │ 363.28 KiB │ 2162 │; │ CPU │ 192 │ (Bounded, Periodic, Periodic) │ 1.923 s │ 1.933 s │ 1.931 s │ 1.936 s │ 317.00 KiB │ 1806 │; │ CPU │ 192 │ (Periodic, Bounded, Bounded) │ 1.864 s │ 1.869 s │ 1.868 s │ 1.871 s │ 363.28 KiB │ 2162 │; │ CPU │ 192 │ (Periodic, Bounded, Periodic) │ 1.685 s │ 1.686 s │ 1.688 s │ 1.693 s │ 317.00 KiB │ 1806 │; │ CPU │ 192 │ (Periodic, Periodic, Bounded) │ 2.092 s │ 2.114 s │ 2.109 s │ 2.121 s │ 317.00 KiB │ 1806 │; │ CPU │ 192 │ (Periodic, Periodic, Periodic) │ 1.780 s │ 1.796 s │ 1.801 s │ 1.828 s │ 277.47 K",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-773394296:5751,benchmark,benchmarks,5751,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-773394296,2,['benchmark'],['benchmarks']
Testability,"──────────────┼──────────┼──────────┼─────────┤; │ GPU │ 192 │ (Bounded, Bounded, Bounded) │ 2.22277 │ 0.965821 │ 1.70133 │; │ GPU │ 192 │ (Bounded, Bounded, Periodic) │ 1.82308 │ 0.980729 │ 1.496 │; │ GPU │ 192 │ (Bounded, Periodic, Bounded) │ 1.82349 │ 0.984497 │ 1.4736 │; │ GPU │ 192 │ (Bounded, Periodic, Periodic) │ 2.26462 │ 0.989389 │ 1.24018 │; │ GPU │ 192 │ (Periodic, Bounded, Bounded) │ 1.82237 │ 0.984695 │ 1.47467 │; │ GPU │ 192 │ (Periodic, Bounded, Periodic) │ 1.54676 │ 0.992331 │ 1.25653 │; │ GPU │ 192 │ (Periodic, Periodic, Bounded) │ 1.30183 │ 0.99405 │ 1.22631 │; │ GPU │ 192 │ (Periodic, Periodic, Periodic) │ 1.0 │ 1.0 │ 1.0 │; └───────────────┴─────┴────────────────────────────────┴──────────┴──────────┴─────────┘; ```. # Performance vs. main branch. ## Main branch. ```; Topologies benchmarks; ┌───────────────┬─────┬────────────────────────────────┬───────────┬───────────┬───────────┬───────────┬────────────┬────────┐; │ Architectures │ Ns │ Topologies │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────┼────────────────────────────────┼───────────┼───────────┼───────────┼───────────┼────────────┼────────┤; │ CPU │ 192 │ (Periodic, Bounded, Bounded) │ 1.922 s │ 1.922 s │ 1.967 s │ 2.058 s │ 363.61 KiB │ 2163 │; │ CPU │ 192 │ (Periodic, Periodic, Bounded) │ 2.143 s │ 2.144 s │ 2.145 s │ 2.146 s │ 317.33 KiB │ 1807 │; │ CPU │ 192 │ (Periodic, Periodic, Periodic) │ 1.791 s │ 1.793 s │ 1.793 s │ 1.794 s │ 277.77 KiB │ 1661 │; │ GPU │ 192 │ (Periodic, Bounded, Bounded) │ 32.188 ms │ 37.447 ms │ 36.936 ms │ 37.557 ms │ 985.94 KiB │ 13476 │; │ GPU │ 192 │ (Periodic, Periodic, Bounded) │ 11.051 ms │ 11.114 ms │ 11.148 ms │ 11.533 ms │ 807.44 KiB │ 10746 │; │ GPU │ 192 │ (Periodic, Periodic, Periodic) │ 9.859 ms │ 10.104 ms │ 10.136 ms │ 10.682 ms │ 707.81 KiB │ 9469 │; └───────────────┴─────┴────────────────────────────────┴───────────┴───────────┴───────────┴───────────┴────────────┴────────┘; ```. ## This PR/branch. ```; Topologies bench",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-773394296:11002,benchmark,benchmarks,11002,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-773394296,2,['benchmark'],['benchmarks']
Testability,"────────────┬────────────┬──────────┬────────┬─────────┐; │ size │ ranks │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├─────────────────┼────────────┼────────────┼────────────┼────────────┼────────────┼──────────┼────────┼─────────┤; │ (256, 256, 256) │ (1, 1, 1) │ 4.412 s │ 4.486 s │ 4.486 s │ 4.560 s │ 1.89 MiB │ 2623 │ 2 │; │ (256, 256, 256) │ (1, 2, 1) │ 2.275 s │ 2.303 s │ 2.297 s │ 2.312 s │ 1.74 MiB │ 2979 │ 6 │; │ (256, 256, 256) │ (1, 4, 1) │ 1.095 s │ 1.149 s │ 1.152 s │ 1.280 s │ 1.74 MiB │ 3019 │ 20 │; │ (256, 256, 256) │ (1, 8, 1) │ 583.413 ms │ 667.475 ms │ 663.315 ms │ 924.523 ms │ 1.74 MiB │ 3099 │ 64 │; │ (256, 256, 256) │ (1, 16, 1) │ 341.718 ms │ 383.898 ms │ 405.727 ms │ 771.915 ms │ 1.76 MiB │ 3259 │ 160 │; └─────────────────┴────────────┴────────────┴────────────┴────────────┴────────────┴──────────┴────────┴─────────┘. Incompressible model strong scaling speedup; ┌─────────────────┬────────────┬─────────┬────────────┬──────────┬─────────┐; │ size │ ranks │ speedup │ efficiency │ memory │ allocs │; ├─────────────────┼────────────┼─────────┼────────────┼──────────┼─────────┤; │ (256, 256, 256) │ (1, 1, 1) │ 1.0 │ 1.0 │ 1.0 │ 1.0 │; │ (256, 256, 256) │ (1, 2, 1) │ 1.94757 │ 0.973786 │ 0.918534 │ 1.13572 │; │ (256, 256, 256) │ (1, 4, 1) │ 3.90488 │ 0.976221 │ 0.91981 │ 1.15097 │; │ (256, 256, 256) │ (1, 8, 1) │ 6.72045 │ 0.840057 │ 0.922588 │ 1.18147 │; │ (256, 256, 256) │ (1, 16, 1) │ 11.6847 │ 0.730294 │ 0.928952 │ 1.24247 │; └─────────────────┴────────────┴─────────┴────────────┴──────────┴─────────┘; ```; ![ss_incompressible_times](https://user-images.githubusercontent.com/45054739/122680369-c5f29b80-d1bc-11eb-96eb-79174872e345.png); ![ss_incompressible_efficiency](https://user-images.githubusercontent.com/45054739/122680383-d0ad3080-d1bc-11eb-9939-5af092b042da.png). The overall trend looks like that efficiency plateaus off at around 75% when using 32 or more cores. We'll be trying to benchmark the GPUs' scaling performance next.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-864573659:4957,benchmark,benchmark,4957,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-864573659,1,['benchmark'],['benchmark']
Testability,"───────────┼───────────┼────────────┼────────────┼─────────┼─────────┤; │ CPU │ RectilinearGrid │ PCGImplicitFreeSurfaceNoPreconditioner │ 61.099 ms │ 70.657 ms │ 91.448 ms │ 161.977 ms │ 24.25 MiB │ 29768 │ 10 │; │ GPU │ RectilinearGrid │ PCGImplicitFreeSurfaceNoPreconditioner │ 17.595 ms │ 23.320 ms │ 22.090 ms │ 26.288 ms │ 4.26 MiB │ 43632 │ 10 │; │ CPU │ RectilinearGrid │ PCGImplicitFreeSurface │ 12.473 ms │ 14.323 ms │ 14.833 ms │ 19.016 ms │ 5.50 MiB │ 9866 │ 10 │; │ GPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceNoPreconditioner │ 9.471 ms │ 9.647 ms │ 9.777 ms │ 10.601 ms │ 2.08 MiB │ 18243 │ 10 │; │ CPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceOrd2 │ 29.854 ms │ 38.381 ms │ 43.885 ms │ 69.085 ms │ 5.34 MiB │ 8469 │ 10 │; │ CPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceSparsePreconditioner │ 33.183 ms │ 42.544 ms │ 41.127 ms │ 46.910 ms │ 5.34 MiB │ 8491 │ 10 │; │ GPU │ RectilinearGrid │ PCGImplicitFreeSurface │ 4.380 ms │ 4.709 ms │ 4.824 ms │ 6.626 ms │ 1.89 MiB │ 10256 │ 10 │; │ CPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceNoPreconditioner │ 29.694 ms │ 33.940 ms │ 35.731 ms │ 48.457 ms │ 5.34 MiB │ 8490 │ 10 │; │ GPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceOrd2 │ 5.987 s │ 5.987 s │ 5.987 s │ 5.987 s │ 462.46 MiB │ 8636458 │ 1 │; │ GPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceSparsePreconditioner │ 6.611 ms │ 7.311 ms │ 7.608 ms │ 9.821 ms │ 1.84 MiB │ 12582 │ 10 │; └───────────────┴─────────────────┴───────────────────────────────────────────────┴───────────┴───────────┴───────────┴────────────┴────────────┴─────────┴─────────┘; ```. The `PCGImplicitFreeSurfaceSolver` is about 2.5x slower than the `HeptadiagonalIterativeSolver` when there's no preconditioner. The difference is presumably halo filling, but more detailed benchmarking would be required to know for sure. This implies that a faster solver might be obtained with an FFT-based preconditioner, and a `linear_operation!` that didn't require halo filling. cc @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2412#issuecomment-1108986503:2313,benchmark,benchmarking,2313,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2412#issuecomment-1108986503,1,['benchmark'],['benchmarking']
Testability,──────────┴─────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┘; ```. ### CPU to GPU speedup. ```; ┌─────────────┬─────┬─────────┬─────────┬─────────┐; │ Float_types │ Ns │ speedup │ memory │ allocs │; ├─────────────┼─────┼─────────┼─────────┼─────────┤; │ Float32 │ 32 │ 2.93732 │ 3.62888 │ 3.63319 │; │ Float32 │ 64 │ 17.443 │ 3.9155 │ 3.63373 │; │ Float32 │ 128 │ 86.446 │ 4.52412 │ 3.63264 │; │ Float32 │ 256 │ 127.777 │ 5.72434 │ 3.63483 │; │ Float64 │ 32 │ 2.51868 │ 3.63039 │ 3.63319 │; │ Float64 │ 64 │ 17.1005 │ 3.91654 │ 3.63373 │; │ Float64 │ 128 │ 86.4912 │ 4.52413 │ 3.63264 │; │ Float64 │ 256 │ 135.031 │ 5.73397 │ 3.69159 │; └─────────────┴─────┴─────────┴─────────┴─────────┘; ```. ---. ## Incompressible model benchmarks (regular Rectilinear grid). ### Raw benchmarks. ```; Incompressible model benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ CPU │ Float32 │ 32 │ 5.408 ms │ 5.713 ms │ 5.871 ms │ 6.634 ms │ 287.98 KiB │ 2136 │; │ CPU │ Float32 │ 64 │ 36.120 ms │ 38.174 ms │ 38.435 ms │ 41.795 ms │ 287.98 KiB │ 2136 │; │ CPU │ Float32 │ 128 │ 304.741 ms │ 311.332 ms │ 311.085 ms │ 315.204 ms │ 287.98 KiB │ 2136 │; │ CPU │ Float32 │ 256 │ 2.598 s │ 2.598 s │ 2.598 s │ 2.599 s │ 287.98 KiB │ 2136 │; │ CPU │ Float64 │ 32 │ 6.419 ms │ 6.647 ms │ 6.733 ms │ 7.657 ms │ 350.52 KiB │ 2136 │; │ CPU │ Float64 │ 64 │ 42.856 ms │ 46.229 ms │ 45.719 ms │ 47.103 ms │ 350.52 KiB │ 2136 │; │ CPU │ Float64 │ 128 │ 369.043 ms │ 380.330 ms │ 380.214 ms │ 385.820 ms │ 350.52 KiB │ 2136 │; │ CPU │ Float64 │ 256 │ 3.934 s │ 3.943 s │ 3.943 s │ 3.953 s │ 350.52 KiB │ 2136 │; │ GPU │ Float32 │ 32 │ 2.520 ms │ 2.588 ms │ 2.663 ms │ 3.287 ms │ 685.19 KiB │ 7043 │; │ GPU │ Float32 │ 64 │ 2.6,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1403#issuecomment-786398050:3590,benchmark,benchmarks,3590,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1403#issuecomment-786398050,1,['benchmark'],['benchmarks']
Testability,"───────┼────────┤; │ CPU │ 192 │ (Periodic, Bounded, Bounded) │ 1.922 s │ 1.922 s │ 1.967 s │ 2.058 s │ 363.61 KiB │ 2163 │; │ CPU │ 192 │ (Periodic, Periodic, Bounded) │ 2.143 s │ 2.144 s │ 2.145 s │ 2.146 s │ 317.33 KiB │ 1807 │; │ CPU │ 192 │ (Periodic, Periodic, Periodic) │ 1.791 s │ 1.793 s │ 1.793 s │ 1.794 s │ 277.77 KiB │ 1661 │; │ GPU │ 192 │ (Periodic, Bounded, Bounded) │ 32.188 ms │ 37.447 ms │ 36.936 ms │ 37.557 ms │ 985.94 KiB │ 13476 │; │ GPU │ 192 │ (Periodic, Periodic, Bounded) │ 11.051 ms │ 11.114 ms │ 11.148 ms │ 11.533 ms │ 807.44 KiB │ 10746 │; │ GPU │ 192 │ (Periodic, Periodic, Periodic) │ 9.859 ms │ 10.104 ms │ 10.136 ms │ 10.682 ms │ 707.81 KiB │ 9469 │; └───────────────┴─────┴────────────────────────────────┴───────────┴───────────┴───────────┴───────────┴────────────┴────────┘; ```. ## This PR/branch. ```; Topologies benchmarks; ┌───────────────┬─────┬────────────────────────────────┬───────────┬───────────┬───────────┬───────────┬────────────┬────────┐; │ Architectures │ Ns │ Topologies │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────┼────────────────────────────────┼───────────┼───────────┼───────────┼───────────┼────────────┼────────┤; │ CPU │ 192 │ (Periodic, Bounded, Bounded) │ 1.864 s │ 1.869 s │ 1.868 s │ 1.871 s │ 363.28 KiB │ 2162 │; │ CPU │ 192 │ (Periodic, Periodic, Bounded) │ 2.092 s │ 2.114 s │ 2.109 s │ 2.121 s │ 317.00 KiB │ 1806 │; │ CPU │ 192 │ (Periodic, Periodic, Periodic) │ 1.780 s │ 1.796 s │ 1.801 s │ 1.828 s │ 277.47 KiB │ 1662 │; │ GPU │ 192 │ (Periodic, Bounded, Bounded) │ 12.717 ms │ 18.315 ms │ 17.841 ms │ 18.997 ms │ 930.92 KiB │ 8295 │; │ GPU │ 192 │ (Periodic, Periodic, Bounded) │ 10.097 ms │ 13.083 ms │ 12.793 ms │ 13.159 ms │ 939.77 KiB │ 6898 │; │ GPU │ 192 │ (Periodic, Periodic, Periodic) │ 8.948 ms │ 10.050 ms │ 9.948 ms │ 10.128 ms │ 945.39 KiB │ 5625 │; └───────────────┴─────┴────────────────────────────────┴───────────┴───────────┴───────────┴───────────┴────────────┴────────┘; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-773394296:12188,benchmark,benchmarks,12188,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-773394296,2,['benchmark'],['benchmarks']
Testability,"─────┴────────────┴────────────┴────────┘; ```. ## CPU to GPU speedup. ```; Incompressible model CPU -> GPU speedup; ┌─────────────┬─────┬─────────┬─────────┬─────────┐; │ Float_types │ Ns │ speedup │ memory │ allocs │; ├─────────────┼─────┼─────────┼─────────┼─────────┤; │ Float32 │ 32 │ 2.20733 │ 2.37925 │ 3.29728 │; │ Float32 │ 64 │ 13.9392 │ 2.51685 │ 3.29354 │; │ Float32 │ 128 │ 90.5074 │ 2.81265 │ 3.29916 │; │ Float32 │ 256 │ 121.854 │ 3.39417 │ 3.29822 │; │ Float64 │ 32 │ 2.34399 │ 2.25752 │ 3.29728 │; │ Float64 │ 64 │ 16.2694 │ 2.37057 │ 3.29354 │; │ Float64 │ 128 │ 75.3331 │ 2.61423 │ 3.30571 │; │ Float64 │ 256 │ 107.062 │ 3.09138 │ 3.29822 │; └─────────────┴─────┴─────────┴─────────┴─────────┘; ```. ---. ## Fourier-tridiagonal Poisson solver benchmarks. ### Raw benchmarks; ```; Fourier-tridiagonal Poisson solver benchmarks ; ┌───────────────┬─────┬───────────────────────────────┬───────────┬───────────┬───────────┬───────────┬───────────┬────────┐; │ Architectures │ Ns │ Topologies │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────┼───────────────────────────────┼───────────┼───────────┼───────────┼───────────┼───────────┼────────┤; │ CPU │ 256 │ (Bounded, Bounded, Bounded) │ 1.679 s │ 1.681 s │ 1.703 s │ 1.747 s │ 2.02 KiB │ 27 │; │ CPU │ 256 │ (Bounded, Periodic, Bounded) │ 1.319 s │ 1.324 s │ 1.332 s │ 1.363 s │ 1.86 KiB │ 27 │; │ CPU │ 256 │ (Periodic, Bounded, Bounded) │ 1.349 s │ 1.351 s │ 1.374 s │ 1.444 s │ 1.86 KiB │ 27 │; │ CPU │ 256 │ (Periodic, Periodic, Bounded) │ 1.052 s │ 1.063 s │ 1.062 s │ 1.068 s │ 2.02 KiB │ 27 │; │ GPU │ 256 │ (Bounded, Bounded, Bounded) │ 32.863 ms │ 33.356 ms │ 33.347 ms │ 33.543 ms │ 43.38 KiB │ 876 │; │ GPU │ 256 │ (Bounded, Periodic, Bounded) │ 25.173 ms │ 25.849 ms │ 25.794 ms │ 25.928 ms │ 29.56 KiB │ 629 │; │ GPU │ 256 │ (Periodic, Bounded, Bounded) │ 25.185 ms │ 25.761 ms │ 25.702 ms │ 25.865 ms │ 29.56 KiB │ 629 │; │ GPU │ 256 │ (Periodic, Periodic, Bounded) │ 9.832 ms │ 10.689 ms │ 10.631 ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1403#issuecomment-786398050:6202,benchmark,benchmarks,6202,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1403#issuecomment-786398050,2,['benchmark'],['benchmarks']
Testability,────┴────────┴─────────┘; HydrostaticFreeSurfaceModel benchmarks; ┌───────────────┬─────────────┬─────┬───────────┬───────────┬───────────┬───────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼───────────┼───────────┼───────────┼───────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 1.157 ms │ 1.182 ms │ 1.220 ms │ 1.607 ms │ 784.72 KiB │ 1801 │ 10 │; │ CPU │ Float64 │ 64 │ 2.152 ms │ 2.298 ms │ 2.342 ms │ 2.857 ms │ 784.72 KiB │ 1801 │ 10 │; │ CPU │ Float64 │ 128 │ 5.851 ms │ 6.036 ms │ 6.061 ms │ 6.579 ms │ 784.72 KiB │ 1801 │ 10 │; │ CPU │ Float64 │ 256 │ 24.192 ms │ 24.634 ms │ 24.702 ms │ 25.757 ms │ 784.72 KiB │ 1801 │ 10 │; └───────────────┴─────────────┴─────┴───────────┴───────────┴───────────┴───────────┴────────────┴────────┴─────────┘; ShallowWaterModel benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 724.125 μs │ 758.812 μs │ 776.933 μs │ 945.958 μs │ 861.19 KiB │ 1499 │ 10 │; │ CPU │ Float64 │ 64 │ 1.111 ms │ 1.208 ms │ 1.210 ms │ 1.382 ms │ 861.19 KiB │ 1499 │ 10 │; │ CPU │ Float64 │ 128 │ 2.780 ms │ 2.863 ms │ 2.871 ms │ 3.150 ms │ 861.19 KiB │ 1499 │ 10 │; │ CPU │ Float64 │ 256 │ 8.750 ms │ 8.789 ms │ 8.822 ms │ 9.075 ms │ 861.19 KiB │ 1499 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┴─────────┘; ```. There are some small differences... I have fiddled a little with the `fill_halo_regions` and the boundary conditions so it might explain that. The BC will be completely overhauled with #2477 so there is nothing to worry about,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116031428:4518,benchmark,benchmarks,4518,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116031428,1,['benchmark'],['benchmarks']
Testability,──┘; HydrostaticFreeSurfaceModel benchmarks; ┌───────────────┬─────────────┬─────┬───────────┬───────────┬───────────┬───────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼───────────┼───────────┼───────────┼───────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 1.195 ms │ 1.205 ms │ 1.254 ms │ 1.626 ms │ 830.98 KiB │ 1831 │ 10 │; │ CPU │ Float64 │ 64 │ 2.041 ms │ 2.051 ms │ 2.100 ms │ 2.503 ms │ 830.98 KiB │ 1831 │ 10 │; │ CPU │ Float64 │ 128 │ 5.778 ms │ 5.833 ms │ 5.873 ms │ 6.254 ms │ 830.98 KiB │ 1831 │ 10 │; │ CPU │ Float64 │ 256 │ 23.662 ms │ 23.740 ms │ 23.730 ms │ 23.840 ms │ 830.98 KiB │ 1831 │ 10 │; └───────────────┴─────────────┴─────┴───────────┴───────────┴───────────┴───────────┴────────────┴────────┴─────────┘; ShallowWaterModel benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬──────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼──────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 702.250 μs │ 750.875 μs │ 800.300 μs │ 1.115 ms │ 846.23 KiB │ 1475 │ 10 │; │ CPU │ Float64 │ 64 │ 1.085 ms │ 1.128 ms │ 1.140 ms │ 1.313 ms │ 846.23 KiB │ 1475 │ 10 │; │ CPU │ Float64 │ 128 │ 2.628 ms │ 2.718 ms │ 2.725 ms │ 2.901 ms │ 846.23 KiB │ 1475 │ 10 │; │ CPU │ Float64 │ 256 │ 8.693 ms │ 8.740 ms │ 8.766 ms │ 9.044 ms │ 846.23 KiB │ 1475 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴──────────┴────────────┴────────┴─────────┘; ```; #### this PR; ```; NonhydrostaticModel benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116031428:1882,benchmark,benchmarks,1882,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116031428,1,['benchmark'],['benchmarks']
Testability,"│ 1.45702 │ 1.14257 │; │ CPU │ (128, 128, 128) │ (Bounded, Bounded, Periodic) │ 1.00343 │ 1.34264 │ 1.1198 │; │ CPU │ (128, 128, 128) │ (Bounded, Periodic, Bounded) │ 0.976245 │ 1.34264 │ 1.1198 │; │ CPU │ (128, 128, 128) │ (Bounded, Periodic, Periodic) │ 0.999901 │ 1.22313 │ 1.0703 │; │ CPU │ (128, 128, 128) │ (Periodic, Bounded, Bounded) │ 0.972442 │ 1.34134 │ 1.10396 │; │ CPU │ (128, 128, 128) │ (Periodic, Bounded, Periodic) │ 0.980426 │ 1.22313 │ 1.0703 │; │ CPU │ (128, 128, 128) │ (Periodic, Periodic, Bounded) │ 0.963608 │ 1.22313 │ 1.0703 │; │ CPU │ (128, 128, 128) │ (Periodic, Periodic, Periodic) │ 1.0 │ 1.0 │ 1.0 │; └───────────────┴─────────────────┴────────────────────────────────┴──────────┴─────────┴─────────┘; ```. ## 2D model (256x256x1). ```; Topologies benchmarks; ┌───────────────┬───────────────┬────────────────────────────────┬───────────┬───────────┬───────────┬───────────┬────────────┬────────┬─────────┐; │ Architectures │ Ns │ Topologies │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼───────────────┼────────────────────────────────┼───────────┼───────────┼───────────┼───────────┼────────────┼────────┼─────────┤; │ CPU │ (256, 256, 1) │ (Bounded, Periodic, Bounded) │ 23.465 ms │ 23.687 ms │ 23.895 ms │ 24.833 ms │ 772.19 KiB │ 1131 │ 10 │; │ CPU │ (256, 256, 1) │ (Periodic, Periodic, Periodic) │ 34.145 ms │ 35.596 ms │ 35.767 ms │ 38.008 ms │ 575.12 KiB │ 1010 │ 10 │; │ CPU │ (256, 256, 1) │ (Periodic, Periodic, Bounded) │ 23.208 ms │ 23.282 ms │ 23.646 ms │ 24.667 ms │ 703.45 KiB │ 1081 │ 10 │; │ CPU │ (256, 256, 1) │ (Periodic, Bounded, Bounded) │ 23.736 ms │ 24.691 ms │ 24.854 ms │ 26.482 ms │ 771.44 KiB │ 1115 │ 10 │; │ CPU │ (256, 256, 1) │ (Bounded, Periodic, Periodic) │ 31.277 ms │ 32.486 ms │ 32.212 ms │ 32.999 ms │ 703.45 KiB │ 1081 │ 10 │; │ CPU │ (256, 256, 1) │ (Periodic, Bounded, Periodic) │ 30.844 ms │ 30.903 ms │ 31.003 ms │ 31.769 ms │ 703.45 KiB │ 1081 │ 10 │; │ CPU │ (256, 256, 1) │ (Bounded, Bounded",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1115745728:9123,benchmark,benchmarks,9123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1115745728,1,['benchmark'],['benchmarks']
Testability,"│ 256 │ (Periodic, Bounded, Bounded) │ 1.27117 │ 0.922481 │ 1.0 │; │ CPU │ 256 │ (Periodic, Periodic, Bounded) │ 1.0 │ 1.0 │ 1.0 │; └───────────────┴─────┴───────────────────────────────┴──────────┴──────────┴────────┘; ```. ### Relative performance on the GPU. ```; Fourier-tridiagonal Poisson solver relative performance (GPU); ┌───────────────┬─────┬───────────────────────────────┬──────────┬─────────┬─────────┐; │ Architectures │ Ns │ Topologies │ slowdown │ memory │ allocs │; ├───────────────┼─────┼───────────────────────────────┼──────────┼─────────┼─────────┤; │ GPU │ 256 │ (Bounded, Bounded, Bounded) │ 3.12065 │ 3.32057 │ 3.02069 │; │ GPU │ 256 │ (Bounded, Periodic, Bounded) │ 2.41833 │ 2.26316 │ 2.16897 │; │ GPU │ 256 │ (Periodic, Bounded, Bounded) │ 2.41007 │ 2.26316 │ 2.16897 │; │ GPU │ 256 │ (Periodic, Periodic, Bounded) │ 1.0 │ 1.0 │ 1.0 │; └───────────────┴─────┴───────────────────────────────┴──────────┴─────────┴─────────┘; ```. ---. ## FFT-based Poisson solver. ### Raw benchmarks. ```; FFT-based Poisson solver benchmarks ; ┌───────────────┬─────┬───────────────────────────────┬────────────┬────────────┬────────────┬────────────┬───────────┬────────┐; │ Architectures │ Ns │ Topologies │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────┼───────────────────────────────┼────────────┼────────────┼────────────┼────────────┼───────────┼────────┤; │ CPU │ 256 │ (Bounded, Bounded, Bounded) │ 1.366 s │ 1.370 s │ 1.369 s │ 1.373 s │ 192 bytes │ 4 │; │ CPU │ 256 │ (Bounded, Periodic, Bounded) │ 1.138 s │ 1.146 s │ 1.148 s │ 1.157 s │ 160 bytes │ 2 │; │ CPU │ 256 │ (Periodic, Bounded, Bounded) │ 1.147 s │ 1.148 s │ 1.152 s │ 1.161 s │ 160 bytes │ 2 │; │ CPU │ 256 │ (Periodic, Periodic, Bounded) │ 843.212 ms │ 849.492 ms │ 849.080 ms │ 853.401 ms │ 160 bytes │ 2 │; │ GPU │ 256 │ (Bounded, Bounded, Bounded) │ 17.252 ms │ 38.642 ms │ 36.505 ms │ 38.756 ms │ 84.38 KiB │ 898 │; │ GPU │ 256 │ (Bounded, Periodic, Bounded) │ 13.979 ms │ 31.085 ms │ 29.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1403#issuecomment-786398050:9711,benchmark,benchmarks,9711,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1403#issuecomment-786398050,1,['benchmark'],['benchmarks']
Testability,│; │ GPU │ Float64 │ 128 │ 279.110 ms │ 333.392 ms │ 328.209 ms │ 335.085 ms │ 892.30 KiB │ 11580 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┘; [2020/11/26 16:03:50.829] INFO Writing Incompressible_model_benchmarks.html...; Incompressible model CPU -> GPU speedup; ┌─────────────┬─────┬──────────┬─────────┬─────────┐; │ Float_types │ Ns │ speedup │ memory │ allocs │; ├─────────────┼─────┼──────────┼─────────┼─────────┤; │ Float32 │ 32 │ 1.51499 │ 3.28804 │ 6.12735 │; │ Float32 │ 64 │ 1.78816 │ 3.28791 │ 6.13048 │; │ Float32 │ 128 │ 1.7471 │ 3.28791 │ 6.13048 │; │ Float64 │ 32 │ 0.81598 │ 2.97644 │ 6.04071 │; │ Float64 │ 64 │ 0.673082 │ 2.97634 │ 6.04384 │; │ Float64 │ 128 │ 0.775721 │ 2.97634 │ 6.04384 │; └─────────────┴─────┴──────────┴─────────┴─────────┘; ```; Trial 2:; ```; Incompressible model benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ CPU │ Float32 │ 32 │ 3.658 ms │ 3.795 ms │ 3.878 ms │ 4.654 ms │ 247.69 KiB │ 1916 │; │ CPU │ Float32 │ 64 │ 25.066 ms │ 25.346 ms │ 25.454 ms │ 26.454 ms │ 247.69 KiB │ 1916 │; │ CPU │ Float32 │ 128 │ 212.990 ms │ 213.482 ms │ 215.127 ms │ 224.655 ms │ 247.69 KiB │ 1916 │; │ CPU │ Float64 │ 32 │ 4.111 ms │ 4.206 ms │ 4.303 ms │ 5.146 ms │ 299.80 KiB │ 1916 │; │ CPU │ Float64 │ 64 │ 31.135 ms │ 32.233 ms │ 32.367 ms │ 33.781 ms │ 299.80 KiB │ 1916 │; │ CPU │ Float64 │ 128 │ 252.694 ms │ 262.043 ms │ 263.575 ms │ 275.524 ms │ 299.80 KiB │ 1916 │; │ GPU │ Float32 │ 32 │ 2.458 ms │ 2.506 ms │ 2.572 ms │ 3.091 ms │ 814.19 KiB │ 11726 │; │ GPU │ Float32 │ 64 │ 12.548 ms │ 15.949 ms │ 15.599 ms │ 16.169 ms │ 814.38 KiB │ 11746 │; │ GPU │ Float32 │ 128 │ 79.348 ms │ 117.337 ms │ 114.294 ms │ 12,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-734478044:2404,benchmark,benchmarks,2404,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-734478044,1,['benchmark'],['benchmarks']
Testability,"│; │ GPU │ Float64 │ 32 │ 2.859 ms │ 2.923 ms │ 3.025 ms │ 3.987 ms │ 2.80 MiB │ 6914 │ 10 │; │ GPU │ Float64 │ 64 │ 2.912 ms │ 3.101 ms │ 3.308 ms │ 5.368 ms │ 2.78 MiB │ 6993 │ 10 │; │ GPU │ Float64 │ 128 │ 4.894 ms │ 5.019 ms │ 5.360 ms │ 8.565 ms │ 2.80 MiB │ 8667 │ 10 │; │ GPU │ Float64 │ 256 │ 33.569 ms │ 36.266 ms │ 36.029 ms │ 36.883 ms │ 3.24 MiB │ 37307 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴──────────┴────────┴─────────┘; ```. ## Julia 1.5. ```; Oceananigans v0.57.2; Julia Version 1.5.2; Commit 539f3ce943 (2020-09-23 23:17 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-9.0.1 (ORCJIT, cascadelake); GPU: TITAN V; ```. ```; Incompressible model benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬─────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼─────────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 4.905 ms │ 5.116 ms │ 5.237 ms │ 6.262 ms │ 360.44 KiB │ 2142 │ 10 │; │ CPU │ Float64 │ 64 │ 34.327 ms │ 36.419 ms │ 36.188 ms │ 37.507 ms │ 360.44 KiB │ 2142 │ 10 │; │ CPU │ Float64 │ 128 │ 297.567 ms │ 299.404 ms │ 299.856 ms │ 303.081 ms │ 360.44 KiB │ 2142 │ 10 │; │ CPU │ Float64 │ 256 │ 2.786 s │ 2.786 s │ 2.786 s │ 2.787 s │ 360.44 KiB │ 2142 │ 2 │; │ GPU │ Float64 │ 32 │ 2.729 ms │ 2.781 ms │ 2.885 ms │ 3.717 ms │ 839.83 KiB │ 7132 │ 10 │; │ GPU │ Float64 │ 64 │ 2.894 ms │ 3.055 ms │ 3.136 ms │ 4.046 ms │ 879.45 KiB │ 7124 │ 10 │; │ GPU │ Float64 │ 128 │ 4.107 ms │ 4.836 ms │ 4.890 ms │ 6.086 ms │ 964.73 KiB │ 7142 │ 10 │; │ GPU │ Float64 │ 256 │ 21.667 ms │ 35.642 ms │ 34.245 ms │ 35.746 ms │ 1.11 MiB │ 7134 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴──",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-843636118:2231,benchmark,benchmarks,2231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-843636118,1,['benchmark'],['benchmarks']
Usability," +/- ##; =========================================; - Coverage 72.07% 71.5% -0.58% ; =========================================; Files 26 25 -1 ; Lines 1418 1400 -18 ; =========================================; - Hits 1022 1001 -21 ; - Misses 396 399 +3; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/437?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/437/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `78.26% <0%> (-5.26%)` | :arrow_down: |; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/437/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `76.27% <0%> (-3.39%)` | :arrow_down: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/437/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `79.54% <0%> (-2.85%)` | :arrow_down: |; | [src/forcing.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/437/diff?src=pr&el=tree#diff-c3JjL2ZvcmNpbmcuamw=) | | |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/437/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `82.05% <0%> (+0.47%)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/437/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `49.35% <0%> (+0.51%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/437?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/437?src=pr&el=footer). Last update [eb7fb36...bb31965](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/437?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/437#issuecomment-537336121:2239,learn,learn,2239,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/437#issuecomment-537336121,1,['learn'],['learn']
Usability," - Coverage 71.82% 71.4% -0.42% ; =========================================; Files 23 23 ; Lines 1416 1413 -3 ; =========================================; - Hits 1017 1009 -8 ; - Misses 399 404 +5; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `77.47% <100%> (-0.25%)` | :arrow_down: |; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `74.19% <100%> (ø)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `74.48% <100%> (ø)` | :arrow_up: |; | [src/grids.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401/diff?src=pr&el=tree#diff-c3JjL2dyaWRzLmps) | `95.12% <100%> (+0.12%)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `79.06% <55.55%> (-12.05%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401?src=pr&el=footer). Last update [56ca04c...419066a](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/401#issuecomment-531079521:2293,learn,learn,2293,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/401#issuecomment-531079521,1,['learn'],['learn']
Usability," 1682 1708 +26 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1169?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [...closure\_implementations/anisotropic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1169/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2FuaXNvdHJvcGljX2RpZmZ1c2l2aXR5Lmps) | `0.00% <0.00%> (-71.43%)` | :arrow_down: |; | [src/BoundaryConditions/apply\_flux\_bcs.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1169/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9hcHBseV9mbHV4X2Jjcy5qbA==) | `50.00% <0.00%> (-5.56%)` | :arrow_down: |; | [src/Fields/field\_tuples.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1169/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZF90dXBsZXMuamw=) | `71.42% <0.00%> (-2.39%)` | :arrow_down: |; | [...ions/verstappen\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1169/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3ZlcnN0YXBwZW5fYW5pc290cm9waWNfbWluaW11bV9kaXNzaXBhdGlvbi5qbA==) | `76.13% <0.00%> (-1.14%)` | :arrow_down: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1169/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `86.30% <0.00%> (+2.64%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1169?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1169?src=pr&el=footer). Last update [7b029a7...cde2dba](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1169?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1169#issuecomment-725481339:2470,learn,learn,2470,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1169#issuecomment-725481339,1,['learn'],['learn']
Usability," ; > We can explain this all in words, but I thought the approx is _visual_ which is helpful. Even just scanning the document you see, this equation involves an _approximation_. The approx is, in fact, a more precise and correct representation of the problem. We can in fact regard the power method algorithm as predicated on a hypothesis (not an exact theory), which we provide empirical evidence for. This is one of the advantages of the power method that uses the full original system, I think, over more brute force approaches that forcefully remove nonlinear terms.; > ; > It is possible to replace the approx with an `=` and also include all of the nonlinear terms what one would get from the manipulations that lead to the equation for `Phi`. This is precisely what you would do if you were interested in continuing the asymptotic expansion _that linearization implies_ to investigate things like saturation, etc. So there's also a neat pedagogical power in the approx symbol in that it provides a hint for further learning and exploration of the mathematics of the system. I agree with **all** of the above. However, you missed one of my points... my disagreement was mostly of the phrasing. You suggested writing:. > Linear instabilities such as the Kelvin-Helmholtz instability, are described by equations of the form ∂_t Φ + L Φ ≈ 0 ... This statement is wrong --- that was my only objection. When accompanied with the messages you posted above it makes absolutely sense! But would you expect users to infer all these just from the ≈ symbol?. Reading your post made me think. I now suggest the following restructure (I'll present here a skeleton). - first discuss linear instabilities... the fact that Oceananigans.jl won't give you the linear operator but will evolve the full nonlinear system and the ""hack"" to get _approximately linear dynamics_ (I'll use ≈ here ;)) by utilizing `BackgroundFields`+**small amplitude**; - next discuss how we do eigenanalysis of the linear operator (wit",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1125#issuecomment-720166282:1659,learn,learning,1659,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1125#issuecomment-720166282,1,['learn'],['learning']
Usability," <0%> (-0.25%)` | :arrow_down: |; | [src/Solvers/batched\_tridiagonal\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/559/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvYmF0Y2hlZF90cmlkaWFnb25hbF9zb2x2ZXIuamw=) | `100% <0%> (ø)` | |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/559/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `89.23% <0%> (+2.69%)` | :arrow_up: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/559/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `74.35% <0%> (+2.79%)` | :arrow_up: |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/559/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `78.78% <0%> (+4.42%)` | :arrow_up: |; | [src/Diagnostics/cfl.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/559/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2NmbC5qbA==) | `71.42% <0%> (+4.76%)` | :arrow_up: |; | [src/Operators/interpolation\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/559/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9pbnRlcnBvbGF0aW9uX29wZXJhdG9ycy5qbA==) | `64.28% <0%> (+4.76%)` | :arrow_up: |; | ... and [4 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/559/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/559?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/559?src=pr&el=footer). Last update [a511fdd...ef7fb60](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/559?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/559#issuecomment-564502907:3411,learn,learn,3411,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/559#issuecomment-564502907,1,['learn'],['learn']
Usability," > ; > The thing is that `BetaPlane` is also a ""rectilinear Coriolis"" since it's a Coriolis implementation meant for rectilinear grids, no? I'm not very familiar with the implementation of the Coriolis acc in spherical grids, but if I understand correctly you can't use `FPlane` or `BetaPlane` on spherical grids?; > ; > If that's true, maybe we aim for consistency with the rectilinear grids for now and rename things to; > ; > * `RectilinearGridFPlane` (this one); > * `RectilinearGridBetaPlane` (what is now `BetaPlane`); > * Keep `FPlane` for now because, like you said, it's an easy name that's very commonly used; > ; > I do think that it's important to keep ""f-plane"" in the name of this implementation somewhere instead of just ""Coriolis"" because there are different approximations one can make when implementing the Coriolis acc, so it'd help to be specific. The f-plane refers to a tangent plane approximation for a fluid contained in a spherical shell. However, this type is more general than that case (this was also a problem with the undecorated `FPlane` type), and can be used to model any rotating fluid in a rectilinear domain with an arbitrary axis of rotation. Therefore, I argue not using `FPlane` in the name of this type. `BetaPlane` has no meaning outside of rectilinear geometries, therefore I propose not adding the superfluous `RectilinearGrid` in front of `BetaPlane`. As for `Grid` or not, the meaning of `RectilinearGrid` is specific to Oceananigans. However, the term ""rectilinear"" has a distinct meaning apart from ""grids"". Here, I think its clear if the name refers to the coordinate system (rather than the grid or mesh), I think I prefer simply ""RectilinearCoriolis"". Otherwise, we will also need to consider how to devise a similar name for ""HydrostaticSphericalCoriolis"" that somehow references the handful of grid types that we permit for in spherical domains. That said, RectilinearCoriolis is not perfect (its obscure), so I think there is room for improvement.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-887649059:1959,clear,clear,1959,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-887649059,4,"['clear', 'simpl']","['clear', 'simply']"
Usability," > julia> grid = RectilinearGrid(size = (4, 4, 4), x=(0,1), y=(0,1), z=0:0.25:1); > 4×4×4 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; > ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.25; > ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.25; > └── Bounded z ∈ [0.0, 1.0] variably spaced with min(Δz)=0.25, max(Δz)=0.25; > ; > julia> grid.Δzᵃᵃᶠ[1:grid.Nz+1]; > 5-element Vector{Float64}:; > 0.25; > 0.25; > 0.25; > 0.25; > 0.25; > ```; > ; > To be in line with [`xgcm`'s standards for metrics](https://github.com/xgcm/xgcm/issues/306#issuecomment-776124591) the output in the above case (considering only the ""wet"" or interior or fluid-filled cells when calculating `Δz`) should be; > ; > ```julia; > julia> grid.Δzᵃᵃᶠ[1:grid.Nz+1]; > 5-element Vector{Float64}:; > 0.125; > 0.25; > 0.25; > 0.25; > 0.125; > ```; > ; > since the first and last spacings on a bounded grid are ""half inside the domain and half outside"". Are you sure? For immersed boundaries, this would mean that all the metrics must be 3D arrays even when the grid directions are separable --- greatly inflating the size of your output file. > Or maybe there's a way to use abstract operation metrics to do this that I'm not aware?. It is simple. Write a `KernelFunctionOperation` that checks if a node is `peripheral_node`. If `true`, divide the metric by 2, otherwise, return the metric unchanged. However, as noted above, I'm not sure this is what you want. Perhaps there is a purpose to the convention that divides the cell sizes on the boundary by 2. However, I'm worried this could be misleading regarding how the staggered finite volume grid and its diagnostics are interpreted. Another concern is that modifying metrics prior to output will lead to difficulties in reproducible diagnostics in the future between xgcm computations and native Oceanangians computations. So in this case I hope we can keep things simple and simply save whatever `xspacings`, etc outputs, if possible.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2652#issuecomment-1516655561:1998,simpl,simple,1998,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2652#issuecomment-1516655561,6,['simpl'],"['simple', 'simply']"
Usability," Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `53.33% <0%> (-3.81%)` | :arrow_down: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `86.36% <0%> (-4.12%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `84.02% <0%> (-0.03%)` | :arrow_down: |; | [src/equation\_of\_state.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179/diff?src=pr&el=tree#diff-c3JjL2VxdWF0aW9uX29mX3N0YXRlLmps) | `100% <0%> (ø)` | :arrow_up: |; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `0% <0%> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `86.07% <0%> (+4.89%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179?src=pr&el=footer). Last update [e6edea5...33d4abc](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/179#issuecomment-483870541:2499,learn,learn,2499,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/179#issuecomment-483870541,1,['learn'],['learn']
Usability," Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | :arrow_up: |; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `0% <0%> (ø)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `53.33% <0%> (-3.81%)` | :arrow_down: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `86.36% <0%> (-4.12%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `84.02% <0%> (-0.03%)` | :arrow_down: |; | [src/equation\_of\_state.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179/diff?src=pr&el=tree#diff-c3JjL2VxdWF0aW9uX29mX3N0YXRlLmps) | `100% <0%> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `86.07% <0%> (+4.89%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179?src=pr&el=footer). Last update [e6edea5...33d4abc](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/179?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/179#issuecomment-483870543:2493,learn,learn,2493,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/179#issuecomment-483870543,1,['learn'],['learn']
Usability," [#709](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/709?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8e3c27504be68ca06bacc7502cd6095ae390f8c6?src=pr&el=desc) will **increase** coverage by `0.12%`.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/709/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/709?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #709 +/- ##; ==========================================; + Coverage 78.55% 78.68% +0.12% ; ==========================================; Files 122 122 ; Lines 2485 2486 +1 ; ==========================================; + Hits 1952 1956 +4 ; + Misses 533 530 -3; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/709?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [...rc/BoundaryConditions/field\_boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/709/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9maWVsZF9ib3VuZGFyeV9jb25kaXRpb25zLmps) | `92% <100%> (ø)` | :arrow_up: |; | [src/Fields/field.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/709/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `79.76% <100%> (+3.85%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/709?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/709?src=pr&el=footer). Last update [8e3c275...319cd72](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/709?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/709#issuecomment-600648142:1671,learn,learn,1671,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/709#issuecomment-600648142,1,['learn'],['learn']
Usability," [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/116?src=pr&el=h1) Report; > Merging [#116](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/116?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/3307031283dab154d32c071c47d9e275f1a6e17e?src=pr&el=desc) will **increase** coverage by `0.15%`.; > The diff coverage is `0%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/116/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/116?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #116 +/- ##; ==========================================; + Coverage 52.71% 52.86% +0.15% ; ==========================================; Files 19 19 ; Lines 645 645 ; ==========================================; + Hits 340 341 +1 ; + Misses 305 304 -1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/116?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/116/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `67.96% <0%> (ø)` | :arrow_up: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/116/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `81.81% <0%> (+9.09%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/116?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/116?src=pr&el=footer). Last update [3307031...f038da3](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/116?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/116#issuecomment-470781091:1566,learn,learn,1566,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/116#issuecomment-470781091,1,['learn'],['learn']
Usability," [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/170?src=pr&el=h1) Report; > Merging [#170](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/170?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/7af0031cecb03b5d774aec4212e031f9465f0952?src=pr&el=desc) will **decrease** coverage by `0.63%`.; > The diff coverage is `0%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/170/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/170?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #170 +/- ##; ==========================================; - Coverage 69.43% 68.79% -0.64% ; ==========================================; Files 18 18 ; Lines 651 657 +6 ; ==========================================; Hits 452 452 ; - Misses 199 205 +6; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/170?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/170/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | :arrow_up: |; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/170/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `0% <0%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/170?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/170?src=pr&el=footer). Last update [7af0031...8bceaca](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/170?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/170#issuecomment-481370275:1566,learn,learn,1566,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/170#issuecomment-481370275,1,['learn'],['learn']
Usability," [src/Operators/divergence\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/551/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9kaXZlcmdlbmNlX29wZXJhdG9ycy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/551/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `86.11% <ø> (ø)` | :arrow_up: |; | [src/TurbulenceClosures/diffusion\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/551/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9kaWZmdXNpb25fb3BlcmF0b3JzLmps) | `100% <ø> (ø)` | :arrow_up: |; | [src/Operators/laplacian\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/551/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9sYXBsYWNpYW5fb3BlcmF0b3JzLmps) | `14.28% <ø> (-85.72%)` | :arrow_down: |; | [src/Operators/areas\_and\_volumes.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/551/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9hcmVhc19hbmRfdm9sdW1lcy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/Operators/difference\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/551/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9kaWZmZXJlbmNlX29wZXJhdG9ycy5qbA==) | `65.21% <ø> (ø)` | :arrow_up: |; | ... and [13 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/551/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/551?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/551?src=pr&el=footer). Last update [3f34887...806536a](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/551?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/551#issuecomment-564302044:3586,learn,learn,3586,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/551#issuecomment-564302044,1,['learn'],['learn']
Usability," `100.00% <100.00%> (ø)` | |; | [src/Coriolis/f\_plane.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL2ZfcGxhbmUuamw=) | `57.14% <0.00%> (-22.86%)` | :arrow_down: |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `66.66% <0.00%> (-8.34%)` | :arrow_down: |; | [src/Buoyancy/nonlinear\_equation\_of\_state.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L25vbmxpbmVhcl9lcXVhdGlvbl9vZl9zdGF0ZS5qbA==) | `72.00% <0.00%> (-3.00%)` | :arrow_down: |; | [src/TimeSteppers/generic\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9nZW5lcmljX3RpbWVfc3RlcHBpbmcuamw=) | `92.59% <0.00%> (-2.65%)` | :arrow_down: |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `87.50% <0.00%> (-1.39%)` | :arrow_down: |; | [src/TimeSteppers/quasi\_adams\_bashforth\_2.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9xdWFzaV9hZGFtc19iYXNoZm9ydGhfMi5qbA==) | `84.84% <0.00%> (ø)` | |; | ... and [7 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947?src=pr&el=footer). Last update [10949b0...b9ee883](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/947?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/947#issuecomment-693510608:3410,learn,learn,3410,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/947#issuecomment-693510608,1,['learn'],['learn']
Usability," `] status -m`?. Was there anything more printed above the message that precompilation; failed?. One thing you might want to try is using Julia 1.10, instead of 1.9, but; right now I don't have information to pinpoint what is causing the; segmentation fault. On Wed, Jul 17, 2024, 12:23 Logan Knudsen ***@***.***> wrote:. > Update: I have been able to reduce the error to be a procompiling error in; > oceananigans.jl:; >; > ERROR: LoadError: Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to ""/glade/u/home/knudsenl/.julia/compiled/v1.9/Oceananigans/jl_AMNEzH"".; > Stacktrace:; > [1] error(s::String); > @ Base ./error.jl:35; > [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::IO, internal_stdout::IO, keep_loaded_modules::Bool); > @ Base ./loading.jl:2300; > [3] compilecache; > @ ./loading.jl:2167 [inlined]; > [4] _require(pkg::Base.PkgId, env::String); > @ Base ./loading.jl:1805; > [5] _require_prelocked(uuidkey::Base.PkgId, env::String); > @ Base ./loading.jl:1660; > [6] macro expansion; > @ ./loading.jl:1648 [inlined]; > [7] macro expansion; > @ ./lock.jl:267 [inlined]; > [8] require(into::Module, mod::Symbol); > @ Base ./loading.jl:1611; > in expression starting at /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/testcode.jl:1; >; > I have been trying to make sure that everything is up to date, and I am; > running on Julia version 1.9.2. My code is just; >; > using Oceananingans; >; > as I have been trying to get the library to loas properly. Does anyone; > have any experience with this error or does it make things any clearer?; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233710372>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AABDO2XAIMUIHCDCBIJA4NLZM2K75AVCNFSM6AAAAABK643UJWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDEMZTG4YTAMZXGI>; > .; > You are receiving this because you commented.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233731098:1672,clear,clearer,1672,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233731098,2,['clear'],['clearer']
Usability," `y` is north-south).; > ; > Thanks for the suggestion. That was kind of the API for `NonTradFPlane`. I actually think three modes is kinda overkill and it makes the constructor function unnecessarily complicated (which is why I simplified it this time), especially since it's really not hard to calculate one mode from another one. I'd suggest keeping two of them as a compromise: ""general rotation"" (to match the API in `Buoyancy`) and ""tangent plane"". What do you think?; > ; > > I think `GeneralFPlane` is ambiguous, so I propose using a more specific name.; > ; > I completely agree. I used `GeneralFPlane` more as placeholder. But as you pointed out in #1372, `ConstantBackgroundRotation` is also kinda ambiguous since every rotation we have is technically a constant background rotation at its core. How about get descriptive and call it `ArbitraryAxisFPlane`?. I made my suggestion because I disagree that supporting those keyword arguments is overkill. I am arguing that the complexity of the constructor is justified because. 1) not supporting this API moves part of the ""complexity"" from the constructor into user scripts, which is very undesirable in general; 2) having a consistent API with `FPlane` and `BetaPlane` (which both support a `latitude` keyword argument) is important; 3) I think it really is a useful and friendly simplification to abstract the projection of the rotation axis into a plane tangent with a spherical surface (I have personally benefited from this abstraction for setting up examples like the one proposed in #1744, which I feel implies that many other users will also benefit). As for a name, maybe `RectilinearCoriolis`? This contrasts with `BetaPlane`, which is specific to rectilinear grids but isn't a constant background rotation rate, and `HydrostaticSphericalCoriolis`, which is for hydrostatic fluids in spherical shells. `FPlane` overlaps but we can concede this point because it's so common (and perhaps discuss eliminating `FPlane` in a future PR).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-887606452:1787,simpl,simplification,1787,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-887606452,2,['simpl'],['simplification']
Usability," factor of `sqrt(2)` snuck into our constant. As for _clarification_, I don't have much to offer. Perhaps the constant was taken from some reference that used a different formulation than either us or Pressel et al. 2015. Nobody has submitted a validation test for this closure so I don't think we know how it performs. As a historical note, the paper cited by both Pressel et al (2015) and us is Lilly (1962), which does indeed use the same formulation:. ![image](https://user-images.githubusercontent.com/15271942/127507507-c7d11dfc-733a-4472-8216-dca4e5844b3f.png). where. ![image](https://user-images.githubusercontent.com/15271942/127507737-94aa05d4-6fa5-4d38-9a9d-b1bbcc8a1e79.png). @tomchor I can't tell if the formula you've pasted is actually different from ours (or what the definition of `|S|` is). Where does it come from?. It'd be fine to change the constant because there's no validation test. So the best we can do is theorize, and theorization on this issue suggests changing the default to `C=0.17`. If one wanted to set up a validation test, it could be nice to reproduce [Compte-Bellot and Corrsin (1964)](https://www.cambridge.org/core/journals/journal-of-fluid-mechanics/article/abs/simple-eulerian-time-correlation-of-fulland-narrowband-velocity-signals-in-gridgenerated-isotropic-turbulence/A3D7B0DD621DE46CB6CC543F65A66F93) (this wasn't possible when the closures were written because we didn't support triply periodic domains, but is possible now). This could also be used to validate Anisotropic Minimum Dissipation. Here's a figure with such a comparison from [Rozema et al 2015](https://aip.scitation.org/doi/pdf/10.1063/1.4928700):. ![image](https://user-images.githubusercontent.com/15271942/127508527-e5f7d150-56c4-4949-ad8e-90d67fdbee64.png). I believe for shear flows it has also been found that the constant needs to be as small as `C=0.1` or smaller? It'd be nice to mention and cite these in the docstring as well, if we can find those references. Hope that helps!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1907#issuecomment-889189927:3028,simpl,simple-eulerian-time-correlation-of-fulland-narrowband-velocity-signals-in-gridgenerated-isotropic-turbulence,3028,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1907#issuecomment-889189927,2,['simpl'],['simple-eulerian-time-correlation-of-fulland-narrowband-velocity-signals-in-gridgenerated-isotropic-turbulence']
Usability," get around to implementing boundary layer closures. We have a tridiagonal solver that works on the GPU, so in some respects the hard work is already done for this problem. 3. Closures for LES and ocean modeling (Dynamic Smagorinsky, Deardorff, k-epsilon, Gent-McWilliams, convective adjustment (?) etc --- physics). We have a need to implement new turbulence closures new and old alike. Gent-McWilliams is probably easy since we already have a Leith closure implemented which calculates the tensor needed to rotate the diffusivity into an isopycnal coordinate. The others are a bit more challenging. 4. Extensive profiling and benchmarking on the GPU to identify bottlenecks / places for improvement in the algorithm (numerics). We might be able to make the code a lot faster (but we aren't sure). 5. A solver for hydrostatic problems with a free surface that uses a split-explicit time-integration method. This is notoriously tricky, but we've made a lot of progress on this for the purposes of the ClimateMachine and it might be interesting to translate what we've learned into Oceananigans. There's also some minor package stuff that I want to work on, such as refactoring the output writer (#963), improving logging / feedback while oceananigans builds a model or runs a simulation (#1013), getting arrays with named axes to work (#457), and figuring out what's going wrong with models that have `Flat` dimensions (#1024). A more fun project is to come up with cool plotting recipes in 1D, 2D, and 3D (!) We'd like to show people how to use Makie (for example) to create really cool visualizations / animations of turbulence. The examples do some animation, but more complicated stuff (such as 3D contourf plots, or volume rendering) might require dedicated scripts. @navidcy and I have also discussed projects to implement 1) a shallow water model using Oceananigans functionality and 2) a quasi-geostrophic model in Oceananigans (which would use the tridiagonal solver I mentioned earlier). Wha",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724262281:2557,learn,learned,2557,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724262281,1,['learn'],['learned']
Usability," get this feature is to refactor the output writers to have a more generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor so that. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L176. becomes. ```julia; filepath = joinpath(dir, fil",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:1159,user experience,user experience,1159,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793,2,['user experience'],['user experience']
Usability," graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/856/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/856?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #856 +/- ##; ==========================================; + Coverage 70.84% 70.99% +0.14% ; ==========================================; Files 187 188 +1 ; Lines 5180 5230 +50 ; ==========================================; + Hits 3670 3713 +43 ; - Misses 1510 1517 +7 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/856?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/856/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `71.05% <0.00%> (-3.95%)` | :arrow_down: |; | [src/Diagnostics/Diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/856/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL0RpYWdub3N0aWNzLmps) | `100.00% <ø> (ø)` | |; | [src/Diagnostics/windowed\_time\_average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/856/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL3dpbmRvd2VkX3RpbWVfYXZlcmFnZS5qbA==) | `84.37% <84.37%> (ø)` | |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/856/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | `93.33% <100.00%> (+1.02%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/856?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/856?src=pr&el=footer). Last update [b2c5393...d7188c2](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/856?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/856#issuecomment-674243275:1967,learn,learn,1967,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/856#issuecomment-674243275,1,['learn'],['learn']
Usability, into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/d94a55d358887c35c146a21c236902df37b0b4ee&el=desc) will **increase** coverage by `3.88%`.; > The diff coverage is `0.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/760/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/760?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #760 +/- ##; ==========================================; + Coverage 70.97% 74.86% +3.88% ; ==========================================; Files 124 124 ; Lines 2491 2522 +31 ; ==========================================; + Hits 1768 1888 +120 ; + Misses 723 634 -89 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/760?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/SurfaceWaves.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/760/diff?src=pr&el=tree#diff-c3JjL1N1cmZhY2VXYXZlcy5qbA==) | `0.00% <0.00%> (ø)` | |; | [src/Forcing/simple\_forcing.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/760/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvc2ltcGxlX2ZvcmNpbmcuamw=) | `81.81% <0.00%> (-18.19%)` | :arrow_down: |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/760/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `88.88% <0.00%> (-11.12%)` | :arrow_down: |; | [src/Utils/launch\_config.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/760/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL2xhdW5jaF9jb25maWcuamw=) | `95.23% <0.00%> (-4.77%)` | :arrow_down: |; | [...ntations/rozema\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/760/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3JvemVtYV9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `30.00% <0.00%> (-4.10%)` | :arrow_down: |; | [src/Solvers/batched\_tridiagonal\_solver.jl](https://codecov.io/gh/CliMA/Oc,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/760#issuecomment-633076617:1179,simpl,simple,1179,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/760#issuecomment-633076617,1,['simpl'],['simple']
Usability," locations that are on or external to the immersed domain, but _not_ external to the underlying grid domain (we need this so that we don't apply immersed boundary conditions at all peripheral nodes).; - `immersed_cell` is now the name of the function `is_immersed` --- immersed boundary implementations define this to obtain correct logic for boundary conditions. We then extend `external_cell` to cover both the external cells of the underlying bounded domain and the immersed cells. I think there's still a fair amount of work to do on this interface but hopefully this is a good step forward. Here's a few more thoughts:. * It seems that we should really use `Bounded` topology to be synonymous with ""impenetrable"". This might help us disentangle a few issues (eg satisfying impenetrability, correct divergences, etc.) I think we are discovering that in some cases its better to hard code certain ""assumed boundary conditions"" directly into operators, such as impenetrable conditions (considering complex domains is the key to realize the right abstractions here, since there are many simple solutions for non-complex domains and no obvious way to distinguish their tradeoffs). This means that we need to ""assume"" boundary conditions based on grid topology (information centralized on the grid), rather than requiring knowledge of the field boundary conditions (information scattered throughout the fields); * Related to the above, when we support ""open"" boundaries, I think we may actually want an ""Open"" topology that functions similarly to the topologies we use for distributed models work (perhaps, in fact, we can reuse those abstractions). I think the design assumed (though it was never implemented) that we could use ""open boundary condition"" for open boundaries, rather than changing the topology. But with complex domains, it's helpful to _assume_ certain boundary conditions based on _grid topology_ (rather than boundary conditions applied to fields). ImmersedBoundaries are hard-coded",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100699430:2568,simpl,simple,2568,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100699430,2,['simpl'],['simple']
Usability," same grid wrapped around an `ImmersedBoundaryGrid` on `main`, when calling `zspacings()` we get the error at the top comment (`MethodError: no method matching`; which this PR aims to fix). The call to `zspacing()` works the same way as with `RectilinearGrid`, with the exception of an extra dispatch [here](https://github.com/CliMA/Oceananigans.jl/blob/56fc69bcb08623424afe25e39ae616c29208095e/src/ImmersedBoundaries/immersed_grid_metrics.jl#L16-L31). ---. ### Summary of the PR as of this post. This PR is originally trying to fix the issue with `zspacings(::IBG)` simply by adding. ```julia; zspacings(grid::IBG, args...; kwargs...) = zspacings(grid.underlying_grid, args...; kwargs...); ```. If I understand correctly, @glwagner's point is that this is wrong in cases where cells have a fraction of ""wet"" volume and a fraction of ""immersed solid"" volume. (For now the two such cases in sight are `PartialCellBottom` and `CutCellBottom` (for which there's open PR https://github.com/CliMA/Oceananigans.jl/pull/3146).). Again, if I understand correctly, the simple solution would be to redirect `zspacings()` calls to. 1. Create a `KernelFunctionOperation` using `zspacing()`, which we know has the correct behavior for all cases; 2. Calculate and collect the values in a Array; 3. Return to user. The main challenge here (imo) is that . - if we wanna keep the user-interface simple (e.g. return a float or a 1D array from calls to `zspacings(::RectilinearGrid)` instead of a `Field` or a 3D array), then we lose consistency (because in the general case a call to `zspacings(::ImmersedBoundaryGrid)` _must_ return a 3D array (or `Field`, or `AbstractOp`...)).; - if we wanna keep the user-interface consistent (i.e. always return the same type of object) then we lose on simplicity (e.g. a call to `zspacings(::RectilinearGrid)` would always return _something_ 3D, even if the grid is regular). @navidcy @glwagner is this a fair assessment of the situation? Feel free to edit the text above if not.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-1636851041:2101,simpl,simple,2101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-1636851041,6,['simpl'],"['simple', 'simplicity']"
Usability," tracers: b; ├── closure: ScalarDiffusivity{ExplicitTimeDiscretization}(ν=BinaryOperation at (Center, Center, Center), κ=(b=UnaryOperation at (Center, Center, Center),)); ├── buoyancy: BuoyancyTracer with -ĝ = ZDirection; └── coriolis: Nothing; ```. note the type of `model.closure`. (Also note this doesn't work with `HydrostaticFreeSurfaceModel` apparently... we need to fix that.). One downside of this method is that it precludes `VerticallyImplicitTimeDiscretization()`: because we use a predictor-corrector method for implicit time discretization, diffusivities that are treated implicitly _must_ be precomputed. ## Subtleties. There's more. There are subtleties peculiar to using `Ri` in a closure, because `Ri` easily becomes NaN when both the buoyancy gradient and shear are zero. The usual solution to this for ocean modeling is to use the ""hack"" that 0/0 = 0. In other words, NaNs are intercepted and set to 0. There are again a few solutions to this. One is simply to set all `NaN` to zero in side the function that computes `Ri`, eg. ```julia; u, v, w = model.velocities; b = model.tracers.b; Ri_op = @at (Center, Center, Center) ∂z(b) / (∂z(u)^2 + ∂z(v)^2). """""" Compute the Richardson number and store in `Ri`. """"""; function compute_Ri!(sim); Ri .= Ri_op. # Zero out NaNs; Ri_parent = parent(Ri); parent(Ri_parent)[isnan.(Ri_parent)] .= 0. fill_halo_regions!(Ri, sim.model.architecture); return nothing; end; ```. Other possibilities are 1) use `ConditionalOperation` to intercept `0/0` and set them to 0 _during_ the `Ri` computation (I don't have the code for that off the top of my head so I'll have to look into it and post later) or 2) write a kernel function (this requires using more primitive operators than `AbstractOperations`, and also being careful about staggered grid locations) to use with `KernelFunctionOperation` that does the necessary checking. There's a lot of great examples of how to use `KernelFunctionOperation` here: https://github.com/tomchor/Oceanostics.jl.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1065995186:4169,simpl,simply,4169,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1065995186,2,['simpl'],['simply']
Usability," | :arrow_up: |; | [src/Buoyancy/linear\_equation\_of\_state.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/995/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L2xpbmVhcl9lcXVhdGlvbl9vZl9zdGF0ZS5qbA==) | `29.41% <0.00%> (+1.63%)` | :arrow_up: |; | [src/OutputWriters/jld2\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/995/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvamxkMl9vdXRwdXRfd3JpdGVyLmps) | `95.83% <0.00%> (+1.95%)` | :arrow_up: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/995/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `79.72% <0.00%> (+2.09%)` | :arrow_up: |; | [src/Fields/reduced\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/995/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9yZWR1Y2VkX2ZpZWxkLmps) | `87.87% <0.00%> (+2.58%)` | :arrow_up: |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/995/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `91.80% <0.00%> (+2.91%)` | :arrow_up: |; | [src/OutputWriters/windowed\_time\_average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/995/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvd2luZG93ZWRfdGltZV9hdmVyYWdlLmps) | `100.00% <0.00%> (+2.94%)` | :arrow_up: |; | ... and [30 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/995/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/995?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/995?src=pr&el=footer). Last update [e808a82...8350069](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/995?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/995#issuecomment-700325228:3396,learn,learn,3396,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/995#issuecomment-700325228,1,['learn'],['learn']
Usability," | :arrow_up: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/343/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `83.33% <ø> (-16.67%)` | :arrow_down: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/343/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `92.68% <ø> (ø)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/343/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `74.68% <ø> (-3.1%)` | :arrow_down: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/343/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `31.34% <0%> (-20.51%)` | :arrow_down: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/343/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `46.98% <34.88%> (-19.02%)` | :arrow_down: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/343/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `40% <0%> (-57.62%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/343/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `68.33% <0%> (-1.67%)` | :arrow_down: |; | ... and [2 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/343/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/343?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/343?src=pr&el=footer). Last update [ebe37f6...149079d](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/343?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519329387:2844,learn,learn,2844,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519329387,1,['learn'],['learn']
Usability," | [src/OutputWriters/OutputWriters.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1081/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvT3V0cHV0V3JpdGVycy5qbA==) | `60.00% <0.00%> (-6.67%)` | :arrow_down: |; | [src/OutputWriters/output\_writer\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1081/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `51.92% <0.00%> (-5.53%)` | :arrow_down: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1081/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `87.89% <0.00%> (-5.13%)` | :arrow_down: |; | [src/OutputWriters/windowed\_time\_average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1081/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvd2luZG93ZWRfdGltZV9hdmVyYWdlLmps) | `81.01% <0.00%> (-3.61%)` | :arrow_down: |; | [src/Grids/grid\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1081/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `60.63% <0.00%> (-3.20%)` | :arrow_down: |; | [src/OutputWriters/jld2\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1081/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvamxkMl9vdXRwdXRfd3JpdGVyLmps) | `89.41% <0.00%> (-1.16%)` | :arrow_down: |; | ... and [6 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1081/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1081?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1081?src=pr&el=footer). Last update [b11f047...f5d564f](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1081?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1081#issuecomment-712544664:3374,learn,learn,3374,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1081#issuecomment-712544664,1,['learn'],['learn']
Usability," | `52.94% <52.94%> (ø)` | |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `81.25% <66.66%> (+20.83%)` | :arrow_up: |; | [src/Grids/grid\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `87.27% <70.00%> (-4.73%)` | :arrow_down: |; | [src/Fields/reduced\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9yZWR1Y2VkX2ZpZWxkLmps) | `76.47% <76.47%> (ø)` | |; | [src/Fields/new\_data.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9uZXdfZGF0YS5qbA==) | `76.92% <100.00%> (+10.25%)` | :arrow_up: |; | [src/Utils/kernel\_launching.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL2tlcm5lbF9sYXVuY2hpbmcuamw=) | `100.00% <100.00%> (ø)` | |; | [test/test\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZpZWxkcy5qbA==) | `100.00% <100.00%> (ø)` | |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `85.71% <0.00%> (-3.18%)` | :arrow_down: |; | ... and [3 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920?src=pr&el=footer). Last update [01b2481...cd8c943](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/920?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/920#issuecomment-689748446:3079,learn,learn,3079,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/920#issuecomment-689748446,1,['learn'],['learn']
Usability,"""regridding"" is conservative, ie the volume integral of the target field should be the same as the source field. However because of that, we can only regrid in one direction at a time right now. If you want to regrid in multiple directions, you need to form intermediate fields. General conservative is actually possible, just a bit more difficult. `interpolate!` does not conserve global integrals. It's just simple linear interpolation. Usually `interpolate!` is good enough.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-1946394580:410,simpl,simple,410,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-1946394580,2,['simpl'],['simple']
Usability,"# Progress update. I decided to take a stab at the simplest case: triply-periodic on the CPU. Surprisingly I was able to get a distributed `IncompressibleModel` running just using multiple dispatch without having to modify any existing code, although a cleaner design might require a bit of refactoring. PR is still a work-in-progress so it's a bit messy, the purpose was to demonstrate a proof of concept. MPI.jl and PencilFFTs.jl are new dependencies but I haven't updated the Project.toml yet. So far this PR adds some new infrastructure:; 1. Distributed/multi-architectures (e.g. `MultiCPU`) that know about rank connectivity.; 2. Halo communication between ranks is done via multiple dispatch on a new `HaloCommunicationBC` type.; 3. A `DistributedFFTBasedPoissonSolver` for solving Poisson equations across ranks.; 4. A `DistributedModel` that creates local grids for each ranks, injects halo communication BCs, and passes the distributed pressure solver to a local `IncompressibleModel`. I also added some simple tests for multi architecture rank connectivity, local grid construction, injection of halo communication BCs, and halo communication (testing x, y, and z slab decompositions). Also added tests for the distributed Poisson solver ensuring the solution is divergence-free. Next step for testing would probably be to test that the code handles `Bounded` topologies correctly then add tests that reproduce the regression tests but on multiple ranks and ensure the output matches the regression output. ## Some notes. ### Domain decomposition. Domain decomposition is supported and tested in x, y, and z. But for `IncompressibleModel` z-decomposition won't work right now because vertical integrals are done inside GPU kernels (so we probably don't want to decompose in z). And PencilFFTs.jl supports decompositions in dimensions 2 and 3 (since dimension 1 FFTs are the fastest). As a result, right now Oceananigans.jl only supports slab decompositions in y although we should figure out",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-775301066:51,simpl,simplest,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-775301066,1,['simpl'],['simplest']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1029?src=pr&el=h1) Report; > Merging [#1029](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1029?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/6b2cea36d5782f5a73402b97f4d7476de9237c93?el=desc) will **not change** coverage.; > The diff coverage is `0.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1029/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1029?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1029 +/- ##; =======================================; Coverage 70.69% 70.69% ; =======================================; Files 226 226 ; Lines 6648 6648 ; =======================================; Hits 4700 4700 ; Misses 1948 1948 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1029?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/field\_slicer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1029/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvZmllbGRfc2xpY2VyLmps) | `35.71% <0.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1029?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1029?src=pr&el=footer). Last update [6b2cea3...019e144](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1029?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1029#issuecomment-705172986:1320,learn,learn,1320,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1029#issuecomment-705172986,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1031?src=pr&el=h1) Report; > Merging [#1031](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1031?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/6b2cea36d5782f5a73402b97f4d7476de9237c93?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1031/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1031?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1031 +/- ##; =======================================; Coverage 70.69% 70.69% ; =======================================; Files 226 226 ; Lines 6648 6648 ; =======================================; Hits 4700 4700 ; Misses 1948 1948 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1031?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1031?src=pr&el=footer). Last update [6b2cea3...29417b7](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1031?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1031#issuecomment-705502624:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1031#issuecomment-705502624,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1033?src=pr&el=h1) Report; > Merging [#1033](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1033?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/d27436466d12b664a8ceb0f40c0d1daf90e51f0b?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1033/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1033?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1033 +/- ##; =======================================; Coverage 70.69% 70.69% ; =======================================; Files 226 226 ; Lines 6648 6648 ; =======================================; Hits 4700 4700 ; Misses 1948 1948 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1033?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Utils/Utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1033/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL1V0aWxzLmps) | `40.00% <ø> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1033?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1033?src=pr&el=footer). Last update [d274364...aee75a5](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1033?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1033#issuecomment-706284305:1278,learn,learn,1278,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1033#issuecomment-706284305,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1066?src=pr&el=h1) Report; > Merging [#1066](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1066?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/9cfb568ec3a8e6f7efe8c7c41300ea9673c6b103?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1066/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1066?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1066 +/- ##; =======================================; Coverage 54.75% 54.75% ; =======================================; Files 160 160 ; Lines 3866 3866 ; =======================================; Hits 2117 2117 ; Misses 1749 1749 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1066?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1066?src=pr&el=footer). Last update [9cfb568...77f364d](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1066?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1066#issuecomment-708504133:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1066#issuecomment-708504133,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1072?src=pr&el=h1) Report; > Merging [#1072](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1072?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/71cd9533b05d8a4efbc948ae924c513b25201319?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1072/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1072?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1072 +/- ##; =======================================; Coverage 56.73% 56.73% ; =======================================; Files 161 161 ; Lines 3791 3791 ; =======================================; Hits 2151 2151 ; Misses 1640 1640 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1072?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1072?src=pr&el=footer). Last update [71cd953...e911cc8](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1072?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1072#issuecomment-710675908:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1072#issuecomment-710675908,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1074?src=pr&el=h1) Report; > Merging [#1074](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1074?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/27265b8f54692d4232155c30425611af4ef2b84a?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1074/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1074?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1074 +/- ##; =======================================; Coverage 56.91% 56.91% ; =======================================; Files 162 162 ; Lines 3811 3811 ; =======================================; Hits 2169 2169 ; Misses 1642 1642 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1074?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/TurbulenceClosures/TurbulenceClosures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1074/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9UdXJidWxlbmNlQ2xvc3VyZXMuamw=) | `4.54% <ø> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1074?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1074?src=pr&el=footer). Last update [27265b8...9deb091](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1074?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1074#issuecomment-710872076:1339,learn,learn,1339,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1074#issuecomment-710872076,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1077?src=pr&el=h1) Report; > Merging [#1077](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1077?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/b11f047f53d2473a1c10020c8323171b4c76c340?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1077/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1077?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1077 +/- ##; =======================================; Coverage 57.47% 57.47% ; =======================================; Files 161 161 ; Lines 3800 3800 ; =======================================; Hits 2184 2184 ; Misses 1616 1616 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1077?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1077?src=pr&el=footer). Last update [b11f047...688feaa](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1077?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1077#issuecomment-711056749:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1077#issuecomment-711056749,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1079?src=pr&el=h1) Report; > Merging [#1079](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1079?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/b11f047f53d2473a1c10020c8323171b4c76c340?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1079/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1079?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1079 +/- ##; =======================================; Coverage 57.47% 57.47% ; =======================================; Files 161 161 ; Lines 3800 3800 ; =======================================; Hits 2184 2184 ; Misses 1616 1616 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1079?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1079?src=pr&el=footer). Last update [b11f047...fd6e173](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1079?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1079#issuecomment-711475933:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1079#issuecomment-711475933,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1084?src=pr&el=h1) Report; > Merging [#1084](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1084?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/9cd874c3e09003fcebe0a4a6cb1c31f053fbaeee?el=desc) will **increase** coverage by `0.02%`.; > The diff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1084/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1084?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1084 +/- ##; ==========================================; + Coverage 56.73% 56.76% +0.02% ; ==========================================; Files 161 161 ; Lines 3791 3793 +2 ; ==========================================; + Hits 2151 2153 +2 ; Misses 1640 1640 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1084?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/field\_slicer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1084/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvZmllbGRfc2xpY2VyLmps) | `71.42% <100.00%> (+1.73%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1084?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1084?src=pr&el=footer). Last update [9cd874c...097f24f](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1084?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1084#issuecomment-713178229:1375,learn,learn,1375,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1084#issuecomment-713178229,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1092?src=pr&el=h1) Report; > Merging [#1092](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1092?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/ed1152d5ba6e7dd4f152c6af795dc52b372231a2?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1092/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1092?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1092 +/- ##; =======================================; Coverage 56.76% 56.76% ; =======================================; Files 161 161 ; Lines 3793 3793 ; =======================================; Hits 2153 2153 ; Misses 1640 1640 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1092?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1092?src=pr&el=footer). Last update [ed1152d...a0f04db](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1092?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1092#issuecomment-713548239:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1092#issuecomment-713548239,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1094?src=pr&el=h1) Report; > Merging [#1094](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1094?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/e2c1ee48b0f588101f4bdb17c6f49c9a8245cdcd?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1094/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1094?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1094 +/- ##; =======================================; Coverage 56.76% 56.76% ; =======================================; Files 161 161 ; Lines 3793 3793 ; =======================================; Hits 2153 2153 ; Misses 1640 1640 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1094?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1094?src=pr&el=footer). Last update [e2c1ee4...01f7502](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1094?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1094#issuecomment-713859122:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1094#issuecomment-713859122,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1097?src=pr&el=h1) Report; > Merging [#1097](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1097?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/e1026b08b6489d8fd8bc1d9a1bde591ffbb27251?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1097/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1097?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1097 +/- ##; =======================================; Coverage 56.79% 56.79% ; =======================================; Files 161 161 ; Lines 3796 3796 ; =======================================; Hits 2156 2156 ; Misses 1640 1640 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1097?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1097?src=pr&el=footer). Last update [e1026b0...e1ee370](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1097?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1097#issuecomment-715622840:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1097#issuecomment-715622840,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1099?src=pr&el=h1) Report; > Merging [#1099](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1099?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/207225a1d8655d5687a15ff84f617dff5ba6324c?el=desc) will **not change** coverage.; > The diff coverage is `0.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1099/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1099?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1099 +/- ##; =======================================; Coverage 57.22% 57.22% ; =======================================; Files 162 162 ; Lines 3883 3883 ; =======================================; Hits 2222 2222 ; Misses 1661 1661 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1099?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Fields/field\_tuples.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1099/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZF90dXBsZXMuamw=) | `72.09% <0.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1099?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1099?src=pr&el=footer). Last update [207225a...e37ff6f](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1099?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1099#issuecomment-716269128:1305,learn,learn,1305,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1099#issuecomment-716269128,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1102?src=pr&el=h1) Report; > Merging [#1102](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1102?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/e1d1f198a0cb4cdb092102cbd6240e3f96864457?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1102/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1102?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1102 +/- ##; =======================================; Coverage 57.16% 57.16% ; =======================================; Files 161 161 ; Lines 3838 3838 ; =======================================; Hits 2194 2194 ; Misses 1644 1644 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1102?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1102?src=pr&el=footer). Last update [e1d1f19...8f51c37](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1102?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1102#issuecomment-716568571:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1102#issuecomment-716568571,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1103?src=pr&el=h1) Report; > Merging [#1103](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1103?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/e1d1f198a0cb4cdb092102cbd6240e3f96864457?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1103/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1103?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1103 +/- ##; =======================================; Coverage 57.16% 57.16% ; =======================================; Files 161 161 ; Lines 3838 3838 ; =======================================; Hits 2194 2194 ; Misses 1644 1644 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1103?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1103?src=pr&el=footer). Last update [e1d1f19...0c69c82](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1103?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1103#issuecomment-716593537:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1103#issuecomment-716593537,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1105?src=pr&el=h1) Report; > Merging [#1105](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1105?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/207225a1d8655d5687a15ff84f617dff5ba6324c?el=desc) will **increase** coverage by `0.09%`.; > The diff coverage is `26.08%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1105/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1105?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1105 +/- ##; ==========================================; + Coverage 57.22% 57.31% +0.09% ; ==========================================; Files 162 162 ; Lines 3883 3882 -1 ; ==========================================; + Hits 2222 2225 +3 ; + Misses 1661 1657 -4 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1105?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [...rbulenceClosures/turbulence\_closure\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1105/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfZGlhZ25vc3RpY3Muamw=) | `17.39% <26.08%> (+4.53%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1105?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1105?src=pr&el=footer). Last update [207225a...2b7315e](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1105?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1105#issuecomment-716725020:1431,learn,learn,1431,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1105#issuecomment-716725020,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1106?src=pr&el=h1) Report; > Merging [#1106](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1106?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/7b63ef4cb67cc65a966de49a5e6199c9b2cc886f?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1106/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1106?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1106 +/- ##; =======================================; Coverage 57.22% 57.22% ; =======================================; Files 162 162 ; Lines 3883 3883 ; =======================================; Hits 2222 2222 ; Misses 1661 1661 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1106?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1106/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1106?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1106?src=pr&el=footer). Last update [7b63ef4...d36d3bc](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1106?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1106#issuecomment-717198197:1283,learn,learn,1283,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1106#issuecomment-717198197,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1107?src=pr&el=h1) Report; > Merging [#1107](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1107?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/268bc77058a01dc0e323be7dde9a672d39d278b7?el=desc) will **decrease** coverage by `0.25%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1107/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1107?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1107 +/- ##; ==========================================; - Coverage 57.22% 56.97% -0.26% ; ==========================================; Files 162 162 ; Lines 3883 3916 +33 ; ==========================================; + Hits 2222 2231 +9 ; - Misses 1661 1685 +24 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1107?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [...rbulenceClosures/turbulence\_closure\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1107/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfZGlhZ25vc3RpY3Muamw=) | `17.47% <0.00%> (+4.61%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1107?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1107?src=pr&el=footer). Last update [268bc77...3e179ea](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1107?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1107#issuecomment-717550664:1429,learn,learn,1429,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1107#issuecomment-717550664,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1108?src=pr&el=h1) Report; > Merging [#1108](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1108?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/268bc77058a01dc0e323be7dde9a672d39d278b7?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1108/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1108?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1108 +/- ##; =======================================; Coverage 57.22% 57.22% ; =======================================; Files 162 162 ; Lines 3883 3883 ; =======================================; Hits 2222 2222 ; Misses 1661 1661 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1108?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1108?src=pr&el=footer). Last update [268bc77...6d96748](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1108?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1108#issuecomment-718055113:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1108#issuecomment-718055113,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1114?src=pr&el=h1) Report; > Merging [#1114](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1114?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/f644c4619e0c6718d963648dbb7629f47c3397d8?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1114/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1114?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1114 +/- ##; =======================================; Coverage 57.31% 57.31% ; =======================================; Files 162 162 ; Lines 3882 3882 ; =======================================; Hits 2225 2225 ; Misses 1657 1657 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1114?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1114?src=pr&el=footer). Last update [f644c46...ceb4783](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1114?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1114#issuecomment-719108604:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1114#issuecomment-719108604,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1123?src=pr&el=h1) Report; > Merging [#1123](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1123?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/9026438047fe3e5d4805edcebe42560268dc65fb?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1123/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1123?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1123 +/- ##; =======================================; Coverage 57.31% 57.31% ; =======================================; Files 162 162 ; Lines 3882 3882 ; =======================================; Hits 2225 2225 ; Misses 1657 1657 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1123?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1123?src=pr&el=footer). Last update [9026438...f8608eb](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1123?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1123#issuecomment-719755718:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1123#issuecomment-719755718,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1125?src=pr&el=h1) Report; > Merging [#1125](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1125?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/9026438047fe3e5d4805edcebe42560268dc65fb?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1125/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1125?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1125 +/- ##; =======================================; Coverage 57.31% 57.31% ; =======================================; Files 162 162 ; Lines 3882 3882 ; =======================================; Hits 2225 2225 ; Misses 1657 1657 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1125?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1125?src=pr&el=footer). Last update [9026438...ae6d29a](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1125?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1125#issuecomment-719887531:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1125#issuecomment-719887531,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1126?src=pr&el=h1) Report; > Merging [#1126](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1126?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/9026438047fe3e5d4805edcebe42560268dc65fb?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1126/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1126?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1126 +/- ##; =======================================; Coverage 57.31% 57.31% ; =======================================; Files 162 162 ; Lines 3882 3882 ; =======================================; Hits 2225 2225 ; Misses 1657 1657 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1126?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1126?src=pr&el=footer). Last update [9026438...1171a29](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1126?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1126#issuecomment-720003275:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1126#issuecomment-720003275,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1128?src=pr&el=h1) Report; > Merging [#1128](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1128?src=pr&el=desc) (41a9955) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/9026438047fe3e5d4805edcebe42560268dc65fb?el=desc) (9026438) will **increase** coverage by `0.51%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1128/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1128?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1128 +/- ##; ==========================================; + Coverage 57.31% 57.83% +0.51% ; ==========================================; Files 162 162 ; Lines 3882 3944 +62 ; ==========================================; + Hits 2225 2281 +56 ; - Misses 1657 1663 +6 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1128?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1128/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `85.62% <0.00%> (+2.97%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1128?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1128?src=pr&el=footer). Last update [9026438...41a9955](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1128?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1128#issuecomment-720181671:1417,learn,learn,1417,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1128#issuecomment-720181671,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1129?src=pr&el=h1) Report; > Merging [#1129](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1129?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/9026438047fe3e5d4805edcebe42560268dc65fb?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1129/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1129?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1129 +/- ##; =======================================; Coverage 57.31% 57.31% ; =======================================; Files 162 162 ; Lines 3882 3882 ; =======================================; Hits 2225 2225 ; Misses 1657 1657 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1129?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1129?src=pr&el=footer). Last update [9026438...40ca9d6](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1129?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1129#issuecomment-720192242:1004,learn,learn,1004,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1129#issuecomment-720192242,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1139?src=pr&el=h1) Report; > Merging [#1139](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1139?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/a48f284ca7341193254ddb3fc44daa9f5e9f318d?el=desc) will **increase** coverage by `0.06%`.; > The diff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1139/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1139?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1139 +/- ##; ==========================================; + Coverage 57.31% 57.38% +0.06% ; ==========================================; Files 162 162 ; Lines 3882 3888 +6 ; ==========================================; + Hits 2225 2231 +6 ; Misses 1657 1657 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1139?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1139/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `83.65% <100.00%> (+1.00%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1139?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1139?src=pr&el=footer). Last update [a48f284...da9fbe1](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1139?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1139#issuecomment-721893166:1396,learn,learn,1396,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1139#issuecomment-721893166,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1142?src=pr&el=h1) Report; > Merging [#1142](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1142?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/a48f284ca7341193254ddb3fc44daa9f5e9f318d?el=desc) will **increase** coverage by `0.01%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1142/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1142?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1142 +/- ##; ==========================================; + Coverage 57.31% 57.33% +0.01% ; ==========================================; Files 162 161 -1 ; Lines 3882 3881 -1 ; ==========================================; Hits 2225 2225 ; + Misses 1657 1656 -1 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1142?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Utils/Utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1142/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL1V0aWxzLmps) | `40.00% <ø> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1142?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1142?src=pr&el=footer). Last update [a48f284...e9e29ec](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1142?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1142#issuecomment-722467224:1316,learn,learn,1316,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1142#issuecomment-722467224,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1144?src=pr&el=h1) Report; > Merging [#1144](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1144?src=pr&el=desc) (cebac08) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/177a1c492ef7f494a2a4286cf819be2e2f35c81a?el=desc) (177a1c4) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1144/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1144?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1144 +/- ##; =======================================; Coverage 57.31% 57.31% ; =======================================; Files 162 162 ; Lines 3882 3882 ; =======================================; Hits 2225 2225 ; Misses 1657 1657 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1144?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1144?src=pr&el=footer). Last update [177a1c4...93ee087](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1144?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1144#issuecomment-722933598:1024,learn,learn,1024,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1144#issuecomment-722933598,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1147?src=pr&el=h1) Report; > Merging [#1147](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1147?src=pr&el=desc) (1bc5f4a) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/ccd1e65215d8fec6f553bc989ebcf9601d9fdf50?el=desc) (ccd1e65) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1147/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1147?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1147 +/- ##; =======================================; Coverage 57.31% 57.31% ; =======================================; Files 162 162 ; Lines 3882 3882 ; =======================================; Hits 2225 2225 ; Misses 1657 1657 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1147?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1147?src=pr&el=footer). Last update [ccd1e65...1bc5f4a](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1147?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1147#issuecomment-723302675:1024,learn,learn,1024,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1147#issuecomment-723302675,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1148?src=pr&el=h1) Report; > Merging [#1148](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1148?src=pr&el=desc) (e77338a) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/ac48a17e984544577b05e676dac8feea21416d02?el=desc) (ac48a17) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1148/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1148?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1148 +/- ##; =======================================; Coverage 57.31% 57.31% ; =======================================; Files 162 162 ; Lines 3882 3882 ; =======================================; Hits 2225 2225 ; Misses 1657 1657 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1148?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1148?src=pr&el=footer). Last update [ac48a17...e77338a](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1148?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1148#issuecomment-723476938:1024,learn,learn,1024,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1148#issuecomment-723476938,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1152?src=pr&el=h1) Report; > Merging [#1152](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1152?src=pr&el=desc) (a523fb5) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/628fc97635ee0219f57f1939751418755040fa54?el=desc) (628fc97) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1152/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1152?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1152 +/- ##; =======================================; Coverage 57.38% 57.38% ; =======================================; Files 162 162 ; Lines 3888 3888 ; =======================================; Hits 2231 2231 ; Misses 1657 1657 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1152?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1152?src=pr&el=footer). Last update [628fc97...a523fb5](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1152?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1152#issuecomment-724056693:1024,learn,learn,1024,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1152#issuecomment-724056693,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1155?src=pr&el=h1) Report; > Merging [#1155](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1155?src=pr&el=desc) (0ddac19) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/5aafe8ee1d3e49a53906e7225a01fc18f1a5f165?el=desc) (5aafe8e) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1155/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1155?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1155 +/- ##; =======================================; Coverage 57.39% 57.39% ; =======================================; Files 161 161 ; Lines 3887 3887 ; =======================================; Hits 2231 2231 ; Misses 1656 1656 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1155?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1155?src=pr&el=footer). Last update [5aafe8e...4684636](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1155?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1155#issuecomment-724147323:1024,learn,learn,1024,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1155#issuecomment-724147323,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1158?src=pr&el=h1) Report; > Merging [#1158](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1158?src=pr&el=desc) (3a4b081) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/0c2b51293d324836846f31ab93c7515b05e797b5?el=desc) (0c2b512) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1158/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1158?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1158 +/- ##; =======================================; Coverage 57.01% 57.01% ; =======================================; Files 162 162 ; Lines 3913 3913 ; =======================================; Hits 2231 2231 ; Misses 1682 1682 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1158?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1158?src=pr&el=footer). Last update [0c2b512...3a4b081](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1158?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1158#issuecomment-724350676:1024,learn,learn,1024,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1158#issuecomment-724350676,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1162?src=pr&el=h1) Report; > Merging [#1162](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1162?src=pr&el=desc) (635bd43) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/0c2b51293d324836846f31ab93c7515b05e797b5?el=desc) (0c2b512) will **decrease** coverage by `0.01%`.; > The diff coverage is `33.33%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1162/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1162?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1162 +/- ##; ==========================================; - Coverage 57.01% 56.99% -0.02% ; ==========================================; Files 162 162 ; Lines 3913 3916 +3 ; ==========================================; + Hits 2231 2232 +1 ; - Misses 1682 1684 +2 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1162?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1162/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `82.24% <33.33%> (-1.42%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1162?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1162?src=pr&el=footer). Last update [0c2b512...635bd43](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1162?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1162#issuecomment-724390560:1421,learn,learn,1421,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1162#issuecomment-724390560,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1168?src=pr&el=h1) Report; > Merging [#1168](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1168?src=pr&el=desc) (a580bee) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/bd6cb932cc7d6c372709d4b5af59d325b494b30c?el=desc) (bd6cb93) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1168/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1168?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1168 +/- ##; =======================================; Coverage 56.99% 56.99% ; =======================================; Files 162 162 ; Lines 3916 3916 ; =======================================; Hits 2232 2232 ; Misses 1684 1684 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1168?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1168?src=pr&el=footer). Last update [bd6cb93...a580bee](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1168?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1168#issuecomment-725001793:1024,learn,learn,1024,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1168#issuecomment-725001793,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1185?src=pr&el=h1) Report; > Merging [#1185](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1185?src=pr&el=desc) (78e3600) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/03a6f855f839504d94cb8cee3c2665b17afbc6d5?el=desc) (03a6f85) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1185/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1185?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1185 +/- ##; =======================================; Coverage 56.99% 56.99% ; =======================================; Files 162 162 ; Lines 3916 3916 ; =======================================; Hits 2232 2232 ; Misses 1684 1684 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1185?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1185?src=pr&el=footer). Last update [03a6f85...78e3600](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1185?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1185#issuecomment-727625689:1024,learn,learn,1024,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1185#issuecomment-727625689,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/748?src=pr&el=h1) Report; > Merging [#748](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/748?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/9ef95e7bef2db1dc9ac04af78664418b0caaf99b&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/748/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/748?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #748 +/- ##; =======================================; Coverage 77.16% 77.16% ; =======================================; Files 125 125 ; Lines 2483 2483 ; =======================================; Hits 1916 1916 ; Misses 567 567 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/748?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/748?src=pr&el=footer). Last update [9ef95e7...dd2d1ca](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/748?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/748#issuecomment-626873446:995,learn,learn,995,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/748#issuecomment-626873446,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/750?src=pr&el=h1) Report; > Merging [#750](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/750?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/92d77b028d39014e2818d2d1fe56038fd1810256&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/750/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/750?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #750 +/- ##; =======================================; Coverage 77.05% 77.05% ; =======================================; Files 123 123 ; Lines 2462 2462 ; =======================================; Hits 1897 1897 ; Misses 565 565 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/750?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/750?src=pr&el=footer). Last update [92d77b0...57f633e](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/750?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/750#issuecomment-629386693:995,learn,learn,995,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/750#issuecomment-629386693,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/756?src=pr&el=h1) Report; > Merging [#756](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/756?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/a1df66144b764888e3494123e8042afd588157d2&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/756/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/756?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #756 +/- ##; =======================================; Coverage 72.87% 72.87% ; =======================================; Files 123 123 ; Lines 2444 2444 ; =======================================; Hits 1781 1781 ; Misses 663 663 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/756?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/756?src=pr&el=footer). Last update [a1df661...fdc2e47](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/756?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/756#issuecomment-630563901:995,learn,learn,995,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/756#issuecomment-630563901,1,['learn'],['learn']
Usability,# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758?src=pr&el=h1) Report; > Merging [#758](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/9b9e8e2b6b6573699f655805a1c2af99c8b7f3a3&el=desc) will **increase** coverage by `3.90%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #758 +/- ##; ==========================================; + Coverage 72.95% 76.86% +3.90% ; ==========================================; Files 124 124 ; Lines 2459 2485 +26 ; ==========================================; + Hits 1794 1910 +116 ; + Misses 665 575 -90 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Forcing/simple\_forcing.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvc2ltcGxlX2ZvcmNpbmcuamw=) | `81.81% <0.00%> (-18.19%)` | :arrow_down: |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `88.88% <0.00%> (-11.12%)` | :arrow_down: |; | [src/Utils/launch\_config.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL2xhdW5jaF9jb25maWcuamw=) | `94.11% <0.00%> (-5.89%)` | :arrow_down: |; | [...ntations/rozema\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3JvemVtYV9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `30.00% <0.00%> (-4.10%)` | :arrow_down: |; | [src/Solvers/solve\_for\_pressure.jl](https://codecov.io/gh/CliMA/,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/758#issuecomment-632044290:1018,simpl,simple,1018,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/758#issuecomment-632044290,1,['simpl'],['simple']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/759?src=pr&el=h1) Report; > Merging [#759](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/759?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/7f957d7762b61ee4e51b360944428d5b660d50bf&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/759/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/759?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #759 +/- ##; =======================================; Coverage 77.65% 77.65% ; =======================================; Files 165 165 ; Lines 4404 4404 ; =======================================; Hits 3420 3420 ; Misses 984 984 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/759?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/759?src=pr&el=footer). Last update [7f957d7...f386b88](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/759?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/759#issuecomment-644781380:995,learn,learn,995,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/759#issuecomment-644781380,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/761?src=pr&el=h1) Report; > Merging [#761](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/761?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/b3b8162209409024c6847989ccd33780693f597c&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/761/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/761?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #761 +/- ##; =======================================; Coverage 70.97% 70.97% ; =======================================; Files 124 124 ; Lines 2491 2491 ; =======================================; Hits 1768 1768 ; Misses 723 723 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/761?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/761?src=pr&el=footer). Last update [b3b8162...a508f4d](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/761?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/761#issuecomment-633742683:995,learn,learn,995,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/761#issuecomment-633742683,1,['learn'],['learn']
Usability,# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762?src=pr&el=h1) Report; > Merging [#762](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/b3b8162209409024c6847989ccd33780693f597c&el=desc) will **increase** coverage by `3.88%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #762 +/- ##; ==========================================; + Coverage 70.97% 74.86% +3.88% ; ==========================================; Files 124 124 ; Lines 2491 2522 +31 ; ==========================================; + Hits 1768 1888 +120 ; + Misses 723 634 -89 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Forcing/simple\_forcing.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvc2ltcGxlX2ZvcmNpbmcuamw=) | `81.81% <0.00%> (-18.19%)` | :arrow_down: |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `88.88% <0.00%> (-11.12%)` | :arrow_down: |; | [src/Utils/launch\_config.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL2xhdW5jaF9jb25maWcuamw=) | `95.23% <0.00%> (-4.77%)` | :arrow_down: |; | [...ntations/rozema\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3JvemVtYV9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `30.00% <0.00%> (-4.10%)` | :arrow_down: |; | [src/Solvers/batched\_tridiagonal\_solver.jl](https://codecov.io/g,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/762#issuecomment-633745177:1018,simpl,simple,1018,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/762#issuecomment-633745177,1,['simpl'],['simple']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/764?src=pr&el=h1) Report; > Merging [#764](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/764?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/3f491e7444d06e1eada7f6a5f4e424affc2690c7&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/764/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/764?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #764 +/- ##; =======================================; Coverage 74.86% 74.86% ; =======================================; Files 124 124 ; Lines 2522 2522 ; =======================================; Hits 1888 1888 ; Misses 634 634 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/764?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/764?src=pr&el=footer). Last update [3f491e7...4a1a76d](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/764?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/764#issuecomment-634708733:995,learn,learn,995,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/764#issuecomment-634708733,1,['learn'],['learn']
Usability,# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/767?src=pr&el=h1) Report; > Merging [#767](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/767?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/e5c7aaf5b55b98878ee4c64ef6b020b64181eaf9&el=desc) will **increase** coverage by `3.93%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/767/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/767?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #767 +/- ##; ==========================================; + Coverage 70.97% 74.91% +3.93% ; ==========================================; Files 124 124 ; Lines 2491 2603 +112 ; ==========================================; + Hits 1768 1950 +182 ; + Misses 723 653 -70 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/767?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Forcing/simple\_forcing.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/767/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvc2ltcGxlX2ZvcmNpbmcuamw=) | `81.81% <0.00%> (-18.19%)` | :arrow_down: |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/767/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `88.88% <0.00%> (-11.12%)` | :arrow_down: |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/767/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `66.66% <0.00%> (-8.34%)` | :arrow_down: |; | [src/Utils/launch\_config.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/767/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL2xhdW5jaF9jb25maWcuamw=) | `95.23% <0.00%> (-4.77%)` | :arrow_down: |; | [...ntations/rozema\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/767/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxl,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/767#issuecomment-636191089:1019,simpl,simple,1019,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/767#issuecomment-636191089,1,['simpl'],['simple']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/771?src=pr&el=h1) Report; > Merging [#771](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/771?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/f18daed6d6a1c7ad424a9774081d852100f012d2&el=desc) will **decrease** coverage by `0.14%`.; > The diff coverage is `0.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/771/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/771?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #771 +/- ##; ==========================================; - Coverage 71.33% 71.18% -0.15% ; ==========================================; Files 184 185 +1 ; Lines 4807 4817 +10 ; ==========================================; Hits 3429 3429 ; - Misses 1378 1388 +10 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/771?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [...ification/Haine\_Marshall\_1998/HaineMarshall1998.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/771/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL0hhaW5lX01hcnNoYWxsXzE5OTgvSGFpbmVNYXJzaGFsbDE5OTguamw=) | `0.00% <0.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/771?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/771?src=pr&el=footer). Last update [f18daed...92ec928](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/771?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/771#issuecomment-640787138:1399,learn,learn,1399,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/771#issuecomment-640787138,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=h1) Report; > Merging [#772](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/7f957d7762b61ee4e51b360944428d5b660d50bf&el=desc) will **increase** coverage by `0.04%`.; > The diff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #772 +/- ##; ==========================================; + Coverage 77.65% 77.70% +0.04% ; ==========================================; Files 165 165 ; Lines 4404 4413 +9 ; ==========================================; + Hits 3420 3429 +9 ; Misses 984 984 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Forcing/simple\_forcing.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvc2ltcGxlX2ZvcmNpbmcuamw=) | `100.00% <ø> (ø)` | |; | [src/Forcing/model\_forcing.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvbW9kZWxfZm9yY2luZy5qbA==) | `84.61% <100.00%> (+4.61%)` | :arrow_up: |; | [test/test\_forcings.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZvcmNpbmdzLmps) | `100.00% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=footer). Last update [7f957d7...c19f69c](https://codecov.io/gh/CliMA/Oceananiga",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/772#issuecomment-641394370:1013,simpl,simple,1013,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/772#issuecomment-641394370,1,['simpl'],['simple']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/776?src=pr&el=h1) Report; > Merging [#776](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/776?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/dcb3c633caaf2c411661310f65d545fb3433b1b7&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/776/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/776?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #776 +/- ##; =======================================; Coverage 77.70% 77.70% ; =======================================; Files 165 165 ; Lines 4413 4413 ; =======================================; Hits 3429 3429 ; Misses 984 984 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/776?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/776?src=pr&el=footer). Last update [dcb3c63...a6b1851](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/776?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/776#issuecomment-645359492:995,learn,learn,995,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/776#issuecomment-645359492,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/790?src=pr&el=h1) Report; > Merging [#790](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/790?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/1723136b1249332eb1ca4ff3adfad3c38017c452&el=desc) will **decrease** coverage by `0.01%`.; > The diff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/790/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/790?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #790 +/- ##; ==========================================; - Coverage 71.69% 71.67% -0.02% ; ==========================================; Files 184 184 ; Lines 4780 4781 +1 ; ==========================================; Hits 3427 3427 ; - Misses 1353 1354 +1 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/790?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [test/test\_forcings.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/790/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZvcmNpbmdzLmps) | `100.00% <ø> (ø)` | |; | [src/Forcing/relaxation.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/790/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvcmVsYXhhdGlvbi5qbA==) | `81.25% <100.00%> (-5.42%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/790?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/790?src=pr&el=footer). Last update [1723136...6d2d7b8](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/790?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/790#issuecomment-656856375:1511,learn,learn,1511,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/790#issuecomment-656856375,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/804?src=pr&el=h1) Report; > Merging [#804](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/804?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/ee0cdf905de0885a2fae6e525f53e998507f15c3&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/804/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/804?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #804 +/- ##; =======================================; Coverage 71.04% 71.04% ; =======================================; Files 186 186 ; Lines 4824 4824 ; =======================================; Hits 3427 3427 ; Misses 1397 1397 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/804?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [docs/make.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/804/diff?src=pr&el=tree#diff-ZG9jcy9tYWtlLmps) | `0.00% <ø> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/804?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/804?src=pr&el=footer). Last update [ee0cdf9...9712301](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/804?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/804#issuecomment-658484004:1254,learn,learn,1254,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/804#issuecomment-658484004,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/810?src=pr&el=h1) Report; > Merging [#810](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/810?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/ecc0fda4da3685143c72d9cb7fc4e528b799a409&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/810/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/810?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #810 +/- ##; =======================================; Coverage 71.28% 71.28% ; =======================================; Files 186 186 ; Lines 4876 4876 ; =======================================; Hits 3476 3476 ; Misses 1400 1400 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/810?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/810?src=pr&el=footer). Last update [ecc0fda...348e334](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/810?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/810#issuecomment-662518809:997,learn,learn,997,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/810#issuecomment-662518809,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/819?src=pr&el=h1) Report; > Merging [#819](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/819?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/847d446516a61fe8b7cc522dd18f71d48e80a8fb&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/819/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/819?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #819 +/- ##; =======================================; Coverage 70.67% 70.67% ; =======================================; Files 188 188 ; Lines 5111 5111 ; =======================================; Hits 3612 3612 ; Misses 1499 1499 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/819?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [docs/make.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/819/diff?src=pr&el=tree#diff-ZG9jcy9tYWtlLmps) | `0.00% <ø> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/819?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/819?src=pr&el=footer). Last update [847d446...26bc18d](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/819?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/819#issuecomment-663100194:1254,learn,learn,1254,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/819#issuecomment-663100194,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/825?src=pr&el=h1) Report; > Merging [#825](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/825?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/aee11b2a543fe8f9e11c0d9e74e6de6545291f64&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/825/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/825?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #825 +/- ##; =======================================; Coverage 71.38% 71.38% ; =======================================; Files 189 189 ; Lines 5270 5270 ; =======================================; Hits 3762 3762 ; Misses 1508 1508 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/825?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/825?src=pr&el=footer). Last update [aee11b2...080f87f](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/825?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/825#issuecomment-665590848:997,learn,learn,997,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/825#issuecomment-665590848,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/849?src=pr&el=h1) Report; > Merging [#849](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/849?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/8198ca7c8c09d0ad0e7b1d72a377871ef671fa73&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/849/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/849?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #849 +/- ##; =======================================; Coverage 72.70% 72.70% ; =======================================; Files 188 188 ; Lines 5353 5353 ; =======================================; Hits 3892 3892 ; Misses 1461 1461 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/849?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [docs/make.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/849/diff?src=pr&el=tree#diff-ZG9jcy9tYWtlLmps) | `0.00% <ø> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/849?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/849?src=pr&el=footer). Last update [8198ca7...3ac98ad](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/849?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/849#issuecomment-671937766:1254,learn,learn,1254,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/849#issuecomment-671937766,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/852?src=pr&el=h1) Report; > Merging [#852](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/852?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/a8c35f501b0dbd24031e991471036e6c41201daa&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/852/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/852?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #852 +/- ##; =======================================; Coverage 72.62% 72.62% ; =======================================; Files 188 188 ; Lines 5337 5337 ; =======================================; Hits 3876 3876 ; Misses 1461 1461 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/852?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/852?src=pr&el=footer). Last update [a8c35f5...7aee14c](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/852?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/852#issuecomment-672956949:997,learn,learn,997,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/852#issuecomment-672956949,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/858?src=pr&el=h1) Report; > Merging [#858](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/858?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/810a3a1f8e425480340f4b3f386527be43e08515?el=desc) will **increase** coverage by `0.03%`.; > The diff coverage is `88.88%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/858/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/858?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #858 +/- ##; ==========================================; + Coverage 70.90% 70.93% +0.03% ; ==========================================; Files 187 187 ; Lines 5180 5189 +9 ; ==========================================; + Hits 3673 3681 +8 ; - Misses 1507 1508 +1 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/858?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Diagnostics/average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/858/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2F2ZXJhZ2Uuamw=) | `91.30% <ø> (ø)` | |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/858/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `75.00% <88.88%> (+4.62%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/858?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/858?src=pr&el=footer). Last update [810a3a1...7949a71](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/858?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/858#issuecomment-674821895:1552,learn,learn,1552,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/858#issuecomment-674821895,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/860?src=pr&el=h1) Report; > Merging [#860](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/860?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/46608d71bb5b948b2bf8ed3ab0849d8a4acd485a?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/860/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/860?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #860 +/- ##; =======================================; Coverage 70.90% 70.90% ; =======================================; Files 187 187 ; Lines 5180 5180 ; =======================================; Hits 3673 3673 ; Misses 1507 1507 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/860?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/860?src=pr&el=footer). Last update [46608d7...19390e0](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/860?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/860#issuecomment-681936418:997,learn,learn,997,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/860#issuecomment-681936418,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/868?src=pr&el=h1) Report; > Merging [#868](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/868?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/424051cc05f1da09a7531af17c875c6abc0cb586?el=desc) will **decrease** coverage by `0.01%`.; > The diff coverage is `50.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/868/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/868?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #868 +/- ##; ==========================================; - Coverage 72.50% 72.48% -0.02% ; ==========================================; Files 187 187 ; Lines 5331 5335 +4 ; ==========================================; + Hits 3865 3867 +2 ; - Misses 1466 1468 +2 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/868?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/868/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `71.42% <50.00%> (-28.58%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/868?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/868?src=pr&el=footer). Last update [424051c...c7b5248](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/868?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/868#issuecomment-681210967:1341,learn,learn,1341,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/868#issuecomment-681210967,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/869?src=pr&el=h1) Report; > Merging [#869](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/869?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/424051cc05f1da09a7531af17c875c6abc0cb586?el=desc) will **decrease** coverage by `0.01%`.; > The diff coverage is `50.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/869/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/869?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #869 +/- ##; ==========================================; - Coverage 72.50% 72.48% -0.02% ; ==========================================; Files 187 187 ; Lines 5331 5335 +4 ; ==========================================; + Hits 3865 3867 +2 ; - Misses 1466 1468 +2 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/869?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/869/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `71.42% <50.00%> (-28.58%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/869?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/869?src=pr&el=footer). Last update [424051c...267b780](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/869?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/869#issuecomment-681202968:1341,learn,learn,1341,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/869#issuecomment-681202968,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/887?src=pr&el=h1) Report; > Merging [#887](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/887?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/edcedc38c55a9c219514c5234c1a663be03beced?el=desc) will **increase** coverage by `0.05%`.; > The diff coverage is `92.85%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/887/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/887?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #887 +/- ##; ==========================================; + Coverage 71.34% 71.39% +0.05% ; ==========================================; Files 187 187 ; Lines 5276 5289 +13 ; ==========================================; + Hits 3764 3776 +12 ; - Misses 1512 1513 +1 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/887?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/jld2\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/887/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvamxkMl9vdXRwdXRfd3JpdGVyLmps) | `91.52% <83.33%> (-0.93%)` | :arrow_down: |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/887/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `93.29% <100.00%> (+0.13%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/887?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/887?src=pr&el=footer). Last update [edcedc3...59d0e22](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/887?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/887#issuecomment-685908717:1584,learn,learn,1584,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/887#issuecomment-685908717,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/891?src=pr&el=h1) Report; > Merging [#891](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/891?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/f13a0a26df78cd1c1495d56ef5e7ea2fbbbfb23c?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/891/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/891?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #891 +/- ##; =======================================; Coverage 71.22% 71.22% ; =======================================; Files 188 188 ; Lines 5251 5251 ; =======================================; Hits 3740 3740 ; Misses 1511 1511 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/891?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/891?src=pr&el=footer). Last update [f13a0a2...694eeb1](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/891?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/891#issuecomment-684850967:997,learn,learn,997,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/891#issuecomment-684850967,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/898?src=pr&el=h1) Report; > Merging [#898](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/898?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/eeb62d1b6a4bd438ba6abe39881cd1ca49c41cf5?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/898/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/898?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #898 +/- ##; =======================================; Coverage 71.20% 71.20% ; =======================================; Files 187 187 ; Lines 5251 5251 ; =======================================; Hits 3739 3739 ; Misses 1512 1512 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/898?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/898?src=pr&el=footer). Last update [eeb62d1...a85e5d0](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/898?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/898#issuecomment-685175413:997,learn,learn,997,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/898#issuecomment-685175413,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/907?src=pr&el=h1) Report; > Merging [#907](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/907?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/8d808881c5a277b44abff83f39dd470fe2f16324?el=desc) will **increase** coverage by `0.10%`.; > The diff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/907/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/907?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #907 +/- ##; ==========================================; + Coverage 72.32% 72.42% +0.10% ; ==========================================; Files 187 187 ; Lines 5464 5484 +20 ; ==========================================; + Hits 3952 3972 +20 ; Misses 1512 1512 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/907?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Diagnostics/average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/907/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2F2ZXJhZ2Uuamw=) | `96.42% <100.00%> (+0.42%)` | :arrow_up: |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/907/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | `99.34% <100.00%> (+0.08%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/907?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/907?src=pr&el=footer). Last update [8d80888...f0c2821](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/907?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/907#issuecomment-686553696:1540,learn,learn,1540,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/907#issuecomment-686553696,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/909?src=pr&el=h1) Report; > Merging [#909](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/909?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/8d808881c5a277b44abff83f39dd470fe2f16324?el=desc) will **increase** coverage by `0.03%`.; > The diff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/909/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/909?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #909 +/- ##; ==========================================; + Coverage 72.32% 72.35% +0.03% ; ==========================================; Files 187 187 ; Lines 5464 5470 +6 ; ==========================================; + Hits 3952 3958 +6 ; Misses 1512 1512 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/909?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [test/test\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/909/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmcuamw=) | `100.00% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/909?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/909?src=pr&el=footer). Last update [8d80888...06be99d](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/909?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/909#issuecomment-686634596:1337,learn,learn,1337,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/909#issuecomment-686634596,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/916?src=pr&el=h1) Report; > Merging [#916](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/916?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/632ef059cfa9b6935e52431f41c4d94528222b17?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/916/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/916?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #916 +/- ##; =======================================; Coverage 72.60% 72.60% ; =======================================; Files 191 191 ; Lines 5610 5610 ; =======================================; Hits 4073 4073 ; Misses 1537 1537 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/916?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/916?src=pr&el=footer). Last update [632ef05...5260346](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/916?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/916#issuecomment-687310049:997,learn,learn,997,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/916#issuecomment-687310049,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/923?src=pr&el=h1) Report; > Merging [#923](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/923?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/01b248145356586f921239701b14c2f0e2073b27?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/923/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/923?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #923 +/- ##; =======================================; Coverage 72.78% 72.78% ; =======================================; Files 192 192 ; Lines 5643 5643 ; =======================================; Hits 4107 4107 ; Misses 1536 1536 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/923?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/923/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `88.88% <ø> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/923?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/923?src=pr&el=footer). Last update [01b2481...df0f72e](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/923?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/923#issuecomment-689771044:1310,learn,learn,1310,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/923#issuecomment-689771044,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/924?src=pr&el=h1) Report; > Merging [#924](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/924?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/01b248145356586f921239701b14c2f0e2073b27?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/924/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/924?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #924 +/- ##; =======================================; Coverage 72.78% 72.78% ; =======================================; Files 192 192 ; Lines 5643 5643 ; =======================================; Hits 4107 4107 ; Misses 1536 1536 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/924?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/924?src=pr&el=footer). Last update [01b2481...b343354](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/924?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/924#issuecomment-689784328:997,learn,learn,997,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/924#issuecomment-689784328,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/935?src=pr&el=h1) Report; > Merging [#935](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/935?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/3b45ce5cbc561d3e951621a402204eb689df2000?el=desc) will **not change** coverage.; > The diff coverage is `0.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/935/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/935?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #935 +/- ##; =======================================; Coverage 72.61% 72.61% ; =======================================; Files 199 199 ; Lines 5806 5806 ; =======================================; Hits 4216 4216 ; Misses 1590 1590 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/935?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Advection/centered\_fourth\_order.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/935/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi9jZW50ZXJlZF9mb3VydGhfb3JkZXIuamw=) | `0.00% <0.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/935?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/935?src=pr&el=footer). Last update [3b45ce5...dd5a3c6](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/935?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/935#issuecomment-691216482:1324,learn,learn,1324,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/935#issuecomment-691216482,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/953?src=pr&el=h1) Report; > Merging [#953](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/953?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/816615f63f1b973a25dcd482c6d90884cbf56a6a?el=desc) will **not change** coverage.; > The diff coverage is `0.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/953/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/953?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #953 +/- ##; =======================================; Coverage 72.45% 72.45% ; =======================================; Files 202 202 ; Lines 5914 5914 ; =======================================; Hits 4285 4285 ; Misses 1629 1629 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/953?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Fields/computed\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/953/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9jb21wdXRlZF9maWVsZC5qbA==) | `77.77% <0.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/953?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/953?src=pr&el=footer). Last update [816615f...99bc0c6](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/953?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/953#issuecomment-693786891:1302,learn,learn,1302,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/953#issuecomment-693786891,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/954?src=pr&el=h1) Report; > Merging [#954](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/954?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/d6ce0feeebe46aa56491d80653063a1142d8c963?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/954/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/954?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #954 +/- ##; =======================================; Coverage 72.52% 72.52% ; =======================================; Files 203 203 ; Lines 5944 5944 ; =======================================; Hits 4311 4311 ; Misses 1633 1633 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/954?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Fields/computed\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/954/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9jb21wdXRlZF9maWVsZC5qbA==) | `77.77% <ø> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/954?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/954?src=pr&el=footer). Last update [d6ce0fe...6669ff1](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/954?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/954#issuecomment-694305906:1296,learn,learn,1296,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/954#issuecomment-694305906,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/976?src=pr&el=h1) Report; > Merging [#976](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/976?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/7260ce8309ceb782b4c038798f822e39d1ad9d1e?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/976/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/976?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #976 +/- ##; =======================================; Coverage 72.06% 72.06% ; =======================================; Files 205 205 ; Lines 5988 5988 ; =======================================; Hits 4315 4315 ; Misses 1673 1673 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/976?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/976?src=pr&el=footer). Last update [7260ce8...b93a925](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/976?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/976#issuecomment-698990993:997,learn,learn,997,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/976#issuecomment-698990993,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/978?src=pr&el=h1) Report; > Merging [#978](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/978?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/d80be8cf1db4f97515346ae3140b7cbf3f2ddab4?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/978/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/978?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #978 +/- ##; =======================================; Coverage 72.54% 72.54% ; =======================================; Files 210 210 ; Lines 6076 6076 ; =======================================; Hits 4408 4408 ; Misses 1668 1668 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/978?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/978?src=pr&el=footer). Last update [d80be8c...30047ab](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/978?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/978#issuecomment-699207858:997,learn,learn,997,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/978#issuecomment-699207858,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/981?src=pr&el=h1) Report; > Merging [#981](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/981?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/d80be8cf1db4f97515346ae3140b7cbf3f2ddab4?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/981/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/981?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #981 +/- ##; =======================================; Coverage 72.54% 72.54% ; =======================================; Files 210 210 ; Lines 6076 6076 ; =======================================; Hits 4408 4408 ; Misses 1668 1668 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/981?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Buoyancy/seawater\_buoyancy.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/981/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L3NlYXdhdGVyX2J1b3lhbmN5Lmps) | `70.58% <ø> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/981?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/981?src=pr&el=footer). Last update [d80be8c...61410c1](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/981?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/981#issuecomment-699206190:1305,learn,learn,1305,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/981#issuecomment-699206190,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/982?src=pr&el=h1) Report; > Merging [#982](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/982?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/d80be8cf1db4f97515346ae3140b7cbf3f2ddab4?el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/982/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/982?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #982 +/- ##; =======================================; Coverage 72.54% 72.54% ; =======================================; Files 210 210 ; Lines 6076 6076 ; =======================================; Hits 4408 4408 ; Misses 1668 1668 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/982?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/TimeSteppers/velocity\_and\_tracer\_tendencies.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/982/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy92ZWxvY2l0eV9hbmRfdHJhY2VyX3RlbmRlbmNpZXMuamw=) | `100.00% <ø> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/982?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/982?src=pr&el=footer). Last update [d80be8c...065f9d1](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/982?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/982#issuecomment-699210420:1349,learn,learn,1349,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/982#issuecomment-699210420,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/983?src=pr&el=h1) Report; > Merging [#983](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/983?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/d80be8cf1db4f97515346ae3140b7cbf3f2ddab4?el=desc) will **decrease** coverage by `0.01%`.; > The diff coverage is `50.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/983/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/983?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #983 +/- ##; ==========================================; - Coverage 72.54% 72.53% -0.02% ; ==========================================; Files 210 210 ; Lines 6076 6077 +1 ; ==========================================; Hits 4408 4408 ; - Misses 1668 1669 +1 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/983?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Simulations/simulation.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/983/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3NpbXVsYXRpb24uamw=) | `66.66% <0.00%> (-8.34%)` | :arrow_down: |; | [src/Simulations/run.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/983/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `91.83% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/983?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/983?src=pr&el=footer). Last update [d80be8c...270d5be](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/983?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/983#issuecomment-699206724:1525,learn,learn,1525,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/983#issuecomment-699206724,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/997?src=pr&el=h1) Report; > Merging [#997](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/997?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/5013487a9cc6d514abfbf103b8af2877553f3c65?el=desc) will **increase** coverage by `0.07%`.; > The diff coverage is `0.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/997/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/997?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #997 +/- ##; ==========================================; + Coverage 69.76% 69.84% +0.07% ; ==========================================; Files 160 160 ; Lines 3512 3508 -4 ; ==========================================; Hits 2450 2450 ; + Misses 1062 1058 -4 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/997?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Solvers/index\_permutations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/997/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvaW5kZXhfcGVybXV0YXRpb25zLmps) | `0.00% <0.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/997?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/997?src=pr&el=footer). Last update [5013487...5afa71b](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/997?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/997#issuecomment-700340275:1345,learn,learn,1345,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/997#issuecomment-700340275,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/105?src=pr&el=h1) Report; > Merging [#105](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/105?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/b36a83e1c4400feb745daad9fd517a047f047906?src=pr&el=desc) will **decrease** coverage by `0.16%`.; > The diff coverage is `75%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/105/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/105?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #105 +/- ##; ==========================================; - Coverage 52.87% 52.71% -0.17% ; ==========================================; Files 19 19 ; Lines 643 645 +2 ; ==========================================; Hits 340 340 ; - Misses 303 305 +2; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/105?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/grids.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/105/diff?src=pr&el=tree#diff-c3JjL2dyaWRzLmps) | `93.1% <75%> (-3.2%)` | :arrow_down: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/105/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `72.72% <0%> (-9.1%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/105?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/105?src=pr&el=footer). Last update [b36a83e...472d63d](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/105?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/105#issuecomment-469525131:1551,learn,learn,1551,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/105#issuecomment-469525131,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/111?src=pr&el=h1) Report; > Merging [#111](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/111?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/341c17410189528bb07cdcfc42e7e55fb81c730e?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/111/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/111?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #111 +/- ##; =======================================; Coverage 52.71% 52.71% ; =======================================; Files 19 19 ; Lines 645 645 ; =======================================; Hits 340 340 ; Misses 305 305; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/111?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/111?src=pr&el=footer). Last update [341c174...4fc55e9](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/111?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/111#issuecomment-470507075:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/111#issuecomment-470507075,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/113?src=pr&el=h1) Report; > Merging [#113](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/113?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/ebfd5655e2eeb8d10e0b9e38165f837d448164ee?src=pr&el=desc) will **decrease** coverage by `0.15%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/113/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/113?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #113 +/- ##; ==========================================; - Coverage 52.86% 52.71% -0.16% ; ==========================================; Files 19 19 ; Lines 645 645 ; ==========================================; - Hits 341 340 -1 ; - Misses 304 305 +1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/113?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/113/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `72.72% <0%> (-9.1%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/113?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/113?src=pr&el=footer). Last update [ebfd565...3a9f5db](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/113?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/113#issuecomment-470556810:1388,learn,learn,1388,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/113#issuecomment-470556810,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/117?src=pr&el=h1) Report; > Merging [#117](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/117?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/3307031283dab154d32c071c47d9e275f1a6e17e?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/117/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/117?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #117 +/- ##; =======================================; Coverage 52.71% 52.71% ; =======================================; Files 19 19 ; Lines 645 645 ; =======================================; Hits 340 340 ; Misses 305 305; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/117?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/117?src=pr&el=footer). Last update [3307031...a750c8a](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/117?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/117#issuecomment-470832431:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/117#issuecomment-470832431,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/128?src=pr&el=h1) Report; > Merging [#128](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/128?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/3b1518355df2f9bfcb81d702e3d5c55f52ab4757?src=pr&el=desc) will **increase** coverage by `0.07%`.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/128/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/128?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #128 +/- ##; ==========================================; + Coverage 58.09% 58.16% +0.07% ; ==========================================; Files 19 19 ; Lines 587 588 +1 ; ==========================================; + Hits 341 342 +1 ; Misses 246 246; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/128?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/128/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `68.93% <100%> (+0.3%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/128?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/128?src=pr&el=footer). Last update [3b15183...c6e828f](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/128?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/128#issuecomment-473388586:1408,learn,learn,1408,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/128#issuecomment-473388586,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/135?src=pr&el=h1) Report; > Merging [#135](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/135?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/bc34253580b9dffbd1035dbb717e6d1f9ee9285f?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/135/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/135?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #135 +/- ##; =======================================; Coverage 56.79% 56.79% ; =======================================; Files 19 19 ; Lines 648 648 ; =======================================; Hits 368 368 ; Misses 280 280; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/135?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/135?src=pr&el=footer). Last update [bc34253...f5e1e6d](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/135?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/135#issuecomment-473722817:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/135#issuecomment-473722817,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/137?src=pr&el=h1) Report; > Merging [#137](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/137?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/47b46131e951c906dc38c29125395792762de57e?src=pr&el=desc) will **decrease** coverage by `0.75%`.; > The diff coverage is `0%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/137/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/137?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #137 +/- ##; ==========================================; - Coverage 56.78% 56.03% -0.76% ; ==========================================; Files 19 19 ; Lines 597 605 +8 ; ==========================================; Hits 339 339 ; - Misses 258 266 +8; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/137?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/137/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `43.54% <ø> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/137/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `0% <0%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/137?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/137?src=pr&el=footer). Last update [47b4613...2aba006](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/137?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/137#issuecomment-474419827:1560,learn,learn,1560,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/137#issuecomment-474419827,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/173?src=pr&el=h1) Report; > Merging [#173](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/173?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/4c627e89efe5c268c26d458059bf1904995ebd5b?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/173/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/173?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #173 +/- ##; =======================================; Coverage 68.71% 68.71% ; =======================================; Files 18 18 ; Lines 652 652 ; =======================================; Hits 448 448 ; Misses 204 204; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/173?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/173?src=pr&el=footer). Last update [4c627e8...08e47eb](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/173?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/173#issuecomment-481800500:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/173#issuecomment-481800500,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/181?src=pr&el=h1) Report; > Merging [#181](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/181?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/e6edea506e6c6adb203db22be9f012f229fa2463?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/181/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/181?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #181 +/- ##; =======================================; Coverage 68.81% 68.81% ; =======================================; Files 18 18 ; Lines 651 651 ; =======================================; Hits 448 448 ; Misses 203 203; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/181?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/181?src=pr&el=footer). Last update [e6edea5...193fbeb](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/181?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/181#issuecomment-484238528:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/181#issuecomment-484238528,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/196?src=pr&el=h1) Report; > Merging [#196](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/196?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/c7d22b2e064e69487b8ca4f07a7a0dc2e82d6c1d?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/196/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/196?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #196 +/- ##; =======================================; Coverage 68.81% 68.81% ; =======================================; Files 18 18 ; Lines 651 651 ; =======================================; Hits 448 448 ; Misses 203 203; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/196?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/196/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/196?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/196?src=pr&el=footer). Last update [c7d22b2...54b9fd0](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/196?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/196#issuecomment-485596395:1363,learn,learn,1363,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/196#issuecomment-485596395,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/209?src=pr&el=h1) Report; > Merging [#209](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/209?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/cf61e5b0e15410727404778262ecaf90902c3484?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `0%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/209/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/209?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #209 +/- ##; =======================================; Coverage 66.42% 66.42% ; =======================================; Files 18 18 ; Lines 676 676 ; =======================================; Hits 449 449 ; Misses 227 227; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/209?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/209/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | :arrow_up: |; | [src/planetary\_constants.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/209/diff?src=pr&el=tree#diff-c3JjL3BsYW5ldGFyeV9jb25zdGFudHMuamw=) | `10% <0%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/209?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/209?src=pr&el=footer). Last update [cf61e5b...e754a9a](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/209?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/209#issuecomment-486721444:1553,learn,learn,1553,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/209#issuecomment-486721444,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/214?src=pr&el=h1) Report; > Merging [#214](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/214?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/cf61e5b0e15410727404778262ecaf90902c3484?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/214/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/214?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #214 +/- ##; =======================================; Coverage 66.42% 66.42% ; =======================================; Files 18 18 ; Lines 676 676 ; =======================================; Hits 449 449 ; Misses 227 227; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/214?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/214?src=pr&el=footer). Last update [cf61e5b...196fce5](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/214?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/214#issuecomment-489458829:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/214#issuecomment-489458829,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/226?src=pr&el=h1) Report; > Merging [#226](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/226?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/eafa08ea7abb0408a5f39b052d10124a250aad3f?src=pr&el=desc) will **increase** coverage by `0.7%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/226/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/226?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #226 +/- ##; =========================================; + Coverage 63.68% 64.39% +0.7% ; =========================================; Files 18 18 ; Lines 705 705 ; =========================================; + Hits 449 454 +5 ; + Misses 256 251 -5; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/226?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/226/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `8.06% <0%> (+8.06%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/226?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/226?src=pr&el=footer). Last update [eafa08e...5877d59](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/226?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/226#issuecomment-494961840:1395,learn,learn,1395,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/226#issuecomment-494961840,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/227?src=pr&el=h1) Report; > Merging [#227](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/227?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/6c0f252240ac5cb888f4ed3a52c9f183ca1b4b58?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/227/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/227?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #227 +/- ##; =======================================; Coverage 66.51% 66.51% ; =======================================; Files 18 18 ; Lines 675 675 ; =======================================; Hits 449 449 ; Misses 226 226; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/227?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/227/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/227?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/227?src=pr&el=footer). Last update [6c0f252...f34afe8](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/227?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/227#issuecomment-495013773:1363,learn,learn,1363,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/227#issuecomment-495013773,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/233?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@47d2abe`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/233/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/233?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #233 +/- ##; ========================================; Coverage ? 68.9% ; ========================================; Files ? 18 ; Lines ? 669 ; Branches ? 0 ; ========================================; Hits ? 461 ; Misses ? 208 ; Partials ? 0; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/233?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/233?src=pr&el=footer). Last update [47d2abe...3a75da0](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/233?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/233#issuecomment-495452404:191,learn,learn,191,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/233#issuecomment-495452404,4,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/239?src=pr&el=h1) Report; > Merging [#239](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/239?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/5c3454270b064117254590927995e468b4e9551e?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/239/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/239?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #239 +/- ##; =======================================; Coverage 74.71% 74.71% ; =======================================; Files 23 23 ; Lines 866 866 ; =======================================; Hits 647 647 ; Misses 219 219; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/239?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/239?src=pr&el=footer). Last update [5c34542...6a67403](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/239?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/239#issuecomment-496069475:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/239#issuecomment-496069475,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/239?src=pr&el=h1) Report; > Merging [#239](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/239?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/5c3454270b064117254590927995e468b4e9551e?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/239/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/239?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #239 +/- ##; =======================================; Coverage 74.71% 74.71% ; =======================================; Files 23 23 ; Lines 866 866 ; =======================================; Hits 647 647 ; Misses 219 219; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/239?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/239?src=pr&el=footer). Last update [5c34542...739b959](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/239?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/239#issuecomment-496069476:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/239#issuecomment-496069476,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/243?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@a099207`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `0%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/243/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/243?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #243 +/- ##; =========================================; Coverage ? 74.59% ; =========================================; Files ? 23 ; Lines ? 866 ; Branches ? 0 ; =========================================; Hits ? 646 ; Misses ? 220 ; Partials ? 0; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/243?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/243/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `83.81% <0%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/243?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/243?src=pr&el=footer). Last update [a099207...53f26c5](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/243?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/243#issuecomment-496245199:191,learn,learn,191,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/243#issuecomment-496245199,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/246?src=pr&el=h1) Report; > Merging [#246](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/246?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/0eea1372e44f6b80dbbc69f75f7e46b75eaf68f1?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/246/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/246?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #246 +/- ##; =======================================; Coverage 74.71% 74.71% ; =======================================; Files 23 23 ; Lines 866 866 ; =======================================; Hits 647 647 ; Misses 219 219; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/246?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/246?src=pr&el=footer). Last update [0eea137...c2041b3](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/246?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/246#issuecomment-496295851:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/246#issuecomment-496295851,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256?src=pr&el=h1) Report; > Merging [#256](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8d72d1fc7cdafc9d5b7d35caeaa3d0ac68fe0802?src=pr&el=desc) will **decrease** coverage by `0.11%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #256 +/- ##; ==========================================; - Coverage 71.14% 71.03% -0.12% ; ==========================================; Files 23 23 ; Lines 870 870 ; ==========================================; - Hits 619 618 -1 ; - Misses 251 252 +1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/planetary\_constants.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256/diff?src=pr&el=tree#diff-c3JjL3BsYW5ldGFyeV9jb25zdGFudHMuamw=) | `9.67% <0%> (-3.23%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256?src=pr&el=footer). Last update [8d72d1f...7c02d26](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/256#issuecomment-497298598:1423,learn,learn,1423,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/256#issuecomment-497298598,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256?src=pr&el=h1) Report; > Merging [#256](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8d72d1fc7cdafc9d5b7d35caeaa3d0ac68fe0802?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #256 +/- ##; =======================================; Coverage 71.14% 71.14% ; =======================================; Files 23 23 ; Lines 870 870 ; =======================================; Hits 619 619 ; Misses 251 251; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256?src=pr&el=footer). Last update [8d72d1f...7c02d26](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/256?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/256#issuecomment-497298599:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/256#issuecomment-497298599,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280?src=pr&el=h1) Report; > Merging [#280](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/fc12f60371eb0df7ba3d088771ddc25c0f258de6?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #280 +/- ##; =======================================; Coverage 62.51% 62.51% ; =======================================; Files 23 23 ; Lines 883 883 ; =======================================; Hits 552 552 ; Misses 331 331; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280?src=pr&el=footer). Last update [fc12f60...2fad83c](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/280#issuecomment-500250531:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/280#issuecomment-500250531,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/281?src=pr&el=h1) Report; > Merging [#281](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/281?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/b87555bbf9923fd18bed3b80bb5040d060193efa?src=pr&el=desc) will **increase** coverage by `0.38%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/281/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/281?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #281 +/- ##; ==========================================; + Coverage 67.98% 68.36% +0.38% ; ==========================================; Files 23 22 -1 ; Lines 887 882 -5 ; ==========================================; Hits 603 603 ; + Misses 284 279 -5; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/281?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/281/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/281?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/281?src=pr&el=footer). Last update [b87555b...8fbbf31](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/281?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/281#issuecomment-500239966:1399,learn,learn,1399,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/281#issuecomment-500239966,3,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283?src=pr&el=h1) Report; > Merging [#283](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/40dbd96fd45a30867063c476b3eecbe13db1fb5c?src=pr&el=desc) will **decrease** coverage by `5.22%`.; > The diff coverage is `0%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #283 +/- ##; ==========================================; - Coverage 68.36% 63.14% -5.23% ; ==========================================; Files 22 23 +1 ; Lines 882 955 +73 ; ==========================================; Hits 603 603 ; - Misses 279 352 +73; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/operators/finite\_volume\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283/diff?src=pr&el=tree#diff-c3JjL29wZXJhdG9ycy9maW5pdGVfdm9sdW1lX29wZXJhdG9ycy5qbA==) | `0% <0%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283?src=pr&el=footer). Last update [40dbd96...8a9d6e3](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/283#issuecomment-500644578:1439,learn,learn,1439,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/283#issuecomment-500644578,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/289?src=pr&el=h1) Report; > Merging [#289](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/289?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/40dbd96fd45a30867063c476b3eecbe13db1fb5c?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/289/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/289?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #289 +/- ##; =======================================; Coverage 68.36% 68.36% ; =======================================; Files 22 22 ; Lines 882 882 ; =======================================; Hits 603 603 ; Misses 279 279; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/289?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/289?src=pr&el=footer). Last update [40dbd96...cfa6d54](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/289?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/289#issuecomment-504075757:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/289#issuecomment-504075757,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/291?src=pr&el=h1) Report; > Merging [#291](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/291?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8dacd119c2638d7034f8cb64a9ca56d721b9a7d7?src=pr&el=desc) will **decrease** coverage by `0.53%`.; > The diff coverage is `0%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/291/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/291?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #291 +/- ##; ==========================================; - Coverage 68.36% 67.82% -0.54% ; ==========================================; Files 22 22 ; Lines 882 889 +7 ; ==========================================; Hits 603 603 ; - Misses 279 286 +7; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/291?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/291/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `66.66% <0%> (-23.34%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/291?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/291?src=pr&el=footer). Last update [8dacd11...00a3c5a](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/291?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/291#issuecomment-504206434:1392,learn,learn,1392,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/291#issuecomment-504206434,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/292?src=pr&el=h1) Report; > Merging [#292](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/292?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8dacd119c2638d7034f8cb64a9ca56d721b9a7d7?src=pr&el=desc) will **decrease** coverage by `0.07%`.; > The diff coverage is `0%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/292/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/292?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #292 +/- ##; ==========================================; - Coverage 68.36% 68.28% -0.08% ; ==========================================; Files 22 22 ; Lines 882 883 +1 ; ==========================================; Hits 603 603 ; - Misses 279 280 +1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/292?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/292/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/292/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `45.9% <0%> (-0.77%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/292?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/292?src=pr&el=footer). Last update [8dacd11...be6367e](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/292?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/292#issuecomment-504221152:1565,learn,learn,1565,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/292#issuecomment-504221152,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/294?src=pr&el=h1) Report; > Merging [#294](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/294?src=pr&el=desc) into [sponge-layer](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/00a3c5a423addfc1ff179f1c3b8f69a7ccc01557?src=pr&el=desc) will **decrease** coverage by `1.49%`.; > The diff coverage is `0%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/294/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/294?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## sponge-layer #294 +/- ##; ===============================================; - Coverage 67.82% 66.33% -1.5% ; ===============================================; Files 22 22 ; Lines 889 909 +20 ; ===============================================; Hits 603 603 ; - Misses 286 306 +20; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/294?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/294/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `38.29% <0%> (-28.37%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/294?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/294?src=pr&el=footer). Last update [00a3c5a...d4f9d59](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/294?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/294#issuecomment-504410759:1420,learn,learn,1420,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/294#issuecomment-504410759,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/296?src=pr&el=h1) Report; > Merging [#296](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/296?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/75cb66df94bd30a1c1ac20fbccc23346aeb1a0c7?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/296/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/296?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #296 +/- ##; =======================================; Coverage 68.06% 68.06% ; =======================================; Files 22 22 ; Lines 880 880 ; =======================================; Hits 599 599 ; Misses 281 281; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/296?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/296?src=pr&el=footer). Last update [75cb66d...912d49c](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/296?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/296#issuecomment-505479140:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/296#issuecomment-505479140,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/296?src=pr&el=h1) Report; > Merging [#296](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/296?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/75cb66df94bd30a1c1ac20fbccc23346aeb1a0c7?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/296/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/296?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #296 +/- ##; =======================================; Coverage 68.06% 68.06% ; =======================================; Files 22 22 ; Lines 880 880 ; =======================================; Hits 599 599 ; Misses 281 281; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/296?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/296?src=pr&el=footer). Last update [75cb66d...f223db9](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/296?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/296#issuecomment-505479138:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/296#issuecomment-505479138,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297?src=pr&el=h1) Report; > Merging [#297](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/75cb66df94bd30a1c1ac20fbccc23346aeb1a0c7?src=pr&el=desc) will **decrease** coverage by `2.6%`.; > The diff coverage is `0%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #297 +/- ##; ==========================================; - Coverage 68.06% 65.46% -2.61% ; ==========================================; Files 22 23 +1 ; Lines 880 915 +35 ; ==========================================; Hits 599 599 ; - Misses 281 316 +35; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/time\_step\_utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcF91dGlscy5qbA==) | `0% <0%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297?src=pr&el=footer). Last update [75cb66d...7ba8938](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/297#issuecomment-505509139:1396,learn,learn,1396,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/297#issuecomment-505509139,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297?src=pr&el=h1) Report; > Merging [#297](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/75cb66df94bd30a1c1ac20fbccc23346aeb1a0c7?src=pr&el=desc) will **decrease** coverage by `2.6%`.; > The diff coverage is `0%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #297 +/- ##; ==========================================; - Coverage 68.06% 65.46% -2.61% ; ==========================================; Files 22 23 +1 ; Lines 880 915 +35 ; ==========================================; Hits 599 599 ; - Misses 281 316 +35; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/time\_step\_utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcF91dGlscy5qbA==) | `0% <0%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297?src=pr&el=footer). Last update [75cb66d...95acffc](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/297?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/297#issuecomment-505509144:1396,learn,learn,1396,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/297#issuecomment-505509144,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/301?src=pr&el=h1) Report; > Merging [#301](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/301?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/c3428825442f8d155b3128a0f79797ba8f070f68?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/301/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/301?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #301 +/- ##; ======================================; Coverage 71.8% 71.8% ; ======================================; Files 24 24 ; Lines 1000 1000 ; ======================================; Hits 718 718 ; Misses 282 282; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/301?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/301?src=pr&el=footer). Last update [c342882...5b335a1](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/301?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/301#issuecomment-506986307:1052,learn,learn,1052,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/301#issuecomment-506986307,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/304?src=pr&el=h1) Report; > Merging [#304](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/304?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/54d8aa1ee1218ffed70232a277cc8cff5b72dc5b?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `0%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/304/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/304?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #304 +/- ##; ======================================; Coverage 71.8% 71.8% ; ======================================; Files 24 24 ; Lines 1000 1000 ; ======================================; Hits 718 718 ; Misses 282 282; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/304?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/304/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/planetary\_constants.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/304/diff?src=pr&el=tree#diff-c3JjL3BsYW5ldGFyeV9jb25zdGFudHMuamw=) | `9.67% <0%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/304?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/304?src=pr&el=footer). Last update [54d8aa1...90daffc](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/304?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/304#issuecomment-506993571:1550,learn,learn,1550,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/304#issuecomment-506993571,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/306?src=pr&el=h1) Report; > Merging [#306](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/306?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/816a44edcc28858e1c21f1a89ab5eb59e1296efa?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/306/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/306?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #306 +/- ##; =======================================; Coverage 73.22% 73.22% ; =======================================; Files 70 70 ; Lines 2017 2017 ; =======================================; Hits 1477 1477 ; Misses 540 540; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/306?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/306?src=pr&el=footer). Last update [816a44e...28e304b](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/306?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/306#issuecomment-507262393:1059,learn,learn,1059,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/306#issuecomment-507262393,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/306?src=pr&el=h1) Report; > Merging [#306](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/306?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8fdff750ee67d41ba3e485819105e3549e774d8a?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/306/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/306?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #306 +/- ##; =======================================; Coverage 72.57% 72.57% ; =======================================; Files 24 24 ; Lines 1032 1032 ; =======================================; Hits 749 749 ; Misses 283 283; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/306?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/306?src=pr&el=footer). Last update [8fdff75...2ad4f7c](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/306?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/306#issuecomment-507262392:1057,learn,learn,1057,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/306#issuecomment-507262392,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/308?src=pr&el=h1) Report; > Merging [#308](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/308?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8fdff750ee67d41ba3e485819105e3549e774d8a?src=pr&el=desc) will **decrease** coverage by `0.02%`.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/308/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/308?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #308 +/- ##; ==========================================; - Coverage 72.57% 72.55% -0.03% ; ==========================================; Files 24 24 ; Lines 1032 1031 -1 ; ==========================================; - Hits 749 748 -1 ; Misses 283 283; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/308?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/308/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `81.22% <100%> (-0.09%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/308?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/308?src=pr&el=footer). Last update [8fdff75...6a5af23](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/308?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/308#issuecomment-507671373:1413,learn,learn,1413,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/308#issuecomment-507671373,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316?src=pr&el=h1) Report; > Merging [#316](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/16c363e88a4e31295c84e1bdce29424916002b7b?src=pr&el=desc) will **decrease** coverage by `0.08%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #316 +/- ##; ==========================================; - Coverage 72.84% 72.75% -0.09% ; ==========================================; Files 24 24 ; Lines 1171 1171 ; ==========================================; - Hits 853 852 -1 ; - Misses 318 319 +1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/planetary\_constants.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316/diff?src=pr&el=tree#diff-c3JjL3BsYW5ldGFyeV9jb25zdGFudHMuamw=) | `9.67% <0%> (-3.23%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316?src=pr&el=footer). Last update [16c363e...f22ba66](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/316#issuecomment-516919432:1425,learn,learn,1425,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/316#issuecomment-516919432,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316?src=pr&el=h1) Report; > Merging [#316](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/16c363e88a4e31295c84e1bdce29424916002b7b?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #316 +/- ##; =======================================; Coverage 72.84% 72.84% ; =======================================; Files 24 24 ; Lines 1171 1171 ; =======================================; Hits 853 853 ; Misses 318 318; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316?src=pr&el=footer). Last update [16c363e...61250b3](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/316?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/316#issuecomment-516919438:1057,learn,learn,1057,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/316#issuecomment-516919438,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/334?src=pr&el=h1) Report; > Merging [#334](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/334?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/a26da9c932f562241fd96d97bfcc16f3c033e72a?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/334/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/334?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #334 +/- ##; =======================================; Coverage 61.06% 61.06% ; =======================================; Files 22 22 ; Lines 1243 1243 ; =======================================; Hits 759 759 ; Misses 484 484; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/334?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/334?src=pr&el=footer). Last update [a26da9c...d0d828e](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/334?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/334#issuecomment-518899373:1057,learn,learn,1057,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/334#issuecomment-518899373,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/334?src=pr&el=h1) Report; > Merging [#334](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/334?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/a26da9c932f562241fd96d97bfcc16f3c033e72a?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/334/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/334?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #334 +/- ##; =======================================; Coverage 61.06% 61.06% ; =======================================; Files 22 22 ; Lines 1243 1243 ; =======================================; Hits 759 759 ; Misses 484 484; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/334?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/334?src=pr&el=footer). Last update [a26da9c...dbb1507](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/334?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/334#issuecomment-518899372:1057,learn,learn,1057,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/334#issuecomment-518899372,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355?src=pr&el=h1) Report; > Merging [#355](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/7a4142c43b6cf1f5541687fa349d75cb52605c50?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #355 +/- ##; =======================================; Coverage 72.86% 72.86% ; =======================================; Files 22 22 ; Lines 1157 1157 ; =======================================; Hits 843 843 ; Misses 314 314; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `70% <ø> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355?src=pr&el=footer). Last update [7a4142c...cac07f2](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/355#issuecomment-520648448:1553,learn,learn,1553,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/355#issuecomment-520648448,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355?src=pr&el=h1) Report; > Merging [#355](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/7a4142c43b6cf1f5541687fa349d75cb52605c50?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #355 +/- ##; =======================================; Coverage 72.86% 72.86% ; =======================================; Files 22 22 ; Lines 1157 1157 ; =======================================; Hits 843 843 ; Misses 314 314; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `70% <ø> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355?src=pr&el=footer). Last update [7a4142c...0e104c5](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/355?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/355#issuecomment-520648447:1378,learn,learn,1378,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/355#issuecomment-520648447,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359?src=pr&el=h1) Report; > Merging [#359](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/352c018b6cb8801500bae61ac858ddc146bf3f48?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #359 +/- ##; =======================================; Coverage 74.74% 74.74% ; =======================================; Files 22 22 ; Lines 1176 1176 ; =======================================; Hits 879 879 ; Misses 297 297; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359?src=pr&el=footer). Last update [352c018...07f6d6f](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/359#issuecomment-522329562:1363,learn,learn,1363,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/359#issuecomment-522329562,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359?src=pr&el=h1) Report; > Merging [#359](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/352c018b6cb8801500bae61ac858ddc146bf3f48?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #359 +/- ##; =======================================; Coverage 74.74% 74.74% ; =======================================; Files 22 22 ; Lines 1176 1176 ; =======================================; Hits 879 879 ; Misses 297 297; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359?src=pr&el=footer). Last update [352c018...b651cdd](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/359?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/359#issuecomment-522329561:1363,learn,learn,1363,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/359#issuecomment-522329561,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/367?src=pr&el=h1) Report; > Merging [#367](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/367?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/66670ad782b66db7906d407ab9217ec0f26a7bb2?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/367/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/367?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #367 +/- ##; =======================================; Coverage 74.74% 74.74% ; =======================================; Files 22 22 ; Lines 1176 1176 ; =======================================; Hits 879 879 ; Misses 297 297; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/367?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/367?src=pr&el=footer). Last update [66670ad...f28a562](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/367?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/367#issuecomment-524133200:1057,learn,learn,1057,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/367#issuecomment-524133200,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/368?src=pr&el=h1) Report; > Merging [#368](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/368?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/66670ad782b66db7906d407ab9217ec0f26a7bb2?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/368/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/368?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #368 +/- ##; =======================================; Coverage 74.74% 74.74% ; =======================================; Files 22 22 ; Lines 1176 1176 ; =======================================; Hits 879 879 ; Misses 297 297; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/368?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/368?src=pr&el=footer). Last update [66670ad...a1cda11](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/368?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/368#issuecomment-524158650:1057,learn,learn,1057,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/368#issuecomment-524158650,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/370?src=pr&el=h1) Report; > Merging [#370](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/370?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/a4d400483f1470b843773d3751e056e96fc5bf3b?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/370/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/370?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #370 +/- ##; =======================================; Coverage 74.74% 74.74% ; =======================================; Files 22 22 ; Lines 1176 1176 ; =======================================; Hits 879 879 ; Misses 297 297; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/370?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/370?src=pr&el=footer). Last update [a4d4004...f870e57](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/370?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/370#issuecomment-525324805:1057,learn,learn,1057,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/370#issuecomment-525324805,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379?src=pr&el=h1) Report; > Merging [#379](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8c1c776b50df17ff10735e57488f22b20d455303?src=pr&el=desc) will **increase** coverage by `0.06%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #379 +/- ##; ==========================================; + Coverage 78.37% 78.43% +0.06% ; ==========================================; Files 22 22 ; Lines 1244 1243 -1 ; ==========================================; Hits 975 975 ; + Misses 269 268 -1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `98.4% <0%> (+0.78%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379?src=pr&el=footer). Last update [8c1c776...e2b0638](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/379#issuecomment-525894885:1413,learn,learn,1413,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/379#issuecomment-525894885,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379?src=pr&el=h1) Report; > Merging [#379](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8c1c776b50df17ff10735e57488f22b20d455303?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #379 +/- ##; =======================================; Coverage 78.37% 78.37% ; =======================================; Files 22 22 ; Lines 1244 1244 ; =======================================; Hits 975 975 ; Misses 269 269; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379?src=pr&el=footer). Last update [8c1c776...e2b0638](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/379?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/379#issuecomment-525894887:1057,learn,learn,1057,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/379#issuecomment-525894887,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380?src=pr&el=h1) Report; > Merging [#380](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8c1c776b50df17ff10735e57488f22b20d455303?src=pr&el=desc) will **increase** coverage by `0.06%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #380 +/- ##; ==========================================; + Coverage 78.37% 78.43% +0.06% ; ==========================================; Files 22 22 ; Lines 1244 1243 -1 ; ==========================================; Hits 975 975 ; + Misses 269 268 -1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `98.4% <0%> (+0.78%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380?src=pr&el=footer). Last update [8c1c776...c39e6e5](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/380#issuecomment-525911441:1413,learn,learn,1413,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/380#issuecomment-525911441,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382?src=pr&el=h1) Report; > Merging [#382](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8c1c776b50df17ff10735e57488f22b20d455303?src=pr&el=desc) will **increase** coverage by `<.01%`.; > The diff coverage is `90%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #382 +/- ##; ==========================================; + Coverage 78.37% 78.38% +<.01% ; ==========================================; Files 22 22 ; Lines 1244 1249 +5 ; ==========================================; + Hits 975 979 +4 ; - Misses 269 270 +1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `76.59% <90%> (+0.09%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382?src=pr&el=footer). Last update [8c1c776...4cabf50](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/382#issuecomment-525955148:1415,learn,learn,1415,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/382#issuecomment-525955148,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/396?src=pr&el=h1) Report; > Merging [#396](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/396?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/079cb5388a3e75edaefd27fa8aa4e3bb7052b1ff?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/396/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/396?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #396 +/- ##; =======================================; Coverage 64.62% 64.62% ; =======================================; Files 23 23 ; Lines 1405 1405 ; =======================================; Hits 908 908 ; Misses 497 497; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/396?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/396?src=pr&el=footer). Last update [079cb53...dd2f7f6](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/396?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/396#issuecomment-530390980:1057,learn,learn,1057,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/396#issuecomment-530390980,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/400?src=pr&el=h1) Report; > Merging [#400](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/400?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/ab615923855219a903573dd8c60b3a06677710cb?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/400/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/400?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #400 +/- ##; =======================================; Coverage 71.74% 71.74% ; =======================================; Files 23 23 ; Lines 1412 1412 ; =======================================; Hits 1013 1013 ; Misses 399 399; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/400?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/400?src=pr&el=footer). Last update [ab61592...58b7c91](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/400?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/400#issuecomment-531052708:1059,learn,learn,1059,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/400#issuecomment-531052708,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/404?src=pr&el=h1) Report; > Merging [#404](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/404?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/3d538faee7ad2879de9a9ece0c0f4c382942651c?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/404/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/404?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #404 +/- ##; ======================================; Coverage 71.4% 71.4% ; ======================================; Files 23 23 ; Lines 1413 1413 ; ======================================; Hits 1009 1009 ; Misses 404 404; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/404?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/404?src=pr&el=footer). Last update [3d538fa...46924a1](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/404?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/404#issuecomment-531480563:1054,learn,learn,1054,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/404#issuecomment-531480563,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/426?src=pr&el=h1) Report; > Merging [#426](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/426?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/885e9a33487df722d918ade4d22153a220309035?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/426/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/426?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #426 +/- ##; =======================================; Coverage 78.46% 78.46% ; =======================================; Files 25 25 ; Lines 1416 1416 ; =======================================; Hits 1111 1111 ; Misses 305 305; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/426?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/426/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `64.93% <ø> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/426?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/426?src=pr&el=footer). Last update [885e9a3...57e763d](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/426?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/426#issuecomment-533817354:1353,learn,learn,1353,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/426#issuecomment-533817354,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/434?src=pr&el=h1) Report; > Merging [#434](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/434?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/d32cf2035184f2320b27f270aee90e4688cf290f?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/434/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/434?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #434 +/- ##; =======================================; Coverage 78.46% 78.46% ; =======================================; Files 25 25 ; Lines 1416 1416 ; =======================================; Hits 1111 1111 ; Misses 305 305; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/434?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/434/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `64.93% <100%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/434?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/434?src=pr&el=footer). Last update [d32cf20...5eca271](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/434?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/434#issuecomment-536310395:1357,learn,learn,1357,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/434#issuecomment-536310395,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/436?src=pr&el=h1) Report; > Merging [#436](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/436?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/d32cf2035184f2320b27f270aee90e4688cf290f?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/436/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/436?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #436 +/- ##; =======================================; Coverage 78.46% 78.46% ; =======================================; Files 25 25 ; Lines 1416 1416 ; =======================================; Hits 1111 1111 ; Misses 305 305; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/436?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/436?src=pr&el=footer). Last update [d32cf20...de901b7](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/436?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/436#issuecomment-537077356:1059,learn,learn,1059,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/436#issuecomment-537077356,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/472?src=pr&el=h1) Report; > Merging [#472](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/472?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/17414b8725eb17cd42030059f0bab5de8e0ba7d0?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/472/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/472?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #472 +/- ##; =======================================; Coverage 71.65% 71.65% ; =======================================; Files 26 26 ; Lines 1418 1418 ; =======================================; Hits 1016 1016 ; Misses 402 402; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/472?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/472?src=pr&el=footer). Last update [17414b8...f6d89bd](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/472?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/472#issuecomment-541366489:1059,learn,learn,1059,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/472#issuecomment-541366489,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/477?src=pr&el=h1) Report; > Merging [#477](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/477?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/211e18c778f438c787b265a071eec7ab07d9402d?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/477/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/477?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #477 +/- ##; =======================================; Coverage 72.07% 72.07% ; =======================================; Files 26 26 ; Lines 1418 1418 ; =======================================; Hits 1022 1022 ; Misses 396 396; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/477?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/477?src=pr&el=footer). Last update [211e18c...a08f9df](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/477?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/477#issuecomment-541995246:1059,learn,learn,1059,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/477#issuecomment-541995246,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/478?src=pr&el=h1) Report; > Merging [#478](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/478?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/a511fdd2fedc9aae49a76905be24fdc60c2d60b0?src=pr&el=desc) will **decrease** coverage by `0.89%`.; > The diff coverage is `0%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/478/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/478?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #478 +/- ##; =========================================; - Coverage 67.72% 66.83% -0.9% ; =========================================; Files 69 70 +1 ; Lines 1952 1978 +26 ; =========================================; Hits 1322 1322 ; - Misses 630 656 +26; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/478?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/478/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `75% <ø> (ø)` | :arrow_up: |; | [src/logger.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/478/diff?src=pr&el=tree#diff-c3JjL2xvZ2dlci5qbA==) | `0% <0%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/478?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/478?src=pr&el=footer). Last update [a511fdd...e31988c](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/478?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-542355113:1548,learn,learn,1548,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-542355113,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/479?src=pr&el=h1) Report; > Merging [#479](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/479?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/9e892713d970d4389ac5addd76e1be8e8ec2c194?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/479/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/479?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #479 +/- ##; =======================================; Coverage 72.07% 72.07% ; =======================================; Files 26 26 ; Lines 1418 1418 ; =======================================; Hits 1022 1022 ; Misses 396 396; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/479?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/479/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `62.5% <ø> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/479/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `81.57% <ø> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/479?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/479?src=pr&el=footer). Last update [9e89271...5caffdd](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/479?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/479#issuecomment-542763369:1529,learn,learn,1529,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/479#issuecomment-542763369,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/484?src=pr&el=h1) Report; > Merging [#484](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/484?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/141e291b50a6e62d5b155839540f39f854181585?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/484/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/484?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #484 +/- ##; =======================================; Coverage 72.07% 72.07% ; =======================================; Files 26 26 ; Lines 1418 1418 ; =======================================; Hits 1022 1022 ; Misses 396 396; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/484?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/484/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `62.5% <ø> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/484/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `81.57% <ø> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/484?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/484?src=pr&el=footer). Last update [141e291...8f61f0e](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/484?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/484#issuecomment-542958748:1529,learn,learn,1529,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/484#issuecomment-542958748,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/492?src=pr&el=h1) Report; > Merging [#492](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/492?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/5114a22f7baa5d09c0421f5141e59d50d7c52e99?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/492/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/492?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #492 +/- ##; =======================================; Coverage 73.34% 73.34% ; =======================================; Files 27 27 ; Lines 1508 1508 ; =======================================; Hits 1106 1106 ; Misses 402 402; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/492?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/492?src=pr&el=footer). Last update [5114a22...952d506](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/492?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/492#issuecomment-544965262:1059,learn,learn,1059,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/492#issuecomment-544965262,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/494?src=pr&el=h1) Report; > Merging [#494](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/494?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/41a2b55767666c442ef19979996d5f4becfa4dd3?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/494/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/494?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #494 +/- ##; =======================================; Coverage 73.34% 73.34% ; =======================================; Files 27 27 ; Lines 1508 1508 ; =======================================; Hits 1106 1106 ; Misses 402 402; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/494?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/494?src=pr&el=footer). Last update [41a2b55...cd6edef](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/494?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/494#issuecomment-545190105:1059,learn,learn,1059,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/494#issuecomment-545190105,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/504?src=pr&el=h1) Report; > Merging [#504](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/504?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/20f9d08b926d144c2148bb94659e09bdf47a6944?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/504/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/504?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #504 +/- ##; ======================================; Coverage 73.2% 73.2% ; ======================================; Files 37 37 ; Lines 1709 1709 ; ======================================; Hits 1251 1251 ; Misses 458 458; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/504?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/504?src=pr&el=footer). Last update [20f9d08...e517aa5](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/504?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/504#issuecomment-546105615:1054,learn,learn,1054,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/504#issuecomment-546105615,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/508?src=pr&el=h1) Report; > Merging [#508](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/508?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/525d5c0a678541dcacb5b4a5d4f0abb2c18f2041?src=pr&el=desc) will **decrease** coverage by `<.01%`.; > The diff coverage is `78.57%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/508/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/508?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #508 +/- ##; ==========================================; - Coverage 72.33% 72.32% -0.01% ; ==========================================; Files 39 39 ; Lines 1717 1720 +3 ; ==========================================; + Hits 1242 1244 +2 ; - Misses 475 476 +1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/508?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/grids.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/508/diff?src=pr&el=tree#diff-c3JjL2dyaWRzLmps) | `79.24% <78.57%> (-0.76%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/508?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/508?src=pr&el=footer). Last update [525d5c0...c2b4c1f](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/508?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/508#issuecomment-546908518:1403,learn,learn,1403,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/508#issuecomment-546908518,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/523?src=pr&el=h1) Report; > Merging [#523](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/523?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/116013bd415d0bd25af5e91c8a53124f3af01c19?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/523/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/523?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #523 +/- ##; ======================================; Coverage 62.6% 62.6% ; ======================================; Files 70 70 ; Lines 2054 2054 ; ======================================; Hits 1286 1286 ; Misses 768 768; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/523?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/523?src=pr&el=footer). Last update [116013b...84e7d97](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/523?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/523#issuecomment-549106819:1054,learn,learn,1054,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/523#issuecomment-549106819,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/524?src=pr&el=h1) Report; > Merging [#524](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/524?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/4c7b58f9bca978e72bf3fa4d065b1ee5484a15c7?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/524/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/524?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #524 +/- ##; ======================================; Coverage 62.6% 62.6% ; ======================================; Files 70 70 ; Lines 2054 2054 ; ======================================; Hits 1286 1286 ; Misses 768 768; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/524?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/524?src=pr&el=footer). Last update [4c7b58f...3e2165c](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/524?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/524#issuecomment-549146116:1054,learn,learn,1054,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/524#issuecomment-549146116,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/526?src=pr&el=h1) Report; > Merging [#526](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/526?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/a3aa7a225c7363cc4b942154d53d77e47877c312?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/526/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/526?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #526 +/- ##; ======================================; Coverage 62.6% 62.6% ; ======================================; Files 70 70 ; Lines 2054 2054 ; ======================================; Hits 1286 1286 ; Misses 768 768; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/526?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/526?src=pr&el=footer). Last update [a3aa7a2...ae0dfb4](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/526?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/526#issuecomment-549418772:1054,learn,learn,1054,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/526#issuecomment-549418772,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/527?src=pr&el=h1) Report; > Merging [#527](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/527?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/2bb32015e64bff830f2233d588360ccc6b8605b4?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/527/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/527?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #527 +/- ##; ======================================; Coverage 62.6% 62.6% ; ======================================; Files 70 70 ; Lines 2054 2054 ; ======================================; Hits 1286 1286 ; Misses 768 768; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/527?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/527?src=pr&el=footer). Last update [2bb3201...3266a50](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/527?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/527#issuecomment-550941037:1054,learn,learn,1054,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/527#issuecomment-550941037,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/527?src=pr&el=h1) Report; > Merging [#527](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/527?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/2bb32015e64bff830f2233d588360ccc6b8605b4?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/527/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/527?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #527 +/- ##; ======================================; Coverage 62.6% 62.6% ; ======================================; Files 70 70 ; Lines 2054 2054 ; ======================================; Hits 1286 1286 ; Misses 768 768; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/527?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/527?src=pr&el=footer). Last update [2bb3201...c95ad21](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/527?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/527#issuecomment-550041587:1054,learn,learn,1054,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/527#issuecomment-550041587,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/534?src=pr&el=h1) Report; > Merging [#534](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/534?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/f8de2a103293ef43ed4f48e9fb60b6f6a820b7e4?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/534/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/534?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #534 +/- ##; =======================================; Coverage 71.09% 71.09% ; =======================================; Files 69 69 ; Lines 1958 1958 ; =======================================; Hits 1392 1392 ; Misses 566 566; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/534?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/jld2\_output\_writer.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/534/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvamxkMl9vdXRwdXRfd3JpdGVyLmps) | `84.61% <ø> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/534?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/534?src=pr&el=footer). Last update [f8de2a1...226cdd0](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/534?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/534#issuecomment-558358357:1413,learn,learn,1413,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/534#issuecomment-558358357,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/541?src=pr&el=h1) Report; > Merging [#541](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/541?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/581da73e143408877cf588ef9829c8337af0c1ca?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/541/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/541?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #541 +/- ##; =======================================; Coverage 67.72% 67.72% ; =======================================; Files 69 69 ; Lines 1952 1952 ; =======================================; Hits 1322 1322 ; Misses 630 630; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/541?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/541?src=pr&el=footer). Last update [581da73...7613452](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/541?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/541#issuecomment-559297127:1059,learn,learn,1059,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/541#issuecomment-559297127,1,['learn'],['learn']
Usability,# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@b1fe0ab`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `53.57%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #546 +/- ##; =========================================; Coverage ? 69.91% ; =========================================; Files ? 69 ; Lines ? 2001 ; Branches ? 0 ; =========================================; Hits ? 1399 ; Misses ? 602 ; Partials ? 0; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `52.74% <0%> (ø)` | |; | [...ure\_implementations/leith\_enstrophy\_diffusivity.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2xlaXRoX2Vuc3Ryb3BoeV9kaWZmdXNpdml0eS5qbA==) | `98.38% <100%> (ø)` | |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `76% <100%> (ø)` | |; | [...lence\_closure\_implementations/smagorinsky\_lilly.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3NtYWdvcmluc2t5X2xpbGx5Lmps) | `92.85% <100%> (ø)` | |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/climate-machine/Oc,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/546#issuecomment-564303242:191,learn,learn,191,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/546#issuecomment-564303242,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/558?src=pr&el=h1) Report; > Merging [#558](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/558?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/a511fdd2fedc9aae49a76905be24fdc60c2d60b0?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/558/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/558?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #558 +/- ##; =======================================; Coverage 67.72% 67.72% ; =======================================; Files 69 69 ; Lines 1952 1952 ; =======================================; Hits 1322 1322 ; Misses 630 630; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/558?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/558?src=pr&el=footer). Last update [a511fdd...b47e6bf](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/558?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/558#issuecomment-562867794:1059,learn,learn,1059,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/558#issuecomment-562867794,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/560?src=pr&el=h1) Report; > Merging [#560](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/560?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/a511fdd2fedc9aae49a76905be24fdc60c2d60b0?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/560/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/560?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #560 +/- ##; =======================================; Coverage 67.72% 67.72% ; =======================================; Files 69 69 ; Lines 1952 1952 ; =======================================; Hits 1322 1322 ; Misses 630 630; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/560?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/560?src=pr&el=footer). Last update [a511fdd...cfc0886](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/560?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/560#issuecomment-562875081:1059,learn,learn,1059,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/560#issuecomment-562875081,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/561?src=pr&el=h1) Report; > Merging [#561](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/561?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/cdf5091a9164c1ee6efd2f0b349e6170f2fab749?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/561/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/561?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #561 +/- ##; =======================================; Coverage 71.09% 71.09% ; =======================================; Files 69 69 ; Lines 1958 1958 ; =======================================; Hits 1392 1392 ; Misses 566 566; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/561?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/561?src=pr&el=footer). Last update [cdf5091...efd6ed5](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/561?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/561#issuecomment-562884879:1059,learn,learn,1059,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/561#issuecomment-562884879,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/569?src=pr&el=h1) Report; > Merging [#569](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/569?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/1cbe013f9bee727b3c113f6d7225e3fc3f490213?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/569/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/569?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #569 +/- ##; =======================================; Coverage 69.42% 69.42% ; =======================================; Files 71 71 ; Lines 2054 2054 ; =======================================; Hits 1426 1426 ; Misses 628 628; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/569?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Solvers/batched\_tridiagonal\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/569/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvYmF0Y2hlZF90cmlkaWFnb25hbF9zb2x2ZXIuamw=) | `100% <100%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/569?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/569?src=pr&el=footer). Last update [1cbe013...89f9cdf](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/569?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/569#issuecomment-565577003:1421,learn,learn,1421,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/569#issuecomment-565577003,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/573?src=pr&el=h1) Report; > Merging [#573](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/573?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/2d8eaa5b6c44ae93182d85baa55308a756acbcde?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/573/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/573?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #573 +/- ##; =======================================; Coverage 73.14% 73.14% ; =======================================; Files 70 70 ; Lines 2011 2011 ; =======================================; Hits 1471 1471 ; Misses 540 540; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/573?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/573?src=pr&el=footer). Last update [2d8eaa5...fa60043](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/573?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/573#issuecomment-568269935:1059,learn,learn,1059,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/573#issuecomment-568269935,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/575?src=pr&el=h1) Report; > Merging [#575](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/575?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/e15ef8789053cd1486fbafeb66996b36534fafbc?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/575/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/575?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #575 +/- ##; =======================================; Coverage 70.42% 70.42% ; =======================================; Files 71 71 ; Lines 2059 2059 ; =======================================; Hits 1450 1450 ; Misses 609 609; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/575?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/575?src=pr&el=footer). Last update [e15ef87...ee6c300](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/575?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/575#issuecomment-565822251:1059,learn,learn,1059,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/575#issuecomment-565822251,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/583?src=pr&el=h1) Report; > Merging [#583](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/583?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/588890004e69cfc7db10472b12a9840b8a9ad7b6?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/583/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/583?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #583 +/- ##; =======================================; Coverage 72.17% 72.17% ; =======================================; Files 70 70 ; Lines 2016 2016 ; =======================================; Hits 1455 1455 ; Misses 561 561; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/583?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/583/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `61.05% <ø> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/583?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/583?src=pr&el=footer). Last update [5888900...4b06fb3](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/583?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/583#issuecomment-568144596:1383,learn,learn,1383,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/583#issuecomment-568144596,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/588?src=pr&el=h1) Report; > Merging [#588](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/588?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/2d8eaa5b6c44ae93182d85baa55308a756acbcde?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/588/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/588?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #588 +/- ##; =======================================; Coverage 73.14% 73.14% ; =======================================; Files 70 70 ; Lines 2011 2011 ; =======================================; Hits 1471 1471 ; Misses 540 540; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/588?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/588/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `75% <ø> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/588?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/588?src=pr&el=footer). Last update [2d8eaa5...820cf2c](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/588?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/588#issuecomment-568330138:1364,learn,learn,1364,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/588#issuecomment-568330138,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/603?src=pr&el=h1) Report; > Merging [#603](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/603?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/ea74667e09cbb104b943f2cc63944c9fccd0c8fb?src=pr&el=desc) will **increase** coverage by `0.01%`.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/603/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/603?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #603 +/- ##; ==========================================; + Coverage 74.46% 74.47% +0.01% ; ==========================================; Files 121 121 ; Lines 2181 2182 +1 ; ==========================================; + Hits 1624 1625 +1 ; Misses 557 557; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/603?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Models/model.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/603/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9tb2RlbC5qbA==) | `92.3% <100%> (+0.64%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/603?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/603?src=pr&el=footer). Last update [ea74667...cafd236](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/603?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/603#issuecomment-579479379:1412,learn,learn,1412,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/603#issuecomment-579479379,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/604?src=pr&el=h1) Report; > Merging [#604](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/604?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8d1b164881f12607748bba044afb93c71c652fac?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/604/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/604?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #604 +/- ##; =======================================; Coverage 74.51% 74.51% ; =======================================; Files 117 117 ; Lines 2209 2209 ; =======================================; Hits 1646 1646 ; Misses 563 563; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/604?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/604?src=pr&el=footer). Last update [8d1b164...1baef0f](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/604?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/604#issuecomment-579877429:1061,learn,learn,1061,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/604#issuecomment-579877429,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/614?src=pr&el=h1) Report; > Merging [#614](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/614?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/11c41e1a1522e403f44510cb94d4da91ea30dec5&el=desc) will **increase** coverage by `0.03%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/614/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/614?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #614 +/- ##; ==========================================; + Coverage 74.55% 74.59% +0.03% ; ==========================================; Files 117 118 +1 ; Lines 2209 2220 +11 ; ==========================================; + Hits 1647 1656 +9 ; - Misses 562 564 +2 ; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/614?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/BoundaryConditions/boundary\_condition\_types.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/614/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9ib3VuZGFyeV9jb25kaXRpb25fdHlwZXMuamw=) | `100.00% <0.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/614?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/614?src=pr&el=footer). Last update [11c41e1...3bef9da](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/614?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/614#issuecomment-581707251:1474,learn,learn,1474,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/614#issuecomment-581707251,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/617?src=pr&el=h1) Report; > Merging [#617](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/617?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/f080635b93bdab9da7d1189ed21f27523c0ff810?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `50%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/617/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/617?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #617 +/- ##; =======================================; Coverage 74.55% 74.55% ; =======================================; Files 117 117 ; Lines 2209 2209 ; =======================================; Hits 1647 1647 ; Misses 562 562; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/617?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Coriolis/f\_plane.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/617/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL2ZfcGxhbmUuamw=) | `60.86% <50%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/617?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/617?src=pr&el=footer). Last update [f080635...fa18aea](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/617?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/617#issuecomment-581917672:1380,learn,learn,1380,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/617#issuecomment-581917672,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/619?src=pr&el=h1) Report; > Merging [#619](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/619?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/3e803ac0d2e9252654384137aafaef635621285b?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/619/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/619?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #619 +/- ##; =======================================; Coverage 69.97% 69.97% ; =======================================; Files 117 117 ; Lines 2188 2188 ; =======================================; Hits 1531 1531 ; Misses 657 657; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/619?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/619?src=pr&el=footer). Last update [3e803ac...07abf6e](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/619?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/619#issuecomment-583756217:1061,learn,learn,1061,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/619#issuecomment-583756217,1,['learn'],['learn']
Usability,# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@c417701`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `84.84%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #627 +/- ##; =========================================; Coverage ? 75.13% ; =========================================; Files ? 118 ; Lines ? 2280 ; Branches ? 0 ; =========================================; Hits ? 1713 ; Misses ? 567 ; Partials ? 0; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | |; | [src/Models/show\_models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9zaG93X21vZGVscy5qbA==) | `0% <ø> (ø)` | |; | [src/Architectures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627/diff?src=pr&el=tree#diff-c3JjL0FyY2hpdGVjdHVyZXMuamw=) | `88.88% <ø> (ø)` | |; | [src/Fields/Fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `100% <ø> (ø)` | |; | [src/Fields/show\_fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zaG93X2ZpZWxkcy5qbA==) | `0% <0%> (ø)` | |; | [src/Simulations.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zLmps) | `93.75% <100%> (ø)` | |; | [,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/627#issuecomment-586666059:191,learn,learn,191,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/627#issuecomment-586666059,1,['learn'],['learn']
Usability,# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@0001584`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `87.03%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #631 +/- ##; =========================================; Coverage ? 78.11% ; =========================================; Files ? 119 ; Lines ? 2326 ; Branches ? 0 ; =========================================; Hits ? 1817 ; Misses ? 509 ; Partials ? 0; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `85.71% <ø> (ø)` | |; | [src/BoundaryConditions/BoundaryConditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9Cb3VuZGFyeUNvbmRpdGlvbnMuamw=) | `100% <ø> (ø)` | |; | [src/Fields/Fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `100% <ø> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <100%> (ø)` | |; | [src/Fields/set!.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zZXQhLmps) | `67.64% <100%> (ø)` | |; | [src/Fields/field.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631/diff?src=pr&,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/631#issuecomment-589887431:191,learn,learn,191,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/631#issuecomment-589887431,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/635?src=pr&el=h1) Report; > Merging [#635](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/635?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/4ef4d11eb95c2356847aeb4386e7e15e8d19fc9e&el=desc) will **increase** coverage by `0.08%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/635/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/635?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #635 +/- ##; ==========================================; + Coverage 75.13% 75.21% +0.08% ; ==========================================; Files 118 118 ; Lines 2280 2280 ; ==========================================; + Hits 1713 1715 +2 ; + Misses 567 565 -2 ; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/635?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Fields/set!.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/635/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zZXQhLmps) | `67.64% <0.00%> (+5.88%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/635?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/635?src=pr&el=footer). Last update [4ef4d11...7d26516](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/635?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/635#issuecomment-588571865:1404,learn,learn,1404,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/635#issuecomment-588571865,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/639?src=pr&el=h1) Report; > Merging [#639](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/639?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/7b5cc97c18c8cd7dcc7a866312630df511735189&el=desc) will **not change** coverage by `%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/639/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/639?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #639 +/- ##; =======================================; Coverage 78.11% 78.11% ; =======================================; Files 119 119 ; Lines 2326 2326 ; =======================================; Hits 1817 1817 ; Misses 509 509 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/639?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/639?src=pr&el=footer). Last update [7b5cc97...ff5ff0b](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/639?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/639#issuecomment-590146432:1062,learn,learn,1062,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/639#issuecomment-590146432,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/649?src=pr&el=h1) Report; > Merging [#649](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/649?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/2ae1cbb86f484420dd2233745a5928a00bf6f77d&el=desc) will **decrease** coverage by `0.03%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/649/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/649?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #649 +/- ##; ==========================================; - Coverage 78.03% 78.00% -0.04% ; ==========================================; Files 118 118 ; Lines 2363 2364 +1 ; ==========================================; Hits 1844 1844 ; - Misses 519 520 +1 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/649?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/649?src=pr&el=footer). Last update [2ae1cbb...ad2e6ca](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/649?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/649#issuecomment-592226090:1090,learn,learn,1090,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/649#issuecomment-592226090,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/663?src=pr&el=h1) Report; > Merging [#663](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/663?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/d5baa8f561c7bc4c6ab0e093d13e721f595b52dd?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/663/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/663?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #663 +/- ##; =======================================; Coverage 78.23% 78.23% ; =======================================; Files 118 118 ; Lines 2375 2375 ; =======================================; Hits 1858 1858 ; Misses 517 517; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/663?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/663/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `100% <ø> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/663?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/663?src=pr&el=footer). Last update [d5baa8f...410357a](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/663?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/663#issuecomment-594238569:1419,learn,learn,1419,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/663#issuecomment-594238569,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/670?src=pr&el=h1) Report; > Merging [#670](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/670?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/162f19734cf169883c3a65f20bdc661a0859d251&el=desc) will **decrease** coverage by `0.34%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/670/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/670?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #670 +/- ##; ==========================================; - Coverage 78.33% 77.99% -0.35% ; ==========================================; Files 119 120 +1 ; Lines 2373 2413 +40 ; ==========================================; + Hits 1859 1882 +23 ; - Misses 514 531 +17 ; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/670?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/BoundaryConditions/apply\_no\_penetration\_bcs.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/670/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9hcHBseV9ub19wZW5ldHJhdGlvbl9iY3Muamw=) | `57.14% <0.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/670?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/670?src=pr&el=footer). Last update [162f197...ee15cf2](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/670?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/670#issuecomment-595024715:1476,learn,learn,1476,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/670#issuecomment-595024715,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/677?src=pr&el=h1) Report; > Merging [#677](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/677?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/74cfb85fd210e70313f19e9374dd4b9f119f2199&el=desc) will **decrease** coverage by `0.00%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/677/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/677?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #677 +/- ##; ==========================================; - Coverage 77.99% 77.98% -0.01% ; ==========================================; Files 120 121 +1 ; Lines 2413 2444 +31 ; ==========================================; + Hits 1882 1906 +24 ; - Misses 531 538 +7 ; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/677?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/TimeSteppers/velocity\_and\_tracer\_tendencies.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/677/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy92ZWxvY2l0eV9hbmRfdHJhY2VyX3RlbmRlbmNpZXMuamw=) | `100.00% <0.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/677?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/677?src=pr&el=footer). Last update [74cfb85...10e1e55](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/677?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/677#issuecomment-595518112:1476,learn,learn,1476,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/677#issuecomment-595518112,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/680?src=pr&el=h1) Report; > Merging [#680](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/680?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/74cfb85fd210e70313f19e9374dd4b9f119f2199&el=desc) will **not change** coverage by `%`.; > The diff coverage is `50.00%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/680/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/680?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #680 +/- ##; =======================================; Coverage 77.99% 77.99% ; =======================================; Files 120 119 -1 ; Lines 2413 2413 ; =======================================; Hits 1882 1882 ; Misses 531 531 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/680?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/680?src=pr&el=footer). Last update [74cfb85...bac2840](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/680?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/680#issuecomment-595556911:1068,learn,learn,1068,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/680#issuecomment-595556911,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/687?src=pr&el=h1) Report; > Merging [#687](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/687?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/a624737dd8acd60fd004ddde5f1f5f32daf7f64c&el=desc) will **not change** coverage by `%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/687/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/687?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #687 +/- ##; =======================================; Coverage 78.06% 78.06% ; =======================================; Files 119 119 ; Lines 2416 2416 ; =======================================; Hits 1886 1886 ; Misses 530 530 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/687?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/687?src=pr&el=footer). Last update [a624737...6e5df81](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/687?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/687#issuecomment-595793476:1062,learn,learn,1062,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/687#issuecomment-595793476,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/688?src=pr&el=h1) Report; > Merging [#688](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/688?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/26c9f0b0008a008e5a132b22af84ed874869e2d9&el=desc) will **not change** coverage by `%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/688/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/688?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #688 +/- ##; =======================================; Coverage 78.05% 78.05% ; =======================================; Files 120 120 ; Lines 2447 2447 ; =======================================; Hits 1910 1910 ; Misses 537 537 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/688?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/688?src=pr&el=footer). Last update [26c9f0b...7a5e110](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/688?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/688#issuecomment-596029521:1062,learn,learn,1062,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/688#issuecomment-596029521,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/689?src=pr&el=h1) Report; > Merging [#689](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/689?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/3975f4483a126a5a41dae58af94dc0ce3a7d10fe?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/689/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/689?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #689 +/- ##; =======================================; Coverage 78.05% 78.05% ; =======================================; Files 120 120 ; Lines 2447 2447 ; =======================================; Hits 1910 1910 ; Misses 537 537; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/689?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/689?src=pr&el=footer). Last update [3975f44...8308755](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/689?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/689#issuecomment-596034176:1061,learn,learn,1061,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/689#issuecomment-596034176,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/690?src=pr&el=h1) Report; > Merging [#690](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/690?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/4ad7e93f6ea9e715ca89ae2c1129f258430df656&el=desc) will **increase** coverage by `0.12%`.; > The diff coverage is `75.00%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/690/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/690?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #690 +/- ##; ==========================================; + Coverage 78.05% 78.18% +0.12% ; ==========================================; Files 120 120 ; Lines 2447 2443 -4 ; ==========================================; Hits 1910 1910 ; + Misses 537 533 -4 ; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/690?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/BoundaryConditions/apply\_value\_gradient\_bcs.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/690/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9hcHBseV92YWx1ZV9ncmFkaWVudF9iY3Muamw=) | `56.75% <75.00%> (+5.53%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/690?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/690?src=pr&el=footer). Last update [4ad7e93...fc94431](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/690?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/690#issuecomment-596534944:1485,learn,learn,1485,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/690#issuecomment-596534944,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/691?src=pr&el=h1) Report; > Merging [#691](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/691?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/4ad7e93f6ea9e715ca89ae2c1129f258430df656&el=desc) will **increase** coverage by `0.16%`.; > The diff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/691/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/691?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #691 +/- ##; ==========================================; + Coverage 78.05% 78.22% +0.16% ; ==========================================; Files 120 120 ; Lines 2447 2466 +19 ; ==========================================; + Hits 1910 1929 +19 ; Misses 537 537 ; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/691?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [...rbulenceClosures/turbulence\_closure\_diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/691/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfZGlhZ25vc3RpY3Muamw=) | `100.00% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/691?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/691?src=pr&el=footer). Last update [4ad7e93...f6061d6](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/691?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/691#issuecomment-597588971:1484,learn,learn,1484,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/691#issuecomment-597588971,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/693?src=pr&el=h1) Report; > Merging [#693](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/693?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/4ad7e93f6ea9e715ca89ae2c1129f258430df656&el=desc) will **not change** coverage by `%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/693/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/693?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #693 +/- ##; =======================================; Coverage 78.05% 78.05% ; =======================================; Files 120 120 ; Lines 2447 2447 ; =======================================; Hits 1910 1910 ; Misses 537 537 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/693?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/693?src=pr&el=footer). Last update [4ad7e93...a921fc3](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/693?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/693#issuecomment-596848394:1062,learn,learn,1062,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/693#issuecomment-596848394,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/701?src=pr&el=h1) Report; > Merging [#701](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/701?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/229b35d3c49144b518c192105e5e7ea94247d7e6&el=desc) will **increase** coverage by `0.00%`.; > The diff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/701/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/701?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #701 +/- ##; =======================================; Coverage 78.45% 78.46% ; =======================================; Files 122 122 ; Lines 2469 2470 +1 ; =======================================; + Hits 1937 1938 +1 ; Misses 532 532 ; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/701?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Fields/field\_tuples.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/701/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZF90dXBsZXMuamw=) | `91.42% <100.00%> (+0.25%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/701?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/701?src=pr&el=footer). Last update [229b35d...f135fd5](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/701?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/701#issuecomment-599301004:1411,learn,learn,1411,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/701#issuecomment-599301004,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/708?src=pr&el=h1) Report; > Merging [#708](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/708?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8e3c27504be68ca06bacc7502cd6095ae390f8c6&el=desc) will **increase** coverage by `0.02%`.; > The diff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/708/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/708?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #708 +/- ##; ==========================================; + Coverage 78.55% 78.57% +0.02% ; ==========================================; Files 122 122 ; Lines 2485 2488 +3 ; ==========================================; + Hits 1952 1955 +3 ; Misses 533 533 ; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/708?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Fields/field\_tuples.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/708/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZF90dXBsZXMuamw=) | `91.89% <100.00%> (+0.71%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/708?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/708?src=pr&el=footer). Last update [8e3c275...867cf1a](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/708?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/708#issuecomment-600632470:1429,learn,learn,1429,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/708#issuecomment-600632470,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/713?src=pr&el=h1) Report; > Merging [#713](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/713?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/54bfdf659879ae313252d7e782fe510d6a9a9db2?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/713/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/713?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #713 +/- ##; ======================================; Coverage 78.7% 78.7% ; ======================================; Files 122 122 ; Lines 2489 2489 ; ======================================; Hits 1959 1959 ; Misses 530 530; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/713?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/713?src=pr&el=footer). Last update [54bfdf6...8be4fea](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/713?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/713#issuecomment-601779447:1056,learn,learn,1056,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/713#issuecomment-601779447,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/715?src=pr&el=h1) Report; > Merging [#715](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/715?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/4f3638ca7ed3f518be02a3811ea552cd6fb201f6&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/715/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/715?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #715 +/- ##; =======================================; Coverage 76.92% 76.92% ; =======================================; Files 122 122 ; Lines 2462 2462 ; =======================================; Hits 1894 1894 ; Misses 568 568 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/715?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/715?src=pr&el=footer). Last update [4f3638c...4f3638c](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/715?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/715#issuecomment-603972425:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/715#issuecomment-603972425,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/717?src=pr&el=h1) Report; > Merging [#717](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/717?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/6502f078c8f7698a2fb6cd398d9e96cfacccc787&el=desc) will **not change** coverage by `%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/717/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/717?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #717 +/- ##; =======================================; Coverage 79.75% 79.75% ; =======================================; Files 122 122 ; Lines 2489 2489 ; =======================================; Hits 1985 1985 ; Misses 504 504 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/717?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/717?src=pr&el=footer). Last update [6502f07...7c2565f](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/717?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/717#issuecomment-604165780:1062,learn,learn,1062,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/717#issuecomment-604165780,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/718?src=pr&el=h1) Report; > Merging [#718](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/718?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8e4cdc068b102046cbf1787f9dde3ca71c133574&el=desc) will **not change** coverage by `%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/718/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/718?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #718 +/- ##; =======================================; Coverage 79.75% 79.75% ; =======================================; Files 122 122 ; Lines 2489 2489 ; =======================================; Hits 1985 1985 ; Misses 504 504 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/718?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/718?src=pr&el=footer). Last update [8e4cdc0...f6c7ef4](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/718?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/718#issuecomment-604176073:1062,learn,learn,1062,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/718#issuecomment-604176073,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/730?src=pr&el=h1) Report; > Merging [#730](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/730?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/ab6927bb593db702e702ecea0cf749f0ca3c8306&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/730/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/730?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #730 +/- ##; =======================================; Coverage 76.58% 76.58% ; =======================================; Files 122 122 ; Lines 2422 2422 ; =======================================; Hits 1855 1855 ; Misses 567 567 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/730?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/730?src=pr&el=footer). Last update [ab6927b...0d105e2](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/730?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/730#issuecomment-613387978:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/730#issuecomment-613387978,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/736?src=pr&el=h1) Report; > Merging [#736](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/736?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/3edb18d3e3d600ed9ae77499b095e5d4c434738a&el=desc) will **not change** coverage.; > The diff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/736/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/736?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #736 +/- ##; =======================================; Coverage 77.00% 77.00% ; =======================================; Files 124 124 ; Lines 2466 2466 ; =======================================; Hits 1899 1899 ; Misses 567 567 ; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/736?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Diagnostics/horizontal\_average.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/736/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2hvcml6b250YWxfYXZlcmFnZS5qbA==) | `84.61% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/736?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/736?src=pr&el=footer). Last update [3edb18d...c5d11e6](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/736?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/736#issuecomment-619292925:1405,learn,learn,1405,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/736#issuecomment-619292925,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/738?src=pr&el=h1) Report; > Merging [#738](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/738?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/2b4b18bd0b4f8607aa78d4802a8f4df67648e083&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/738/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/738?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #738 +/- ##; =======================================; Coverage 77.16% 77.16% ; =======================================; Files 125 125 ; Lines 2483 2483 ; =======================================; Hits 1916 1916 ; Misses 567 567 ; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/738?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/738?src=pr&el=footer). Last update [2b4b18b...f39524a](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/738?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/738#issuecomment-620015824:1055,learn,learn,1055,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/738#issuecomment-620015824,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/740?src=pr&el=h1) Report; > Merging [#740](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/740?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/2b4b18bd0b4f8607aa78d4802a8f4df67648e083&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/740/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/740?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #740 +/- ##; =======================================; Coverage 77.16% 77.16% ; =======================================; Files 125 125 ; Lines 2483 2483 ; =======================================; Hits 1916 1916 ; Misses 567 567 ; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/740?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Grids/grid\_utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/740/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `98.52% <ø> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/740?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/740?src=pr&el=footer). Last update [2b4b18b...189c8b0](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/740?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/740#issuecomment-620054973:1361,learn,learn,1361,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/740#issuecomment-620054973,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/741?src=pr&el=h1) Report; > Merging [#741](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/741?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/2b4b18bd0b4f8607aa78d4802a8f4df67648e083&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/741/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/741?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #741 +/- ##; =======================================; Coverage 77.16% 77.16% ; =======================================; Files 125 125 ; Lines 2483 2483 ; =======================================; Hits 1916 1916 ; Misses 567 567 ; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/741?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/741/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100.00% <ø> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/741?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/741?src=pr&el=footer). Last update [2b4b18b...2b5e40d](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/741?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/741#issuecomment-620076874:1353,learn,learn,1353,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/741#issuecomment-620076874,1,['learn'],['learn']
Usability,## [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1085?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=CliMA) Report; > :exclamation: No coverage uploaded for pull request base (`main@fad81b0`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=CliMA#section-missing-base-commit).; > Patch has no changes to coverable lines. > :exclamation: Current head 32a06cb differs from pull request most recent head 94fdef6. Consider uploading reports for the commit 94fdef6 to get more accurate results. <details><summary>Additional details and impacted files</summary>. ```diff; @@ Coverage Diff @@; ## main #1085 +/- ##; =======================================; Coverage ? 57.31% ; =======================================; Files ? 162 ; Lines ? 3882 ; Branches ? 0 ; =======================================; Hits ? 2225 ; Misses ? 1657 ; Partials ? 0 ; ```. Help us with your feedback. Take ten seconds to tell us [how you rate us](https://about.codecov.io/nps?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=CliMA). Have a feature suggestion? [Share it here.](https://app.codecov.io/gh/feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=CliMA). </details>. [:umbrella: View full report in Codecov by Sentry](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1085?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=CliMA). ; :loudspeaker: Do you have feedback about the report comment? [Let us know in this issue](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=CliMA).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1085#issuecomment-713171413:279,learn,learn,279,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1085#issuecomment-713171413,5,"['feedback', 'learn']","['feedback', 'learn']"
Usability,"## master #408 +/- ##; ==========================================; + Coverage 72.98% 73.05% +0.07% ; ==========================================; Files 25 25 ; Lines 1403 1403 ; ==========================================; + Hits 1024 1025 +1 ; + Misses 379 378 -1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/408?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/turbulence\_closures/TurbulenceClosures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/408/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvVHVyYnVsZW5jZUNsb3N1cmVzLmps) | `100% <ø> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/408/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `80.95% <ø> (+1.88%)` | :arrow_up: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/408/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/grids.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/408/diff?src=pr&el=tree#diff-c3JjL2dyaWRzLmps) | `93.54% <ø> (ø)` | :arrow_up: |; | [...bulence\_closures/turbulence\_closure\_diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/408/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvdHVyYnVsZW5jZV9jbG9zdXJlX2RpYWdub3N0aWNzLmps) | `25% <25%> (+5%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/408?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/408?src=pr&el=footer). Last update [1cded5f...7be1f18](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/408?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/408#issuecomment-531563457:2225,learn,learn,2225,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/408#issuecomment-531563457,1,['learn'],['learn']
Usability,#3733 introduces a very simple test for interpolation on field time series (testing trivial interpolation),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3731#issuecomment-2310580405:24,simpl,simple,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3731#issuecomment-2310580405,2,['simpl'],['simple']
Usability,"#3814 is one approach. Another approach which is a lot simpler actually would be to multiply the tendencies by `!peripheral_node(i, j, k, grid, loc...)`. Let's see how #3814 turns out and we can try that instead if we want.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2389213503:55,simpl,simpler,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2389213503,2,['simpl'],['simpler']
Usability,"%)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/118/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `84% <50%> (-3.5%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/118/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `70.34% <69.09%> (+2.38%)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/118/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `88.23% <88.23%> (-11.77%)` | :arrow_down: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/118/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `0% <0%> (-72.73%)` | :arrow_down: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/118/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `43.08% <0%> (-3.37%)` | :arrow_down: |; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/118/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `0% <0%> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/118/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `0% <0%> (ø)` | :arrow_up: |; | ... and [1 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/118/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/118?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/118?src=pr&el=footer). Last update [3307031...b5d3983](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/118?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/118#issuecomment-471138307:2975,learn,learn,2975,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/118#issuecomment-471138307,1,['learn'],['learn']
Usability,"&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/c3f6ce0b52a4bb519d1a2efe87c755a9113d6851?el=desc) will **increase** coverage by `0.01%`.; > The diff coverage is `92.30%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/970/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/970?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #970 +/- ##; ==========================================; + Coverage 72.04% 72.06% +0.01% ; ==========================================; Files 205 205 ; Lines 5964 5968 +4 ; ==========================================; + Hits 4297 4301 +4 ; Misses 1667 1667 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/970?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [test/test\_averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/970/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2F2ZXJhZ2VkX2ZpZWxkLmps) | `0.00% <ø> (ø)` | |; | [src/BoundaryConditions/zero\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/970/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy96ZXJvX2hhbG9fcmVnaW9ucy5qbA==) | `82.60% <91.66%> (+3.66%)` | :arrow_up: |; | [src/Fields/averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/970/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hdmVyYWdlZF9maWVsZC5qbA==) | `94.44% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/970?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/970?src=pr&el=footer). Last update [c3f6ce0...d407636](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/970?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/970#issuecomment-698357988:1748,learn,learn,1748,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/970#issuecomment-698357988,1,['learn'],['learn']
Usability,"(ø)` | |; | [src/Operators/tracer\_advection\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy90cmFjZXJfYWR2ZWN0aW9uX29wZXJhdG9ycy5qbA==) | `0% <0%> (ø)` | |; | [src/Operators/viscous\_dissipation\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy92aXNjb3VzX2Rpc3NpcGF0aW9uX29wZXJhdG9ycy5qbA==) | `0% <0%> (ø)` | |; | [src/Operators/divergence\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9kaXZlcmdlbmNlX29wZXJhdG9ycy5qbA==) | `0% <0%> (ø)` | |; | [src/Operators/difference\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9kaWZmZXJlbmNlX29wZXJhdG9ycy5qbA==) | `0% <0%> (ø)` | |; | [src/Operators/interpolation\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9pbnRlcnBvbGF0aW9uX29wZXJhdG9ycy5qbA==) | `0% <0%> (ø)` | |; | [src/Operators/coriolis\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9jb3Jpb2xpc19vcGVyYXRvcnMuamw=) | `0% <0%> (ø)` | |; | ... and [19 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283?src=pr&el=footer). Last update [cacb753...0283c18](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/283?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/283#issuecomment-500644580:3457,learn,learn,3457,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/283#issuecomment-500644580,1,['learn'],['learn']
Usability,"). ```diff; @@ Coverage Diff @@; ## master #134 +/- ##; ==========================================; + Coverage 56.79% 57.36% +0.57% ; ==========================================; Files 19 19 ; Lines 648 591 -57 ; ==========================================; - Hits 368 339 -29 ; + Misses 280 252 -28; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/134?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/operators/operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/134/diff?src=pr&el=tree#diff-c3JjL29wZXJhdG9ycy9vcGVyYXRvcnMuamw=) | `100% <ø> (ø)` | :arrow_up: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/134/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `33.33% <0%> (-9.41%)` | :arrow_down: |; | [src/operators/ops\_regular\_cartesian\_grid.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/134/diff?src=pr&el=tree#diff-c3JjL29wZXJhdG9ycy9vcHNfcmVndWxhcl9jYXJ0ZXNpYW5fZ3JpZC5qbA==) | `85.86% <100%> (+0.15%)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/134/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `44.26% <100%> (+3.27%)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/134/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `80% <0%> (-4%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/134?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/134?src=pr&el=footer). Last update [953056d...d423d75](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/134?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/134#issuecomment-473704355:2195,learn,learn,2195,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/134#issuecomment-473704355,1,['learn'],['learn']
Usability,"* coverage by `0.07%`.; > The diff coverage is `84.37%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/409/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/409?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #409 +/- ##; ==========================================; - Coverage 73.05% 72.98% -0.08% ; ==========================================; Files 25 25 ; Lines 1403 1403 ; ==========================================; - Hits 1025 1024 -1 ; - Misses 378 379 +1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/409?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/grids.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/409/diff?src=pr&el=tree#diff-c3JjL2dyaWRzLmps) | `93.54% <ø> (ø)` | :arrow_up: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/409/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `75% <0%> (-25%)` | :arrow_down: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/409/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `68.81% <75%> (-1.4%)` | :arrow_down: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/409/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `64.93% <92.3%> (+2.11%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/409?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/409?src=pr&el=footer). Last update [496d705...c9cc007](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/409?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/409#issuecomment-531809838:1906,learn,learn,1906,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/409#issuecomment-531809838,1,['learn'],['learn']
Usability,"**Can we use advection for mass evolution equation?**. Let me try and convince you that using advection for continuity makes sense. If I don't succeed then clearly I need to put more thought into it. The governing equation can be written in two forms; $$; \partial_t = -\partial_x (h u) - \partial_y (h v) = - \partial_x U - \partial_y V ; $$; If we were to solve this in terms of the velocities (u,v), then using advection is clearly a good idea as we are advecting h by the velocity. In the case of upwinding, we pick the direction based on the sign of u (or v). We are using the transports instead of velocities but it is very similar to the advection of a tracer $\nabla \cdot (u c)$ except that we use c = 1. Given that the physics is the same in both cases, I think we should be using the advection scheme for this term. . The evolution equations for h and c have a lot in common, which is helpful here. The one major difference is that h is an active tracer in the sense that it feeds back on the momentum. Even though that's the case, I don't think this should affect how we discretize the advection of h, even though it is disguesed with our use of the transport variable. If you agree with my reasoning I don't think we need to do anything different for the evolution of height equation, we might just need to have some new functions that account for this, which are essentially equivalent to c = 0. Maybe what you suggest is the way to proceed?. **High Order Finite Volume**. I agree that keeping things finite volume is a good idea, and that is how I would like to proceed. Good to know that IncompressibleModel won't generalize to higher order. I agree that the 4th-order pieces are there and just need to be assembled. The paper you cited above is very helpful but needs to be modified slightly as they present the method for a non-staggered grid, but ours is staggered. That is not problem, I just need to work through the details. Unless they have been done already?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1265#issuecomment-744478924:156,clear,clearly,156,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1265#issuecomment-744478924,4,['clear'],['clearly']
Usability,"**Final Commit Details**. Remove 4/3 factor, && --> &, ζ=NaN where undefined. 1. Remove 4/3 Factor in Vorticity Computation: The 4/3 factor was initially introduced in the vorticity calculation at the corners because the area used to divide the circulation (in the denominator) was reduced to three-quarters of its original value. However, it turns out that by adopting the Haversine formula for calculating the quadrilateral area on a sphere---which simplifies to a triangle when two points coincide---the 4/3 factor is inherently accounted for. Therefore, the explicit inclusion of this factor is no longer necessary. 2. Replace Short-Circuiting && with Logical &: Changed the short-circuiting && operator to the logical & operator to ensure compatibility with GPU operations. 3. Set Circulation Γ and Vorticity ζ to NaN when Undefined: Updated the code to assign NaN (Not a Number) to circulation Γ and vorticity ζ in cases where they are undefined. @glwagner, @navidcy, could one of you please review this PR once the tests pass, so I can proceed with merging? Thanks!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3325#issuecomment-2394511543:451,simpl,simplifies,451,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3325#issuecomment-2394511543,2,['simpl'],['simplifies']
Usability,",; filepath = ""snap.eady.nc"",; mode = ""c""); simulation.output_writers[:avg] = NetCDFOutputWriter(model, outputs,; schedule = AveragedTimeInterval(2Δt; window=1.999Δt, stride=1),; filepath = ""avg.eady.nc"",; mode = ""c""). @info ""Starting run""; run!(simulation); ```. This produces the wrong result for `u`, reproduced below. (Appears to be a cumulative mean.) . ![u_evolution](https://user-images.githubusercontent.com/13205162/124214589-537c9800-daa7-11eb-99cd-ef90fcc5b8cd.png). However, if I swap the line `outputs = (tke_c=tke_c, u=u,)` for ; ```julia; outputs = (tke_k=tke_k, u=u,); ```; (so basically I'm just changing the **TKE** calculation from being done with a `ComputedField` to being done with a `KernelComputedField`) then the output for **`u`** is correct!. ![u_evolution](https://user-images.githubusercontent.com/13205162/124214510-2c25cb00-daa7-11eb-9b48-c2c9c3bd5b4a.png). So just to be clear: the nature of the other diagnostics being calculated in the list of outputs changes the average result for `u`! Below is a list of what works and doesn't work (for `u`) when setting the list of outputs:. ```julia; outputs = (tke_c=tke_c, u=u,) # Doesn't work; outputs = (tke_k=tke_k, u=u,) # Works; outputs = (tke_k=tke_k, tke_c=tke_c, u=u,) # Doesn't work; outputs = (tke_k=tke_k, u=u, v=v, w=w) # Doesn't work; outputs = (tke_k=tke_k, u=u, v=v,) # Doesn't work; outputs = (u=u, v=v,) # Doesn't work; outputs = (u=u, w=w,) # Doesn't work; outputs = (u=u,) # Works; ```. Notes: . - I haven't checked the calculation of the other stuff yet; - I created [a branch](https://github.com/CliMA/Oceananigans.jl/tree/tc/fix-time-average) that lets me keep track of when each condition [here](https://github.com/CliMA/Oceananigans.jl/blob/d17f926b2c4787bf44f619439e81bfb82937aabf/src/OutputWriters/windowed_time_average.jl#L146) gets accessed and the number of times it accesses [this condition](https://github.com/CliMA/Oceananigans.jl/blob/d17f926b2c4787bf44f619439e81bfb82937aabf/src/OutputWriters",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872684633:2208,clear,clear,2208,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872684633,2,['clear'],['clear']
Usability,"- `extrema(Δz)` is not as clear... let's just write `min(Δz) = ..., max(Δz) = ...`; - I'd suggest something like; ```Julia; z ∈ [0.0, 1.0], min(Δz) = ..., max(Δz) = ...; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2064#issuecomment-971140218:26,clear,clear,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2064#issuecomment-971140218,2,['clear'],['clear']
Usability,"-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `83.05% <0%> (-3.07%)` | :arrow_down: |; | [src/TimeSteppers/kernels.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/557/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9rZXJuZWxzLmps) | `57.8% <0%> (-2.6%)` | :arrow_down: |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/557/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `75.75% <0%> (-0.25%)` | :arrow_down: |; | [src/Solvers/batched\_tridiagonal\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/557/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvYmF0Y2hlZF90cmlkaWFnb25hbF9zb2x2ZXIuamw=) | `100% <0%> (ø)` | |; | [src/logger.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/557/diff?src=pr&el=tree#diff-c3JjL2xvZ2dlci5qbA==) | `0% <0%> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/557/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `76.92% <0%> (+1.92%)` | :arrow_up: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/557/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `89.23% <0%> (+2.69%)` | :arrow_up: |; | ... and [9 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/557/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/557?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/557?src=pr&el=footer). Last update [a511fdd...129f822](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/557?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/557#issuecomment-562864567:3530,learn,learn,3530,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/557#issuecomment-562864567,1,['learn'],['learn']
Usability,"-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `93.15% <100.00%> (+0.36%)` | :arrow_up: |; | [test/test\_simulations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3NpbXVsYXRpb25zLmps) | `100.00% <100.00%> (ø)` | |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `66.66% <0.00%> (+1.04%)` | :arrow_up: |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `72.34% <0.00%> (+1.28%)` | :arrow_up: |; | [src/Grids/grid\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `90.50% <0.00%> (+2.33%)` | :arrow_up: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `83.33% <0.00%> (+2.81%)` | :arrow_up: |; | [src/Diagnostics/average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2F2ZXJhZ2Uuamw=) | `97.29% <0.00%> (+5.99%)` | :arrow_up: |; | [src/Grids/Grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL0dyaWRzLmps) | `78.57% <0.00%> (+7.14%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886?src=pr&el=footer). Last update [fbbb5f8...d326819](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/886?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/886#issuecomment-683319943:2891,learn,learn,2891,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/886#issuecomment-683319943,1,['learn'],['learn']
Usability,"-machine/Oceananigans.jl/commit/1e693f87252ad80d4ba08cc1d7c093eba683db13?src=pr&el=desc) will **increase** coverage by `0.78%`.; > The diff coverage is `72.09%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/238/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/238?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #238 +/- ##; ==========================================; + Coverage 73.92% 74.71% +0.78% ; ==========================================; Files 23 23 ; Lines 859 866 +7 ; ==========================================; + Hits 635 647 +12 ; + Misses 224 219 -5; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/238?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/238/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `83.33% <ø> (+16.66%)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/238/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `83.81% <50%> (-0.9%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/238/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `78.78% <88%> (+23.61%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/238?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/238?src=pr&el=footer). Last update [1e693f8...28a2880](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/238?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/238#issuecomment-495922546:1801,learn,learn,1801,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/238#issuecomment-495922546,2,['learn'],['learn']
Usability,"-machine/Oceananigans.jl/pull/236?src=pr&el=h1) Report; > Merging [#236](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/236?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/1bd203648dd9070574fa08568d1b68bea4fe0590?src=pr&el=desc) will **decrease** coverage by `0.05%`.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/236/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/236?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #236 +/- ##; ==========================================; - Coverage 68.9% 68.85% -0.06% ; ==========================================; Files 18 18 ; Lines 669 671 +2 ; ==========================================; + Hits 461 462 +1 ; - Misses 208 209 +1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/236?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/equation\_of\_state.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/236/diff?src=pr&el=tree#diff-c3JjL2VxdWF0aW9uX29mX3N0YXRlLmps) | `75% <100%> (-25%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/236/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `84.79% <100%> (+0.08%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/236?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/236?src=pr&el=footer). Last update [1bd2036...4d0e0dc](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/236?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/236#issuecomment-495749859:1606,learn,learn,1606,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/236#issuecomment-495749859,1,['learn'],['learn']
Usability,"-machine/Oceananigans.jl/pull/264?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #264 +/- ##; ==========================================; + Coverage 70.73% 71.03% +0.29% ; ==========================================; Files 23 23 ; Lines 868 870 +2 ; ==========================================; + Hits 614 618 +4 ; + Misses 254 252 -2; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `71.42% <ø> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `90% <100%> (-0.48%)` | :arrow_down: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `58.82% <100%> (+1.24%)` | :arrow_up: |; | [src/planetary\_constants.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264/diff?src=pr&el=tree#diff-c3JjL3BsYW5ldGFyeV9jb25zdGFudHMuamw=) | `9.67% <0%> (-3.23%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `78.78% <0%> (+11.04%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264?src=pr&el=footer). Last update [c1f4c33...32fc894](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/264#issuecomment-498487185:2145,learn,learn,2145,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/264#issuecomment-498487185,1,['learn'],['learn']
Usability,"-machine/Oceananigans.jl/pull/488?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #488 +/- ##; ==========================================; - Coverage 73.2% 72.73% -0.47% ; ==========================================; Files 37 37 ; Lines 1709 1720 +11 ; ==========================================; Hits 1251 1251 ; - Misses 458 469 +11; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/488?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/488/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `85.71% <0%> (-2.53%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/488/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `75% <0%> (-5.6%)` | :arrow_down: |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/488/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `76% <0%> (ø)` | :arrow_up: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/488/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `73.14% <0%> (-3.56%)` | :arrow_down: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/488/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `53.33% <100%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/488?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/488?src=pr&el=footer). Last update [20f9d08...dd07cd1](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/488?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/488#issuecomment-544170594:2146,learn,learn,2146,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/488#issuecomment-544170594,1,['learn'],['learn']
Usability,"-machine/Oceananigans.jl/pull/513?src=pr&el=h1) Report; > Merging [#513](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/513?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/4b8ff03307567f624bd635fd44a70cce1f8ca88b?src=pr&el=desc) will **decrease** coverage by `0.02%`.; > The diff coverage is `60%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/513/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/513?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #513 +/- ##; ==========================================; - Coverage 67.68% 67.66% -0.03% ; ==========================================; Files 49 49 ; Lines 1838 1843 +5 ; ==========================================; + Hits 1244 1247 +3 ; - Misses 594 596 +2; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/513?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/513/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `75% <ø> (ø)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/513/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `74.02% <60%> (-0.98%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/513?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/513?src=pr&el=footer). Last update [4b8ff03...17ed013](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/513?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/513#issuecomment-547447670:1606,learn,learn,1606,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/513#issuecomment-547447670,1,['learn'],['learn']
Usability,"-machine/Oceananigans.jl/pull/666/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `100% <ø> (+3.7%)` | :arrow_up: |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/666/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `91.07% <ø> (ø)` | :arrow_up: |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/666/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `88.88% <100%> (ø)` | :arrow_up: |; | [src/TimeSteppers/generic\_time\_stepping.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/666/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9nZW5lcmljX3RpbWVfc3RlcHBpbmcuamw=) | `100% <100%> (ø)` | |; | [src/Solvers/solve\_for\_pressure.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/666/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvc29sdmVfZm9yX3ByZXNzdXJlLmps) | `93.33% <100%> (ø)` | :arrow_up: |; | [src/TimeSteppers/adams\_bashforth.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/666/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9hZGFtc19iYXNoZm9ydGguamw=) | `100% <100%> (ø)` | :arrow_up: |; | [src/Architectures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/666/diff?src=pr&el=tree#diff-c3JjL0FyY2hpdGVjdHVyZXMuamw=) | `88.88% <0%> (-11.12%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/666?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/666?src=pr&el=footer). Last update [d614833...f92b813](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/666?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/666#issuecomment-595011047:3087,learn,learn,3087,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/666#issuecomment-595011047,1,['learn'],['learn']
Usability,". But now I realize that because of the status of the immersed Poisson solver, the velocity along the boundary is divergent, strongly so. So, `div(u')` is large along the boundary. And when we divide by `Δt` we get something huge. The magnitude of `div(u')` also somehow seems to depend on the time step (as does the magnitude of the spurious circulation). The correct solution to this case remains at rest of course. (An aside is that this problem _could_ be avoided by separately computing the hydrostatic pressure, and then using a special horizontal gradient operators that avoid computing a hydrostatic pressure gradient across an immersed boundary. However, this would only be correct for no-flux boundary conditions on buoyancy on side walls). Anyways, apparently because of this issue with the immersed pressure solver, it seems that `div(u')` is large (because `div(u)` is large) even when `Δt = O(1e-14)`... - As a result of all of this I am confused about whether this MWE is actually reliable for debugging the issue. I guess we should expect to see problems simply when `Δt = O(eps)` because this is when `div(u') / Δt` cannot be reliably computed, I think. This leads to a fairly simple criteria for the time step that's compatible with the pressure correction. But as noted in this PR, this is not enough to fix issues with the immersed boundary MWE... but whether or not that is because of problems with the setup itself, I'm not sure... - All of that said, taking @tomchor suggestion to be more careful in updating the clock for RK3 actually does solve the MWE here. Obviously, this is again addressing the (in principle not entirely solvable) issue of error accumulation in `clock.time`, rather than addressing the other issue with very small time-steps producing an ill-posed pressure correction. I think we should fix RK3 separately, basically because we cannot completely avoid accumulating error in `clock.time`, every little thing we do to make it more accurate is a good idea.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3606#issuecomment-2153020136:1822,simpl,simply,1822,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3606#issuecomment-2153020136,4,['simpl'],"['simple', 'simply']"
Usability,".36% 67.25% -1.12% ; ==========================================; Files 22 23 +1 ; Lines 882 907 +25 ; ==========================================; + Hits 603 610 +7 ; - Misses 279 297 +18; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `60% <ø> (+13.33%)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `56.25% <0%> (-33.75%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `80.64% <100%> (-1.18%)` | :arrow_down: |; | [src/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `38.46% <38.46%> (ø)` | |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `84.18% <60%> (+0.08%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290?src=pr&el=footer). Last update [40dbd96...bb139bf](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/290#issuecomment-504168119:2308,learn,learn,2308,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/290#issuecomment-504168119,1,['learn'],['learn']
Usability,".io/gh/CliMA/Oceananigans.jl/pull/1093/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmdzL21vZGVsX2ZvcmNpbmcuamw=) | `68.75% <ø> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1093/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | |; | [src/Utils/Utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1093/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL1V0aWxzLmps) | `40.00% <ø> (ø)` | |; | [...c/BoundaryConditions/discrete\_boundary\_function.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1093/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9kaXNjcmV0ZV9ib3VuZGFyeV9mdW5jdGlvbi5qbA==) | `25.00% <25.00%> (ø)` | |; | [src/Utils/user\_function\_arguments.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1093/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3VzZXJfZnVuY3Rpb25fYXJndW1lbnRzLmps) | `27.77% <27.77%> (ø)` | |; | [...BoundaryConditions/continuous\_boundary\_function.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1093/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9jb250aW51b3VzX2JvdW5kYXJ5X2Z1bmN0aW9uLmps) | `45.83% <45.83%> (ø)` | |; | [src/Fields/field\_tuples.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1093/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZF90dXBsZXMuamw=) | `72.09% <57.69%> (-2.27%)` | :arrow_down: |; | ... and [10 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1093/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1093?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1093?src=pr&el=footer). Last update [e1026b0...a0f38ed](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1093?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1093#issuecomment-716069303:3275,learn,learn,3275,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1093#issuecomment-716069303,1,['learn'],['learn']
Usability,".io/gh/CliMA/Oceananigans.jl/pull/1121?src=pr&el=h1) Report; > Merging [#1121](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1121?src=pr&el=desc) (eb0bdea) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/9026438047fe3e5d4805edcebe42560268dc65fb?el=desc) (9026438) will **increase** coverage by `0.51%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1121/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1121?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1121 +/- ##; ==========================================; + Coverage 57.31% 57.83% +0.51% ; ==========================================; Files 162 162 ; Lines 3882 3944 +62 ; ==========================================; + Hits 2225 2281 +56 ; - Misses 1657 1663 +6 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1121?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1121/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `85.71% <ø> (ø)` | |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1121/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `85.62% <0.00%> (+2.97%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1121?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1121?src=pr&el=footer). Last update [9026438...eb0bdea](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1121?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1121#issuecomment-719698566:1610,learn,learn,1610,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1121#issuecomment-719698566,1,['learn'],['learn']
Usability,".io/gh/CliMA/Oceananigans.jl/pull/928?src=pr&el=h1) Report; > Merging [#928](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/928?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/0f33c1d34e3010618cbcb2fa83416b8ec02f3f85?el=desc) will **decrease** coverage by `0.02%`.; > The diff coverage is `72.72%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/928/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/928?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #928 +/- ##; ==========================================; - Coverage 72.84% 72.81% -0.03% ; ==========================================; Files 194 194 ; Lines 5719 5721 +2 ; ==========================================; Hits 4166 4166 ; - Misses 1553 1555 +2 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/928?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Diagnostics/windowed\_time\_average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/928/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL3dpbmRvd2VkX3RpbWVfYXZlcmFnZS5qbA==) | `82.35% <70.00%> (-2.03%)` | :arrow_down: |; | [src/OutputWriters/jld2\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/928/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvamxkMl9vdXRwdXRfd3JpdGVyLmps) | `89.83% <100.00%> (-1.70%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/928?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/928?src=pr&el=footer). Last update [0f33c1d...c0ea582](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/928?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/928#issuecomment-690443154:1612,learn,learn,1612,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/928#issuecomment-690443154,1,['learn'],['learn']
Usability,".io/gh/climate-machine/Oceananigans.jl/pull/389?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `77.71% <100%> (+0.24%)` | :arrow_up: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `97.61% <100%> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `92.85% <100%> (+0.17%)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `83.05% <86.36%> (+18.76%)` | :arrow_up: |; | [src/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `90.14% <90%> (+3.86%)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `75.33% <91.66%> (-0.8%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389?src=pr&el=footer). Last update [e65a74a...ba4d169](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/389#issuecomment-527186191:2536,learn,learn,2536,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/389#issuecomment-527186191,1,['learn'],['learn']
Usability,".io/gh/climate-machine/Oceananigans.jl/pull/595/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L2xpbmVhcl9lcXVhdGlvbl9vZl9zdGF0ZS5qbA==) | `29.41% <33.33%> (-39.82%)` | :arrow_down: |; | [src/Buoyancy/Buoyancy.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/595/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L0J1b3lhbmN5Lmps) | `63.15% <61.11%> (-36.85%)` | :arrow_down: |; | [src/Buoyancy/nonlinear\_equation\_of\_state.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/595/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L25vbmxpbmVhcl9lcXVhdGlvbl9vZl9zdGF0ZS5qbA==) | `70.83% <70.83%> (-29.17%)` | :arrow_down: |; | [src/Buoyancy/seawater\_buoyancy.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/595/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L3NlYXdhdGVyX2J1b3lhbmN5Lmps) | `70.58% <73.33%> (-12.75%)` | :arrow_down: |; | [...ure\_implementations/leith\_enstrophy\_diffusivity.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/595/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2xlaXRoX2Vuc3Ryb3BoeV9kaWZmdXNpdml0eS5qbA==) | `32.25% <0%> (-66.13%)` | :arrow_down: |; | [src/Operators/interpolation\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/595/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9pbnRlcnBvbGF0aW9uX29wZXJhdG9ycy5qbA==) | `59.52% <0%> (-4.77%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/595?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/595?src=pr&el=footer). Last update [72f1f5a...801337b](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/595?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/595#issuecomment-575865906:3289,learn,learn,3289,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/595#issuecomment-575865906,1,['learn'],['learn']
Usability,".io/gh/climate-machine/Oceananigans.jl/pull/620/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL0dyaWRzLmps) | `57.14% <0%> (ø)` | :arrow_up: |; | [src/Logger.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/620/diff?src=pr&el=tree#diff-c3JjL0xvZ2dlci5qbA==) | `88.88% <100%> (+7.93%)` | :arrow_up: |; | [...nditions/solution\_and\_model\_boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/620/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9zb2x1dGlvbl9hbmRfbW9kZWxfYm91bmRhcnlfY29uZGl0aW9ucy5qbA==) | `89.18% <100%> (-5.41%)` | :arrow_down: |; | [...rc/BoundaryConditions/field\_boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/620/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9maWVsZF9ib3VuZGFyeV9jb25kaXRpb25zLmps) | `81.48% <78.26%> (-18.52%)` | :arrow_down: |; | [src/Solvers/solver\_utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/620/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvc29sdmVyX3V0aWxzLmps) | `0% <0%> (-100%)` | :arrow_down: |; | [src/Solvers/channel\_pressure\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/620/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvY2hhbm5lbF9wcmVzc3VyZV9zb2x2ZXIuamw=) | `30.13% <0%> (-68.5%)` | :arrow_down: |; | ... and [15 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/620/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/620?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/620?src=pr&el=footer). Last update [fb7fb70...d7753f2](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/620?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/620#issuecomment-586596050:3441,learn,learn,3441,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/620#issuecomment-586596050,1,['learn'],['learn']
Usability,".jl/pull/632?src=pr&el=h1) Report; > Merging [#632](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/632?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/2ae1cbb86f484420dd2233745a5928a00bf6f77d&el=desc) will **increase** coverage by `0.12%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/632/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/632?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #632 +/- ##; ==========================================; + Coverage 78.03% 78.16% +0.12% ; ==========================================; Files 118 118 ; Lines 2363 2395 +32 ; ==========================================; + Hits 1844 1872 +28 ; - Misses 519 523 +4 ; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/632?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Simulations.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/632/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zLmps) | `93.10% <0.00%> (-2.73%)` | :arrow_down: |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/632/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `92.00% <0.00%> (+0.33%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/632?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/632?src=pr&el=footer). Last update [2ae1cbb...396d43d](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/632?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/632#issuecomment-592961053:1627,learn,learn,1627,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/632#issuecomment-592961053,1,['learn'],['learn']
Usability,".jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/315/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `36.58% <1.72%> (-38%)` | :arrow_down: |; | [...ulence\_closures/anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/315/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvYW5pc290cm9waWNfbWluaW11bV9kaXNzaXBhdGlvbi5qbA==) | `97.01% <100%> (-0.05%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/315/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `59.15% <53.84%> (-0.53%)` | :arrow_down: |; | [src/turbulence\_closures/constant\_smagorinsky.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/315/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvY29uc3RhbnRfc21hZ29yaW5za3kuamw=) | `51.42% <75%> (-1.35%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/315/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `72.24% <82.92%> (-6.68%)` | :arrow_down: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/315/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `40.65% <0%> (-58.55%)` | :arrow_down: |; | ... and [6 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/315/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/315?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/315?src=pr&el=footer). Last update [16c363e...44b49b2](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/315?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/315#issuecomment-515218618:3449,learn,learn,3449,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/315#issuecomment-515218618,1,['learn'],['learn']
Usability,"//codecov.io/gh/CliMA/Oceananigans.jl/pull/710/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvZGlzY3JldGVfZWlnZW52YWx1ZXMuamw=) | `85.71% <ø> (ø)` | |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/710/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `75.00% <ø> (-5.00%)` | :arrow_down: |; | [src/BoundaryConditions/apply\_normal\_flow\_bcs.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/710/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9hcHBseV9ub3JtYWxfZmxvd19iY3Muamw=) | `24.39% <24.39%> (ø)` | |; | [src/BoundaryConditions/apply\_value\_gradient\_bcs.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/710/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9hcHBseV92YWx1ZV9ncmFkaWVudF9iY3Muamw=) | `35.71% <31.11%> (-21.05%)` | :arrow_down: |; | [src/BoundaryConditions/apply\_flux\_bcs.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/710/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9hcHBseV9mbHV4X2Jjcy5qbA==) | `47.22% <41.93%> (-6.63%)` | :arrow_down: |; | [...undaryConditions/coordinate\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/710/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9jb29yZGluYXRlX2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `33.33% <50.00%> (-5.13%)` | :arrow_down: |; | ... and [14 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/710/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/710?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/710?src=pr&el=footer). Last update [7fb1963...8c77f02](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/710?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/710#issuecomment-600855526:3537,learn,learn,3537,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/710#issuecomment-600855526,1,['learn'],['learn']
Usability,"/550/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9rZXJuZWxzLmps) | `57.8% <0%> (-2.6%)` | :arrow_down: |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/550/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `75.75% <0%> (-0.25%)` | :arrow_down: |; | [src/Solvers/batched\_tridiagonal\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/550/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvYmF0Y2hlZF90cmlkaWFnb25hbF9zb2x2ZXIuamw=) | `100% <0%> (ø)` | |; | [src/logger.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/550/diff?src=pr&el=tree#diff-c3JjL2xvZ2dlci5qbA==) | `0% <0%> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/550/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `76.92% <0%> (+1.92%)` | :arrow_up: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/550/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `89.23% <0%> (+2.69%)` | :arrow_up: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/550/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `74.35% <0%> (+2.79%)` | :arrow_up: |; | ... and [8 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/550/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/550?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/550?src=pr&el=footer). Last update [a511fdd...938eb44](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/550?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/550#issuecomment-565760499:3282,learn,learn,3282,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/550#issuecomment-565760499,1,['learn'],['learn']
Usability,"/Oceananigans.jl/commit/cdf5091a9164c1ee6efd2f0b349e6170f2fab749?src=pr&el=desc) will **increase** coverage by `0.37%`.; > The diff coverage is `93.93%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/533/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/533?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #533 +/- ##; ==========================================; + Coverage 71.09% 71.47% +0.37% ; ==========================================; Files 69 70 +1 ; Lines 1958 1991 +33 ; ==========================================; + Hits 1392 1423 +31 ; - Misses 566 568 +2; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/533?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Solvers/Solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/533/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvU29sdmVycy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/Solvers/batched\_tridiagonal\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/533/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvYmF0Y2hlZF90cmlkaWFnb25hbF9zb2x2ZXIuamw=) | `100% <100%> (ø)` | |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/533/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `71.29% <66.66%> (-0.28%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/533?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/533?src=pr&el=footer). Last update [cdf5091...3f82f44](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/533?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/533#issuecomment-560563004:1809,learn,learn,1809,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/533#issuecomment-560563004,1,['learn'],['learn']
Usability,"/Oceananigans.jl/commit/f18daed6d6a1c7ad424a9774081d852100f012d2&el=desc) will **increase** coverage by `0.36%`.; > The diff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/786/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/786?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #786 +/- ##; ==========================================; + Coverage 71.33% 71.69% +0.36% ; ==========================================; Files 184 184 ; Lines 4807 4780 -27 ; ==========================================; - Hits 3429 3427 -2 ; + Misses 1378 1353 -25 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/786?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/TimeSteppers/generic\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/786/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9nZW5lcmljX3RpbWVfc3RlcHBpbmcuamw=) | `100.00% <ø> (ø)` | |; | [src/TimeSteppers/time\_stepping\_kernels.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/786/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy90aW1lX3N0ZXBwaW5nX2tlcm5lbHMuamw=) | `100.00% <ø> (+33.78%)` | :arrow_up: |; | [src/TimeSteppers/adams\_bashforth.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/786/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9hZGFtc19iYXNoZm9ydGguamw=) | `100.00% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/786?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/786?src=pr&el=footer). Last update [f18daed...f7c4ea5](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/786?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/786#issuecomment-652698213:1799,learn,learn,1799,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/786#issuecomment-652698213,1,['learn'],['learn']
Usability,"/climate-machine/Oceananigans.jl/commit/079cb5388a3e75edaefd27fa8aa4e3bb7052b1ff?src=pr&el=desc) will **increase** coverage by `1.36%`.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #398 +/- ##; ==========================================; + Coverage 64.62% 65.99% +1.36% ; ==========================================; Files 23 23 ; Lines 1405 1532 +127 ; ==========================================; + Hits 908 1011 +103 ; - Misses 497 521 +24; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `92.53% <100%> (-0.32%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `72.41% <0%> (-0.92%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `84.25% <0%> (+2.9%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398?src=pr&el=footer). Last update [079cb53...5e26132](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/398#issuecomment-531227113:1793,learn,learn,1793,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/398#issuecomment-531227113,1,['learn'],['learn']
Usability,"/climate-machine/Oceananigans.jl/pull/433?src=pr&el=h1) Report; > Merging [#433](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/433?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/e83d621859dd660e4576024ab461dafa46ff45bc?src=pr&el=desc) will **increase** coverage by `0.11%`.; > The diff coverage is `87.27%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/433/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/433?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #433 +/- ##; ==========================================; + Coverage 73.22% 73.34% +0.11% ; ==========================================; Files 27 27 ; Lines 1505 1508 +3 ; ==========================================; + Hits 1102 1106 +4 ; + Misses 403 402 -1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/433?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/433/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `62.5% <ø> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/433/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `80.33% <87.27%> (+0.9%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/433?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/433?src=pr&el=footer). Last update [e83d621...3f772d9](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/433?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/433#issuecomment-536154477:1598,learn,learn,1598,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/433#issuecomment-536154477,1,['learn'],['learn']
Usability,"/codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvY2hhbm5lbF9wcmVzc3VyZV9zb2x2ZXIuamw=) | `31.08% <0.00%> (ø)` | |; | [...c/Solvers/horizontally\_periodic\_pressure\_solver.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvaG9yaXpvbnRhbGx5X3BlcmlvZGljX3ByZXNzdXJlX3NvbHZlci5qbA==) | `42.59% <0.00%> (ø)` | |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `69.84% <66.66%> (ø)` | |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `91.59% <69.44%> (-0.20%)` | :arrow_down: |; | [test/test\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZpZWxkcy5qbA==) | `95.00% <85.71%> (+0.35%)` | :arrow_up: |; | [src/Fields/set!.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zZXQhLmps) | `36.36% <100.00%> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100.00% <100.00%> (ø)` | |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | `91.66% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851?src=pr&el=footer). Last update [a8c35f5...a30e597](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/851#issuecomment-672934210:2838,learn,learn,2838,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/851#issuecomment-672934210,1,['learn'],['learn']
Usability,"/codecov.io/gh/climate-machine/Oceananigans.jl/pull/529/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9kaWZmZXJlbmNlX29wZXJhdG9ycy5qbA==) | `65.21% <ø> (+65.21%)` | :arrow_up: |; | [src/Operators/Operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/529/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9PcGVyYXRvcnMuamw=) | `100% <ø> (ø)` | :arrow_up: |; | [src/AbstractOperations/AbstractOperations.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/529/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9BYnN0cmFjdE9wZXJhdGlvbnMuamw=) | `33.33% <ø> (ø)` | :arrow_up: |; | [src/AbstractOperations/function\_fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/529/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9mdW5jdGlvbl9maWVsZHMuamw=) | `25% <ø> (ø)` | :arrow_up: |; | [src/AbstractOperations/grid\_validation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/529/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9ncmlkX3ZhbGlkYXRpb24uamw=) | `75% <ø> (ø)` | :arrow_up: |; | [src/TurbulenceClosures/TurbulenceClosures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/529/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9UdXJidWxlbmNlQ2xvc3VyZXMuamw=) | `33.33% <ø> (ø)` | :arrow_up: |; | ... and [37 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/529/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/529?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/529?src=pr&el=footer). Last update [2bb3201...b73e099](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/529?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/529#issuecomment-558635626:3513,learn,learn,3513,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/529#issuecomment-558635626,1,['learn'],['learn']
Usability,"/gh/climate-machine/Oceananigans.jl/commit/40dbd96fd45a30867063c476b3eecbe13db1fb5c?src=pr&el=desc) will **decrease** coverage by `0.29%`.; > The diff coverage is `14.28%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #288 +/- ##; =========================================; - Coverage 68.36% 68.06% -0.3% ; =========================================; Files 22 22 ; Lines 882 880 -2 ; =========================================; - Hits 603 599 -4 ; - Misses 279 281 +2; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `82.95% <0%> (-1.14%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `80.64% <100%> (-1.18%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288?src=pr&el=footer). Last update [40dbd96...4db4b31](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/288#issuecomment-504027011:1790,learn,learn,1790,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/288#issuecomment-504027011,1,['learn'],['learn']
Usability,"/gh/climate-machine/Oceananigans.jl/pull/377?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #377 +/- ##; ==========================================; + Coverage 78.37% 79.01% +0.64% ; ==========================================; Files 22 22 ; Lines 1244 1263 +19 ; ==========================================; + Hits 975 998 +23 ; + Misses 269 265 -4; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/377?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/377/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `79.18% <ø> (+2.68%)` | :arrow_up: |; | [src/planetary\_constants.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/377/diff?src=pr&el=tree#diff-c3JjL3BsYW5ldGFyeV9jb25zdGFudHMuamw=) | `12.9% <ø> (ø)` | :arrow_up: |; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/377/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `89.28% <ø> (+5.5%)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/377/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `76.58% <100%> (ø)` | :arrow_up: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/377/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `64.36% <92.85%> (+5.46%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/377?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/377?src=pr&el=footer). Last update [8c1c776...6141cbe](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/377?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/377#issuecomment-525862887:2136,learn,learn,2136,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/377#issuecomment-525862887,1,['learn'],['learn']
Usability,"/gh/climate-machine/Oceananigans.jl/pull/399/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvVHVyYnVsZW5jZUNsb3N1cmVzLmps) | `56.25% <ø> (ø)` | :arrow_up: |; | [...ures/verstappen\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/399/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvdmVyc3RhcHBlbl9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `52.54% <ø> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/399/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `77.71% <ø> (ø)` | :arrow_up: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/399/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `98.4% <ø> (+0.78%)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/399/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `62.82% <100%> (+0.79%)` | :arrow_up: |; | [src/turbulence\_closures/smagorinsky.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/399/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvc21hZ29yaW5za3kuamw=) | `67.79% <100%> (ø)` | :arrow_up: |; | [src/equation\_of\_state.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/399/diff?src=pr&el=tree#diff-c3JjL2VxdWF0aW9uX29mX3N0YXRlLmps) | `100% <100%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/399?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/399?src=pr&el=footer). Last update [1b521b0...83f8daa](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/399?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/399#issuecomment-530928095:3137,learn,learn,3137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/399#issuecomment-530928095,1,['learn'],['learn']
Usability,"/gh/climate-machine/Oceananigans.jl/pull/697/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy90aW1lX3N0ZXBwaW5nX2tlcm5lbHMuamw=) | `90.41% <ø> (ø)` | |; | [src/TimeSteppers/velocity\_and\_tracer\_tendencies.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/697/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy92ZWxvY2l0eV9hbmRfdHJhY2VyX3RlbmRlbmNpZXMuamw=) | `100.00% <ø> (ø)` | |; | [src/BoundaryConditions/boundary\_function.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/697/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9ib3VuZGFyeV9mdW5jdGlvbi5qbA==) | `60.00% <33.33%> (ø)` | |; | [src/Models/clock.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/697/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9jbG9jay5qbA==) | `80.00% <50.00%> (-8.89%)` | :arrow_down: |; | [src/BoundaryConditions/apply\_no\_penetration\_bcs.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/697/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9hcHBseV9ub19wZW5ldHJhdGlvbl9iY3Muamw=) | `57.14% <66.66%> (ø)` | |; | [src/BoundaryConditions/fill\_halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/697/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9maWxsX2hhbG9fcmVnaW9ucy5qbA==) | `84.00% <100.00%> (ø)` | |; | ... and [9 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/697/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/697?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/697?src=pr&el=footer). Last update [7a47b92...15beefe](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/697?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/697#issuecomment-599150556:3515,learn,learn,3515,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/697#issuecomment-599150556,1,['learn'],['learn']
Usability,"/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3N1cmZhY2Vfd2F2ZXMuamw=) | | |; | [test/test\_pressure\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ByZXNzdXJlX3NvbHZlcnMuamw=) | | |; | [test/test\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZpZWxkcy5qbA==) | | |; | [test/test\_dynamics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2R5bmFtaWNzLmps) | | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | | |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | | |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | | |; | [test/test\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmcuamw=) | | |; | ... and [52 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564?src=pr&el=footer). Last update [810a3a1...cc58382](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/564#issuecomment-564625738:2861,learn,learn,2861,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/564#issuecomment-564625738,1,['learn'],['learn']
Usability,"0%> (-16.67%)` | :arrow_down: |; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/167/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `0% <0%> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/167/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `0% <0%> (-86.37%)` | :arrow_down: |; | [src/equation\_of\_state.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/167/diff?src=pr&el=tree#diff-c3JjL2VxdWF0aW9uX29mX3N0YXRlLmps) | `0% <0%> (-100%)` | :arrow_down: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/167/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `42.85% <100%> (+6.01%)` | :arrow_up: |; | [src/grids.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/167/diff?src=pr&el=tree#diff-c3JjL2dyaWRzLmps) | `95% <100%> (+0.4%)` | :arrow_up: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/167/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `40.9% <96.15%> (+6.12%)` | :arrow_up: |; | [src/model\_configuration.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/167/diff?src=pr&el=tree#diff-c3JjL21vZGVsX2NvbmZpZ3VyYXRpb24uamw=) | `0% <0%> (-100%)` | :arrow_down: |; | ... and [11 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/167/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/167?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/167?src=pr&el=footer). Last update [9260f02...c2f74b7](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/167?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/167#issuecomment-483002597:3146,learn,learn,3146,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/167#issuecomment-483002597,1,['learn'],['learn']
Usability,"0.00%> (-33.34%)` | :arrow_down: |; | [src/Fields/set!.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/628/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zZXQhLmps) | `36.53% <0.00%> (-25.23%)` | :arrow_down: |; | [src/Architectures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/628/diff?src=pr&el=tree#diff-c3JjL0FyY2hpdGVjdHVyZXMuamw=) | `66.66% <0.00%> (-22.23%)` | :arrow_down: |; | [src/Fields/field.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/628/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `69.69% <0.00%> (-9.10%)` | :arrow_down: |; | [...nditions/solution\_and\_model\_boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/628/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9zb2x1dGlvbl9hbmRfbW9kZWxfYm91bmRhcnlfY29uZGl0aW9ucy5qbA==) | `89.18% <0.00%> (-5.41%)` | :arrow_down: |; | [src/Fields/field\_tuples.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/628/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZF90dXBsZXMuamw=) | `78.94% <0.00%> (-5.27%)` | :arrow_down: |; | [src/Buoyancy/Buoyancy.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/628/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L0J1b3lhbmN5Lmps) | `57.89% <0.00%> (-5.27%)` | :arrow_down: |; | ... and [4 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/628/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/628?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/628?src=pr&el=footer). Last update [4ef4d11...48e5424](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/628?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/628#issuecomment-588471561:3515,learn,learn,3515,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/628#issuecomment-588471561,1,['learn'],['learn']
Usability,"0dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3JvemVtYV9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `30.00% <0.00%> (-4.10%)` | :arrow_down: |; | [src/Solvers/batched\_tridiagonal\_solver.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvYmF0Y2hlZF90cmlkaWFnb25hbF9zb2x2ZXIuamw=) | `96.42% <0.00%> (-3.58%)` | :arrow_down: |; | [src/Solvers/solve\_for\_pressure.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvc29sdmVfZm9yX3ByZXNzdXJlLmps) | `100.00% <0.00%> (ø)` | |; | [src/OutputWriters/output\_writer\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `61.53% <0.00%> (+2.56%)` | :arrow_up: |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `71.42% <0.00%> (+6.34%)` | :arrow_up: |; | [src/Architectures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762/diff?src=pr&el=tree#diff-c3JjL0FyY2hpdGVjdHVyZXMuamw=) | `66.66% <0.00%> (+11.11%)` | :arrow_up: |; | [src/Fields/set!.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zZXQhLmps) | `67.64% <0.00%> (+32.35%)` | :arrow_up: |; | ... and [4 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762?src=pr&el=footer). Last update [b3b8162...af56f87](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/762?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/762#issuecomment-633745177:3369,learn,learn,3369,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/762#issuecomment-633745177,1,['learn'],['learn']
Usability,"1% <0.00%> (-2.99%)` | :arrow_down: |; | [src/Fields/field.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/731/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `71.17% <0.00%> (-0.26%)` | :arrow_down: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/731/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `88.00% <0.00%> (-0.14%)` | :arrow_down: |; | [...rbulenceClosures/turbulence\_closure\_diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/731/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfZGlhZ25vc3RpY3Muamw=) | `100.00% <0.00%> (ø)` | |; | [src/Simulations/Simulations.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/731/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL1NpbXVsYXRpb25zLmps) | `100.00% <0.00%> (ø)` | |; | [src/Simulations/run.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/731/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `95.34% <0.00%> (ø)` | |; | [src/Simulations/simulation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/731/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3NpbXVsYXRpb24uamw=) | `75.00% <0.00%> (ø)` | |; | ... and [7 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/731/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/731?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/731?src=pr&el=footer). Last update [a3504a1...129ffd7](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/731?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/731#issuecomment-615339346:3226,learn,learn,3226,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/731#issuecomment-615339346,1,['learn'],['learn']
Usability,"1) Report; > Merging [#1110](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1110?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/268bc77058a01dc0e323be7dde9a672d39d278b7?el=desc) will **decrease** coverage by `0.49%`.; > The diff coverage is `0.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1110/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1110?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1110 +/- ##; ==========================================; - Coverage 57.22% 56.72% -0.50% ; ==========================================; Files 162 162 ; Lines 3883 3917 +34 ; ==========================================; Hits 2222 2222 ; - Misses 1661 1695 +34 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1110?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/BoundaryConditions/show\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1110/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9zaG93X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `0.00% <0.00%> (ø)` | |; | [...rbulenceClosures/turbulence\_closure\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1110/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfZGlhZ25vc3RpY3Muamw=) | `8.73% <0.00%> (-4.12%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1110?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1110?src=pr&el=footer). Last update [268bc77...9baa14f](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1110?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1110#issuecomment-718300528:1660,learn,learn,1660,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1110#issuecomment-718300528,1,['learn'],['learn']
Usability,"1,1));; model = NonhydrostaticModel(; grid, closure = ScalarDiffusivity(ν=1e-2)). set!(model, u=(x, y, z,) -> z). simulation = Simulation(model,; Δt=0.5*maximum(zspacings(grid, Center())) / maximum(abs, model.velocities.u),; stop_time=20); # Create regular output; simulation.output_writers[:fullfields] = NetCDFOutputWriter(model, (; model.velocities.u),; filename = ""fullfields.nc"",; schedule = TimeInterval(5),; overwrite_existing = true,). # Create interpolated u on coarse grid; coarse_grid = RectilinearGrid(size = (grid.Nx, grid.Ny, grid.Nz÷2), extent = (grid.Lx, grid.Ly, grid.Lz)); coarse_model = NonhydrostaticModel(; grid=coarse_grid, closure = ScalarDiffusivity(ν=1e-2)); coarse_u = Field{Face, Center, Center}(coarse_grid). using Oceananigans.Fields: interpolate!; update_coarse_u(simulation) = interpolate!(coarse_u, simulation.model.velocities.u); simulation.callbacks[:update_interp] = Callback(update_coarse_u). # Create coarse output; simulation.output_writers[:coarsefields] = NetCDFOutputWriter(coarse_model, (; coarse_u,),; filename=""coarsefields.nc"",; schedule=TimeInterval(5),; overwrite_existing=true,). run!(simulation); ```. This seems to be working. In the figure below the lines and triangles come from the full res output, while the cirlces come from the coarse (interpolated) output:. ![image](https://github.com/CliMA/Oceananigans.jl/assets/13205162/1a72237a-67ac-4804-9230-9d766e71b353). You can definitely take nicer/fancier approaches that scale much more easily (@glwagner mentioned a few options), but I feel like this is very simple to understand and can be scaled up to a list of outputs reasonably easily; you just gotta create the list of coarsened outputs based on the original list of outputs and interpolate the list in the `Callback`. @iuryt is this good enough for your purposes?. Also a quick note: if you want outputs at levels that aren't equally spaced from each other, you can set-up `coarse_grid` using an array of depths as the vertical coordinate.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2090846777:2105,simpl,simple,2105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2090846777,2,['simpl'],['simple']
Usability,"100.00% <ø> (ø)` | |; | [src/Diagnostics/nan\_checker.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/980/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL25hbl9jaGVja2VyLmps) | `33.33% <ø> (ø)` | |; | [src/Diagnostics/time\_series.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/980/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL3RpbWVfc2VyaWVzLmps) | `78.26% <ø> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/980/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | |; | [src/OutputWriters/OutputWriters.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/980/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvT3V0cHV0V3JpdGVycy5qbA==) | `66.66% <ø> (ø)` | |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/980/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `88.88% <ø> (ø)` | |; | [src/OutputWriters/jld2\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/980/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvamxkMl9vdXRwdXRfd3JpdGVyLmps) | `93.87% <ø> (ø)` | |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/980/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `77.63% <ø> (ø)` | |; | ... and [8 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/980/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/980?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/980?src=pr&el=footer). Last update [d80be8c...b17a586](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/980?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/980#issuecomment-699496171:3161,learn,learn,3161,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/980#issuecomment-699496171,1,['learn'],['learn']
Usability,"1a091282f7d09d7180&el=desc) will **decrease** coverage by `0.02%`.; > The diff coverage is `72.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/855/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/855?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #855 +/- ##; ==========================================; - Coverage 72.52% 72.50% -0.03% ; ==========================================; Files 187 187 ; Lines 5322 5331 +9 ; ==========================================; + Hits 3860 3865 +5 ; - Misses 1462 1466 +4 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/855?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/855/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `85.71% <50.00%> (ø)` | |; | [src/Logger.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/855/diff?src=pr&el=tree#diff-c3JjL0xvZ2dlci5qbA==) | `72.72% <71.42%> (-6.44%)` | :arrow_down: |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/855/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100.00% <100.00%> (ø)` | |; | [src/Utils/kernel\_launching.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/855/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL2tlcm5lbF9sYXVuY2hpbmcuamw=) | `100.00% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/855?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/855?src=pr&el=footer). Last update [8115636...6cf0a2d](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/855?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/855#issuecomment-673483011:1845,learn,learn,1845,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/855#issuecomment-673483011,1,['learn'],['learn']
Usability,"1dHB1dF93cml0ZXJzLmps) | `77.71% <0%> (+0.54%)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `73.89% <0%> (+0.55%)` | :arrow_up: |; | [src/turbulence\_closures/TurbulenceClosures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvVHVyYnVsZW5jZUNsb3N1cmVzLmps) | `57.69% <0%> (+1.44%)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `86.11% <0%> (+4.75%)` | :arrow_up: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `90.9% <0%> (+7.57%)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `54.86% <0%> (+8.03%)` | :arrow_up: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `64.44% <0%> (+14.44%)` | :arrow_up: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `76.41% <0%> (+36.41%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398?src=pr&el=footer). Last update [079cb53...5e26132](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/398?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/398#issuecomment-531227115:2919,learn,learn,2919,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/398#issuecomment-531227115,1,['learn'],['learn']
Usability,"29%)` | :arrow_down: |; | [src/Forcing/simple\_forcing.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvc2ltcGxlX2ZvcmNpbmcuamw=) | `81.81% <0.00%> (-18.19%)` | :arrow_down: |; | [test/runtests\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree#diff-dGVzdC9ydW50ZXN0c191dGlscy5qbA==) | `50.00% <0.00%> (-17.57%)` | :arrow_down: |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `68.75% <0.00%> (-16.97%)` | :arrow_down: |; | [...closure\_implementations/anisotropic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2FuaXNvdHJvcGljX2RpZmZ1c2l2aXR5Lmps) | `84.00% <0.00%> (-16.00%)` | :arrow_down: |; | [src/Buoyancy/Buoyancy.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L0J1b3lhbmN5Lmps) | `63.15% <0.00%> (-15.79%)` | :arrow_down: |; | [src/TurbulenceClosures/closure\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9jbG9zdXJlX29wZXJhdG9ycy5qbA==) | `86.20% <0.00%> (-13.80%)` | :arrow_down: |; | ... and [60 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872?src=pr&el=footer). Last update [424051c...547455c](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/872?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/872#issuecomment-681307450:3451,learn,learn,3451,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/872#issuecomment-681307450,1,['learn'],['learn']
Usability,"3.731 ms │ 4.014 ms │ 4.048 ms │ 4.752 ms │ 242.42 KiB │ 1876 │; │ CPU │ Float32 │ 64 │ 25.071 ms │ 25.897 ms │ 26.004 ms │ 27.032 ms │ 242.42 KiB │ 1876 │; │ CPU │ Float32 │ 128 │ 214.549 ms │ 216.681 ms │ 218.408 ms │ 227.438 ms │ 242.42 KiB │ 1876 │; │ CPU │ Float64 │ 32 │ 4.230 ms │ 4.334 ms │ 4.430 ms │ 5.244 ms │ 293.44 KiB │ 1876 │; │ CPU │ Float64 │ 64 │ 28.847 ms │ 29.348 ms │ 29.573 ms │ 30.704 ms │ 293.44 KiB │ 1876 │; │ CPU │ Float64 │ 128 │ 254.216 ms │ 254.715 ms │ 255.230 ms │ 260.031 ms │ 293.44 KiB │ 1876 │; │ GPU │ Float32 │ 32 │ 2.474 ms │ 2.625 ms │ 2.764 ms │ 3.510 ms │ 802.67 KiB │ 11417 │; │ GPU │ Float32 │ 64 │ 10.381 ms │ 13.617 ms │ 13.292 ms │ 13.719 ms │ 802.48 KiB │ 11413 │; │ GPU │ Float32 │ 128 │ 76.589 ms │ 114.593 ms │ 113.372 ms │ 132.651 ms │ 802.48 KiB │ 11413 │; │ GPU │ Float64 │ 32 │ 5.366 ms │ 5.420 ms │ 5.439 ms │ 5.610 ms │ 877.02 KiB │ 11251 │; │ GPU │ Float64 │ 64 │ 33.735 ms │ 38.491 ms │ 38.027 ms │ 38.614 ms │ 876.83 KiB │ 11247 │; │ GPU │ Float64 │ 128 │ 293.481 ms │ 316.512 ms │ 316.715 ms │ 343.279 ms │ 876.83 KiB │ 11247 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┘; [2020/11/26 16:09:31.583] INFO Writing Incompressible_model_benchmarks.html...; Incompressible model CPU -> GPU speedup; ┌─────────────┬─────┬──────────┬─────────┬─────────┐; │ Float_types │ Ns │ speedup │ memory │ allocs │; ├─────────────┼─────┼──────────┼─────────┼─────────┤; │ Float32 │ 32 │ 1.52907 │ 3.31105 │ 6.08582 │; │ Float32 │ 64 │ 1.90176 │ 3.31028 │ 6.08369 │; │ Float32 │ 128 │ 1.89087 │ 3.31028 │ 6.08369 │; │ Float64 │ 32 │ 0.799624 │ 2.98876 │ 5.99733 │; │ Float64 │ 64 │ 0.76246 │ 2.98813 │ 5.9952 │; │ Float64 │ 128 │ 0.804754 │ 2.98813 │ 5.9952 │; └─────────────┴─────┴──────────┴─────────┴─────────┘; ```. For this one single test (clearly more needs to be done) it seems that on average the speedup is slightly lower and the memory is also slightly lower, compared to master",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-734478044:6835,clear,clearly,6835,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-734478044,1,['clear'],['clearly']
Usability,"33.33% <ø> (-33.34%)` | :arrow_down: |; | [src/OutputWriters/field\_slicer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1040/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvZmllbGRfc2xpY2VyLmps) | `0.00% <ø> (-53.34%)` | :arrow_down: |; | [src/OutputWriters/jld2\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1040/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvamxkMl9vdXRwdXRfd3JpdGVyLmps) | `0.00% <ø> (-90.57%)` | :arrow_down: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1040/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `0.00% <0.00%> (-81.71%)` | :arrow_down: |; | [src/OutputWriters/windowed\_time\_average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1040/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvd2luZG93ZWRfdGltZV9hdmVyYWdlLmps) | `0.00% <ø> (-84.62%)` | :arrow_down: |; | [src/Fields/abstract\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1040/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hYnN0cmFjdF9maWVsZC5qbA==) | `48.97% <100.00%> (-9.03%)` | :arrow_down: |; | [src/Utils/pretty\_time.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1040/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ByZXR0eV90aW1lLmps) | `96.55% <100.00%> (+14.19%)` | :arrow_up: |; | ... and [108 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1040/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1040?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1040?src=pr&el=footer). Last update [9cfb568...1d8c70c](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1040?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1040#issuecomment-707652424:3332,learn,learn,3332,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1040#issuecomment-707652424,1,['learn'],['learn']
Usability,"3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9maWxsX2hhbG9fcmVnaW9uc192YWx1ZV9ncmFkaWVudC5qbA==) | `28.30% <ø> (ø)` | |; | [src/BoundaryConditions/fill\_halo\_regions\_flux.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/904/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9maWxsX2hhbG9fcmVnaW9uc19mbHV4Lmps) | `25.00% <25.00%> (ø)` | |; | [...lementations/anisotropic\_biharmonic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/904/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2FuaXNvdHJvcGljX2JpaGFybW9uaWNfZGlmZnVzaXZpdHkuamw=) | `82.60% <76.47%> (-17.40%)` | :arrow_down: |; | [...c/BoundaryConditions/fill\_halo\_regions\_periodic.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/904/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9maWxsX2hhbG9fcmVnaW9uc19wZXJpb2RpYy5qbA==) | `100.00% <100.00%> (ø)` | |; | [...rbulenceClosures/turbulence\_closure\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/904/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfZGlhZ25vc3RpY3Muamw=) | `98.24% <100.00%> (-1.76%)` | :arrow_down: |; | [test/test\_dynamics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/904/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2R5bmFtaWNzLmps) | `100.00% <100.00%> (ø)` | |; | ... and [11 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/904/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/904?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/904?src=pr&el=footer). Last update [edcedc3...9b584e7](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/904?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/904#issuecomment-686359551:3581,learn,learn,3581,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/904#issuecomment-686359551,1,['learn'],['learn']
Usability,"3JjL291dHB1dF93cml0ZXJzLmps) | `79.42% <ø> (-2.96%)` | :arrow_down: |; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/474/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `79.31% <ø> (-0.36%)` | :arrow_down: |; | [src/grids.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/474/diff?src=pr&el=tree#diff-c3JjL2dyaWRzLmps) | `93.54% <ø> (ø)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/474/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `80.59% <ø> (-5.98%)` | :arrow_down: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/474/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `47.67% <ø> (-1.17%)` | :arrow_down: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/474/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `79.54% <ø> (ø)` | :arrow_up: |; | [src/forcing.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/474/diff?src=pr&el=tree#diff-c3JjL2ZvcmNpbmcuamw=) | `53.84% <50%> (-15.39%)` | :arrow_down: |; | [src/buoyancy.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/474/diff?src=pr&el=tree#diff-c3JjL2J1b3lhbmN5Lmps) | `77.41% <85.71%> (ø)` | :arrow_up: |; | ... and [5 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/474/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/474?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/474?src=pr&el=footer). Last update [e60a723...0156931](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/474?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/474#issuecomment-541692842:2748,learn,learn,2748,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/474#issuecomment-541692842,1,['learn'],['learn']
Usability,"3JpZC5qbA==) | `64.51% <ø> (ø)` | :arrow_up: |; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `20% <ø> (+4.37%)` | :arrow_up: |; | [src/fieldsets.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkc2V0cy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `81.39% <100%> (+0.21%)` | :arrow_up: |; | [src/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `100% <100%> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <100%> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `93.75% <100%> (+3.75%)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `78.14% <40.9%> (-5.95%)` | :arrow_down: |; | ... and [6 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290?src=pr&el=footer). Last update [40dbd96...85dccf2](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/290?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/290#issuecomment-504168121:3179,learn,learn,3179,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/290#issuecomment-504168121,1,['learn'],['learn']
Usability,"3NtYWdvcmluc2t5X2xpbGx5Lmps) | `92.85% <100%> (ø)` | |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `74.35% <100%> (ø)` | |; | [src/TimeSteppers/adams\_bashforth.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9hZGFtc19iYXNoZm9ydGguamw=) | `100% <100%> (ø)` | |; | [...ions/verstappen\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3ZlcnN0YXBwZW5fYW5pc290cm9waWNfbWluaW11bV9kaXNzaXBhdGlvbi5qbA==) | `100% <100%> (ø)` | |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `63.82% <22.72%> (ø)` | |; | [src/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `66.66% <47.05%> (ø)` | |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `71.55% <71.42%> (ø)` | |; | ... and [1 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546?src=pr&el=footer). Last update [b1fe0ab...febfd07](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/546?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/546#issuecomment-564303242:3433,learn,learn,3433,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/546#issuecomment-564303242,1,['learn'],['learn']
Usability,"3lhbmN5L0J1b3lhbmN5Lmps) | `59.37% <0.00%> (-3.79%)` | :arrow_down: |; | [src/Buoyancy/nonlinear\_equation\_of\_state.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/572/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L25vbmxpbmVhcl9lcXVhdGlvbl9vZl9zdGF0ZS5qbA==) | `72.00% <0.00%> (-3.00%)` | :arrow_down: |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/572/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `87.50% <0.00%> (-1.39%)` | :arrow_down: |; | [src/Utils/with\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/572/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3dpdGhfdHJhY2Vycy5qbA==) | `100.00% <0.00%> (ø)` | |; | [src/AbstractOperations/averages\_of\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/572/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9hdmVyYWdlc19vZl9vcGVyYXRpb25zLmps) | `66.66% <0.00%> (ø)` | |; | [...ence\_tests/ConvergenceTests/ForcedFlowFixedSlip.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/572/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvRm9yY2VkRmxvd0ZpeGVkU2xpcC5qbA==) | | |; | [test/test\_averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/572/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2F2ZXJhZ2VkX2ZpZWxkLmps) | | |; | ... and [75 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/572/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/572?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/572?src=pr&el=footer). Last update [3b45ce5...08d5cb5](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/572?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/572#issuecomment-596513569:3302,learn,learn,3302,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/572#issuecomment-596513569,1,['learn'],['learn']
Usability,"4 +3 ; - Misses 326 382 +56; ```. | [Impacted Files](https://codecov.io/gh/ali-ramadhan/Oceananigans.jl/pull/15?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/ali-ramadhan/Oceananigans.jl/pull/15/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/problem.jl](https://codecov.io/gh/ali-ramadhan/Oceananigans.jl/pull/15/diff?src=pr&el=tree#diff-c3JjL3Byb2JsZW0uamw=) | `0% <0%> (ø)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/ali-ramadhan/Oceananigans.jl/pull/15/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `0% <0%> (ø)` | :arrow_up: |; | [src/spectral\_solvers.jl](https://codecov.io/gh/ali-ramadhan/Oceananigans.jl/pull/15/diff?src=pr&el=tree#diff-c3JjL3NwZWN0cmFsX3NvbHZlcnMuamw=) | `44.38% <0%> (-7.49%)` | :arrow_down: |; | [src/operators/ops\_regular\_cartesian\_grid.jl](https://codecov.io/gh/ali-ramadhan/Oceananigans.jl/pull/15/diff?src=pr&el=tree#diff-c3JjL29wZXJhdG9ycy9vcHNfcmVndWxhcl9jYXJ0ZXNpYW5fZ3JpZC5qbA==) | `100% <100%> (ø)` | :arrow_up: |; | [src/grids.jl](https://codecov.io/gh/ali-ramadhan/Oceananigans.jl/pull/15/diff?src=pr&el=tree#diff-c3JjL2dyaWRzLmps) | `96.15% <100%> (ø)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/ali-ramadhan/Oceananigans.jl/pull/15/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `51.61% <50%> (-16.81%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/ali-ramadhan/Oceananigans.jl/pull/15?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/ali-ramadhan/Oceananigans.jl/pull/15?src=pr&el=footer). Last update [d09f649...993821c](https://codecov.io/gh/ali-ramadhan/Oceananigans.jl/pull/15?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/15#issuecomment-459733411:2450,learn,learn,2450,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/15#issuecomment-459733411,1,['learn'],['learn']
Usability,"45/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `90.47% <100%> (ø)` | :arrow_up: |; | [src/closures/turbulence\_closures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/245/diff?src=pr&el=tree#diff-c3JjL2Nsb3N1cmVzL3R1cmJ1bGVuY2VfY2xvc3VyZXMuamw=) | `100% <100%> (ø)` | :arrow_up: |; | [src/closures/closure\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/245/diff?src=pr&el=tree#diff-c3JjL2Nsb3N1cmVzL2Nsb3N1cmVfb3BlcmF0b3JzLmps) | `95.34% <100%> (+0.3%)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/245/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `83.13% <100%> (-0.69%)` | :arrow_down: |; | [src/closures/constant\_diffusivity\_closures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/245/diff?src=pr&el=tree#diff-c3JjL2Nsb3N1cmVzL2NvbnN0YW50X2RpZmZ1c2l2aXR5X2Nsb3N1cmVzLmps) | `63.33% <38.88%> (-36.67%)` | :arrow_down: |; | [src/model\_configuration.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/245/diff?src=pr&el=tree#diff-c3JjL21vZGVsX2NvbmZpZ3VyYXRpb24uamw=) | `0% <0%> (-100%)` | :arrow_down: |; | [src/operators/ops\_regular\_cartesian\_grid.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/245/diff?src=pr&el=tree#diff-c3JjL29wZXJhdG9ycy9vcHNfcmVndWxhcl9jYXJ0ZXNpYW5fZ3JpZC5qbA==) | `65.59% <0%> (-20.44%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/245?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/245?src=pr&el=footer). Last update [0eea137...f273962](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/245?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496324425:2884,learn,learn,2884,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496324425,1,['learn'],['learn']
Usability,"55%)` | :arrow_down: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `62.5% <0%> (-20.84%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `60.56% <0%> (-6.11%)` | :arrow_down: |; | [src/operators/ops\_regular\_cartesian\_grid.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336/diff?src=pr&el=tree#diff-c3JjL29wZXJhdG9ycy9vcHNfcmVndWxhcl9jYXJ0ZXNpYW5fZ3JpZC5qbA==) | `80.64% <0%> (-5.07%)` | :arrow_down: |; | [...ulence\_closures/anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvYW5pc290cm9waWNfbWluaW11bV9kaXNzaXBhdGlvbi5qbA==) | `97.01% <0%> (-2.99%)` | :arrow_down: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `92.3% <0%> (-0.38%)` | :arrow_down: |; | [src/equation\_of\_state.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336/diff?src=pr&el=tree#diff-c3JjL2VxdWF0aW9uX29mX3N0YXRlLmps) | `100% <0%> (ø)` | :arrow_up: |; | ... and [3 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336?src=pr&el=footer). Last update [a189e3e...6f14c2d](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/336#issuecomment-518876041:3436,learn,learn,3436,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/336#issuecomment-518876041,1,['learn'],['learn']
Usability,"5Q29uZGl0aW9ucy9Cb3VuZGFyeUNvbmRpdGlvbnMuamw=) | `100% <ø> (ø)` | |; | [src/Fields/Fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `100% <ø> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <100%> (ø)` | |; | [src/Fields/set!.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zZXQhLmps) | `67.64% <100%> (ø)` | |; | [src/Fields/field.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `76.19% <62.5%> (ø)` | |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `91.52% <87.5%> (ø)` | |; | [src/OutputWriters/output\_writer\_utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `62.16% <90%> (ø)` | |; | [...rc/BoundaryConditions/field\_boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9maWVsZF9ib3VuZGFyeV9jb25kaXRpb25zLmps) | `92% <93.75%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631?src=pr&el=footer). Last update [0001584...871ca40](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/631?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/631#issuecomment-589887431:2902,learn,learn,2902,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/631#issuecomment-589887431,1,['learn'],['learn']
Usability,"6.66% <ø> (ø)` | |; | [test/test\_averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2F2ZXJhZ2VkX2ZpZWxkLmps) | `0.00% <ø> (ø)` | |; | [src/Fields/averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hdmVyYWdlZF9maWVsZC5qbA==) | `76.92% <44.44%> (-13.56%)` | :arrow_down: |; | [src/Fields/computed\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9jb21wdXRlZF9maWVsZC5qbA==) | `69.56% <60.00%> (-6.63%)` | :arrow_down: |; | [src/Buoyancy/buoyancy\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L2J1b3lhbmN5X2ZpZWxkLmps) | `68.96% <66.66%> (-6.04%)` | :arrow_down: |; | [src/Fields/abstract\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hYnN0cmFjdF9maWVsZC5qbA==) | `57.14% <100.00%> (ø)` | |; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | `99.42% <100.00%> (+0.03%)` | :arrow_up: |; | [src/Operators/interpolation\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9pbnRlcnBvbGF0aW9uX29wZXJhdG9ycy5qbA==) | `61.22% <0.00%> (+2.04%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020?src=pr&el=footer). Last update [c2413c3...0ee1cd7](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1020?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1020#issuecomment-702338478:2800,learn,learn,2800,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1020#issuecomment-702338478,1,['learn'],['learn']
Usability,"63%)` | :arrow_down: |; | [src/Coriolis/no\_rotation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/643/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL25vX3JvdGF0aW9uLmps) | `0% <0%> (-100%)` | :arrow_down: |; | [src/Forcing/Forcing.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/643/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvRm9yY2luZy5qbA==) | `50% <0%> (-50%)` | :arrow_down: |; | [src/SurfaceWaves.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/643/diff?src=pr&el=tree#diff-c3JjL1N1cmZhY2VXYXZlcy5qbA==) | `0% <0%> (-47.06%)` | :arrow_down: |; | [src/AbstractOperations/interpolation\_utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/643/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9pbnRlcnBvbGF0aW9uX3V0aWxzLmps) | `63.33% <0%> (-33.34%)` | :arrow_down: |; | [src/AbstractOperations/AbstractOperations.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/643/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9BYnN0cmFjdE9wZXJhdGlvbnMuamw=) | `33.33% <0%> (-33.34%)` | :arrow_down: |; | [src/Forcing/simple\_forcing.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/643/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvc2ltcGxlX2ZvcmNpbmcuamw=) | `50% <0%> (-33.34%)` | :arrow_down: |; | ... and [38 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/643/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/643?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/643?src=pr&el=footer). Last update [9f72d84...7809b1e](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/643?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/643#issuecomment-590982255:3034,simpl,simple,3034,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/643#issuecomment-590982255,2,"['learn', 'simpl']","['learn', 'simple']"
Usability,"66.66%> (-12.50%)` | :arrow_down: |; | [src/Fields/averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/968/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hdmVyYWdlZF9maWVsZC5qbA==) | `90.47% <80.00%> (-3.97%)` | :arrow_down: |; | [src/Fields/computed\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/968/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9jb21wdXRlZF9maWVsZC5qbA==) | `76.19% <80.00%> (-1.59%)` | :arrow_down: |; | [src/Buoyancy/buoyancy\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/968/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L2J1b3lhbmN5X2ZpZWxkLmps) | `75.00% <83.33%> (+3.57%)` | :arrow_up: |; | [src/AbstractOperations/averages\_of\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/968/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9hdmVyYWdlc19vZl9vcGVyYXRpb25zLmps) | `66.66% <100.00%> (ø)` | |; | [src/Fields/pressure\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/968/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9wcmVzc3VyZV9maWVsZC5qbA==) | `100.00% <100.00%> (ø)` | |; | [src/Models/Models.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/968/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9Nb2RlbHMuamw=) | `100.00% <100.00%> (ø)` | |; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/968/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | `99.39% <100.00%> (+<0.01%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/968?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/968?src=pr&el=footer). Last update [c3f6ce0...c42d2de](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/968?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/968#issuecomment-698377343:3137,learn,learn,3137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/968#issuecomment-698377343,1,['learn'],['learn']
Usability,"7/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvY29uc3RhbnRfc21hZ29yaW5za3kuamw=) | `51.42% <0%> (-37.15%)` | :arrow_down: |; | [src/turbulence\_closures/closure\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/337/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvY2xvc3VyZV9vcGVyYXRvcnMuamw=) | `42.62% <0%> (-22.55%)` | :arrow_down: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/337/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `62.5% <0%> (-20.84%)` | :arrow_down: |; | [src/operators/ops\_regular\_cartesian\_grid.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/337/diff?src=pr&el=tree#diff-c3JjL29wZXJhdG9ycy9vcHNfcmVndWxhcl9jYXJ0ZXNpYW5fZ3JpZC5qbA==) | `77.41% <0%> (-8.3%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/337/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `59.15% <0%> (-7.52%)` | :arrow_down: |; | [...ulence\_closures/anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/337/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvYW5pc290cm9waWNfbWluaW11bV9kaXNzaXBhdGlvbi5qbA==) | `97.01% <0%> (-2.99%)` | :arrow_down: |; | ... and [6 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/337/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/337?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/337?src=pr&el=footer). Last update [965a879...f10b619](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/337?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/337#issuecomment-519107455:3270,learn,learn,3270,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/337#issuecomment-519107455,1,['learn'],['learn']
Usability,"73% ; ==========================================; Files 158 158 ; Lines 3807 3806 -1 ; ==========================================; - Hits 2197 2169 -28 ; - Misses 1610 1637 +27 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1071?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [...closure\_implementations/anisotropic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1071/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2FuaXNvdHJvcGljX2RpZmZ1c2l2aXR5Lmps) | `0.00% <0.00%> (-71.43%)` | :arrow_down: |; | [...rbulenceClosures/turbulence\_closure\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1071/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfZGlhZ25vc3RpY3Muamw=) | `7.14% <0.00%> (-5.72%)` | :arrow_down: |; | [src/BoundaryConditions/apply\_flux\_bcs.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1071/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9hcHBseV9mbHV4X2Jjcy5qbA==) | `50.00% <0.00%> (-5.56%)` | :arrow_down: |; | [...ions/verstappen\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1071/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3ZlcnN0YXBwZW5fYW5pc290cm9waWNfbWluaW11bV9kaXNzaXBhdGlvbi5qbA==) | `75.00% <0.00%> (-2.28%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1071?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1071?src=pr&el=footer). Last update [00ce8ee...82b0608](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1071?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1071#issuecomment-710110059:2287,learn,learn,2287,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1071#issuecomment-710110059,1,['learn'],['learn']
Usability,"75096 0.631413; 0.357241 0.479499 0.0708911; 0.922986 0.979659 0.117883. [:, :, 3] =; 0.868073 0.0576275 0.328323; 0.522754 0.663369 0.840316; 0.40434 0.631349 0.577748. julia> b = view(a, :, 2:3, 2); 3×2 view(::Array{Float64, 3}, :, 2:3, 2) with eltype Float64:; 0.575096 0.631413; 0.479499 0.0708911; 0.979659 0.117883. julia> typeof(b); SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}, Int64}, true}. julia> b.indices; (Base.Slice(Base.OneTo(3)), 2:3, 2); ```. One key difference with `SubArray` is that we want to offset indices. For example with `SubArray` we have. ```julia; julia> b[1, 1, 1]; 0.5750957798298579. julia> a[1, 2, 2]; 0.5750957798298579; ```. But I think we instead want offset indices that behave something like. ```julia; julia> c = OffsetArray(view(a, :, 2:3, 2:2), 0, 1, 1); 3×2×1 OffsetArray(view(::Array{Float64, 3}, :, 2:3, 2:2), 1:3, 2:3, 2:2) with eltype Float64 with indices 1:3×2:3×2:2:; [:, :, 2] =; 0.575096 0.631413; 0.479499 0.0708911; 0.979659 0.117883. julia> c[1, 2, 2]; 0.5750957798298579; ```. So the indices for `c` and `a` are identical. Something also seems a bit clearer: when we are computing on fields with `indices`, we compute index ""intersections"" to figure out the range of the computation. For example if we want to compute something like. ```julia; u * η; ```. right now our infrastructure would assume this is a 3D computation defined at every level. But what we probably want is to return an object that just computes `u * η` at the _surface_. This will work if `η.indices = (:, :, Nz:Nz)` for example; then the product `u * η` is also defined over the indices `(:, :, Nz:Nz)`. We can also use this feature to support `FieldTimeSeries` of sliced output. If we use this then a `Nothing` location is truly _reduced_, ie, the field has no location in the reduced direction. But a field like the free surface displacement is not reduced; it's `IndexedField` (or something), with `!isnothing(η.indices)`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2177#issuecomment-1029994350:1540,clear,clearer,1540,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2177#issuecomment-1029994350,2,['clear'],['clearer']
Usability,"8% 70.63% -0.05% ; ==========================================; Files 23 23 ; Lines 1395 1597 +202 ; ==========================================; + Hits 986 1128 +142 ; - Misses 409 469 +60; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <100%> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `92.68% <100%> (ø)` | :arrow_up: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `58.13% <0%> (-0.77%)` | :arrow_down: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `78.24% <0%> (+1.65%)` | :arrow_up: |; | [src/planetary\_constants.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388/diff?src=pr&el=tree#diff-c3JjL3BsYW5ldGFyeV9jb25zdGFudHMuamw=) | `15.21% <0%> (+2.31%)` | :arrow_up: |; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `86.27% <0%> (+2.49%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388?src=pr&el=footer). Last update [af5d513...ec6b13a](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/388#issuecomment-526922579:2308,learn,learn,2308,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/388#issuecomment-526922579,1,['learn'],['learn']
Usability,"8.34%)` | :arrow_down: |; | [src/Solvers/pressure\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/618/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvcHJlc3N1cmVfc29sdmVyLmps) | `50% <0%> (-2.64%)` | :arrow_down: |; | [src/Solvers/solve\_for\_pressure.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/618/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvc29sdmVfZm9yX3ByZXNzdXJlLmps) | `100% <0%> (ø)` | :arrow_up: |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/618/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `90.47% <0%> (+2.38%)` | :arrow_up: |; | [src/Logger.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/618/diff?src=pr&el=tree#diff-c3JjL0xvZ2dlci5qbA==) | `80.95% <0%> (+4.76%)` | :arrow_up: |; | [...nditions/solution\_and\_model\_boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/618/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9zb2x1dGlvbl9hbmRfbW9kZWxfYm91bmRhcnlfY29uZGl0aW9ucy5qbA==) | `94.59% <0%> (+5.4%)` | :arrow_up: |; | [src/Fields/field.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/618/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `78.68% <0%> (+6.55%)` | :arrow_up: |; | ... and [6 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/618/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/618?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/618?src=pr&el=footer). Last update [3e803ac...9698a1a](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/618?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/618#issuecomment-583407234:3388,learn,learn,3388,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/618#issuecomment-583407234,1,['learn'],['learn']
Usability,"9% <100.00%> (+1.09%)` | :arrow_up: |; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | `99.33% <100.00%> (+0.04%)` | :arrow_up: |; | [src/Coriolis/f\_plane.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL2ZfcGxhbmUuamw=) | `57.14% <0.00%> (-22.86%)` | :arrow_down: |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `66.66% <0.00%> (-8.34%)` | :arrow_down: |; | [src/Buoyancy/nonlinear\_equation\_of\_state.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L25vbmxpbmVhcl9lcXVhdGlvbl9vZl9zdGF0ZS5qbA==) | `72.00% <0.00%> (-3.00%)` | :arrow_down: |; | [src/TimeSteppers/generic\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9nZW5lcmljX3RpbWVfc3RlcHBpbmcuamw=) | `92.59% <0.00%> (-2.65%)` | :arrow_down: |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `87.50% <0.00%> (-1.39%)` | :arrow_down: |; | ... and [11 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952?src=pr&el=footer). Last update [10949b0...07f97f1](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/952#issuecomment-693763900:3280,learn,learn,3280,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/952#issuecomment-693763900,1,['learn'],['learn']
Usability,"91dHB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `51.92% <0.00%> (-5.53%)` | :arrow_down: |; | [src/Utils/Utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1070/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL1V0aWxzLmps) | `40.00% <ø> (ø)` | |; | [src/Utils/output\_writer\_diagnostic\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1070/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL291dHB1dF93cml0ZXJfZGlhZ25vc3RpY191dGlscy5qbA==) | `83.33% <ø> (+1.19%)` | :arrow_up: |; | [src/OutputWriters/jld2\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1070/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvamxkMl9vdXRwdXRfd3JpdGVyLmps) | `84.31% <33.33%> (-6.26%)` | :arrow_down: |; | [src/Utils/schedules.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1070/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3NjaGVkdWxlcy5qbA==) | `45.45% <45.45%> (ø)` | |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1070/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `85.29% <66.66%> (-0.22%)` | :arrow_down: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1070/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `82.65% <72.22%> (-10.38%)` | :arrow_down: |; | ... and [27 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1070/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1070?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1070?src=pr&el=footer). Last update [c5f47e0...ecb956f](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1070?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1070#issuecomment-712120955:3318,learn,learn,3318,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1070#issuecomment-712120955,1,['learn'],['learn']
Usability,"93ZW5vX250aF9vcmRlci5qbA==) | `0.00% <0.00%> (-53.20%)` | :arrow_down: |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/996/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [src/Fields/Fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/996/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `75.00% <0.00%> (-5.00%)` | :arrow_down: |; | [src/Grids/Grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/996/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL0dyaWRzLmps) | `83.33% <0.00%> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/996/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <0.00%> (ø)` | |; | [src/Utils/tuple\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/996/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3R1cGxlX3V0aWxzLmps) | `44.44% <0.00%> (ø)` | |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/996/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `88.88% <0.00%> (ø)` | |; | [src/AbstractOperations/derivatives.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/996/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9kZXJpdmF0aXZlcy5qbA==) | `88.88% <0.00%> (ø)` | |; | ... and [89 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/996/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/996?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/996?src=pr&el=footer). Last update [24e9c2c...395ee06](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/996?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/996#issuecomment-700746076:2944,learn,learn,2944,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/996#issuecomment-700746076,1,['learn'],['learn']
Usability,"95%)` | :arrow_down: |; | [src/Fields/abstract\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1061/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hYnN0cmFjdF9maWVsZC5qbA==) | `57.14% <0.00%> (-0.86%)` | :arrow_down: |; | [src/Fields/averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1061/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hdmVyYWdlZF9maWVsZC5qbA==) | `77.77% <ø> (+7.77%)` | :arrow_up: |; | [src/Fields/computed\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1061/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9jb21wdXRlZF9maWVsZC5qbA==) | `64.28% <0.00%> (ø)` | |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1061/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `82.35% <0.00%> (-5.89%)` | :arrow_down: |; | [src/Fields/show\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1061/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zaG93X2ZpZWxkcy5qbA==) | `0.00% <0.00%> (ø)` | |; | [src/Forcings/discrete\_forcing.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1061/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmdzL2Rpc2NyZXRlX2ZvcmNpbmcuamw=) | `42.85% <ø> (ø)` | |; | [src/Models/Models.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1061/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9Nb2RlbHMuamw=) | `100.00% <ø> (+16.66%)` | :arrow_up: |; | ... and [23 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1061/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1061?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1061?src=pr&el=footer). Last update [c5f47e0...12435ce](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1061?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1061#issuecomment-708240925:3243,learn,learn,3243,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1061#issuecomment-708240925,1,['learn'],['learn']
